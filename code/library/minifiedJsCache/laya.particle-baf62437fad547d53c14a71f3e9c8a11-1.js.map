{"version":3,"names":["EmitterBase","constructor","this","_frameTime","_emissionRate","_emissionTime","minEmissionTime","particleTemplate","_template","emissionRate","start","duration","Number","MAX_VALUE","stop","clear","emit","advanceTime","passedTime","parvs","parps","ParticleShader","Shader","super","vs","ps","ParticleShaderValue","Value2D","pShader","upload","size","RenderState2D","width","height","alpha","ALPHA","worldAlpha","ParticleData","static","settings","position","velocity","time","particleData","MathUtil","scaleVector3","emitterVelocitySensitivity","_tempVelocity","i","horizontalVelocity","lerp","minHorizontalVelocity","maxHorizontalVelocity","Math","random","horizontalAngle","PI","cos","sin","minVerticalVelocity","maxVerticalVelocity","startColor","_tempStartColor","endColor","_tempEndColor","disableColor","minStartColor","maxStartColor","minEndColor","maxEndColor","colorComponentInter","lerpVector4","sizeRotation","_tempSizeRotation","sizeRandom","minStartSize","maxStartSize","minEndSize","maxEndSize","minRotateSpeed","maxRotateSpeed","radius","_tempRadius","radiusRandom","minStartRadius","maxStartRadius","minEndRadius","maxEndRadius","radian","_tempRadian","minHorizontalStartRadian","maxHorizontalStartRadian","minVerticalStartRadian","maxVerticalStartRadian","useEndRadian","minHorizontalEndRadian","maxHorizontalEndRadian","minVerticalEndRadian","maxVerticalEndRadian","durationAddScale","ageAddScale","Float32Array","ParticleTemplate2D","Resource","texture","_floatCountPerVertex","_firstActiveElement","_firstNewElement","_firstFreeElement","_firstRetiredElement","_currentTime","x","y","sv","_key","_addReference","u_Duration","u_Gravity","gravity","u_EndVelocity","endVelocity","_blendFn","BlendMode","fns","blendState","_mesh","MeshParticle2D","getAMesh","maxPartices","initialize","getRenderType","releaseRender","floatStride","_vertices","_vb","getFloat32Array","_stride","bufi","bufStart","cornerY","cornerYSegement","textureCount","addParticleArray","nextFreeParticle","create","startIndex","j","offset","addNewParticlesToVertexBuffer","_vertexBuffer2D","buffer2D","append","subUpload","setNeedUpload","renderSubmit","valid","update","ILaya","timer","_delta","u_CurrentTime","blend","useMesh","u_texture","_getSource","LayaGL","renderDrawContext","drawElements2DTemp","MeshTopology","Triangles","IndexFormat","UInt16","_drawCounter","updateParticleForNative","elapsedTime","retireActiveParticles","freeRetiredParticles","particleDuration","index","particleAge","getMesh","getConchMesh","_conchMesh","getFirstNewElement","getFirstFreeElement","getFirstActiveElement","getFirstRetiredElement","setFirstFreeElement","_value","setFirstNewElement","addDrawCounter","activeBlendFunction","RenderStateContext","setBlend","_disposeResource","_removeReference","releaseMesh","activeBlendType","Emitter2D","template","_emitFun","setting","_posRange","positionVariance","webGLEmit","getRandom","value","pos","v","canvasEmit","Particle2D","Sprite","_matrix4","autoPlay","customRenderEnable","source","_source","loader","load","then","isCreateFromURL","init","emitter","_emitter","reset","graphics","addCmd","DrawParticleCmd","play","frameLoop","_loop","_canvasTemplate","customRender","context","_curMat","a","b","c","d","tx","ty","u_mmat","render","destroy","destroyChild","ParticleSetting","textureName","emitterType","pointEmitterPosition","pointEmitterPositionVariance","pointEmitterVelocity","pointEmitterVelocityAddVariance","boxEmitterCenterPosition","boxEmitterSize","boxEmitterVelocity","boxEmitterVelocityAddVariance","sphereEmitterCenterPosition","sphereEmitterRadius","sphereEmitterVelocity","sphereEmitterVelocityAddVariance","ringEmitterCenterPosition","ringEmitterRadius","ringEmitterVelocity","ringEmitterVelocityAddVariance","ringEmitterUp","defaultSetting","checkSetting","key","Loader","registerLoader","task","fetch","url","progress","createCallback","options","data","tex","ClassUtils","regClass","templet","particlesPerSecond","initialPosition","_timeLeftOver","_tempPosition","_templet","_timeBetweenParticles","_previousPosition","newPosition","subtractVector3","timeToSpend","currentTime","lerpVector3"],"sources":["../../src/layaAir/laya/particle/emitter/EmitterBase.ts","../../bin/tsc/layaAir/laya/particle/shader/Particle.vs.glsl","../../bin/tsc/layaAir/laya/particle/shader/Particle.ps.glsl","../../src/layaAir/laya/particle/shader/ParticleShader.ts","../../src/layaAir/laya/particle/shader/value/ParticleShaderValue.ts","../../src/layaAir/laya/particle/ParticleData.ts","../../src/layaAir/laya/particle/ParticleTemplate2D.ts","../../src/layaAir/laya/particle/emitter/Emitter2D.ts","../../src/layaAir/laya/particle/Particle2D.ts","../../src/layaAir/laya/particle/ParticleSetting.ts","../../src/layaAir/laya/particle/ParticleTemplate2DLoader.ts","../../src/layaAir/laya/particle/ModuleDef.ts","../../src/layaAir/laya/particle/ParticleEmitter.ts"],"sourcesContent":["import { ParticleTemplate2D } from \"../ParticleTemplate2D\"\r\n\r\n/**\r\n * <code>EmitterBase</code> 类是粒子发射器类\r\n */\r\nexport class EmitterBase {\r\n    /**\r\n     * 积累的帧时间\r\n     */\r\n    protected _frameTime: number = 0;\r\n    /**\r\n     * 粒子发射速率\r\n     */\r\n    protected _emissionRate: number = 60; // emitted particles per second\r\n    /**\r\n     * 当前剩余发射时间\r\n     */\r\n    protected _emissionTime: number = 0;\r\n    /**\r\n     * 发射粒子最小时间间隔\r\n     */\r\n    minEmissionTime: number = 1 / 60;\r\n\r\n    /**@internal */\r\n    _template: ParticleTemplate2D;\r\n\r\n    /**\r\n     * 设置粒子粒子模板\r\n     * @param particleTemplate 粒子模板\r\n     *\r\n     */\r\n    set particleTemplate(particleTemplate: ParticleTemplate2D) {\r\n        this._template = particleTemplate;\r\n    }\r\n\r\n    /**\r\n     * 设置粒子发射速率\r\n     * @param emissionRate 粒子发射速率 (个/秒)\r\n     */\r\n    set emissionRate(_emissionRate: number) {\r\n        if (_emissionRate <= 0) return;\r\n        this._emissionRate = _emissionRate;\r\n        (_emissionRate > 0) && (this.minEmissionTime = 1 / _emissionRate);\r\n    }\r\n\r\n    /**\r\n     * 获取粒子发射速率\r\n     * @return 发射速率  粒子发射速率 (个/秒)\r\n     */\r\n    get emissionRate(): number {\r\n        return this._emissionRate;\r\n    }\r\n\r\n    /**\r\n     * 开始发射粒子\r\n     * @param duration 发射持续的时间(秒)\r\n     */\r\n    start(duration: number = Number.MAX_VALUE): void {\r\n        if (this._emissionRate != 0)\r\n            this._emissionTime = duration;\r\n    }\r\n\r\n    /**\r\n     * 停止发射粒子\r\n     * @param clearParticles 是否清理当前的粒子\r\n     */\r\n    stop(): void {\r\n        this._emissionTime = 0;\r\n    }\r\n\r\n    /**\r\n     * 清理当前的活跃粒子\r\n     * @param clearTexture 是否清理贴图数据,若清除贴图数据将无法再播放\r\n     */\r\n    clear(): void {\r\n        this._emissionTime = 0;\r\n    }\r\n\r\n    /**\r\n     * 发射一个粒子\r\n     *\r\n     */\r\n    emit(): void {\r\n\r\n    }\r\n\r\n    /**\r\n     * 时钟前进\r\n     * @param passedTime 前进时间\r\n     *\r\n     */\r\n    advanceTime(passedTime: number = 1): void {\r\n        this._emissionTime -= passedTime;\r\n        if (this._emissionTime < 0) return;\r\n        this._frameTime += passedTime;\r\n        if (this._frameTime < this.minEmissionTime) return;\r\n        while (this._frameTime > this.minEmissionTime) {\r\n            this._frameTime -= this.minEmissionTime;\r\n            this.emit();\r\n        }\r\n    }\r\n}\r\n\r\n\r\n","attribute vec4 a_CornerTextureCoordinate;\r\nattribute vec3 a_Position;\r\nattribute vec3 a_Velocity;\r\nattribute vec4 a_StartColor;\r\nattribute vec4 a_EndColor;\r\nattribute vec3 a_SizeRotation;\r\nattribute vec2 a_Radius;\r\nattribute vec4 a_Radian;\r\nattribute float a_AgeAddScale;\r\nattribute float a_Time;\r\n\r\nvarying vec4 v_Color;\r\nvarying vec2 v_TextureCoordinate;\r\n\r\nuniform float u_CurrentTime;\r\nuniform float u_Duration;\r\nuniform float u_EndVelocity;\r\nuniform vec3 u_Gravity;\r\n\r\nuniform vec2 size;\r\nuniform mat4 u_mmat;\r\n\r\nvec4 ComputeParticlePosition(in vec3 position, in vec3 velocity,in float age,in float normalizedAge)\r\n{\r\n\r\n   float startVelocity = length(velocity);//起始标量速度\r\n   float endVelocity = startVelocity * u_EndVelocity;//结束标量速度\r\n\r\n   float velocityIntegral = startVelocity * normalizedAge +(endVelocity - startVelocity) * normalizedAge *normalizedAge/2.0;//计算当前速度的标量（单位空间），vt=v0*t+(1/2)*a*(t^2)\r\n   \r\n   vec3 addPosition = normalize(velocity) * velocityIntegral * u_Duration;//计算受自身速度影响的位置，转换标量到矢量    \r\n   addPosition += u_Gravity * age * normalizedAge;//计算受重力影响的位置\r\n   \r\n   float radius=mix(a_Radius.x, a_Radius.y, normalizedAge); //计算粒子受半径和角度影响（无需计算角度和半径时，可用宏定义优化屏蔽此计算）\r\n   float radianHorizontal =mix(a_Radian.x,a_Radian.z,normalizedAge);\r\n   float radianVertical =mix(a_Radian.y,a_Radian.w,normalizedAge);\r\n   \r\n   float r =cos(radianVertical)* radius;\r\n   addPosition.y += sin(radianVertical) * radius;\r\n\t\r\n   addPosition.x += cos(radianHorizontal) *r;\r\n   addPosition.z += sin(radianHorizontal) *r;\r\n  \r\n   addPosition.y=-addPosition.y;//2D粒子位置更新需要取负，2D粒子坐标系Y轴正向朝上\r\n   position+=addPosition;\r\n   return  vec4(position,1.0);\r\n}\r\n\r\nfloat ComputeParticleSize(in float startSize,in float endSize, in float normalizedAge)\r\n{    \r\n    float size = mix(startSize, endSize, normalizedAge);\r\n    return size;\r\n}\r\n\r\nmat2 ComputeParticleRotation(in float rot,in float age)\r\n{    \r\n    float rotation =rot * age;\r\n    //计算2x2旋转矩阵.\r\n    float c = cos(rotation);\r\n    float s = sin(rotation);\r\n    return mat2(c, -s, s, c);\r\n}\r\n\r\nvec4 ComputeParticleColor(in vec4 startColor,in vec4 endColor,in float normalizedAge)\r\n{\r\n\tvec4 color=mix(startColor,endColor,normalizedAge);\r\n    //硬编码设置，使粒子淡入很快，淡出很慢,6.7的缩放因子把置归一在0到1之间，可以谷歌x*(1-x)*(1-x)*6.7的制图表\r\n    color.a *= normalizedAge * (1.0-normalizedAge) * (1.0-normalizedAge) * 6.7;\r\n   \r\n    return color;\r\n}\r\n\r\nvoid main()\r\n{\r\n   float age = u_CurrentTime - a_Time;\r\n   age *= 1.0 + a_AgeAddScale;\r\n   float normalizedAge = clamp(age / u_Duration,0.0,1.0);\r\n   gl_Position = ComputeParticlePosition(a_Position, a_Velocity, age, normalizedAge);//计算粒子位置\r\n   float pSize = ComputeParticleSize(a_SizeRotation.x,a_SizeRotation.y, normalizedAge);\r\n   mat2 rotation = ComputeParticleRotation(a_SizeRotation.z, age);\r\n\t\r\n    mat4 mat=u_mmat;\r\n    gl_Position=vec4((mat*gl_Position).xy,0.0,1.0);\r\n    gl_Position.xy += (rotation*a_CornerTextureCoordinate.xy) * pSize*vec2(mat[0][0],mat[1][1]);\r\n    gl_Position=vec4((gl_Position.x/size.x-0.5)*2.0,(0.5-gl_Position.y/size.y)*2.0,0.0,1.0);\r\n   \r\n   v_Color = ComputeParticleColor(a_StartColor,a_EndColor, normalizedAge);\r\n   v_TextureCoordinate =a_CornerTextureCoordinate.zw;\r\n}\r\n\r\n","#if defined(GL_FRAGMENT_PRECISION_HIGH)\r\nprecision highp float;\r\n#else\r\nprecision mediump float;\r\n#endif\r\n\r\nvarying vec4 v_Color;\r\nvarying vec2 v_TextureCoordinate;\r\nuniform sampler2D u_texture;\r\n\r\nvoid main()\r\n{\t\r\n\tgl_FragColor=texture2D(u_texture,v_TextureCoordinate)*v_Color;\r\n\tgl_FragColor.xyz *= v_Color.w;\r\n}","import { Shader } from \"../../webgl/shader/Shader\";\r\n\r\nimport parvs from \"./Particle.vs.glsl\";\r\nimport parps from \"./Particle.ps.glsl\";\r\n/**\r\n *  @private\r\n */\r\nexport class ParticleShader extends Shader {\r\n\tstatic vs: string = parvs;// this.__INCLUDESTR__(\"files/Particle.vs\");\r\n\tstatic ps: string = parps;//this.__INCLUDESTR__(\"files/Particle.ps\");\r\n\r\n\t//TODO:coverage\r\n\tconstructor() {\r\n\t\tsuper(parvs, parps, \"ParticleShader\", null, ['a_CornerTextureCoordinate', 0, 'a_Position', 1, 'a_Velocity', 2, 'a_StartColor', 3,\r\n\t\t\t'a_EndColor', 4, 'a_SizeRotation', 5, 'a_Radius', 6, 'a_Radian', 7, 'a_AgeAddScale', 8, 'a_Time', 9]);\r\n\t}\r\n}\r\n\r\n","import { ParticleShader } from \"../ParticleShader\"\r\nimport { Value2D } from \"../../../webgl/shader/d2/value/Value2D\";\r\nimport { RenderState2D } from \"../../../webgl/utils/RenderState2D\";\r\nimport { ShaderValue } from \"../../../webgl/shader/ShaderValue\";\r\n\r\n\r\n/**\r\n * 2D粒子\r\n */\r\nexport class ParticleShaderValue extends Value2D {\r\n    private static pShader: ParticleShader = null; //new ParticleShader();\r\n    /*\r\n    public var a_CornerTextureCoordinate:Array=[4, WebGLContext.FLOAT, false, 116, 0];\r\n    public var a_Position:Array=[3, WebGLContext.FLOAT, false, 116, 16];\r\n    public var a_Velocity:Array=[3, WebGLContext.FLOAT, false, 116, 28];\r\n    public var a_StartColor:Array=[4, WebGLContext.FLOAT, false, 116, 40];\r\n    public var a_EndColor:Array=[4, WebGLContext.FLOAT, false, 116, 56];\r\n    public var a_SizeRotation:Array=[3, WebGLContext.FLOAT, false, 116, 72];\r\n    public var a_Radius:Array = [2, WebGLContext.FLOAT, false, 116, 84];\r\n    public var a_Radian:Array=[4, WebGLContext.FLOAT, false, 116, 92];\r\n    public var a_AgeAddScale:Array=[1, WebGLContext.FLOAT, false, 116, 108];\r\n    public var a_Time:Array=[1, WebGLContext.FLOAT, false, 116, 112];\r\n    */\r\n    u_CurrentTime: number;\r\n    u_Duration: number;\r\n    u_Gravity: Float32Array; //v3\r\n    u_EndVelocity: number;\r\n    u_texture: any;\r\n\r\n    constructor() {\r\n        super(0, 0);\r\n        if (!ParticleShaderValue.pShader) {\r\n            ParticleShaderValue.pShader = new ParticleShader();\r\n        }\r\n        /* �ŵ� ParticleShader ����\r\n        this._attribLocation = ['a_CornerTextureCoordinate', 0, 'a_Position', 1, 'a_Velocity', 2, 'a_StartColor', 3,\r\n                                'a_EndColor',4,'a_SizeRotation',5,'a_Radius',6,'a_Radian',7,'a_AgeAddScale',8,'a_Time',9];\r\n        */\r\n    }\r\n    /**\r\n     * @override\r\n     */\r\n    upload(): void {\r\n        var size: any[] = this.size;\r\n        size[0] = RenderState2D.width;\r\n        size[1] = RenderState2D.height;\r\n        this.alpha = this.ALPHA * RenderState2D.worldAlpha;\r\n        ParticleShaderValue.pShader.upload((<ShaderValue>this));\r\n    }\r\n}\r\n\r\n","import { ParticleSetting } from \"./ParticleSetting\";\r\nimport { MathUtil } from \"../maths/MathUtil\";\r\n\r\n/**\r\n *  @private\r\n */\r\nexport class ParticleData {\r\n    private static _tempVelocity: Float32Array = new Float32Array(3);\r\n    private static _tempStartColor: Float32Array = new Float32Array(4);\r\n    private static _tempEndColor: Float32Array = new Float32Array(4);\r\n    private static _tempSizeRotation: Float32Array = new Float32Array(3);\r\n    private static _tempRadius: Float32Array = new Float32Array(2);\r\n    private static _tempRadian: Float32Array = new Float32Array(4);\r\n\r\n    position: Float32Array;\r\n    velocity: Float32Array;\r\n    startColor: Float32Array;\r\n    endColor: Float32Array;\r\n    sizeRotation: Float32Array;\r\n    radius: Float32Array;\r\n    radian: Float32Array;\r\n    durationAddScale: number;\r\n    time: number;\r\n\r\n    constructor() {\r\n\r\n    }\r\n\r\n    static create(settings: ParticleSetting, position: Float32Array, velocity: Float32Array, time: number): ParticleData {\r\n        var particleData: ParticleData = new ParticleData();\r\n        particleData.position = position;\r\n\r\n        MathUtil.scaleVector3(velocity, settings.emitterVelocitySensitivity, ParticleData._tempVelocity);\r\n        var horizontalVelocity: number = MathUtil.lerp(settings.minHorizontalVelocity, settings.maxHorizontalVelocity, Math.random());\r\n        var horizontalAngle: number = Math.random() * Math.PI * 2;\r\n        ParticleData._tempVelocity[0] += horizontalVelocity * Math.cos(horizontalAngle);\r\n        ParticleData._tempVelocity[2] += horizontalVelocity * Math.sin(horizontalAngle);\r\n        ParticleData._tempVelocity[1] += MathUtil.lerp(settings.minVerticalVelocity, settings.maxVerticalVelocity, Math.random());\r\n        particleData.velocity = ParticleData._tempVelocity;\r\n\r\n        particleData.startColor = ParticleData._tempStartColor;\r\n        particleData.endColor = ParticleData._tempEndColor;\r\n        var i: number;\r\n        if (settings.disableColor) {\r\n            for (i = 0; i < 3; i++) {\r\n                particleData.startColor[i] = 1;\r\n                particleData.endColor[i] = 1;\r\n            }\r\n            particleData.startColor[i] = MathUtil.lerp(settings.minStartColor[i], settings.maxStartColor[i], Math.random());//R、G、B、A插值\r\n            particleData.endColor[i] = MathUtil.lerp(settings.minEndColor[i], settings.maxEndColor[i], Math.random());//R、G、B、A插值\r\n\r\n        }\r\n        else {\r\n            if (settings.colorComponentInter) {\r\n                for (i = 0; i < 4; i++) {\r\n                    particleData.startColor[i] = MathUtil.lerp(settings.minStartColor[i], settings.maxStartColor[i], Math.random());//R、G、B、A插值\r\n                    particleData.endColor[i] = MathUtil.lerp(settings.minEndColor[i], settings.maxEndColor[i], Math.random());//R、G、B、A插值\r\n                }\r\n            } else {\r\n                MathUtil.lerpVector4(settings.minStartColor, settings.maxStartColor, Math.random(), particleData.startColor);//RGBA统一插值\r\n                MathUtil.lerpVector4(settings.minEndColor, settings.maxEndColor, Math.random(), particleData.endColor);//RGBA统一插值\r\n            }\r\n        }\r\n\r\n        particleData.sizeRotation = ParticleData._tempSizeRotation;\r\n        var sizeRandom: number = Math.random();\r\n        particleData.sizeRotation[0] = MathUtil.lerp(settings.minStartSize, settings.maxStartSize, sizeRandom);//StartSize\r\n        particleData.sizeRotation[1] = MathUtil.lerp(settings.minEndSize, settings.maxEndSize, sizeRandom);//EndSize\r\n        particleData.sizeRotation[2] = MathUtil.lerp(settings.minRotateSpeed, settings.maxRotateSpeed, Math.random());//Rotation\r\n\r\n        particleData.radius = ParticleData._tempRadius;\r\n        var radiusRandom: number = Math.random();\r\n        particleData.radius[0] = MathUtil.lerp(settings.minStartRadius, settings.maxStartRadius, radiusRandom);//StartRadius\r\n        particleData.radius[1] = MathUtil.lerp(settings.minEndRadius, settings.maxEndRadius, radiusRandom);//EndRadius\r\n\r\n        particleData.radian = ParticleData._tempRadian;\r\n        particleData.radian[0] = MathUtil.lerp(settings.minHorizontalStartRadian, settings.maxHorizontalStartRadian, Math.random());//StartHorizontalRadian\r\n        particleData.radian[1] = MathUtil.lerp(settings.minVerticalStartRadian, settings.maxVerticalStartRadian, Math.random());//StartVerticleRadian\r\n        var useEndRadian: boolean = settings.useEndRadian;\r\n        particleData.radian[2] = useEndRadian ? MathUtil.lerp(settings.minHorizontalEndRadian, settings.maxHorizontalEndRadian, Math.random()) : particleData.radian[0];//EndHorizontalRadian\r\n        particleData.radian[3] = useEndRadian ? MathUtil.lerp(settings.minVerticalEndRadian, settings.maxVerticalEndRadian, Math.random()) : particleData.radian[1];//EndVerticleRadian\r\n\r\n        particleData.durationAddScale = settings.ageAddScale * Math.random();\r\n\r\n        particleData.time = time;\r\n        return particleData;\r\n    }\r\n\r\n}\r\n\r\n\r\n","import { ParticleSetting } from \"./ParticleSetting\";\r\nimport { ISubmit } from \"../webgl/submit/ISubmit\";\r\nimport { ParticleShaderValue } from \"./shader/value/ParticleShaderValue\";\r\nimport { ILaya } from \"../../ILaya\";\r\nimport { BlendMode } from \"../webgl/canvas/BlendMode\";\r\nimport { MeshParticle2D } from \"../webgl/utils/MeshParticle2D\";\r\nimport { VertexBuffer2D } from \"../webgl/utils/VertexBuffer2D\";\r\nimport { Stat } from \"../utils/Stat\";\r\nimport { RenderStateContext } from \"../RenderEngine/RenderStateContext\";\r\nimport { LayaGL } from \"../layagl/LayaGL\";\r\nimport { MeshTopology } from \"../RenderEngine/RenderEnum/RenderPologyMode\";\r\nimport { IndexFormat } from \"../RenderEngine/RenderEnum/IndexFormat\";\r\nimport { Texture } from \"../resource/Texture\";\r\nimport { Resource } from \"../resource/Resource\";\r\nimport { ParticleData } from \"./ParticleData\";\r\n\r\nexport class ParticleTemplate2D extends Resource implements ISubmit {\r\n    /**\r\n     * 粒子配置数据 \r\n     */\r\n    public readonly settings: ParticleSetting;\r\n    /**\r\n     * 粒子贴图 \r\n     */\r\n    public readonly texture: Texture;\r\n\r\n    protected _vertices: Float32Array;\r\n    protected _mesh: MeshParticle2D;\r\n    protected _conchMesh: any;\r\n\r\n    protected _floatCountPerVertex: number = 29;//0~3为CornerTextureCoordinate,4~6为Position,7~9Velocity,10到13为StartColor,14到17为EndColor,18到20位SizeRotation，21到22位Radius,23到26位Radian，27为DurationAddScaleShaderValue,28为Time\r\n\r\n    protected _firstActiveElement: number = 0;\r\n    protected _firstNewElement: number = 0;\r\n    protected _firstFreeElement: number = 0;\r\n    protected _firstRetiredElement: number = 0;\r\n    /**@internal */\r\n    _currentTime: number = 0;\r\n    protected _drawCounter: number;\r\n\r\n    static activeBlendType: number = -1;\r\n    x: number = 0;\r\n\r\n    y: number = 0;\r\n    protected _blendFn: Function;\r\n    sv: ParticleShaderValue = new ParticleShaderValue();\r\n\r\n    /**@internal */\r\n    _key: any = {};\r\n\r\n    constructor(settings: ParticleSetting, texture: Texture) {\r\n        super();\r\n\r\n        this.settings = settings;\r\n        this.texture = texture;\r\n        this.texture._addReference();\r\n\r\n        this.sv.u_Duration = this.settings.duration;\r\n        this.sv.u_Gravity = this.settings.gravity;\r\n        this.sv.u_EndVelocity = this.settings.endVelocity;\r\n\r\n        this._blendFn = BlendMode.fns[settings.blendState]; //context._targets?BlendMode.targetFns[blendType]:BlendMode.fns[blendType];\r\n        this._mesh = MeshParticle2D.getAMesh(this.settings.maxPartices);\r\n\r\n        this.initialize();\r\n    }\r\n\r\n    getRenderType(): number { return -111 }\r\n\r\n    releaseRender(): void { }\r\n\r\n    protected initialize(): void {\r\n        var floatStride: number = 0;\r\n        this._vertices = this._mesh._vb.getFloat32Array();\r\n        floatStride = this._mesh._stride / 4;\r\n        var bufi: number = 0;\r\n        var bufStart: number = 0;\r\n        for (var i: number = 0; i < this.settings.maxPartices; i++) {\r\n            var random: number = Math.random();\r\n            var cornerYSegement: number = this.settings.textureCount ? 1.0 / this.settings.textureCount : 1.0;\r\n            var cornerY: number;\r\n\r\n            for (cornerY = 0; cornerY < this.settings.textureCount; cornerY += cornerYSegement) {\r\n                if (random < cornerY + cornerYSegement)\r\n                    break;\r\n            }\r\n            this._vertices[bufi++] = -1;\r\n            this._vertices[bufi++] = -1;\r\n            this._vertices[bufi++] = 0;\r\n            this._vertices[bufi++] = cornerY;\r\n            bufi = (bufStart += floatStride);\r\n\r\n            this._vertices[bufi++] = 1;\r\n            this._vertices[bufi++] = -1;\r\n            this._vertices[bufi++] = 1;\r\n            this._vertices[bufi++] = cornerY;\r\n            bufi = bufStart += floatStride;\r\n\r\n            this._vertices[bufi++] = 1;\r\n            this._vertices[bufi++] = 1;\r\n            this._vertices[bufi++] = 1;\r\n            this._vertices[bufi++] = cornerY + cornerYSegement;\r\n            bufi = bufStart += floatStride;\r\n\r\n            this._vertices[bufi++] = -1;\r\n            this._vertices[bufi++] = 1;\r\n            this._vertices[bufi++] = 0;\r\n            this._vertices[bufi++] = cornerY + cornerYSegement;\r\n            bufi = bufStart += floatStride;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param position \r\n     * @param velocity \r\n     * @override\r\n     */\r\n    addParticleArray(position: Float32Array, velocity: Float32Array): void {\r\n        // TODO Auto Generated method stub\r\n        position[0] += this.x;\r\n        position[1] += this.y;\r\n\r\n        //由于循环队列判断算法，当下一个freeParticle等于retiredParticle时不添加例子，意味循环队列中永远有一个空位。（由于此判断算法快速、简单，所以放弃了使循环队列饱和的复杂算法（需判断freeParticle在retiredParticle前、后两种情况并不同处理））\r\n        var nextFreeParticle: number = this._firstFreeElement + 1;\r\n\r\n        if (nextFreeParticle >= this.settings.maxPartices)\r\n            nextFreeParticle = 0;\r\n\r\n        if (nextFreeParticle === this._firstRetiredElement)\r\n            return;\r\n\r\n        //计算vb数据，填入 _vertices\r\n        /**\r\n         * _mesh.addParticle(settings, position, velocity, _currentTime)\r\n         */\r\n        var particleData: ParticleData = ParticleData.create(this.settings, position, velocity, this._currentTime);\r\n\r\n        var startIndex: number = this._firstFreeElement * this._floatCountPerVertex * 4;\r\n        for (var i: number = 0; i < 4; i++) {\r\n            var j: number, offset: number;\r\n            for (j = 0, offset = 4; j < 3; j++)\r\n                this._vertices[startIndex + i * this._floatCountPerVertex + offset + j] = particleData.position[j];\r\n\r\n            for (j = 0, offset = 7; j < 3; j++)\r\n                this._vertices[startIndex + i * this._floatCountPerVertex + offset + j] = particleData.velocity[j];\r\n\r\n            for (j = 0, offset = 10; j < 4; j++)\r\n                this._vertices[startIndex + i * this._floatCountPerVertex + offset + j] = particleData.startColor[j];\r\n\r\n            for (j = 0, offset = 14; j < 4; j++)\r\n                this._vertices[startIndex + i * this._floatCountPerVertex + offset + j] = particleData.endColor[j];\r\n\r\n            for (j = 0, offset = 18; j < 3; j++)//StartSize,EndSize,Rotation\r\n                this._vertices[startIndex + i * this._floatCountPerVertex + offset + j] = particleData.sizeRotation[j];\r\n\r\n            for (j = 0, offset = 21; j < 2; j++)//StartRadius,EndRadius\r\n                this._vertices[startIndex + i * this._floatCountPerVertex + offset + j] = particleData.radius[j];\r\n\r\n            for (j = 0, offset = 23; j < 4; j++)//StartHorizontalRadian,StartVerticleRadian,EndHorizontalRadian,EndVerticleRadian\r\n                this._vertices[startIndex + i * this._floatCountPerVertex + offset + j] = particleData.radian[j];\r\n\r\n            this._vertices[startIndex + i * this._floatCountPerVertex + 27] = particleData.durationAddScale;\r\n\r\n            this._vertices[startIndex + i * this._floatCountPerVertex + 28] = particleData.time;\r\n        }\r\n\r\n        this._firstFreeElement = nextFreeParticle;\r\n    }\r\n\r\n    /*\r\n    override protected function loadContent():void \r\n    {\r\n        var indexes:Uint16Array = new Uint16Array(settings.maxPartices * 6);\r\n    \t\r\n        for (var i:int = 0; i < settings.maxPartices; i++) {\r\n            indexes[i * 6 + 0] = (i * 4 + 0);\r\n            indexes[i * 6 + 1] = (i * 4 + 1);\r\n            indexes[i * 6 + 2] = (i * 4 + 2);\r\n        \t\r\n            indexes[i * 6 + 3] = (i * 4 + 0);\r\n            indexes[i * 6 + 4] = (i * 4 + 2);\r\n            indexes[i * 6 + 5] = (i * 4 + 3);\r\n        }\r\n    \t\r\n        _indexBuffer2D.clear();\r\n        _indexBuffer2D.append(indexes);\r\n        _indexBuffer2D.upload();\r\n    }\r\n    */\r\n    /**\r\n     * @override\r\n     */\r\n    addNewParticlesToVertexBuffer(): void {\r\n        var _vertexBuffer2D: VertexBuffer2D = this._mesh._vb;\r\n        _vertexBuffer2D.buffer2D.clear();\r\n        _vertexBuffer2D.buffer2D.append(this._vertices);\r\n\r\n        var start: number;\r\n        if (this._firstNewElement < this._firstFreeElement) {\r\n            // 如果新增加的粒子在Buffer中是连续的区域，只upload一次\r\n            start = this._firstNewElement * 4 * this._floatCountPerVertex * 4;\r\n            _vertexBuffer2D.buffer2D.subUpload(start, start, start + (this._firstFreeElement - this._firstNewElement) * 4 * this._floatCountPerVertex * 4);\r\n        } else {\r\n            //如果新增粒子区域超过Buffer末尾则循环到开头，需upload两次\r\n            start = this._firstNewElement * 4 * this._floatCountPerVertex * 4;\r\n            _vertexBuffer2D.buffer2D.subUpload(start, start, start + (this.settings.maxPartices - this._firstNewElement) * 4 * this._floatCountPerVertex * 4);\r\n\r\n            if (this._firstFreeElement > 0) {\r\n                _vertexBuffer2D.buffer2D.setNeedUpload();\r\n                _vertexBuffer2D.buffer2D.subUpload(0, 0, this._firstFreeElement * 4 * this._floatCountPerVertex * 4);\r\n            }\r\n        }\r\n        this._firstNewElement = this._firstFreeElement;\r\n    }\r\n\r\n\r\n    renderSubmit(): number {\r\n        if (this.texture && this.texture.valid) {\r\n            this.update(ILaya.timer._delta);\r\n            this.sv.u_CurrentTime = this._currentTime;\r\n            if (this._firstNewElement != this._firstFreeElement) {\r\n                this.addNewParticlesToVertexBuffer();\r\n            }\r\n\r\n            this.blend();\r\n\r\n            if (this._firstActiveElement != this._firstFreeElement) {\r\n                //var gl: WebGLRenderingContext = RenderStateContext.mainContext;\r\n                this._mesh.useMesh();\r\n                //_vertexBuffer2D.bind();\r\n                //_indexBuffer2D.bind();\r\n                this.sv.u_texture = this.texture._getSource();\r\n                this.sv.upload();\r\n\r\n\r\n                if (this._firstActiveElement < this._firstFreeElement) {\r\n                    LayaGL.renderDrawContext.drawElements2DTemp(MeshTopology.Triangles, (this._firstFreeElement - this._firstActiveElement) * 6, IndexFormat.UInt16, this._firstActiveElement * 6 * 2);\r\n                }\r\n                else {\r\n\r\n                    LayaGL.renderDrawContext.drawElements2DTemp(MeshTopology.Triangles, (this.settings.maxPartices - this._firstActiveElement) * 6, IndexFormat.UInt16, this._firstActiveElement * 6 * 2);\r\n                    if (this._firstFreeElement > 0)\r\n                        LayaGL.renderDrawContext.drawElements2DTemp(MeshTopology.Triangles, this._firstFreeElement * 6, IndexFormat.UInt16, 0);\r\n                }\r\n            }\r\n            this._drawCounter++;\r\n        }\r\n        return 1;\r\n    }\r\n\r\n    updateParticleForNative(): void {\r\n        if (this.texture && this.texture.valid) {\r\n            this.update(ILaya.timer._delta);\r\n            this.sv.u_CurrentTime = this._currentTime;\r\n            if (this._firstNewElement != this._firstFreeElement) {\r\n                this._firstNewElement = this._firstFreeElement;\r\n            }\r\n        }\r\n    }\r\n\r\n    update(elapsedTime: number): void {\r\n        this._currentTime += elapsedTime / 1000;\r\n        this.retireActiveParticles();\r\n        this.freeRetiredParticles();\r\n\r\n        if (this._firstActiveElement == this._firstFreeElement)\r\n            this._currentTime = 0;\r\n\r\n        if (this._firstRetiredElement == this._firstActiveElement)\r\n            this._drawCounter = 0;\r\n    }\r\n\r\n    private retireActiveParticles(): void {\r\n        const epsilon: number = 0.0001;\r\n        var particleDuration: number = this.settings.duration;\r\n        while (this._firstActiveElement != this._firstNewElement) {\r\n            var offset: number = this._firstActiveElement * this._floatCountPerVertex * 4;\r\n            var index: number = offset + 28;//28为Time\r\n            var particleAge: number = this._currentTime - this._vertices[index];\r\n            particleAge *= (1.0 + this._vertices[offset + 27]);//真实时间\r\n            if (particleAge + epsilon < particleDuration)\r\n                break;\r\n\r\n            this._vertices[index] = this._drawCounter;\r\n\r\n            this._firstActiveElement++;\r\n\r\n            if (this._firstActiveElement >= this.settings.maxPartices)\r\n                this._firstActiveElement = 0;\r\n        }\r\n    }\r\n\r\n    private freeRetiredParticles(): void {\r\n        while (this._firstRetiredElement != this._firstActiveElement) {\r\n            var age: number = this._drawCounter - this._vertices[this._firstRetiredElement * this._floatCountPerVertex * 4 + 28];//28为Time\r\n            //GPU从不滞后于CPU两帧，出于显卡驱动BUG等安全因素考虑滞后三帧\r\n            if (age < 3)\r\n                break;\r\n\r\n            this._firstRetiredElement++;\r\n\r\n            if (this._firstRetiredElement >= this.settings.maxPartices)\r\n                this._firstRetiredElement = 0;\r\n        }\r\n    }\r\n\r\n    getMesh(): MeshParticle2D {\r\n        return this._mesh;\r\n    }\r\n\r\n    getConchMesh(): any {\r\n        return this._conchMesh;\r\n    }\r\n\r\n    getFirstNewElement(): number {\r\n        return this._firstNewElement;\r\n    }\r\n\r\n    getFirstFreeElement(): number {\r\n        return this._firstFreeElement;\r\n    }\r\n\r\n    getFirstActiveElement(): number {\r\n        return this._firstActiveElement;\r\n    }\r\n\r\n    getFirstRetiredElement(): number {\r\n        return this._firstRetiredElement;\r\n    }\r\n\r\n    setFirstFreeElement(_value: number): void {\r\n        this._firstFreeElement = _value;\r\n    }\r\n\r\n    setFirstNewElement(_value: number): void {\r\n        this._firstNewElement = _value;\r\n    }\r\n\r\n    addDrawCounter(): void {\r\n        this._drawCounter++;\r\n    }\r\n\r\n    blend(): void {\r\n        if (BlendMode.activeBlendFunction !== this._blendFn) {\r\n            RenderStateContext.setBlend(true);\r\n            this._blendFn();\r\n            BlendMode.activeBlendFunction = this._blendFn;\r\n        }\r\n    }\r\n\r\n    protected _disposeResource(): void {\r\n        this.texture._removeReference();\r\n        this._mesh.releaseMesh();\r\n    }\r\n}\r\n\r\n","import { EmitterBase } from \"./EmitterBase\";\r\nimport { ParticleSetting } from \"../ParticleSetting\";\r\nimport { ParticleTemplate2D } from \"../ParticleTemplate2D\";\r\n\r\n/**\r\n * \r\n * @private\r\n */\r\nexport class Emitter2D extends EmitterBase {\r\n    setting: ParticleSetting;\r\n    private _posRange: Float32Array;\r\n    private _emitFun: Function;\r\n\r\n    constructor(_template: ParticleTemplate2D) {\r\n        super();\r\n        this.template = _template;\r\n    }\r\n    set template(template: ParticleTemplate2D) {\r\n        this._template = template;\r\n        if (!template) {\r\n            this._emitFun = null;\r\n            this.setting = null;\r\n            this._posRange = null;\r\n        };\r\n        this.setting = template.settings;\r\n        this._posRange = this.setting.positionVariance;\r\n        if (this._template instanceof ParticleTemplate2D) {\r\n            this._emitFun = this.webGLEmit;\r\n        }\r\n    }\r\n    get template(): ParticleTemplate2D {\r\n        return this._template;\r\n    }\r\n    /**\r\n     * @override\r\n     */\r\n    emit(): void {\r\n        super.emit();\r\n        if (this._emitFun != null)\r\n            this._emitFun();\r\n    }\r\n\r\n    getRandom(value: number): number {\r\n        return (Math.random() * 2 - 1) * value;\r\n    }\r\n\r\n    webGLEmit(): void {\r\n        var pos: Float32Array = new Float32Array(3);\r\n        pos[0] = this.getRandom(this._posRange[0]);\r\n        pos[1] = this.getRandom(this._posRange[1]);\r\n        pos[2] = this.getRandom(this._posRange[2]);\r\n        var v: Float32Array = new Float32Array(3);\r\n        v[0] = 0;\r\n        v[1] = 0;\r\n        v[2] = 0;\r\n        this._template.addParticleArray(pos, v);\r\n    }\r\n    canvasEmit(): void {\r\n        var pos: Float32Array = new Float32Array(3);\r\n        pos[0] = this.getRandom(this._posRange[0]);\r\n        pos[1] = this.getRandom(this._posRange[1]);\r\n        pos[2] = this.getRandom(this._posRange[2]);\r\n        var v: Float32Array = new Float32Array(3);\r\n        v[0] = 0;\r\n        v[1] = 0;\r\n        v[2] = 0;\r\n        this._template.addParticleArray(pos, v);\r\n    }\r\n\r\n}\r\n\r\n","import { ParticleTemplate2D } from \"./ParticleTemplate2D\";\r\nimport { Sprite } from \"../display/Sprite\";\r\nimport { ILaya } from \"../../ILaya\";\r\nimport { Context } from \"../resource/Context\";\r\nimport { EmitterBase } from \"./emitter/EmitterBase\"\r\nimport { Emitter2D } from \"./emitter/Emitter2D\"\r\nimport { DrawParticleCmd } from \"../display/cmd/DrawParticleCmd\"\r\n\r\n/**\r\n * <code>Particle2D</code> 类是2D粒子播放类\r\n *\r\n */\r\nexport class Particle2D extends Sprite {\r\n    /**@private */\r\n    private _matrix4: Float32Array = new Float32Array([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]);//默认4x4矩阵\r\n    private _source: string;\r\n    /**@private */\r\n    private _template: ParticleTemplate2D;\r\n    /**@private */\r\n    private _canvasTemplate: any;\r\n    /**@private */\r\n    private _emitter: EmitterBase;\r\n    /**是否自动播放*/\r\n    autoPlay: boolean = true;\r\n\r\n    /**\r\n     * 创建一个新的 <code>Particle2D</code> 类实例。\r\n     * @param setting 粒子配置数据\r\n     */\r\n    constructor() {\r\n        super();\r\n        this.customRenderEnable = true;\r\n    }\r\n\r\n    /**\r\n     * 得到粒子模板的地址\r\n     * @return templet.\r\n     */\r\n    get source(): string {\r\n        return this._source;\r\n    }\r\n\r\n    /**\r\n     * \r\n     */\r\n    set source(value: string) {\r\n        this._source = value;\r\n\r\n        if (value) {\r\n            ILaya.loader.load(value).then((template: ParticleTemplate2D) => {\r\n                if (template && !template.isCreateFromURL(this._source))\r\n                    return;\r\n\r\n                this.init(template);\r\n            });\r\n        }\r\n        else\r\n            this.init(null);\r\n    }\r\n\r\n    get template(): ParticleTemplate2D {\r\n        return this._template;\r\n    }\r\n\r\n    /**\r\n     * 设置 粒子模板\r\n     * @param value 粒子模板\r\n     */\r\n    set template(value: ParticleTemplate2D) {\r\n        this.init(value);\r\n    }\r\n\r\n    /**\r\n     * 获取粒子发射器\r\n     */\r\n    get emitter(): EmitterBase {\r\n        return this._emitter;\r\n    }\r\n\r\n    /**\r\n     * 设置粒子配置数据\r\n     * @param settings 粒子配置数据\r\n     */\r\n    init(template: ParticleTemplate2D): void {\r\n        if (this._template) {\r\n            this.reset();\r\n        }\r\n\r\n        this._template = template;\r\n        if (!this._template)\r\n            return;\r\n\r\n        this._template._addReference();\r\n        this.customRenderEnable = true;//设置custom渲染\r\n\r\n        //this.graphics._saveToCmd(Render.context._drawParticle, [_particleTemplate]);\r\n        this.graphics.addCmd(DrawParticleCmd.create((<ParticleTemplate2D>this._template)));\r\n        // canvas 不支持\r\n        if (!this._emitter) {\r\n            this._emitter = new Emitter2D(this._template);\r\n        } else {\r\n            ((<Emitter2D>this._emitter)).template = this._template;\r\n        }\r\n        if (this.autoPlay) {\r\n            this.emitter.start();\r\n            this.play();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 播放\r\n     */\r\n    play(): void {\r\n        ILaya.timer.frameLoop(1, this, this._loop);\r\n    }\r\n\r\n    /**\r\n     * 停止\r\n     */\r\n    stop(): void {\r\n        ILaya.timer.clear(this, this._loop);\r\n    }\r\n\r\n    /**@private */\r\n    private _loop(): void {\r\n        this.advanceTime(1 / 60);\r\n    }\r\n\r\n    /**\r\n     * 时钟前进\r\n     * @param passedTime 时钟前进时间\r\n     */\r\n    advanceTime(passedTime: number = 1): void {\r\n        if (this._canvasTemplate) {\r\n            this._canvasTemplate.advanceTime(passedTime);\r\n        }\r\n        if (this._emitter) {\r\n            this._emitter.advanceTime(passedTime);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param context \r\n     * @param x \r\n     * @param y \r\n     * @override\r\n     */\r\n    customRender(context: Context, x: number, y: number): void {\r\n        this._matrix4[0] = context._curMat.a;\r\n        this._matrix4[1] = context._curMat.b;\r\n        this._matrix4[4] = context._curMat.c;\r\n        this._matrix4[5] = context._curMat.d;\r\n        this._matrix4[12] = context._curMat.tx;\r\n        this._matrix4[13] = context._curMat.ty;\r\n        if (!this._template) return;\r\n        var sv: any = ((<ParticleTemplate2D>this._template)).sv;\r\n        sv.u_mmat = this._matrix4;\r\n\r\n        if (this._canvasTemplate) {\r\n            this._canvasTemplate.render(context, x, y);\r\n        }\r\n    }\r\n\r\n    private reset() {\r\n        this.stop();\r\n    }\r\n\r\n    destroy(destroyChild: boolean = true): void {\r\n        super.destroy(destroyChild);\r\n        if (this._template)\r\n            this.reset();\r\n    }\r\n}","/**\r\n * <code>ParticleSettings</code> 类是粒子配置数据类\r\n */\r\nexport class ParticleSetting {\r\n    /**贴图*/\r\n    textureName: string = null;\r\n    /**贴图个数,默认为1可不设置*/\r\n    textureCount: number = 1;\r\n    /**由于循环队列判断算法，最大饱和粒子数为maxPartices-1*/\r\n    maxPartices: number = 100;\r\n    /**粒子持续时间(单位:秒）*/\r\n    duration: number = 1;\r\n    /**如果大于0，某些粒子的持续时间会小于其他粒子,并具有随机性(单位:无）*/\r\n    ageAddScale: number = 0;\r\n\r\n    /**粒子受发射器速度的敏感度（需在自定义发射器中编码设置）*/\r\n    emitterVelocitySensitivity: number = 1;\r\n\r\n    /**最小开始尺寸（单位：2D像素、3D坐标）*/\r\n    minStartSize: number = 100;\r\n    /**最大开始尺寸（单位：2D像素、3D坐标）*/\r\n    maxStartSize: number = 100;\r\n    /**最小结束尺寸（单位：2D像素、3D坐标）*/\r\n    minEndSize: number = 100;\r\n    /**最大结束尺寸（单位：2D像素、3D坐标）*/\r\n    maxEndSize: number = 100;\r\n\r\n    /**最小水平速度（单位：2D像素、3D坐标）*/\r\n    minHorizontalVelocity: number = 0;\r\n    /**最大水平速度（单位：2D像素、3D坐标）*/\r\n    maxHorizontalVelocity: number = 0;\r\n    /**最小垂直速度（单位：2D像素、3D坐标）*/\r\n    minVerticalVelocity: number = 0;\r\n    /**最大垂直速度（单位：2D像素、3D坐标）*/\r\n    maxVerticalVelocity: number = 0;\r\n    /**等于1时粒子从出生到消亡保持一致的速度，等于0时粒子消亡时速度为0，大于1时粒子会保持加速（单位：无）*/\r\n    endVelocity: number = 1;\r\n\r\n    /**（单位：2D像素、3D坐标）*/\r\n    gravity: Float32Array = new Float32Array([0, 0, 0]);\r\n\r\n    /**最小旋转速度（单位：2D弧度/秒、3D弧度/秒）*/\r\n    minRotateSpeed: number = 0;\r\n    /**最大旋转速度（单位：2D弧度/秒、3D弧度/秒）*/\r\n    maxRotateSpeed: number = 0;\r\n\r\n    /**最小开始半径（单位：2D像素、3D坐标）*/\r\n    minStartRadius: number = 0;\r\n    /**最大开始半径（单位：2D像素、3D坐标）*/\r\n    maxStartRadius: number = 0;\r\n    /**最小结束半径（单位：2D像素、3D坐标）*/\r\n    minEndRadius: number = 0;\r\n    /**最大结束半径（单位：2D像素、3D坐标）*/\r\n    maxEndRadius: number = 0;\r\n\r\n    /**最小水平开始弧度（单位：2D弧度、3D弧度）*/\r\n    minHorizontalStartRadian: number = 0;\r\n    /**最大水平开始弧度（单位：2D弧度、3D弧度）*/\r\n    maxHorizontalStartRadian: number = 0;\r\n    /**最小垂直开始弧度（单位：2D弧度、3D弧度）*/\r\n    minVerticalStartRadian: number = 0;\r\n    /**最大垂直开始弧度（单位：2D弧度、3D弧度）*/\r\n    maxVerticalStartRadian: number = 0;\r\n\r\n    /**是否使用结束弧度,false为结束时与起始弧度保持一致,true为根据minHorizontalEndRadian、maxHorizontalEndRadian、minVerticalEndRadian、maxVerticalEndRadian计算结束弧度。*/\r\n    useEndRadian: boolean = true;\r\n    /**最小水平结束弧度（单位：2D弧度、3D弧度）*/\r\n    minHorizontalEndRadian: number = 0;\r\n    /**最大水平结束弧度（单位：2D弧度、3D弧度）*/\r\n    maxHorizontalEndRadian: number = 0;\r\n    /**最小垂直结束弧度（单位：2D弧度、3D弧度）*/\r\n    minVerticalEndRadian: number = 0;\r\n    /**最大垂直结束弧度（单位：2D弧度、3D弧度）*/\r\n    maxVerticalEndRadian: number = 0;\r\n\r\n    /**最小开始颜色*/\r\n    minStartColor: Float32Array = new Float32Array([1, 1, 1, 1]);\r\n    /**最大开始颜色*/\r\n    maxStartColor: Float32Array = new Float32Array([1, 1, 1, 1]);\r\n    /**最小结束颜色*/\r\n    minEndColor: Float32Array = new Float32Array([1, 1, 1, 1]);\r\n    /**最大结束颜色*/\r\n    maxEndColor: Float32Array = new Float32Array([1, 1, 1, 1]);\r\n\r\n    /**false代表RGBA整体插值，true代表RGBA逐分量插值*/\r\n    colorComponentInter: boolean = false;\r\n    /**false代表使用参数颜色数据，true代表使用原图颜色数据*/\r\n    disableColor: boolean = false;\r\n    /**混合模式，待调整，引擎中暂无BlendState抽象*/\r\n    blendState: number = 0;\r\n\r\n    //.........................................................3D发射器参数.........................................................\r\n    /**发射器类型,\"point\",\"box\",\"sphere\",\"ring\"*/\r\n    emitterType: string = \"null\";\r\n    /**发射器发射速率*/\r\n    emissionRate: number = 0;\r\n\r\n    /**点发射器位置*/\r\n    pointEmitterPosition: Float32Array = new Float32Array([0, 0, 0]);\r\n    /**点发射器位置随机值*/\r\n    pointEmitterPositionVariance: Float32Array = new Float32Array([0, 0, 0]);\r\n    /**点发射器速度*/\r\n    pointEmitterVelocity: Float32Array = new Float32Array([0, 0, 0]);\r\n    /**点发射器速度随机值*/\r\n    pointEmitterVelocityAddVariance: Float32Array = new Float32Array([0, 0, 0]);\r\n\r\n    /**盒发射器中心位置*/\r\n    boxEmitterCenterPosition: Float32Array = new Float32Array([0, 0, 0]);\r\n    /**盒发射器尺寸*/\r\n    boxEmitterSize: Float32Array = new Float32Array([0, 0, 0]);\r\n    /**盒发射器速度*/\r\n    boxEmitterVelocity: Float32Array = new Float32Array([0, 0, 0]);\r\n    /**盒发射器速度随机值*/\r\n    boxEmitterVelocityAddVariance: Float32Array = new Float32Array([0, 0, 0]);\r\n\r\n    /**球发射器中心位置*/\r\n    sphereEmitterCenterPosition: Float32Array = new Float32Array([0, 0, 0]);\r\n    /**球发射器半径*/\r\n    sphereEmitterRadius: number = 1;\r\n    /**球发射器速度*/\r\n    sphereEmitterVelocity: number = 0;\r\n    /**球发射器速度随机值*/\r\n    sphereEmitterVelocityAddVariance: number = 0;\r\n\r\n    /**环发射器中心位置*/\r\n    ringEmitterCenterPosition: Float32Array = new Float32Array([0, 0, 0]);\r\n    /**环发射器半径*/\r\n    ringEmitterRadius: number = 30;\r\n    /**环发射器速度*/\r\n    ringEmitterVelocity: number = 0;\r\n    /**环发射器速度随机值*/\r\n    ringEmitterVelocityAddVariance: number = 0;\r\n    /**环发射器up向量，0代表X轴,1代表Y轴,2代表Z轴*/\r\n    ringEmitterUp: number = 2;\r\n    //.........................................................3D发射器参数.........................................................\r\n\r\n    //.........................................................2D发射器参数.........................................................\r\n    /**发射器位置随机值,2D使用*/\r\n    positionVariance: Float32Array = new Float32Array([0, 0, 0]);\r\n\r\n    //.........................................................2D发射器参数.........................................................\r\n}\r\n\r\nconst defaultSetting = new ParticleSetting();\r\nexport function checkSetting(setting: any): ParticleSetting {\r\n    var key: string;\r\n    for (key in defaultSetting) {\r\n        if (!(key in setting)) {\r\n            setting[key] = (defaultSetting as any)[key];\r\n        }\r\n    }\r\n    //强转一下防止出错。这几个变量会直接传给shader，如果不是数字的话，有的runtime受不了（例如微信）\r\n    setting.endVelocity = +setting.endVelocity;\r\n    setting.gravity[0] = +setting.gravity[0];\r\n    setting.gravity[1] = +setting.gravity[1];\r\n    setting.gravity[2] = +setting.gravity[2];\r\n\r\n    return setting;\r\n}\r\n\r\n\r\n","import { ILoadTask, IResourceLoader, Loader } from \"../net/Loader\";\r\nimport { Texture } from \"../resource/Texture\";\r\nimport { checkSetting } from \"./ParticleSetting\";\r\nimport { ParticleTemplate2D } from \"./ParticleTemplate2D\";\r\n\r\nclass ParticleTemplate2DLoader implements IResourceLoader {\r\n    load(task: ILoadTask) {\r\n        return task.loader.fetch(task.url, \"json\", task.progress.createCallback(0.2), task.options).then(data => {\r\n            if (!data)\r\n                return null;\r\n\r\n            let settings = checkSetting(data);\r\n\r\n            return task.loader.load(settings.textureName, task.options, task.progress.createCallback()).then((tex: Texture) => {\r\n                if (!tex)\r\n                    return null;\r\n\r\n                return new ParticleTemplate2D(settings, tex);\r\n            });\r\n\r\n        });\r\n    }\r\n}\r\n\r\nLoader.registerLoader([\"part\"], ParticleTemplate2DLoader);","import { ClassUtils } from \"../utils/ClassUtils\";\r\nimport { Particle2D } from \"./Particle2D\";\r\n\r\nimport \"./ParticleTemplate2DLoader\";\r\n\r\nlet c = ClassUtils.regClass;\r\n\r\nc(\"Particle2D\", Particle2D);","import { ParticleTemplate2D } from \"./ParticleTemplate2D\";\r\nimport { MathUtil } from \"../maths/MathUtil\";\r\n\r\n/**\r\n *  @private\r\n */\r\nexport class ParticleEmitter {\r\n    private _templet: ParticleTemplate2D;\r\n    private _timeBetweenParticles: number;\r\n    private _previousPosition: Float32Array;\r\n    private _timeLeftOver: number = 0;\r\n\r\n    private _tempVelocity: Float32Array = new Float32Array([0, 0, 0]);\r\n    private _tempPosition: Float32Array = new Float32Array([0, 0, 0]);\r\n\r\n    constructor(templet: ParticleTemplate2D, particlesPerSecond: number, initialPosition: Float32Array) {\r\n        this._templet = templet;\r\n        this._timeBetweenParticles = 1.0 / particlesPerSecond;\r\n        this._previousPosition = initialPosition;\r\n    }\r\n\r\n    update(elapsedTime: number, newPosition: Float32Array): void {\r\n        elapsedTime = elapsedTime / 1000;//需秒为单位\r\n        if (elapsedTime > 0) {\r\n            MathUtil.subtractVector3(newPosition, this._previousPosition, this._tempVelocity);\r\n            MathUtil.scaleVector3(this._tempVelocity, 1 / elapsedTime, this._tempVelocity);\r\n\r\n            var timeToSpend: number = this._timeLeftOver + elapsedTime;\r\n            var currentTime: number = -this._timeLeftOver;\r\n\r\n            while (timeToSpend > this._timeBetweenParticles) {\r\n                currentTime += this._timeBetweenParticles;\r\n                timeToSpend -= this._timeBetweenParticles;\r\n\r\n                MathUtil.lerpVector3(this._previousPosition, newPosition, currentTime / elapsedTime, this._tempPosition);\r\n\r\n                this._templet.addParticleArray(this._tempPosition, this._tempVelocity);\r\n            }\r\n\r\n            this._timeLeftOver = timeToSpend;\r\n        }\r\n        this._previousPosition[0] = newPosition[0];\r\n        this._previousPosition[1] = newPosition[1];\r\n        this._previousPosition[2] = newPosition[2];\r\n    }\r\n}\r\n\r\n"],"mappings":"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"}