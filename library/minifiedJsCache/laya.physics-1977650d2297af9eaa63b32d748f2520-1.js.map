{"version":3,"names":["constructor","r","g","b","a","this","b2Color","ILaya","other","IsEqual","color","SetRGBA","SetByteRGBA","SetRGB","rr","gg","bb","aa","Add","out","Event","Sub","SelfMul","s","Mul","Mix","mixColor","strength","MixColors","colorA","colorB","dr","dg","db","da","MakeStyleString","alpha","static","b2DrawFlags","ZERO","RED","GREEN","BLUE","exports","Point","b2Maybe","value","def","undefined","b2_maxFloat","b2_epsilon","b2_epsilon_sq","b2_pi","b2_maxManifoldPoints","b2_aabbExtension","b2_angularSlop","b2_linearSlop","b2_maxRotation","b2_maxRotationSquared","b2_linearSleepTolerance","b2Version","major","minor","revision","b2_version","b2MakeArray","length","init","Array","i","b2MakeNumberArray","N","m_stack","m_count","index","Reset","element","b2_two_pi","b2Abs","Math","abs","b2Max","b2Clamp","lo","hi","isFinite","b2Sq","n","sqrt","pow","b2Sin","sin","b2Acos","acos","b2Asin","asin","atan2","x","y","b2Vec2","SetZero","SelfAdd","v","SelfSub","SelfMulSub","Cross","LengthSquared","Length","inv_length","SelfRotate","radians","c","SelfRotateCosSin","SelfCrossVS","b2Min","SelfAbs","v_x","v_y","cos","c_x","c_y","UNITY","s_t0","s_t2","s_t3","b2Vec2_zero","b2Vec3","args","Float32Array","Error","data","z","Clone","SelfNeg","SelfAddXYZ","a_x","a_y","a_z","b_x","b_y","b_z","b2Mat22","ex","Copy","c1","c2","SetVV","r1c1","r1c2","r2c1","r2c2","SetSSSS","SetAngle","Set","ey","d","det","Solve","a11","a12","a21","a22","SelfInv","GetInverse","SelfAddM","M","M_ex","M_ey","A","B","A_ex","A_ey","B_ex","B_ey","A_ex_x","A_ex_y","A_ey_x","A_ey_y","B_ex_x","B_ex_y","B_ey_x","B_ey_y","IDENTITY","b2Mat33","subarray","ez","c3","SetIdentity","SetXYZ","a31","a32","a13","a23","a33","Solve22","DotV3V3","CrossV3V3","v_z","b2Rot","angle","GetAngle","GetXAxis","GetYAxis","q","q_c","q_s","r_c","r_s","b2Transform","p","position","pos","SetPosition","SetPositionXY","SetRotation","rotation","SetRotationAngle","GetRotation","T","T_q_c","T_q_s","p_x","p_y","MulRR","AddVV","MulRV","MulTRR","MulTRV","SubVV","b2Sweep","localCenter","c0","a0","alpha0","xf","beta","SelfMulAdd","Normalize","floor","Date","now","m_start","b2MassData","mass","center","I","b2ShapeType","type","radius","m_type","e_unknown","m_radius","m_buffer","MakeArray","m_vertices","SetShape","shape","SetupDistanceProxy","SetVerticesRadius","vertices","count","Sprite","bestIndex","bestValue","DotVV","GetSupportVertex","b2SimplexCache","metric","indexA","indexB","b2DistanceInput","proxyA","b2DistanceProxy","proxyB","transformA","transformB","useRadii","b2DistanceOutput","pointA","pointB","distance","iterations","b2_gjkCalls","b2_gjkIters","b2_gjkMaxIters","b2SimplexVertex","wA","wB","w","b2Simplex","m_v1","m_v3","cache","wALocal","GetVertex","wBLocal","MulXV","metric1","metric2","GetMetric","ClassUtils","e12","m_v2","CrossVV","NegV","CrossOneV","CrossVOne","GetClosestPoint","b2_maxTranslation","size","condition","m_max_count","GetCount","m_min_count","ResetMinCount","ResetMaxCount","degrees","b2_pi_over_180","m_drawFlags","flags","ClearFlags","mem","message","parseInt","b2_180_over_pi","random","translationB","point","normal","lambda","tmp"],"sources":["../../src/layaAir/laya/physics/Physics.ts","../../src/layaAir/laya/physics/RigidBody.ts","../../src/layaAir/laya/physics/ColliderBase.ts","../../src/layaAir/laya/physics/BoxCollider.ts","../../src/layaAir/laya/physics/ChainCollider.ts","../../src/layaAir/laya/physics/CircleCollider.ts","../../src/layaAir/laya/physics/EdgeCollider.ts","../../src/layaAir/laya/physics/joint/JointBase.ts","../../src/layaAir/laya/physics/joint/DistanceJoint.ts","../../src/layaAir/laya/physics/joint/GearJoint.ts","../../src/layaAir/laya/physics/joint/MotorJoint.ts","../../src/layaAir/laya/physics/joint/MouseJoint.ts","../../src/layaAir/laya/physics/joint/PrismaticJoint.ts","../../src/layaAir/laya/physics/joint/PulleyJoint.ts","../../src/layaAir/laya/physics/joint/RevoluteJoint.ts","../../src/layaAir/laya/physics/joint/WeldJoint.ts","../../src/layaAir/laya/physics/joint/WheelJoint.ts","../../src/layaAir/laya/physics/PhysicsDebugDraw.ts","../../src/layaAir/laya/physics/PolygonCollider.ts","../../src/layaAir/laya/physics/ModuleDef.ts"],"sourcesContent":["import { Sprite } from \"../display/Sprite\"\r\nimport { Event } from \"../events/Event\"\r\nimport { EventDispatcher } from \"../events/EventDispatcher\"\r\nimport { Point } from \"../maths/Point\"\r\nimport { DestructionListener } from \"./DestructionListener\";\r\nimport { ILaya } from \"../../ILaya\";\r\nimport { LayaEnv } from \"../../LayaEnv\";\r\n\r\n/**\r\n * 2D物理引擎，使用Box2d驱动\r\n */\r\nexport class Physics extends EventDispatcher {\r\n    /**2D游戏默认单位为像素，物理默认单位为米，此值设置了像素和米的转换比率，默认50像素=1米*/\r\n    static PIXEL_RATIO: number = 50;\r\n    /**@private */\r\n    private static _I: Physics;\r\n\r\n    /**Box2d引擎的全局引用，更多属性和api请参考 http://box2d.org */\r\n    box2d: any = (<any>window).box2d;\r\n    /**[只读]物理世界引用，更多属性请参考官网 */\r\n    world: any;\r\n    /**旋转迭代次数，增大数字会提高精度，但是会降低性能*/\r\n    velocityIterations: number = 8;\r\n    /**位置迭代次数，增大数字会提高精度，但是会降低性能*/\r\n    positionIterations: number = 3;\r\n\r\n    /**@private 是否已经激活*/\r\n    private _enabled: boolean;\r\n    /**@private 根容器*/\r\n    private _worldRoot: Sprite;\r\n    /**@private 空的body节点，给一些不需要节点的关节使用*/\r\n    _emptyBody: any;\r\n    /**@private */\r\n    _eventList: any[] = [];\r\n\r\n    /**全局物理单例*/\r\n    static get I(): Physics {\r\n        return Physics._I || (Physics._I = new Physics());\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * 开启物理世界\r\n     * options值参考如下：\r\n       allowSleeping:true,\r\n       gravity:10,\r\n       customUpdate:false 自己控制物理更新时机，自己调用Physics.update\r\n     */\r\n    static enable(options: any = null): void {\r\n        Physics.I.start(options);\r\n    }\r\n\r\n    /**\r\n     * 开启物理世界\r\n     * options值参考如下：\r\n       allowSleeping:true,\r\n       gravity:10,\r\n       customUpdate:false 自己控制物理更新时机，自己调用Physics.update\r\n     */\r\n    start(options: any = null): void {\r\n        if (!this._enabled) {\r\n            this._enabled = true;\r\n\r\n            options || (options = {});\r\n            var box2d: any = (<any>window).box2d;\r\n            if (box2d == null) {\r\n                console.error(\"Can not find box2d libs, you should request box2d.js first.\");\r\n                return;\r\n            }\r\n\r\n            var gravity: any = new box2d.b2Vec2(0, options.gravity || 500 / Physics.PIXEL_RATIO);\r\n            this.world = new box2d.b2World(gravity);\r\n            this.world.SetDestructionListener(new DestructionListener());\r\n            this.world.SetContactListener(new ContactListener());\r\n            this.allowSleeping = options.allowSleeping == null ? true : options.allowSleeping;\r\n            if (!options.customUpdate && LayaEnv.isPlaying)\r\n                ILaya.physicsTimer.frameLoop(1, this, this._update);\r\n            this._emptyBody = this._createBody(new (<any>window).box2d.b2BodyDef());\r\n        }\r\n    }\r\n\r\n    private _update(): void {\r\n        var delta = ILaya.timer.delta / 1000;\r\n        if (delta > .033) { // 时间步太长，会导致错误穿透\r\n            delta = .033;\r\n        }\r\n        this.world.Step(delta, this.velocityIterations, this.positionIterations, 3);\r\n        var len: number = this._eventList.length;\r\n        if (len > 0) {\r\n            for (var i: number = 0; i < len; i += 2) {\r\n                this._sendEvent(this._eventList[i], this._eventList[i + 1]);\r\n            }\r\n            this._eventList.length = 0;\r\n        }\r\n    }\r\n\r\n    private _sendEvent(type: number, contact: any): void {\r\n        var colliderA: any = contact.GetFixtureA().collider;\r\n        var colliderB: any = contact.GetFixtureB().collider;\r\n        var ownerA: any = colliderA.owner;\r\n        var ownerB: any = colliderB.owner;\r\n        contact.getHitInfo = function (): any {\r\n            var manifold: any = new this.box2d.b2WorldManifold();\r\n            this.GetWorldManifold(manifold);\r\n            //第一点？\r\n            var p: any = manifold.points[0];\r\n            p.x *= Physics.PIXEL_RATIO;\r\n            p.y *= Physics.PIXEL_RATIO;\r\n            return manifold;\r\n        }\r\n        if (ownerA) {\r\n            var args: any[] = [colliderB, colliderA, contact];\r\n            if (type === 0) {\r\n                ownerA.event(Event.TRIGGER_ENTER, args);\r\n                if (!ownerA[\"_triggered\"]) {\r\n                    ownerA[\"_triggered\"] = true;\r\n                } else {\r\n                    ownerA.event(Event.TRIGGER_STAY, args);\r\n                }\r\n            } else {\r\n                ownerA[\"_triggered\"] = false;\r\n                ownerA.event(Event.TRIGGER_EXIT, args);\r\n            }\r\n        }\r\n        if (ownerB) {\r\n            args = [colliderA, colliderB, contact];\r\n            if (type === 0) {\r\n                ownerB.event(Event.TRIGGER_ENTER, args);\r\n                if (!ownerB[\"_triggered\"]) {\r\n                    ownerB[\"_triggered\"] = true;\r\n                } else {\r\n                    ownerB.event(Event.TRIGGER_STAY, args);\r\n                }\r\n            } else {\r\n                ownerB[\"_triggered\"] = false;\r\n                ownerB.event(Event.TRIGGER_EXIT, args);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**@private */\r\n    _createBody(def: any): any {\r\n        if (this.world) {\r\n            return this.world.CreateBody(def);\r\n        } else {\r\n            console.error('The physical engine should be initialized first.use \"Physics.enable()\"');\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**@private */\r\n    _removeBody(body: any): void {\r\n        if (this.world) {\r\n            this.world.DestroyBody(body);\r\n        } else {\r\n            console.error('The physical engine should be initialized first.use \"Physics.enable()\"');\r\n        }\r\n    }\r\n\r\n    /**@private */\r\n    _createJoint(def: any): any {\r\n        if (this.world) {\r\n            let joint = this.world.CreateJoint(def);\r\n            joint.m_userData = {};\r\n            joint.m_userData.isDestroy = false;\r\n            return joint;\r\n        } else {\r\n            console.error('The physical engine should be initialized first.use \"Physics.enable()\"');\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**@private */\r\n    _removeJoint(joint: any): void {\r\n        if (this.world) {\r\n            this.world.DestroyJoint(joint);\r\n        } else {\r\n            console.error('The physical engine should be initialized first.use \"Physics.enable()\"');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 停止物理世界\r\n     */\r\n    stop(): void {\r\n        ILaya.physicsTimer.clear(this, this._update);\r\n    }\r\n\r\n    /**\r\n     * 设置是否允许休眠，休眠可以提高稳定性和性能，但通常会牺牲准确性\r\n     */\r\n    get allowSleeping(): boolean {\r\n        return this.world.GetAllowSleeping();\r\n    }\r\n\r\n    set allowSleeping(value: boolean) {\r\n        this.world.SetAllowSleeping(value);\r\n    }\r\n\r\n    /**\r\n     * 物理世界重力环境，默认值为{x:0,y:1}\r\n     * 如果修改y方向重力方向向上，可以直接设置gravity.y=-1;\r\n     */\r\n    get gravity(): any {\r\n        return this.world.GetGravity();\r\n    }\r\n\r\n    set gravity(value: any) {\r\n        this.world.SetGravity(value);\r\n    }\r\n\r\n    /**获得刚体总数量*/\r\n    getBodyCount(): number {\r\n        return this.world.GetBodyCount();\r\n    }\r\n\r\n    /**获得碰撞总数量*/\r\n    getContactCount(): number {\r\n        return this.world.GetContactCount();\r\n    }\r\n\r\n    /**获得关节总数量*/\r\n    getJointCount(): number {\r\n        return this.world.GetJointCount();\r\n    }\r\n\r\n    /**物理世界根容器，将根据此容器作为物理世界坐标世界，进行坐标变换，默认值为stage\r\n     * 设置特定容器后，就可整体位移物理对象，保持物理世界不变。\r\n     * 注意，仅会在 set worldRoot 时平移一次，其他情况请配合 updatePhysicsByWorldRoot 函数使用*/\r\n    get worldRoot(): Sprite {\r\n        return this._worldRoot || ILaya.stage;\r\n    }\r\n\r\n    set worldRoot(value: Sprite) {\r\n        this._worldRoot = value;\r\n        if (value) {\r\n            //TODO：\r\n            var p: Point = value.localToGlobal(Point.TEMP.setTo(0, 0));\r\n            this.world.ShiftOrigin({ x: -p.x / Physics.PIXEL_RATIO, y: -p.y / Physics.PIXEL_RATIO });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 设定 worldRoot 后，手动触发物理世界更新\r\n     */\r\n    updatePhysicsByWorldRoot() {\r\n        if (!!this.worldRoot) {\r\n            var p: Point = this.worldRoot.localToGlobal(Point.TEMP.setTo(0, 0));\r\n            this.world.ShiftOrigin({ x: -p.x / Physics.PIXEL_RATIO, y: -p.y / Physics.PIXEL_RATIO });\r\n        }\r\n    }\r\n}\r\n\r\n// import { Physics } from \"./Physics\"\r\n\r\n/**@private */\r\nclass ContactListener {\r\n    BeginContact(contact: any): void {\r\n        Physics.I._eventList.push(0, contact);\r\n        //console.log(\"BeginContact\", contact);\t\r\n    }\r\n\r\n    EndContact(contact: any): void {\r\n        Physics.I._eventList.push(1, contact);\r\n        //console.log(\"EndContact\", contact);\r\n    }\r\n\r\n    PreSolve(contact: any, oldManifold: any): void {\r\n        //console.log(\"PreSolve\", contact);\r\n    }\r\n\r\n    PostSolve(contact: any, impulse: any): void {\r\n        //console.log(\"PostSolve\", contact);\r\n    }\r\n}\r\n","import { ColliderBase } from \"./ColliderBase\";\r\nimport { Component } from \"../components/Component\"\r\nimport { Sprite } from \"..//display/Sprite\"\r\nimport { Point } from \"../maths/Point\"\r\nimport { Utils } from \"../utils/Utils\"\r\nimport { Physics } from \"./Physics\";\r\n\r\n/**\r\n * 2D刚体，显示对象通过RigidBody和物理世界进行绑定，保持物理和显示对象之间的位置同步\r\n * 物理世界的位置变化会自动同步到显示对象，显示对象本身的位移，旋转（父对象位移无效）也会自动同步到物理世界\r\n * 由于引擎限制，暂时不支持以下情形：\r\n * 1.不支持绑定节点缩放\r\n * 2.不支持绑定节点的父节点缩放和旋转\r\n * 3.不支持实时控制父对象位移，IDE内父对象位移是可以的\r\n * 如果想整体位移物理世界，可以Physics.I.worldRoot=场景，然后移动场景即可\r\n * 可以通过IDE-\"项目设置\" 开启物理辅助线显示，或者通过代码PhysicsDebugDraw.enable();\r\n */\r\nexport class RigidBody extends Component {\r\n    /**\r\n     * 刚体类型，支持三种类型static，dynamic和kinematic类型，默认为dynamic类型\r\n     * static为静态类型，静止不动，不受重力影响，质量无限大，可以通过节点移动，旋转，缩放进行控制\r\n     * dynamic为动态类型，受重力影响\r\n     * kinematic为运动类型，不受重力影响，可以通过施加速度或者力的方式使其运动\r\n     */\r\n    protected _type: string = \"dynamic\";\r\n    /**是否允许休眠，允许休眠能提高性能*/\r\n    protected _allowSleep: boolean = true;\r\n    /**角速度，设置会导致旋转*/\r\n    protected _angularVelocity: number = 0;\r\n    /**旋转速度阻尼系数，范围可以在0到无穷大之间，0表示没有阻尼，无穷大表示满阻尼，通常阻尼的值应该在0到0.1之间*/\r\n    protected _angularDamping: number = 0;\r\n    /**线性运动速度，比如{x:10,y:10}*/\r\n    protected _linearVelocity: any = { x: 0, y: 0 };\r\n    /**线性速度阻尼系数，范围可以在0到无穷大之间，0表示没有阻尼，无穷大表示满阻尼，通常阻尼的值应该在0到0.1之间*/\r\n    protected _linearDamping: number = 0;\r\n    /**是否高速移动的物体，设置为true，可以防止高速穿透*/\r\n    protected _bullet: boolean = false;\r\n    /**是否允许旋转，如果不希望刚体旋转，这设置为false*/\r\n    protected _allowRotation: boolean = true;\r\n    /**重力缩放系数，设置为0为没有重力*/\r\n    protected _gravityScale: number = 1;\r\n\r\n    /**[只读] 指定了该主体所属的碰撞组，默认为0，碰撞规则如下：\r\n     * 1.如果两个对象group相等\r\n     * \t\tgroup值大于零，它们将始终发生碰撞\r\n     * \t\tgroup值小于零，它们将永远不会发生碰撞\r\n     * \t\tgroup值等于0，则使用规则3\r\n     * 2.如果group值不相等，则使用规则3\r\n     * 3.每个刚体都有一个category类别，此属性接收位字段，范围为[1,2^31]范围内的2的幂\r\n     * 每个刚体也都有一个mask类别，指定与其碰撞的类别值之和（值是所有category按位AND的值）\r\n     */\r\n    group: number = 0;\r\n    /**[只读]碰撞类别，使用2的幂次方值指定，有32种不同的碰撞类别可用*/\r\n    category: number = 1;\r\n    /**[只读]指定冲突位掩码碰撞的类别，category位操作的结果*/\r\n    mask: number = -1;\r\n    /**[只读]自定义标签*/\r\n    label: string = \"RigidBody\";\r\n    /**[只读]原始刚体*/\r\n    protected _body: any;\r\n\r\n    private _createBody(): void {\r\n        if (this._body || !this.owner) return;\r\n        var sp: Sprite = (<Sprite>this.owner);\r\n        var box2d: any = (<any>window).box2d;\r\n        var def: any = new box2d.b2BodyDef();\r\n        var point: Point = sp.localToGlobal(Point.TEMP.setTo(0, 0), false, Physics.I.worldRoot);\r\n        def.position.Set(point.x / Physics.PIXEL_RATIO, point.y / Physics.PIXEL_RATIO);\r\n        def.angle = Utils.toRadian(sp.rotation);\r\n        def.allowSleep = this._allowSleep;\r\n        def.angularDamping = this._angularDamping;\r\n        def.angularVelocity = this._angularVelocity;\r\n        def.bullet = this._bullet;\r\n        def.fixedRotation = !this._allowRotation;\r\n        def.gravityScale = this._gravityScale;\r\n        def.linearDamping = this._linearDamping;\r\n        var obj: any = this._linearVelocity;\r\n        if (obj && obj.x != 0 || obj.y != 0) {\r\n            def.linearVelocity = new box2d.b2Vec2(obj.x, obj.y);\r\n        }\r\n        def.type = box2d.b2BodyType[\"b2_\" + this._type + \"Body\"];\r\n        //def.userData = label;\r\n\r\n        this._body = Physics.I._createBody(def);\r\n        //trace(body);\r\n\r\n        //查找碰撞体\r\n        this.resetCollider(false);\r\n    }\r\n\r\n    protected _onAwake(): void {\r\n        this._createBody();\r\n    }\r\n\r\n    protected _onEnable(): void {\r\n        var _$this = this;\r\n        this._createBody();\r\n\r\n        //监听节点变化，同步到物理世界\r\n        var sp: any = <Sprite>this.owner;\r\n        //如果节点发生变化，则同步到物理世界（仅限节点本身，父节点发生变化不会自动同步）\r\n        if (this.accessGetSetFunc(sp, \"x\", \"set\") && !sp._changeByRigidBody) {\r\n            sp._changeByRigidBody = true;\r\n            function setX(value: any): void {\r\n                _$this.accessGetSetFunc(sp, \"x\", \"set\")(value);\r\n                _$this._sysPosToPhysic();\r\n            }\r\n            this._overSet(sp, \"x\", setX);\r\n\r\n            function setY(value: any): void {\r\n                _$this.accessGetSetFunc(sp, \"y\", \"set\")(value);\r\n                _$this._sysPosToPhysic();\r\n            };\r\n            this._overSet(sp, \"y\", setY);\r\n\r\n            function setRotation(value: any): void {\r\n                _$this.accessGetSetFunc(sp, \"rotation\", \"set\")(value);\r\n                _$this._sysNodeToPhysic();\r\n            };\r\n            this._overSet(sp, \"rotation\", setRotation);\r\n\r\n            function setScaleX(value: any): void {\r\n                _$this.accessGetSetFunc(sp, \"scaleX\", \"set\")(value);\r\n                _$this.resetCollider(true);\r\n            };\r\n            this._overSet(sp, \"scaleX\", setScaleX);\r\n\r\n            function setScaleY(value: any): void {\r\n                _$this.accessGetSetFunc(sp, \"scaleY\", \"set\")(value);\r\n                _$this.resetCollider(true);\r\n            };\r\n            this._overSet(sp, \"scaleY\", setScaleY);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取对象某属性的get set方法\r\n     * 通过其本身无法获取该方法，只能从原型上获取\r\n     * @param obj \r\n     * @param prop \r\n     * @param accessor \r\n     */\r\n    private accessGetSetFunc(obj: Node, prop: string, accessor: string): any {\r\n        if ([\"get\", \"set\"].indexOf(accessor) === -1) { // includes\r\n            return;\r\n        }\r\n        let privateProp = `_$${accessor}_${prop}`;\r\n        if ((obj as any)[privateProp]) {\r\n            return (obj as any)[privateProp];\r\n        }\r\n        let ObjConstructor = obj.constructor;\r\n        let des;\r\n        while (ObjConstructor) {\r\n            des = Object.getOwnPropertyDescriptor(ObjConstructor.prototype, prop);\r\n            if (des && (des as any)[accessor]) { // 构造函数(包括原型的构造函数)有该属性\r\n                (obj as any)[privateProp] = (des as any)[accessor].bind(obj);\r\n                break;\r\n            }\r\n            ObjConstructor = Object.getPrototypeOf(ObjConstructor);\r\n        }\r\n        return (obj as any)[privateProp];\r\n    }\r\n\r\n    /**\r\n     * 重置Collider\r\n     * @param\tresetShape 是否先重置形状，比如缩放导致碰撞体变化\r\n     */\r\n    private resetCollider(resetShape: boolean): void {\r\n        //查找碰撞体\r\n        var comps: any[] = this.owner.getComponents(ColliderBase);\r\n        if (comps) {\r\n            for (var i: number = 0, n: number = comps.length; i < n; i++) {\r\n                var collider: ColliderBase = comps[i];\r\n                collider.rigidBody = this;\r\n                if (resetShape) collider.resetShape();\r\n                else collider.refresh();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**同步物理坐标到游戏坐标*/\r\n    onUpdate(): void {\r\n        if (this.type != \"static\" && this._body.IsAwake()) {\r\n            var pos: any = this._body.GetPosition();\r\n            var ang: any = this._body.GetAngle();\r\n            var sp: any = (<Sprite>this.owner);\r\n\r\n            //if (label == \"tank\") console.log(\"get\",ang);\r\n            this.accessGetSetFunc(sp, \"rotation\", \"set\")(Utils.toAngle(ang) - (<Sprite>sp.parent).globalRotation);\r\n\r\n            // if (ang == 0) {\r\n            //     var point: Point = sp.globalToLocal(Point.TEMP.setTo(pos.x * IPhysics.Physics.PIXEL_RATIO + sp.pivotX, pos.y * IPhysics.Physics.PIXEL_RATIO + sp.pivotY), false, IPhysics.Physics.I.worldRoot);\r\n            //     point = sp.toParentPoint(point);\r\n            //     this.accessGetSetFunc(sp, \"x\", \"set\")(point.x);\r\n            //     this.accessGetSetFunc(sp, \"y\", \"set\")(point.y);\r\n            // } else {\r\n            var point = sp.globalToLocal(Point.TEMP.setTo(pos.x * Physics.PIXEL_RATIO, pos.y * Physics.PIXEL_RATIO), false, Physics.I.worldRoot);\r\n            point.x += sp.pivotX;\r\n            point.y += sp.pivotY;\r\n            point = sp.toParentPoint(point);\r\n            this.accessGetSetFunc(sp, \"x\", \"set\")(point.x);\r\n            this.accessGetSetFunc(sp, \"y\", \"set\")(point.y);\r\n            // }\r\n        }\r\n    }\r\n\r\n    /**@private 同步节点坐标及旋转到物理世界*/\r\n    private _sysNodeToPhysic(): void {\r\n        var sp: Sprite = <Sprite>this.owner;\r\n        this._body.SetAngle(Utils.toRadian(sp.rotation));\r\n        var p: Point = sp.localToGlobal(Point.TEMP.setTo(0, 0), false, Physics.I.worldRoot);\r\n        this._body.SetPositionXY(p.x / Physics.PIXEL_RATIO, p.y / Physics.PIXEL_RATIO);\r\n    }\r\n\r\n    /**@private 同步节点坐标到物理世界*/\r\n    private _sysPosToPhysic(): void {\r\n        var sp: Sprite = <Sprite>this.owner;\r\n        var p: Point = sp.localToGlobal(Point.TEMP.setTo(0, 0), false, Physics.I.worldRoot);\r\n        this._body.SetPositionXY(p.x / Physics.PIXEL_RATIO, p.y / Physics.PIXEL_RATIO);\r\n    }\r\n\r\n    /**@private */\r\n    private _overSet(sp: Node, prop: string, getfun: any): void {\r\n        Object.defineProperty(sp, prop, { get: this.accessGetSetFunc(sp, prop, \"get\"), set: getfun, enumerable: false, configurable: true });;\r\n    }\r\n\r\n    protected _onDisable(): void {\r\n        //添加到物理世界\r\n        this._body && Physics.I._removeBody(this._body);\r\n        this._body = null;\r\n\r\n        var owner: any = this.owner;\r\n        if (owner._changeByRigidBody) {\r\n            this._overSet(owner, \"x\", this.accessGetSetFunc(owner, \"x\", \"set\"));\r\n            this._overSet(owner, \"y\", this.accessGetSetFunc(owner, \"y\", \"set\"));\r\n            this._overSet(owner, \"rotation\", this.accessGetSetFunc(owner, \"rotation\", \"set\"));\r\n            this._overSet(owner, \"scaleX\", this.accessGetSetFunc(owner, \"scaleX\", \"set\"));\r\n            this._overSet(owner, \"scaleY\", this.accessGetSetFunc(owner, \"scaleY\", \"set\"));\r\n            owner._changeByRigidBody = false;\r\n        }\r\n    }\r\n\r\n    /**获得原始body对象 */\r\n    getBody(): any {\r\n        if (!this._body) this._onAwake();\r\n        return this._body;\r\n    }\r\n\r\n    _getOriBody(): any {\r\n        return this._body;\r\n    }\r\n\r\n    /**[只读]获得原始body对象 */\r\n    get body(): any {\r\n        if (!this._body) this._onAwake();\r\n        return this._body;\r\n    }\r\n\r\n    /**\r\n     * 对刚体施加力\r\n     * @param\tposition 施加力的点，如{x:100,y:100}，全局坐标\r\n     * @param\tforce\t施加的力，如{x:0.1,y:0.1}\r\n     */\r\n    applyForce(position: any, force: any): void {\r\n        if (!this._body) this._onAwake();\r\n        this._body.ApplyForce(force, position);\r\n    }\r\n\r\n    /**\r\n     * 从中心点对刚体施加力，防止对象旋转\r\n     * @param\tforce\t施加的力，如{x:0.1,y:0.1}\r\n     */\r\n    applyForceToCenter(force: any): void {\r\n        if (!this._body) this._onAwake();\r\n        this._body.ApplyForceToCenter(force);\r\n    }\r\n\r\n    /**\r\n     * 施加速度冲量，添加的速度冲量会与刚体原有的速度叠加，产生新的速度\r\n     * @param\tposition 施加力的点，如{x:100,y:100}，全局坐标\r\n     * @param\timpulse\t施加的速度冲量，如{x:0.1,y:0.1}\r\n     */\r\n    applyLinearImpulse(position: any, impulse: any): void {\r\n        if (!this._body) this._onAwake();\r\n        this._body.ApplyLinearImpulse(impulse, position);\r\n    }\r\n\r\n    /**\r\n     * 施加速度冲量，添加的速度冲量会与刚体原有的速度叠加，产生新的速度\r\n     * @param\timpulse\t施加的速度冲量，如{x:0.1,y:0.1}\r\n     */\r\n    applyLinearImpulseToCenter(impulse: any): void {\r\n        if (!this._body) this._onAwake();\r\n        this._body.ApplyLinearImpulseToCenter(impulse);\r\n    }\r\n\r\n    /**\r\n     * 对刚体施加扭矩，使其旋转\r\n     * @param\ttorque\t施加的扭矩\r\n     */\r\n    applyTorque(torque: number): void {\r\n        if (!this._body) this._onAwake();\r\n        this._body.ApplyTorque(torque);\r\n    }\r\n\r\n    /**\r\n     * 设置速度，比如{x:10,y:10}\r\n     * @param\tvelocity\r\n     */\r\n    setVelocity(velocity: any): void {\r\n        if (!this._body) this._onAwake();\r\n        this._body.SetLinearVelocity(velocity);\r\n    }\r\n\r\n    /**\r\n     * 设置角度\r\n     * @param\tvalue 单位为弧度\r\n     */\r\n    setAngle(value: any): void {\r\n        if (!this._body) this._onAwake();\r\n        this._body.SetAngle(value);\r\n        this._body.SetAwake(true);\r\n    }\r\n\r\n    /**获得刚体质量*/\r\n    getMass(): number {\r\n        return this._body ? this._body.GetMass() : 0;\r\n    }\r\n\r\n    /**\r\n     * 获得质心的相对节点0,0点的位置偏移\r\n     */\r\n    getCenter(): any {\r\n        if (!this._body) this._onAwake();\r\n        var p: Point = this._body.GetLocalCenter();\r\n        p.x = p.x * Physics.PIXEL_RATIO;\r\n        p.y = p.y * Physics.PIXEL_RATIO;\r\n        return p;\r\n    }\r\n\r\n    /**\r\n     * 获得质心的世界坐标，相对于Physics.I.worldRoot节点\r\n     */\r\n    getWorldCenter(): any {\r\n        if (!this._body) this._onAwake();\r\n        var p: Point = this._body.GetWorldCenter();\r\n        p.x = p.x * Physics.PIXEL_RATIO;\r\n        p.y = p.y * Physics.PIXEL_RATIO;\r\n        return p;\r\n    }\r\n\r\n    /**\r\n     * 刚体类型，支持三种类型static，dynamic和kinematic类型\r\n     * static为静态类型，静止不动，不受重力影响，质量无限大，可以通过节点移动，旋转，缩放进行控制\r\n     * dynamic为动态类型，接受重力影响\r\n     * kinematic为运动类型，不受重力影响，可以通过施加速度或者力的方式使其运动\r\n     */\r\n    get type(): string {\r\n        return this._type;\r\n    }\r\n\r\n    set type(value: string) {\r\n        this._type = value;\r\n        if (this._body) this._body.SetType((<any>window).box2d.b2BodyType[\"b2_\" + this._type + \"Body\"]);\r\n    }\r\n\r\n    /**重力缩放系数，设置为0为没有重力*/\r\n    get gravityScale(): number {\r\n        return this._gravityScale;\r\n    }\r\n\r\n    set gravityScale(value: number) {\r\n        this._gravityScale = value;\r\n        if (this._body) this._body.SetGravityScale(value);\r\n    }\r\n\r\n    /**是否允许旋转，如果不希望刚体旋转，这设置为false*/\r\n    get allowRotation(): boolean {\r\n        return this._allowRotation;\r\n    }\r\n\r\n    set allowRotation(value: boolean) {\r\n        this._allowRotation = value;\r\n        if (this._body) this._body.SetFixedRotation(!value);\r\n    }\r\n\r\n    /**是否允许休眠，允许休眠能提高性能*/\r\n    get allowSleep(): boolean {\r\n        return this._allowSleep;\r\n    }\r\n\r\n    set allowSleep(value: boolean) {\r\n        this._allowSleep = value;\r\n        if (this._body) this._body.SetSleepingAllowed(value);\r\n    }\r\n\r\n    /**旋转速度阻尼系数，范围可以在0到无穷大之间，0表示没有阻尼，无穷大表示满阻尼，通常阻尼的值应该在0到0.1之间*/\r\n    get angularDamping(): number {\r\n        return this._angularDamping;\r\n    }\r\n\r\n    set angularDamping(value: number) {\r\n        this._angularDamping = value;\r\n        if (this._body) this._body.SetAngularDamping(value);\r\n    }\r\n\r\n    /**角速度，设置会导致旋转*/\r\n    get angularVelocity(): number {\r\n        if (this._body) return this._body.GetAngularVelocity();\r\n        return this._angularVelocity;\r\n    }\r\n\r\n    set angularVelocity(value: number) {\r\n        this._angularVelocity = value;\r\n        if (this._body) this._body.SetAngularVelocity(value);\r\n    }\r\n\r\n    /**线性速度阻尼系数，范围可以在0到无穷大之间，0表示没有阻尼，无穷大表示满阻尼，通常阻尼的值应该在0到0.1之间*/\r\n    get linearDamping(): number {\r\n        return this._linearDamping;\r\n    }\r\n\r\n    set linearDamping(value: number) {\r\n        this._linearDamping = value;\r\n        if (this._body) this._body.SetLinearDamping(value);\r\n    }\r\n\r\n    /**线性运动速度，比如{x:5,y:5}*/\r\n    get linearVelocity(): any {\r\n        if (this._body) {\r\n            var vec: any = this._body.GetLinearVelocity();\r\n            return { x: vec.x, y: vec.y };\r\n        }\r\n        return this._linearVelocity;\r\n    }\r\n\r\n    set linearVelocity(value: any) {\r\n        if (!value) return;\r\n        if (value instanceof Array) {\r\n            value = { x: value[0], y: value[1] };\r\n        }\r\n        this._linearVelocity = value;\r\n        if (this._body) this._body.SetLinearVelocity(new (<any>window).box2d.b2Vec2(value.x, value.y));\r\n    }\r\n\r\n    /**是否高速移动的物体，设置为true，可以防止高速穿透*/\r\n    get bullet(): boolean {\r\n        return this._bullet;\r\n    }\r\n\r\n    set bullet(value: boolean) {\r\n        this._bullet = value;\r\n        if (this._body) this._body.SetBullet(value);\r\n    }\r\n}","import { ILaya } from \"../../ILaya\";\r\nimport { Component } from \"../components/Component\";\r\nimport { RigidBody } from \"./RigidBody\";\r\n\r\n/**\r\n * 碰撞体基类\r\n */\r\nexport class ColliderBase extends Component {\r\n    /**是否是传感器，传感器能够触发碰撞事件，但不会产生碰撞反应*/\r\n    private _isSensor: boolean = false;\r\n    /**密度值，值可以为零或者是正数，建议使用相似的密度，这样做可以改善堆叠稳定性，默认值为10*/\r\n    private _density: number = 10;\r\n    /**摩擦力，取值范围0-1，值越大，摩擦越大，默认值为0.2*/\r\n    private _friction: number = 0.2;\r\n    /**弹性系数，取值范围0-1，值越大，弹性越大，默认值为0*/\r\n    private _restitution: number = 0;\r\n    /**标签*/\r\n    label: string;\r\n\r\n    /**@private b2Shape对象*/\r\n    protected _shape: any;\r\n    /**@private b2FixtureDef对象 */\r\n    protected _def: any;\r\n    /**[只读]b2Fixture对象 */\r\n    fixture: any;\r\n    /**[只读]刚体引用*/\r\n    rigidBody: RigidBody;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this._singleton = false;\r\n    }\r\n\r\n    /**@private 获取碰撞体信息*/\r\n    protected getDef(): any {\r\n        if (!this._def) {\r\n            var def: any = new (<any>window).box2d.b2FixtureDef();\r\n            def.density = this.density;\r\n            def.friction = this.friction;\r\n            def.isSensor = this.isSensor;\r\n            def.restitution = this.restitution;\r\n            def.shape = this._shape;\r\n            this._def = def;\r\n        }\r\n        return this._def;\r\n    }\r\n\r\n    protected _onEnable(): void {\r\n        if (this.rigidBody)\r\n            this.refresh();\r\n        else\r\n            ILaya.systemTimer.callLater(this, this._checkRigidBody);\r\n    }\r\n\r\n    private _checkRigidBody(): void {\r\n        if (!this.rigidBody) {\r\n            var comp: RigidBody = this.owner.getComponent(RigidBody);\r\n            if (comp) {\r\n                this.rigidBody = comp;\r\n                this.refresh();\r\n            }\r\n        }\r\n    }\r\n\r\n    protected _onDestroy() {\r\n        if (this.rigidBody) {\r\n            if (this.fixture) {\r\n                if (this.fixture.GetBody() == this.rigidBody._getOriBody()) {\r\n                    this.rigidBody.body.DestroyFixture(this.fixture);\r\n                }\r\n                //fixture.Destroy();\r\n                this.fixture = null;\r\n            }\r\n            this.rigidBody = null;\r\n            this._shape = null;\r\n            this._def = null;\r\n        }\r\n    }\r\n\r\n    /**是否是传感器，传感器能够触发碰撞事件，但不会产生碰撞反应*/\r\n    get isSensor(): boolean {\r\n        return this._isSensor;\r\n    }\r\n\r\n    set isSensor(value: boolean) {\r\n        this._isSensor = value;\r\n        if (this._def) {\r\n            this._def.isSensor = value;\r\n            this.refresh();\r\n        }\r\n    }\r\n\r\n    /**密度值，值可以为零或者是正数，建议使用相似的密度，这样做可以改善堆叠稳定性，默认值为10*/\r\n    get density(): number {\r\n        return this._density;\r\n    }\r\n\r\n    set density(value: number) {\r\n        this._density = value;\r\n        if (this._def) {\r\n            this._def.density = value;\r\n            this.refresh();\r\n        }\r\n    }\r\n\r\n    /**摩擦力，取值范围0-1，值越大，摩擦越大，默认值为0.2*/\r\n    get friction(): number {\r\n        return this._friction;\r\n    }\r\n\r\n    set friction(value: number) {\r\n        this._friction = value;\r\n        if (this._def) {\r\n            this._def.friction = value;\r\n            this.refresh();\r\n        }\r\n    }\r\n\r\n    /**弹性系数，取值范围0-1，值越大，弹性越大，默认值为0*/\r\n    get restitution(): number {\r\n        return this._restitution;\r\n    }\r\n\r\n    set restitution(value: number) {\r\n        this._restitution = value;\r\n        if (this._def) {\r\n            this._def.restitution = value;\r\n            this.refresh();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * 碰撞体参数发生变化后，刷新物理世界碰撞信息\r\n     */\r\n    refresh(): void {\r\n        if (this.enabled && this.rigidBody) {\r\n            var body: any = this.rigidBody.body;\r\n            if (this.fixture) {\r\n                //trace(fixture);\r\n                if (this.fixture.GetBody() == this.rigidBody.body) {\r\n                    this.rigidBody.body.DestroyFixture(this.fixture);\r\n                }\r\n                this.fixture.Destroy();\r\n                this.fixture = null;\r\n            }\r\n            var def: any = this.getDef();\r\n            def.filter.groupIndex = this.rigidBody.group;\r\n            def.filter.categoryBits = this.rigidBody.category;\r\n            def.filter.maskBits = this.rigidBody.mask;\r\n            this.fixture = body.CreateFixture(def);\r\n            this.fixture.collider = this;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * 重置形状\r\n     */\r\n    resetShape(re: boolean = true): void {\r\n\r\n    }\r\n}\r\n","import { Sprite } from \"../display/Sprite\";\r\nimport { ColliderBase } from \"./ColliderBase\";\r\nimport { Physics } from \"./Physics\";\r\n\r\n/**\r\n * 2D矩形碰撞体\r\n */\r\nexport class BoxCollider extends ColliderBase {\r\n    /**相对节点的x轴偏移*/\r\n    private _x: number = 0;\r\n    /**相对节点的y轴偏移*/\r\n    private _y: number = 0;\r\n    /**矩形宽度*/\r\n    private _width: number = 100;\r\n    /**矩形高度*/\r\n    private _height: number = 100;\r\n\r\n    /**\r\n     * @override\r\n     */\r\n    protected getDef(): any {\r\n        if (!this._shape) {\r\n            this._shape = new (<any>window).box2d.b2PolygonShape();\r\n            this._setShape(false);\r\n        }\r\n        this.label = (this.label || \"BoxCollider\");\r\n        return super.getDef();\r\n    }\r\n\r\n    /**\r\n     * @override 初始化设置为当前显示对象的宽和高\r\n     */\r\n    protected _onAdded(): void {\r\n        let node = this.owner as Sprite;\r\n        if (node && 0 < node.width && 0 < node.height) {\r\n            if (100 == this.width && 100 == this.height) {\r\n                this.width = node.width;\r\n                this.height = node.height;\r\n            }\r\n        }\r\n    }\r\n\r\n    private _setShape(re: boolean = true): void {\r\n        var scaleX: number = ((this.owner as any)[\"scaleX\"] || 1);\r\n        var scaleY: number = ((this.owner as any)[\"scaleY\"] || 1);\r\n        this._shape.SetAsBox(this._width / 2 / Physics.PIXEL_RATIO * scaleX, this._height / 2 / Physics.PIXEL_RATIO * scaleY, new (<any>window).box2d.b2Vec2((this._width / 2 + this._x) / Physics.PIXEL_RATIO * scaleX, (this._height / 2 + this._y) / Physics.PIXEL_RATIO * scaleY));\r\n        if (re) this.refresh();\r\n    }\r\n\r\n    /**相对节点的x轴偏移*/\r\n    get x(): number {\r\n        return this._x;\r\n    }\r\n\r\n    set x(value: number) {\r\n        this._x = value;\r\n        if (this._shape) this._setShape();\r\n    }\r\n\r\n    /**相对节点的y轴偏移*/\r\n    get y(): number {\r\n        return this._y;\r\n    }\r\n\r\n    set y(value: number) {\r\n        this._y = value;\r\n        if (this._shape) this._setShape();\r\n    }\r\n\r\n    /**矩形宽度*/\r\n    get width(): number {\r\n        return this._width;\r\n    }\r\n\r\n    set width(value: number) {\r\n        if (value <= 0) throw \"BoxCollider size cannot be less than 0\";\r\n        this._width = value;\r\n        if (this._shape) this._setShape();\r\n    }\r\n\r\n    /**矩形高度*/\r\n    get height(): number {\r\n        return this._height;\r\n    }\r\n\r\n    set height(value: number) {\r\n        if (value <= 0) throw \"BoxCollider size cannot be less than 0\";\r\n        this._height = value;\r\n        if (this._shape) this._setShape();\r\n    }\r\n\r\n    /**@private 重置形状\r\n     * @override\r\n    */\r\n    resetShape(re: boolean = true): void {\r\n        this._setShape();\r\n    }\r\n}\r\n","import { ColliderBase } from \"./ColliderBase\";\r\nimport { Physics } from \"./Physics\";\r\n\r\n/**\r\n * 2D线形碰撞体\r\n */\r\nexport class ChainCollider extends ColliderBase {\r\n    /**相对节点的x轴偏移*/\r\n    private _x: number = 0;\r\n    /**相对节点的y轴偏移*/\r\n    private _y: number = 0;\r\n    /**用逗号隔开的点的集合，格式：x,y,x,y ...*/\r\n    private _points: string = \"0,0,100,0\";\r\n    /**是否是闭环，注意不要有自相交的链接形状，它可能不能正常工作*/\r\n    private _loop: boolean = false;\r\n    /**\r\n     * @override\r\n     */\r\n    protected getDef(): any {\r\n        if (!this._shape) {\r\n            this._shape = new (<any>window).box2d.b2ChainShape();\r\n            this._setShape(false);\r\n        }\r\n        this.label = (this.label || \"ChainCollider\");\r\n        return super.getDef();\r\n    }\r\n\r\n    private _setShape(re: boolean = true): void {\r\n        var arr: any[] = this._points.split(\",\");\r\n        var len: number = arr.length;\r\n        if (len % 2 == 1) throw \"ChainCollider points lenth must a multiplier of 2\";\r\n\r\n        var ps: any[] = [];\r\n        for (var i: number = 0, n: number = len; i < n; i += 2) {\r\n            ps.push(new (<any>window).box2d.b2Vec2((this._x + parseInt(arr[i])) / Physics.PIXEL_RATIO, (this._y + parseInt(arr[i + 1])) / Physics.PIXEL_RATIO));\r\n        }\r\n        // this._shape.CreateChain的第三四个参数(prevVertex, &nextVertex)，参考原js版本，设置为0\r\n        this._loop ? this._shape.CreateLoop(ps, len / 2) : this._shape.CreateChain(ps, len / 2, new (<any>window).box2d.b2Vec2(0, 0), new (<any>window).box2d.b2Vec2(0, 0));\r\n\r\n        if (re) this.refresh();\r\n    }\r\n\r\n    /**相对节点的x轴偏移*/\r\n    get x(): number {\r\n        return this._x;\r\n    }\r\n\r\n    set x(value: number) {\r\n        this._x = value;\r\n        if (this._shape) this._setShape();\r\n    }\r\n\r\n    /**相对节点的y轴偏移*/\r\n    get y(): number {\r\n        return this._y;\r\n    }\r\n\r\n    set y(value: number) {\r\n        this._y = value;\r\n        if (this._shape) this._setShape();\r\n    }\r\n\r\n    /**用逗号隔开的点的集合，格式：x,y,x,y ...*/\r\n    get points(): string {\r\n        return this._points;\r\n    }\r\n\r\n    set points(value: string) {\r\n        if (!value) throw \"ChainCollider points cannot be empty\";\r\n        this._points = value;\r\n        if (this._shape) this._setShape();\r\n    }\r\n\r\n    /**是否是闭环，注意不要有自相交的链接形状，它可能不能正常工作*/\r\n    get loop(): boolean {\r\n        return this._loop;\r\n    }\r\n\r\n    set loop(value: boolean) {\r\n        this._loop = value;\r\n        if (this._shape) this._setShape();\r\n    }\r\n}","import { Sprite } from \"../display/Sprite\";\r\nimport { ColliderBase } from \"./ColliderBase\";\r\nimport { Physics } from \"./Physics\";\r\n\r\n/**\r\n * 2D圆形碰撞体\r\n */\r\nexport class CircleCollider extends ColliderBase {\r\n    /**@private */\r\n    private static _temp: any;\r\n    /**相对节点的x轴偏移*/\r\n    private _x: number = 0;\r\n    /**相对节点的y轴偏移*/\r\n    private _y: number = 0;\r\n    /**圆形半径，必须为正数*/\r\n    private _radius: number = 50;\r\n    /**\r\n     * @override\r\n     */\r\n    protected getDef(): any {\r\n        if (!this._shape) {\r\n            this._shape = new (<any>window).box2d.b2CircleShape();\r\n            this._setShape(false);\r\n        }\r\n        this.label = (this.label || \"CircleCollider\");\r\n        return super.getDef();\r\n    }\r\n    /**\r\n     * @override 初始化设置为当前显示对象的宽和高\r\n     */\r\n    protected _onAdded(): void {\r\n        let node = this.owner as Sprite;\r\n        if (node && 0 < node.width && 0 < node.height) {\r\n            if (50 == this._radius) {\r\n                this._radius = node.width >> 1;\r\n            }\r\n        }\r\n    }\r\n\r\n    private _setShape(re: boolean = true): void {\r\n        var scale: number = (this.owner as any)[\"scaleX\"] || 1;\r\n        this._shape.m_radius = this._radius / Physics.PIXEL_RATIO * scale;\r\n        this._shape.m_p.Set((this._radius + this._x) / Physics.PIXEL_RATIO * scale, (this._radius + this._y) / Physics.PIXEL_RATIO * scale);\r\n        if (re) this.refresh();\r\n    }\r\n\r\n    /**相对节点的x轴偏移*/\r\n    get x(): number {\r\n        return this._x;\r\n    }\r\n\r\n    set x(value: number) {\r\n        this._x = value;\r\n        if (this._shape) this._setShape();\r\n    }\r\n\r\n    /**相对节点的y轴偏移*/\r\n    get y(): number {\r\n        return this._y;\r\n    }\r\n\r\n    set y(value: number) {\r\n        this._y = value;\r\n        if (this._shape) this._setShape();\r\n    }\r\n\r\n    /**圆形半径，必须为正数*/\r\n    get radius(): number {\r\n        return this._radius;\r\n    }\r\n\r\n    set radius(value: number) {\r\n        if (value <= 0) throw \"CircleCollider radius cannot be less than 0\";\r\n        this._radius = value;\r\n        if (this._shape) this._setShape();\r\n    }\r\n\r\n    /**@private 重置形状\r\n     * @override\r\n    */\r\n    resetShape(re: boolean = true): void {\r\n        this._setShape();\r\n    }\r\n}","import { ColliderBase } from \"./ColliderBase\";\r\nimport { Physics } from \"./Physics\";\r\n\r\n/**\r\n * 2D边框碰撞体\r\n */\r\nexport class EdgeCollider extends ColliderBase {\r\n    /**相对节点的x轴偏移*/\r\n    private _x: number = 0;\r\n    /**相对节点的y轴偏移*/\r\n    private _y: number = 0;\r\n    /**用逗号隔开的点的集合，注意只有两个点，格式：x,y,x,y*/\r\n    private _points: string = \"0,0,100,0\";\r\n    /**\r\n     * @override\r\n     */\r\n    protected getDef(): any {\r\n        if (!this._shape) {\r\n            this._shape = new (<any>window).box2d.b2EdgeShape();\r\n            this._setShape(false);\r\n        }\r\n        this.label = (this.label || \"EdgeCollider\");\r\n        return super.getDef();\r\n    }\r\n\r\n    private _setShape(re: boolean = true): void {\r\n        var arr: any[] = this._points.split(\",\");\r\n        var len: number = arr.length;\r\n        if (len % 2 == 1) throw \"EdgeCollider points lenth must a multiplier of 2\";\r\n\r\n        var ps: any[] = [];\r\n        for (var i: number = 0, n: number = len; i < n; i += 2) {\r\n            ps.push(new (<any>window).box2d.b2Vec2((this._x + parseInt(arr[i])) / Physics.PIXEL_RATIO, (this._y + parseInt(arr[i + 1])) / Physics.PIXEL_RATIO));\r\n        }\r\n        this._shape.SetTwoSided(ps[0], ps[1])\r\n\r\n        if (re) this.refresh();\r\n    }\r\n\r\n    /**相对节点的x轴偏移*/\r\n    get x(): number {\r\n        return this._x;\r\n    }\r\n\r\n    set x(value: number) {\r\n        this._x = value;\r\n        if (this._shape) this._setShape();\r\n    }\r\n\r\n    /**相对节点的y轴偏移*/\r\n    get y(): number {\r\n        return this._y;\r\n    }\r\n\r\n    set y(value: number) {\r\n        this._y = value;\r\n        if (this._shape) this._setShape();\r\n    }\r\n\r\n    /**用逗号隔开的点的集合，注意只有两个点，格式：x,y,x,y*/\r\n    get points(): string {\r\n        return this._points;\r\n    }\r\n\r\n    set points(value: string) {\r\n        if (!value) throw \"EdgeCollider points cannot be empty\";\r\n        this._points = value;\r\n        if (this._shape) this._setShape();\r\n    }\r\n}","import { Component } from \"../../components/Component\"\r\nimport { Physics } from \"../Physics\"\r\n\r\n/**\r\n * 关节基类\r\n */\r\nexport class JointBase extends Component {\r\n    /**原生关节对象*/\r\n    protected _joint: any;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this._singleton = false;\r\n    }\r\n\r\n    /**[只读]原生关节对象*/\r\n    get joint(): any {\r\n        if (!this._joint) this._createJoint();\r\n        return this._joint;\r\n    }\r\n\r\n    protected _onEnable(): void {\r\n        this._createJoint();\r\n    }\r\n\r\n    protected _onAwake(): void {\r\n        this._createJoint();\r\n    }\r\n\r\n    protected _createJoint(): void {\r\n    }\r\n\r\n    protected _onDisable(): void {\r\n        if (this._joint && this._joint.m_userData && !this._joint.m_userData.isDestroy) {\r\n            Physics.I._removeJoint(this._joint);\r\n        }\r\n        this._joint = null;\r\n    }\r\n}\r\n","import { JointBase } from \"./JointBase\";\r\nimport { Physics } from \"../Physics\"\r\nimport { RigidBody } from \"../RigidBody\"\r\n\r\n/**\r\n * 距离关节：两个物体上面各自有一点，两点之间的距离固定不变\r\n */\r\nexport class DistanceJoint extends JointBase {\r\n    /**@private */\r\n    private static _temp: any;\r\n    /**[首次设置有效]关节的自身刚体*/\r\n    selfBody: RigidBody;\r\n    /**[首次设置有效]关节的连接刚体，可不设置，默认为左上角空刚体*/\r\n    otherBody: RigidBody;\r\n    /**[首次设置有效]自身刚体链接点，是相对于自身刚体的左上角位置偏移*/\r\n    selfAnchor: any[] = [0, 0];\r\n    /**[首次设置有效]链接刚体链接点，是相对于otherBody的左上角位置偏移*/\r\n    otherAnchor: any[] = [0, 0];\r\n    /**[首次设置有效]两个刚体是否可以发生碰撞，默认为false*/\r\n    collideConnected: boolean = false;\r\n\r\n    /**约束的目标静止长度*/\r\n    private _length: number = 0;\r\n    /**约束的最小长度，-1表示使用默认值*/\r\n    private _maxLength: number = -1;\r\n    /**约束的最大长度，-1表示使用默认值*/\r\n    private _minLength: number = -1;\r\n\r\n    /**弹簧系统的震动频率，可以视为弹簧的弹性系数，通常频率应该小于时间步长频率的一半*/\r\n    private _frequency: number = 1;\r\n    /**刚体在回归到节点过程中受到的阻尼比，建议取值0~1*/\r\n    private _dampingRatio: number = 0;\r\n\r\n    /**\r\n     * @override\r\n     */\r\n    protected _createJoint(): void {\r\n        if (!this._joint) {\r\n            this.selfBody = this.selfBody || this.owner.getComponent(RigidBody);\r\n            if (!this.selfBody) throw \"selfBody can not be empty\";\r\n\r\n            var box2d: any = (<any>window).box2d;\r\n            var def: any = DistanceJoint._temp || (DistanceJoint._temp = new box2d.b2DistanceJointDef());\r\n            def.bodyA = this.otherBody ? this.otherBody.getBody() : Physics.I._emptyBody;\r\n            def.bodyB = this.selfBody.getBody();\r\n            def.localAnchorA.Set(this.otherAnchor[0] / Physics.PIXEL_RATIO, this.otherAnchor[1] / Physics.PIXEL_RATIO);\r\n            def.localAnchorB.Set(this.selfAnchor[0] / Physics.PIXEL_RATIO, this.selfAnchor[1] / Physics.PIXEL_RATIO);\r\n            box2d.b2LinearStiffness(def, this._frequency, this._dampingRatio, def.bodyA, def.bodyB);\r\n            // def.stiffness = this._stiffness;\r\n            // def.damping = this._damping;\r\n            def.collideConnected = this.collideConnected;\r\n            var p1: any = def.bodyA.GetWorldPoint(def.localAnchorA, new box2d.b2Vec2());\r\n            var p2: any = def.bodyB.GetWorldPoint(def.localAnchorB, new box2d.b2Vec2());\r\n            def.length = this._length / Physics.PIXEL_RATIO || box2d.b2Vec2.SubVV(p2, p1, new box2d.b2Vec2()).Length();\r\n            \r\n            def.maxLength = box2d.b2_maxFloat;\r\n            def.minLength = 0;\r\n            if (this._maxLength >= 0)\r\n                def.maxLength = this._maxLength / Physics.PIXEL_RATIO;\r\n            if (this._minLength >= 0)\r\n                def.minLength = this._minLength / Physics.PIXEL_RATIO;\r\n            this._joint = Physics.I._createJoint(def);\r\n        }\r\n    }\r\n\r\n    /**约束的目标静止长度*/\r\n    get length(): number {\r\n        return this._length;\r\n    }\r\n\r\n    set length(value: number) {\r\n        this._length = value;\r\n        if (this._joint) this._joint.SetLength(value / Physics.PIXEL_RATIO);\r\n    }\r\n\r\n    /**约束的最小长度*/\r\n    get minLength(): number {\r\n        return this._minLength;\r\n    }\r\n\r\n    set minLength(value: number) {\r\n        this._minLength = value;\r\n        if (this._joint) this._joint.SetMinLength(value / Physics.PIXEL_RATIO);\r\n    }\r\n\r\n    /**约束的最大长度*/\r\n    get maxLength(): number {\r\n        return this._maxLength;\r\n    }\r\n\r\n    set maxLength(value: number) {\r\n        this._maxLength = value;\r\n        if (this._joint) this._joint.SetMaxLength(value / Physics.PIXEL_RATIO);\r\n    }\r\n\r\n    /**弹簧系统的震动频率，可以视为弹簧的弹性系数，通常频率应该小于时间步长频率的一半*/\r\n    get frequency(): number {\r\n        return this._frequency;\r\n    }\r\n\r\n    set frequency(value: number) {\r\n        this._frequency = value;\r\n        if (this._joint) {\r\n            let out: any = {};\r\n            let box2d: any = (<any>window).box2d;\r\n            let bodyA = this.otherBody ? this.otherBody.getBody() : Physics.I._emptyBody;\r\n            let bodyB = this.selfBody.getBody();\r\n            box2d.b2LinearStiffness(out, this._frequency, this._dampingRatio, bodyA, bodyB);\r\n\r\n            this._joint.SetStiffness(out.stiffness);\r\n            this._joint.SetDamping(out.damping);\r\n        }\r\n    }\r\n\r\n    /**刚体在回归到节点过程中受到的阻尼比，建议取值0~1*/\r\n    get damping(): number {\r\n        return this._dampingRatio;\r\n    }\r\n\r\n    set damping(value: number) {\r\n        this._dampingRatio = value;\r\n        if (this._joint) {\r\n            let out: any = {};\r\n            let box2d: any = (<any>window).box2d;\r\n            let bodyA = this.otherBody ? this.otherBody.getBody() : Physics.I._emptyBody;\r\n            let bodyB = this.selfBody.getBody();\r\n            box2d.b2LinearStiffness(out, this._frequency, this._dampingRatio, bodyA, bodyB);\r\n\r\n            // this._joint.SetStiffness(out.stiffness); // 修改 dampingRatio 最终只影响 damping\r\n            this._joint.SetDamping(out.damping);\r\n        }\r\n    }\r\n}","import { JointBase } from \"./JointBase\";\r\nimport { Physics } from \"../Physics\"\r\nimport { RigidBody } from \"../RigidBody\"\r\n\r\n/**\r\n * 齿轮关节：用来模拟两个齿轮间的约束关系，齿轮旋转时，产生的动量有两种输出方式，一种是齿轮本身的角速度，另一种是齿轮表面的线速度\r\n */\r\nexport class GearJoint extends JointBase {\r\n    /**@private */\r\n    private static _temp: any;\r\n    /**[首次设置有效]要绑定的第1个关节，类型可以是RevoluteJoint或者PrismaticJoint*/\r\n    joint1: any;\r\n    /**[首次设置有效]要绑定的第2个关节，类型可以是RevoluteJoint或者PrismaticJoint*/\r\n    joint2: any;\r\n    /**[首次设置有效]两个刚体是否可以发生碰撞，默认为false*/\r\n    collideConnected: boolean = false;\r\n\r\n    /**两个齿轮角速度比例，默认1*/\r\n    private _ratio: number = 1;\r\n    /**\r\n     * @override\r\n     * \r\n     */\r\n    protected _createJoint(): void {\r\n        if (!this._joint) {\r\n            if (!this.joint1) throw \"Joint1 can not be empty\";\r\n            if (!this.joint2) throw \"Joint2 can not be empty\";\r\n\r\n            var box2d: any = (<any>window).box2d;\r\n            var def: any = GearJoint._temp || (GearJoint._temp = new box2d.b2GearJointDef());\r\n            def.bodyA = this.joint1.owner.getComponent(RigidBody).getBody();\r\n            def.bodyB = this.joint2.owner.getComponent(RigidBody).getBody();\r\n            def.joint1 = this.joint1.joint;\r\n            def.joint2 = this.joint2.joint;\r\n            def.ratio = this._ratio;\r\n            def.collideConnected = this.collideConnected;\r\n            this._joint = Physics.I._createJoint(def);\r\n        }\r\n    }\r\n\r\n    /**两个齿轮角速度比例，默认1*/\r\n    get ratio(): number {\r\n        return this._ratio;\r\n    }\r\n\r\n    set ratio(value: number) {\r\n        this._ratio = value;\r\n        if (this._joint) this._joint.SetRatio(value);\r\n    }\r\n}","import { JointBase } from \"./JointBase\";\r\nimport { Physics } from \"../Physics\"\r\nimport { RigidBody } from \"../RigidBody\"\r\n\r\n/**\r\n * 马达关节：用来限制两个刚体，使其相对位置和角度保持不变\r\n */\r\nexport class MotorJoint extends JointBase {\r\n    /**@private */\r\n    private static _temp: any;\r\n    /**[首次设置有效]关节的自身刚体*/\r\n    selfBody: RigidBody;\r\n    /**[首次设置有效]关节的连接刚体*/\r\n    otherBody: RigidBody;\r\n    /**[首次设置有效]两个刚体是否可以发生碰撞，默认为false*/\r\n    collideConnected: boolean = false;\r\n\r\n    /**基于otherBody坐标位置的偏移量，也是selfBody的目标位置*/\r\n    private _linearOffset: any[] = [0, 0];\r\n    /**基于otherBody的角度偏移量，也是selfBody的目标角度*/\r\n    private _angularOffset: number = 0;\r\n    /**当selfBody偏离目标位置时，为使其恢复到目标位置，马达关节所施加的最大作用力*/\r\n    private _maxForce: number = 1000;\r\n    /**当selfBody角度与目标角度不同时，为使其达到目标角度，马达关节施加的最大扭力*/\r\n    private _maxTorque: number = 1000;\r\n    /**selfBody向目标位置移动时的缓动因子，取值0~1，值越大速度越快*/\r\n    private _correctionFactor: number = 0.3;\r\n    /**\r\n     * @override\r\n     * \r\n     */\r\n    protected _createJoint(): void {\r\n        if (!this._joint) {\r\n            if (!this.otherBody) throw \"otherBody can not be empty\";\r\n            this.selfBody = this.selfBody || this.owner.getComponent(RigidBody);\r\n            if (!this.selfBody) throw \"selfBody can not be empty\";\r\n\r\n            var box2d: any = (<any>window).box2d;\r\n            var def: any = MotorJoint._temp || (MotorJoint._temp = new box2d.b2MotorJointDef());\r\n            def.Initialize(this.otherBody.getBody(), this.selfBody.getBody());\r\n            def.linearOffset = new box2d.b2Vec2(this._linearOffset[0] / Physics.PIXEL_RATIO, this._linearOffset[1] / Physics.PIXEL_RATIO);\r\n            def.angularOffset = this._angularOffset;\r\n            def.maxForce = this._maxForce;\r\n            def.maxTorque = this._maxTorque;\r\n            def.correctionFactor = this._correctionFactor;\r\n            def.collideConnected = this.collideConnected;\r\n\r\n            this._joint = Physics.I._createJoint(def);\r\n        }\r\n    }\r\n\r\n    /**基于otherBody坐标位置的偏移量，也是selfBody的目标位置*/\r\n    get linearOffset(): any[] {\r\n        return this._linearOffset;\r\n    }\r\n\r\n    set linearOffset(value: any[]) {\r\n        this._linearOffset = value;\r\n        if (this._joint) this._joint.SetLinearOffset(new (<any>window).box2d.b2Vec2(value[0] / Physics.PIXEL_RATIO, value[1] / Physics.PIXEL_RATIO));\r\n    }\r\n\r\n    /**基于otherBody的角度偏移量，也是selfBody的目标角度*/\r\n    get angularOffset(): number {\r\n        return this._angularOffset;\r\n    }\r\n\r\n    set angularOffset(value: number) {\r\n        this._angularOffset = value;\r\n        if (this._joint) this._joint.SetAngularOffset(value);\r\n    }\r\n\r\n    /**当selfBody偏离目标位置时，为使其恢复到目标位置，马达关节所施加的最大作用力*/\r\n    get maxForce(): number {\r\n        return this._maxForce;\r\n    }\r\n\r\n    set maxForce(value: number) {\r\n        this._maxForce = value;\r\n        if (this._joint) this._joint.SetMaxForce(value);\r\n    }\r\n\r\n    /**当selfBody角度与目标角度不同时，为使其达到目标角度，马达关节施加的最大扭力*/\r\n    get maxTorque(): number {\r\n        return this._maxTorque;\r\n    }\r\n\r\n    set maxTorque(value: number) {\r\n        this._maxTorque = value;\r\n        if (this._joint) this._joint.SetMaxTorque(value);\r\n    }\r\n\r\n    /**selfBody向目标位置移动时的缓动因子，取值0~1，值越大速度越快*/\r\n    get correctionFactor(): number {\r\n        return this._correctionFactor;\r\n    }\r\n\r\n    set correctionFactor(value: number) {\r\n        this._correctionFactor = value;\r\n        if (this._joint) this._joint.SetCorrectionFactor(value);\r\n    }\r\n}","import { JointBase } from \"./JointBase\";\r\nimport { Sprite } from \"../../display/Sprite\"\r\nimport { Event } from \"../../events/Event\"\r\nimport { Point } from \"../../maths/Point\"\r\nimport { Physics } from \"../Physics\"\r\nimport { RigidBody } from \"../RigidBody\"\r\nimport { ILaya } from \"../../../ILaya\";\r\n\r\n/**\r\n * 鼠标关节：鼠标关节用于通过鼠标来操控物体。它试图将物体拖向当前鼠标光标的位置。而在旋转方面就没有限制。\r\n */\r\nexport class MouseJoint extends JointBase {\r\n    /**@private */\r\n    private static _temp: any;\r\n    /**[首次设置有效]关节的自身刚体*/\r\n    selfBody: RigidBody;\r\n    /**[首次设置有效]关节的链接点，是相对于自身刚体的左上角位置偏移，如果不设置，则根据鼠标点击点作为连接点*/\r\n    anchor: any[];\r\n\r\n    /**鼠标关节在拖曳刚体bodyB时施加的最大作用力*/\r\n    private _maxForce: number = 10000;\r\n    /**弹簧系统的震动频率，可以视为弹簧的弹性系数，通常频率应该小于时间步长频率的一半*/\r\n    private _frequency: number = 5;\r\n    /**刚体在回归到节点过程中受到的阻尼比，建议取值0~1*/\r\n    private _dampingRatio: number = 0.7;\r\n\r\n    protected _onEnable(): void {\r\n        super._onEnable();\r\n        this.owner.on(Event.MOUSE_DOWN, this, this.onMouseDown);\r\n    }\r\n\r\n    private onMouseDown(): void {\r\n        this._createJoint();\r\n        ILaya.stage.on(Event.MOUSE_MOVE, this, this.onMouseMove);\r\n        ILaya.stage.once(Event.MOUSE_UP, this, this.onStageMouseUp);\r\n        ILaya.stage.once(Event.MOUSE_OUT, this, this.onStageMouseUp);\r\n    }\r\n    /**\r\n     * @override\r\n     * \r\n     */\r\n    protected _createJoint(): void {\r\n        if (!this._joint) {\r\n            this.selfBody = this.selfBody || this.owner.getComponent(RigidBody);\r\n            if (!this.selfBody) throw \"selfBody can not be empty\";\r\n\r\n            var box2d: any = (<any>window).box2d;\r\n            var def: any = MouseJoint._temp || (MouseJoint._temp = new box2d.b2MouseJointDef());\r\n            if (this.anchor) {\r\n                var anchorPos: Point = (<Sprite>this.selfBody.owner).localToGlobal(Point.TEMP.setTo(this.anchor[0], this.anchor[1]), false, Physics.I.worldRoot);\r\n            } else {\r\n                anchorPos = Physics.I.worldRoot.globalToLocal(Point.TEMP.setTo(ILaya.stage.mouseX, ILaya.stage.mouseY));\r\n            }\r\n            var anchorVec: any = new box2d.b2Vec2(anchorPos.x / Physics.PIXEL_RATIO, anchorPos.y / Physics.PIXEL_RATIO);\r\n            def.bodyA = Physics.I._emptyBody;\r\n            def.bodyB = this.selfBody.getBody();\r\n            def.target = anchorVec;\r\n            box2d.b2LinearStiffness(def, this._frequency, this._dampingRatio, def.bodyA, def.bodyB);\r\n            // def.stiffness = this._stiffness;\r\n            // def.damping = this._damping;\r\n            def.maxForce = this._maxForce;\r\n            this._joint = Physics.I._createJoint(def);\r\n        }\r\n    }\r\n\r\n    private onStageMouseUp(): void {\r\n        ILaya.stage.off(Event.MOUSE_MOVE, this, this.onMouseMove);\r\n        ILaya.stage.off(Event.MOUSE_UP, this, this.onStageMouseUp);\r\n        ILaya.stage.off(Event.MOUSE_OUT, this, this.onStageMouseUp);\r\n\r\n        super._onDisable();\r\n    }\r\n\r\n    private onMouseMove(): void {\r\n        this._joint.SetTarget(new (<any>window).box2d.b2Vec2(Physics.I.worldRoot.mouseX / Physics.PIXEL_RATIO, Physics.I.worldRoot.mouseY / Physics.PIXEL_RATIO));\r\n    }\r\n\r\n    protected _onDisable(): void {\r\n        super._onDisable();\r\n\r\n        this.owner.off(Event.MOUSE_DOWN, this, this.onMouseDown);\r\n    }\r\n\r\n    /**鼠标关节在拖曳刚体bodyB时施加的最大作用力*/\r\n    get maxForce(): number {\r\n        return this._maxForce;\r\n    }\r\n\r\n    set maxForce(value: number) {\r\n        this._maxForce = value;\r\n        if (this._joint) this._joint.SetMaxForce(value);\r\n    }\r\n\r\n    /**弹簧系统的震动频率，可以视为弹簧的弹性系数，通常频率应该小于时间步长频率的一半*/\r\n    get frequency(): number {\r\n        return this._frequency;\r\n    }\r\n\r\n    set frequency(value: number) {\r\n        this._frequency = value;\r\n        if (this._joint) {\r\n            let out: any = {};\r\n            let box2d: any = (<any>window).box2d;\r\n            let bodyA = Physics.I._emptyBody;\r\n            let bodyB = this.selfBody.getBody();\r\n            box2d.b2LinearStiffness(out, this._frequency, this._dampingRatio, bodyA, bodyB);\r\n\r\n            this._joint.SetStiffness(out.stiffness);\r\n            this._joint.SetDamping(out.damping);\r\n        }\r\n    }\r\n\r\n    /**刚体在回归到节点过程中受到的阻尼比，建议取值0~1*/\r\n    get damping(): number {\r\n        return this._dampingRatio;\r\n    }\r\n\r\n    set damping(value: number) {\r\n        this._dampingRatio = value;\r\n        if (this._joint) {\r\n            let out: any = {};\r\n            let box2d: any = (<any>window).box2d;\r\n            let bodyA = Physics.I._emptyBody;\r\n            let bodyB = this.selfBody.getBody();\r\n            box2d.b2LinearStiffness(out, this._frequency, this._dampingRatio, bodyA, bodyB);\r\n\r\n            // this._joint.SetStiffness(out.stiffness); // 修改 dampingRatio 最终只影响 damping\r\n            this._joint.SetDamping(out.damping);\r\n        }\r\n    }\r\n}\r\n","import { JointBase } from \"./JointBase\";\r\nimport { Sprite } from \"../../display/Sprite\"\r\nimport { Point } from \"../../maths/Point\"\r\nimport { Physics } from \"../Physics\"\r\nimport { RigidBody } from \"../RigidBody\"\r\n\r\n/**\r\n * 平移关节：移动关节允许两个物体沿指定轴相对移动，它会阻止相对旋转\r\n */\r\nexport class PrismaticJoint extends JointBase {\r\n    /**@private */\r\n    private static _temp: any;\r\n    /**[首次设置有效]关节的自身刚体*/\r\n    selfBody: RigidBody;\r\n    /**[首次设置有效]关节的连接刚体，可不设置，默认为左上角空刚体*/\r\n    otherBody: RigidBody;\r\n    /**[首次设置有效]关节的控制点，是相对于自身刚体的左上角位置偏移*/\r\n    anchor: any[] = [0, 0];\r\n    /**[首次设置有效]一个向量值，描述运动方向，比如1,0是沿X轴向右*/\r\n    axis: any[] = [1, 0];\r\n    /**[首次设置有效]两个刚体是否可以发生碰撞，默认为false*/\r\n    collideConnected: boolean = false;\r\n\r\n    /**是否开启马达，开启马达可使目标刚体运动*/\r\n    private _enableMotor: boolean = false;\r\n    /**启用马达后，在axis坐标轴上移动可以达到的最大速度*/\r\n    private _motorSpeed: number = 0;\r\n    /**启用马达后，可以施加的最大作用力*/\r\n    private _maxMotorForce: number = 10000;\r\n\r\n    /**是否对刚体的移动范围加以约束*/\r\n    private _enableLimit: boolean = false;\r\n    /**启用约束后，刚体移动范围的下限，是距离anchor的偏移量*/\r\n    private _lowerTranslation: number = 0;\r\n    /**启用约束后，刚体移动范围的上限，是距离anchor的偏移量*/\r\n    private _upperTranslation: number = 0;\r\n    /**\r\n     * @override\r\n     * \r\n     */\r\n    protected _createJoint(): void {\r\n        if (!this._joint) {\r\n            //if (!otherBody) throw \"otherBody can not be empty\";\r\n            this.selfBody = this.selfBody || this.owner.getComponent(RigidBody);\r\n            if (!this.selfBody) throw \"selfBody can not be empty\";\r\n\r\n            var box2d: any = (<any>window).box2d;\r\n            var def: any = PrismaticJoint._temp || (PrismaticJoint._temp = new box2d.b2PrismaticJointDef());\r\n            var anchorPos: Point = (<Sprite>this.selfBody.owner).localToGlobal(Point.TEMP.setTo(this.anchor[0], this.anchor[1]), false, Physics.I.worldRoot);\r\n            var anchorVec: any = new box2d.b2Vec2(anchorPos.x / Physics.PIXEL_RATIO, anchorPos.y / Physics.PIXEL_RATIO);\r\n            def.Initialize(this.otherBody ? this.otherBody.getBody() : Physics.I._emptyBody, this.selfBody.getBody(), anchorVec, new box2d.b2Vec2(this.axis[0], this.axis[1]));\r\n            def.enableMotor = this._enableMotor;\r\n            def.motorSpeed = this._motorSpeed;\r\n            def.maxMotorForce = this._maxMotorForce;\r\n            def.enableLimit = this._enableLimit;\r\n            def.lowerTranslation = this._lowerTranslation / Physics.PIXEL_RATIO;\r\n            def.upperTranslation = this._upperTranslation / Physics.PIXEL_RATIO;\r\n            def.collideConnected = this.collideConnected;\r\n\r\n            this._joint = Physics.I._createJoint(def);\r\n        }\r\n    }\r\n\r\n    /**是否开启马达，开启马达可使目标刚体运动*/\r\n    get enableMotor(): boolean {\r\n        return this._enableMotor;\r\n    }\r\n\r\n    set enableMotor(value: boolean) {\r\n        this._enableMotor = value;\r\n        if (this._joint) this._joint.EnableMotor(value);\r\n    }\r\n\r\n    /**启用马达后，在axis坐标轴上移动可以达到的最大速度*/\r\n    get motorSpeed(): number {\r\n        return this._motorSpeed;\r\n    }\r\n\r\n    set motorSpeed(value: number) {\r\n        this._motorSpeed = value;\r\n        if (this._joint) this._joint.SetMotorSpeed(value);\r\n    }\r\n\r\n    /**启用马达后，可以施加的最大作用力*/\r\n    get maxMotorForce(): number {\r\n        return this._maxMotorForce;\r\n    }\r\n\r\n    set maxMotorForce(value: number) {\r\n        this._maxMotorForce = value;\r\n        if (this._joint) this._joint.SetMaxMotorForce(value);\r\n    }\r\n\r\n    /**是否对刚体的移动范围加以约束*/\r\n    get enableLimit(): boolean {\r\n        return this._enableLimit;\r\n    }\r\n\r\n    set enableLimit(value: boolean) {\r\n        this._enableLimit = value;\r\n        if (this._joint) this._joint.EnableLimit(value);\r\n    }\r\n\r\n    /**启用约束后，刚体移动范围的下限，是距离anchor的偏移量*/\r\n    get lowerTranslation(): number {\r\n        return this._lowerTranslation;\r\n    }\r\n\r\n    set lowerTranslation(value: number) {\r\n        this._lowerTranslation = value;\r\n        if (this._joint) this._joint.SetLimits(value, this._upperTranslation);\r\n    }\r\n\r\n    /**启用约束后，刚体移动范围的上限，是距离anchor的偏移量*/\r\n    get upperTranslation(): number {\r\n        return this._upperTranslation;\r\n    }\r\n\r\n    set upperTranslation(value: number) {\r\n        this._upperTranslation = value;\r\n        if (this._joint) this._joint.SetLimits(this._lowerTranslation, value);\r\n    }\r\n}","import { JointBase } from \"./JointBase\";\r\nimport { Sprite } from \"../../display/Sprite\"\r\nimport { Point } from \"../../maths/Point\"\r\nimport { Physics } from \"../Physics\"\r\nimport { RigidBody } from \"../RigidBody\"\r\n\r\n/**\r\n * 滑轮关节：它将两个物体接地(ground)并彼此连接，当一个物体上升，另一个物体就会下降\r\n */\r\nexport class PulleyJoint extends JointBase {\r\n    /**@private */\r\n    private static _temp: any;\r\n    /**[首次设置有效]关节的自身刚体*/\r\n    selfBody: RigidBody;\r\n    /**[首次设置有效]关节的连接刚体*/\r\n    otherBody: RigidBody;\r\n    /**[首次设置有效]自身刚体链接点，是相对于自身刚体的左上角位置偏移*/\r\n    selfAnchor: any[] = [0, 0];\r\n    /**[首次设置有效]链接刚体链接点，是相对于otherBody的左上角位置偏移*/\r\n    otherAnchor: any[] = [0, 0];\r\n\r\n    /**[首次设置有效]滑轮上与节点selfAnchor相连接的节点，是相对于自身刚体的左上角位置偏移*/\r\n    selfGroundPoint: any[] = [0, 0];\r\n    /**[首次设置有效]滑轮上与节点otherAnchor相连接的节点，是相对于otherBody的左上角位置偏移*/\r\n    otherGroundPoint: any[] = [0, 0];\r\n    /**[首次设置有效]两刚体移动距离比率*/\r\n    ratio: number = 1.5;\r\n    /**[首次设置有效]两个刚体是否可以发生碰撞，默认为false*/\r\n    collideConnected: boolean = false;\r\n    /**\r\n     * @override\r\n     */\r\n    protected _createJoint(): void {\r\n        if (!this._joint) {\r\n            if (!this.otherBody) throw \"otherBody can not be empty\";\r\n            this.selfBody = this.selfBody || this.owner.getComponent(RigidBody);\r\n            if (!this.selfBody) throw \"selfBody can not be empty\";\r\n\r\n            var box2d: any = (<any>window).box2d;\r\n            var def: any = PulleyJoint._temp || (PulleyJoint._temp = new box2d.b2PulleyJointDef());\r\n            var posA: Point = ((<Sprite>this.otherBody.owner)).localToGlobal(Point.TEMP.setTo(this.otherAnchor[0], this.otherAnchor[1]), false, Physics.I.worldRoot);\r\n            var anchorVecA: any = new box2d.b2Vec2(posA.x / Physics.PIXEL_RATIO, posA.y / Physics.PIXEL_RATIO);\r\n            var posB: Point = ((<Sprite>this.selfBody.owner)).localToGlobal(Point.TEMP.setTo(this.selfAnchor[0], this.selfAnchor[1]), false, Physics.I.worldRoot);\r\n            var anchorVecB: any = new box2d.b2Vec2(posB.x / Physics.PIXEL_RATIO, posB.y / Physics.PIXEL_RATIO);\r\n            var groundA: Point = ((<Sprite>this.otherBody.owner)).localToGlobal(Point.TEMP.setTo(this.otherGroundPoint[0], this.otherGroundPoint[1]), false, Physics.I.worldRoot);\r\n            var groundVecA: any = new box2d.b2Vec2(groundA.x / Physics.PIXEL_RATIO, groundA.y / Physics.PIXEL_RATIO);\r\n            var groundB: Point = ((<Sprite>this.selfBody.owner)).localToGlobal(Point.TEMP.setTo(this.selfGroundPoint[0], this.selfGroundPoint[1]), false, Physics.I.worldRoot);\r\n            var groundVecB: any = new box2d.b2Vec2(groundB.x / Physics.PIXEL_RATIO, groundB.y / Physics.PIXEL_RATIO);\r\n\r\n            def.Initialize(this.otherBody.getBody(), this.selfBody.getBody(), groundVecA, groundVecB, anchorVecA, anchorVecB, this.ratio);\r\n            def.collideConnected = this.collideConnected;\r\n            this._joint = Physics.I._createJoint(def);\r\n        }\r\n    }\r\n}","import { JointBase } from \"./JointBase\";\r\nimport { Sprite } from \"../../display/Sprite\"\r\nimport { Point } from \"../../maths/Point\"\r\nimport { Physics } from \"../Physics\"\r\nimport { RigidBody } from \"../RigidBody\"\r\n\r\n/**\r\n * 旋转关节强制两个物体共享一个锚点，两个物体相对旋转\r\n */\r\nexport class RevoluteJoint extends JointBase {\r\n    /**@private */\r\n    private static _temp: any;\r\n    /**[首次设置有效]关节的自身刚体*/\r\n    selfBody: RigidBody;\r\n    /**[首次设置有效]关节的连接刚体，可不设置*/\r\n    otherBody: RigidBody;\r\n    /**[首次设置有效]关节的链接点，是相对于自身刚体的左上角位置偏移*/\r\n    anchor: any[] = [0, 0];\r\n    /**[首次设置有效]两个刚体是否可以发生碰撞，默认为false*/\r\n    collideConnected: boolean = false;\r\n\r\n    /**是否开启马达，开启马达可使目标刚体运动*/\r\n    private _enableMotor: boolean = false;\r\n    /**启用马达后，可以达到的最大旋转速度*/\r\n    private _motorSpeed: number = 0;\r\n    /**启用马达后，可以施加的最大扭距，如果最大扭矩太小，会导致不旋转*/\r\n    private _maxMotorTorque: number = 10000;\r\n\r\n    /**是否对刚体的旋转范围加以约束*/\r\n    private _enableLimit: boolean = false;\r\n    /**启用约束后，刚体旋转范围的下限弧度*/\r\n    private _lowerAngle: number = 0;\r\n    /**启用约束后，刚体旋转范围的上限弧度*/\r\n    private _upperAngle: number = 0;\r\n    /**\r\n     * @override\r\n     */\r\n    protected _createJoint(): void {\r\n        if (!this._joint) {\r\n            //if (!otherBody) throw \"otherBody can not be empty\";\r\n            this.selfBody = this.selfBody || this.owner.getComponent(RigidBody);\r\n            if (!this.selfBody) throw \"selfBody can not be empty\";\r\n\r\n            var box2d: any = (<any>window).box2d;\r\n            var def: any = RevoluteJoint._temp || (RevoluteJoint._temp = new box2d.b2RevoluteJointDef());\r\n            var anchorPos: Point = (<Sprite>this.selfBody.owner).localToGlobal(Point.TEMP.setTo(this.anchor[0], this.anchor[1]), false, Physics.I.worldRoot);\r\n            var anchorVec: any = new box2d.b2Vec2(anchorPos.x / Physics.PIXEL_RATIO, anchorPos.y / Physics.PIXEL_RATIO);\r\n            def.Initialize(this.otherBody ? this.otherBody.getBody() : Physics.I._emptyBody, this.selfBody.getBody(), anchorVec);\r\n            def.enableMotor = this._enableMotor;\r\n            def.motorSpeed = this._motorSpeed;\r\n            def.maxMotorTorque = this._maxMotorTorque;\r\n            def.enableLimit = this._enableLimit;\r\n            def.lowerAngle = this._lowerAngle;\r\n            def.upperAngle = this._upperAngle;\r\n            def.collideConnected = this.collideConnected;\r\n\r\n            this._joint = Physics.I._createJoint(def);\r\n        }\r\n    }\r\n\r\n    /**是否开启马达，开启马达可使目标刚体运动*/\r\n    get enableMotor(): boolean {\r\n        return this._enableMotor;\r\n    }\r\n\r\n    set enableMotor(value: boolean) {\r\n        this._enableMotor = value;\r\n        if (this._joint) this._joint.EnableMotor(value);\r\n    }\r\n\r\n    /**启用马达后，可以达到的最大旋转速度*/\r\n    get motorSpeed(): number {\r\n        return this._motorSpeed;\r\n    }\r\n\r\n    set motorSpeed(value: number) {\r\n        this._motorSpeed = value;\r\n        if (this._joint) this._joint.SetMotorSpeed(value);\r\n    }\r\n\r\n    /**启用马达后，可以施加的最大扭距，如果最大扭矩太小，会导致不旋转*/\r\n    get maxMotorTorque(): number {\r\n        return this._maxMotorTorque;\r\n    }\r\n\r\n    set maxMotorTorque(value: number) {\r\n        this._maxMotorTorque = value;\r\n        if (this._joint) this._joint.SetMaxMotorTorque(value);\r\n    }\r\n\r\n    /**是否对刚体的旋转范围加以约束*/\r\n    get enableLimit(): boolean {\r\n        return this._enableLimit;\r\n    }\r\n\r\n    set enableLimit(value: boolean) {\r\n        this._enableLimit = value;\r\n        if (this._joint) this._joint.EnableLimit(value);\r\n    }\r\n\r\n    /**启用约束后，刚体旋转范围的下限弧度*/\r\n    get lowerAngle(): number {\r\n        return this._lowerAngle;\r\n    }\r\n\r\n    set lowerAngle(value: number) {\r\n        this._lowerAngle = value;\r\n        if (this._joint) this._joint.SetLimits(value, this._upperAngle);\r\n    }\r\n\r\n    /**启用约束后，刚体旋转范围的上限弧度*/\r\n    get upperAngle(): number {\r\n        return this._upperAngle;\r\n    }\r\n\r\n    set upperAngle(value: number) {\r\n        this._upperAngle = value;\r\n        if (this._joint) this._joint.SetLimits(this._lowerAngle, value);\r\n    }\r\n}","import { JointBase } from \"./JointBase\";\r\nimport { Sprite } from \"../../display/Sprite\"\r\nimport { Point } from \"../../maths/Point\"\r\nimport { Physics } from \"../Physics\"\r\nimport { RigidBody } from \"../RigidBody\"\r\n\r\n/**\r\n * 焊接关节：焊接关节的用途是使两个物体不能相对运动，受到关节的限制，两个刚体的相对位置和角度都保持不变，看上去像一个整体\r\n */\r\nexport class WeldJoint extends JointBase {\r\n    /**@private */\r\n    private static _temp: any;\r\n    /**[首次设置有效]关节的自身刚体*/\r\n    selfBody: RigidBody;\r\n    /**[首次设置有效]关节的连接刚体*/\r\n    otherBody: RigidBody;\r\n    /**[首次设置有效]关节的链接点，是相对于自身刚体的左上角位置偏移*/\r\n    anchor: any[] = [0, 0];\r\n    /**[首次设置有效]两个刚体是否可以发生碰撞，默认为false*/\r\n    collideConnected: boolean = false;\r\n\r\n   /**弹簧系统的震动频率，可以视为弹簧的弹性系数，通常频率应该小于时间步长频率的一半*/\r\n   private _frequency: number = 5;\r\n   /**刚体在回归到节点过程中受到的阻尼比，建议取值0~1*/\r\n   private _dampingRatio: number = 0.7;\r\n    /**\r\n     * @override\r\n     */\r\n    protected _createJoint(): void {\r\n        if (!this._joint) {\r\n            if (!this.otherBody) throw \"otherBody can not be empty\";\r\n            this.selfBody = this.selfBody || this.owner.getComponent(RigidBody);\r\n            if (!this.selfBody) throw \"selfBody can not be empty\";\r\n\r\n            var box2d: any = (<any>window).box2d;\r\n            var def: any = WeldJoint._temp || (WeldJoint._temp = new box2d.b2WeldJointDef());\r\n            var anchorPos: Point = (<Sprite>this.selfBody.owner).localToGlobal(Point.TEMP.setTo(this.anchor[0], this.anchor[1]), false, Physics.I.worldRoot);\r\n            var anchorVec: any = new box2d.b2Vec2(anchorPos.x / Physics.PIXEL_RATIO, anchorPos.y / Physics.PIXEL_RATIO);\r\n            def.Initialize(this.otherBody.getBody(), this.selfBody.getBody(), anchorVec);\r\n            box2d.b2AngularStiffness(def, this._frequency, this._dampingRatio, def.bodyA, def.bodyB);\r\n            // def.stiffness = this._stiffness;\r\n            // def.damping = this._damping;\r\n            def.collideConnected = this.collideConnected;\r\n\r\n            this._joint = Physics.I._createJoint(def);\r\n        }\r\n    }\r\n\r\n    /**弹簧系统的震动频率，可以视为弹簧的弹性系数，通常频率应该小于时间步长频率的一半*/\r\n    get frequency(): number {\r\n        return this._frequency;\r\n    }\r\n\r\n    set frequency(value: number) {\r\n        this._frequency = value;\r\n        if (this._joint) {\r\n            let out: any = {};\r\n            let box2d: any = (<any>window).box2d;\r\n            let bodyA = this.otherBody ? this.otherBody.getBody() : Physics.I._emptyBody;\r\n            let bodyB = this.selfBody.getBody();\r\n            box2d.b2AngularStiffness(out, this._frequency, this._dampingRatio, bodyA, bodyB);\r\n\r\n            this._joint.SetStiffness(out.stiffness);\r\n            this._joint.SetDamping(out.damping);\r\n        }\r\n    }\r\n\r\n    /**刚体在回归到节点过程中受到的阻尼比，建议取值0~1*/\r\n    get damping(): number {\r\n        return this._dampingRatio;\r\n    }\r\n\r\n    set damping(value: number) {\r\n        this._dampingRatio = value;\r\n        if (this._joint) {\r\n            let out: any = {};\r\n            let box2d: any = (<any>window).box2d;\r\n            let bodyA = this.otherBody ? this.otherBody.getBody() : Physics.I._emptyBody;\r\n            let bodyB = this.selfBody.getBody();\r\n            box2d.b2AngularStiffness(out, this._frequency, this._dampingRatio, bodyA, bodyB);\r\n\r\n            // this._joint.SetStiffness(out.stiffness); // 修改 dampingRatio 最终只影响 damping\r\n            this._joint.SetDamping(out.damping);\r\n        }\r\n    }\r\n}","import { JointBase } from \"./JointBase\";\r\nimport { Sprite } from \"../../display/Sprite\"\r\nimport { Point } from \"../../maths/Point\"\r\nimport { Physics } from \"../Physics\"\r\nimport { RigidBody } from \"../RigidBody\"\r\n\r\n/**\r\n * 轮子关节：围绕节点旋转，包含弹性属性，使得刚体在节点位置发生弹性偏移\r\n */\r\nexport class WheelJoint extends JointBase {\r\n    /**@private */\r\n    private static _temp: any;\r\n    /**[首次设置有效]关节的自身刚体*/\r\n    selfBody: RigidBody;\r\n    /**[首次设置有效]关节的连接刚体*/\r\n    otherBody: RigidBody;\r\n    /**[首次设置有效]关节的链接点，是相对于自身刚体的左上角位置偏移*/\r\n    anchor: any[] = [0, 0];\r\n    /**[首次设置有效]两个刚体是否可以发生碰撞，默认为false*/\r\n    collideConnected: boolean = false;\r\n    /**[首次设置有效]一个向量值，描述运动方向，比如1,0是沿X轴向右*/\r\n    axis: any[] = [1, 0];\r\n\r\n    /**弹簧系统的震动频率，可以视为弹簧的弹性系数，通常频率应该小于时间步长频率的一半*/\r\n    private _frequency: number = 5;\r\n    /**刚体在回归到节点过程中受到的阻尼比，建议取值0~1*/\r\n    private _dampingRatio: number = 0.7;\r\n\r\n    /**是否开启马达，开启马达可使目标刚体运动*/\r\n    private _enableMotor: boolean = false;\r\n    /**启用马达后，可以达到的最大旋转速度*/\r\n    private _motorSpeed: number = 0;\r\n    /**启用马达后，可以施加的最大扭距，如果最大扭矩太小，会导致不旋转*/\r\n    private _maxMotorTorque: number = 10000;\r\n\r\n     /**是否对刚体的移动范围加以约束*/\r\n     private _enableLimit: boolean = true;\r\n     /**启用约束后，刚体移动范围的下限，是距离anchor的偏移量*/\r\n     private _lowerTranslation: number = 0;\r\n     /**启用约束后，刚体移动范围的上限，是距离anchor的偏移量*/\r\n     private _upperTranslation: number = 0;\r\n     \r\n    /**\r\n     * @override\r\n     */\r\n    protected _createJoint(): void {\r\n        if (!this._joint) {\r\n            if (!this.otherBody) throw \"otherBody can not be empty\";\r\n            this.selfBody = this.selfBody || this.owner.getComponent(RigidBody);\r\n            if (!this.selfBody) throw \"selfBody can not be empty\";\r\n\r\n            var box2d: any = (<any>window).box2d;\r\n            var def: any = WheelJoint._temp || (WheelJoint._temp = new box2d.b2WheelJointDef());\r\n            var anchorPos: Point = (<Sprite>this.selfBody.owner).localToGlobal(Point.TEMP.setTo(this.anchor[0], this.anchor[1]), false, Physics.I.worldRoot);\r\n            var anchorVec: any = new box2d.b2Vec2(anchorPos.x / Physics.PIXEL_RATIO, anchorPos.y / Physics.PIXEL_RATIO);\r\n            def.Initialize(this.otherBody.getBody(), this.selfBody.getBody(), anchorVec, new box2d.b2Vec2(this.axis[0], this.axis[1]));\r\n            def.enableMotor = this._enableMotor;\r\n            def.motorSpeed = this._motorSpeed;\r\n            def.maxMotorTorque = this._maxMotorTorque;\r\n            box2d.b2LinearStiffness(def, this._frequency, this._dampingRatio, def.bodyA, def.bodyB);\r\n            // def.stiffness = this._stiffness;\r\n            // def.damping = this._damping;\r\n            def.collideConnected = this.collideConnected;\r\n            def.enableLimit = this._enableLimit;\r\n            def.lowerTranslation = this._lowerTranslation / Physics.PIXEL_RATIO;\r\n            def.upperTranslation = this._upperTranslation / Physics.PIXEL_RATIO;\r\n\r\n            this._joint = Physics.I._createJoint(def);\r\n        }\r\n    }\r\n\r\n    /**弹簧系统的震动频率，可以视为弹簧的弹性系数，通常频率应该小于时间步长频率的一半*/\r\n    get frequency(): number {\r\n        return this._frequency;\r\n    }\r\n\r\n    set frequency(value: number) {\r\n        this._frequency = value;\r\n        if (this._joint) {\r\n            let out: any = {};\r\n            let box2d: any = (<any>window).box2d;\r\n            let bodyA = this.otherBody ? this.otherBody.getBody() : Physics.I._emptyBody;\r\n            let bodyB = this.selfBody.getBody();\r\n            box2d.b2LinearStiffness(out, this._frequency, this._dampingRatio, bodyA, bodyB);\r\n\r\n            this._joint.SetStiffness(out.stiffness);\r\n            this._joint.SetDamping(out.damping);\r\n        }\r\n    }\r\n\r\n    /**刚体在回归到节点过程中受到的阻尼比，建议取值0~1*/\r\n    get damping(): number {\r\n        return this._dampingRatio;\r\n    }\r\n\r\n    set damping(value: number) {\r\n        this._dampingRatio = value;\r\n        if (this._joint) {\r\n            let out: any = {};\r\n            let box2d: any = (<any>window).box2d;\r\n            let bodyA = this.otherBody ? this.otherBody.getBody() : Physics.I._emptyBody;\r\n            let bodyB = this.selfBody.getBody();\r\n            box2d.b2LinearStiffness(out, this._frequency, this._dampingRatio, bodyA, bodyB);\r\n\r\n            // this._joint.SetStiffness(out.stiffness); // 修改 dampingRatio 最终只影响 damping\r\n            this._joint.SetDamping(out.damping);\r\n        }\r\n    }\r\n\r\n    /**是否开启马达，开启马达可使目标刚体运动*/\r\n    get enableMotor(): boolean {\r\n        return this._enableMotor;\r\n    }\r\n\r\n    set enableMotor(value: boolean) {\r\n        this._enableMotor = value;\r\n        if (this._joint) this._joint.EnableMotor(value);\r\n    }\r\n\r\n    /**启用马达后，可以达到的最大旋转速度*/\r\n    get motorSpeed(): number {\r\n        return this._motorSpeed;\r\n    }\r\n\r\n    set motorSpeed(value: number) {\r\n        this._motorSpeed = value;\r\n        if (this._joint) this._joint.SetMotorSpeed(value);\r\n    }\r\n\r\n    /**启用马达后，可以施加的最大扭距，如果最大扭矩太小，会导致不旋转*/\r\n    get maxMotorTorque(): number {\r\n        return this._maxMotorTorque;\r\n    }\r\n\r\n    set maxMotorTorque(value: number) {\r\n        this._maxMotorTorque = value;\r\n        if (this._joint) this._joint.SetMaxMotorTorque(value);\r\n    }\r\n\r\n    /**是否对刚体的移动范围加以约束*/\r\n    get enableLimit(): boolean {\r\n        return this._enableLimit;\r\n    }\r\n\r\n    set enableLimit(value: boolean) {\r\n        this._enableLimit = value;\r\n        if (this._joint) this._joint.EnableLimit(value);\r\n    }\r\n\r\n    /**启用约束后，刚体移动范围的下限，是距离anchor的偏移量*/\r\n    get lowerTranslation(): number {\r\n        return this._lowerTranslation;\r\n    }\r\n\r\n    set lowerTranslation(value: number) {\r\n        this._lowerTranslation = value;\r\n        if (this._joint) this._joint.SetLimits(value, this._upperTranslation);\r\n    }\r\n\r\n    /**启用约束后，刚体移动范围的上限，是距离anchor的偏移量*/\r\n    get upperTranslation(): number {\r\n        return this._upperTranslation;\r\n    }\r\n\r\n    set upperTranslation(value: number) {\r\n        this._upperTranslation = value;\r\n        if (this._joint) this._joint.SetLimits(this._lowerTranslation, value);\r\n    }\r\n}","import { ILaya } from \"../../ILaya\";\r\nimport { Graphics } from \"../display/Graphics\"\r\nimport { Sprite } from \"../display/Sprite\"\r\nimport { Context } from \"../resource/Context\"\r\nimport { Browser } from \"../utils/Browser\"\r\nimport { Physics } from \"./Physics\";\r\n\r\n/**\r\n * 物理辅助线，调用PhysicsDebugDraw.enable()开启，或者通过IDE设置打开\r\n */\r\nexport class PhysicsDebugDraw extends Sprite {\r\n    /**@private */\r\n    m_drawFlags: number = 99;\r\n    /**@private */\r\n    static box2d: any;\r\n    /**@private */\r\n    static DrawString_s_color: any;\r\n    /**@private */\r\n    static DrawStringWorld_s_p: any;\r\n    /**@private */\r\n    static DrawStringWorld_s_cc: any;\r\n    /**@private */\r\n    static DrawStringWorld_s_color: any;\r\n    /**@private */\r\n    world: any;\r\n    /**@private */\r\n    private _camera: any;\r\n    /**@private */\r\n    private static _canvas: any;\r\n    /**@private */\r\n    private static _inited: boolean = false;\r\n    /**@private */\r\n    private _mG: Graphics;\r\n    /**@private */\r\n    private _textSp: Sprite;\r\n    /**@private */\r\n    private _textG: Graphics;\r\n\r\n    /**@private */\r\n    static init(): void {\r\n        PhysicsDebugDraw.box2d = Browser.window.box2d;\r\n        PhysicsDebugDraw.DrawString_s_color = new PhysicsDebugDraw.box2d.b2Color(0.9, 0.6, 0.6);\r\n        PhysicsDebugDraw.DrawStringWorld_s_p = new PhysicsDebugDraw.box2d.b2Vec2();\r\n        PhysicsDebugDraw.DrawStringWorld_s_cc = new PhysicsDebugDraw.box2d.b2Vec2();\r\n        PhysicsDebugDraw.DrawStringWorld_s_color = new PhysicsDebugDraw.box2d.b2Color(0.5, 0.9, 0.5);\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        if (!PhysicsDebugDraw._inited) {\r\n            PhysicsDebugDraw._inited = true;\r\n            PhysicsDebugDraw.init();\r\n        }\r\n        this._camera = {};\r\n        this._camera.m_center = new PhysicsDebugDraw.box2d.b2Vec2(0, 0);\r\n        this._camera.m_extent = 25;\r\n        this._camera.m_zoom = 1;\r\n        this._camera.m_width = 1280;\r\n        this._camera.m_height = 800;\r\n\r\n        this._mG = new Graphics();\r\n        this.graphics = this._mG;\r\n\r\n        this._textSp = new Sprite();\r\n        this._textG = this._textSp.graphics;\r\n        this.addChild(this._textSp);\r\n    }\r\n\r\n    /**@private \r\n     * @override\r\n    */\r\n    render(ctx: Context, x: number, y: number): void {\r\n        this._renderToGraphic();\r\n        super.render(ctx, x, y);\r\n    }\r\n\r\n    /**@private */\r\n    private lineWidth: number;\r\n\r\n    /**@private */\r\n    private _renderToGraphic(): void {\r\n        if (this.world) {\r\n            this._textG.clear();\r\n            this._mG.clear();\r\n            this._mG.save();\r\n            this._mG.scale(Physics.PIXEL_RATIO, Physics.PIXEL_RATIO);\r\n            this.lineWidth = 1 / Physics.PIXEL_RATIO;\r\n            if (this.world.DebugDraw) // ts源码版box2d\r\n                this.world.DebugDraw();\r\n            else\r\n                this.world.DrawDebugData();\r\n            this._mG.restore();\r\n        }\r\n    }\r\n\r\n    /**@private */\r\n    SetFlags(flags: number): void {\r\n        this.m_drawFlags = flags;\r\n    }\r\n\r\n    /**@private */\r\n    GetFlags(): number {\r\n        return this.m_drawFlags;\r\n    }\r\n\r\n    /**@private */\r\n    AppendFlags(flags: number): void {\r\n        this.m_drawFlags |= flags;\r\n    }\r\n\r\n    /**@private */\r\n    ClearFlags(flags: any): void {\r\n        this.m_drawFlags &= ~flags;\r\n    }\r\n\r\n    /**@private */\r\n    PushTransform(xf: any): void {\r\n        this._mG.save();\r\n        this._mG.translate(xf.p.x, xf.p.y);\r\n        this._mG.rotate(xf.q.GetAngle());\r\n    }\r\n\r\n    /**@private */\r\n    PopTransform(xf: any): void {\r\n        this._mG.restore();\r\n    }\r\n\r\n    /**@private */\r\n    DrawPolygon(vertices: any, vertexCount: any, color: any): void {\r\n        var i: number, len: number;\r\n        len = vertices.length;\r\n        var points: any[];\r\n        points = [];\r\n        for (i = 0; i < vertexCount; i++) {\r\n            points.push(vertices[i].x, vertices[i].y);\r\n        }\r\n        this._mG.drawPoly(0, 0, points, null, color.MakeStyleString(1), this.lineWidth);\r\n    }\r\n\r\n    /**@private */\r\n    DrawSolidPolygon(vertices: any, vertexCount: any, color: any): void {\r\n        var i: number, len: number;\r\n        len = vertices.length;\r\n        var points: any[];\r\n        points = [];\r\n        for (i = 0; i < vertexCount; i++) {\r\n            points.push(vertices[i].x, vertices[i].y);\r\n        }\r\n        this._mG.drawPoly(0, 0, points, color.MakeStyleString(0.5), color.MakeStyleString(1), this.lineWidth);\r\n    }\r\n\r\n    /**@private */\r\n    DrawCircle(center: any, radius: any, color: any): void {\r\n        this._mG.drawCircle(center.x, center.y, radius, null, color.MakeStyleString(1), this.lineWidth);\r\n    }\r\n\r\n    /**@private */\r\n    DrawSolidCircle(center: any, radius: any, axis: any, color: any): void {\r\n        var cx: any = center.x;\r\n        var cy: any = center.y;\r\n        this._mG.drawCircle(cx, cy, radius, color.MakeStyleString(0.5), color.MakeStyleString(1), this.lineWidth);\r\n        this._mG.drawLine(cx, cy, (cx + axis.x * radius), (cy + axis.y * radius), color.MakeStyleString(1), this.lineWidth);\r\n    }\r\n\r\n    /**@private */\r\n    DrawParticles(centers: any, radius: any, colors: any, count: any): void {\r\n        if (colors !== null) {\r\n            for (var i: number = 0; i < count; ++i) {\r\n                var center: any = centers[i];\r\n                var color: any = colors[i];\r\n                this._mG.drawCircle(center.x, center.y, radius, color.MakeStyleString(), null, this.lineWidth);\r\n            }\r\n        } else {\r\n\r\n            for (i = 0; i < count; ++i) {\r\n                center = centers[i];\r\n                this._mG.drawCircle(center.x, center.y, radius, \"#ffff00\", null, this.lineWidth);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**@private */\r\n    DrawSegment(p1: any, p2: any, color: any): void {\r\n        this._mG.drawLine(p1.x, p1.y, p2.x, p2.y, color.MakeStyleString(1), this.lineWidth);\r\n    }\r\n\r\n    /**@private */\r\n    DrawTransform(xf: any): void {\r\n        this.PushTransform(xf);\r\n        this._mG.drawLine(0, 0, 1, 0, PhysicsDebugDraw.box2d.b2Color.RED.MakeStyleString(1), this.lineWidth);\r\n        this._mG.drawLine(0, 0, 0, 1, PhysicsDebugDraw.box2d.b2Color.GREEN.MakeStyleString(1), this.lineWidth);\r\n        this.PopTransform(xf);\r\n    }\r\n\r\n    /**@private */\r\n    DrawPoint(p: any, size: any, color: any): void {\r\n        size *= this._camera.m_zoom;\r\n        size /= this._camera.m_extent;\r\n        var hsize: any = size / 2;\r\n\r\n        this._mG.drawRect(p.x - hsize, p.y - hsize, size, size, color.MakeStyleString(), null);\r\n    }\r\n\r\n    /**@private */\r\n    DrawString(x: any, y: any, message: any): void {\r\n        this._textG.fillText(message, x, y, \"15px DroidSans\", PhysicsDebugDraw.DrawString_s_color.MakeStyleString(), \"left\");\r\n    }\r\n\r\n    /**@private */\r\n    DrawStringWorld(x: any, y: any, message: any): void {\r\n        this.DrawString(x, y, message);\r\n    }\r\n\r\n    /**@private */\r\n    DrawAABB(aabb: any, color: any): void {\r\n        var x: number = aabb.lowerBound.x;\r\n        var y: number = aabb.lowerBound.y;\r\n        var w: number = aabb.upperBound.x - aabb.lowerBound.x;\r\n        var h: number = aabb.upperBound.y - aabb.lowerBound.y;\r\n\r\n        this._mG.drawRect(x, y, w, h, null, color.MakeStyleString(), this.lineWidth);\r\n    }\r\n\r\n    /**@private */\r\n    static I: PhysicsDebugDraw;\r\n\r\n    /**\r\n     * 激活物理辅助线\r\n     * @param\tflags 位标记值，其值是AND的结果，其值有-1:显示形状，2:显示关节，4:显示AABB包围盒,8:显示broad-phase pairs,16:显示质心\r\n     * @return\t返回一个Sprite对象，本对象用来显示物理辅助线\r\n     */\r\n    static enable(flags: number = 99): PhysicsDebugDraw {\r\n        if (!PhysicsDebugDraw.I) {\r\n            var debug: PhysicsDebugDraw = new PhysicsDebugDraw();\r\n            debug.world = Physics.I.world;\r\n            debug.world.SetDebugDraw(debug);\r\n            debug.zOrder = 1000;\r\n            debug.m_drawFlags = flags;\r\n            ILaya.stage.addChild(debug);\r\n            PhysicsDebugDraw.I = debug;\r\n\r\n        }\r\n        return debug;\r\n    }\r\n}\r\n","import { ColliderBase } from \"./ColliderBase\";\r\nimport { Physics } from \"./Physics\";\r\n\r\n/**\r\n * 2D多边形碰撞体，暂时不支持凹多边形，如果是凹多边形，先手动拆分为多个凸多边形\r\n * 节点个数最多是b2_maxPolygonVertices，这数值默认是8，所以点的数量不建议超过8个，也不能小于3个\r\n */\r\nexport class PolygonCollider extends ColliderBase {\r\n    /**相对节点的x轴偏移*/\r\n    private _x: number = 0;\r\n    /**相对节点的y轴偏移*/\r\n    private _y: number = 0;\r\n    /**用逗号隔开的点的集合，格式：x,y,x,y ...*/\r\n    private _points: string = \"50,0,100,100,0,100\";\r\n    /**\r\n     * @override\r\n     */\r\n    protected getDef(): any {\r\n        if (!this._shape) {\r\n            this._shape = new (<any>window).box2d.b2PolygonShape();\r\n            this._setShape(false);\r\n        }\r\n        this.label = (this.label || \"PolygonCollider\");\r\n        return super.getDef();\r\n    }\r\n\r\n    private _setShape(re: boolean = true): void {\r\n        var arr: any[] = this._points.split(\",\");\r\n        var len: number = arr.length;\r\n        if (len < 6) throw \"PolygonCollider points must be greater than 3\";\r\n        if (len % 2 == 1) throw \"PolygonCollider points lenth must a multiplier of 2\";\r\n\r\n        var ps: any[] = [];\r\n        for (var i: number = 0, n: number = len; i < n; i += 2) {\r\n            ps.push(new (<any>window).box2d.b2Vec2((this._x + parseInt(arr[i])) / Physics.PIXEL_RATIO, (this._y + parseInt(arr[i + 1])) / Physics.PIXEL_RATIO));\r\n        }\r\n\r\n        this._shape.Set(ps, len / 2);\r\n        if (re) this.refresh();\r\n    }\r\n\r\n    /**相对节点的x轴偏移*/\r\n    get x(): number {\r\n        return this._x;\r\n    }\r\n\r\n    set x(value: number) {\r\n        this._x = value;\r\n        if (this._shape) this._setShape();\r\n    }\r\n\r\n    /**相对节点的y轴偏移*/\r\n    get y(): number {\r\n        return this._y;\r\n    }\r\n\r\n    set y(value: number) {\r\n        this._y = value;\r\n        if (this._shape) this._setShape();\r\n    }\r\n\r\n    /**用逗号隔开的点的集合，格式：x,y,x,y ...*/\r\n    get points(): string {\r\n        return this._points;\r\n    }\r\n\r\n    set points(value: string) {\r\n        if (!value) throw \"PolygonCollider points cannot be empty\";\r\n        this._points = value;\r\n        if (this._shape) this._setShape();\r\n    }\r\n}","import { ClassUtils } from \"../utils/ClassUtils\";\r\nimport { BoxCollider } from \"./BoxCollider\";\r\nimport { ChainCollider } from \"./ChainCollider\";\r\nimport { CircleCollider } from \"./CircleCollider\";\r\nimport { ColliderBase } from \"./ColliderBase\";\r\nimport { EdgeCollider } from \"./EdgeCollider\";\r\nimport { DistanceJoint } from \"./joint/DistanceJoint\";\r\nimport { GearJoint } from \"./joint/GearJoint\";\r\nimport { JointBase } from \"./joint/JointBase\";\r\nimport { MotorJoint } from \"./joint/MotorJoint\";\r\nimport { MouseJoint } from \"./joint/MouseJoint\";\r\nimport { PrismaticJoint } from \"./joint/PrismaticJoint\";\r\nimport { PulleyJoint } from \"./joint/PulleyJoint\";\r\nimport { RevoluteJoint } from \"./joint/RevoluteJoint\";\r\nimport { WeldJoint } from \"./joint/WeldJoint\";\r\nimport { WheelJoint } from \"./joint/WheelJoint\";\r\nimport { Physics } from \"./Physics\";\r\nimport { PhysicsDebugDraw } from \"./PhysicsDebugDraw\";\r\nimport { PolygonCollider } from \"./PolygonCollider\";\r\nimport { RigidBody } from \"./RigidBody\";\r\n\r\nlet c = ClassUtils.regClass;\r\nc(\"Physics\", Physics);\r\nc(\"PhysicsDebugDraw\", PhysicsDebugDraw);\r\nc(\"ColliderBase\", ColliderBase);\r\nc(\"BoxCollider\", BoxCollider);\r\nc(\"ChainCollider\", ChainCollider);\r\nc(\"CircleCollider\", CircleCollider);\r\nc(\"EdgeCollider\", EdgeCollider);\r\nc(\"PolygonCollider\", PolygonCollider);\r\nc(\"RigidBody\", RigidBody);\r\nc(\"JointBase\", JointBase);\r\nc(\"DistanceJoint\", DistanceJoint);\r\nc(\"GearJoint\", GearJoint);\r\nc(\"MotorJoint\", MotorJoint);\r\nc(\"MouseJoint\", MouseJoint);\r\nc(\"PrismaticJoint\", PrismaticJoint);\r\nc(\"PulleyJoint\", PulleyJoint);\r\nc(\"RevoluteJoint\", RevoluteJoint);\r\nc(\"WeldJoint\", WeldJoint);\r\nc(\"WheelJoint\", WheelJoint);"],"mappings":"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"}