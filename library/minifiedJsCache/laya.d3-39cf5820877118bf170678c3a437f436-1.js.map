{"version":3,"names":["DepthCasterData","static","DepthCasterUBOData","uniformpara","Map","set","Shader3D","propertyNameToID","UniformBufferParamsType","Vector4","Vector3","UnifromBufferData","DepthTextureMode","DepthPass","constructor","this","_defaultNormalDepthColor","Color","_zBufferParams","Config3D","_uniformBlock","_castDepthData","createDepthCasterUniformBlock","_castDepthUBO","UniformBufferObject","getBuffer","UBONAME_SHADOW","create","BufferUsage","Dynamic","getbyteLength","DEPTHPASS","getDefineByName","DEFINE_SHADOW_BIAS","DEPTHTEXTURE","DEPTHNORMALSTEXTURE","DEPTHZBUFFERPARAMS","SHADOWUNIFORMBLOCK","update","camera","depthType","depthTextureFormat","_viewPort","viewport","_camera","Depth","depthTexture","_depthTexture","RenderTexture","createFromPool","width","height","RenderTargetFormat","None","DepthNormals","depthNormalTexture","_depthNormalsTexture","R8G8B8A8","MotionVectors","render","context","scene","shaderValues","_shaderValues","pipelineMode","addDefine","setVector","SHADOW_BIAS","offsetX","x","offsetY","y","_start","LayaGL","renderEngine","scissor","clearRenderTexture","RenderClearFlag","changeViewport","changeScissor","destTarget","Stat","depthCastDrawCall","_opaqueQueue","renderQueue","_end","_setupDepthModeShaderValue","configPipeLineMode","removeDefine","far","farPlane","near","nearPlane","setValue","setTexture","cleanUp","recoverToPool","Physics3DUtils","collider1","collider2","collsion","COLLISIONFILTERGROUP_DEFAULTFILTER","COLLISIONFILTERGROUP_STATICFILTER","COLLISIONFILTERGROUP_KINEMATICFILTER","COLLISIONFILTERGROUP_DEBRISFILTER","COLLISIONFILTERGROUP_SENSORTRIGGER","COLLISIONFILTERGROUP_CHARACTERFILTER","COLLISIONFILTERGROUP_CUSTOMFILTER1","COLLISIONFILTERGROUP_CUSTOMFILTER2","COLLISIONFILTERGROUP_CUSTOMFILTER3","COLLISIONFILTERGROUP_CUSTOMFILTER4","COLLISIONFILTERGROUP_CUSTOMFILTER5","COLLISIONFILTERGROUP_CUSTOMFILTER6","COLLISIONFILTERGROUP_CUSTOMFILTER7","COLLISIONFILTERGROUP_CUSTOMFILTER8","COLLISIONFILTERGROUP_CUSTOMFILTER9","COLLISIONFILTERGROUP_CUSTOMFILTER10","COLLISIONFILTERGROUP_ALLFILTER","gravity","TextureGenerator","maxX","maxY","index","data","sqrRange","atten","Math","floor","xFac","yFac","texture","textureWidth","textureHeight","func","size","format","TextureFormat","R8G8B8","Alpha8","Uint8Array","setPixelsData","ILaya3D","Scene3D","Laya3D","Physics3D","Utils3D","floatTex","Texture2D","R32G32B32A32","filterMode","FilterMode","Point","wrapModeU","WrapMode","Clamp","wrapModeV","anisoLevel","bVector","out","bullet","_bullet","btVector3_x","btVector3_y","z","btVector3_z","lVector","btVector3_setValue","tx","ty","tz","qx","qy","qz","qw","sx","sy","sz","outArray","outOffset","i","ai0","ai1","ai2","ai3","re","_tempArray16_0","se","_tempArray16_1","tse","_tempArray16_2","x2","y2","z2","xx","yx","yy","zx","zy","zz","wx","wy","wz","v0","cameraDir","cameraUp","normalize","_tempV1","cross","_tempV0","scale","add","A","B","C","P","vsub","_tempVector3_0","v1","_tempVector3_1","v2","_tempVector3_2","dot00","dot","dot01","dot02","dot11","dot12","inverDeno","u","v","bones","curData","inverGlobalBindPose","outBonesDatas","outAnimationDatas","boneIndexToMesh","parentOffset","offset","matOffset","boneLength","length","keyframeWidth","_rotationTransformScaleSkinAnimation","parentIndex","mulMatrixByArray","n","mulMatrixByArrayAndMatrixFast","bonesDatas","arrayOffset","animationDatas","createAffineTransformationArray","sourceArray","sourceOffset","rotation","w","ix","iy","iz","iw","leftArray","leftOffset","rightArray","rightOffset","_tempArray16_3","rightMatrix","rightMatrixE","elements","m11","m12","m13","m14","m21","m22","m23","m24","m31","m32","m33","m34","m41","m42","m43","m44","ai0LeftOffset","ai1LeftOffset","ai2LeftOffset","ai3LeftOffset","ai0OutOffset","ai1OutOffset","ai2OutOffset","ai3OutOffset","tX","tY","tZ","rX","rY","rZ","rW","sX","sY","sZ","xy","xz","yz","source","transform","result","resultOffset","coordinateX","coordinateY","coordinateZ","transformElem","lightingMapScaleOffset","url","indexOf","substr","trans","rot","outE","left","right","l","r","e","l11","l12","l13","l14","l21","l22","l23","l24","l31","l32","l33","l34","l41","l42","l43","l44","r11","r12","r13","r14","r21","r22","r23","r24","r31","r32","r33","r34","r41","r42","r43","r44","PI","atan","from","location","angle","subtract","TEMPVector30","asin","arcTanAngle","f","weight","value","s","pow","abs","sa","sb","saw","sbw","scaleWeight","sng","a","b","Float32Array","b0","b1","b2","b3","b4","b5","b6","b7","b8","b9","b10","b11","b12","b13","b14","b15","matrix4x4MultiplyFFF","colorFunc","mipmaps","_generateTexture2D","debugLine","boundBox","color","lineCount","maxLineCount","start","end","min","max","addLine","rootSprite","checkSprite","path","sprite","parent","_parent","push","getChildIndex","invPath","getChildAt","pathlength","node","rendertexture","pixelArray","colorFormat","R16G16B16A16","toString","getData","ori","pixels","bs","LayaEnv","isConch","canv","HTMLCanvas","lock","ctx2d","getContext","imgdata","createImageData","Uint8ClampedArray","putImageData","toDataURL","destroy","_compIdToNode","Object","window","getRTBase64","uint8ArrayToArrayBuffer","Transform3D","EventDispatcher","owner","super","_localPosition","_localRotation","Quaternion","_localScale","_localRotationEuler","_localMatrix","Matrix4x4","_position","_rotation","_scale","_rotationEuler","_worldMatrix","_children","_isDefaultMatrix","_faceInvert","_frontFaceValue","_transformFlag","_owner","_setTransformFlag","TRANSFORM_LOCALQUATERNION","TRANSFORM_LOCALEULER","TRANSFORM_LOCALMATRIX","TRANSFORM_WORLDPOSITION","TRANSFORM_WORLDQUATERNION","TRANSFORM_WORLDEULER","TRANSFORM_WORLDSCALE","TRANSFORM_WORLDMATRIX","isDefaultMatrix","_getTransformFlag","localMatrix","_isFrontFaceInvert","getWorldLossyScale","isInvert","getFrontFaceValue","worldNeedUpdate","localPositionX","localPosition","localPositionY","localPositionZ","cloneTo","_onWorldPositionTransform","localRotationX","localRotation","localRotationY","localRotationZ","localRotationW","eulerE","createFromYawPitchRoll","_angleToRandin","_onWorldRotationTransform","localScaleX","localScale","localScaleY","localScaleZ","_onWorldScaleTransform","localRotationEulerX","localRotationEuler","localRotationEulerY","localRotationEulerZ","getYawPitchRoll","_tempVector30","euler","createAffineTransformation","isIdentity","decomposeTransRotScale","_onWorldTransform","position","worldMatE","worldMatrix","parentInvMat","_tempMatrix0","invert","transformCoordinate","multiply","_tempQuaternion0","rotationEuler","rotationEulerE","effectiveTrans","_getScaleMatrix","invRotation","invRotationMat","_tempMatrix3x30","worldRotScaMat","_tempMatrix3x31","scaMat","_tempMatrix3x32","Matrix3x3","createFromMatrix4x4","createRotationQuaternion","type","_setParent","parentChilds","splice","_onWorldPositionRotationTransform","event","Event","TRANSFORM_CHANGED","_onWorldPositionScaleTransform","translate","translation","isLocal","createFromQuaternion","rotate","isRadian","getForward","forward","worldMatElem","getUp","up","getRight","lookAt","target","isCamera","eye","MathUtils3D","zeroTolerance","rotationLookAt","worldPosition","objLookat","scaMatE","setWorldLossyScale","scaleMat","_tempMatrix3x33","localScaleMat","localScaleMatE","parInvScaleMat","createFromScaling","console","warn","localToGlobal","transformV3ToV3","globalToLocal","pos","toLocalNormal","TransformNormal","toDir","dir","rotationTo","Up","UnitX","tmpVec3","scalarLength","UnitY","createFromAxisAngle","ColliderShape","_centerMatrix","_attatched","_indexInCompound","_compoundParent","_attatchedCollisionObject","_referenceCount","_localOffset","needsCustomCollisionCallback","bt","_btScale","btVector3_create","_btVector30","_btQuaternion0","btQuaternion_create","_btTransform0","btTransform_create","_type","localOffset","_updateChildTransform","_setScale","updateLocalTransformations","btCollisionShape_setLocalScaling","_btShape","_createAffineTransformation","destObject","destColliderShape","clone","btCollisionShape_destroy","SHAPEORIENTATION_UPX","SHAPEORIENTATION_UPY","SHAPEORIENTATION_UPZ","SHAPETYPES_BOX","SHAPETYPES_SPHERE","SHAPETYPES_CYLINDER","SHAPETYPES_CAPSULE","SHAPETYPES_CONVEXHULL","SHAPETYPES_COMPOUND","SHAPETYPES_STATICPLANE","SHAPETYPES_CONE","SHAPETYPES_HEIGHTFIELDTERRAIN","BoxColliderShape","sizeX","sizeY","sizeZ","_sizeX","_sizeY","_sizeZ","_btSize","btBoxShape_create","isPlaying","changeBoxShape","dest","CapsuleColliderShape","radius","orientation","_radius","_length","_orientation","btCapsuleShapeX_create","btCapsuleShape_create","btCapsuleShapeZ_create","changeCapsuleShape","fixScale","CompoundColliderShape","_childColliderShapes","btCompoundShape_create","_btVector3One","_btTransform","_btOffset","_btRotation","_clearChildShape","shape","btOffset","btQuaternion","btTransform","btQuaternion_setValue","btTransform_setOrigin","btTransform_setRotation","btCompoundShape_updateChildTransform","shapes","removeChildShape","addChildShape","btScale","btCollisionShape_getLocalScaling","btCompoundShape_addChildShape","colliderShape","endShape","pop","btCompoundShape_removeChildShapeByIndex","clearChildShape","getChildShapeCount","destCompoundColliderShape","childShape","ConeColliderShape","_height","btConeShapeX_create","btConeShape_create","btConeShapeZ_create","changeConeShape","CylinderColliderShape","btCylinderShapeX_create","btCylinderShape_create","btCylinderShapeZ_create","changeCylinder","MeshColliderShape","_mesh","_convex","mesh","_physicMesh","_getPhysicMesh","_setPhysicsMesh","convex","_createBvhTriangleCollider","_createDynamicMeshCollider","btGImpactMeshShape_create","btGImpactShapeInterface_updateBound","btBvhTriangleMeshShape_create","_enableProcessCollisions","destMeshCollider","SphereColliderShape","btSphereShape_create","changeSphere","PhysicsComponent","Component","collisionGroup","canCollideWith","_restitution","_friction","_rollingFriction","_ccdMotionThreshold","_ccdSweptSphereRadius","_collisionGroup","_canCollideWith","_colliderShape","_controlBySimulation","_inPhysicUpdateListIndex","canScaleShape","_physicObjectsMap","id","tranX","tranY","tranZ","rotX","rotY","rotZ","rotW","shapeData","sizeData","meshCollider","Loader","getRes","center","fromArray","lx","ly","lz","lw","rx","ry","rz","rw","c","d","restitution","_btColliderObject","btCollisionObject_setRestitution","friction","btCollisionObject_setFriction","rollingFriction","btCollisionObject_setRollingFriction","ccdMotionThreshold","btCollisionObject_setCcdMotionThreshold","ccdSweptSphereRadius","btCollisionObject_setCcdSweptSphereRadius","isActive","btCollisionObject_isActive","lastColliderShape","btCollisionObject_setCollisionShape","canInSimulation","_simulation","_enabled","_removeFromSimulation","_onShapeChange","_derivePhysicsTransformation","_addToSimulation","simulation","_parseShape","shapesData","shapeCount","_creatShape","compoundShape","_onScaleChange","_onAdded","_onEnable","on","_onTransformChanged","_scene","physicsSimulation","btCollisionObject_setContactProcessingThreshold","_onDisable","off","_physicsUpdateList","remove","_onDestroy","btCollisionObject_destroy","getPhysicsPosition","btColliderObject","btCollisionObject_getWorldTransform","btPosition","btTransform_getOrigin","getPhysicsOrientation","btRotation","btTransform_getRotation","btQuaternion_x","btQuaternion_y","btQuaternion_z","btQuaternion_w","_isValid","_parse","force","_innerDerivePhysicsTransformation","btCollisionObject_setWorldTransform","physicTransformPtr","_transform","shapeOffset","physicPosition","worldMat","shapeRotation","physicRotation","physicQuaternionMultiply","_updateTransformComponent","physicsTransform","syncRot","addmargin","btRotX","btRotY","btRotZ","btRotW","invertShapeRotaion","rotShapePosition","transformQuat","colShape","btColObj","flags","btCollisionObject_getCollisionFlags","COLLISIONFLAGS_CUSTOM_MATERIAL_CALLBACK","btCollisionObject_setCollisionFlags","flag","_addUpdateList","_cloneTo","destPhysicsComponent","ACTIVATIONSTATE_ACTIVE_TAG","ACTIVATIONSTATE_ISLAND_SLEEPING","ACTIVATIONSTATE_WANTS_DEACTIVATION","ACTIVATIONSTATE_DISABLE_DEACTIVATION","ACTIVATIONSTATE_DISABLE_SIMULATION","COLLISIONFLAGS_STATIC_OBJECT","COLLISIONFLAGS_KINEMATIC_OBJECT","COLLISIONFLAGS_NO_CONTACT_RESPONSE","COLLISIONFLAGS_CHARACTER_OBJECT","COLLISIONFLAGS_DISABLE_VISUALIZE_OBJECT","COLLISIONFLAGS_DISABLE_SPU_COLLISION_PROCESSING","_tempQuaternion1","_tempMatrix4x40","CharacterController","stepheight","upAxis","_upAxis","_maxSlope","_jumpSpeed","_fallSpeed","_gravity","_btKinematicCharacter","_pushForce","_stepHeight","_btTempVector30","error","fallSpeed","btKinematicCharacterController_setFallSpeed","pushForce","btKinematicCharacterController_setPushForce","jumpSpeed","btKinematicCharacterController_setJumpSpeed","btGravity","btKinematicCharacterController_setGravity","maxSlope","btKinematicCharacterController_setMaxSlope","isGrounded","btKinematicCharacterController_onGround","stepHeight","btKinematicCharacterController_setStepHeight","btUpAxis","_convertToBulletVec3","btKinematicCharacterController_setUp","pPos","btKinematicCharacterController_getCurrentPosition","tmpPosition","btKinematicCharacterController_setCurrentPosition","pQuat","btKinematicCharacterController_getCurrentOrientation","tmpOrientation","setJumpAxis","btKinematicCharacterController_setJumpAxis","ghostObject","btPairCachingGhostObject_create","btCollisionObject_setUserIndex","_constructCharacter","btKinematicCharacterController_destroy","btKinematicCharacterController_create","_characters","_addCharacter","_removeCharacter","characters","getHitFlag","btKinematicCharacterController_getHitFlag","getVerticalVel","btKinematicCharacterController_getVerticalVelocity","getOverlappingObj","cb","ghost","num","btCollisionObject_getNumOverlappingObjects","obj","btCollisionObject_getOverlappingObject","comp","btCollisionObject_getUserIndex","move","movement","btMovement","btKinematicCharacterController_setWalkDirection","jump","velocity","btVelocity","btKinematicCharacterController_jump","destCharacterController","UPAXIS_X","UPAXIS_Y","UPAXIS_Z","PhysicsUpdateList","SingletonList","element","_add","ContactPoint","_idCounter","colliderA","colliderB","distance","normal","positionOnA","positionOnB","_id","HitResult","succeeded","collider","point","hitFraction","Collision","_lastUpdateFrame","_updateFrame","_isTrigger","contacts","_setUpdateFrame","farme","CollisionTool","_hitResultsPoolIndex","_hitResultsPool","_contactPonintsPoolIndex","_contactPointsPool","_collisionsPool","_collisions","getHitResult","hitResult","recoverAllHitResultsPool","getContactPoints","contactPoint","recoverAllContactPointsPool","getCollision","physicComponentA","physicComponentB","collision","idA","idB","subCollisionFirst","_colliderA","_colliderB","recoverCollision","garbageCollection","subCollisionsKey","subCollisions","wholeDelete","collisionKey","RaycastWheel","ptr","worldPos","worldQuat","btWheelPtr","btMemory","_a","ILaya","Laya","WasmModules","memory","engineForce","btWheelInfo_setEengineForce","btWheelInfo_getEengineForce","steeringValue","btWheelInfo_setSteeringValue","btWheelInfo_getSteeringValue","brake","btWheelInfo_setBrake","btWheelInfo_getBrake","btWheelInfo_getRrotation","deltaRotation","btWheelInfo_getDeltaRotation","btrans","btWheelInfo_getWorldTransform","ret","retarr","conch","o","basisptr","btTransform_getBasis","r0","btMatrix3x3_getRow","r1","r2","mem","fbuff","Float64Array","buffer","getWorldTransform","btOri","btRot","btVehicleTuning","suspensionStiffness","suspensionCompression","suspensionDamping","maxSuspensionTravelCm","frictionSlip","maxSuspensionForce","RaycastVehicle","btObj","tuing","wheels","btVehiclePtr","addWheel","connectionPointCS0","wheelDirectionCS0","wheelAxleCS","wheelRadius","suspensionRestLength","suspensionMaxTravel","isFrontWheel","getNumWheels","wheelinfo","btRaycastVehicle_addWheel","wheel","getWheelInfo","btRaycastVehicle_getNumWheels","btRaycastVehicle_getWheelInfo","PhysicsSimulation","configuration","_updateCount","_btVector3Zero","_btDefaultQuaternion","_collisionsUtils","_previousFrameCollisions","_currentFrameCollisions","_currentConstraint","_updatedRigidbodies","maxSubSteps","fixedTimeStep","dt","_btCollisionConfiguration","btDefaultCollisionConfiguration_create","_btDispatcher","btCollisionDispatcher_create","_btBroadphase","btDbvtBroadphase_create","btOverlappingPairCache_setInternalGhostPairCallback","btDbvtBroadphase_getOverlappingPairCache","btGhostPairCallback_create","conFlags","PHYSICSENGINEFLAGS_COLLISIONSONLY","_btCollisionWorld","btCollisionWorld","PHYSICSENGINEFLAGS_SOFTBODYSUPPORT","solver","btSequentialImpulseConstraintSolver_create","_btDiscreteDynamicsWorld","btDiscreteDynamicsWorld_create","_btSolverInfo","btDynamicsWorld_getSolverInfo","_btDispatchInfo","btCollisionWorld_getDispatchInfo","_btClosestRayResultCallback","ClosestRayResultCallback_create","_btAllHitsRayResultCallback","AllHitsRayResultCallback_create","_btClosestConvexResultCallback","ClosestConvexResultCallback_create","_btAllConvexResultCallback","AllConvexResultCallback_create","btGImpactCollisionAlgorithm_RegisterAlgorithm","_btTempVector31","_btTempQuaternion0","_btTempQuaternion1","_btTempTransform0","_btTempTransform1","continuousCollisionDetection","btCollisionWorld_get_m_useContinuous","btCollisionWorld_set_m_useContinuous","btDiscreteDynamicsWorld_setGravity","speculativeContactRestitution","btDiscreteDynamicsWorld_getApplySpeculativeContactRestitution","btDiscreteDynamicsWorld_setApplySpeculativeContactRestitution","enableDebugDrawer","btDynamicsWorld_enableDebugDrawer","_simulate","deltaTime","btDiscreteDynamicsWorld_stepSimulation","PerformDiscreteCollisionDetection","_destroy","btCollisionWorld_destroy","btDbvtBroadphase_destroy","btCollisionDispatcher_destroy","btDefaultCollisionConfiguration_destroy","_addPhysicsCollider","component","group","mask","btCollisionWorld_addCollisionObject","_removePhysicsCollider","btCollisionWorld_removeCollisionObject","_addRigidBody","rigidBody","btDiscreteDynamicsWorld_addRigidBody","_removeRigidBody","btDiscreteDynamicsWorld_removeRigidBody","character","btDynamicsWorld_addAction","btDynamicsWorld_removeAction","raycastFromTo","to","collisonGroup","collisionMask","rayResultCall","rayFrom","rayTo","ClosestRayResultCallback_set_m_rayFromWorld","ClosestRayResultCallback_set_m_rayToWorld","RayResultCallback_set_m_collisionFilterGroup","RayResultCallback_set_m_collisionFilterMask","RayResultCallback_set_m_collisionObject","RayResultCallback_set_m_closestHitFraction","btCollisionWorld_rayTest","RayResultCallback_hasHit","RayResultCallback_get_m_collisionObject","RayResultCallback_get_m_closestHitFraction","btPoint","ClosestRayResultCallback_get_m_hitPointWorld","btNormal","ClosestRayResultCallback_get_m_hitNormalWorld","raycastAllFromTo","AllHitsRayResultCallback_set_m_rayFromWorld","AllHitsRayResultCallback_set_m_rayToWorld","collisionObjects","AllHitsRayResultCallback_get_m_collisionObjects","btPoints","AllHitsRayResultCallback_get_m_hitPointWorld","btNormals","AllHitsRayResultCallback_get_m_hitNormalWorld","btFractions","AllHitsRayResultCallback_get_m_hitFractions","tBtCollisionObjectArray_clear","tVector3Array_clear","tScalarArray_clear","count","tBtCollisionObjectArray_size","tBtCollisionObjectArray_at","tScalarArray_at","tVector3Array_at","pointE","rayCast","ray","outHitResult","origin","direction","rayCastAll","shapeCast","fromPosition","toPosition","fromRotation","toRotation","allowedCcdPenetration","convexResultCall","convexPosFrom","convexPosTo","convexRotFrom","convexRotTo","convexTransform","convexTransTo","sweepShape","ConvexResultCallback_set_m_collisionFilterGroup","ConvexResultCallback_set_m_collisionFilterMask","ClosestConvexResultCallback_set_m_hitCollisionObject","ConvexResultCallback_set_m_closestHitFraction","btCollisionWorld_convexSweepTest","ConvexResultCallback_hasHit","ClosestConvexResultCallback_get_m_hitCollisionObject","ConvexResultCallback_get_m_closestHitFraction","ClosestConvexResultCallback_get_m_hitPointWorld","ClosestConvexResultCallback_get_m_hitNormalWorld","shapeCastAll","AllConvexResultCallback_get_m_collisionObjects","AllConvexResultCallback_get_m_hitPointWorld","AllConvexResultCallback_get_m_hitNormalWorld","AllConvexResultCallback_get_m_hitFractions","addConstraint","constraint","disableCollisionsBetweenLinkedBodies","btCollisionWorld_addConstraint","_btConstraint","removeConstraint","btCollisionWorld_removeConstraint","setHitsRayResultCallbackFlag","RayResultCallback_set_m_flags","_updatePhysicsTransformFromRender","physicCollider","_updateCharacters","_updateCollisions","previous","loopCount","numManifolds","btDispatcher_getNumManifolds","contactManifold","btDispatcher_getManifoldByIndexInternal","componentA","btPersistentManifold_getBody0","componentB","btPersistentManifold_getBody1","tt","isFirstCollision","isTrigger","_getBit","NodeFlags","PROCESS_TRIGGERS","numContacts","btPersistentManifold_getNumContacts","j","pt","btPersistentManifold_getContactPoint","btManifoldPoint_getDistance","PROCESS_COLLISIONS","btManifoldPoint_get_m_normalWorldOnB","btPostionA","btManifoldPoint_get_m_positionWorldOnA","btPostionB","btManifoldPoint_get_m_positionWorldOnB","body","compa","compb","dispatchCollideEvent","curFrameCol","destroyed","ownerA","ownerB","TRIGGER_STAY","other","COLLISION_STAY","TRIGGER_ENTER","COLLISION_ENTER","preFrameCol","preColliderA","preColliderB","TRIGGER_EXIT","COLLISION_EXIT","constraintObj","enabled","_isBreakConstrained","bodya","ownBody","bodyb","connectedBody","JOINT_BREAK","clearForces","btDiscreteDynamicsWorld_clearForces","createRaycastVehicle","btRaycastVehicle_create","btCollisionObject_forceActivationState","addVehicle","removeVehicle","sphereQuery","collisionmask","_btPairCachingGhost","_btVec","_btSphereShape","sphere","btSphereShpae_setUnscaledRadius","xform","vpos","btTransform_setIdentity","PHYSICSENGINEFLAGS_NONE","PHYSICSENGINEFLAGS_MULTITHREADED","PHYSICSENGINEFLAGS_USEHARDWAREWHENPOSSIBLE","SOLVERMODE_RANDMIZE_ORDER","SOLVERMODE_FRICTION_SEPARATE","SOLVERMODE_USE_WARMSTARTING","SOLVERMODE_USE_2_FRICTION_DIRECTIONS","SOLVERMODE_ENABLE_FRICTION_DIRECTION_CACHING","SOLVERMODE_DISABLE_VELOCITY_DEPENDENT_FRICTION_DIRECTION","SOLVERMODE_CACHE_FRIENDLY","SOLVERMODE_SIMD","SOLVERMODE_INTERLEAVE_CONTACT_AND_FRICTION_CONSTRAINTS","SOLVERMODE_ALLOW_ZERO_LENGTH_FRICTION_DIRECTIONS","HITSRAYRESULTCALLBACK_FLAG_NONE","HITSRAYRESULTCALLBACK_FLAG_FILTERBACKFACESS","HITSRAYRESULTCALLBACK_FLAG_KEEPUNFILIPPEDNORMAL","HITSRAYRESULTCALLBACK_FLAG_USESUBSIMPLEXCONVEXCASTRAYTEST","HITSRAYRESULTCALLBACK_FLAG_USEGJKCONVEXCASTRAYTEST","HITSRAYRESULTCALLBACK_FLAG_TERMINATOR","disableSimulation","PhysicsTriggerComponent","Rigidbody3D","_isKinematic","_mass","_angularDamping","_linearDamping","_overrideGravity","_totalTorque","_totalForce","_linearVelocity","_angularVelocity","_linearFactor","_angularFactor","_detectCollisions","_btInertia","_btImpulse","_btImpulseOffset","_btGravity","mass","_updateMass","getCollisionFlags","isKinematic","natColObj","btCollisionObject_setActivationState","btZero","btCollisionObject_setInterpolationLinearVelocity","btRigidBody_setLinearVelocity","btCollisionObject_setInterpolationAngularVelocity","btRigidBody_setAngularVelocity","linearDamping","btRigidBody_setDamping","angularDamping","overrideGravity","btRigidBody_getFlags","_BT_DISABLE_WORLD_GRAVITY","btRigidBody_setFlags","btRigidBody_getGravity","_convertToLayaVec3","btRigidBody_setGravity","totalForce","btTotalForce","btRigidBody_getTotalForce","linearFactor","btValue","btRigidBody_setLinearFactor","linearVelocity","btRigidBody_getLinearVelocity","wakeUp","angularFactor","btRigidBody_setAngularFactor","angularVelocity","btRigidBody_getAngularVelocity","totalTorque","btTotalTorque","btRigidBody_getTotalTorque","detectCollisions","isSleeping","btCollisionObject_getActivationState","sleepLinearVelocity","btRigidBody_getLinearSleepingThreshold","btRigidBody_setSleepingThresholds","btRigidBody_getAngularSleepingThreshold","sleepAngularVelocity","btRigidBody_setCenterOfMassPos","q","btRigidBody_setCenterOfMassOrientation","btCollisionShape_calculateLocalInertia","btRigidBody_setMassProps","btRigidBody_updateInertiaTensor","oriTransform","btTransform_equal","btRigidBody_setCenterOfMassTransform","_initRigidbody","motionid","motionState","layaMotionState_create","layaMotionState_set_rigidBodyID","_btLayaMotionState","constructInfo","btRigidBodyConstructionInfo_create","btRigid","btRigidBody_create","btRigidBodyConstructionInfo_destroy","btMotionState_destroy","linFac","angFac","destRigidbody3D","applyForce","applyForceXYZ","fx","fy","fz","btForce","btRigidBody_applyForce","btRigidBody_applyCentralForce","setCollisionFlags","applyTorque","torque","btTorque","btRigidBody_applyTorque","applyImpulse","impulse","btRigidBody_applyImpulse","btRigidBody_applyCentralImpulse","applyTorqueImpulse","torqueImpulse","btTorqueImpulse","btRigidBody_applyTorqueImpulse","btCollisionObject_activate","btRigidBody_clearForces","TYPE_STATIC","TYPE_DYNAMIC","TYPE_KINEMATIC","_BT_ENABLE_GYROPSCOPIC_FORCE","StaticPlaneColliderShape","_normal","_offset","_btNormal","btStaticPlaneShape_create","__init__","_cannon","_enablePhysics","KeyframeNode","_ownerPath","_propertys","_keyFrames","ownerPathCount","propertyCount","keyFramesCount","_setOwnerPathCount","_setOwnerPathByIndex","_joinOwnerPath","sep","join","_setPropertyCount","_setPropertyByIndex","_joinProperty","_setKeyframeCount","_setKeyframeByIndex","getOwnerPathByIndex","getPropertyByIndex","getKeyframeByIndex","AnimationEvent","WeightedMode","KeyFrameValueType","StaticFlag","FrustumCorner","volumeIntersectType","AmbientMode","ReflectionProbeMode","RenderBitFlag","ShadowMode","ShadowCascadesMode","LightType","LightMode","FrustumFace","ShadowMapFormat","MaterialRenderMode","ShadowLightType","FogMode","CameraClearFlags","CameraEventFlags","PBRRenderQuality","Keyframe","time","defaultWeight","FloatKeyframe","inWeight","outWeight","weightedMode","destKeyFrame","inTangent","outTangent","QuaternionKeyframe","weightMode","destKeyFarme","Vector3Keyframe","AnimationClipParser03","_DATA","_reader","getUint32","_BLOCK","getUint16","blockStarts","blockLengths","prePos","_strings","readUTFString","clip","reader","_animationClip","READ_DATA","READ_BLOCK","READ_STRINGS","blockName","fn","Error","call","startTimeTypes","startTimeTypeCount","getFloat32","name","clipDur","_duration","islooping","getByte","_frameRate","getInt16","nodeCount","nodes","_nodes","nodesMap","_nodesMap","nodesDic","_nodesDic","setNodeByIndex","_indexInList","getUint8","pathLength","nodePath","mapArray","propertyOwner","propertyLength","fullPath","keyframeCount","floatKeyframe","floatArrayKeyframe","quaArrayKeyframe","inTangentQua","outTangentQua","valueQua","eventCount","eventName","params","paramCount","getInt32","addEvent","Vector2Keyframe","Vector2","Vector4Keyframe","KeyframeNodeOwner","indexInList","referenceCount","updateMark","property","defaultValue","crossFixedValue","isMaterial","saveCrossFixedValue","animatorDataSetCallBack","callBackOwner","callbackFun","apply","callParams","getCallbackNode","callbackFunData","funPropertys","split","AnimationClipParser04","version","_version","propertyChangePath","paramLen","callParms","Float","Position","Scale","RotationEuler","Rotation","quaternionKeyframe","vec2Keyfram","inTangentV2","outTangentV2","valueV2","vec4Keyfram","inTangentV4","outTangentV4","valueV4","isWeight","In","Both","Out","weidhtMode","weightModeV4","inWeightQua","outWeightQua","weightModeV2","inWeightV2","outWeightV2","weightMode_V4","inWeightV4","outWeightV4","HalfFloatUtils","convertToNumber","KeyframeNodeList","getNodeByIndex","AnimationClip","Resource","_animationEvents","Byte","parse","complete","loader","load","ANIMATIONCLIP","duration","_weightModeHermite","nextweightMode","_hermiteInterpolate","frame","nextFrame","t","dur","t0","t1","Number","isFinite","t2","t3","_hermiteInterpolateVector3","p0","tan0","p1","tan1","_hermiteCurveSplineWeight","_hermiteInterpolateQuaternion","_hermiteInterpolateVector4","_hermiteInterpolateVector2","frameValue","frametime","frameOutWeight","frameOutTangent","nextframeValue","nextframetime","nextframeInweight","nextframeIntangent","Eps","y1","wt1","wt2","dx","dy","yp1","yp2","wt2s","fg","fpg","fppg","_curveInterpolate","_evaluateClipDatasRealTime","playCurTime","realTimeCurrentFrameIndexes","addtive","frontPlay","outDatas","avatarMask","nextFrameIndex","keyFrames","frameIndex","getTransformActive","isEnd","nextFarme","clipData","_evaluateFrameNodeVector3DatasRealTime","firstFrameValue","clipQuat","_evaluateFrameNodeQuaternionDatasRealTime","tempQuat","firstFrameValueQua","quaternionConjugate","v2Data","_evaluateFrameNodeVector2DatasRealTime","v2FrameValue","v4Data","_evaluateFrameNodeVector4DatasRealTime","v4FrameValue","frameData","nextKeyFrame","startTime","firstFrameDatas","_binarySearchEventIndex","mid","midValue","_disposeResource","Sprite3D","Node","isStatic","_isRenderNode","_uniqueIDCounter","_is3D","renderOBJCreate","createTransform","_isStatic","StaticBatch","Normal","layer","WORLDMATRIX","WORLDINVERTFRONT","sprite3DCommandUniformMap","createGlobalUniformMap","addShaderUniform","original","worldPositionStays","destSprite3D","addChild","then","res","runWith","_layer","LAYERCHANGE","staticMask","_onActive","sprite3DCount","_onInActive","parent3D","_onRemoved","onStartListeningToType","startsWith","_setBit","spriteMap","undefined","active","tag","loccalPosition","srcRoot","dstRoot","_destroyed","destTrans","scrSprite","_create","children","child","_createSprite3DInstance","dstSprite","srcChildren","dstChildren","_parseSprite3DInstance","dstSprite3D","destroyChild","ClusterData","pointLightCount","spotLightCount","indices","Cluster","xSlices","ySlices","zSlices","maxLightsPerClusterAverage","_updateMark","_depthSliceParam","_xSlices","_ySlices","_zSlices","clusterTexWidth","clisterTexHeight","ceil","_clusterTexture","_createFloatTextureBuffer","_clusterPixels","clusterDatas","Array","_clusterDatas","_placePointLightToClusters","lightIndex","lightBound","zMin","zEnd","zMax","yMin","yEnd","yMax","xMin","xEnd","xMax","lightCount","_placeSpotLightToClusters","_insertConePlane","halfAngle","pNor","V1","_tempVector36","V2","_tempVector37","tanR","tan","capRimX","capRimY","capRimZ","_shrinkSphereLightZPerspective","lightviewPos","lvZ","minZ","maxZ","depthSliceParam","log2","_shrinkSpotLightZPerspective","viewLightPos","viewConeCap","pbX","pbY","pbZ","rb","paX","paY","paZ","aX","aY","aZ","dotA","eZ","sqrt","_shrinkSphereLightByBoundOrth","halfX","halfY","lvX","minX","lvY","minY","xStride","yStride","_shrinkSpotLightByBoundOrth","eX","eY","_shrinkXYByRadiusPerspective","xPlanes","yPlanes","plane","_shrinkSpotXYByConePerspective","viewForward","_tempVector32","_updatePointLightPerspective","viewMat","pointLight","_tempLightBound","range","_updateSpotLightPerspective","spotLight","viewPos","_tempVector31","_tempVector34","spotAngle","viewFor","_tempVector33","_updatePointLightOrth","_updateSpotLightOrth","camNear","lightClusterCount","viewMatrix","curCount","_directionLights","pointLights","_pointLights","poiCount","poiElements","_elements","spotLights","_spotLights","spoCount","spoElements","orthographic","orthographicVerticalSize","aspectRatio","_updateClusterPlaneXY","_clusterXPlanes","_clusterYPlanes","widthFloat","lightOff","clusterPixels","clusterPixelsCount","freeSpace","clusterOff","pCount","sCount","setSubPixelsData","_tempVector35","Plane","_distance","point0","point1","point2","x1","z1","invPyth","normalEX","normalEY","normalEZ","magnitude","PlaneIntersectionType_Back","PlaneIntersectionType_Front","PlaneIntersectionType_Intersecting","Ray","at","ContainmentType","Disjoint","Contains","Intersects","CollisionUtils","box","boxMin","boxMineX","boxMineY","boxMineZ","boxMax","boxMaxeX","boxMaxeY","boxMaxeZ","pointeX","pointeY","pointeZ","box1","box2","delta","box1Mine","box1MineX","box1MineY","box1MineZ","box1Maxe","box1MaxeX","box1MaxeY","box1MaxeZ","box2Mine","box2MineX","box2MineY","box2MineZ","box2Maxe","box2MaxeX","box2MaxeY","box2MaxeZ","distanceSquared","sphere1","sphere2","vertex1","vertex2","vertex3","rayO","rayOeX","rayOeY","rayOeZ","rayD","rayDeX","rayDeY","rayDeZ","v1eX","v1eY","v1eZ","v2eX","v2eY","v2eZ","v3eX","v3eY","v3eZ","_tempV30eX","_tempV30","_tempV30eY","_tempV30eZ","_tempV31eX","_tempV31","_tempV31eY","_tempV31eZ","_tempV32eX","_tempV32","_tempV32eY","_tempV32eZ","determinant","isZero","inversedeterminant","_tempV33eX","_tempV33","_tempV33eY","_tempV33eZ","triangleU","_tempV34eX","_tempV34","_tempV34eY","_tempV34eZ","triangleV","raydistance","intersectsRayAndTriangleRD","ZERO","ray1","ray2","ray1o","ray1oeX","ray1oeY","ray1oeZ","ray1d","ray1deX","ray1deY","ray1deZ","ray2o","ray2oeX","ray2oeY","ray2oeZ","ray2d","ray2deX","ray2deY","ray2deZ","tempV3","denominator","nearEqual","dets","point1e","point2e","test1","intersectsPlaneAndPoint","test2","test3","planeNor","intersectsRayAndPlaneRD","scaDis","rayoe","rayoeX","rayoeY","rayoeZ","rayde","raydeX","raydeY","raydeZ","boxMine","boxMaxe","tmax","MaxValue","inverse","temp","inverse1","t4","temp1","inverse2","t5","t6","temp2","intersectsRayAndBoxRD","sphereR","discriminant","intersectsRayAndSphereRD","sphereC","closestPointPointTriangle","plane1","plane2","line","plane1nor","plane2nor","planeD","planeNoreX","planeNoreY","planeNoreZ","nearest","radiisum","sphereCeX","sphereCeY","sphereCeZ","sphereContainsPoint","intersectsSphereAndTriangle","_tempV30e","intersectsBoxAndSphere","radiusSquared","scalarLengthSquared","sphere1R","sphere2R","d1","d2","d3","d4","d5","d6","vc","vb","va","w3","denom","w2","_tempV35","_tempV36","planeN","sphere1C","BoundFrustum","matrix","_matrix","initBoundingPlane","m","np","fp","lp","rp","tp","bp","matrixE","nearNorE","farNorE","leftNorE","rightNorE","topNorE","bottomNorE","_near","_far","_left","_right","_top","_bottom","getPlanesFromMatrix","top","bottom","equalsBoundFrustum","equalsOtherMatrix","equalsObj","bf","getPlane","p2","p3","p1Nor","p2Nor","p3Nor","getCorners","corners","get3PlaneInterPoint","nearBottomRight","nearTopRight","nearTopLeft","nearBottomLeft","FarBottomRight","FarTopRight","FarTopLeft","FarBottomLeft","containsPoint","planeResult","intersects","nearNormal","leftNormal","rightNormal","bottomNormal","topNormal","farNormal","containsBoundBox","p","containsBoundSphere","intersectsPlaneAndSphere","Viewport","minDepth","maxDepth","project","transformV3ToV4","unprojectFromMat","matrixEleme","unprojectFromWVP","projection","view","world","_tempMatrix4x4","_tempViewport","Picker","viewPort","projectionMatrix","nearSource","nerSourceE","farSource","farSourceE","nearPoint","farPoint","outDire","edge1","edge2","directionCrossEdge2","MIN_VALUE","NaN","inverseDeterminant","distanceVector","rayDistance","distanceCrossEdge1","ddotn","RenderableSprite3D","SHADERDEFINE_RECEIVE_SHADOW","SAHDERDEFINE_LIGHTMAP","SHADERDEFINE_LIGHTMAP_DIRECTIONAL","LIGHTMAPSCALEOFFSET","LIGHTMAP","LIGHTMAP_DIRECTION","PICKCOLOR","REFLECTIONCUBE_PROBEPOSITION","REFLECTIONCUBE_PROBEBOXMAX","REFLECTIONCUBE_PROBEBOXMIN","VOLUMETRICGI_PROBECOUNTS","VOLUMETRICGI_PROBESTEPS","VOLUMETRICGI_PROBESTARTPOS","VOLUMETRICGI_PROBEPARAMS","VOLUMETRICGI_IRRADIANCE","VOLUMETRICGI_DISTANCE","AMBIENTCOLOR","AMBIENTSH","AMBIENTINTENSITY","REFLECTIONINTENSITY","IBLTEX","IBLROUGHNESSLEVEL","commandUniform","SHADERDEFINE_MORPHTARGET","SHADERDEFINE_MORPHTARGET_POSITION","SHADERDEFINE_MORPHTARGET_NORMAL","SHADERDEFINE_MORPHTARGET_TANGENT","MorphTex","MorphParams","MorphAttriOffset","MorphActiceTargets","MorphActiveWeights","MorphActiveCount","REFLECTIONTEXTURE","REFLECTIONCUBE_HDR_PARAMS","AMBIENTSHAR","AMBIENTSHAG","AMBIENTSHAB","AMBIENTSHBR","AMBIENTSHBG","AMBIENTSHBB","AMBIENTSHC","_onActiveInScene","_addToInitStaticBatchManager","_setBelongScene","_setUnBelongScene","Lightmap","ApplyLightmapEvent","MeshSprite3DShaderDeclaration","Bounds","_imp","createBounds","getMax","getMin","setMin","setMax","setCenter","getCenter","setExtent","getExtent","_getUpdateFlag","_setUpdateFlag","_getCenter","_getExtent","_getMin","extent","_getMax","_rotateExtents","extents","extentsX","extentsY","extentsZ","matE","_tranform","getBoundBox","_getBoundBox","calculateBoundsintersection","bounds","_UPDATE_MIN","_UPDATE_MAX","_UPDATE_CENTER","_UPDATE_EXTENT","Volume","_aroundVolumeCacheNum","_bounds","_primitiveBounds","_importance","runInEditor","boundsMax","_reCaculateBoundBox","boundsMin","probePosition","importance","_VolumeChange","_volumeManager","_needUpdateAllRender","ReflectionProbeManager","_reflectionProbes","_sceneReflectionProbe","ReflectionProbe","boxProjection","_isScene","sceneReflectionProbe","_updateRenderObject","baseRender","mainProbe","overlop","maxOverlap","renderBounds","renflectProbe","probReflection","volume","handleMotionlist","motionObjects","_surportReflectionProbe","_reflectionMode","reCaculateAllRenderObjects","baseRenders","Sprite3DRenderDeclaration","VolumetricGIManager","_GIVolumes","removeVolumetricGI","renderer","SHADERDEFINE_VOLUMETRICGI","currentVolume","overlap","volumes","applyVolumetricGI","renders","VolumeManager","_motionObjects","_volumeList","_regVolumeManager","_reflectionProbeManager","ReflectionProbeVolumeType","_volumetricGIManager","VolumetricGIType","reflectionProbeManager","volumetricGIManager","reManager","addMotionObject","renderObj","removeMotionObject","mainVolume","containPoint","clearMotionObjects","needreCaculateAllRenderObjects","SphericalHarmonicsL2","_coefficients","getCoefficient","setCoefficient","coefficient","setCoefficients","coefficient0","coefficient1","coefficient2","coefficient3","coefficient4","coefficient5","coefficient6","coefficient7","coefficient8","coes","destCoes","_default","SphericalHarmonicsL2Generater","atan2","face","out_dir","TextureCubeFace","PositiveX","NegativeX","PositiveY","NegativeY","PositiveZ","NegativeZ","M_PI","cubemapPixels","pixelComponentSize","cubemapSize","isGamma","shr","_tempSHR","fill","shg","_tempSHG","shb","_tempSHB","facePixels","x0","y0","da","surfaceArea","uv2Dir","pixelOffset","g","gammaToLinearSpace","SH_Count","sh_val","sh_eval_9","sh","k","skyColor","equatorColor","groundColor","skyPixels","_tempSkyPixels","equatorPixels","_tempEquatorPixels","groundPixels","_tempGroundPixels","fillPixelBuffer","float32","fillColor","toLinear","gradientPixles","CalCubemapSH","GradientSimulateSize","timeEnd","_boxProjection","_ambientColor","_ambientMode","SolidColor","_reflectionHDRParams","_reflectionDecodeFormat","TextureDecodeFormat","_ambientSkyColor","_ambientEquatorColor","_ambientGroundColor","_ambientIntensity","_reflectionIntensity","ambientIntensity","reflectionIntensity","ambientColor","ambientMode","ambientSH","_ambientSH","SphericalHarmonics","_ambientSphericalHarmonics","_applySHCoefficients","TripleColor","_ambientTripleColorSphericalHarmonics","iblTex","_iblTex","_removeReference","_addReference","iblTexRGBD","_iblTexRGBD","applyReflectionShaderData","shaderData","SHADERDEFINE_SPECCUBE_BOX_PROJECTION","setShaderData","ShaderDataType","SHADERDEFINE_GI_LEGACYIBL","SHADERDEFINE_GI_IBL","setColor","setNumber","maxMipmapLevel","SHADERDEFINE_IBL_RGBD","setBuffer","_reflectionTexture","TextureCube","reflectionTexture","blackTexture","reflectionHDRParams","_shCoefficients","customReflection","reflectionDecodingFormat","RGBM","ambientSphericalHarmonics","originalSH","intensity","optSH","shaderSHA","shaderSHB","setGradientAmbient","gradientSH","CalGradientSH","TEMPVECTOR3","defaultTextureHDRDecodeValues","BaseRender","_lightmapScaleOffset","_sharedMaterials","_supportOctree","_sceneUpdateMark","_probeReflectionUpdateMark","simple","_updateRenderType","_motionIndexList","_ratioIgnor","_LOD","_rendernode","_createBaseRenderNode","renderId","_renderElements","_materialsInstance","createShaderData","lightmapIndex","receiveShadow","sortingFudge","_customCull","_needRender","prototype","boundsChange","renderbitFlag","_worldParams","shaderValueInit","_subMeshes","vertexElements","getSubMesh","_vertexBuffer","_vertexDeclaration","_vertexElements","_elementUsage","VertexMesh","MESH_COLOR0","SHADERDEFINE_COLOR","MESH_TEXTURECOORDINATE0","SHADERDEFINE_UV0","MESH_TEXTURECOORDINATE1","SHADERDEFINE_UV1","MESH_TANGENT0","SHADERDEFINE_TANGENT","oldMesh","defineDatas","lastValue","getMeshDefine","_meshVerticeDefine","ratioIgnor","renderNode","distanceForSort","_distanceForSort","geometryBounds","_baseGeometryBounds","_lightmapIndex","_applyLightMapParams","lightmapScaleOffset","_setShaderValue","material","insMat","_getInstanceMaterial","renderElement","sharedMaterial","_isSupportReflection","materials","slice","sharedMaterials","_changeMaterialReference","materialsInstance","sharedMats","lastMat","mat","_calculateBoundingBox","_receiveShadow","castShadow","reflectionMode","_volume","_addRenderNode","_motionInVolume","_removeRenderNode","voluemProbe","_probReflection","createBaseRenderNode","_changeLayer","_changeStaticMask","staticmask","setRenderbitFlag","RenderBitFlag_Editor","HIDE_BY_EDITOR","_onWorldMatNeedChange","_addRenderObject","_removeRenderObject","pre","_shader","_supportReflectionProbe","_addReflectionProbeUpdate","_subUniformBufferData","_needUpdate","_batchRender","_updateOneRender","pass","shaderdataType","lightMaps","lightmaps","lightMap","lightmapColor","lightmapDirection","_applyReflection","_batchOneRender","batch","_removeOneRender","boundFrustum","_CullOut","_renderUpdate","_renderUpdateWithCamera","_sceneRenderManager","sceneRenderableManager","removeRenderObject","_transLargeUbO","recover","_tempBoundBoxCorners","_defaultLightmapScaleOffset","RenderElement","_canBatch","_subShaderIndex","renderType","RENDERTYPE_NORMAL","_createRenderElementOBJ","_renderElementOBJ","_material","_materialShaderData","renderSubShader","_subShader","_baseRender","_renderShaderData","createRenderElement","getInvertFront","setTransform","setGeometry","geometry","_geometry","_geometryElementOBj","compileShader","passes","_passes","_clearShaderInstance","_pipelineMode","comDef","_compileDefine","sceneShaderData","_defineDatas","_configDefineValues","addDefineDatas","configShaderData","cameraShaderData","shaderIns","withCompile","_addShaderInstance","_convertSubShader","customShader","replacementTag","subshaderIndex","subShader","getSubShaderAt","oriTag","getFlag","customSubShaders","_subShaders","customSubShader","_update","_getRenderQueue","_isTransparent","addRenderElement","_renderUpdatePre","sceneMark","Camera","subUbo","updateSubData","_isRender","_prepareRender","_updateRenderParams","_contextOBJ","_invertFront","_render","RENDERTYPE_STATICBATCH","RENDERTYPE_INSTANCEBATCH","RENDERTYPE_VERTEXBATCH","DefineDatas","GeometryElement","mode","drawType","createRenderGeometry","bufferState","setDrawArrayParams","first","setDrawElemenParams","instanceCount","indexFormat","_getType","state","renderDrawContext","drawGeometryElement","clearRenderParams","_typeCounter","SkyBox","MeshTopology","Triangles","DrawType","DrawElement","vertices","verDec","getVertexDeclaration","vertexBuffer","createVertexBuffer3D","vertexStride","Static","vertexDeclaration","indexBuffer","createIndexBuffer3D","IndexFormat","UInt8","setData","BufferState","applyState","instance","VertexPositionTexture0","textureCoordinate0","_textureCoordinate0","VertexDeclaration","VertexElement","VertexElementFormat","MESH_POSITION0","SkyDome","stacks","slices","_stacks","_slices","vertexFloatCount","numberVertices","numberIndices","Uint16Array","stackAngle","sliceAngle","vertexIndex","vertexCount","indexCount","stack","sin","cos","UInt16","SkyRenderer","_renderElement","_renderData","SUNLIGHTDIRECTION","SUNLIGHTDIRCOLOR","depthTest","CompareFunction","LessEqual","depthWrite","stencilWrite","meshType","_isAvailable","_tempMatrix1","_sunColor","setVector3","_sundir","setTranslationVector","createOrthoOffCenter","yScale","fieldOfView","epsilon","isWebXR","_applyViewProject","applyContext","drawRenderElement","BaseCamera","_skyRenderer","_forward","_up","_linearClearColor","clearColor","_fieldOfView","_useUserProjectionMatrix","_orthographicVerticalSize","renderingOrder","_nearPlane","_farPlane","cullingMask","useOcclusionCulling","_renderEngine","_orthographic","_cameraUniformUBO","UBONAME_CAMERA","_cameraUniformData","createCameraUniformBlock","_addCheckUBO","setUniformBuffer","CAMERAUNIFORMBLOCK","SHADERDEFINE_DEPTH","SHADERDEFINE_DEPTHNORMALS","SHADERDEFINE_ORTHOGRAPHIC","SHADERDEFINE_FXAA","camerauniformMap","cameraUniformMap","CAMERAPOS","VIEWMATRIX","VIEWPROJECTMATRIX","PROJECTMATRIX","CAMERADIRECTION","CAMERAUP","VIEWPORT","PROJECTION_PARAMS","OPAQUETEXTURE","CameraUBOData","uniformPara","uniformMap","forEach","key","_clearColor","skyRenderer","_calculateProjectionMatrix","_caculateMaxLocalYRange","maxlocalYDistance","_yrange","vaule","_cullingMask","_renderingOrder","_sortCamerasByRenderingOrder","halffield","dist","_onScreenSizeChanged","displayedInStage","cameraPool","_cameraPool","tempCamera","_prepareCameraToRender","shader","addLayer","removeLayer","addAllLayers","removeAllLayers","resetProjectionMatrix","_addCamera","_removeCamera","skyboxMaterial","stage","RESIZE","RENDERINGTYPE_SHADERDEFINE_FXAA","RENDERINGTYPE_DEFERREDLIGHTING","RENDERINGTYPE_FORWARDRENDERING","_invertYScaleMatrix","_invertYProjectionMatrix","_invertYProjectionViewMatrix","Light","_shadowMode","_isAlternate","_shadowResolution","_shadowDistance","_shadowDepthBias","_shadowNormalBias","_shadowNearPlane","_shadowStrength","_lightWoldMatrix","_intensity","_intensityColor","_lightmapBakedType","realTime","shadowMode","shadowDistance","shadowResolution","shadowDepthBias","shadowNormalBias","shadowStrength","shadowNearPlane","lightmapBakedType","premode","bakeOnly","_removeFromScene","_addToScene","lightWorldMatrix","quaterian","ONE","colorData","light","maxLightCount","_lightCount","_addToLightQueue","_alternateLights","_removeFromLightQueue","alternateLight","shift","ShadowUtils","_adjustNearPlane","_adjustFarPlane","getCapable","RenderCapable","RenderTextureFormat_Depth","witdh","shadowFormat","depthFormat","DEPTH_16","bit16","bit24_8","DEPTHSTENCIL_24_8","bit32","DEPTH_32","shadowMap","compareMode","TextureCompareMode","LESS","Bilinear","shadowProjectionMatrix","frustumSize","_lightType","Directional","Spot","Deg2Rad","texelSize","depthBias","normalBias","SoftHigh","kernelRadius","cameraViewProjectMatrix","frustumPlanes","Near","Far","Left","Right","Top","Bottom","twoSplitRatio","fourSplitRatio","cameraNear","shadowFar","fov","cascadesMode","tFov","NoCascades","getFarWithRadius","TwoCascades","FourCascades","shadowSliceData","atlasWidth","atlasHeight","cascadeIndex","outShadowMatrices","sliceE","oneOverAtlasWidth","oneOverAtlasHeight","resolution","_mulMatrixArray","cameraFrustumPlanes","splitDistance","frustumCorners","_frustumCorners","backPlaneFaces","_backPlaneFaces","planeNeighbors","_frustumPlaneNeighbors","twoPlaneCorners","_frustumTwoPlaneCorners","edgePlanePoint2","_edgePlanePoint2","cullPlanes","splitNearDistance","splitNear","splitFar","sphereCenterZ","splitBoundSphere","backIndex","edgeIndex","backFace","neighborFaces","neighborFace","notBackFace","createPlaneBy3P","cullPlaneCount","cameraPos","outBoundSphere","centerZ","k2","farSNear","farANear","tileCount","currentTileCount","lightUp","lightSide","lightForward","shadowMatrices","boundSphere","halfShadowResolution","borderRadius","atlasBorderSize","borderDiam","sizeUnit","radiusUnit","upLen","sideLen","forwardLen","projectMatrix","viewProjectMatrix","createLookAt","_shadowMapScaleOffsetMatrix","shadowSpotData","shadowParams","shadowSpotMatrices","shadowMapSize","spotWorldMatrix","cameraCullInfo","createPerspective","shadowMapWidth","shadowMapHeight","shadowSliceDatas","cascadeCount","splitBoundSpheres","matrixFloatCount","sphereFloatCount","unknown","RenderContext3D","createRenderContext3D","_instance","GammaCorrect","invertY","cameraShaderValue","sceneID","tempVec4","renderelemt","replaceTag","ScreenQuad","TriangleStrip","DrawArray","_bufferState","_bufferStateInvertUV","_vertices","_vertexBufferInvertUV","_verticesInvertUV","SCREENQUAD_POSITION_UV","Command","_commandBuffer","_screenShaderData","_screenShader","find","SCREENTEXTURE_ID","SCREENTEXTURE_NAME","SCREENTEXTUREOFFSETSCALE_ID","SCREENTEXTUREOFFSETSCALE_NAME","MAINTEXTURE_TEXELSIZE_ID","MAINTEXTURE_TEXELSIZE_NAME","run","setContext","_context","BlitScreenQuadCMD","_source","_dest","_offsetScale","_shaderData","_sourceTexelSize","_transform3D","offsetScale","screenType","_SCREENTYPE_QUAD","commandbuffer","cmd","_pool","setshader","_internalRenderTexture","vpH","vpY","clientHeight","_defaultOffsetScale","blitDrawCall","_SCREENTYPE_TRIANGLE","SetRenderTargetCMD","_renderTexture","renderTexture","currentActive","SetShaderDataCMD","_nameID","_value","_dataType","nameID","shaderDataType","commandBuffer","Int","setInt","Bool","setBool","setMatrix4x4","setVector2","Buffer","ShaderDataType_define","defineData","Material","RENDERQUEUE_OPAQUE","alphaTest","cull","RenderState","CULL_BACK","blend","BLEND_DISABLE","blendSrc","BLENDPARAM_ONE","blendDst","BLENDPARAM_ZERO","blendSrcRGB","blendDstRGB","blendSrcAlpha","blendDstAlpha","blendEquation","BLENDEQUATION_ADD","blendEquationRGB","blendEquationAlpha","DEPTHTEST_LEQUAL","stencilRef","stencilTest","STENCILTEST_OFF","stencilOp","STENCILOP_KEEP","STENCILOP_REPLACE","destroyedImmediately","Config","destroyResourceImmediatelyDefault","MATERIAL","SHADERDEFINE_ALPHATEST","SHADERDEFINE_MAINTEXTURE","SHADERDEFINE_ADDTIVEFOG","ALPHATESTVALUE","CULL","BLEND","BLEND_SRC","BLEND_DST","BLEND_SRC_RGB","BLEND_DST_RGB","BLEND_SRC_ALPHA","BLEND_DST_ALPHA","BLEND_EQUATION","BLEND_EQUATION_RGB","BLEND_EQUATION_ALPHA","DEPTH_TEST","DEPTH_WRITE","STENCIL_Ref","STENCIL_TEST","STENCIL_WRITE","STENCIL_Op","alphaTestValue","getNumber","hasDefine","define","setDefine","getBool","getInt","getVector3","MaterialProperty","propertyMap","propertyIDToName","parseInt","MaterialDefine","shaderDefineArray","_getNamesByDefineData","materialRenderMode","_matRenderNode","RENDERMODE_OPAQUE","DEPTHTEST_LESS","RENDERMODE_CUTOUT","RENDERQUEUE_ALPHATEST","RENDERMODE_TRANSPARENT","RENDERQUEUE_TRANSPARENT","BLEND_ENABLE_ALL","BLENDPARAM_SRC_ALPHA","BLENDPARAM_ONE_MINUS_SRC_ALPHA","RENDERMODE_ADDTIVE","RENDERMODE_ALPHABLENDED","RENDERMODE_CUSTOME","_bindShaderInfo","shaderUBODatas","_uniformBufferDataMap","keys","uboData","get","ubo","_releaseUBOData","uniformBufferDatas","values","_updateDataInfo","clear","uniformBuffersMap","effectiveProperty","_uniformTypeMap","setShaderName","_uniformDefaultValue","typeMap","applyUniformDefaultValue","ShaderDataDefaultValue","getBoolByIndex","uniformIndex","setBoolByIndex","getFloatByIndex","setFloatByIndex","getFloat","setFloat","getIntByIndex","setIntByIndex","getVector2ByIndex","getVector2","setVector2ByIndex","getVector3ByIndex","setVector3ByIndex","setVector4ByIndex","getVector4ByIndex","getVector","setVector4","getVector4","getColorByIndex","getColor","setColorByIndex","getMatrix4x4ByIndex","getMatrix4x4","setMatrix4x4ByIndex","setTextureByIndex","_texture","once","READY","reSetTexture","getSourceIndex","getTextureByIndex","getTexture","getBufferByIndex","setBufferByIndex","setShaderDataByIndex","getShaderData","getShaderDataByIndex","destBaseMaterial","_name","setShaderPropertyValue","propertyID","setValueData","getShaderPropertyValue","getValueData","oldparseEndEvent","BlinnPhongMaterial","renderMode","SHADERDEFINE_DIFFUSEMAP","SHADERDEFINE_NORMALMAP","SHADERDEFINE_SPECULARMAP","SHADERDEFINE_ENABLEVERTEXCOLOR","SHADERDEFINE_ENABLETRANSMISSION","SHADERDEFINE_THICKNESSMAP","ALBEDOTEXTURE","NORMALTEXTURE","SPECULARTEXTURE","ALBEDOCOLOR","MATERIALSPECULAR","SHININESS","TILINGOFFSET","TRANSMISSIONRATE","IBACKDIFFUSE","IBACKSCALE","THINKNESSTEXTURE","TRANSMISSIONCOLOR","AlbedoIntensity","enableVertexColor","tilingOffset","albedoColor","albedoIntensity","specularColor","shininess","albedoTexture","normalTexture","specularTexture","enableTransmission","transmissionRata","backDiffuse","backScale","thinknessTexture","transmissionColor","transmissionRate","destMaterial","MeshFilter","getComponent","MeshRenderer","_onMeshChange","_sharedMesh","sharedMesh","SubMeshRenderElement","_dynamicWorldPositionNormalNeedUpdate","_onWorldMatrixChanged","staticBatch","instanceSubMesh","staticBatchElementList","instanceBatchElementList","vertexBatchElementList","vertexBatchVertexDeclaration","MeshUtil","elementUsage","_revertStaticBatchDefineUV1","morphTargetActiveCount","_morphWeightChange","_morphTargetValues","_projectionViewWorldMatrix","SHADERDEFINE_GPU_INSTANCE","_createRenderElement","getMesh","filter","_getMeshDefine","_changeVertexDefine","morphTargetValues","_changeMorphTargetValue","setMorphChannelWeight","channelName","morphTargetData","channel","getMorphChannel","_applyMorphdata","morphData","channelCount","channelIndex","getMorphChannelbyIndex","lastFullWeight","targets","fullWeight","morphTargetWeight","_index","activeIndex","morphTargetActiveIndex","morphTargetActiveWeight","maxMorphTargetCount","Texture3D","_changeMorphData","maxCount","vertexDec","MESH_NORMAL0","attributeOffset","targetTexture","morphtargetChannels","targetCount","subMeshCount","defaultMaterial","updateMulPassRender","subCount","matCount","_revertBatchRenderUpdate","DrawMeshCMD","_meshRender","subMeshIndex","subShaderIndex","_subMeshIndex","_renderElemnts","sceneReflectionProb","submeshs","ClearRenderTextureCMD","_clearDepth","_backgroundColor","_linearbackgroundColor","_depth","clearDepth","backgroundColor","depth","linearBgColor","DrawRenderCMD","_elementRender","renderElements","renderelement","SetGlobalShaderDataCMD","globalShaderData","MeshInstanceGeometry","subMesh","DrawElementInstance","_subMesh","_indexStart","DrawMeshInstancedCMD","_instanceRenderElementArray","_instanceGeometryArray","_instanceWorldMatrixData","maxInstanceCount","_instanceWorldMatrixBuffer","instanceWorldMatrixDeclaration","instanceBuffer","matrixs","instanceProperty","drawnums","_matrixs","_instanceProperty","_drawnums","_updateWorldMatrixBuffer","_setInstanceBuffer","changeVertexDefine","_instanceBufferState","instanceBufferState","vertexArray","_vertexBuffers","_propertyMap","_indexBuffer","worldMatrixData","worldBuffer","orphanStorage","setWorldMatrix","worldMatrixArray","setDrawNums","drawNums","updateVertexBufferData","CommandBuffer","shadowCaster","_shadow","_commands","casterShadow","_apply","cmdDrawCall","_applyOne","getCommandsSize","setShaderDataTexture","setGlobalTexture","setShaderDataColor","setGlobalColor","setShaderDataVector","setGlobalVector","setShaderDataVector3","setGlobalVector3","setShaderDataVector2","setGlobalVector2","setShaderDataNumber","setGlobalNumber","setShaderDataInt","setGlobalInt","setShaderDataMatrix","setShaderDefine","setGlobalMatrix","blitScreenQuad","blitScreenQuadByMaterial","blitScreenTriangle","setRenderTarget","clearRenderTarget","drawMesh","submeshIndex","drawRender","drawMeshInstance","DrawElement_Instance","drawMeshInstancedCMD","addCustomCMD","command","PhysicsSettings","LightQueue","getBrightestLight","maxIntIndex","maxIntensity","normalLightOrdering","brightestIndex","firstLight","AlternateLightQueue","Scene3DShaderDeclaration","BoundSphere","_center","toDefault","points","upperEnd","_tempVector3","outCenter","createFromSubPoints","intersectsRayDistance","intersectsRayPoint","outPoint","intersectsRayAndSphereRP","ShadowSliceData","ShadowSpotData","createCameraCullInfo","FrustumCulling","_cameraCullInfo","_shadowCullInfo","createShadowCullInfo","cullInfo","nn","ShadowCasterPass","_shadowBias","_shadowParams","_shadowMapSize","_shadowSpotMapSize","_shadowMatrices","_shadowSpotMatrices","_splitBoundSpheres","_maxCascades","_cascadeCount","_shadowMapWidth","_shadowMapHeight","_shadowSliceDatas","_shadowSpotData","_lightUp","_lightSide","_lightForward","_castDepthBufferData","_castDepthBufferOBJ","_castDepthCameraBufferData","_castDepthCameraBufferOBJ","_frustumPlanes","SHADOW_LIGHT_DIRECTION","SHADOW_SPLIT_SPHERES","SHADOW_MATRICES","SHADOW_MAP_SIZE","SHADOW_MAP","SHADOW_PARAMS","SHADOW_SPOTMAP_SIZE","SHADOW_SPOTMAP","SHADOW_SPOTMATRICES","sceneUniformMap","_setupShadowCasterShaderValues","LightParam","shadowparams","shadowBias","lightType","cameraSV","projectionViewMatrix","_setupShadowReceiverShaderValues","_light","shadowCascadesMode","SHADERDEFINE_SHADOW_CASCADE","Hard","SHADERDEFINE_SHADOW_SOFT_SHADOW_LOW","SHADERDEFINE_SHADOW_SOFT_SHADOW_HIGH","SoftLow","_shadowDirectLightMap","_setupSpotShadowReceiverShaderValues","SHADERDEFINE_SHADOW_SPOT_SOFT_SHADOW_HIGH","SHADERDEFINE_SHADOW_SPOT_SOFT_SHADOW_LOW","_shadowSpotLightMap","DirectionLight","lightWorldE","lightWorld","cascadesCount","shadowTileResolution","atlasResolution","_shadowCascadesMode","getMaxTileResolutionInAtlas","_cascadesSplitDistance","boundSpheres","getCascadesSplitDistance","_shadowTwoCascadeSplits","_shadowFourCascadeSplits","getCameraFrustumPlanes","sliceData","getBoundSphereByFrustum","getDirectionLightShadowCullPlanes","getDirectionalLightMatrices","applySliceTransform","prepareShadowReceiverShaderValues","SpotLight","getSpotLightShadowData","PointLight","getTemporaryShadowTexture","getShadowBias","shadowCullInfo","cullSphere","_directLightShadowCull","_tempVector4","_applyCasterPassCommandBuffer","spotlight","_sportLightShadowCull","BlitFrameBufferCMD","_texture_size","shaderdata","vph","SceneRenderManager","_sceneManagerOBJ","createSceneRenderManager","list","addRenderObject","object","updateMotionObjects","UI3DManager","_UI3Dlist","_submitRT","rayOri","clean","sort","_getCameraDistance","hit","_checkUIPos","destory","BVHSpatialManager","cellCount","bvhManager","updateBVHBoxList","BVHSpatialConfig","max_SpatialCount","limit_size","Min_BVH_Build_Nums","BVHSpatialBox","bvhmanager","config","MAX_VALUE","_cellList","_cellCount","_bvhmanager","_config","_tempV3","_tempV3_2","_isRepeat","cell","_addOneCell","_removeOneCell","delete","_clearList","_isFloatMax","_isBoundsContainedBySpatialBox","cellMin","cellMax","_addBounds","_boundchanged","_removeBounds","getList","getchild0","_children0","getchild1","_children1","fillCell","fillRemove","addCell","removeCell","splitBox","isContentBox","_creatChildNode","merge","getNearlist","checkPos","traverseBoundsCell","getItemByCameraCullInfo","frustum","getItemByFrustum","getItemBySCI","sci","sciContainsBox","sciIntersectsBox","recaculateBox","isRoot","BVHSpatial","bvhConfig","_isBuild","_BVHConfig","_BVHManager","_BVHSpatialBox","bvhSpatialBox","cellLegal","extend","addOne","spatial","removeOne","has","motionOne","rebuild","BVHRenderBox","frustumCulling","cullMask","cullingRenderBounds","BVHRenderSpatial","BVHSceneRenderManager","_bvhRenderSpatial","_allRenderList","bvhSpatial","otherList","CullPassBase","_cullList","cullList","bound","exten","dis","cullByCameraCullInfo","renderManager","cullByShadowCullInfo","renderList","cullingSpotShadow","BVHCullPass","Sprite","_reflectionsSource","_reflectionsResolution","_reflectionsIblSamples","_lightmaps","_time","_physicsdisableSimulation","_collsionTestList","_key","SubmitKey","createBaseRenderQueue","_transparentQueue","_UI3DManager","currentCreationLayer","enableLight","_ShadowMapupdateFrequency","_componentDriver","ComponentDriver","_timer","timer","conchConfig","conchWebGL","_nativeObj","conchSubmitScene3D","renderSubmit","bind","_physicsSimulation","physicsSettings","_sceneUniformObj","UBONAME_SCENE","_sceneUniformData","createSceneUniformBlock","SCENEUNIFORMBLOCK","_shadowCasterPass","_fogParams","enableFog","fogStart","fogEnd","fogDensity","fogColor","fogMode","Linear","GIRotate","useBVHCull","BVH_Min_Build_nums","BVH_limit_size","BVH_max_SpatialCount","_cullPass","createCullPass","debugFrustumCulling","_sceneReflectionProb","__updateMark","SHADERDEFINE_FOG","SHADERDEFINE_FOG_LINEAR","SHADERDEFINE_FOG_EXP","SHADERDEFINE_FOG_EXP2","SHADERDEFINE_DIRECTIONLIGHT","SHADERDEFINE_POINTLIGHT","SHADERDEFINE_SPOTLIGHT","SHADERDEFINE_SHADOW","SHADERDEFINE_SHADOW_SPOT","FOGCOLOR","FOGPARAMS","DIRECTIONLIGHTCOUNT","LIGHTBUFFER","CLUSTERBUFFER","TIME","LIGHTDIRECTION","LIGHTDIRCOLOR","LIGHTMODE","POINTLIGHTPOS","POINTLIGHTRANGE","POINTLIGHTATTENUATION","POINTLIGHTCOLOR","POINTLIGHTMODE","SPOTLIGHTPOS","SPOTLIGHTDIRECTION","SPOTLIGHTSPOTANGLE","SPOTLIGHTRANGE","SPOTLIGHTCOLOR","SPOTLIGHTMODE","_multiLighting","clusterSlices","_maxAreaLightCountPerClusterAverage","_lightTexture","_lightPixles","configShaderValue","SHADERDEFINE_LEGACYSINGALLIGHTING","legacyLightingValueInit","GRAPHICS_API_GLES3","SHADERDEFINE_GRAPHICS_API_GLES3","SHADERDEFINE_GRAPHICS_API_GLES2","SHADERDEFINE_ENUNIFORMBLOCK","TextureFormat_R32G32B32A32","SHADERDEFINE_FLOATTEXTURE","Texture_FloatLinearFiltering","SHADERDEFINE_FLOATTEXTURE_FIL_LINEAR","Scene","_scene3D","scene2D","_scene2D","manager","cullPass","_enableFog","_fogMode","EXP","EXP2","fogParams","maps","map","shadowMapFrequency","_delta","enablePhysicsUpdate","callStart","callUpdate","callLateUpdate","callDestroy","_renderByEditor","_binarySearchIndexInCameraPool","_getGroup","_group","_setGroup","_scene3Ds","scenes","_prepareSceneToRender","enableMulLight","ligTex","ligPix","pixelWidth","floatWidth","dirCount","dirElements","sunLightIndex","_mainDirectionLight","dirLight","_direction","intCor","mainPointLightIndex","_mainPointLight","poiLight","mainSpotLightIndex","_mainSpotLight","spoLight","cullInfoCamera","_cullInfoCamera","_setCullCamera","recaculateCullCamera","order","_preCulling","_clearRenderQueue","_clear","vpX","renderTex","_getRenderTexture","vpW","_needInternalRenderTexture","renderTarget","_getCanvasHeight","_context3DViewPortCatch","_contextScissorPortCatch","clearFlag","Sky","clearConst","stencilFlag","depthStencilFormat","Stencil","DepthOnly","Nothing","ColorOnly","gammaCorrection","_renderScene","renderFlag","SCENERENDERFLAG_RENDERQPAQUE","opaqueDrawCall","SCENERENDERFLAG_SKYBOX","SCENERENDERFLAG_RENDERTRANSPARENT","transDrawCall","lightMapsData","lightMapCount","lightMapData","getTexture2D","skyData","sky","fogRange","fogColorData","fogCol","ambientModeData","ambientColorData","ambCol","ambientSkyColor","tempV3sky","ambientEquatorColor","tempV3Equaltor","ambientGroundColor","tempV3Ground","ambientSphericalHarmonicsData","reflectionData","reflection","reflectionDecodingFormatData","ambientSphericalHarmonicsIntensityData","ambientSphericalHarmonicsIntensity","reflectionIntensityData","ctx","addRenderObject3D","_curBindedBufferState","unBind","enableBuiltInRenderTexture","enableRender","_blitTransRT","canvasWidth","_getCanvasWidth","canvasHeight","_blitOffset","blitMainCanvans","normalizedViewport","_cacheDepth","_inPool","Context","set2DRenderConfig","clearPool","normalizeViewPort","mainCavansViewPort","clientWidth","fxaa","getRenderType","releaseRender","reUse","setGlobalShaderValue","shaderOffset","setlightmaps","getlightmaps","lightmapColors","REFLECTIONMODE_SKYBOX","REFLECTIONMODE_CUSTOM","_updateViewMatrix","_postProcess","_enableHDR","_viewportParams","_projectionParams","_needBuiltInRenderTexture","_msaa","_fxaa","_offScreenRenderTexture","_canBlitDepth","_internalCommandBuffer","_depthTextureFormat","_cameraEventCommandBuffer","_shadowCasterCommanBuffer","_clusterPlaneCacheFlag","_screenOffsetScale","_viewMatrix","_projectionMatrix","_projectionViewMatrix","_viewport","_normalizedViewport","_rayViewport","_aspectRatio","_boundFrustum","_depthTextureMode","opaquePass","replaceFlag","recoverTexture","needInternalRT","_getRenderTextureFormat","msaa","_needRenderGamma","callPreRender","needShadowCasterPass","_renderShadowMap","_preRenderMainPass","_renderMainPass","_aftRenderMainPass","callPostRender","coverFilter","pixelData","rtFormat","R32G32B32","R16G16B16","R5G6B5","rt","blit","renderCubeSize","bytelength","quaterionArray","drawRenderTextureByScene","drawTextureCubePixelByScene","textureCube","depthPass","vp","_calculationViewport","needUpdateCanvasSize","customResolution","pixelRatio","_resoluWidth","_resoluHeight","MSAA","enablemsaa","scaleX","scaleY","scaleZ","viewMatE","_isCameraTarget","postProcess","enableHDR","RenderTextureFormat_R16G16B16A16","depthTextureMode","_opaquePass","_opaqueTexture","enableBlitDepth","generateDepthTexture","_cacheDepthTexture","canblitDepth","ceilLeftX","ceilLeftY","floorRightX","floorRightY","pixelLeftX","pixelLeftY","pixelRightX","pixelRightY","halfHeight","halfWidth","_isLayerVisible","clearFlagData","enable","_updateCameraRenderData","proMat","projectView","clusterCount","xSlixe","ySlice","xCount","yCount","yLengthPerCluster","xLengthPerCluster","normX","normY","_applyCommandBuffer","enableCameraCMD","commandBufferArray","textureContext","bindoutScreenTarget","_addCasterShadowCommandBuffer","_removeCasterShadowCommandBuffer","shadowCasterPass","mainDirectLight","supportShadow","enableShadow","spotMainLight","spotneedShadowCasterPass","bindCanvasRender","grabTexture","copySubFrameBuffertoTex","setDataByUniformBufferData","_renderDepthMode","BeforeForwardOpaque","recoverRenderContext3D","enableOpaque","BeforeSkyBox","_createOpaqueTexture","BeforeTransparent","enableTransparent","BeforeImageEffect","enablePostprocess","commandContext","_applyPostProcessCommandBuffers","AfterEveryThing","cacheViewPor","cacheScissor","cameraDepthMode","cameraDepthTextureMode","depthStencilTexture","needShadowPass","currentTarget","renderContext","tex","activeInHierarchy","texFormat","viewportPointToRay","_width","calculateCursorRay","normalizedViewportPointToRay","finalPoint","_tempVector20","worldToViewportPoint","_wr","_hr","clientScaleX","clientScaleY","worldToNormalizedViewportPoint","convertScreenCoordToOrthographicCoord","ratioX","ratioY","addCommandBuffer","removeCommandBuffer","removeCommandBuffers","GradientMode","Blend","Fixed","Gradient","maxColorRGBKeyCount","maxColorAlphaKeyCount","_mode","_maxColorRGBKeysCount","_maxColorAlphaKeysCount","_colorRGBKeysCount","_colorAlphaKeysCount","_keyRanges","_alphaElements","_rgbElements","colorRGBKeysCount","colorAlphaKeysCount","maxColorRGBKeysCount","maxColorAlphaKeysCount","addColorRGB","addColorAlpha","updateColorRGB","updateColorAlpha","evaluateColorRGB","lerpFactor","startSearchIndex","reverseSearch","rgbElements","curIndex","diff","evaluateColorAlpha","outColor","alphaElements","destGradientDataColor","destAlphaElements","destRGBElements","DirectionLightCom","shadowTwoCascadeSplits","shadowFourCascadeSplits","LightSprite","spriteLight","addComponent","PointLightCom","_range","pointlight","SpotLightCom","_spotAngle","UnlitMaterial","SHADERDEFINE_ALBEDOTEXTURE","_albedoIntensity","EffectMaterial","CULL_NONE","ExtendTerrainMaterial","SHADERDEFINE_DETAIL_NUM1","SHADERDEFINE_DETAIL_NUM2","SHADERDEFINE_DETAIL_NUM3","SHADERDEFINE_DETAIL_NUM4","SHADERDEFINE_DETAIL_NUM5","SPLATALPHATEXTURE","DIFFUSETEXTURE1","DIFFUSETEXTURE2","DIFFUSETEXTURE3","DIFFUSETEXTURE4","DIFFUSETEXTURE5","DIFFUSESCALEOFFSET1","DIFFUSESCALEOFFSET2","DIFFUSESCALEOFFSET3","DIFFUSESCALEOFFSET4","DIFFUSESCALEOFFSET5","splatAlphaTexture","diffuseTexture1","_setDetailNum","diffuseTexture2","diffuseTexture3","diffuseTexture4","diffuseTexture5","diffuseScaleOffset1","scaleOffset1","diffuseScaleOffset2","scaleOffset2","diffuseScaleOffset3","scaleOffset3","diffuseScaleOffset4","scaleOffset4","diffuseScaleOffset5","scaleOffset5","PBRDefaultDFG","defaultDFG","_defaultDFG","hdrBuffer","Base64Tool","decode","hdrInfo","HDRTextureInfo","getHDRInfo","supportFloatTex","supportFloatLinearFiltering","setHDRData","pixelCount","hdrPixelData","readScanLine","rgbdPixelData","maxRGB","PBRShaderLib","DEFINE_EMISSION","DEFINE_CLEARCOAT","DEFINE_CLEARCOAT_NORMAL","DEFINE_ANISOTROPY","addInclude","DefaultDfgTexture","SubShader","regIncludeBindUnifrom","u_IBLDFG","PBRRenderMode","PBRMetallicSmoothnessSource","ParticleSystemShapeType","TrailAlignment","AreaShape","PBRMaterial","EMISSIONCOLOR","SMOOTHNESS","OCCLUSIONSTRENGTH","NORMALSCALE","PARALLAXSCALE","Opaque","SHADERDEFINE_NORMALTEXTURE","SHADERDEFINE_PARALLAXTEXTURE","SHADERDEFINE_OCCLUSIONTEXTURE","SHADERDEFINE_EMISSIONTEXTURE","SHADERDEFINE_TRANSPARENTBLEND","SHADERDEFINE_LAYA_PBR_BRDF_HIGH","SHADERDEFINE_LAYA_PBR_BRDF_LOW","SHADERDEFINE_DETAILALBEDO","SHADERDEFINE_DETAILNORMAL","OCCLUSIONTEXTURE","PARALLAXTEXTURE","EMISSIONTEXTURE","EMISSIONIntensity","DETAILALBEDOTEXTURE","DETAILNORMALTEXTURE","DETAILTILLINGOFFSET","DETAILNORMALSCALE","CLEARCOAT","SHADERDEFINE_CLEARCOATTEXTURE","CLEARCOATTEXTURE","CLEARCOATROUGHNESS","SHADERDEFINE_CLEARCOATROUGHNESSTEXTURE","CLEARCOATROUGHNESSTEXTURE","CLEARCOATNORMALTEXTURE","ANISOTROPY","SHADERDEFINE_ANISOTROPYTEXTURE","ANISOTROPYTEXTURE","ANISOTROPYROTATION","normalTextureScale","parallaxTexture","parallaxTextureScale","occlusionTexture","occlusionTextureStrength","smoothness","enableEmission","emissionColor","emissionIntensity","emissionTexture","detailAlbedoTexture","detailNormalTexture","detailTilingOffset","detailNormalScale","Cutout","Fade","Transparent","anisotropyEnable","anisotropy","anisotropyTexture","anisotropyRotation","clearCoatEnable","clearCoat","clearCoatTexture","clearCoatRoughness","clearCoatRoughnessTexture","clearCoatNormalTexture","smoothnessTextureScale","renderQuality","High","PBRStandardMaterial","_smoothnessSource","SHADERDEFINE_METALLICGLOSSTEXTURE","SHADERDEFINE_SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA","METALLICGLOSSTEXTURE","METALLIC","metallicGlossTexture","metallic","smoothnessSource","SkyBoxMaterial","TINTCOLOR","EXPOSURE","ROTATION","TEXTURECUBE","tintColor","exposure","SkyPanoramicMaterial","_textureHDRParams","TEXTURE_HDR_PARAMS","TEXTURE","panoramicTexture","SkyProceduralMaterial","sunDisk","SUN_HIGH_QUALITY","sunSize","sunSizeConvergence","atmosphereThickness","skyTint","groundTint","SHADERDEFINE_SUN_HIGH_QUALITY","SHADERDEFINE_SUN_SIMPLE","SUNSIZE","SUNSIZECONVERGENCE","ATMOSPHERETHICKNESS","SKYTINT","GROUNDTINT","_sunDisk","SUN_SIMPLE","SUN_NODE","WaterPrimaryMaterial","HORIZONCOLOR","WAVESCALE","WAVESPEED","MAINTEXTURE","horizonColor","mainTexture","waveScale","waveSpeed","MeshSprite3D","_meshFilter","meshFilter","meshRenderer","lightmapScaleOffsetArray","meshPath","receiveShadows","materialCount","Burst","minCount","_minCount","_maxCount","destBurst","GradientColor","_constant","_constantMin","_constantMax","_gradient","_gradientMin","_gradientMax","constant","gradientColor","gradient","minConstant","maxConstant","minGradient","maxGradient","constantMin","constantMax","gradientMin","gradientMax","destGradientColor","ColorOverLifetime","_color","destColorOverLifetime","destColor","createByConstant","createByGradient","createByRandomTwoConstant","createByRandomTwoGradient","Emission","_emissionRate","_emissionRateOverDistance","_bursts","emissionRate","emissionRateOverDistance","getBurstsCount","getBurstByIndex","addBurst","burst","burstsCount","removeBurst","removeBurstByIndex","clearBurst","destEmission","destBursts","FrameOverTime","_overTime","_overTimeMin","_overTimeMax","rotationOverLifetime","overTime","gradientFrameMin","gradientFrameMax","frameOverTimeData","frameOverTimeDataMin","frameOverTimeDataMax","destFrameOverTime","GradientAngularVelocity","_separateAxes","_constantSeparate","_gradientX","_gradientY","_gradientZ","_gradientW","_constantMinSeparate","_constantMaxSeparate","_gradientXMin","_gradientXMax","_gradientYMin","_gradientYMax","_gradientZMin","_gradientZMax","_gradientWMin","_gradientWMax","gradientAngularVelocity","separateConstant","gradientX","gradientY","gradientZ","separateConstantMin","separateConstantMax","gradientXMin","gradientXMax","gradientYMin","gradientYMax","gradientZMin","gradientZMax","gradientWMin","gradientWMax","separateAxes","constantSeparate","gradientW","constantMinSeparate","constantMaxSeparate","destGradientAngularVelocity","GradientDataInt","_currentLength","gradientCount","log","destGradientDataInt","destElements","GradientDataNumber","getKeyByIndex","getValueByIndex","getAverageValue","total","subValue","destGradientDataNumber","GradientSize","gradientSize","getMaxSizeInGradient","meshMode","maxSize","destGradientSize","GradientVelocity","gradientVelocity","destGradientVelocity","RotationOverLifetime","destRotationOverLifetime","destAngularVelocity","createByConstantSeparate","createByGradientSeparate","createByRandomTwoConstantSeparate","createByRandomTwoGradientSeparate","BoundBox","matElements","setCenterAndExtent","tranform","BaseShape","randomDirection","_getShapeBoundBox","_getSpeedBoundBox","generatePositionAndDirection","rand","randomSeeds","_calculateProceduralBounds","emitterPosScale","minMaxBounds","speedBounds","maxSpeedBound","maxSpeedMin","maxSpeedMax","minSpeedBound","minSpeedMin","minSpeedMax","destShape","ShapeUtils","arc","random","_randomPointUnitArcCircle","_randomPointUnitCircle","_randomPointUnitSphere","BoxShape","shapeType","Box","seed","_randomPointInsideHalfUnitBox","CircleShape","Circle","emitFromEdge","arcDEG","deg","positionPoint","_tempPositionPoint","_randomPointInsideUnitArcCircle","ConeShape","Cone","emitType","angleDEG","coneRadius2","coneLength","sinA","positionX","positionY","directionPointE","positionPointE","dirCosA","dirSinA","_randomPointInsideUnitCircle","_tempDirectionPoint","HemisphereShape","Hemisphere","emitFromShell","_randomPointInsideUnitSphere","SphereShape","Sphere","SizeOverLifetime","_size","destSizeOverLifetime","destSize","StartFrame","destStartFrame","TextureSheetAnimation","startFrame","randomRow","rowIndex","cycles","enableUVChannels","tiles","_frame","_startFrame","destTextureSheetAnimation","destFrame","createByOverTime","createByRandomTwoOverTime","VelocityOverLifetime","space","_velocity","destVelocityOverLifetime","destVelocity","VertexShuriKenParticle","PARTICLE_DIRECTIONTIME","PARTICLE_POSITION0","PARTICLE_COLOR0","PARTICLE_TEXTURECOORDINATE0","PARTICLE_SHAPEPOSITIONSTARTLIFETIME","PARTICLE_CORNERTEXTURECOORDINATE0","PARTICLE_STARTCOLOR0","PARTICLE_ENDCOLOR0","PARTICLE_STARTSIZE","PARTICLE_STARTROTATION","PARTICLE_STARTSPEED","PARTICLE_RANDOM0","PARTICLE_RANDOM1","PARTICLE_SIMULATIONWORLDPOSTION","PARTICLE_SIMULATIONWORLDROTATION","PARTICLE_SIMULATIONUV","VertexShurikenParticleBillboard","cornerTextureCoordinate","positionStartLifeTime","startColor","startSize","startRotation0","startRotation1","startRotation2","ageAddScale","startSpeed","randoms0","randoms1","simulationWorldPostion","_cornerTextureCoordinate","_positionStartLifeTime","_startColor","_startSize","_startRotation0","_startRotation1","_startRotation2","_startLifeTime","_startSpeed","_randoms0","_randoms1","_simulationWorldPostion","vertexInstanceMeshDeclaration","_vertexInstanceMeshDeclaration","vertexInstanceParticleDeclaration","_vertexInstanceParticleDeclaration","billboardVertexArray","_billboardVertexArray","billboardIndexArray","_billboardIndexArray","Single","startLifeTime","random0","random1","VertexShurikenParticleMesh","Rand","_temp","Uint32Array","seeds","getUint","getSignedFloat","ShuriKenParticle3DShaderDeclaration","SHADERDEFINE_RENDERMODE_BILLBOARD","SHADERDEFINE_RENDERMODE_STRETCHEDBILLBOARD","SHADERDEFINE_RENDERMODE_HORIZONTALBILLBOARD","SHADERDEFINE_RENDERMODE_VERTICALBILLBOARD","SHADERDEFINE_COLORKEYCOUNT_8","SHADERDEFINE_COLOROVERLIFETIME","SHADERDEFINE_RANDOMCOLOROVERLIFETIME","SHADERDEFINE_VELOCITYOVERLIFETIMECONSTANT","SHADERDEFINE_VELOCITYOVERLIFETIMECURVE","SHADERDEFINE_VELOCITYOVERLIFETIMERANDOMCONSTANT","SHADERDEFINE_VELOCITYOVERLIFETIMERANDOMCURVE","SHADERDEFINE_TEXTURESHEETANIMATIONCURVE","SHADERDEFINE_TEXTURESHEETANIMATIONRANDOMCURVE","SHADERDEFINE_ROTATIONOVERLIFETIME","SHADERDEFINE_ROTATIONOVERLIFETIMESEPERATE","SHADERDEFINE_ROTATIONOVERLIFETIMECONSTANT","SHADERDEFINE_ROTATIONOVERLIFETIMECURVE","SHADERDEFINE_ROTATIONOVERLIFETIMERANDOMCONSTANTS","SHADERDEFINE_ROTATIONOVERLIFETIMERANDOMCURVES","SHADERDEFINE_SIZEOVERLIFETIMECURVE","SHADERDEFINE_SIZEOVERLIFETIMECURVESEPERATE","SHADERDEFINE_SIZEOVERLIFETIMERANDOMCURVES","SHADERDEFINE_SIZEOVERLIFETIMERANDOMCURVESSEPERATE","SHADERDEFINE_RENDERMODE_MESH","SHADERDEFINE_SHAPE","WORLDPOSITION","WORLDROTATION","POSITIONSCALE","SIZESCALE","SCALINGMODE","GRAVITY","THREEDSTARTROTATION","STRETCHEDBILLBOARDLENGTHSCALE","STRETCHEDBILLBOARDSPEEDSCALE","SIMULATIONSPACE","CURRENTTIME","DRAG","VOLVELOCITYCONST","VOLVELOCITYGRADIENTX","VOLVELOCITYGRADIENTY","VOLVELOCITYGRADIENTZ","VOLVELOCITYCONSTMAX","VOLVELOCITYGRADIENTXMAX","VOLVELOCITYGRADIENTYMAX","VOLVELOCITYGRADIENTZMAX","VOLSPACETYPE","COLOROVERLIFEGRADIENTALPHAS","COLOROVERLIFEGRADIENTCOLORS","COLOROVERLIFEGRADIENTRANGES","MAXCOLOROVERLIFEGRADIENTALPHAS","MAXCOLOROVERLIFEGRADIENTCOLORS","MAXCOLOROVERLIFEGRADIENTRANGES","SOLSIZEGRADIENT","SOLSIZEGRADIENTX","SOLSIZEGRADIENTY","SOLSizeGradientZ","SOLSizeGradientMax","SOLSIZEGRADIENTXMAX","SOLSIZEGRADIENTYMAX","SOLSizeGradientZMAX","ROLANGULARVELOCITYCONST","ROLANGULARVELOCITYCONSTSEPRARATE","ROLANGULARVELOCITYGRADIENT","ROLANGULARVELOCITYGRADIENTX","ROLANGULARVELOCITYGRADIENTY","ROLANGULARVELOCITYGRADIENTZ","ROLANGULARVELOCITYCONSTMAX","ROLANGULARVELOCITYCONSTMAXSEPRARATE","ROLANGULARVELOCITYGRADIENTMAX","ROLANGULARVELOCITYGRADIENTXMAX","ROLANGULARVELOCITYGRADIENTYMAX","ROLANGULARVELOCITYGRADIENTZMAX","ROLANGULARVELOCITYGRADIENTWMAX","TEXTURESHEETANIMATIONCYCLES","TEXTURESHEETANIMATIONSUBUVLENGTH","TEXTURESHEETANIMATIONGRADIENTUVS","TEXTURESHEETANIMATIONGRADIENTMAXUVS","ShurikenParticleData","startLifeTimeGradient","emissionTime","lastKey","age","MathUtil","lerp","rotatonE","randomizeRotationDirection","randDic","rotaton","particleSystem","particleRender","autoRandomSeed","_rand","_randomSeeds","startColorType","constantStartColor","startColorConstant","startColorConstantMin","startColorConstantMax","colorOverLifetime","colorRandom","minConstantColor","maxConstantColor","particleSize","startSizeType","threeDStartSize","startSizeConstantSeparate","startSizeConstant","startSizeConstantMinSeparate","startSizeConstantMaxSeparate","startSizeConstantMin","startSizeConstantMax","sizeOverLifetime","randomSize","startRotationType","threeDStartRotation","startRotationConstantSeparate","randomRotationE","_randomInvertRoationArray","startRotation","_randomInvertRoation","startRotationConstant","startRotationConstantMinSeparate","startRotationConstantMaxSeparate","lerpRoationE","startRotationConstantMin","startRotationConstantMax","startLifetimeType","startLifetimeConstant","_getStartLifetimeFromGradient","startLifetimeConstantMin","startLifetimeConstantMax","startLifeTimeGradientMin","startLifeTimeGradientMax","textureSheetAnimation","startFrameCount","title","titleX","titleY","subU","subV","startRow","startCol","startUVInfo","ShurikenParticleSystem","meshTopology","_gravityOffset","_customBounds","_useCustomBounds","_ownerRender","_floatCountPerVertex","_startLifeTimeIndex","_timeIndex","_simulationUV_Index","_simulateUpdate","_firstActiveElement","_firstNewElement","_firstFreeElement","_firstRetiredElement","_drawCounter","_bufferMaxParticles","_emission","_shape","_isEmitting","_isPlaying","_isPaused","_playStartDelay","_frameRateTime","_emissionTime","_totalDelayTime","_emissionDistance","_emissionLastPosition","_burstsIndex","_velocityOverLifetime","_colorOverLifetime","_sizeOverLifetime","_rotationOverLifetime","_textureSheetAnimation","_startLifetimeType","_startLifetimeConstant","_startLifeTimeGradient","_startLifetimeConstantMin","_startLifetimeConstantMax","_startLifeTimeGradientMin","_startLifeTimeGradientMax","_maxStartLifetime","_uvLength","_vertexStride","_indexStride","_updateMask","_currentTime","_startUpdateLoopCount","looping","prewarm","startDelayType","startDelay","startDelayMin","startDelayMax","startSpeedType","startSpeedConstant","startSpeedConstantMin","startSpeedConstantMax","dragType","dragConstant","dragSpeedConstantMin","dragSpeedConstantMax","gravityModifier","simulationSpace","simulationSpeed","scaleMode","playOnAwake","randomSeed","isPerformanceMode","_RANDOMOFFSET","maxParticles","newMaxParticles","_initBufferDatas","_updateParticlesSimulationRestart","emission","aliveParticleCount","isAlive","isEmitting","isPaused","velocityOverLifetime","shaDat","velocityType","ranges","colorKey","alphaKey","minGradientColor","maxGradientColor","minRanges","maxRanges","sizeSeparate","sizeType","rotationSeparate","rotationType","frameOverTime","textureAniType","_uvLengthE","_getVertexBuffer","_getIndexBuffer","_generateBounds","speedOrigan","maxSizeScale","zDirectionSpeed","fDirectionSpeed","zEmisionOffsetXYZ","fEmisionOffsetXYZ","hemiShpere","cone","sinAngle","tanAngle","rPLCT","circle","meshSize","halfKSqrtOf2","meshBounds","endSizeOffset","offsetSize","speedZOffset","speedFOffset","velocitySpeedOffset","curveX","curveY","curveZ","gravityOffset","speedZOffsetY","speedFOffsetY","customBounds","_simulationSupported","_updateEmission","elapsedTime","_maxElapsedTime","_updateParticles","_retireActiveParticles","_freeRetiredParticles","_advanceTime","_advanceDistance","delayTime","timeIndex","_burst","fromTime","toTime","totalEmitCount","bursts","emitCount","burstTime","emitTime","lastEmissionTime","emit","stop","minEmissionTime","offsetDistance","rateOverDistance","memorySize","_byteLength","_addMemory","indexOffset","perPartOffset","vbMemorySize","getVertexElementByUsage","_vertexCount","totalVertexCount","lastVBVertexCount","indexDatas","indexValueOffset","firstVertex","secondVertex","_tempPosition","_tempDirection","addParticle","nextFreeParticle","randomVelocityX","randomVelocityY","randomVelocityZ","randomColor","randomRotation","randomTextureAnimation","needRandomVelocity","needRandomColor","needRandomSize","needRandomRotation","needRandomTextureAnimation","meshVertices","meshVertexStride","meshPosOffset","meshCorOffset","meshUVOffset","meshVertexIndex","startIndex","startU","startV","meshVB","getFloat32Data","meshVertexDeclaration","colorElement","uvElement","vertexOffset","meshOffset","addNewParticlesToVertexBuffer","byteStride","play","pause","simulate","restart","ShurikenParticleInstanceSystem","_instanceParticleVertexBuffer","_instanceVertex","_initMeshVertex","vertex","meshVertexBuffer","meshColorOffset","perParticleDataCount","positionOffset","colorOffset","uvOffset","meshDeclaration","particleDeclaration","_meshIndexCount","_floatCountPerParticleData","meshVertexCount","vbSize","meshVertex","particleVbSize","billboardDeclaration","indexArray","meshVBSize","firstActive","activeStart","_meshFloatCountPreVertex","ShurikenParticleMaterial","SHADERDEFINE_TINTCOLOR","DIFFUSETEXTURE","tilingOffsetX","_MainTex_STX","tilingOffsetY","_MainTex_STY","tilingOffsetZ","_MainTex_STZ","tilingOffsetW","_MainTex_STW","_TintColor","_TintColorR","_TintColorG","_TintColorB","_TintColorA","_MainTex_ST","tilOff","colorR","colorG","colorB","colorA","ShurikenParticleRenderer","_finalGravity","_dragConstant","stretchedBillboardCameraSpeedScale","stretchedBillboardSpeedScale","stretchedBillboardLengthScale","_particleSystem","_renderMode","parSys","particleRenderNode","enableParticle","transfrom","sv","parRender","ShuriKenParticle3D","particleRenderer","_parseModule","module","moduleData","bases","vector2s","vec2","vec2Data","vector3s","vec3","vec3Data","vector4s","vec4","vec4Data","gradientDataNumbers","gradientNumber","gradientNumberData","valueData","resources","Texture","bitmap","burstsData","brust","main","velocityOverLifetimeData","velocityData","constantData","_initParticleVelocity","constantMinData","constantMaxData","colorOverLifetimeData","maxKeyCount","constColorData","_initParticleColor","minConstColorData","maxConstColorData","sizeOverLifetimeData","_initParticleSize","constantMinSeparateData","constantMaxSeparateData","rotationOverLifetimeData","angularVelocityData","conSep","_initParticleRotation","minSep","maxSep","textureSheetAnimationData","_initParticleFrame","overTimeMin","overTimeMax","startFrameData","_parseOld","anglelToRad","materialData","_initStartLife","startLifetimeGradient","startLifetimeGradientMin","startLifetimeGradientMax","startSizeConstantSeparateArray","startSizeConstantSeparateElement","startSizeConstantMinSeparateArray","startSizeConstantMinSeparateElement","startSizeConstantMaxSeparateArray","startSizeConstantMaxSeparateElement","startRotationConstantSeparateArray","startRotationConstantSeparateElement","startRotationConstantMinSeparateArray","startRotationConstantMinSeparateElement","startRotationConstantMaxSeparateArray","startRotationConstantMaxSeparateElement","startColorConstantArray","startColorConstantElement","startColorConstantMinArray","startColorConstantMinElement","startColorConstantMaxArray","startColorConstantMaxElement","emissionData","sphereShape","sphereRadius","sphereEmitFromShell","sphereRandomDirection","hemiSphereShape","hemiSphereRadius","hemiSphereEmitFromShell","hemiSphereRandomDirection","coneShape","coneAngle","coneRadius","coneEmitType","coneRandomDirection","boxShape","boxX","boxY","boxZ","boxRandomDirection","circleShape","circleRadius","circleArc","circleEmitFromEdge","circleRandomDirection","tempShape","tilesData","gradientColorData","maxkeyCount","alphasData","alphas","alphaData","rgbsData","rgbs","rgbData","rgbValue","overTimeFramesData","overTimeFrame","framesData","frames","gradientData","startLifetimesData","startLifetimes","velocitysData","velocitys","gradientSizeData","sizesData","sizes","angularVelocitysData","angularVelocitys","SkinnedMeshSprite3DShaderDeclaration","SkinRenderElement","setSkinData","skinnedData","createSkinRenderElement","SkinnedMeshRenderer","_bones","_inverseBindPosesBufferForNative","_skinnedMatrixCachesBufferForNative","_bonesTransformForNative","_localBounds","SHADERDEFINE_BONE","localBounds","rootBone","_cacheRootBone","_computeSkinnedData","_cacheMesh","bindPoses","_inverseBindPoses","pathMarks","_skinnedMatrixCaches","subMeshBoneIndices","_boneIndicesList","subData","_skinnedData","boneIndices","_computeSubSkinnedData","matrixCaches","_skinnedDataLoopMarks","preData","batchIndex","srcIndex","batchBoneIndex","dstIndex","bone","_computeSkinnedDataForNative","Int32Array","computeSubSkinnedDataForNative","enableSkin","_onSkinMeshChange","subBoneIndices","skinRenderNode","DEFAULT","cloneHierachFun","rootNode","rootCheckNode","destNode","rootparent","nodeArray","checkNode","getCommomParent","_getHierarchyPath","pathcheck","destParent","_getParentNodeByHierarchyPath","_getNodeByHierarchyPath","destBone","ceckNode","lbb","SimpleSkinnedMeshRenderer","_simpleAnimatorParams","_simpleAnimatorOffset","SHADERDEFINE_SIMPLEBONE","simpleAnimatorTexture","_simpleAnimatorTexture","_simpleAnimatorTextureSize","SIMPLE_SIMPLEANIMATORTEXTURE","SIMPLE_SIMPLEANIMATORTEXTURESIZE","simpleAnimatorOffset","_computeAnimatorParamsData","round","_bonesNums","oriMat","SIMPLE_SIMPLEANIMATORPARAMS","SimpleSkinnedMeshSprite3D","simpleSkinnedMeshRenderer","rootBoneData","bonesData","bonesNums","animatorTexture","animatortexture","TEXTURE2D","_tempArray0","SkinnedMeshSprite3D","BONES","skinnedMeshRenderer","TrailTextureMode","Stretch","Tile","VertexTrail","vertexDeclaration1","_vertexDeclaration1","vertexDeclaration2","_vertexDeclaration2","TRAIL_POSITION0","TRAIL_OFFSETVECTOR","TRAIL_TIME0","TRAIL_TEXTURECOORDINATE0Y","TRAIL_TEXTURECOORDINATE0X","TRAIL_COLOR","TrailGeometry","_floatCountPerVertices1","_floatCountPerVertices2","_increaseSegementCount","_activeIndex","_endIndex","_needAddFirstVertex","_isTempEndVertex","_vertices1","_vertices2","_lastFixedVertexPosition","tmpColor","_disappearBoundsMode","_segementCount","_resizeData","segementCount","_subBirthTime","_subDistance","vertexBuffers","vertexbuffer1Size","vertexbuffer2Size","_vertexBuffer1","_vertexBuffer2","_resetData","oldVertices1","oldVertices2","oldSubDistance","oldSubBirthTime","_updateTrail","lastPosition","equals","_addTrailByFirstPosition","_addTrailByNextPosition","_curtime","delVector3","pointAtoBVector3","alignment","View","cameraMatrix","TransformZ","widthMultiplier","tempEndIndex","delLength","_updateVerticesByPositionData","minVertexDistance","_updateVerticesByPosition","_totalLength","curtime","down","floatCount","delDistance","_updateVertexBufferUV","sprite3dPosition","curLength","colorGradient","startAlphaIndex","startColorIndex","totalLength","stride","uvX","textureMode","posOffset","side","_updateDisappear","nextIndex","fixedPos","ALIGNMENT_VIEW","ALIGNMENT_TRANSFORM_Z","TrailMaterial","TrailFilter","_textureMode","_lastPosition","_initDefaultData","CURTIME","LIFETIME","WIDTHCURVE","WIDTHCURVEKEYLENGTH","spriteParms","_minVertexDistance","_widthMultiplier","widthCurve","_widthCurve","widthCurveFloatArray","_colorGradient","_trialGeometry","curPos","widthKeyFrames","widthKeyFrame1","widthKeyFrame2","WHITE","TrailRenderer","_trailFilter","onUpdate","widthCurveData","TrailSprite3D","_geometryFilter","trailFilter","trailRenderer","trailkeyframe","colorGradientData","colorKeys","alphaKeys","srcSprite","InstanceRenderElement","_InvertFront","_instanceBatchElementList","_isUpdataData","_invertFrontFace","elemet","_isInPool","InvertFront","createInstanceRenderElement","oriRendertype","updateInstanceData","_instanceBufferStateType","Mesh","MESH_INSTANCEBUFFER_TYPE_SIMPLEANIMATOR","getUpdateData","addUpdateBuffer","_instanceWorldVertexBuffer","insBatches","drawCount","simpleAnimatorData","simpleAnimatorParams","_instanceSimpleAniVertexBuffer","MESH_INSTANCEBUFFER_TYPE_NORMAL","SubMesh","UInt32","Element_Index_Uint32","_subIndexBufferStart","_subIndexBufferCount","_indexCount","_setIndexRange","indexStart","canRead","_indices","_uploadVerticesData","byteCount","skinnedDatas","_indexFormat","getIndices","_isReadable","setIndices","skinnedMatrixCache","isReadable","_minVerticesUpdate","_maxVerticesUpdate","_needUpdateBounds","physics3D","_nativeTempVector30","_nativeTempVector31","_nativeTempVector32","MESH","inverseAbsoluteBindPoses","_getPositionElement","vertexElement","_elementFormat","_getVerticeElementData","uint8Vertices","getUint8Data","floatVertices","uint8VerStr","floatVerStr","uint8EleOffset","floatEleOffset","MESH_BLENDWEIGHT0","MESH_BLENDINDICES0","_setVerticeElementData","float8VerStr","cor","MAX_SAFE_INTEGER","_btTriangleMesh","btStridingMeshInterface_destroy","instanceWorldMatrixData","instanceSimpleAnimatorData","_setCPUMemory","_setGPUMemory","_boneNames","_setSubMeshes","subMeshes","_indexInMesh","_setBuffer","instanceBufferStateType","instanceBuffer3D","instanceSimpleAnimatorBuffer","instanceSimpleAnimatorDeclaration","triangleMesh","btTriangleMesh_create","nativePositio0","nativePositio1","nativePositio2","position0","position1","position2","positionElement","verticesData","p0Index","p1Index","p2Index","btTriangleMesh_addTriangle","getPositions","positions","setPositions","getColors","colors","setColors","getUVs","uvs","setUVs","getNormals","normals","setNormals","getTangents","tangents","setTangents","getBoneWeights","boneWeights","setBoneWeights","getBoneIndices","setBoneIndices","markAsUnreadbale","getVertices","setVertices","calculateBounds","ofset","pX","pY","pZ","destMesh","destVB","bufferUsage","ib","destIB","cpuMemory","gpuMemory","boneNames","destBoneNames","inverseBindPoses","destInverseBindPoses","cacheLength","skinnedCache","subIndexBufferStart","subIndexBufferCount","boneIndicesList","destSubmesh","VolumetricGI","probeCounts","probeStep","_params","irradiance","_irradiance","viewBias","irradianceTexel","distanceTexel","AreaLightCom","Area","_spread","_maxBounces","_areaShape","rectangle","_power","power","spread","maxBounces","tempVec","LODInfo","mincullRate","_mincullRate","_renders","_cachSprite3D","_updateRecaculateFlag","_lodIndex","addNode","ren","components","numChildren","removeNode","RenderBitFlag_CullFlag","removeAllRender","LODGroup","_needcaculateBounds","_lods","_visialIndex","_lodPosition","lods","_lodCount","nowRate","_nowRate","recalculateBounds","_setLODinvisible","_applyVisibleRate","rate","_setLODvisible","lod","onDestroy","renderarray","lodGroup","lodArray","cloneLOD","firstBounds","onPreRender","checkCamera","maxYDistance","cameraFrustum","rateYDistance","PixelLineData","startPosition","endPosition","endColor","PixelLineVertex","PixelLineFilter","Lines","_floatCountPerVertices","_minUpdate","_maxUpdate","_floatBound","_calculateBound","_maxLineCount","_lineCount","pointCount","_tempVector0","_tempVector1","_resizeLineData","lastVertices","_updateLineVertices","floatBound","_reCalculateBound","_removeLineData","rightPartVertices","startX","startY","startZ","endX","endY","endZ","_updateLineData","_updateLineDatas","_getLineData","PixelLineMaterial","COLOR","PixelLineRenderer","_isRenderActive","_isInRenders","_needUpdatelines","_lines","_pixelLineFilter","pixelLinesDatas","addLines","_changeRenderObjects","lineFilter","renderObjects","_pixelLinesDataChange","keyN","setLine","lines","addCount","removeLine","pixeldata","getLine","pixelLineDatas","linedata","AnimatorPlayState","_currentState","currentState","curTransition","normalizedTime","_normalizedTime","animatorState","_resetPlayState","clipDuration","_finish","_playEventIndex","_startPlayTime","_elapsedTime","_lastIsFront","playTime","_normalizedPlayTime","AnimatorControllerLayer","_playType","_crossDuration","_crossMark","_crossNodesOwnersCount","_crossNodesOwners","_crossNodesOwnersIndicesMap","_srcCrossClipNodeIndices","_destCrossClipNodeIndices","_states","_playStateInfo","_crossPlayStateInfo","blendingMode","BLENDINGMODE_OVERRIDE","playOnWake","defaultState","_defaultState","_avatarMask","defaultStateName","getAnimatorState","_defaultStateNameCatch","states","removed","removeState","newAdded","addState","_removeClip","clipStateInfos","_clip","clipStateInfo","_animator","frameNodes","nodeOwners","_nodeOwners","_removeKeyframeNodeOwner","_getReferenceCount","_clearReference","getCurrentPlayState","stateName","_getOwnersByClip","BLENDINGMODE_ADDTIVE","AnimatorResource","propertyKey","ClassUtils","getClass","AnimatorState","_currentFrameIndices","_isLooping","_realtimeDatas","_scripts","_transitions","_soloTransitions","speed","clipStart","clipEnd","cycleOffset","realtimeDatas","clipNodes","Int16Array","_resetFrameIndices","transitions","soloTransitions","_eventStart","animator","layerIndex","EVENT_OnStateEnter","setPlayScriptInfo","onStateEnter","_eventExit","EVENT_OnStateExit","onStateExit","_eventStateUpdate","EVENT_OnStateUpdate","onStateUpdate","_eventtransition","normalizeTime","paramsMap","soloNums","check","transNums","addScript","script","getScript","getScripts","coms","AvatarMask","_avatarPathMap","setTransformActive","getAllTranfromPath","Animator","_keyframeNodeOwners","_updateMode","AnimatorUpdateMode","_lowUpdateDelty","_animatorParams","_linkAvatarSpritesData","_linkAvatarSprites","_renderableSprites","cullingMode","CULLINGMODE_CULLCOMPLETELY","_finishSleep","_controllerLayers","_speed","_keyframeNodeOwnerMap","controller","val","_controller","updateTo","updateMode","lowUpdateDelty","controllerLayerCount","animatorParams","sleep","_addKeyframeNodeOwner","clipOwners","nodeIndex","keyframeNodeOwner","propertys","frameNodesCount","ownPat","getChildByName","oriProperty","getAnimatorResource","_updatePlayer","playState","lastElapsedTime","elapsedPlaybackTime","_lastElapsedTime","_applyTransition","layerindex","transition","crossFade","destState","transduration","transstartoffset","_updateStateFinish","_eventScript","events","eventIndex","endTime","front","scripts","_isScript","fun","_updateEventScript","stateInfo","playStateInfo","HAS_SCRIPT","preEventIndex","newEventIndex","_updateClipDatas","animatorMask","curPlayTime","currentFrameIndices","_applyFloat","nodeOwner","additive","isFirstLayer","defValue","_applyVec2","oriValue","_applyVec3","_applyVec4","_applyColor","_applyPositionAndRotationEuler","oriX","oriY","oriZ","defX","defY","defZ","_applyRotation","clipRot","quaternionWeight","defaultRot","_applyScale","clipSca","scaleBlend","defaultSca","_applyCrossData","srcValue","desValue","crossWeight","pro","proPat","crossValue","lastpro","localPos","srcX","srcY","srcZ","localRot","localSca","localEuler","_setClipDatasToNode","controllerLayer","_setCrossClipDatasToNode","srcState","ownerCount","destRealtimeDatas","destDataIndices","destNodeOwners","srcRealtimeDatas","srcDataIndices","srcNodeOwners","destIndex","_setFixedCrossClipDatasToNode","_revertDefaultKeyframeNodes","locPos","def","locRot","defQua","locSca","locEul","tempColor","_tempColor","onAfterDeserialize","arr","controllerLayers","addControllerLayer","defaultClip","getDefaultState","_applyUpdateMode","LowFrame","UnScaleTime","_handleSpriteOwnersBySprite","isLink","ownersNodes","layersData","layers","layerData","animatorLayer","blendingModeData","clipPath","motion","getControllerLayer","layerMaskData","avaMask","bips","cullingModeData","enableAnimatorUpdate","crossPlayStateInfo","finish","crossState","_crossPlayState","crossClip","crossDuratuion","startPlayTime","crossClipDuration","crossScale","crossSpeed","needUpdateFinishcurrentState","controllLayer","animatorStates","cloneLayer","controllderLayer","layerInex","NEGATIVE_INFINITY","curPlayState","calclipduration","transitionDuration","destAnimatorState","playType","crossNodeOwners","crossNodeOwnerIndicesMap","srcAnimatorState","destCrossClipNodeIndices","destClip","destNodes","destNodesMap","crossCount","scrCrossClipNodeIndices","srcClip","srcNodes","srcNodesMap","crossMark","srcNode","srcNodeOwner","srcFullPath","destNodeOwner","destFullPath","setParamsTrigger","AnimatorStateCondition","conditionNameToID","setParamsNumber","setParamsBool","getParamsvalue","getCurrentAnimatorPlayState","CULLINGMODE_ALWAYSANIMATE","PostProcessRenderContext","indirectTarget","destination","compositeShaderData","deferredReleaseTextures","createRTByContextReleaseTexture","mipmap","multiSamples","sRGB","_generateMipmap","_gammaSpace","PostProcessEffect","_active","_singleton","singleton","getCameraDepthTextureModeFlag","effectInit","postprocess","release","ToneMappingType","BlitVS","ColorGradEffect","_needBuildLUT","_lutBuilderMat","_lutSize","_enableSplitTone","_splitShadow","_splitBalance","_splithighlights","_u_SplitShadow","_enableSMH","_shadows","_midtones","_highlights","_limits","_enableLiftGammaGain","_lift","_gamma","_gain","_enableBalance","_balance","_tint","_temperature","_enableColorAdjust","_postExposure","_contrast","_colorFilter","_HueShift","_saturation","_HueSatCon","default_balance","default_splitShadow","default_splithighlights","default_shadow","default_midtones","default_highlight","default_limint","default_lift","default_gamma","default_gain","default_ColorFilter","default_HueSatCon","_toneMapping","_blitlutParams","_lutShaderData","lutSize","_lutCommond","__initDefine__","attributeMap","a_PositionTexcoord","u_OffsetScale","u_MainTex","u_MainTex_TexelSize","addSubShader","addShaderPass","renderState","DEPTHTEST_ALWAYS","SHADERDEFINE_ACES","SHADERDEFINE_CUSTOMLUT","SHADERVALUE_LUT","SHADERVALUE_LUTPARAMS","SHADERVALUE_CUSTOMLUT","SHADERVALUE_CUSTOMLUTPARAMS","toneMapping","enableSplitTone","splitShadow","splithighlights","equal","splitBalance","enableSMH","shadows","midtones","highlights","shadowLimitStart","shadowLimitEnd","highLightLimitStart","highLightLimitEnd","enableLiftGammaGain","lift","gamma","gain","_StandardIlluminantY","_CIExyToLMS","X","Z","L","M","S","_ColorBalanceToLMSCoeffs","temperature","tint","w1","enableBalance","enableColorAdjust","postExposure","contrast","colorFilter","HueShift","saturation","_lutTex","_buildLUT","lutHeight","lutWidth","lutParams","ACES","whiteTexture","_LUTShader","_enableColorGrad","_ColorGradEffect","PostProcess","_compositeShader","_compositeShaderData","_effects","_enable","_depthtextureFlag","SHADERDEFINE_BLOOM_LOW","SHADERDEFINE_BLOOM","SHADERDEFINE_FINALPASS","SHADERVALUE_MAINTEX","SHADERVALUE_BLOOMTEX","SHADERVALUE_AUTOEXPOSURETEX","SHADERVALUE_BLOOM_DIRTTEX","SHADERVALUE_BLOOMTEX_TEXELSIZE","SHADERVALUE_BLOOM_DIRTTILEOFFSET","SHADERVALUE_BLOOM_SETTINGS","SHADERVALUE_BLOOM_COLOR","recaculateCameraFlag","effects","oriContext","clearEffect","addEffect","_init","cameraTarget","screenTexture","Indirect","clearDefine","offScreenTex","tempRenderTextures","effect","getEffect","classReg","removeEffect","BloomVS","BloomEffect","_linearColor","_bloomTextureTexelSize","_shaderThreshold","_shaderParams","_pyramid","_threshold","_softKnee","_diffusion","_anamorphicRatio","_dirtIntensity","_shaderSetting","_dirtTileOffset","_fastMode","_dirtTexture","threshold","softKnee","clamp","diffusion","anamorphicRatio","u_AutoExposureTex","u_Threshold","u_Params","u_BloomTex","u_SampleScale","shaderPass","CompositeInit","u_Bloom_DirtTex","u_BloomTex_TexelSize","u_Bloom_DirtTileOffset","u_Bloom_Settings","u_Bloom_Color","SHADERVALUE_SAMPLESCALE","SHADERVALUE_THRESHOLD","SHADERVALUE_PARAMS","_clamp","fastMode","dirtTexture","dirtIntensity","MAXPYRAMIDSIZE","logs","ratio","rh","tw","th","logsInt","iterations","sampleScale","lthresh","knee","lclamp","qualityOffset","lastDownTexture","downIndex","upIndex","SUBSHADER_PREFILTER13","SUBSHADER_DOWNSAMPLE13","mipDownTexture","mipUpTexture","lastUpTexture","SUBSHADER_UPSAMPLETENT","linearColor","shaderSettings","usedirtTexture","dirtRatio","screenRatio","dirtTileOffset","SUBSHADER_PREFILTER4","SUBSHADER_DOWNSAMPLE4","SUBSHADER_UPSAMPLEBOX","FullScreenVert","GaussianDoF","COCPARAMS","_sourceSize","_dowmSampleScale","SOURCESIZE","ZBUFFERPARAMS","NORMALDEPTHTEXTURE","FULLCOCTEXTURE","DOWNSAMPLESCALE","BLURCOCTEXTURE","SHADERDEFINE_DEPTHNORMALTEXTURE","u_ZBufferParams","u_CoCParams","u_FullCoCTex","u_SourceSize","u_DownSampleScale","u_BlurCoCTex","cocSubShader","prefilterSubShader","blurHSubShader","blurVSubShader","compositeSubShader","farStart","cocParams","farEnd","maxRadius","_setupShaderValue","dataTexFormat","fullCoC","prefilterTex","blurHTex","blurVTex","finalTex","AOQUALITY","ScalableAO","_aoParams","_aoQuality","MEDIUM","AOParams","_aoBlurHorizontalShader","_aoComposition","aoQuality","BlurDelty","AOColor","aoTexture","SourceTex","SHADERDEFINE_AOHigh","SHADERDEFINE_AOMEDIUM","SHADERDEFINE_LOWEST","u_Delty","u_PlugTime","u_AOParams","u_BlurVector","u_AOColor","u_compositionAoTexture","BlitScreenVS","aoColor","LOWEST","DepthAndDepthNormals","textureFormat","blurTex","deltyVector","deltyHorizontal","AnimatorTransition","_conditions","_exitByTime","_exitTime","_transduration","_transstartoffset","_mute","mute","_destState","conditions","removeCondition","addCondition","exitByTime","exitTime","condition","con","checkState","AniStateConditionType","Trigger","AnimatorController","AnimatorControllerParse","clipsID","getLayers","lArr","acl","unshift","err","getState","currLayer","len","parms","AniParmType","Boolean","isNaN","createState","idCatch","defID","childStates","groupRet","isArray","uuid","substring","setExitTransition","exitRet","pExitRet","ats","sts","linArr","ato","addConditions","solo","setTransitions","pState","exitTransition","idk","parm","AnimatorStateBoolCondition","compareFlag","checkValue","AnimatorStateNumberCondition","numberValue","AnimatorStateTriggerCondition","BatchMark","batched","InstanceBatchManager","_instanceBatchOpaqueMarks","updateCountMark","_getData","cls","getInstanceBatchOpaquaMark","materialID","subMeshID","invertFace","reflectionprob","BatchRender","_lodInstanceRenderElement","_RenderBitFlag","RenderBitFlag_Batch","_batchList","checkLOD","_checkLOD","lodCullRateArray","_lodRateArray","_changeLOD","_cacheLod","concat","_lodsize","addList","reBatch","renderNums","_restorRenderNode","StaticInstanceBatchRender","_insBatchMarksNums","_insElementMarksArray","_instanceBatchminNums","_updateChangeElement","_batchManager","RenderBitFlag_InstanceBatch","_isRenderNodeAllCanInstanceBatch","_enableInstancing","_sumInstanceBatch","insBatchMarks","_batchOneElement","instanceelement","_createInstanceElement","indexof","_batchElement","_removeOneElement","_updateOneElement","batchMark","instanceRenderElement","renderNodes","StatiVertexMergeBatchRender","_addList","StaticBatchVolume","_customBatchs","_enableStaticInstanceBatch","_enableStaticVertexMergeBatch","_cacheRender","_enableCustomBatch","_getStaticInstanceBatchRender","_getStatiVertexMergeBatchRender","_instanceBatchRender","_vertexMergeBatchRender","enableStaticInstanceBatchRender","enableMergeBatchRender","enableCustomBatchRender","customBatchRenders","_destroyComponent","addComponentInstance","__addRenderNodeToBatch","__removeRenderNodeFromBatch","onStart","UI3DGeometry","_bound","_createBuffer","_positionArray","halfLong","_vertex","_resizeViewVertexData","viewMode","halfwidth","halfhight","tempV0","billboardTrans","_changeVertex","_resizeWorldVertexData","applyMat","v3","UI3D","_sizeChange","_view","_bindPropertyName","_hit","_uiPlane","_resolutionRate","_shellSprite","DISPLAYED_INSTAGE","ACTIVE_INHIERARCHY","_ui3DMat","_uisprite","removeChildren","_resizeRT","prefab","_prefab","resolutionRate","billboard","enableHit","_addRenderElement","_setMaterialTexture","_rendertexure2D","RenderTexture2D","_invertY","_updatePlane","posArray","_parseHit","WV","temp0","HV","Dir","PointinTriangle","normalizeHitWidth","normalizeHitHeight","cx","cy","InputManager","inst","getSpriteUnderPoint","getUITexture","drawToTexture","hitPoint","rayPlaneIntersection","_transByRotate","DEBUG","internalResources","registerLoader","task","AssetDb","getSubAssetURL","fetch","progress","createCallback","options","grayTexture","Utils","getBaseName","Promise","resolve","ext","ktxInfo","KTXTextureInfo","getKTXTextureInfo","dimension","TextureDimension","Cube","mipmapCount","setKTXData","obsoluteInst","byte","readUint8","mipCount","readUint16","wrapModev","mipSize","uint8Arrays","mipPixelLength","_getFormatByteCount","updateSubPixelsData","ltcBasePath","URL","getPath","urls","back","all","images","constructParams","_b","srgb","setImageData","obsolute","_idResourcesMap","MaterialParser","props","parseLegacy","defineNames","textures","getBaseTexture","uniName","vectorValue","basePath","tex2D","tex2DPath","propertyParams","jsonData","classType","clas","vectors","vector","renderStateData","_getRenderStateParams","srcBlend","dstBlend","BlendFactor","SourceColor","OneMinusSourceColor","DestinationColor","OneMinusDestinationColor","SourceAlpha","OneMinusSourceAlpha","DestinationAlpha","OneMinusDestinationAlpha","SourceAlphaSaturate","BlendEquationSeparate","ADD","SUBTRACT","REVERSE_SUBTRACT","Never","Less","Equal","Greater","NotEqual","GreaterEqual","Always","collectLinks","shaderName","shaderName_to_URL","shaderName_to_URL_async","shaderPath","load2","reset","LoadModelV04","readData","_readData","_readString","arrayBuffer","__getBuffer","vertexBufferCount","vbStart","vbLength","vbArrayBuffer","vbDatas","bufferAttribute","ibStart","ibLength","ibDatas","boneCount","bindPoseDataStart","bindPoseDataLength","bindPoseDatas","bindPoseFloatCount","bindPoseBuffer","_inverseBindPosesBuffer","ArrayBuffer","inverseGlobalBindPose","ibCount","boneDicofs","boneDicCount","boneIndexCount","MorphTarget","MorphTargetChannel","getTargetByIndex","addTarget","MorphTargetData","channels","addMorphChannel","initData","targetNum","maxTexSize","getParams","RenderParams","MAX_Texture_Size","morphStride","elementCount","vertexElementCount","texHeight","texelStride","Texture2DArray","targetStride","targetIndex","dataOffset","elementIndex","elementOffset","targetDataOffset","setPixlesData","newChannel","newTarget","LoadModelV05","vertexData","floatData","uint8Data","vertexFlag","subVertexFlags","subVertexCount","subOffset","verOffset","byteLength","morphVertexDecStr","targetName","readFloat32","bufferStart","readUint32","bufferLength","MeshReader","read","HierarchyParserV2","nodeData","outBatchSprites","childData","instanceID","interactMap","_createComponentInstance","componentsData","_createInteractInstance","interatMap","_parseInteractive","json","outBatchSprits","_createNodeByJson02","_createNodeByJson","test","innerUrls","addInnerUrl","url2","lightmapColorData","lightmapDirectionData","reflectionTextureData","skyboxMatData","parMeshPath","dataPath","TERRAINRES","clipPaths","HierarchyLoader","ParseJSON","str","parseStart","fstr","fi","cobj","currArr","pobj","numVal","toLowerCase","currStr","trim","formatVal","finCurrObj","charAt","cNext","cstr","finCurrStr","findIndex","pcobj","CGBlock","shaderBlock","shaderDataOBJ","ShaderParser","getShaderBlock","cgmap","getCGBlock","bindCG","sliceFlag","sliceIndex","slicedata","splitmap","compileToTree","replace","shaderObj","cgdata","datavalue","getMapKey","passArray","VS","FS","attributemap","indexofAttribute","dataArray","getShaderDataType","defaultmap","newUniformMap","entry","serializable","dataType","default","getDefaultData","block","cloneByArray","texcube","ShaderCompile","compileAsync","compiledObjs","enableInstancing","supportReflectionProbe","subshader","DefaultAttributeMap","_addShaderPass","pipeline","promises","loadAvatarMask","loadStates","_$uuid","getResURLByUUID","regClass","SubMeshInstanceBatch","instanceWorldMatrixBuffer","VertexPositionTerrain","textureCoord0","textureCoord1","_textureCoord0","_textureCoord1","TERRAIN_POSITION0","TERRAIN_NORMAL0","TERRAIN_TEXTURECOORDINATE0","TERRAIN_TEXTURECOORDINATE1","BulletInteractive","dbgline","drawLine","ex","ey","ez","dbgLine","clearLine","jslog","td","TextDecoder","jsstr","rigidBodyID","worldTransPointer","setWorldTransform","PrimitiveMesh","long","_createMesh","vertexFloatStride","hcHeight","posX","posY","posZ","ic","verticeCount","rotateRadius","curAngle","downV3","upPoint","downPoint","q4","rotateAxis","rv","acos","ri","bv","bi","tv","ti","stacksLong","slicesWidth","indiceIndex","BlitFS","BlitScreenShaderInit","blitPass","statefirst","blitState","transparentShader","transparentSubShader","blitPassTrans","lutBuilderInit","u_LutParams","DepthVS","DepthFS","UnlitShaderInit","UnlitBlock","u_AlbedoColor","u_TilingOffset","u_AlbedoTexture","u_AlphaTestValue","BlinnPhongShaderInit","u_DiffuseColor","u_DiffuseTexture","u_AlbedoIntensity","u_MaterialSpecular","u_SpecularTexture","u_Shininess","u_NormalTexture","TrailShaderInit","a_Position","a_OffsetVector","a_Texcoord0X","a_Texcoord0Y","a_BirthTime","a_Color","u_MainTexture","u_MainColor","PBRStandardShaderInit","u_NormalScale","u_Metallic","u_Smoothness","u_OcclusionStrength","u_EmissionColor","u_EmissionIntensity","u_OcclusionTexture","u_EmissionTexture","u_MetallicGlossTexture","u_AnisotropyStrength","u_AnisotropyTexture","u_AnisotropyRotation","u_ClearCoatFactor","u_ClearCoatTexture","u_ClearCoatRoughness","u_ClearCoatRoughnessTexture","u_ClearCoatNormalTexture","u_DetailAlbedoTexture","u_DetailNormalTexture","u_DetailNormalScale","u_DetailTillingOffset","SkyBoxShaderInit","u_TintColor","u_Exposure","u_Rotation","u_CubeTexture","CullMode","Back","ParticleShuriKenShaderInit","a_CornerTextureCoordinate","a_MeshPosition","a_MeshColor","a_MeshTextureCoordinate","a_ShapePositionStartLifeTime","a_DirectionTime","a_StartColor","a_StartSize","a_StartRotation0","a_StartSpeed","a_Random0","a_Random1","a_SimulationWorldPostion","a_SimulationWorldRotation","a_SimulationUV","u_Tintcolor","u_texture","SkyProceduralShaderInit","u_SunSize","u_SunSizeConvergence","u_AtmosphereThickness","u_SkyTint","u_GroundTint","SkyPanoramicShaderInit","u_Texture","ACESShaderLib","ShaderInit3D","init","IndexBuffer3D","IndexBuffer","indexType","BufferTargetType","ELEMENT_ARRAY_BUFFER","_indexType","_canRead","_indexTypeByteCount","_setIndexData","_buffer","indexTypeByteCount","bufferOffset","dataStartIndex","dataCount","maxLength","VertexBuffer3D","VertexBuffer","ARRAY_BUFFER","_float32Reader","_glBuffer","setDataLength","BoundsImpl","_updateFlag","_extent","_boundBox","outCen","outExt","ownMax","ownMin","calMax","calMin","TEMP_VECTOR3_MAX0","tempV1","TEMP_VECTOR3_MAX1","thisExtends","boundExtends","destBounds","BaseRenderNode","RenderElementBatch","_instanceBatchManager","_recoverList","recoverData","elementArray","enableStaticBatch","enableDynamicBatch","insManager","invertFrontFace","insBatchIndex","insOriElement","instanceelements","BaseRenderQueue","isTransparent","_batch","sortPass","_sortPass","_batchQueue","_sort","CameraCullInfo","RenderElementOBJ","_shaderInstances","forceInvertFace","cameraUpdateMark","switchShader","switchUpdateMark","_uploadMark","uploadScene","_uploadScene","uploadUniforms","_sceneUniformParamsMap","uploadSprite3D","_uploadRender","_spriteUniformParamsMap","uploadCamera","_uploadCameraShaderValue","_cameraUniformParamsMap","uploadMaterial","_uploadMaterial","_materialUniformParamsMap","uploadRenderStateBlendDepth","uploadRenderStateFrontFace","drawGeometry","InstanceRenderElementOBJ","_vertexBuffer3D","_updateData","_updateDataNum","updateNums","QuickSort","_quickSort","_partitionRenderObject","leftIndex","pivot","_compare","RenderContext3DOBJ","ShaderData","FastSinglelist","RenderGeometryElementOBJ","drawParams","_glindexFormat","getIndexType","_glmode","getMeshTopology","SceneRenderManagerOBJ","_motionRenders","ShadowCullInfo","SkinRenderElementOBJ","subSkinnedDatas","uploadCustomUniform","drawElements","RenderOBJCreateUtil","globalBlockMap","queue","createSortPass","drayType","createShaderInstance","vs","ps","ShaderInstance","createRenderStateComand","RenderStateCommand","createRenderState","createUniformBufferObject","glPointer","isSingle","comMap","CommandUniformMap","NativeBaseRenderNode","_geometryBounds","conchRenderNode","NativeBaseRenderQueue","conchRenderQueue","render_element","UploadMemoryManager","syncRenderMemory","NativeBounds","nativeMemory","NativeMemory","MemoryBlock_size","float32Array","float64Array","conchBounds","NativeCameraCullInfo","conchCameraCullInfo","setPosition","_useOcclusionCulling","_staticMask","serialize","setPlane","setBoundFrustum","NativeCommandUniformMap","hasPtrID","getMap","_idata","NativeCullPassBase","conchCullPass","_tempRenderList","customRenderList","_customCullList","NativeIndexBuffer3D","_conchIndexBuffer3D","conchIndexBuffer3D","setGLBuffer","RenderElementType","NativeShaderDataType","UniformParamsMapType","NativeRenderElementOBJ","materialShaderData","renderShaderData","conchRenderElement","Base","NativeInstanceRenderElementOBJ","_updateNums","_conchVertexBuffer3D","Instance","NativeRenderContext3DOBJ","_scissor","conchRenderContext3D","_destTarget","_renderTarget","_confifShaderData","_globalShaderData","_sceneShaderData","_cameraShaderData","NativeRenderGeometryElementOBJ","conchRenderGeometryElement","_nativeVertexArrayObject","NativeRenderState","conchRenderState","srcBlendRGB","dstBlendRGB","srcBlendAlpha","dstBlendAlpha","setStencilOp","setNull","NativeSceneRenderManager","_customUpdateList","conchSceneCullManger","NativeShaderData","ownerResource","inUploadList","payload32bitNum","_initData","conchShaderData","nativeObjID","nativeID","MemoryDataType","updateMap","updataSizeMap","getUploadMemoryLength","uploadDataTOShareMemory","memoryBlock","strideInByte","_data","array","int32Array","strideFloat","clearUpload","compressNumber","Number32","compressVector2","compressVector3","compressVector4","compressMatrix4x4","compressNumberArray","Number32Array","compressTexture","errorTexture","compressUBO","UBO","_conchUniformBufferObject","configMotionProperty","callBack","getInstance","_dataNodeList","BaseTexture","_gammaColorMap","NativeShaderInstance","_shaderPass","pConchAttributeMap","conchAttributeMap","setAttributeValue","stateMap","setStateValue","conchShaderInstance","shaderUniform","shaderDatas","uploadUnTexture","uploadCustomUniforms","isTarget","invertFront","NativeShadowCullInfo","conchShadowCullInfo","_cullPlanes","clearCullPlanes","addCullPlane","_cullSphere","setCullSphere","setDirection","_cullPlaneCount","NativeSkinRenderElementOBJ","Skin","NativeTransform3D","eventDispatcher","conchTransform","getLocalPosition","setLocalPosition","getLocalRotation","setLocalRotation","getLocalScale","setLocalScale","getLocalRotationEuler","setLocalRotationEuler","getLocalMatrix","setLocalMatrix","getPosition","getRotation","setRotation","getRotationEuler","setRotationEuler","getWorldMatrix","setParent","hasListener","caller","listener","args","arguments","offAll","offAllCaller","NativeUniformBufferObject","conchUniformBufferObject","NativeVertexBuffer3D","conchVertexBuffer3D","setVertexDeclaration","serilizeVertexDeclaration","loc","attribute","_instanceBuffer","NativeRenderOBJCreateUtil","conchQuickSort","NativeRenderStateCommand","conchCommandUniformMap","enablePhysics","WebGL","onStageResize","checkPhysics","defaultPhysicsMemory","createRenderObjInit","enableMultiLight","enableUniformBufferObject","UnifromBufferObject","lcc","maxAreaLightCountWithZ","__bulletinit__","configRenderContextInstance","_renderOBJCreateContext","getCreateRenderOBJContext","RandX","_state0U","_state0L","_state1U","_state1L","randomint","s1U","s1L","s0U","s0L","sumL","resU","resL","t1U","t1L","t2U","xU","xL","_CONVERTION_BUFFER","setUint32","getFloat64","DataView","defaultRand","Date","now","Size","fullScreen","WebXRRenderTexture","STENCIL_8","frameLoop","frameBuffer","_frameBuffer","gl","WebXRExperienceHelper","glInstance","bindFramebuffer","FRAMEBUFFER","_currentActive","WebXRSessionManager","currentTimestamp","defaultHeightCompensation","_sessionEnded","referenceSpace","_referenceSpace","newReferenceSpace","sessionMode","_sessionMode","exitXR","endXRRenderLoop","EVENT_MANAGER_END","initializeXRGL","xrSession","makeXRCompatible","initializeAsync","_xrNavigator","navigator","xr","reject","isSessionSupportedAsync","isSessionSupported","supportsSession","initializeSessionAsync","xrSessionMode","xrSessionInit","requestSession","session","addEventListener","resetReferenceSpace","baseReferenceSpace","runXRRenderLoop","requestAnimationFrame","timestamp","xrFrame","_updateByXrFrame","EVENT_FRAME_LOOP","_loop","currentFrame","setReferenceSpaceTypeAsync","referenceSpaceType","requestReferenceSpace","rejectionReason","heightCompensation","XRRigidTransform","getOffsetReferenceSpace","updateRenderStateAsync","baseLayer","_baseLayer","updateRenderState","currentFrameRate","frameRate","supportedFrameRates","updateTargetFrameRate","WebXRCameraManager","_referenceQuaternion","_referencedPosition","_firstFrame","_XRRenderTexture","_rigCameras","_webXRSessionManager","_updateFromXRSession","_updateReferenceSpace","newPosition","rotationQuaternion","rigCameras","pose","getViewerPose","views","_updateNumberOfRigCameras","currentRig","getViewport","framebufferWidth","framebufferHeight","framebuffer","cameraViewPort","viewCount","xrcamera","WebXRCamera","removeChild","AxiGamepad","handness","axisData","axisLength","padGameAxi","axes","outPutStickValue","eventnam","EVENT_OUTPUT","eventname","ButtonGamepad","lastTouch","lastPress","lastPressValue","touch","press","pressValue","padButton","touched","pressed","touchEnter","touchStay","touchOut","pressEnter","pressStay","pressOut","outpressed","EVENT_TOUCH_ENTER","EVENT_TOUCH_STAY","EVENT_TOUCH_OUT","EVENT_PRESS_ENTER","EVENT_PRESS_STAY","EVENT_PRESS_OUT","EVENT_PRESS_VALUE","WebXRInput","preButtonEventList","preAxisEventList","_updateByXRPose","rayPose","getPose","_inputSource","targetRaySpace","_lastXRPose","tempQua","UnitZ","gripSpace","meshPose","EVENT_FRAMEUPDATA_WEBXRINPUT","_handleProcessGamepad","gamepad","gamepadAxis","gamepadButton","buttons","addButtonEvent","addAxisEvent","offAxisEvent","offButtonEvent","HANDNESS_LEFT","HANDNESS_RIGHT","WebXRInputManager","webxrManager","webXRCamera","controllers","controllerHandMesh","controllerLineRender","lineColor","RED","rayLength","webXRSessionManager","webXRCameraManager","_updateFromXRFrame","_updataMeshRender","xrInput","meshNode","tempVec1","refSpace","inputSource","inputSources","handedness","getController","bindMeshNode","meshSprite","bindRayNode","lineSprite","xr_Manager","supported","cameraInfo","_gl","depthFar","depthNear","XRWebGLLayer","sessionManager","cameraManager","canvasOptions","antialias","stencil","alpha","multiview","framebufferScaleFactor","_clientWidth","_clientHeight","_restoreView","RenderStateContext","setDepthMask","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","ConstraintComponent","constraintType","_anchor","_connectAnchor","_feedbackEnabled","_getJointFeedBack","_currentForce","_currentTorque","_constraintType","_btframATrans","_btframBTrans","_btframAPos","_btframBPos","_breakForce","_breakTorque","appliedImpulse","EnableFeedback","AppliedImpulse","_connectedBody","_ownBody","currentForce","_getFeedBackInfo","currentTorque","breakForce","breakTorque","anchor","setFrames","connectAnchor","setOverrideNumSolverIterations","overideNumIterations","btTypedConstraint_setOverrideNumSolverIterations","setConstraintEnabled","btTypedConstraint_setEnabled","_createConstraint","setConnectRigidBody","ownerRigid","connectRigidBody","ownerCanInSimulation","connectCanInSimulation","_setConnectRigidBody","getcurrentForce","_btJointFeedBackObj","btJointFeedback_getAppliedForceBodyA","getPhysicsSimulation","getcurrentTorque","btJointFeedback_getAppliedTorqueBodyA","btTypedConstraint_destroy","btJointFeedback_destroy","isBreakForce","isBreakTorque","_breakConstrained","CONSTRAINT_POINT2POINT_CONSTRAINT_TYPE","CONSTRAINT_HINGE_CONSTRAINT_TYPE","CONSTRAINT_CONETWIST_CONSTRAINT_TYPE","CONSTRAINT_D6_CONSTRAINT_TYPE","CONSTRAINT_SLIDER_CONSTRAINT_TYPE","CONSTRAINT_CONTACT_CONSTRAINT_TYPE","CONSTRAINT_D6_SPRING_CONSTRAINT_TYPE","CONSTRAINT_GEAR_CONSTRAINT_TYPE","CONSTRAINT_FIXED_CONSTRAINT_TYPE","CONSTRAINT_MAX_CONSTRAINT_TYPE","CONSTRAINT_CONSTRAINT_ERP","CONSTRAINT_CONSTRAINT_STOP_ERP","CONSTRAINT_CONSTRAINT_CFM","CONSTRAINT_CONSTRAINT_STOP_CFM","tempForceV3","ConfigurableConstraint","_axis","_secondaryAxis","_minLinearLimit","_maxLinearLimit","_minAngularLimit","_maxAngularLimit","_linearLimitSpring","_angularLimitSpring","_linearBounce","_angularBounce","_linearDamp","_angularDamp","_xMotion","_yMotion","_zMotion","_angularXMotion","_angularYMotion","_angularZMotion","_btAxis","_btSecondaryAxis","axis","secondaryAxis","maxAngularLimit","minAngularLimit","maxLinearLimit","minLinearLimit","XMotion","setLimit","MOTION_LINEAR_INDEX_X","YMotion","MOTION_LINEAR_INDEX_Y","ZMotion","MOTION_LINEAR_INDEX_Z","angularXMotion","MOTION_ANGULAR_INDEX_X","angularYMotion","MOTION_ANGULAR_INDEX_Y","angularZMotion","MOTION_ANGULAR_INDEX_Z","linearLimitSpring","setSpring","angularLimitSpring","linearBounce","setBounce","angularBounce","linearDamp","setDamping","angularDamp","setAxis","btGeneric6DofSpring2Constraint_setAxis","motionType","low","high","CONFIG_MOTION_TYPE_LOCKED","btGeneric6DofSpring2Constraint_setLimit","CONFIG_MOTION_TYPE_LIMITED","CONFIG_MOTION_TYPE_FREE","springValue","limitIfNeeded","enableSpring","btGeneric6DofSpring2Constraint_enableSpring","btGeneric6DofSpring2Constraint_setStiffness","bounce","btGeneric6DofSpring2Constraint_setBounce","damp","btGeneric6DofSpring2Constraint_setDamping","setEquilibriumPoint","equilibriumPoint","btGeneric6DofSpring2Constraint_setEquilibriumPoint","enableMotor","isEnableMotor","btGeneric6DofSpring2Constraint_enableMotor","setServo","onOff","btGeneric6DofSpring2Constraint_setServo","setTargetVelocity","btGeneric6DofSpring2Constraint_setTargetVelocity","setTargetPosition","btGeneric6DofSpring2Constraint_setServoTarget","setMaxMotorForce","btGeneric6DofSpring2Constraint_setMaxMotorForce","setParam","constraintParams","btTypedConstraint_setParam","btGeneric6DofSpring2Constraint_setFrames","btGeneric6DofSpring2Constraint_create","RO_XYZ","btJointFeedback_create","btTypedConstraint_setJointFeedback","_initAllConstraintInfo","limitlimit","linearLimit","limitSpring","limitDamp","linearLimitDamper","limitBounciness","linearLimitBounciness","xlowAngularLimit","lowAngularXLimit","xhighAngularLimit","highAngularXLimit","yAngularLimit","angularYLimit","zAngularLimit","angularZLimit","xhighAngularBounciness","highAngularXLimitBounciness","ybounciness","angularYLimitBounciness","zbounciness","angularZLimitBounciness","xAngularSpring","angularXLimitSpring","yzAngularSpriny","angularYZLimitSpring","xAngularDamper","angularXLimitDamper","yzAngularDamper","angularYZLimitDamper","xMotion","yMotion","zMotion","rigidbodyID","connectRigidbodyID","connectRigidbody","RO_XZY","RO_YXZ","RO_YZX","RO_ZXY","RO_ZYX","FixedConstraint","btFixedConstraint_create","PhysicsCollider","btCollisionObject_create","Script3D","Script","HLODRender","curHLODRS","_curHLODRS","_changeMesh","HLODMesh","_createRenderelementByHLODElement","lodMesh","meshDefines","batchMesh","_curSubBatchMeshBounds","batchSubMeshInfo","lightmap","hodMesh","drawSubMeshs","lodbatchMesh","onEnable","onDisable","HLOD","lodResource","_resourceList","_applyLODResource","resource","_curLODSource","hlodRender","_curRender","_releaseGroupRender","applyResource","loaded","StaticBatchSubInfo","needRender","StaticBatchSubMesh","subInfos","addSubMesh","info","centerA","distanceA","centerB","indexByteCount","tempMatrix","TriangleIndices","InvertTriangleIndices","StaticBatchMesh","_staticSubMeshes","staticMesh","vertexFloatArray","mergeIndexFormat","mergeIndexByteCount","vertexDataOffset","vertexCountOffset","sp","normalMat","transpose","meshIndexCount","meshVertexData","transformVector3ArrayToVector3ArrayCoordinate","transformVector3ArrayToVector3ArrayNormal","transformLightingMapTexcoordArray","meshIndexData","triangleIndices","staticSubMesh","submesh","StaticBatchMeshRenderElement","StaticBatchMeshRender","mergeInfo","_staticMesh","_mergeInfo","meshDef","StaticMeshMergeInfo","match","addElement","TransLargeUBOUtils","defautSubData","currentlength","bindUBO","defaultSubData","_reset","configStartLength","subDataParamMap","maxlength","subDataMap","pool","subdata","SubUniformBufferData","subModuleData","addStep","setDataByByUniformBufferDataOffset","updateBindRange","bytelenth","_bindBufferRange","_vec2","_ray","_hitResult","getSprite3DUnderPoint","pageX","_stage","pageY","normalWidth","Render","_mainCanvas","normalHeight","sim","uiManager","cameras","GradientDataVector2","destGradientDataVector2","MaterialInstanceProperty","_isNeedUpdate","createInstanceVertexBuffer3D","_instanceData","instanceData","dataValue","datalength","updateType","writeTo","InstanceLocation","MaterialInstancePropertyBlock","_checkPropertyLegal","vertexElementFormat","propertyName","attributeLocation","prob","_creatProperty","attributeName","arrays","vertexformat","setVectorArray","setVector3Array","setVector2Array","setNumberArray","getPropertyArray","INSTANCETYPE_ATTRIBUTE","INSTANCETYPE_UNIFORMBUFFER","playstate","_batchSubMeshInfos","_drawSubMeshs","drawPramas","_lightmap","callFun","hlod","Handler","heightfieldData","heightStickWidth","heightStickLength","minHeight","maxHeight","heightScale","dataPtr","initSize","hfdatatype","_malloc","copyJSArray","buff","btHeightfieldTerrainShape_create","setMargin","margin","btConcaveShape_setMargin","_free","pixelLineRenderer","meshVertexDecSet","Set","combine","haveMatch","staticRenders","text","_text","fontSize","_fontSize"],"sources":["../../src/layaAir/laya/d3/depthMap/DepthCasterData.ts","../../src/layaAir/laya/d3/depthMap/DepthPass.ts","../../src/layaAir/laya/d3/utils/Physics3DUtils.ts","../../src/layaAir/laya/d3/resource/TextureGenerator.ts","../../src/layaAir/ILaya3D.ts","../../src/layaAir/laya/d3/utils/Utils3D.ts","../../src/layaAir/laya/d3/core/Transform3D.ts","../../src/layaAir/laya/d3/physics/shape/ColliderShape.ts","../../src/layaAir/laya/d3/physics/shape/BoxColliderShape.ts","../../src/layaAir/laya/d3/physics/shape/CapsuleColliderShape.ts","../../src/layaAir/laya/d3/physics/shape/CompoundColliderShape.ts","../../src/layaAir/laya/d3/physics/shape/ConeColliderShape.ts","../../src/layaAir/laya/d3/physics/shape/CylinderColliderShape.ts","../../src/layaAir/laya/d3/physics/shape/MeshColliderShape.ts","../../src/layaAir/laya/d3/physics/shape/SphereColliderShape.ts","../../src/layaAir/laya/d3/physics/PhysicsComponent.ts","../../src/layaAir/laya/d3/physics/CharacterController.ts","../../src/layaAir/laya/d3/physics/PhysicsUpdateList.ts","../../src/layaAir/laya/d3/physics/ContactPoint.ts","../../src/layaAir/laya/d3/physics/HitResult.ts","../../src/layaAir/laya/d3/physics/Collision.ts","../../src/layaAir/laya/d3/physics/CollisionTool.ts","../../src/layaAir/laya/d3/physics/RaycastWheel.ts","../../src/layaAir/laya/d3/physics/RaycastVehicle.ts","../../src/layaAir/laya/d3/physics/PhysicsSimulation.ts","../../src/layaAir/laya/d3/physics/PhysicsTriggerComponent.ts","../../src/layaAir/laya/d3/physics/Rigidbody3D.ts","../../src/layaAir/laya/d3/physics/shape/StaticPlaneColliderShape.ts","../../src/layaAir/laya/d3/Physics3D.ts","../../src/layaAir/laya/d3/animation/KeyframeNode.ts","../../src/layaAir/laya/d3/animation/AnimationEvent.ts","../../src/layaAir/laya/d3/core/Keyframe.ts","../../src/layaAir/laya/d3/component/Animator/KeyframeNodeOwner.ts","../../src/layaAir/laya/d3/core/Sprite3D.ts","../../src/layaAir/laya/d3/math/BoundFrustum.ts","../../src/layaAir/laya/d3/component/Volume/Volume.ts","../../src/layaAir/laya/d3/core/scene/AmbientMode.ts","../../src/layaAir/laya/d3/component/Volume/reflectionProbe/ReflectionProbe.ts","../../src/layaAir/laya/d3/core/render/BaseRender.ts","../../src/layaAir/laya/d3/core/light/ShadowMode.ts","../../src/layaAir/laya/d3/core/light/ShadowCascadesMode.ts","../../src/layaAir/laya/d3/core/light/Light.ts","../../src/layaAir/laya/d3/core/light/ShadowUtils.ts","../../src/layaAir/laya/d3/core/material/Material.ts","../../src/layaAir/laya/d3/shadowMap/ShadowLightType.ts","../../src/layaAir/laya/d3/core/scene/Scene3D.ts","../../src/layaAir/laya/d3/core/Camera.ts","../../src/layaAir/laya/d3/core/material/PBRRenderQuality.ts","../../src/layaAir/laya/d3/core/FloatKeyframe.ts","../../src/layaAir/laya/d3/core/QuaternionKeyframe.ts","../../src/layaAir/laya/d3/core/Vector3Keyframe.ts","../../src/layaAir/laya/d3/animation/AnimationClipParser03.ts","../../src/layaAir/laya/d3/core/Vector2Keyframe.ts","../../src/layaAir/laya/d3/core/Vector4Keyframe.ts","../../src/layaAir/laya/d3/animation/AnimationClipParser04.ts","../../src/layaAir/laya/d3/animation/KeyframeNodeList.ts","../../src/layaAir/laya/d3/animation/AnimationClip.ts","../../src/layaAir/laya/d3/graphics/renderPath/Cluster.ts","../../src/layaAir/laya/d3/math/Plane.ts","../../src/layaAir/laya/d3/math/Ray.ts","../../src/layaAir/laya/d3/math/ContainmentType.ts","../../src/layaAir/laya/d3/math/CollisionUtils.ts","../../src/layaAir/laya/d3/math/Viewport.ts","../../src/layaAir/laya/d3/utils/Picker.ts","../../src/layaAir/laya/d3/core/RenderableSprite3D.ts","../../src/layaAir/laya/d3/core/scene/Lightmap.ts","../../src/layaAir/laya/d3/core/MeshSprite3DShaderDeclaration.ts","../../src/layaAir/laya/d3/math/Bounds.ts","../../src/layaAir/laya/d3/component/Volume/reflectionProbe/ReflectionProbeManager.ts","../../src/layaAir/laya/d3/core/render/Sprite3DRenderDeclaration.ts","../../src/layaAir/laya/d3/component/Volume/VolumetricGI/VolumetricGIManager.ts","../../src/layaAir/laya/d3/component/Volume/VolumeManager.ts","../../src/layaAir/laya/d3/graphics/SphericalHarmonicsL2.ts","../../src/layaAir/laya/d3/core/render/RenderElement.ts","../../src/layaAir/laya/d3/core/GeometryElement.ts","../../src/layaAir/laya/d3/resource/models/SkyBox.ts","../../src/layaAir/laya/d3/graphics/Vertex/VertexPositionTexture0.ts","../../src/layaAir/laya/d3/resource/models/SkyDome.ts","../../src/layaAir/laya/d3/resource/models/SkyRenderer.ts","../../src/layaAir/laya/d3/core/BaseCamera.ts","../../src/layaAir/laya/d3/core/render/RenderContext3D.ts","../../src/layaAir/laya/d3/core/render/ScreenQuad.ts","../../src/layaAir/laya/d3/core/render/command/Command.ts","../../src/layaAir/laya/d3/core/render/command/BlitScreenQuadCMD.ts","../../src/layaAir/laya/d3/core/render/command/SetRenderTargetCMD.ts","../../src/layaAir/laya/d3/core/render/command/SetShaderDataCMD.ts","../../src/layaAir/laya/d3/core/material/BlinnPhongMaterial.ts","../../src/layaAir/laya/d3/core/MeshFilter.ts","../../src/layaAir/laya/d3/core/render/SubMeshRenderElement.ts","../../src/layaAir/laya/d3/resource/models/MeshUtil.ts","../../src/layaAir/laya/d3/core/MeshRenderer.ts","../../src/layaAir/laya/d3/core/render/command/DrawMeshCMD.ts","../../src/layaAir/laya/d3/core/render/command/ClearRenderTextureCMD.ts","../../src/layaAir/laya/d3/core/render/command/DrawRenderCMD.ts","../../src/layaAir/laya/d3/core/render/command/SetGlobalShaderDataCMD.ts","../../src/layaAir/laya/d3/graphics/MeshInstanceGeometry.ts","../../src/layaAir/laya/d3/core/render/command/DrawMeshInstancedCMD.ts","../../src/layaAir/laya/d3/core/render/command/CommandBuffer.ts","../../src/layaAir/laya/d3/physics/PhysicsSettings.ts","../../src/layaAir/laya/d3/core/light/LightQueue.ts","../../src/layaAir/laya/d3/core/scene/Scene3DShaderDeclaration.ts","../../src/layaAir/laya/d3/math/BoundSphere.ts","../../src/layaAir/laya/d3/shadowMap/ShadowSliceData.ts","../../src/layaAir/laya/d3/graphics/FrustumCulling.ts","../../src/layaAir/laya/d3/shadowMap/ShadowCasterPass.ts","../../src/layaAir/laya/d3/core/render/command/BlitFrameBufferCMD.ts","../../src/layaAir/laya/d3/core/scene/SceneRenderManager.ts","../../src/layaAir/laya/d3/core/UI3D/UI3DManager.ts","../../src/layaAir/laya/d3/core/scene/bvh/SpatialManager.ts","../../src/layaAir/laya/d3/core/scene/bvh/BVHSpatialBox.ts","../../src/layaAir/laya/d3/core/scene/bvh/BVHSpatial.ts","../../src/layaAir/laya/d3/core/scene/BVHSceneRenderManager/BVHRenderSpatialBox.ts","../../src/layaAir/laya/d3/core/scene/BVHSceneRenderManager/BVHRenderSpatial.ts","../../src/layaAir/laya/d3/core/scene/BVHSceneRenderManager/BVHSceneRenderManager.ts","../../src/layaAir/laya/d3/RenderObjs/RenderObj/CullPass.ts","../../src/layaAir/laya/d3/core/scene/BVHSceneRenderManager/BVHCullPass.ts","../../src/layaAir/laya/d3/core/GradientMode.ts","../../src/layaAir/laya/d3/core/Gradient.ts","../../src/layaAir/laya/d3/core/light/DirectionLightCom.ts","../../src/layaAir/laya/d3/core/light/LightSprite.ts","../../src/layaAir/laya/d3/core/light/DirectionLight.ts","../../src/layaAir/laya/d3/core/light/PointLightCom.ts","../../src/layaAir/laya/d3/core/light/PointLight.ts","../../src/layaAir/laya/d3/core/light/SpotLightCom.ts","../../src/layaAir/laya/d3/core/light/SpotLight.ts","../../src/layaAir/laya/d3/core/material/UnlitMaterial.ts","../../src/layaAir/laya/d3/core/material/EffectMaterial.ts","../../src/layaAir/laya/d3/core/material/ExtendTerrainMaterial.ts","../../src/layaAir/laya/d3/shader/pbr/PBRDefaultDFG.ts","../../src/layaAir/laya/d3/shader/pbr/PBRShaderLib.ts","../../bin/tsc/layaAir/laya/d3/shader/pbr/BRDF.glsl","../../bin/tsc/layaAir/laya/d3/shader/pbr/pbrGI.glsl","../../bin/tsc/layaAir/laya/d3/shader/pbr/pbrCommon.glsl","../../bin/tsc/layaAir/laya/d3/shader/pbr/pbrVertex.glsl","../../bin/tsc/layaAir/laya/d3/shader/pbr/pbrFrag.glsl","../../bin/tsc/layaAir/laya/d3/shader/pbr/pbrMetallicFrag.glsl","../../src/layaAir/laya/d3/core/material/PBRMaterial.ts","../../src/layaAir/laya/d3/core/material/PBRStandardMaterial.ts","../../src/layaAir/laya/d3/core/particleShuriKen/module/shape/BaseShape.ts","../../src/layaAir/laya/d3/core/trail/TrailAlignment.ts","../../src/layaAir/laya/d3/core/light/AreaLightCom.ts","../../src/layaAir/laya/d3/core/material/SkyBoxMaterial.ts","../../src/layaAir/laya/d3/core/material/SkyPanoramicMaterial.ts","../../src/layaAir/laya/d3/core/material/SkyProceduralMaterial.ts","../../src/layaAir/laya/d3/core/material/WaterPrimaryMaterial.ts","../../src/layaAir/laya/d3/core/MeshSprite3D.ts","../../src/layaAir/laya/d3/core/particleShuriKen/module/Burst.ts","../../src/layaAir/laya/d3/core/particleShuriKen/module/GradientColor.ts","../../src/layaAir/laya/d3/core/particleShuriKen/module/ColorOverLifetime.ts","../../src/layaAir/laya/d3/core/particleShuriKen/module/Emission.ts","../../src/layaAir/laya/d3/core/particleShuriKen/module/FrameOverTime.ts","../../src/layaAir/laya/d3/core/particleShuriKen/module/GradientAngularVelocity.ts","../../src/layaAir/laya/d3/core/particleShuriKen/module/GradientDataInt.ts","../../src/layaAir/laya/d3/core/particleShuriKen/module/GradientDataNumber.ts","../../src/layaAir/laya/d3/core/particleShuriKen/module/GradientSize.ts","../../src/layaAir/laya/d3/core/particleShuriKen/module/GradientVelocity.ts","../../src/layaAir/laya/d3/core/particleShuriKen/module/RotationOverLifetime.ts","../../src/layaAir/laya/d3/math/BoundBox.ts","../../src/layaAir/laya/d3/core/particleShuriKen/module/shape/ShapeUtils.ts","../../src/layaAir/laya/d3/core/particleShuriKen/module/shape/BoxShape.ts","../../src/layaAir/laya/d3/core/particleShuriKen/module/shape/CircleShape.ts","../../src/layaAir/laya/d3/core/particleShuriKen/module/shape/ConeShape.ts","../../src/layaAir/laya/d3/core/particleShuriKen/module/shape/HemisphereShape.ts","../../src/layaAir/laya/d3/core/particleShuriKen/module/shape/SphereShape.ts","../../src/layaAir/laya/d3/core/particleShuriKen/module/SizeOverLifetime.ts","../../src/layaAir/laya/d3/core/particleShuriKen/module/StartFrame.ts","../../src/layaAir/laya/d3/core/particleShuriKen/module/TextureSheetAnimation.ts","../../src/layaAir/laya/d3/core/particleShuriKen/module/VelocityOverLifetime.ts","../../src/layaAir/laya/d3/graphics/Vertex/VertexShuriKenParticle.ts","../../src/layaAir/laya/d3/graphics/Vertex/VertexShurikenParticleBillboard.ts","../../src/layaAir/laya/d3/graphics/Vertex/VertexShurikenParticleMesh.ts","../../src/layaAir/laya/d3/math/Rand.ts","../../src/layaAir/laya/d3/core/particleShuriKen/ShuriKenParticle3DShaderDeclaration.ts","../../src/layaAir/laya/d3/core/particleShuriKen/ShurikenParticleData.ts","../../src/layaAir/laya/d3/core/particleShuriKen/ShurikenParticleSystem.ts","../../src/layaAir/laya/d3/core/particleShuriKen/ShurikenParticleInstanceSystem.ts","../../src/layaAir/laya/d3/core/particleShuriKen/ShurikenParticleMaterial.ts","../../src/layaAir/laya/d3/core/particleShuriKen/ShurikenParticleRenderer.ts","../../src/layaAir/laya/d3/core/particleShuriKen/ShuriKenParticle3D.ts","../../src/layaAir/laya/d3/core/SkinnedMeshSprite3DShaderDeclaration.ts","../../src/layaAir/laya/d3/core/render/SkinRenderElement.ts","../../src/layaAir/laya/d3/core/SkinnedMeshRenderer.ts","../../src/layaAir/laya/d3/core/SimpleSkinnedMeshRenderer.ts","../../src/layaAir/laya/d3/core/SimpleSkinnedMeshSprite3D.ts","../../src/layaAir/laya/d3/core/SkinnedMeshSprite3D.ts","../../src/layaAir/laya/d3/core/TrailTextureMode.ts","../../src/layaAir/laya/d3/core/trail/VertexTrail.ts","../../src/layaAir/laya/d3/core/trail/TrailGeometry.ts","../../src/layaAir/laya/d3/core/trail/TrailMaterial.ts","../../src/layaAir/laya/d3/core/trail/TrailFilter.ts","../../src/layaAir/laya/d3/core/trail/TrailRenderer.ts","../../src/layaAir/laya/d3/core/trail/TrailSprite3D.ts","../../src/layaAir/laya/d3/core/render/InstanceRenderElement.ts","../../src/layaAir/laya/d3/resource/models/SubMesh.ts","../../src/layaAir/laya/d3/resource/models/Mesh.ts","../../src/layaAir/laya/d3/component/Volume/VolumetricGI/VolumetricGI.ts","../../src/layaAir/laya/d3/component/LODGroup.ts","../../src/layaAir/laya/d3/core/pixelLine/PixelLineData.ts","../../src/layaAir/laya/d3/core/pixelLine/PixelLineVertex.ts","../../src/layaAir/laya/d3/core/pixelLine/PixelLineFilter.ts","../../src/layaAir/laya/d3/core/pixelLine/PixelLineMaterial.ts","../../src/layaAir/laya/d3/core/pixelLine/PixelLineRenderer.ts","../../src/layaAir/laya/d3/component/Animator/AnimatorPlayState.ts","../../src/layaAir/laya/d3/component/Animator/AnimatorControllerLayer.ts","../../src/layaAir/laya/d3/component/Animator/AnimatorResource.ts","../../src/layaAir/laya/d3/component/Animator/AnimatorState.ts","../../src/layaAir/laya/d3/component/Animator/AvatarMask.ts","../../src/layaAir/laya/d3/component/Animator/Animator.ts","../../src/layaAir/laya/d3/core/render/PostProcessRenderContext.ts","../../src/layaAir/laya/d3/core/render/PostProcessEffect.ts","../../bin/tsc/layaAir/laya/d3/shader/postprocess/BlitScreen.vs","../../src/layaAir/laya/d3/core/render/PostEffect/ColorGradEffect.ts","../../bin/tsc/layaAir/laya/d3/shader/postprocess/BlitLUTScreen.fs","../../src/layaAir/laya/d3/component/PostProcess.ts","../../bin/tsc/layaAir/laya/d3/shader/files/postProcess/Bloom/Bloom.vs","../../src/layaAir/laya/d3/core/render/PostEffect/BloomEffect.ts","../../bin/tsc/layaAir/laya/d3/shader/files/postProcess/StdLib.glsl","../../bin/tsc/layaAir/laya/d3/shader/files/postProcess/Colors.glsl","../../bin/tsc/layaAir/laya/d3/shader/files/postProcess/Sampling.glsl","../../bin/tsc/layaAir/laya/d3/shader/files/postProcess/Bloom/BloomPrefilter13.fs","../../bin/tsc/layaAir/laya/d3/shader/files/postProcess/Bloom/BloomPrefilter4.fs","../../bin/tsc/layaAir/laya/d3/shader/files/postProcess/Bloom/BloomDownsample13.fs","../../bin/tsc/layaAir/laya/d3/shader/files/postProcess/Bloom/BloomDownsample4.fs","../../bin/tsc/layaAir/laya/d3/shader/files/postProcess/Bloom/BloomUpsampleTent.fs","../../bin/tsc/layaAir/laya/d3/shader/files/postProcess/Bloom/BloomUpsampleBox.fs","../../bin/tsc/layaAir/laya/d3/shader/files/postProcess/Bloom/Composite.vs","../../bin/tsc/layaAir/laya/d3/shader/files/postProcess/Bloom/Composite.fs","../../bin/tsc/layaAir/laya/d3/shader/files/postProcess/GaussianDoF/FullScreenVert.vs","../../src/layaAir/laya/d3/core/render/PostEffect/GaussianDoF.ts","../../bin/tsc/layaAir/laya/d3/shader/files/postProcess/GaussianDoF/CoC.fs","../../bin/tsc/layaAir/laya/d3/shader/files/postProcess/GaussianDoF/Prefilter.fs","../../bin/tsc/layaAir/laya/d3/shader/files/postProcess/GaussianDoF/BlurH.fs","../../bin/tsc/layaAir/laya/d3/shader/files/postProcess/GaussianDoF/BlurV.fs","../../bin/tsc/layaAir/laya/d3/shader/files/postProcess/GaussianDoF/Composite.fs","../../bin/tsc/layaAir/laya/d3/shader/files/postProcess/ScalableAO/FragAO.fs","../../src/layaAir/laya/d3/core/render/PostEffect/ScalableAO.ts","../../bin/tsc/layaAir/laya/d3/shader/files/postProcess/ScalableAO/AmbientOcclusion.glsl","../../bin/tsc/layaAir/laya/d3/shader/files/postProcess/ScalableAO/AoBlurHorizontal.fs","../../bin/tsc/layaAir/laya/d3/shader/files/postProcess/ScalableAO/AOComposition.fs","../../src/layaAir/laya/d3/component/Animator/AnimatorTransition.ts","../../src/layaAir/laya/d3/component/Animator/AnimatorController.ts","../../src/layaAir/laya/d3/core/render/BatchMark.ts","../../src/layaAir/laya/d3/graphics/Batch/InstanceBatchManager.ts","../../src/layaAir/laya/d3/component/Volume/BatchVolume/BatchRender.ts","../../src/layaAir/laya/d3/component/Volume/BatchVolume/StaticInstanceBatchRender.ts","../../src/layaAir/laya/d3/component/Volume/BatchVolume/StatiVertexMergeBatchRender.ts","../../src/layaAir/laya/d3/component/Volume/BatchVolume/StaticBatchVolume.ts","../../src/layaAir/laya/d3/core/UI3D/UI3DGeometry.ts","../../src/layaAir/laya/d3/core/UI3D/UI3D.ts","../../src/layaAir/laya/d3/loaders/CubemapLoader.ts","../../src/layaAir/laya/d3/loaders/AnimationClipLoader.ts","../../src/layaAir/laya/d3/loaders/MaterialParser.ts","../../src/layaAir/laya/d3/loaders/MaterialLoader.ts","../../src/layaAir/laya/d3/loaders/LoadModelV04.ts","../../src/layaAir/laya/d3/resource/models/MorphTarget.ts","../../src/layaAir/laya/d3/resource/models/MorphTargetData.ts","../../src/layaAir/laya/d3/loaders/LoadModelV05.ts","../../src/layaAir/laya/d3/loaders/MeshReader.ts","../../src/layaAir/laya/d3/loaders/MeshLoader.ts","../../src/layaAir/laya/d3/loaders/HierarchyParserV2.ts","../../src/layaAir/laya/d3/loaders/AvatarMaskLoader.ts","../../src/layaAir/laya/d3/utils/ParseJSON.ts","../../src/layaAir/laya/d3/loaders/ShaderParser.ts","../../src/layaAir/laya/d3/loaders/ShaderLoader.ts","../../src/layaAir/laya/d3/loaders/GLSLLoader.ts","../../src/layaAir/laya/d3/loaders/AnimationControllerLoader.ts","../../src/layaAir/laya/d3/ModuleDef.ts","../../src/layaAir/laya/d3/graphics/SubMeshInstanceBatch.ts","../../src/layaAir/laya/d3/graphics/Vertex/VertexPositionTerrain.ts","../../src/layaAir/laya/d3/physics/BulletInteractive.ts","../../src/layaAir/laya/d3/resource/models/PrimitiveMesh.ts","../../bin/tsc/layaAir/laya/d3/shader/utils/Utils.glsl","../../bin/tsc/layaAir/laya/d3/shader/postprocess/BlitScreen.fs","../../src/layaAir/laya/d3/shader/postprocess/BlitScreenShaderInit.ts","../../bin/tsc/layaAir/laya/d3/shader/postprocess/FastApproximateAntiAliasing.glsl","../../bin/tsc/layaAir/laya/d3/shader/postprocess/ColorGrading.glsl","../../bin/tsc/layaAir/laya/d3/shader/postprocess/Tonemapping.glsl","../../bin/tsc/layaAir/laya/d3/shader/postprocess/LUT.glsl","../../bin/tsc/layaAir/laya/d3/shader/postprocess/LUTBuilder.fs","../../bin/tsc/layaAir/laya/d3/shader/unlit/Unlit.vs","../../bin/tsc/layaAir/laya/d3/shader/depth/Depth.vs","../../bin/tsc/layaAir/laya/d3/shader/depth/Depth.fs","../../src/layaAir/laya/d3/shader/unlit/UnlitShaderInit.ts","../../bin/tsc/layaAir/laya/d3/shader/unlit/Unlit.fs","../../src/layaAir/laya/d3/shader/blinnphong/BlinnPhongShaderInit.ts","../../bin/tsc/layaAir/laya/d3/shader/blinnphong/BlinnPhongCommon.glsl","../../bin/tsc/layaAir/laya/d3/shader/blinnphong/BlinnPhongVertex.glsl","../../bin/tsc/layaAir/laya/d3/shader/blinnphong/BlinnPhongFrag.glsl","../../bin/tsc/layaAir/laya/d3/shader/blinnphong/BlinnPhong.vs","../../bin/tsc/layaAir/laya/d3/shader/blinnphong/BlinnPhong.fs","../../bin/tsc/layaAir/laya/d3/shader/blinnphong/BlinnPhongDepthNormal.vs","../../bin/tsc/layaAir/laya/d3/shader/blinnphong/BlinnPhongDepthNormal.fs","../../src/layaAir/laya/d3/shader/Trail/TrailShaderInit.ts","../../bin/tsc/layaAir/laya/d3/shader/Trail/Trail.vs","../../bin/tsc/layaAir/laya/d3/shader/Trail/Trail.fs","../../src/layaAir/laya/d3/shader/pbr/PBRStandardShaderInit.ts","../../bin/tsc/layaAir/laya/d3/shader/pbr/pbrStandard.vs","../../bin/tsc/layaAir/laya/d3/shader/pbr/pbrStandard.fs","../../bin/tsc/layaAir/laya/d3/shader/pbr/PBRStandardDepthNormal.vs","../../bin/tsc/layaAir/laya/d3/shader/pbr/PBRStandardDepthNormal.fs","../../src/layaAir/laya/d3/shader/sky/SkyBoxShaderInit.ts","../../bin/tsc/layaAir/laya/d3/shader/sky/SkyBox.vs","../../bin/tsc/layaAir/laya/d3/shader/sky/SkyBox.fs","../../src/layaAir/laya/d3/shader/ShurikenParticle/ParticleShuriKenShaderInit.ts","../../bin/tsc/layaAir/laya/d3/shader/ShurikenParticle/MathGradient.glsl","../../bin/tsc/layaAir/laya/d3/shader/ShurikenParticle/particleShuriKenSpriteVS.glsl","../../bin/tsc/layaAir/laya/d3/shader/ShurikenParticle/particleShuriKen.vs","../../bin/tsc/layaAir/laya/d3/shader/ShurikenParticle/particleShuriKen.fs","../../src/layaAir/laya/d3/shader/sky/SkyProceduralShaderInit.ts","../../bin/tsc/layaAir/laya/d3/shader/sky/SkyProceduralShader.vs","../../bin/tsc/layaAir/laya/d3/shader/sky/SkyProceduralShader.fs","../../src/layaAir/laya/d3/shader/sky/SkyPanoramicShaderInit.ts","../../bin/tsc/layaAir/laya/d3/shader/sky/SkyPanoramic.vs","../../bin/tsc/layaAir/laya/d3/shader/sky/SkyPanoramic.fs","../../src/layaAir/laya/d3/shader/postprocess/ACES/ACESShaderLib.ts","../../bin/tsc/layaAir/laya/d3/shader/postprocess/ACES/lib/UtillitiesColor.glsl","../../bin/tsc/layaAir/laya/d3/shader/postprocess/ACES/lib/TransformCommon.glsl","../../bin/tsc/layaAir/laya/d3/shader/postprocess/ACES/lib/Tonescales.glsl","../../bin/tsc/layaAir/laya/d3/shader/postprocess/ACES/lib/RRTCommon.glsl","../../bin/tsc/layaAir/laya/d3/shader/postprocess/ACES/lib/ODTCommon.glsl","../../bin/tsc/layaAir/laya/d3/shader/postprocess/ACES/rrt/RRT.glsl","../../bin/tsc/layaAir/laya/d3/shader/postprocess/ACES/odt/ODT_sRGB_100nits.glsl","../../bin/tsc/layaAir/laya/d3/shader/postprocess/ACES/ACES.glsl","../../src/layaAir/laya/d3/shader/ShaderInit3D.ts","../../bin/tsc/layaAir/laya/d3/shader/utils/Color.glsl","../../bin/tsc/layaAir/laya/d3/shader/utils/Math.glsl","../../bin/tsc/layaAir/laya/d3/shader/utils/BakedBoneMatrixSampler.glsl","../../bin/tsc/layaAir/laya/d3/shader/common/MorphTarget.glsl","../../bin/tsc/layaAir/laya/d3/shader/common/VertexCommon.glsl","../../bin/tsc/layaAir/laya/d3/shader/common/ShadingCommon.glsl","../../bin/tsc/layaAir/laya/d3/shader/common/ShadingVertex.glsl","../../bin/tsc/layaAir/laya/d3/shader/common/ShadingFrag.glsl","../../bin/tsc/layaAir/laya/d3/shader/common/OutputTransform.glsl","../../bin/tsc/layaAir/laya/d3/shader/common/SceneCommon.glsl","../../bin/tsc/layaAir/laya/d3/shader/common/CameraCommon.glsl","../../bin/tsc/layaAir/laya/d3/shader/common/Sprite3DCommon.glsl","../../bin/tsc/layaAir/laya/d3/shader/common/Sprite3DVertex.glsl","../../bin/tsc/layaAir/laya/d3/shader/common/Sprite3DFrag.glsl","../../bin/tsc/layaAir/laya/d3/shader/depth/DepthVertex.glsl","../../bin/tsc/layaAir/laya/d3/shader/depth/DepthFrag.glsl","../../bin/tsc/layaAir/laya/d3/shader/depth/DepthNormalUtil.glsl","../../bin/tsc/layaAir/laya/d3/shader/depth/DepthNormalFrag.glsl","../../bin/tsc/layaAir/laya/d3/shader/utils/SceneFog.glsl","../../bin/tsc/layaAir/laya/d3/shader/utils/SceneFogInput.glsl","../../bin/tsc/layaAir/laya/d3/shader/lighting/ShadowSampleTent.glsl","../../bin/tsc/layaAir/laya/d3/shader/lighting/ShadowSampler.glsl","../../bin/tsc/layaAir/laya/d3/shader/lighting/Lighting.glsl","../../bin/tsc/layaAir/laya/d3/shader/lighting/globalIllumination.glsl","../../bin/tsc/layaAir/laya/d3/shader/lighting/volumetricGI/Oct.glsl","../../bin/tsc/layaAir/laya/d3/shader/lighting/volumetricGI/GridHelpers.glsl","../../bin/tsc/layaAir/laya/d3/shader/lighting/volumetricGI/VolumetricGI.glsl","../../bin/tsc/layaAir/laya/d3/shader/lightingmode/BlinnPhongLighting.glsl","../../bin/tsc/layaAir/laya/d3/shader/lightingmode/PBRLighting.glsl","../../src/layaAir/laya/d3/graphics/IndexBuffer3D.ts","../../src/layaAir/laya/d3/graphics/VertexBuffer3D.ts","../../src/layaAir/laya/d3/math/BoundsImpl.ts","../../src/layaAir/laya/d3/RenderObjs/RenderObj/BaseRenderNode.ts","../../src/layaAir/laya/d3/graphics/Batch/RenderElementBatch.ts","../../src/layaAir/laya/d3/RenderObjs/RenderObj/BaseRenderQueue.ts","../../src/layaAir/laya/d3/RenderObjs/RenderObj/CameraCullInfo.ts","../../src/layaAir/laya/d3/RenderObjs/RenderObj/RenderElementOBJ.ts","../../src/layaAir/laya/d3/RenderObjs/RenderObj/InstanceRenderElementOBJ.ts","../../src/layaAir/laya/d3/RenderObjs/RenderObj/QuickSort.ts","../../src/layaAir/laya/d3/RenderObjs/RenderObj/RenderContext3DOBJ.ts","../../src/layaAir/laya/d3/RenderObjs/RenderObj/RenderGeometryElementOBJ.ts","../../src/layaAir/laya/d3/RenderObjs/RenderObj/SceneRenderManagerOBJ.ts","../../src/layaAir/laya/d3/RenderObjs/RenderObj/ShadowCullInfo.ts","../../src/layaAir/laya/d3/RenderObjs/RenderObj/SkinRenderElementOBJ.ts","../../src/layaAir/laya/d3/RenderObjs/RenderObj/RenderOBJCreateUtil.ts","../../src/layaAir/laya/d3/RenderObjs/NativeOBJ/NativeBaseRenderNode.ts","../../src/layaAir/laya/d3/RenderObjs/NativeOBJ/NativeBaseRenderQueue.ts","../../src/layaAir/laya/d3/RenderObjs/NativeOBJ/NativeBounds.ts","../../src/layaAir/laya/d3/RenderObjs/NativeOBJ/NativeCameraCullInfo.ts","../../src/layaAir/laya/d3/RenderObjs/NativeOBJ/NativeCommandUniformMap.ts","../../src/layaAir/laya/d3/RenderObjs/NativeOBJ/NativeCullPass.ts","../../src/layaAir/laya/d3/RenderObjs/NativeOBJ/NativeIndexBuffer3D.ts","../../src/layaAir/laya/d3/RenderObjs/NativeOBJ/NativeRenderElementOBJ.ts","../../src/layaAir/laya/d3/RenderObjs/NativeOBJ/NativeShaderData.ts","../../src/layaAir/laya/d3/RenderObjs/NativeOBJ/NativeShaderInstance.ts","../../src/layaAir/laya/d3/RenderObjs/NativeOBJ/NativeInstanceRenderElementOBJ.ts","../../src/layaAir/laya/d3/RenderObjs/NativeOBJ/NativeRenderContext3DOBJ.ts","../../src/layaAir/laya/d3/RenderObjs/NativeOBJ/NativeRenderGeometryElementOBJ.ts","../../src/layaAir/laya/d3/RenderObjs/NativeOBJ/NativeRenderState.ts","../../src/layaAir/laya/d3/RenderObjs/NativeOBJ/NativeSceneRenderManager.ts","../../src/layaAir/laya/d3/RenderObjs/NativeOBJ/NativeShadowCullInfo.ts","../../src/layaAir/laya/d3/RenderObjs/NativeOBJ/NativeSkinRenderElementOBJ.ts","../../src/layaAir/laya/d3/RenderObjs/NativeOBJ/NativeTransform3D.ts","../../src/layaAir/laya/d3/RenderObjs/NativeOBJ/NativeUniformBufferObject.ts","../../src/layaAir/laya/d3/RenderObjs/NativeOBJ/NativeVertexBuffer3D.ts","../../src/layaAir/laya/d3/RenderObjs/NativeOBJ/NativeRenderOBJCreateUtil.ts","../../src/layaAir/Laya3D.ts","../../src/layaAir/laya/d3/math/RandX.ts","../../src/layaAir/laya/d3/utils/Size.ts","../../src/layaAir/laya/d3/WebXR/core/WebXRRenderTexture.ts","../../src/layaAir/laya/d3/WebXR/core/WebXRSessionManager.ts","../../src/layaAir/laya/d3/WebXR/core/WebXRCameraManager.ts","../../src/layaAir/laya/d3/WebXR/core/WebXRGamepad.ts","../../src/layaAir/laya/d3/WebXR/core/WebXRInput.ts","../../src/layaAir/laya/d3/WebXR/core/WebXRInputManager.ts","../../src/layaAir/laya/d3/WebXR/core/WebXRExperienceHelper.ts","../../src/layaAir/laya/d3/WebXR/core/WebXRCamera.ts","../../src/layaAir/laya/d3/physics/constraints/ConstraintComponent.ts","../../src/layaAir/laya/d3/physics/constraints/ConfigurableConstraint.ts","../../src/layaAir/laya/d3/physics/constraints/FixedConstraint.ts","../../src/layaAir/laya/d3/physics/PhysicsCollider.ts","../../src/layaAir/laya/d3/physics/ModuleDef.ts","../../src/layaAir/laya/d3/component/Script3D.ts","../../src/layaAir/laya/d3/component/HLOD/HLODRender.ts","../../src/layaAir/laya/d3/component/HLOD/HLOD.ts","../../src/layaAir/laya/d3/component/staticmesh/StaticBatchSubMesh.ts","../../src/layaAir/laya/d3/component/staticmesh/StaticBatchMesh.ts","../../src/layaAir/laya/d3/component/staticmesh/StaticBatchMeshRenderElement.ts","../../src/layaAir/laya/d3/component/staticmesh/StaticBatchMeshRender.ts","../../src/layaAir/laya/d3/component/staticmesh/StaticMeshMergeInfo.ts","../../src/layaAir/laya/d3/core/TransLargeUBOUtils.ts","../../src/layaAir/laya/d3/core/scene/Input3D.ts","../../src/layaAir/laya/d3/core/particleShuriKen/module/GradientDataVector2.ts","../../src/layaAir/laya/d3/core/render/command/MaterialInstanceProperty.ts","../../src/layaAir/laya/d3/core/render/command/MaterialInstancePropertyBlock.ts","../../src/layaAir/laya/d3/animation/AnimatorStateScript.ts","../../src/layaAir/laya/d3/physics/Constraint3D.ts","../../src/layaAir/laya/d3/component/HLOD/HLODBatchMesh.ts","../../src/layaAir/laya/d3/component/HLOD/HLODUtil.ts","../../src/layaAir/laya/d3/physics/shape/HeightfieldTerrainShape.ts","../../src/layaAir/laya/d3/core/pixelLine/PixelLineSprite3D.ts","../../src/layaAir/laya/d3/component/staticmesh/StaticMeshBatchManager.ts","../../src/layaAir/laya/d3/text/TextMesh.ts"],"sourcesContent":["import { Shader3D } from \"../../RenderEngine/RenderShader/Shader3D\";\r\nimport { UniformBufferParamsType, UnifromBufferData } from \"../../RenderEngine/UniformBufferData\";\r\n\r\nexport class DepthCasterData{\r\n    static DepthCasterUBOData: UnifromBufferData;\r\n    /**\r\n     * create DepthCaster UniformBuffer\r\n     * @internal\r\n     * @returns \r\n     */\r\n    static createDepthCasterUniformBlock(): UnifromBufferData {\r\n\r\n        if (!DepthCasterData.DepthCasterUBOData) {\r\n            let uniformpara = new Map<number, UniformBufferParamsType>();\r\n            uniformpara.set(Shader3D.propertyNameToID(\"u_ShadowBias\"), UniformBufferParamsType.Vector4);\r\n            //uniformpara.set(Shader3D.propertyNameToID(\"u_ViewProjection\"), UniformBufferParamsType.Matrix4x4);\r\n            uniformpara.set(Shader3D.propertyNameToID(\"u_ShadowLightDirection\"), UniformBufferParamsType.Vector3);\r\n            DepthCasterData.DepthCasterUBOData = new UnifromBufferData(uniformpara);\r\n        }\r\n\r\n        return DepthCasterData.DepthCasterUBOData;\r\n    }\r\n}","import { Config3D } from \"../../../Config3D\";\r\nimport { LayaGL } from \"../../layagl/LayaGL\";\r\nimport { Camera } from \"../core/Camera\";\r\nimport { RenderContext3D } from \"../core/render/RenderContext3D\";\r\nimport { RenderTargetFormat } from \"../../RenderEngine/RenderEnum/RenderTargetFormat\";\r\nimport { Shader3D } from \"../../RenderEngine/RenderShader/Shader3D\";\r\nimport { ShaderData } from \"../../RenderEngine/RenderShader/ShaderData\";\r\nimport { ShaderDefine } from \"../../RenderEngine/RenderShader/ShaderDefine\";\r\nimport { UnifromBufferData } from \"../../RenderEngine/UniformBufferData\";\r\nimport { UniformBufferObject } from \"../../RenderEngine/UniformBufferObject\";\r\nimport { Viewport } from \"../math/Viewport\";\r\nimport { RenderClearFlag } from \"../../RenderEngine/RenderEnum/RenderClearFlag\";\r\nimport { BufferUsage } from \"../../RenderEngine/RenderEnum/BufferTargetType\";\r\nimport { Stat } from \"../../utils/Stat\";\r\nimport { DepthCasterData } from \"./DepthCasterData\";\r\nimport { Color } from \"../../maths/Color\";\r\nimport { Vector4 } from \"../../maths/Vector4\";\r\nimport { RenderTexture } from \"../../resource/RenderTexture\";\r\n\r\n\r\n/**\r\n * 深度贴图模式\r\n */\r\nexport enum DepthTextureMode {\r\n    /**不生成深度贴图 */\r\n    None = 0,\r\n    /**生成深度贴图 */\r\n    Depth = 1,\r\n    /**生成深度+法线贴图 */\r\n    DepthNormals = 2,\r\n    /**是否应渲染运动矢量  TODO*/\r\n    DepthAndDepthNormals = 3,\r\n    MotionVectors = 4,\r\n}\r\n/**\r\n * <code>ShadowCasterPass</code> 类用于实现阴影渲染管线\r\n */\r\nexport class DepthPass {\r\n    private static SHADOW_BIAS: Vector4 = new Vector4();\r\n    /** @internal */\r\n    static DEPTHPASS: ShaderDefine;\r\n    /** @internal */\r\n    static DEFINE_SHADOW_BIAS: number;\r\n    /**@internal */\r\n    static DEPTHTEXTURE: number;\r\n    /**@internal */\r\n    static DEPTHNORMALSTEXTURE: number;\r\n    /**@internal */\r\n    static DEPTHZBUFFERPARAMS: number;\r\n    /**@internal */\r\n    static SHADOWUNIFORMBLOCK: number;\r\n\r\n\r\n    static __init__() {\r\n        DepthPass.DEPTHPASS = Shader3D.getDefineByName(\"DEPTHPASS\");\r\n        DepthPass.DEFINE_SHADOW_BIAS = Shader3D.propertyNameToID(\"u_ShadowBias\");\r\n        DepthPass.DEPTHTEXTURE = Shader3D.propertyNameToID(\"u_CameraDepthTexture\");\r\n        DepthPass.DEPTHNORMALSTEXTURE = Shader3D.propertyNameToID(\"u_CameraDepthNormalsTexture\");\r\n        DepthPass.DEPTHZBUFFERPARAMS = Shader3D.propertyNameToID(\"u_ZBufferParams\");\r\n        DepthPass.SHADOWUNIFORMBLOCK = Shader3D.propertyNameToID(UniformBufferObject.UBONAME_SHADOW);\r\n    }\r\n\r\n    /**@internal */\r\n    private _depthTexture: RenderTexture;\r\n    /**@internal */\r\n    private _depthNormalsTexture: RenderTexture;\r\n    /**@internal */\r\n    private _viewPort: Viewport;\r\n    /**@internal */\r\n    private _camera: Camera;\r\n    /** @internal */\r\n    private _castDepthData: UnifromBufferData;\r\n    /** @internal */\r\n    private _castDepthUBO: UniformBufferObject;\r\n    /**@internal */\r\n    //private _castDepthBuffer:\r\n    private _defaultNormalDepthColor = new Color(0.5, 0.5, 1.0, 0.0);\r\n    // Values used to linearize the Z buffer (http://www.humus.name/temp/Linearize%20depth.txt)\r\n    // x = 1-far/near\r\n    // y = far/near\r\n    // z = x/far\r\n    // w = y/far\r\n    // or in case of a reversed depth buffer (UNITY_REVERSED_Z is 1)\r\n    // x = -1+far/near\r\n    // y = 1\r\n    // z = x/far\r\n    // w = 1/far\r\n    /**@internal */\r\n    private _zBufferParams: Vector4 = new Vector4();\r\n\r\n    constructor() {\r\n        if (Config3D._uniformBlock) {\r\n            this._castDepthData = DepthCasterData.createDepthCasterUniformBlock();\r\n            this._castDepthUBO = UniformBufferObject.getBuffer(UniformBufferObject.UBONAME_SHADOW, 0);\r\n            if (!this._castDepthUBO) {\r\n                this._castDepthUBO = UniformBufferObject.create(UniformBufferObject.UBONAME_SHADOW, BufferUsage.Dynamic, this._castDepthData.getbyteLength(), true);\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 渲染深度更新\r\n     * @param camera \r\n     * @param depthType \r\n     */\r\n    update(camera: Camera, depthType: DepthTextureMode, depthTextureFormat: RenderTargetFormat): void {\r\n        this._viewPort = camera.viewport;\r\n        this._camera = camera;\r\n        switch (depthType) {\r\n            case DepthTextureMode.Depth:\r\n                camera.depthTexture = this._depthTexture = RenderTexture.createFromPool(this._viewPort.width, this._viewPort.height, depthTextureFormat, RenderTargetFormat.None, false, 1);\r\n                break;\r\n            case DepthTextureMode.DepthNormals:\r\n                camera.depthNormalTexture = this._depthNormalsTexture = RenderTexture.createFromPool(this._viewPort.width, this._viewPort.height, RenderTargetFormat.R8G8B8A8, depthTextureFormat, false, 1);\r\n                break;\r\n            case DepthTextureMode.MotionVectors:\r\n                //TODO：\r\n                break;\r\n            default:\r\n                throw (\"there is UnDefined type of DepthTextureMode\")\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 渲染深度帧缓存\r\n     * @param context \r\n     * @param depthType \r\n     */\r\n    render(context: RenderContext3D, depthType: DepthTextureMode): void {\r\n        var scene = context.scene;\r\n        var shaderValues: ShaderData = scene._shaderValues;\r\n        //this._castDepthUBO && shaderValues.setValueData(Shader3D.propertyNameToID(UniformBufferObject.UBONAME_SHADOW), this._castDepthUBO);\r\n        switch (depthType) {\r\n            case DepthTextureMode.Depth:\r\n                context.pipelineMode = \"ShadowCaster\";\r\n                shaderValues.addDefine(DepthPass.DEPTHPASS);\r\n                shaderValues.setVector(DepthPass.DEFINE_SHADOW_BIAS, DepthPass.SHADOW_BIAS);\r\n                var offsetX: number = this._viewPort.x;\r\n                var offsetY: number = this._viewPort.y;\r\n                this._depthTexture._start();\r\n                LayaGL.renderEngine.viewport(offsetX, offsetY, this._viewPort.width, this._viewPort.height);\r\n                LayaGL.renderEngine.scissor(offsetX, offsetY, this._viewPort.width, this._viewPort.height);\r\n                LayaGL.renderEngine.clearRenderTexture(RenderClearFlag.Depth, null, 1);\r\n                context.changeViewport(offsetX, offsetY, this._viewPort.width, this._viewPort.height);\r\n                context.changeScissor(offsetX, offsetY, this._viewPort.width, this._viewPort.height);\r\n                context.destTarget = this._depthTexture;\r\n                Stat.depthCastDrawCall += scene._opaqueQueue.renderQueue(context);\r\n                this._depthTexture._end();\r\n                this._setupDepthModeShaderValue(depthType, this._camera);\r\n                context.pipelineMode = context.configPipeLineMode;\r\n                shaderValues.removeDefine(DepthPass.DEPTHPASS);\r\n                break;\r\n            case DepthTextureMode.DepthNormals:\r\n                context.pipelineMode = \"DepthNormal\";\r\n                this._depthNormalsTexture._start();\r\n                //传入shader该传的值\r\n                var offsetX: number = this._viewPort.x;\r\n                var offsetY: number = this._viewPort.y;\r\n                LayaGL.renderEngine.viewport(offsetX, offsetY, this._viewPort.width, this._viewPort.height);\r\n                LayaGL.renderEngine.scissor(offsetX, offsetY, this._viewPort.width, this._viewPort.height);\r\n                LayaGL.renderEngine.clearRenderTexture(RenderClearFlag.Color | RenderClearFlag.Depth, this._defaultNormalDepthColor, 1)\r\n                context.destTarget = this._depthNormalsTexture;\r\n                context.changeViewport(offsetX, offsetY, this._viewPort.width, this._viewPort.height);\r\n                context.changeScissor(offsetX, offsetY, this._viewPort.width, this._viewPort.height);\r\n                Stat.depthCastDrawCall += scene._opaqueQueue.renderQueue(context);\r\n                this._depthNormalsTexture._end();\r\n                this._setupDepthModeShaderValue(depthType, this._camera);\r\n                context.pipelineMode = context.configPipeLineMode;\r\n                break;\r\n            case DepthTextureMode.MotionVectors:\r\n                break;\r\n            default:\r\n                throw (\"there is UnDefined type of DepthTextureMode\")\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 渲染完后传入使用的参数\r\n     * @internal\r\n     */\r\n    _setupDepthModeShaderValue(depthType: DepthTextureMode, camera: Camera) {\r\n        switch (depthType) {\r\n            case DepthTextureMode.Depth:\r\n                var far = camera.farPlane;\r\n                var near = camera.nearPlane;\r\n                this._zBufferParams.setValue(1.0 - far / near, far / near, (near - far) / (near * far), 1 / near);\r\n                camera._shaderValues.setVector(DepthPass.DEFINE_SHADOW_BIAS, DepthPass.SHADOW_BIAS);\r\n                camera._shaderValues.setTexture(DepthPass.DEPTHTEXTURE, this._depthTexture);\r\n                camera._shaderValues.setVector(DepthPass.DEPTHZBUFFERPARAMS, this._zBufferParams);\r\n                break;\r\n            case DepthTextureMode.DepthNormals:\r\n                camera._shaderValues.setTexture(DepthPass.DEPTHNORMALSTEXTURE, this._depthNormalsTexture);\r\n                break;\r\n            case DepthTextureMode.MotionVectors:\r\n                break;\r\n            default:\r\n                throw (\"there is UnDefined type of DepthTextureMode\")\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 清理深度数据\r\n     * @internal\r\n     */\r\n    cleanUp(): void {\r\n        (this._depthTexture instanceof RenderTexture)&& this._depthTexture && RenderTexture.recoverToPool(this._depthTexture);\r\n        this._depthNormalsTexture && RenderTexture.recoverToPool(this._depthNormalsTexture);\r\n        this._depthTexture = null;\r\n        this._depthNormalsTexture = null;\r\n    }\r\n}\r\n\r\n","import { Vector3 } from \"../../maths/Vector3\";\r\nimport { PhysicsComponent } from \"../physics/PhysicsComponent\"\r\n\r\n\t\r\n\t/**\r\n\t * <code>Physics</code> 类用于简单物理检测。\r\n\t */\r\n\texport class Physics3DUtils {\r\n\t\t/**默认碰撞组 */\r\n\t\t static COLLISIONFILTERGROUP_DEFAULTFILTER:number = 0x1;\r\n\t\t/**静态碰撞组 */\r\n\t\t static COLLISIONFILTERGROUP_STATICFILTER:number = 0x2;\r\n\t\t/**运动学刚体碰撞组 */\r\n\t\t static COLLISIONFILTERGROUP_KINEMATICFILTER:number = 0x4;\r\n\t\t/**碎片碰撞组 */\r\n\t\t static COLLISIONFILTERGROUP_DEBRISFILTER:number = 0x8;\r\n\t\t/**传感器触发器*/\r\n\t\t static COLLISIONFILTERGROUP_SENSORTRIGGER:number = 0x10;\r\n\t\t/**字符过滤器 */\r\n\t\t static COLLISIONFILTERGROUP_CHARACTERFILTER:number = 0x20;\r\n\t\t/**自定义过滤1 */\r\n\t\t static COLLISIONFILTERGROUP_CUSTOMFILTER1:number = 0x40;\r\n\t\t/**自定义过滤2 */\r\n\t\t static COLLISIONFILTERGROUP_CUSTOMFILTER2:number = 0x80;\r\n\t\t/**自定义过滤3 */\r\n\t\t static COLLISIONFILTERGROUP_CUSTOMFILTER3:number = 0x100;\r\n\t\t/**自定义过滤4 */\r\n\t\t static COLLISIONFILTERGROUP_CUSTOMFILTER4:number = 0x200;\r\n\t\t/**自定义过滤5 */\r\n\t\t static COLLISIONFILTERGROUP_CUSTOMFILTER5:number = 0x400;\r\n\t\t/**自定义过滤6 */\r\n\t\t static COLLISIONFILTERGROUP_CUSTOMFILTER6:number = 0x800;\r\n\t\t/**自定义过滤7 */\r\n\t\t static COLLISIONFILTERGROUP_CUSTOMFILTER7:number = 0x1000;\r\n\t\t/**自定义过滤8 */\r\n\t\t static COLLISIONFILTERGROUP_CUSTOMFILTER8:number = 0x2000;\r\n\t\t/**自定义过滤9 */\r\n\t\t static COLLISIONFILTERGROUP_CUSTOMFILTER9:number = 0x4000;\r\n\t\t/**自定义过滤10*/\r\n\t\t static COLLISIONFILTERGROUP_CUSTOMFILTER10:number = 0x8000;\r\n\t\t/**所有过滤 */\r\n\t\t static COLLISIONFILTERGROUP_ALLFILTER:number = -1;\r\n\t\t\r\n\t\t/**重力值。*/\r\n\t\t static gravity:Vector3 = new Vector3(0, -9.81, 0);\r\n\t\t\r\n\t\t/**\r\n\t\t * 创建一个 <code>Physics</code> 实例。\r\n\t\t */\r\n\t\tconstructor(){\r\n\t\t\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 是否忽略两个碰撞器的碰撞检测。\r\n\t\t * @param\tcollider1 碰撞器一。\r\n\t\t * @param\tcollider2 碰撞器二。\r\n\t\t * @param\tignore 是否忽略。\r\n\t\t */\r\n\t\t static setColliderCollision(collider1:PhysicsComponent, collider2:PhysicsComponent, collsion:boolean):void {\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 获取是否忽略两个碰撞器的碰撞检测。\r\n\t\t * @param\tcollider1 碰撞器一。\r\n\t\t * @param\tcollider2 碰撞器二。\r\n\t\t * @return\t是否忽略。\r\n\t\t */\r\n\t\t static getIColliderCollision(collider1:PhysicsComponent, collider2:PhysicsComponent):boolean {\r\n\t\t\t//return collider1._ignoreCollisonMap[collider2.id] ? true : false;\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\r\n\t}\r\n\r\n\r\n","import { TextureFormat } from \"../../RenderEngine/RenderEnum/TextureFormat\";\r\nimport { Texture2D } from \"../../resource/Texture2D\"\r\n\r\n\r\n/**\r\n * 贴图生成器\r\n * @internal\r\n * @author\r\n */\r\nexport class TextureGenerator {\r\n\r\n\tconstructor() {\r\n\r\n\t}\r\n\r\n\tstatic lightAttenTexture(x: number, y: number, maxX: number, maxY: number, index: number, data: Uint8Array): void {\r\n\r\n\t\tvar sqrRange: number = x / maxX;\r\n\t\tvar atten: number = 1.0 / (1.0 + 25.0 * sqrRange);\r\n\t\tif (sqrRange >= 0.64) {\r\n\t\t\tif (sqrRange > 1.0) {\r\n\t\t\t\tatten = 0;\r\n\t\t\t} else {\r\n\t\t\t\tatten *= 1 - (sqrRange - 0.64) / (1 - 0.64);\r\n\t\t\t}\r\n\t\t}\r\n\t\tdata[index] = Math.floor(atten * 255.0 + 0.5);\r\n\t}\r\n\r\n\tstatic haloTexture(x: number, y: number, maxX: number, maxY: number, index: number, data: Uint8Array): void {\r\n\r\n\t\tmaxX >>= 1;\r\n\t\tmaxY >>= 1;\r\n\t\tvar xFac: number = (x - maxX) / maxX;\r\n\t\tvar yFac: number = (y - maxY) / maxY;\r\n\t\tvar sqrRange: number = xFac * xFac + yFac * yFac;\r\n\t\tif (sqrRange > 1.0) {\r\n\t\t\tsqrRange = 1.0;\r\n\t\t}\r\n\t\tdata[index] = Math.floor((1.0 - sqrRange) * 255.0 + 0.5);\r\n\t}\r\n\r\n\tstatic _generateTexture2D(texture: Texture2D, textureWidth: number, textureHeight: number, func: Function): void {\r\n\t\tvar index: number = 0;\r\n\t\tvar size: number = 0;\r\n\t\tswitch (texture.format) {\r\n\t\t\tcase TextureFormat.R8G8B8:\r\n\t\t\t\tsize = 3;\r\n\t\t\t\tbreak;\r\n\t\t\tcase TextureFormat.R8G8B8A8:\r\n\t\t\t\tsize = 4;\r\n\t\t\t\tbreak;\r\n\t\t\tcase TextureFormat.Alpha8:\r\n\t\t\t\tsize = 1;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow \"GeneratedTexture._generateTexture: unkonw texture format.\";\r\n\t\t}\r\n\r\n\t\tvar data: Uint8Array = new Uint8Array(textureWidth * textureHeight * size);\r\n\t\tfor (var y: number = 0; y < textureHeight; y++) {\r\n\t\t\tfor (var x: number = 0; x < textureWidth; x++) {\r\n\t\t\t\tfunc(x, y, textureWidth, textureHeight, index, data);\r\n\t\t\t\tindex += size;\r\n\t\t\t}\r\n\t\t}\r\n\t\ttexture.setPixelsData(data, false, false);\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { Scene3D } from \"./laya/d3/core/scene/Scene3D\";\r\nimport { Laya3D } from \"./Laya3D\";\r\nimport { Physics3D } from \"./laya/d3/Physics3D\";\r\n\r\n/**\r\n * @internal\r\n * 使用全局类的时候，避免引用其他模块\r\n */\r\nexport class ILaya3D {\r\n    static Scene3D: typeof Scene3D = null;\r\n    static Laya3D: typeof Laya3D = null;\r\n    static Physics3D: typeof Physics3D = null;\r\n}\r\n","import { Node } from \"../../display/Node\";\r\nimport { Texture2D } from \"../../resource/Texture2D\";\r\nimport { PixelLineSprite3D } from \"../core/pixelLine/PixelLineSprite3D\";\r\nimport { BoundBox } from \"../math/BoundBox\";\r\nimport { TextureGenerator } from \"../resource/TextureGenerator\";\r\nimport { ILaya3D } from \"../../../ILaya3D\";\r\nimport { HTMLCanvas } from \"../../resource/HTMLCanvas\";\r\nimport { TextureFormat } from \"../../RenderEngine/RenderEnum/TextureFormat\";\r\nimport { FilterMode } from \"../../RenderEngine/RenderEnum/FilterMode\";\r\nimport { WrapMode } from \"../../RenderEngine/RenderEnum/WrapMode\";\r\nimport { RenderTargetFormat } from \"../../RenderEngine/RenderEnum/RenderTargetFormat\";\r\nimport { LayaEnv } from \"../../../LayaEnv\";\r\nimport { Bounds } from \"../math/Bounds\";\r\nimport { Color } from \"../../maths/Color\";\r\nimport { Matrix4x4 } from \"../../maths/Matrix4x4\";\r\nimport { Quaternion } from \"../../maths/Quaternion\";\r\nimport { Vector3 } from \"../../maths/Vector3\";\r\nimport { Vector4 } from \"../../maths/Vector4\";\r\nimport { RenderTexture } from \"../../resource/RenderTexture\";\r\n\r\n/**\r\n * <code>Utils3D</code> 类用于创建3D工具。\r\n */\r\nexport class Utils3D {\r\n    private static _tempVector3_0: Vector3 = new Vector3();\r\n    private static _tempVector3_1: Vector3 = new Vector3();\r\n    private static _tempVector3_2: Vector3 = new Vector3();\r\n\r\n    private static _tempArray16_0: Float32Array = new Float32Array(16);\r\n    private static _tempArray16_1: Float32Array = new Float32Array(16);\r\n    private static _tempArray16_2: Float32Array = new Float32Array(16);\r\n    private static _tempArray16_3: Float32Array = new Float32Array(16);\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    static _createFloatTextureBuffer(width: number, height: number): Texture2D {\r\n        var floatTex: Texture2D = new Texture2D(width, height, TextureFormat.R32G32B32A32, false, false);\r\n        floatTex.setPixelsData(null, false, false);\r\n        floatTex.filterMode = FilterMode.Point;\r\n        floatTex.wrapModeU = WrapMode.Clamp;\r\n        floatTex.wrapModeV = WrapMode.Clamp;\r\n        floatTex.anisoLevel = 0;\r\n        return floatTex;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    static _convertToLayaVec3(bVector: number, out: Vector3): void {\r\n        var bullet: any = ILaya3D.Physics3D._bullet;\r\n        out.x = bullet.btVector3_x(bVector);\r\n        out.y = bullet.btVector3_y(bVector);\r\n        out.z = bullet.btVector3_z(bVector);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    static _convertToBulletVec3(lVector: Vector3, out: number): void {\r\n        ILaya3D.Physics3D._bullet.btVector3_setValue(out, lVector.x, lVector.y, lVector.z);\r\n    }\r\n\r\n    /**\r\n     *通过数平移、旋转、缩放值计算到结果矩阵数组,骨骼动画专用。\r\n     * @param tx left矩阵数组。\r\n     * @param ty left矩阵数组的偏移。\r\n     * @param tz right矩阵数组。\r\n     * @param qx right矩阵数组的偏移。\r\n     * @param qy 输出矩阵数组。\r\n     * @param qz 输出矩阵数组的偏移。\r\n     * @param qw 输出矩阵数组的偏移。\r\n     * @param sx 输出矩阵数组的偏移。\r\n     * @param sy 输出矩阵数组的偏移。\r\n     * @param sz 输出矩阵数组的偏移。\r\n     * @param outArray 结果矩阵数组。\r\n     * @param outOffset 结果矩阵数组的偏移。\r\n     */\r\n    private static _rotationTransformScaleSkinAnimation(tx: number, ty: number, tz: number, qx: number, qy: number, qz: number, qw: number, sx: number, sy: number, sz: number, outArray: Float32Array, outOffset: number): void {\r\n\r\n        var re: Float32Array = Utils3D._tempArray16_0;\r\n        var se: Float32Array = Utils3D._tempArray16_1;\r\n        var tse: Float32Array = Utils3D._tempArray16_2;\r\n\r\n        //平移\r\n\r\n        //旋转\r\n        var x2: number = qx + qx;\r\n        var y2: number = qy + qy;\r\n        var z2: number = qz + qz;\r\n\r\n        var xx: number = qx * x2;\r\n        var yx: number = qy * x2;\r\n        var yy: number = qy * y2;\r\n        var zx: number = qz * x2;\r\n        var zy: number = qz * y2;\r\n        var zz: number = qz * z2;\r\n        var wx: number = qw * x2;\r\n        var wy: number = qw * y2;\r\n        var wz: number = qw * z2;\r\n\r\n        //re[3] = re[7] = re[11] = re[12] = re[13] = re[14] = 0;\r\n        re[15] = 1;\r\n        re[0] = 1 - yy - zz;\r\n        re[1] = yx + wz;\r\n        re[2] = zx - wy;\r\n\r\n        re[4] = yx - wz;\r\n        re[5] = 1 - xx - zz;\r\n        re[6] = zy + wx;\r\n\r\n        re[8] = zx + wy;\r\n        re[9] = zy - wx;\r\n        re[10] = 1 - xx - yy;\r\n\r\n        //缩放\r\n        //se[4] = se[8] = se[12] = se[1] = se[9] = se[13] = se[2] = se[6] = se[14] = se[3] = se[7] = se[11] = 0;\r\n        se[15] = 1;\r\n        se[0] = sx;\r\n        se[5] = sy;\r\n        se[10] = sz;\r\n\r\n        var i: number, ai0: number, ai1: number, ai2: number, ai3: number;\r\n        //mul(rMat, tMat, tsMat)......................................\r\n        for (i = 0; i < 4; i++) {\r\n            ai0 = re[i];\r\n            ai1 = re[i + 4];\r\n            ai2 = re[i + 8];\r\n            ai3 = re[i + 12];\r\n            tse[i] = ai0;\r\n            tse[i + 4] = ai1;\r\n            tse[i + 8] = ai2;\r\n            tse[i + 12] = ai0 * tx + ai1 * ty + ai2 * tz + ai3;\r\n        }\r\n\r\n        //mul(tsMat, sMat, out)..............................................\r\n        for (i = 0; i < 4; i++) {\r\n            ai0 = tse[i];\r\n            ai1 = tse[i + 4];\r\n            ai2 = tse[i + 8];\r\n            ai3 = tse[i + 12];\r\n            outArray[i + outOffset] = ai0 * se[0] + ai1 * se[1] + ai2 * se[2] + ai3 * se[3];\r\n            outArray[i + outOffset + 4] = ai0 * se[4] + ai1 * se[5] + ai2 * se[6] + ai3 * se[7];\r\n            outArray[i + outOffset + 8] = ai0 * se[8] + ai1 * se[9] + ai2 * se[10] + ai3 * se[11];\r\n            outArray[i + outOffset + 12] = ai0 * se[12] + ai1 * se[13] + ai2 * se[14] + ai3 * se[15];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    static _compIdToNode: any = new Object();\r\n    static _tempV0: Vector3 = new Vector3();\r\n    static _tempV1: Vector3 = new Vector3();\r\n\r\n    /**\r\n     * 将顶点进行billboard转换\r\n     */\r\n    static billboardTrans(v0: Vector3, cameraDir: Vector3, cameraUp: Vector3, out: Vector3) {\r\n        //vec3 positionOS = vertex.positionOS.x * normalize(cross(u_CameraDirection, u_CameraUp));\r\n        //positionOS += vertex.positionOS.y * normalize(u_CameraUp);\r\n        Vector3.normalize(cameraUp, Utils3D._tempV1);\r\n        Vector3.cross(cameraDir, cameraUp, Utils3D._tempV0);\r\n        Vector3.normalize(Utils3D._tempV0, Utils3D._tempV0);\r\n        Vector3.scale(Utils3D._tempV0, v0.x, out);\r\n        Vector3.scale(cameraUp, v0.y, Utils3D._tempV1);\r\n        Vector3.add(out, Utils3D._tempV1, out);\r\n    }\r\n\r\n    /**\r\n     * 判断P点是否在ABC组成的三角形中\r\n     * https://mathworld.wolfram.com/BarycentricCoordinates.html\r\n     * @param A \r\n     * @param B \r\n     * @param C \r\n     * @param P \r\n     * @returns \r\n     */\r\n    static PointinTriangle(A: Vector3, B: Vector3, C: Vector3, P: Vector3): boolean {\r\n        let v0 = C.vsub(A, Utils3D._tempVector3_0);\r\n        let v1 = B.vsub(A, Utils3D._tempVector3_1);\r\n        let v2 = P.vsub(A, Utils3D._tempVector3_2);\r\n\r\n        let dot00 = v0.dot(v0);\r\n        let dot01 = v0.dot(v1);\r\n        let dot02 = v0.dot(v2);\r\n        let dot11 = v1.dot(v1);\r\n        let dot12 = v1.dot(v2);\r\n\r\n        let inverDeno = 1 / (dot00 * dot11 - dot01 * dot01);\r\n\r\n        let u = (dot11 * dot02 - dot01 * dot12) * inverDeno;\r\n        if (u < 0 || u > 1) // if u out of range, return directly\r\n        {\r\n            return false;\r\n        }\r\n\r\n\r\n        let v = (dot00 * dot12 - dot01 * dot02) * inverDeno;\r\n        if (v < 0 || v > 1) // if v out of range, return directly\r\n        {\r\n            return false;\r\n        }\r\n        return u + v <= 1;\r\n    }\r\n\r\n\r\n    /** @internal */\r\n    static _computeBoneAndAnimationDatasByBindPoseMatrxix(bones: any, curData: Float32Array, inverGlobalBindPose: Matrix4x4[], outBonesDatas: Float32Array, outAnimationDatas: Float32Array, boneIndexToMesh: number[]): void {\r\n\r\n        var offset: number = 0;\r\n        var matOffset: number = 0;\r\n\r\n        var i: number;\r\n        var parentOffset: number;\r\n        var boneLength: number = bones.length;\r\n        for (i = 0; i < boneLength; offset += bones[i].keyframeWidth, matOffset += 16, i++) {\r\n            //将旋转平移缩放合成矩阵...........................................\r\n            Utils3D._rotationTransformScaleSkinAnimation(curData[offset + 0], curData[offset + 1], curData[offset + 2], curData[offset + 3], curData[offset + 4], curData[offset + 5], curData[offset + 6], curData[offset + 7], curData[offset + 8], curData[offset + 9], outBonesDatas, matOffset);\r\n\r\n            if (i != 0) {\r\n                parentOffset = bones[i].parentIndex * 16;\r\n                Utils3D.mulMatrixByArray(outBonesDatas, parentOffset, outBonesDatas, matOffset, outBonesDatas, matOffset);\r\n            }\r\n        }\r\n\r\n        var n: number = inverGlobalBindPose.length;\r\n        for (i = 0; i < n; i++)//将绝对矩阵乘以反置矩阵................................................\r\n        {\r\n            Utils3D.mulMatrixByArrayAndMatrixFast(outBonesDatas, boneIndexToMesh[i] * 16, inverGlobalBindPose[i], outAnimationDatas, i * 16);//TODO:-1处理\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    static _computeAnimationDatasByArrayAndMatrixFast(inverGlobalBindPose: Matrix4x4[], bonesDatas: Float32Array, outAnimationDatas: Float32Array, boneIndexToMesh: number[]): void {\r\n        for (var i: number = 0, n: number = inverGlobalBindPose.length; i < n; i++)//将绝对矩阵乘以反置矩阵\r\n            Utils3D.mulMatrixByArrayAndMatrixFast(bonesDatas, boneIndexToMesh[i] * 16, inverGlobalBindPose[i], outAnimationDatas, i * 16);//TODO:-1处理\r\n    }\r\n\r\n    /** @internal */\r\n    static _computeBoneAndAnimationDatasByBindPoseMatrxixOld(bones: any, curData: Float32Array, inverGlobalBindPose: Matrix4x4[], outBonesDatas: Float32Array, outAnimationDatas: Float32Array): void {\r\n\r\n        var offset: number = 0;\r\n        var matOffset: number = 0;\r\n\r\n        var i: number;\r\n        var parentOffset: number;\r\n        var boneLength: number = bones.length;\r\n        for (i = 0; i < boneLength; offset += bones[i].keyframeWidth, matOffset += 16, i++) {\r\n            //将旋转平移缩放合成矩阵...........................................\r\n            Utils3D._rotationTransformScaleSkinAnimation(curData[offset + 7], curData[offset + 8], curData[offset + 9], curData[offset + 3], curData[offset + 4], curData[offset + 5], curData[offset + 6], curData[offset + 0], curData[offset + 1], curData[offset + 2], outBonesDatas, matOffset);\r\n\r\n            if (i != 0) {\r\n                parentOffset = bones[i].parentIndex * 16;\r\n                Utils3D.mulMatrixByArray(outBonesDatas, parentOffset, outBonesDatas, matOffset, outBonesDatas, matOffset);\r\n            }\r\n        }\r\n\r\n        var n: number = inverGlobalBindPose.length;\r\n        for (i = 0; i < n; i++)//将绝对矩阵乘以反置矩阵................................................\r\n        {\r\n            var arrayOffset: number = i * 16;\r\n            Utils3D.mulMatrixByArrayAndMatrixFast(outBonesDatas, arrayOffset, inverGlobalBindPose[i], outAnimationDatas, arrayOffset);\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    static _computeAnimationDatasByArrayAndMatrixFastOld(inverGlobalBindPose: Matrix4x4[], bonesDatas: Float32Array, outAnimationDatas: Float32Array): void {\r\n        var n: number = inverGlobalBindPose.length;\r\n        for (var i: number = 0; i < n; i++)//将绝对矩阵乘以反置矩阵................................................\r\n        {\r\n            var arrayOffset: number = i * 16;\r\n            Utils3D.mulMatrixByArrayAndMatrixFast(bonesDatas, arrayOffset, inverGlobalBindPose[i], outAnimationDatas, arrayOffset);\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    static _computeRootAnimationData(bones: any, curData: Float32Array, animationDatas: Float32Array): void {\r\n\r\n        for (var i: number = 0, offset: number = 0, matOffset: number = 0, boneLength: number = bones.length; i < boneLength; offset += bones[i].keyframeWidth, matOffset += 16, i++)\r\n            Utils3D.createAffineTransformationArray(curData[offset + 0], curData[offset + 1], curData[offset + 2], curData[offset + 3], curData[offset + 4], curData[offset + 5], curData[offset + 6], curData[offset + 7], curData[offset + 8], curData[offset + 9], animationDatas, matOffset);\r\n    }\r\n\r\n    /**\r\n     * 根据四元数旋转三维向量。\r\n     * @param\tsource 源三维向量。\r\n     * @param\trotation 旋转四元数。\r\n     * @param\tout 输出三维向量。\r\n     */\r\n    static transformVector3ArrayByQuat(sourceArray: Float32Array, sourceOffset: number, rotation: Quaternion, outArray: Float32Array, outOffset: number): void {\r\n        var x: number = sourceArray[sourceOffset], y: number = sourceArray[sourceOffset + 1], z: number = sourceArray[sourceOffset + 2], qx: number = rotation.x, qy: number = rotation.y, qz: number = rotation.z, qw: number = rotation.w, ix: number = qw * x + qy * z - qz * y, iy: number = qw * y + qz * x - qx * z, iz: number = qw * z + qx * y - qy * x, iw: number = -qx * x - qy * y - qz * z;\r\n        outArray[outOffset] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\r\n        outArray[outOffset + 1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\r\n        outArray[outOffset + 2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\r\n    }\r\n\r\n    /**\r\n     *通过数组数据计算矩阵乘法。\r\n     * @param leftArray left矩阵数组。\r\n     * @param leftOffset left矩阵数组的偏移。\r\n     * @param rightArray right矩阵数组。\r\n     * @param rightOffset right矩阵数组的偏移。\r\n     * @param outArray 输出矩阵数组。\r\n     * @param outOffset 输出矩阵数组的偏移。\r\n     */\r\n    static mulMatrixByArray(leftArray: Float32Array, leftOffset: number, rightArray: Float32Array, rightOffset: number, outArray: Float32Array, outOffset: number): void {\r\n\r\n        var i: number, ai0: number, ai1: number, ai2: number, ai3: number;\r\n\r\n        if (outArray === rightArray) {\r\n            rightArray = Utils3D._tempArray16_3;\r\n            for (i = 0; i < 16; ++i) {\r\n                rightArray[i] = outArray[outOffset + i];\r\n            }\r\n            rightOffset = 0;\r\n        }\r\n\r\n        for (i = 0; i < 4; i++) {\r\n            ai0 = leftArray[leftOffset + i];\r\n            ai1 = leftArray[leftOffset + i + 4];\r\n            ai2 = leftArray[leftOffset + i + 8];\r\n            ai3 = leftArray[leftOffset + i + 12];\r\n            outArray[outOffset + i] = ai0 * rightArray[rightOffset + 0] + ai1 * rightArray[rightOffset + 1] + ai2 * rightArray[rightOffset + 2] + ai3 * rightArray[rightOffset + 3];\r\n            outArray[outOffset + i + 4] = ai0 * rightArray[rightOffset + 4] + ai1 * rightArray[rightOffset + 5] + ai2 * rightArray[rightOffset + 6] + ai3 * rightArray[rightOffset + 7];\r\n            outArray[outOffset + i + 8] = ai0 * rightArray[rightOffset + 8] + ai1 * rightArray[rightOffset + 9] + ai2 * rightArray[rightOffset + 10] + ai3 * rightArray[rightOffset + 11];\r\n            outArray[outOffset + i + 12] = ai0 * rightArray[rightOffset + 12] + ai1 * rightArray[rightOffset + 13] + ai2 * rightArray[rightOffset + 14] + ai3 * rightArray[rightOffset + 15];\r\n        }\r\n    }\r\n\r\n    /**\r\n     *通过数组数据计算矩阵乘法,rightArray和outArray不能为同一数组引用。\r\n     * @param leftArray left矩阵数组。\r\n     * @param leftOffset left矩阵数组的偏移。\r\n     * @param rightArray right矩阵数组。\r\n     * @param rightOffset right矩阵数组的偏移。\r\n     * @param outArray 结果矩阵数组。\r\n     * @param outOffset 结果矩阵数组的偏移。\r\n     */\r\n    static mulMatrixByArrayFast(leftArray: Float32Array, leftOffset: number, rightArray: Float32Array, rightOffset: number, outArray: Float32Array, outOffset: number): void {\r\n\r\n        var i: number, ai0: number, ai1: number, ai2: number, ai3: number;\r\n        for (i = 0; i < 4; i++) {\r\n            ai0 = leftArray[leftOffset + i];\r\n            ai1 = leftArray[leftOffset + i + 4];\r\n            ai2 = leftArray[leftOffset + i + 8];\r\n            ai3 = leftArray[leftOffset + i + 12];\r\n            outArray[outOffset + i] = ai0 * rightArray[rightOffset + 0] + ai1 * rightArray[rightOffset + 1] + ai2 * rightArray[rightOffset + 2] + ai3 * rightArray[rightOffset + 3];\r\n            outArray[outOffset + i + 4] = ai0 * rightArray[rightOffset + 4] + ai1 * rightArray[rightOffset + 5] + ai2 * rightArray[rightOffset + 6] + ai3 * rightArray[rightOffset + 7];\r\n            outArray[outOffset + i + 8] = ai0 * rightArray[rightOffset + 8] + ai1 * rightArray[rightOffset + 9] + ai2 * rightArray[rightOffset + 10] + ai3 * rightArray[rightOffset + 11];\r\n            outArray[outOffset + i + 12] = ai0 * rightArray[rightOffset + 12] + ai1 * rightArray[rightOffset + 13] + ai2 * rightArray[rightOffset + 14] + ai3 * rightArray[rightOffset + 15];\r\n        }\r\n    }\r\n\r\n    /**\r\n     *通过数组数据计算矩阵乘法,rightArray和outArray不能为同一数组引用。\r\n     * @param leftArray left矩阵数组。\r\n     * @param leftOffset left矩阵数组的偏移。\r\n     * @param rightMatrix right矩阵。\r\n     * @param outArray 结果矩阵数组。\r\n     * @param outOffset 结果矩阵数组的偏移。\r\n     */\r\n    static mulMatrixByArrayAndMatrixFast(leftArray: Float32Array, leftOffset: number, rightMatrix: Matrix4x4, outArray: Float32Array, outOffset: number): void {\r\n\r\n        var i: number, ai0: number, ai1: number, ai2: number, ai3: number;\r\n        var rightMatrixE: Float32Array = rightMatrix.elements;\r\n        var m11: number = rightMatrixE[0], m12: number = rightMatrixE[1], m13: number = rightMatrixE[2], m14: number = rightMatrixE[3];\r\n        var m21: number = rightMatrixE[4], m22: number = rightMatrixE[5], m23: number = rightMatrixE[6], m24: number = rightMatrixE[7];\r\n        var m31: number = rightMatrixE[8], m32: number = rightMatrixE[9], m33: number = rightMatrixE[10], m34: number = rightMatrixE[11];\r\n        var m41: number = rightMatrixE[12], m42: number = rightMatrixE[13], m43: number = rightMatrixE[14], m44: number = rightMatrixE[15];\r\n        var ai0LeftOffset: number = leftOffset;\r\n        var ai1LeftOffset: number = leftOffset + 4;\r\n        var ai2LeftOffset: number = leftOffset + 8;\r\n        var ai3LeftOffset: number = leftOffset + 12;\r\n        var ai0OutOffset: number = outOffset;\r\n        var ai1OutOffset: number = outOffset + 4;\r\n        var ai2OutOffset: number = outOffset + 8;\r\n        var ai3OutOffset: number = outOffset + 12;\r\n\r\n        for (i = 0; i < 4; i++) {\r\n            ai0 = leftArray[ai0LeftOffset + i];\r\n            ai1 = leftArray[ai1LeftOffset + i];\r\n            ai2 = leftArray[ai2LeftOffset + i];\r\n            ai3 = leftArray[ai3LeftOffset + i];\r\n            outArray[ai0OutOffset + i] = ai0 * m11 + ai1 * m12 + ai2 * m13 + ai3 * m14;\r\n            outArray[ai1OutOffset + i] = ai0 * m21 + ai1 * m22 + ai2 * m23 + ai3 * m24;\r\n            outArray[ai2OutOffset + i] = ai0 * m31 + ai1 * m32 + ai2 * m33 + ai3 * m34;\r\n            outArray[ai3OutOffset + i] = ai0 * m41 + ai1 * m42 + ai2 * m43 + ai3 * m44;\r\n        }\r\n    }\r\n\r\n    /**\r\n     *通过数平移、旋转、缩放值计算到结果矩阵数组。\r\n     * @param tX left矩阵数组。\r\n     * @param tY left矩阵数组的偏移。\r\n     * @param tZ right矩阵数组。\r\n     * @param qX right矩阵数组的偏移。\r\n     * @param qY 输出矩阵数组。\r\n     * @param qZ 输出矩阵数组的偏移。\r\n     * @param qW 输出矩阵数组的偏移。\r\n     * @param sX 输出矩阵数组的偏移。\r\n     * @param sY 输出矩阵数组的偏移。\r\n     * @param sZ 输出矩阵数组的偏移。\r\n     * @param outArray 结果矩阵数组。\r\n     * @param outOffset 结果矩阵数组的偏移。\r\n     */\r\n    static createAffineTransformationArray(tX: number, tY: number, tZ: number, rX: number, rY: number, rZ: number, rW: number, sX: number, sY: number, sZ: number, outArray: Float32Array, outOffset: number): void {\r\n\r\n        var x2: number = rX + rX, y2: number = rY + rY, z2: number = rZ + rZ;\r\n        var xx: number = rX * x2, xy: number = rX * y2, xz: number = rX * z2, yy: number = rY * y2, yz: number = rY * z2, zz: number = rZ * z2;\r\n        var wx: number = rW * x2, wy: number = rW * y2, wz: number = rW * z2;\r\n\r\n        outArray[outOffset + 0] = (1 - (yy + zz)) * sX;\r\n        outArray[outOffset + 1] = (xy + wz) * sX;\r\n        outArray[outOffset + 2] = (xz - wy) * sX;\r\n        outArray[outOffset + 3] = 0;\r\n        outArray[outOffset + 4] = (xy - wz) * sY;\r\n        outArray[outOffset + 5] = (1 - (xx + zz)) * sY;\r\n        outArray[outOffset + 6] = (yz + wx) * sY;\r\n        outArray[outOffset + 7] = 0;\r\n        outArray[outOffset + 8] = (xz + wy) * sZ;\r\n        outArray[outOffset + 9] = (yz - wx) * sZ;\r\n        outArray[outOffset + 10] = (1 - (xx + yy)) * sZ;\r\n        outArray[outOffset + 11] = 0;\r\n        outArray[outOffset + 12] = tX;\r\n        outArray[outOffset + 13] = tY;\r\n        outArray[outOffset + 14] = tZ;\r\n        outArray[outOffset + 15] = 1;\r\n    }\r\n\r\n    /**\r\n     * 通过矩阵转换一个三维向量数组到另外一个三维向量数组。\r\n     * @param\tsource 源三维向量所在数组。\r\n     * @param\tsourceOffset 源三维向量数组偏移。\r\n     * @param\ttransform  变换矩阵。\r\n     * @param\tresult 输出三维向量所在数组。\r\n     * @param\tresultOffset 输出三维向量数组偏移。\r\n     */\r\n    static transformVector3ArrayToVector3ArrayCoordinate(source: Float32Array, sourceOffset: number, transform: Matrix4x4, result: Float32Array, resultOffset: number): void {\r\n        var coordinateX: number = source[sourceOffset + 0];\r\n        var coordinateY: number = source[sourceOffset + 1];\r\n        var coordinateZ: number = source[sourceOffset + 2];\r\n\r\n        var transformElem: Float32Array = transform.elements;\r\n        var w: number = ((coordinateX * transformElem[3]) + (coordinateY * transformElem[7]) + (coordinateZ * transformElem[11]) + transformElem[15]);\r\n        result[resultOffset] = (coordinateX * transformElem[0]) + (coordinateY * transformElem[4]) + (coordinateZ * transformElem[8]) + transformElem[12] / w;\r\n        result[resultOffset + 1] = (coordinateX * transformElem[1]) + (coordinateY * transformElem[5]) + (coordinateZ * transformElem[9]) + transformElem[13] / w;\r\n        result[resultOffset + 2] = (coordinateX * transformElem[2]) + (coordinateY * transformElem[6]) + (coordinateZ * transformElem[10]) + transformElem[14] / w;\r\n    }\r\n\r\n    /**\r\n     * 通过矩阵转换一个三维向量数组到另外一个归一化的三维向量数组。\r\n     * @param source 源三维向量所在数组。\r\n     * @param sourceOffset 源三维向量数组偏移。\r\n     * @param transform 变换矩阵。\r\n     * @param result 输出三维向量所在数组。\r\n     * @param resultOffset 输出三维向量数组偏移。\r\n     */\r\n    static transformVector3ArrayToVector3ArrayNormal(source: Float32Array, sourceOffset: number, transform: Matrix4x4, result: Float32Array, resultOffset: number): void {\r\n        var coordinateX: number = source[sourceOffset + 0];\r\n        var coordinateY: number = source[sourceOffset + 1];\r\n        var coordinateZ: number = source[sourceOffset + 2];\r\n\r\n        var transformElem: Float32Array = transform.elements;\r\n        result[resultOffset] = coordinateX * transformElem[0] + coordinateY * transformElem[4] + coordinateZ * transformElem[8];\r\n        result[resultOffset + 1] = coordinateX * transformElem[1] + coordinateY * transformElem[5] + coordinateZ * transformElem[9];\r\n        result[resultOffset + 2] = coordinateX * transformElem[2] + coordinateY * transformElem[6] + coordinateZ * transformElem[10];\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    static transformLightingMapTexcoordArray(source: Float32Array, sourceOffset: number, lightingMapScaleOffset: Vector4, result: Float32Array, resultOffset: number): void {\r\n        result[resultOffset + 0] = source[sourceOffset + 0] * lightingMapScaleOffset.x + lightingMapScaleOffset.z;\r\n        result[resultOffset + 1] = 1.0 - ((1.0 - source[sourceOffset + 1]) * lightingMapScaleOffset.y + lightingMapScaleOffset.w);\r\n    }\r\n\r\n    /**\r\n     * 获取URL版本字符。\r\n     * @param\turl\r\n     * @return\r\n     */\r\n    static getURLVerion(url: string): string {\r\n        var index: number = url.indexOf(\"?\");\r\n        return index >= 0 ? url.substr(index) : null;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    static _createAffineTransformationArray(trans: Vector3, rot: Quaternion, scale: Vector3, outE: Float32Array): void {\r\n\r\n        var x: number = rot.x, y: number = rot.y, z: number = rot.z, w: number = rot.w, x2: number = x + x, y2: number = y + y, z2: number = z + z;\r\n        var xx: number = x * x2, xy: number = x * y2, xz: number = x * z2, yy: number = y * y2, yz: number = y * z2, zz: number = z * z2;\r\n        var wx: number = w * x2, wy: number = w * y2, wz: number = w * z2, sx: number = scale.x, sy: number = scale.y, sz: number = scale.z;\r\n\r\n        outE[0] = (1 - (yy + zz)) * sx;\r\n        outE[1] = (xy + wz) * sx;\r\n        outE[2] = (xz - wy) * sx;\r\n        outE[3] = 0;\r\n        outE[4] = (xy - wz) * sy;\r\n        outE[5] = (1 - (xx + zz)) * sy;\r\n        outE[6] = (yz + wx) * sy;\r\n        outE[7] = 0;\r\n        outE[8] = (xz + wy) * sz;\r\n        outE[9] = (yz - wx) * sz;\r\n        outE[10] = (1 - (xx + yy)) * sz;\r\n        outE[11] = 0;\r\n        outE[12] = trans.x;\r\n        outE[13] = trans.y;\r\n        outE[14] = trans.z;\r\n        outE[15] = 1;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    static _mulMatrixArray(left: Float32Array, right: Float32Array, rightOffset: number, outArray: Float32Array, outOffset: number): void {\r\n        var l: Float32Array = right;\r\n        var r: Float32Array = left;\r\n        var e: Float32Array = outArray;\r\n\r\n        var l11: number = l[rightOffset], l12: number = l[rightOffset + 1], l13: number = l[rightOffset + 2], l14: number = l[rightOffset + 3];\r\n        var l21: number = l[rightOffset + 4], l22: number = l[rightOffset + 5], l23: number = l[rightOffset + 6], l24: number = l[rightOffset + 7];\r\n        var l31: number = l[rightOffset + 8], l32: number = l[rightOffset + 9], l33: number = l[rightOffset + 10], l34: number = l[rightOffset + 11];\r\n        var l41: number = l[rightOffset + 12], l42: number = l[rightOffset + 13], l43: number = l[rightOffset + 14], l44: number = l[rightOffset + 15];\r\n\r\n        var r11: number = r[0], r12: number = r[1], r13: number = r[2], r14: number = r[3];\r\n        var r21: number = r[4], r22: number = r[5], r23: number = r[6], r24: number = r[7];\r\n        var r31: number = r[8], r32: number = r[9], r33: number = r[10], r34: number = r[11];\r\n        var r41: number = r[12], r42: number = r[13], r43: number = r[14], r44: number = r[15];\r\n\r\n        e[outOffset] = (l11 * r11) + (l12 * r21) + (l13 * r31) + (l14 * r41);\r\n        e[outOffset + 1] = (l11 * r12) + (l12 * r22) + (l13 * r32) + (l14 * r42);\r\n        e[outOffset + 2] = (l11 * r13) + (l12 * r23) + (l13 * r33) + (l14 * r43);\r\n        e[outOffset + 3] = (l11 * r14) + (l12 * r24) + (l13 * r34) + (l14 * r44);\r\n        e[outOffset + 4] = (l21 * r11) + (l22 * r21) + (l23 * r31) + (l24 * r41);\r\n        e[outOffset + 5] = (l21 * r12) + (l22 * r22) + (l23 * r32) + (l24 * r42);\r\n        e[outOffset + 6] = (l21 * r13) + (l22 * r23) + (l23 * r33) + (l24 * r43);\r\n        e[outOffset + 7] = (l21 * r14) + (l22 * r24) + (l23 * r34) + (l24 * r44);\r\n        e[outOffset + 8] = (l31 * r11) + (l32 * r21) + (l33 * r31) + (l34 * r41);\r\n        e[outOffset + 9] = (l31 * r12) + (l32 * r22) + (l33 * r32) + (l34 * r42);\r\n        e[outOffset + 10] = (l31 * r13) + (l32 * r23) + (l33 * r33) + (l34 * r43);\r\n        e[outOffset + 11] = (l31 * r14) + (l32 * r24) + (l33 * r34) + (l34 * r44);\r\n        e[outOffset + 12] = (l41 * r11) + (l42 * r21) + (l43 * r31) + (l44 * r41);\r\n        e[outOffset + 13] = (l41 * r12) + (l42 * r22) + (l43 * r32) + (l44 * r42);\r\n        e[outOffset + 14] = (l41 * r13) + (l42 * r23) + (l43 * r33) + (l44 * r43);\r\n        e[outOffset + 15] = (l41 * r14) + (l42 * r24) + (l43 * r34) + (l44 * r44);\r\n    }\r\n\r\n    /**@internal */\r\n    private static arcTanAngle(x: number, y: number): number {\r\n\r\n        if (x == 0) {\r\n            if (y == 1)\r\n                return Math.PI / 2;\r\n            return -Math.PI / 2;\r\n        }\r\n        if (x > 0)\r\n            return Math.atan(y / x);\r\n        if (x < 0) {\r\n            if (y > 0)\r\n                return Math.atan(y / x) + Math.PI;\r\n            return Math.atan(y / x) - Math.PI;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    /**@internal */\r\n    static angleTo(from: Vector3, location: Vector3, angle: Vector3): void {\r\n\r\n        Vector3.subtract(location, from, TEMPVector30);\r\n        Vector3.normalize(TEMPVector30, TEMPVector30);\r\n\r\n        angle.x = Math.asin(TEMPVector30.y);\r\n        angle.y = Utils3D.arcTanAngle(-TEMPVector30.z, -TEMPVector30.x);\r\n    }\r\n\r\n    /**\r\n     * 四元数旋转矩阵\r\n     * @param source 源数据\r\n     * @param rotation 旋转四元数Array\r\n     * @param out 输出数据\r\n     */\r\n    static transformQuat(source: Vector3, rotation: Float32Array, out: Vector3): void {\r\n        var re: Float32Array = rotation;\r\n\r\n        var x: number = source.x, y: number = source.y, z: number = source.z, qx: number = re[0], qy: number = re[1], qz: number = re[2], qw: number = re[3],\r\n\r\n            ix: number = qw * x + qy * z - qz * y, iy: number = qw * y + qz * x - qx * z, iz: number = qw * z + qx * y - qy * x, iw: number = -qx * x - qy * y - qz * z;\r\n\r\n        out.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;\r\n        out.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;\r\n        out.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;\r\n    }\r\n\r\n    /**\r\n     * 修改四元数权重\r\n     * @param f 元数据\r\n     * @param weight 权重\r\n     * @param e 目标数据\r\n     */\r\n    static quaternionWeight(f: Quaternion, weight: number, e: Quaternion): void {\r\n        e.x = f.x * weight;\r\n        e.y = f.y * weight;\r\n        e.z = f.z * weight;\r\n        e.w = f.w;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    static quaternionConjugate(value: Quaternion, result: Quaternion): void {\r\n        result.x = -value.x;\r\n        result.y = -value.y;\r\n        result.z = -value.z;\r\n        result.w = value.w;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    static scaleWeight(s: Vector3, w: number, out: Vector3): void {\r\n        var sX: number = s.x, sY: number = s.y, sZ: number = s.z;\r\n        out.x = sX > 0 ? Math.pow(Math.abs(sX), w) : -Math.pow(Math.abs(sX), w);\r\n        out.y = sY > 0 ? Math.pow(Math.abs(sY), w) : -Math.pow(Math.abs(sY), w);\r\n        out.z = sZ > 0 ? Math.pow(Math.abs(sZ), w) : -Math.pow(Math.abs(sZ), w);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    static scaleBlend(sa: Vector3, sb: Vector3, w: number, out: Vector3): void {\r\n        var saw: Vector3 = Utils3D._tempVector3_0;\r\n        var sbw: Vector3 = Utils3D._tempVector3_1;\r\n        Utils3D.scaleWeight(sa, 1.0 - w, saw);\r\n        Utils3D.scaleWeight(sb, w, sbw);\r\n        var sng: Vector3 = w > 0.5 ? sb : sa;\r\n        out.x = sng.x > 0 ? Math.abs(saw.x * sbw.x) : -Math.abs(saw.x * sbw.x);\r\n        out.y = sng.y > 0 ? Math.abs(saw.y * sbw.y) : -Math.abs(saw.y * sbw.y);\r\n        out.z = sng.z > 0 ? Math.abs(saw.z * sbw.z) : -Math.abs(saw.z * sbw.z);\r\n    }\r\n\r\n\r\n    /**@internal */\r\n    static matrix4x4MultiplyFFF(a: Float32Array, b: Float32Array, e: Float32Array): void {\r\n\r\n        var i: number, ai0: number, ai1: number, ai2: number, ai3: number;\r\n        if (e === b) {\r\n            b = new Float32Array(16);\r\n            for (i = 0; i < 16; ++i) {\r\n                b[i] = e[i];\r\n            }\r\n        }\r\n\r\n        var b0: number = b[0], b1: number = b[1], b2: number = b[2], b3: number = b[3];\r\n        var b4: number = b[4], b5: number = b[5], b6: number = b[6], b7: number = b[7];\r\n        var b8: number = b[8], b9: number = b[9], b10: number = b[10], b11: number = b[11];\r\n        var b12: number = b[12], b13: number = b[13], b14: number = b[14], b15: number = b[15];\r\n\r\n        for (i = 0; i < 4; i++) {\r\n            ai0 = a[i];\r\n            ai1 = a[i + 4];\r\n            ai2 = a[i + 8];\r\n            ai3 = a[i + 12];\r\n            e[i] = ai0 * b0 + ai1 * b1 + ai2 * b2 + ai3 * b3;\r\n            e[i + 4] = ai0 * b4 + ai1 * b5 + ai2 * b6 + ai3 * b7;\r\n            e[i + 8] = ai0 * b8 + ai1 * b9 + ai2 * b10 + ai3 * b11;\r\n            e[i + 12] = ai0 * b12 + ai1 * b13 + ai2 * b14 + ai3 * b15;\r\n        }\r\n    }\r\n\r\n    /**@internal */\r\n    static matrix4x4MultiplyMFM(left: Matrix4x4, right: Float32Array, out: Matrix4x4): void {\r\n        Utils3D.matrix4x4MultiplyFFF(left.elements, right, out.elements);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    static _buildTexture2D(width: number, height: number, format: number, colorFunc: Function, mipmaps: boolean = false): Texture2D {\r\n        var texture: Texture2D = new Texture2D(width, height, format, mipmaps, true);\r\n        texture.anisoLevel = 1;\r\n        texture.filterMode = FilterMode.Point;\r\n        TextureGenerator._generateTexture2D(texture, width, height, colorFunc);\r\n        return texture;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    static _drawBound(debugLine: PixelLineSprite3D, boundBox: BoundBox | Bounds, color: Color): void {\r\n        if (debugLine.lineCount + 12 > debugLine.maxLineCount)\r\n            debugLine.maxLineCount += 12;\r\n\r\n        var start: Vector3 = Utils3D._tempVector3_0;\r\n        var end: Vector3 = Utils3D._tempVector3_1;\r\n        var min: Vector3 = boundBox.min;\r\n        var max: Vector3 = boundBox.max;\r\n\r\n        start.setValue(min.x, min.y, min.z);\r\n        end.setValue(max.x, min.y, min.z);\r\n        debugLine.addLine(start, end, color, color);\r\n\r\n        start.setValue(min.x, min.y, min.z);\r\n        end.setValue(min.x, min.y, max.z);\r\n        debugLine.addLine(start, end, color, color);\r\n\r\n        start.setValue(max.x, min.y, min.z);\r\n        end.setValue(max.x, min.y, max.z);\r\n        debugLine.addLine(start, end, color, color);\r\n\r\n        start.setValue(min.x, min.y, max.z);\r\n        end.setValue(max.x, min.y, max.z);\r\n        debugLine.addLine(start, end, color, color);\r\n\r\n        start.setValue(min.x, min.y, min.z);\r\n        end.setValue(min.x, max.y, min.z);\r\n        debugLine.addLine(start, end, color, color);\r\n\r\n        start.setValue(min.x, min.y, max.z);\r\n        end.setValue(min.x, max.y, max.z);\r\n        debugLine.addLine(start, end, color, color);\r\n\r\n        start.setValue(max.x, min.y, min.z);\r\n        end.setValue(max.x, max.y, min.z);\r\n        debugLine.addLine(start, end, color, color);\r\n\r\n        start.setValue(max.x, min.y, max.z);\r\n        end.setValue(max.x, max.y, max.z);\r\n        debugLine.addLine(start, end, color, color);\r\n\r\n        start.setValue(min.x, max.y, min.z);\r\n        end.setValue(max.x, max.y, min.z);\r\n        debugLine.addLine(start, end, color, color);\r\n\r\n        start.setValue(min.x, max.y, min.z);\r\n        end.setValue(min.x, max.y, max.z);\r\n        debugLine.addLine(start, end, color, color);\r\n\r\n        start.setValue(max.x, max.y, min.z);\r\n        end.setValue(max.x, max.y, max.z);\r\n        debugLine.addLine(start, end, color, color);\r\n\r\n        start.setValue(min.x, max.y, max.z);\r\n        end.setValue(max.x, max.y, max.z);\r\n        debugLine.addLine(start, end, color, color);\r\n    }\r\n\r\n    ///**@internal */\r\n    //private static var _tempHierarchyID:int = 0;\r\n    //\r\n    ///**\r\n    //* @internal\r\n    //*/\r\n    //public static function _getSpritesHierarchyID(sprite:Sprite3D, checkSprites:Array, outIDs:Array):void {\r\n    //var index:int = checkSprites.indexOf(sprite);\r\n    //if (index !== -1)\r\n    //outIDs[index] = _tempHierarchyID;\r\n    //_tempHierarchyID++;\r\n    //var children:Array = sprite._children;\r\n    //for (var i:int = 0, n:int = children.length; i < n; i++)\r\n    //_getSpritesHierarchyID(children[i], checkSprites, outIDs);\r\n    //}\r\n\r\n    /**\r\n     * @internal\r\n     * @param rootSprite parent Sprite\r\n     * @param checkSprite check Sprite\r\n     * @param path pathArray\r\n     * @returns \r\n     */\r\n    static _getHierarchyPath(rootSprite: Node, checkSprite: Node, path: number[]): any[] {\r\n        path.length = 0;\r\n        var sprite: Node = checkSprite;\r\n        while (sprite !== rootSprite) {\r\n            var parent: Node = sprite._parent;\r\n            if (parent)\r\n                path.push(parent.getChildIndex(sprite));\r\n            else\r\n                return null;\r\n            sprite = parent;\r\n        }\r\n        return path;\r\n    }\r\n\r\n    /**\r\n     * @interanl\r\n     * @param rootSprite parentNode\r\n     * @param invPath PathArray\r\n     * @returns \r\n     */\r\n    static _getNodeByHierarchyPath(rootSprite: Node, invPath: number[]): Node {\r\n        var sprite: Node = rootSprite;\r\n        for (var i: number = invPath.length - 1; i >= 0; i--) {\r\n            sprite = sprite.getChildAt(invPath[i]);\r\n        }\r\n        return sprite;\r\n    }\r\n\r\n    static _getParentNodeByHierarchyPath(rootSprite: Node, path: number[]): Node {\r\n        let pathlength = path.length;\r\n        let node: Node = rootSprite;\r\n        for (let i = 0; i < pathlength; i++) {\r\n            if (node)\r\n                node = node.parent;\r\n            else\r\n                return null;\r\n        }\r\n        return node;\r\n    }\r\n\r\n\r\n    /**\r\n     * 将RenderTexture转换为Base64\r\n     * @param rendertexture 渲染Buffer\r\n     * @returns \r\n     */\r\n    static uint8ArrayToArrayBuffer(rendertexture: RenderTexture) {\r\n        let pixelArray: Uint8Array | Float32Array;\r\n        let width = rendertexture.width;\r\n        let height = rendertexture.height;\r\n        switch (rendertexture.colorFormat) {\r\n            case RenderTargetFormat.R8G8B8:\r\n                pixelArray = new Uint8Array(width * height * 4);\r\n                break;\r\n            case RenderTargetFormat.R8G8B8A8:\r\n                pixelArray = new Uint8Array(width * height * 4);\r\n                break;\r\n            case RenderTargetFormat.R16G16B16A16:\r\n                pixelArray = new Float32Array(width * height * 4);\r\n                break;\r\n            default:\r\n                throw \"this function is not surpprt \" + rendertexture.format.toString() + \"format Material\";\r\n        }\r\n        rendertexture.getData(0, 0, rendertexture.width, rendertexture.height, pixelArray);\r\n        //tranceTo\r\n        //throw \" rt get Data\";\r\n        switch (rendertexture.colorFormat) {\r\n            case RenderTargetFormat.R16G16B16A16:\r\n                let ori = pixelArray;\r\n                let trans = new Uint8Array(width * height * 4);\r\n                for (let i = 0, n = ori.length; i < n; i++) {\r\n                    trans[i] = Math.min(Math.floor(ori[i] * 255), 255);\r\n                }\r\n                pixelArray = trans;\r\n                break;\r\n        }\r\n\r\n        let pixels = pixelArray;\r\n        var bs: String;\r\n        if (LayaEnv.isConch) {\r\n            //TODO:\r\n            //var base64img=__JS__(\"conchToBase64('image/png',1,pixels,canvasWidth,canvasHeight)\");\r\n            //var l = base64img.split(\",\");\r\n            //if (isBase64)\r\n            //\treturn base64img;\r\n            //return base.utils.DBUtils.decodeArrayBuffer(l[1]);\r\n        }\r\n        else {\r\n            var canv: HTMLCanvas = new HTMLCanvas(true);\r\n            canv.lock = true;\r\n            canv.size(width, height);\r\n            var ctx2d = canv.getContext('2d');\r\n            //@ts-ignore\r\n            var imgdata: ImageData = ctx2d.createImageData(width, height);\r\n            //@ts-ignore\r\n            imgdata.data.set(new Uint8ClampedArray(pixels));\r\n            //@ts-ignore\r\n            ctx2d.putImageData(imgdata, 0, 0);;\r\n            bs = canv.source.toDataURL();\r\n            canv.destroy();\r\n        }\r\n        return bs;\r\n    }\r\n}\r\n\r\n(window as any).getRTBase64 = Utils3D.uint8ArrayToArrayBuffer;\r\nconst TEMPVector30 = new Vector3();","import { Event } from \"../../events/Event\";\r\nimport { EventDispatcher } from \"../../events/EventDispatcher\";\r\nimport { MathUtils3D } from \"../../maths/MathUtils3D\";\r\nimport { Matrix3x3 } from \"../../maths/Matrix3x3\";\r\nimport { Matrix4x4 } from \"../../maths/Matrix4x4\";\r\nimport { Quaternion } from \"../../maths/Quaternion\";\r\nimport { Vector3 } from \"../../maths/Vector3\";\r\nimport { Sprite3D } from \"./Sprite3D\";\r\n\r\n/**\r\n * <code>Transform3D</code> 类用于实现3D变换。\r\n */\r\nexport class Transform3D extends EventDispatcher {\r\n\t/** @internal */\r\n\tprotected static _tempVector30: Vector3 = new Vector3();\r\n\t/** @internal */\r\n\tprotected static _tempQuaternion0: Quaternion = new Quaternion();\r\n\t/** @internal */\r\n\tprotected static _tempMatrix0: Matrix4x4 = new Matrix4x4();\r\n\t/** @internal */\r\n\tprotected static _tempMatrix3x30: Matrix3x3 = new Matrix3x3();\r\n\t/** @internal */\r\n\tprotected static _tempMatrix3x31: Matrix3x3 = new Matrix3x3();\r\n\t/** @internal */\r\n\tprotected static _tempMatrix3x32: Matrix3x3 = new Matrix3x3();\r\n\t/** @internal */\r\n\tprotected static _tempMatrix3x33: Matrix3x3 = new Matrix3x3();\r\n\r\n\t/**@internal */\r\n\tstatic TRANSFORM_LOCALQUATERNION: number = 0x01;\r\n\t/**@internal */\r\n\tstatic TRANSFORM_LOCALEULER: number = 0x02;\r\n\t/**@internal */\r\n\tstatic TRANSFORM_LOCALMATRIX: number = 0x04;\r\n\t/**@internal */\r\n\tstatic TRANSFORM_WORLDPOSITION: number = 0x08;\r\n\t/**@internal */\r\n\tstatic TRANSFORM_WORLDQUATERNION: number = 0x10;\r\n\t/**@internal */\r\n\tstatic TRANSFORM_WORLDSCALE: number = 0x20;\r\n\t/**@internal */\r\n\tstatic TRANSFORM_WORLDMATRIX: number = 0x40;\r\n\t/**@internal */\r\n\tstatic TRANSFORM_WORLDEULER: number = 0x80;\r\n\r\n\t/**@internal */\r\n\tprotected static _angleToRandin: number = 180 / Math.PI;\r\n\r\n\t/** @internal */\r\n\tprotected _owner: Sprite3D;\r\n\t/** @internal */\r\n\tprotected _localPosition: Vector3 = new Vector3(0, 0, 0);\r\n\t/** @internal */\r\n\tprotected _localRotation: Quaternion = new Quaternion(0, 0, 0, 1);\r\n\t/** @internal */\r\n\tprotected _localScale: Vector3 = new Vector3(1, 1, 1);\r\n\t/**@internal */\r\n\tprotected _localRotationEuler: Vector3 = new Vector3(0, 0, 0);\r\n\t/** @internal */\r\n\tprotected _localMatrix: Matrix4x4 = new Matrix4x4();\r\n\r\n\t/** @internal */\r\n\tprotected _position: Vector3 = new Vector3(0, 0, 0);\r\n\t/** @internal */\r\n\tprotected _rotation: Quaternion = new Quaternion(0, 0, 0, 1);\r\n\t/** @internal */\r\n\tprotected _scale: Vector3 = new Vector3(1, 1, 1);\r\n\t/**@internal */\r\n\tprotected _rotationEuler: Vector3 = new Vector3(0, 0, 0);\r\n\t/** @internal */\r\n\tprotected _worldMatrix: Matrix4x4 = new Matrix4x4();\r\n\r\n\t/** @internal */\r\n\t_children: Transform3D[] | null = null;\r\n\t/**@internal 如果为true 表示自身相对于父节点并无任何改变，将通过这个参数忽略计算*/\r\n\tprotected _isDefaultMatrix: boolean = false;\r\n\tprotected _faceInvert: boolean = false;\r\n\tprotected _frontFaceValue: number = 1;\r\n\r\n\t/** @internal */\r\n\t_parent: Transform3D | null = null;\r\n\t/**@internal */\r\n\t_transformFlag: number = 0;\r\n\r\n\r\n\t/**@internal */\r\n\tget isDefaultMatrix(): boolean {\r\n\t\tif (this._getTransformFlag(Transform3D.TRANSFORM_LOCALMATRIX)) {\r\n\t\t\tlet localMat = this.localMatrix;\r\n\t\t}\r\n\t\treturn this._isDefaultMatrix;\r\n\t}\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tget _isFrontFaceInvert(): boolean {\r\n\t\tif (this._getTransformFlag(Transform3D.TRANSFORM_WORLDSCALE)) {\r\n\t\t\tvar scale: Vector3 = this.getWorldLossyScale();\r\n\t\t\tvar isInvert: boolean = scale.x < 0;\r\n\t\t\t(scale.y < 0) && (isInvert = !isInvert);\r\n\t\t\t(scale.z < 0) && (isInvert = !isInvert);\r\n\t\t\tthis._faceInvert = isInvert;\r\n\t\t\tthis._frontFaceValue = this._faceInvert ? -1 : 1;\r\n\t\t}\r\n\t\treturn this._faceInvert;\r\n\t}\r\n\r\n\tgetFrontFaceValue(): number {\r\n\t\tif (this._getTransformFlag(Transform3D.TRANSFORM_WORLDSCALE)) {\r\n\t\t\tlet value = this._isFrontFaceInvert;\r\n\t\t}\r\n\t\treturn this._frontFaceValue;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * 所属精灵。\r\n\t */\r\n\tget owner(): Sprite3D {\r\n\t\treturn this._owner;\r\n\t}\r\n\r\n\t/**\r\n\t * 世界矩阵是否需要更新。\r\n\t */\r\n\tget worldNeedUpdate(): boolean {\r\n\t\treturn this._getTransformFlag(Transform3D.TRANSFORM_WORLDMATRIX);\r\n\t}\r\n\r\n\t/**\r\n\t * 局部位置X轴分量。\r\n\t */\r\n\tget localPositionX(): number {\r\n\t\treturn this._localPosition.x;\r\n\t}\r\n\r\n\tset localPositionX(x: number) {\r\n\t\tthis._localPosition.x = x;\r\n\t\tthis.localPosition = this._localPosition;\r\n\t}\r\n\r\n\t/**\r\n\t * 局部位置Y轴分量。\r\n\t */\r\n\tget localPositionY(): number {\r\n\t\treturn this._localPosition.y;\r\n\t}\r\n\r\n\tset localPositionY(y: number) {\r\n\t\tthis._localPosition.y = y;\r\n\t\tthis.localPosition = this._localPosition;\r\n\t}\r\n\r\n\t/**\r\n\t * 局部位置Z轴分量。\r\n\t */\r\n\tget localPositionZ(): number {\r\n\t\treturn this._localPosition.z;\r\n\t}\r\n\r\n\tset localPositionZ(z: number) {\r\n\t\tthis._localPosition.z = z;\r\n\t\tthis.localPosition = this._localPosition;\r\n\t}\r\n\r\n\t/**\r\n\t * 局部位置。\r\n\t */\r\n\tget localPosition(): Vector3 {\r\n\t\treturn this._localPosition;\r\n\t}\r\n\r\n\tset localPosition(value: Vector3) {\r\n\t\tif (this._localPosition !== value)\r\n\t\t\tvalue.cloneTo(this._localPosition);\r\n\r\n\t\tthis._setTransformFlag(Transform3D.TRANSFORM_LOCALMATRIX, true);\r\n\t\tthis._onWorldPositionTransform();\r\n\t}\r\n\r\n\t/**\r\n\t * 局部旋转四元数X分量。\r\n\t */\r\n\tget localRotationX(): number {\r\n\t\treturn this.localRotation.x;\r\n\t}\r\n\r\n\tset localRotationX(x: number) {\r\n\t\tlet rot = this.localRotation;\r\n\t\trot.x = x;\r\n\t\tthis.localRotation = rot;\r\n\t}\r\n\r\n\t/**\r\n\t * 局部旋转四元数Y分量。\r\n\t */\r\n\tget localRotationY(): number {\r\n\t\treturn this.localRotation.y;\r\n\t}\r\n\r\n\tset localRotationY(y: number) {\r\n\t\tlet rot = this.localRotation;\r\n\t\trot.y = y;\r\n\t\tthis.localRotation = rot;\r\n\t}\r\n\r\n\t/**\r\n\t * 局部旋转四元数Z分量。\r\n\t */\r\n\tget localRotationZ(): number {\r\n\t\treturn this.localRotation.z;\r\n\t}\r\n\r\n\tset localRotationZ(z: number) {\r\n\t\tlet rot = this.localRotation;\r\n\t\trot.z = z;\r\n\t\tthis.localRotation = rot;\r\n\t}\r\n\r\n\t/**\r\n\t * 局部旋转四元数W分量。\r\n\t */\r\n\tget localRotationW(): number {\r\n\t\treturn this.localRotation.w;\r\n\t}\r\n\r\n\tset localRotationW(w: number) {\r\n\t\tlet rot = this.localRotation;\r\n\t\trot.w = w;\r\n\t\tthis.localRotation = rot;\r\n\t}\r\n\r\n\t/**\r\n\t * 局部旋转。\r\n\t */\r\n\tget localRotation(): Quaternion {\r\n\t\tif (this._getTransformFlag(Transform3D.TRANSFORM_LOCALQUATERNION)) {\r\n\t\t\tvar eulerE: Vector3 = this._localRotationEuler;\r\n\t\t\tQuaternion.createFromYawPitchRoll(eulerE.y / Transform3D._angleToRandin, eulerE.x / Transform3D._angleToRandin, eulerE.z / Transform3D._angleToRandin, this._localRotation);\r\n\t\t\tthis._setTransformFlag(Transform3D.TRANSFORM_LOCALQUATERNION, false);\r\n\t\t}\r\n\t\treturn this._localRotation;\r\n\t}\r\n\r\n\tset localRotation(value: Quaternion) {\r\n\t\tif (this._localRotation !== value)\r\n\t\t\tvalue.cloneTo(this._localRotation);\r\n\t\tthis._localRotation.normalize(this._localRotation);\r\n\t\tthis._setTransformFlag(Transform3D.TRANSFORM_LOCALEULER | Transform3D.TRANSFORM_LOCALMATRIX, true);\r\n\t\tthis._setTransformFlag(Transform3D.TRANSFORM_LOCALQUATERNION, false);\r\n\t\tthis._onWorldRotationTransform();\r\n\t}\r\n\r\n\t/**\r\n\t * 局部缩放X。\r\n\t */\r\n\tget localScaleX(): number {\r\n\t\treturn this._localScale.x;\r\n\t}\r\n\r\n\tset localScaleX(value: number) {\r\n\t\tthis._localScale.x = value;\r\n\t\tthis.localScale = this._localScale;\r\n\t}\r\n\r\n\t/**\r\n\t * 局部缩放Y。\r\n\t */\r\n\tget localScaleY(): number {\r\n\t\treturn this._localScale.y;\r\n\t}\r\n\r\n\tset localScaleY(value: number) {\r\n\t\tthis._localScale.y = value;\r\n\t\tthis.localScale = this._localScale;\r\n\t}\r\n\r\n\t/**\r\n\t * 局部缩放Z。\r\n\t */\r\n\tget localScaleZ(): number {\r\n\t\treturn this._localScale.z;\r\n\t}\r\n\r\n\tset localScaleZ(value: number) {\r\n\t\tthis._localScale.z = value;\r\n\t\tthis.localScale = this._localScale;\r\n\t}\r\n\r\n\t/**\r\n\t * 局部缩放。\r\n\t */\r\n\tget localScale(): Vector3 {\r\n\t\treturn this._localScale;\r\n\t}\r\n\r\n\tset localScale(value: Vector3) {\r\n\t\tif (this._localScale !== value)\r\n\t\t\tvalue.cloneTo(this._localScale);\r\n\t\tthis._setTransformFlag(Transform3D.TRANSFORM_LOCALMATRIX, true);\r\n\t\tthis._onWorldScaleTransform();\r\n\t}\r\n\r\n\t/**\r\n\t * 局部空间的X轴欧拉角。\r\n\t */\r\n\tget localRotationEulerX(): number {\r\n\t\treturn this.localRotationEuler.x;\r\n\t}\r\n\r\n\tset localRotationEulerX(value: number) {\r\n\t\tlet rot = this.localRotationEuler;\r\n\t\trot.x = value;\r\n\t\tthis.localRotationEuler = rot;\r\n\t}\r\n\r\n\t/**\r\n\t * 局部空间的Y轴欧拉角。\r\n\t */\r\n\tget localRotationEulerY(): number {\r\n\t\treturn this.localRotationEuler.y;\r\n\t}\r\n\r\n\tset localRotationEulerY(value: number) {\r\n\t\tlet rot = this.localRotationEuler;\r\n\t\trot.y = value;\r\n\t\tthis.localRotationEuler = rot;\r\n\t}\r\n\r\n\t/**\r\n\t * 局部空间的Z轴欧拉角。\r\n\t */\r\n\tget localRotationEulerZ(): number {\r\n\t\treturn this.localRotationEuler.z;\r\n\t}\r\n\r\n\tset localRotationEulerZ(value: number) {\r\n\t\tlet rot = this.localRotationEuler;\r\n\t\trot.z = value;\r\n\t\tthis.localRotationEuler = rot;\r\n\t}\r\n\r\n\t/**\r\n\t * 局部空间欧拉角。\r\n\t */\r\n\tget localRotationEuler(): Vector3 {\r\n\t\tif (this._getTransformFlag(Transform3D.TRANSFORM_LOCALEULER)) {\r\n\t\t\tthis._localRotation.getYawPitchRoll(Transform3D._tempVector30);\r\n\t\t\tvar euler: Vector3 = Transform3D._tempVector30;\r\n\t\t\tvar localRotationEuler: Vector3 = this._localRotationEuler;\r\n\t\t\tlocalRotationEuler.x = euler.y * Transform3D._angleToRandin;\r\n\t\t\tlocalRotationEuler.y = euler.x * Transform3D._angleToRandin;\r\n\t\t\tlocalRotationEuler.z = euler.z * Transform3D._angleToRandin;\r\n\t\t\tthis._setTransformFlag(Transform3D.TRANSFORM_LOCALEULER, false);\r\n\t\t}\r\n\t\treturn this._localRotationEuler;\r\n\t}\r\n\r\n\tset localRotationEuler(value: Vector3) {\r\n\t\tif (this._localRotationEuler !== value)\r\n\t\t\tvalue.cloneTo(this._localRotationEuler);\r\n\t\tthis._setTransformFlag(Transform3D.TRANSFORM_LOCALEULER, false);\r\n\t\tthis._setTransformFlag(Transform3D.TRANSFORM_LOCALQUATERNION | Transform3D.TRANSFORM_LOCALMATRIX, true);\r\n\t\tthis._onWorldRotationTransform();\r\n\t}\r\n\r\n\t/**\r\n\t * 局部矩阵。\r\n\t */\r\n\tget localMatrix(): Matrix4x4 {\r\n\t\tif (this._getTransformFlag(Transform3D.TRANSFORM_LOCALMATRIX)) {\r\n\t\t\tMatrix4x4.createAffineTransformation(this._localPosition, this.localRotation, this._localScale, this._localMatrix);\r\n\t\t\tthis._isDefaultMatrix = this._localMatrix.isIdentity();\r\n\t\t\tthis._setTransformFlag(Transform3D.TRANSFORM_LOCALMATRIX, false);\r\n\t\t}\r\n\t\treturn this._localMatrix;\r\n\t}\r\n\r\n\tset localMatrix(value: Matrix4x4) {\r\n\t\tif (this._localMatrix !== value)\r\n\t\t\tvalue.cloneTo(this._localMatrix);\r\n\t\tthis._isDefaultMatrix = this._localMatrix.isIdentity();\r\n\t\tthis._localMatrix.decomposeTransRotScale(this._localPosition, this._localRotation, this._localScale);\r\n\t\tthis._setTransformFlag(Transform3D.TRANSFORM_LOCALEULER, true);\r\n\t\tthis._setTransformFlag(Transform3D.TRANSFORM_LOCALMATRIX, false);\r\n\t\tthis._onWorldTransform();\r\n\t}\r\n\r\n\t/**\r\n\t * 世界位置。\r\n\t */\r\n\tget position(): Vector3 {\r\n\t\tif (this._getTransformFlag(Transform3D.TRANSFORM_WORLDPOSITION)) {\r\n\t\t\tif (this._parent != null) {\r\n\t\t\t\tvar worldMatE = this.worldMatrix.elements;\r\n\t\t\t\tthis._position.x = worldMatE[12];\r\n\t\t\t\tthis._position.y = worldMatE[13];\r\n\t\t\t\tthis._position.z = worldMatE[14];\r\n\t\t\t} else {\r\n\t\t\t\tthis._localPosition.cloneTo(this._position);\r\n\t\t\t}\r\n\t\t\tthis._setTransformFlag(Transform3D.TRANSFORM_WORLDPOSITION, false);\r\n\t\t}\r\n\t\treturn this._position;\r\n\t}\r\n\r\n\tset position(value: Vector3) {\r\n\t\tif (this._parent != null) {\r\n\t\t\tvar parentInvMat: Matrix4x4 = Transform3D._tempMatrix0;\r\n\t\t\tthis._parent.worldMatrix.invert(parentInvMat);\r\n\t\t\tVector3.transformCoordinate(value, parentInvMat, this._localPosition);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tvalue.cloneTo(this._localPosition);\r\n\t\t}\r\n\t\tthis.localPosition = this._localPosition;\r\n\t\tif (this._position !== value)\r\n\t\t\tvalue.cloneTo(this._position);\r\n\t\tthis._setTransformFlag(Transform3D.TRANSFORM_WORLDPOSITION, false);\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * 世界旋转。\r\n\t */\r\n\tget rotation(): Quaternion {\r\n\t\tif (this._getTransformFlag(Transform3D.TRANSFORM_WORLDQUATERNION)) {\r\n\t\t\tif (this._parent != null)\r\n\t\t\t\tQuaternion.multiply(this._parent.rotation, this.localRotation, this._rotation);//使用localRotation不使用_localRotation,内部需要计算\r\n\t\t\telse\r\n\t\t\t\tthis.localRotation.cloneTo(this._rotation);\r\n\t\t\tthis._setTransformFlag(Transform3D.TRANSFORM_WORLDQUATERNION, false);\r\n\t\t}\r\n\t\treturn this._rotation;\r\n\t}\r\n\r\n\tset rotation(value: Quaternion) {\r\n\t\tif (this._parent != null) {\r\n\t\t\tthis._parent.rotation.invert(Transform3D._tempQuaternion0);\r\n\t\t\tQuaternion.multiply(Transform3D._tempQuaternion0, value, this._localRotation);\r\n\t\t} else {\r\n\t\t\tvalue.cloneTo(this._localRotation);\r\n\t\t}\r\n\t\tthis.localRotation = this._localRotation;\r\n\t\tif (value !== this._rotation)\r\n\t\t\tvalue.cloneTo(this._rotation);\r\n\r\n\t\tthis._setTransformFlag(Transform3D.TRANSFORM_WORLDQUATERNION, false);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * 世界空间的旋转角度，顺序为x、y、z。\r\n\t */\r\n\tget rotationEuler(): Vector3 {\r\n\t\tif (this._getTransformFlag(Transform3D.TRANSFORM_WORLDEULER)) {\r\n\t\t\tthis.rotation.getYawPitchRoll(Transform3D._tempVector30);//使用rotation属性,可能需要更新\r\n\t\t\tvar eulerE: Vector3 = Transform3D._tempVector30;\r\n\t\t\tvar rotationEulerE: Vector3 = this._rotationEuler;\r\n\t\t\trotationEulerE.x = eulerE.y * Transform3D._angleToRandin;\r\n\t\t\trotationEulerE.y = eulerE.x * Transform3D._angleToRandin;\r\n\t\t\trotationEulerE.z = eulerE.z * Transform3D._angleToRandin;\r\n\t\t\tthis._setTransformFlag(Transform3D.TRANSFORM_WORLDEULER, false);\r\n\t\t}\r\n\t\treturn this._rotationEuler;\r\n\t}\r\n\r\n\tset rotationEuler(value: Vector3) {\r\n\t\tQuaternion.createFromYawPitchRoll(value.y / Transform3D._angleToRandin, value.x / Transform3D._angleToRandin, value.z / Transform3D._angleToRandin, this._rotation);\r\n\t\tthis.rotation = this._rotation;\r\n\t\tif (this._rotationEuler !== value)\r\n\t\t\tvalue.cloneTo(this._rotationEuler);\r\n\r\n\t\tthis._setTransformFlag(Transform3D.TRANSFORM_WORLDEULER, false);\r\n\t}\r\n\r\n\t/**\r\n\t * 世界矩阵。\r\n\t */\r\n\tget worldMatrix(): Matrix4x4 {\r\n\t\tif (this._getTransformFlag(Transform3D.TRANSFORM_WORLDMATRIX)) {\r\n\t\t\tif (this._parent != null) {\r\n\t\t\t\t//这里将剔除单位矩阵的计算\r\n\t\t\t\tlet effectiveTrans = this._parent;\r\n\r\n\t\t\t\twhile (effectiveTrans._parent && effectiveTrans.isDefaultMatrix) {\r\n\t\t\t\t\teffectiveTrans = effectiveTrans._parent;\r\n\t\t\t\t}\r\n\t\t\t\tMatrix4x4.multiply(effectiveTrans.worldMatrix, this.localMatrix, this._worldMatrix);\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t\tthis.localMatrix.cloneTo(this._worldMatrix);\r\n\r\n\t\t\tthis._setTransformFlag(Transform3D.TRANSFORM_WORLDMATRIX, false);\r\n\t\t}\r\n\t\treturn this._worldMatrix;\r\n\t}\r\n\r\n\tset worldMatrix(value: Matrix4x4) {\r\n\t\tif (this._parent === null) {\r\n\t\t\tvalue.cloneTo(this._localMatrix);\r\n\t\t} else {\r\n\t\t\tthis._parent.worldMatrix.invert(this._localMatrix);\r\n\t\t\tMatrix4x4.multiply(this._localMatrix, value, this._localMatrix);\r\n\t\t}\r\n\t\tthis.localMatrix = this._localMatrix;\r\n\t\tif (this._worldMatrix !== value)\r\n\t\t\tvalue.cloneTo(this._worldMatrix);\r\n\r\n\t\tthis._setTransformFlag(Transform3D.TRANSFORM_WORLDMATRIX, false);\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>Transform3D</code> 实例。\r\n\t * @internal\r\n\t * @param owner 所属精灵。\r\n\t */\r\n\tconstructor(owner: Sprite3D) {\r\n\t\tsuper();\r\n\t\tthis._owner = owner;\r\n\t\tthis._children = [];\r\n\t\tthis._setTransformFlag(Transform3D.TRANSFORM_LOCALQUATERNION | Transform3D.TRANSFORM_LOCALEULER | Transform3D.TRANSFORM_LOCALMATRIX, false);\r\n\t\tthis._setTransformFlag(Transform3D.TRANSFORM_WORLDPOSITION | Transform3D.TRANSFORM_WORLDQUATERNION | Transform3D.TRANSFORM_WORLDEULER | Transform3D.TRANSFORM_WORLDSCALE | Transform3D.TRANSFORM_WORLDMATRIX, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_getScaleMatrix(): Matrix3x3 {\r\n\t\tvar invRotation: Quaternion = Transform3D._tempQuaternion0;\r\n\t\tvar invRotationMat: Matrix3x3 = Transform3D._tempMatrix3x30;\r\n\t\tvar worldRotScaMat: Matrix3x3 = Transform3D._tempMatrix3x31;\r\n\t\tvar scaMat: Matrix3x3 = Transform3D._tempMatrix3x32;\r\n\t\tMatrix3x3.createFromMatrix4x4(this.worldMatrix, worldRotScaMat)\r\n\t\tthis.rotation.invert(invRotation);\r\n\t\tMatrix3x3.createRotationQuaternion(invRotation, invRotationMat);\r\n\t\tMatrix3x3.multiply(invRotationMat, worldRotScaMat, scaMat);\r\n\t\treturn scaMat;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_setTransformFlag(type: number, value: boolean): void {\r\n\t\tif (value)\r\n\t\t\tthis._transformFlag |= type;\r\n\t\telse\r\n\t\t\tthis._transformFlag &= ~type;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_getTransformFlag(type: number): boolean {\r\n\t\treturn (this._transformFlag & type) != 0;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_setParent(value: Transform3D): void {\r\n\t\tif (this._parent !== value) {\r\n\t\t\tif (this._parent) {\r\n\t\t\t\tvar parentChilds: Transform3D[] = this._parent._children!;\r\n\t\t\t\tvar index: number = parentChilds.indexOf(this);\r\n\t\t\t\tparentChilds.splice(index, 1);\r\n\t\t\t}\r\n\t\t\tif (value) {\r\n\t\t\t\tvalue._children!.push(this);\r\n\t\t\t\t(value) && (this._onWorldTransform());\r\n\t\t\t}\r\n\t\t\tthis._parent = value;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_onWorldPositionRotationTransform(): void {\r\n\t\tif (!this._getTransformFlag(Transform3D.TRANSFORM_WORLDMATRIX) || !this._getTransformFlag(Transform3D.TRANSFORM_WORLDPOSITION) || !this._getTransformFlag(Transform3D.TRANSFORM_WORLDQUATERNION) || !this._getTransformFlag(Transform3D.TRANSFORM_WORLDEULER)) {\r\n\t\t\tthis._setTransformFlag(Transform3D.TRANSFORM_WORLDMATRIX | Transform3D.TRANSFORM_WORLDPOSITION | Transform3D.TRANSFORM_WORLDQUATERNION | Transform3D.TRANSFORM_WORLDEULER, true);\r\n\t\t\tthis.event(Event.TRANSFORM_CHANGED, this._transformFlag);\r\n\t\t}\r\n\t\tfor (var i: number = 0, n: number = this._children!.length; i < n; i++)\r\n\t\t\tthis._children![i]._onWorldPositionRotationTransform();\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_onWorldPositionScaleTransform(): void {\r\n\t\tif (!this._getTransformFlag(Transform3D.TRANSFORM_WORLDMATRIX) || !this._getTransformFlag(Transform3D.TRANSFORM_WORLDPOSITION) || !this._getTransformFlag(Transform3D.TRANSFORM_WORLDSCALE)) {\r\n\t\t\tthis._setTransformFlag(Transform3D.TRANSFORM_WORLDMATRIX | Transform3D.TRANSFORM_WORLDPOSITION | Transform3D.TRANSFORM_WORLDSCALE, true);\r\n\t\t\tthis.event(Event.TRANSFORM_CHANGED, this._transformFlag);\r\n\t\t}\r\n\t\tfor (var i: number = 0, n: number = this._children!.length; i < n; i++)\r\n\t\t\tthis._children![i]._onWorldPositionScaleTransform();\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_onWorldPositionTransform(): void {\r\n\t\tif (!this._getTransformFlag(Transform3D.TRANSFORM_WORLDMATRIX) || !this._getTransformFlag(Transform3D.TRANSFORM_WORLDPOSITION)) {\r\n\t\t\tthis._setTransformFlag(Transform3D.TRANSFORM_WORLDMATRIX | Transform3D.TRANSFORM_WORLDPOSITION, true);\r\n\t\t\tthis.event(Event.TRANSFORM_CHANGED, this._transformFlag);\r\n\t\t}\r\n\t\tfor (var i: number = 0, n: number = this._children!.length; i < n; i++)\r\n\t\t\tthis._children![i]._onWorldPositionTransform();\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprotected _onWorldRotationTransform(): void {\r\n\t\tif (!this._getTransformFlag(Transform3D.TRANSFORM_WORLDMATRIX) || !this._getTransformFlag(Transform3D.TRANSFORM_WORLDQUATERNION) || !this._getTransformFlag(Transform3D.TRANSFORM_WORLDEULER)) {\r\n\t\t\tthis._setTransformFlag(Transform3D.TRANSFORM_WORLDMATRIX | Transform3D.TRANSFORM_WORLDQUATERNION | Transform3D.TRANSFORM_WORLDEULER, true);\r\n\t\t\tthis.event(Event.TRANSFORM_CHANGED, this._transformFlag);\r\n\t\t}\r\n\t\tfor (var i: number = 0, n: number = this._children!.length; i < n; i++)\r\n\t\t\tthis._children![i]._onWorldPositionRotationTransform();//父节点旋转发生变化，子节点的世界位置和旋转都需要更新\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_onWorldScaleTransform(): void {\r\n\t\tif (!this._getTransformFlag(Transform3D.TRANSFORM_WORLDMATRIX) || !this._getTransformFlag(Transform3D.TRANSFORM_WORLDSCALE)) {\r\n\t\t\tthis._setTransformFlag(Transform3D.TRANSFORM_WORLDMATRIX | Transform3D.TRANSFORM_WORLDSCALE, true);\r\n\t\t\tthis.event(Event.TRANSFORM_CHANGED, this._transformFlag);\r\n\t\t}\r\n\t\tfor (var i: number = 0, n: number = this._children!.length; i < n; i++)\r\n\t\t\tthis._children![i]._onWorldPositionScaleTransform();//父节点缩放发生变化，子节点的世界位置和缩放都需要更新\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_onWorldTransform(): void {\r\n\t\tif (!this._getTransformFlag(Transform3D.TRANSFORM_WORLDMATRIX) || !this._getTransformFlag(Transform3D.TRANSFORM_WORLDPOSITION) || !this._getTransformFlag(Transform3D.TRANSFORM_WORLDQUATERNION) || !this._getTransformFlag(Transform3D.TRANSFORM_WORLDEULER) || !this._getTransformFlag(Transform3D.TRANSFORM_WORLDSCALE)) {\r\n\t\t\tthis._setTransformFlag(Transform3D.TRANSFORM_WORLDMATRIX | Transform3D.TRANSFORM_WORLDPOSITION | Transform3D.TRANSFORM_WORLDQUATERNION | Transform3D.TRANSFORM_WORLDEULER | Transform3D.TRANSFORM_WORLDSCALE, true);\r\n\t\t\tthis.event(Event.TRANSFORM_CHANGED, this._transformFlag);\r\n\t\t}\r\n\t\tfor (var i: number = 0, n: number = this._children!.length; i < n; i++)\r\n\t\t\tthis._children![i]._onWorldTransform();\r\n\t}\r\n\r\n\t/**\r\n\t * 平移变换。\r\n\t * @param \ttranslation 移动距离。\r\n\t * @param \tisLocal 是否局部空间。\r\n\t */\r\n\ttranslate(translation: Vector3, isLocal: boolean = true): void {\r\n\t\tif (isLocal) {\r\n\t\t\tMatrix4x4.createFromQuaternion(this.localRotation, Transform3D._tempMatrix0);\r\n\t\t\tVector3.transformCoordinate(translation, Transform3D._tempMatrix0, Transform3D._tempVector30);\r\n\t\t\tVector3.add(this.localPosition, Transform3D._tempVector30, this._localPosition);\r\n\t\t\tthis.localPosition = this._localPosition;\r\n\t\t} else {\r\n\t\t\tVector3.add(this.position, translation, this._position);\r\n\t\t\tthis.position = this._position;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 旋转变换。\r\n\t * @param \trotations 旋转幅度。\r\n\t * @param \tisLocal 是否局部空间。\r\n\t * @param \tisRadian 是否弧度制。\r\n\t */\r\n\trotate(rotation: Vector3, isLocal: boolean = true, isRadian: boolean = true): void {\r\n\t\tvar rot: Vector3;\r\n\t\tif (isRadian) {\r\n\t\t\trot = rotation;\r\n\t\t} else {\r\n\t\t\tVector3.scale(rotation, Math.PI / 180.0, Transform3D._tempVector30);\r\n\t\t\trot = Transform3D._tempVector30;\r\n\t\t}\r\n\r\n\t\tQuaternion.createFromYawPitchRoll(rot.y, rot.x, rot.z, Transform3D._tempQuaternion0);\r\n\t\tif (isLocal) {\r\n\t\t\tQuaternion.multiply(this._localRotation, Transform3D._tempQuaternion0, this._localRotation);\r\n\t\t\tthis.localRotation = this._localRotation;\r\n\t\t} else {\r\n\t\t\tQuaternion.multiply(Transform3D._tempQuaternion0, this.rotation, this._rotation);\r\n\t\t\tthis.rotation = this._rotation;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 获取向前方向。\r\n\t * @param forward 前方向。\r\n\t */\r\n\tgetForward(forward: Vector3): void {\r\n\t\tvar worldMatElem: Float32Array = this.worldMatrix.elements;\r\n\t\tforward.x = -worldMatElem[8];\r\n\t\tforward.y = -worldMatElem[9];\r\n\t\tforward.z = -worldMatElem[10];\r\n\t}\r\n\r\n\t/**\r\n\t * 获取向上方向。\r\n\t * @param up 上方向。\r\n\t */\r\n\tgetUp(up: Vector3): void {\r\n\t\tvar worldMatElem: Float32Array = this.worldMatrix.elements;\r\n\t\tup.x = worldMatElem[4];\r\n\t\tup.y = worldMatElem[5];\r\n\t\tup.z = worldMatElem[6];\r\n\t}\r\n\r\n\t/**\r\n\t * 获取向右方向。\r\n\t * @param 右方向。\r\n\t */\r\n\tgetRight(right: Vector3): void {\r\n\t\tvar worldMatElem: Float32Array = this.worldMatrix.elements;\r\n\t\tright.x = worldMatElem[0];\r\n\t\tright.y = worldMatElem[1];\r\n\t\tright.z = worldMatElem[2];\r\n\t}\r\n\r\n\t/**\r\n\t * 观察目标位置。\r\n\t * @param\ttarget 观察目标。\r\n\t * @param\tup 向上向量。\r\n\t * @param\tisLocal 是否局部空间。\r\n\t */\r\n\tlookAt(target: Vector3, up: Vector3, isLocal: boolean = false, isCamera: boolean = true): void {\r\n\t\tvar eye: Vector3;\r\n\t\tif (isLocal) {\r\n\t\t\teye = this._localPosition;\r\n\t\t\tif (Math.abs(eye.x - target.x) < MathUtils3D.zeroTolerance && Math.abs(eye.y - target.y) < MathUtils3D.zeroTolerance && Math.abs(eye.z - target.z) < MathUtils3D.zeroTolerance)\r\n\t\t\t\treturn;\r\n\t\t\tif (isCamera) {\r\n\t\t\t\tQuaternion.lookAt(this._localPosition, target, up, this._localRotation);\r\n\t\t\t\tthis._localRotation.invert(this._localRotation);\r\n\t\t\t} else {\r\n\t\t\t\tVector3.subtract(this.localPosition, target, Transform3D._tempVector30);\r\n\t\t\t\tQuaternion.rotationLookAt(Transform3D._tempVector30, up, this.localRotation);\r\n\t\t\t\tthis._localRotation.invert(this._localRotation);\r\n\t\t\t}\r\n\r\n\t\t\tthis.localRotation = this._localRotation;\r\n\t\t} else {\r\n\t\t\tvar worldPosition: Vector3 = this.position;\r\n\t\t\teye = worldPosition;\r\n\t\t\tif (Math.abs(eye.x - target.x) < MathUtils3D.zeroTolerance && Math.abs(eye.y - target.y) < MathUtils3D.zeroTolerance && Math.abs(eye.z - target.z) < MathUtils3D.zeroTolerance)\r\n\t\t\t\treturn;\r\n\t\t\tif (isCamera) {\r\n\t\t\t\tQuaternion.lookAt(worldPosition, target, up, this._rotation);\r\n\t\t\t\tthis._rotation.invert(this._rotation);\r\n\t\t\t} else {\r\n\t\t\t\tVector3.subtract(this.position, target, Transform3D._tempVector30);\r\n\t\t\t\tQuaternion.rotationLookAt(Transform3D._tempVector30, up, this._rotation);\r\n\t\t\t\tthis._rotation.invert(this._rotation);\r\n\t\t\t}\r\n\t\t\tthis.rotation = this._rotation;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 对象朝向目标\r\n\t * @param target \r\n\t * @param up \r\n\t * @param isLocal \r\n\t */\r\n\tobjLookat(target: Vector3, up: Vector3, isLocal: boolean = false): void {\r\n\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * 世界缩放。\r\n\t * 某种条件下获取该值可能不正确（例如：父节点有缩放，子节点有旋转），缩放会倾斜，无法使用Vector3正确表示,必须使用Matrix3x3矩阵才能正确表示。\r\n\t * @return\t世界缩放。\r\n\t */\r\n\tgetWorldLossyScale(): Vector3 {\r\n\t\tif (this._getTransformFlag(Transform3D.TRANSFORM_WORLDSCALE)) {\r\n\t\t\tif (this._parent !== null) {\r\n\t\t\t\tvar scaMatE = this._getScaleMatrix().elements;\r\n\t\t\t\tthis._scale.x = scaMatE[0];\r\n\t\t\t\tthis._scale.y = scaMatE[4];\r\n\t\t\t\tthis._scale.z = scaMatE[8];\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis._localScale.cloneTo(this._scale);\r\n\t\t\t}\r\n\t\t\tthis._setTransformFlag(Transform3D.TRANSFORM_WORLDSCALE, false);\r\n\t\t}\r\n\t\treturn this._scale;\r\n\t}\r\n\r\n\t/**\r\n\t * 设置世界缩放。\r\n\t * 某种条件下设置该值可能不正确（例如：父节点有缩放，子节点有旋转），缩放会倾斜，无法使用Vector3正确表示,必须使用Matrix3x3矩阵才能正确表示。\r\n\t * @return\t世界缩放。\r\n\t */\r\n\tsetWorldLossyScale(value: Vector3) {\r\n\t\tif (this._parent !== null) {\r\n\t\t\tvar scaleMat: Matrix3x3 = Transform3D._tempMatrix3x33;\r\n\t\t\tvar localScaleMat: Matrix3x3 = Transform3D._tempMatrix3x33;\r\n\t\t\tvar localScaleMatE: Float32Array = localScaleMat.elements;\r\n\t\t\tvar parInvScaleMat: Matrix3x3 = this._parent._getScaleMatrix();\r\n\t\t\tparInvScaleMat.invert(parInvScaleMat);\r\n\t\t\tMatrix3x3.createFromScaling(value, scaleMat);\r\n\t\t\tMatrix3x3.multiply(parInvScaleMat, scaleMat, localScaleMat);\r\n\t\t\tthis._localScale.x = localScaleMatE[0];\r\n\t\t\tthis._localScale.y = localScaleMatE[4];\r\n\t\t\tthis._localScale.z = localScaleMatE[8];\r\n\t\t} else {\r\n\t\t\tvalue.cloneTo(this._localScale);\r\n\t\t}\r\n\t\tthis.localScale = this._localScale;\r\n\t\tif (this._scale !== value)\r\n\t\t\tvalue.cloneTo(this._scale);\r\n\t\tthis._setTransformFlag(Transform3D.TRANSFORM_WORLDSCALE, false);\r\n\t}\r\n\r\n\t//----------------------------------------Discard-------------------------------------------------\r\n\t/**\r\n\t * @deprecated\r\n\t */\r\n\tget scale(): Vector3 {\r\n\t\tconsole.warn(\"Transfrm3D: discard function,please use getWorldLossyScale instead.\");\r\n\t\treturn this.getWorldLossyScale();\r\n\t}\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t */\r\n\tset scale(value: Vector3) {\r\n\t\tconsole.warn(\"Transfrm3D: discard function,please use setWorldLossyScale instead.\");\r\n\t\tthis.setWorldLossyScale(value);\r\n\t}\r\n\r\n\tlocalToGlobal(value: Vector3, out: Vector3): void {\r\n\t\tVector3.transformV3ToV3(value, this.worldMatrix, out);\r\n\t}\r\n\r\n\t/**\r\n\t *转化成局部坐标\r\n\t\t* @param pos\r\n\t\t* @param out\r\n\t\t* \r\n\t\t*/\r\n\tglobalToLocal(pos: Vector3, out: Vector3): void {\r\n\t\tthis.worldMatrix.invert(Transform3D._tempMatrix0);\r\n\t\tVector3.transformV3ToV3(pos, Transform3D._tempMatrix0, out);\r\n\t}\r\n\r\n\t/**\r\n\t *转化成局部向量 \r\n\t * @param pos\r\n\t * @param out\r\n\t * \r\n\t */\r\n\ttoLocalNormal(pos: Vector3, out: Vector3): void {\r\n\t\tthis.worldMatrix.invert(Transform3D._tempMatrix0);\r\n\t\tVector3.TransformNormal(pos, Transform3D._tempMatrix0, out);\r\n\t}\r\n\r\n\ttoDir(forward: Vector3, dir: Vector3) {\r\n\t\t//TODO 判断一样么\r\n\t\tvar wmat: Matrix4x4 = this.worldMatrix;\r\n\t\t//var newForward:Vector3 = new Vector3();\r\n\t\t//var newRot:Quaternion = new Quaternion();\r\n\r\n\t\t//Vector3.TransformNormal(forward,wmat,newForward);\r\n\t\t//Vector3.normalize(newForward,newForward);\r\n\t\t//rotationTo(newRot,newForward,dir);\r\n\t\tthis.rotationTo(this.rotation, forward, dir);\r\n\t\t//Quaternion.multiply(rotation,newRot,rotation)\r\n\t\t//DEBUG\r\n\t\t//Quaternion.createFromAxisAngle(new Vector3(0,1,0),75*Math.PI/180,newRot)\r\n\t\t//DEBUG\r\n\t\tthis.rotation = this.rotation;\r\n\t}\r\n\r\n\tstatic tmpVec3: Vector3 = new Vector3();\r\n\t/**\r\n\t * 这是一个 glmatrix中的函数\r\n\t * a,b都是规格化以后的向量\r\n\t * Sets a quaternion to represent the shortest rotation from one\r\n\t * vector to another.\r\n\t *\r\n\t * Both vectors are assumed to be unit length.\r\n\t *\r\n\t * @param {quat} out the receiving quaternion.\r\n\t * @param {vec3} a the initial vector\r\n\t * @param {vec3} b the destination vector\r\n\t * @returns {quat} out\r\n\t */\r\n\trotationTo(out: Quaternion, a: Vector3, b: Vector3): boolean {\r\n\t\tvar dot: number = Vector3.dot(a, b);\r\n\t\tVector3.Up\r\n\t\tif (dot < -0.999999) {// 180度了，可以选择多个轴旋转\r\n\t\t\tVector3.cross(Vector3.UnitX, a, Transform3D.tmpVec3);\r\n\t\t\tif (Vector3.scalarLength(Transform3D.tmpVec3) < 0.000001)\r\n\t\t\t\tVector3.cross(Vector3.UnitY, a, Transform3D.tmpVec3);\r\n\t\t\tVector3.normalize(Transform3D.tmpVec3, Transform3D.tmpVec3);\r\n\t\t\tQuaternion.createFromAxisAngle(Transform3D.tmpVec3, Math.PI, out);\r\n\t\t\treturn true\r\n\t\t} else if (dot > 0.999999) {// 没有变化\r\n\t\t\tout.x = 0;\r\n\t\t\tout.y = 0;\r\n\t\t\tout.z = 0;\r\n\t\t\tout.w = 1;\r\n\t\t\treturn false;\r\n\t\t} else {\r\n\t\t\t// 下面是求这个四元数，这是一个简化求法，根据cos(a/2)=√((1+dot)/2), cos(a/2)sin(a/2)=sin(a)/2 就能推导出来\r\n\t\t\tVector3.cross(a, b, Transform3D.tmpVec3);\r\n\t\t\tout.x = Transform3D.tmpVec3.x;\r\n\t\t\tout.y = Transform3D.tmpVec3.y;\r\n\t\t\tout.z = Transform3D.tmpVec3.z;\r\n\t\t\tout.w = 1 + dot;\r\n\t\t\tout.normalize(out);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { IClone } from \"../../../utils/IClone\";\r\nimport { PhysicsComponent } from \"../PhysicsComponent\";\r\nimport { CompoundColliderShape } from \"./CompoundColliderShape\";\r\nimport { ILaya3D } from \"../../../../ILaya3D\";\r\nimport { Matrix4x4 } from \"../../../maths/Matrix4x4\";\r\nimport { Quaternion } from \"../../../maths/Quaternion\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\n\r\n/**\r\n * <code>ColliderShape</code> 类用于创建形状碰撞器的父类，该类为抽象类。\r\n */\r\nexport class ColliderShape implements IClone {\r\n\t/** 形状方向_X轴正向 */\r\n\tstatic SHAPEORIENTATION_UPX: number = 0;\r\n\t/** 形状方向_Y轴正向 */\r\n\tstatic SHAPEORIENTATION_UPY: number = 1;\r\n\t/** 形状方向_Z轴正向 */\r\n\tstatic SHAPEORIENTATION_UPZ: number = 2;\r\n\r\n\t/** @internal */\r\n\tstatic SHAPETYPES_BOX: number = 0;\r\n\t/** @internal */\r\n\tstatic SHAPETYPES_SPHERE: number = 1;\r\n\t/** @internal */\r\n\tstatic SHAPETYPES_CYLINDER: number = 2;\r\n\t/** @internal */\r\n\tstatic SHAPETYPES_CAPSULE: number = 3;\r\n\t/** @internal */\r\n\tstatic SHAPETYPES_CONVEXHULL: number = 4;\r\n\t/** @internal */\r\n\tstatic SHAPETYPES_COMPOUND: number = 5;\r\n\t/** @internal */\r\n\tstatic SHAPETYPES_STATICPLANE: number = 6;\r\n\t/** @internal */\r\n\tstatic SHAPETYPES_CONE: number = 7;\r\n\t/** @internal */\r\n\tstatic SHAPETYPES_HEIGHTFIELDTERRAIN: number = 8;\r\n\r\n\t/** @internal */\r\n\tstatic _tempVector30: Vector3 = new Vector3();\r\n\t/** @internal */\r\n\tprotected static _btScale: number;\r\n\t/**@internal */\r\n\tprotected static _btVector30: number;\r\n\t/**@internal */\r\n\tprotected static _btQuaternion0: number;\r\n\t/**@internal */\r\n\tprotected static _btTransform0: number;\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic __init__(): void {\r\n\t\tvar bt: any = ILaya3D.Physics3D._bullet;\r\n\t\tColliderShape._btScale = bt.btVector3_create(1, 1, 1);\r\n\t\tColliderShape._btVector30 = bt.btVector3_create(0, 0, 0);\r\n\t\tColliderShape._btQuaternion0 = bt.btQuaternion_create(0, 0, 0, 1);\r\n\t\tColliderShape._btTransform0 = bt.btTransform_create();\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic _createAffineTransformation(trans: Vector3, rot: Quaternion, outE: Float32Array): void {\r\n\r\n\t\tvar x: number = rot.x, y: number = rot.y, z: number = rot.z, w: number = rot.w, x2: number = x + x, y2: number = y + y, z2: number = z + z;\r\n\t\tvar xx: number = x * x2, xy: number = x * y2, xz: number = x * z2, yy: number = y * y2, yz: number = y * z2, zz: number = z * z2;\r\n\t\tvar wx: number = w * x2, wy: number = w * y2, wz: number = w * z2;\r\n\r\n\t\toutE[0] = (1 - (yy + zz));\r\n\t\toutE[1] = (xy + wz);\r\n\t\toutE[2] = (xz - wy);\r\n\t\toutE[3] = 0;\r\n\t\toutE[4] = (xy - wz);\r\n\t\toutE[5] = (1 - (xx + zz));\r\n\t\toutE[6] = (yz + wx);\r\n\t\toutE[7] = 0;\r\n\t\toutE[8] = (xz + wy);\r\n\t\toutE[9] = (yz - wx);\r\n\t\toutE[10] = (1 - (xx + yy));\r\n\t\toutE[11] = 0;\r\n\t\toutE[12] = trans.x;\r\n\t\toutE[13] = trans.y;\r\n\t\toutE[14] = trans.z;\r\n\t\toutE[15] = 1;\r\n\t}\r\n\r\n\t/**@internal */\r\n\tprotected _scale: Vector3 = new Vector3(1, 1, 1);\r\n\r\n\t/**@internal */\r\n\t_btShape: number;\r\n\t/**@internal */\r\n\t_type: number;//TODO:可以删掉\r\n\t/**@internal */\r\n\t_centerMatrix: Matrix4x4 = new Matrix4x4();\r\n\r\n\t/**@internal */\r\n\t_attatched: boolean = false;\r\n\t/**@internal */\r\n\t_indexInCompound: number = -1;\r\n\t/**@internal */\r\n\t_compoundParent: CompoundColliderShape = null;\r\n\t/**@internal */\r\n\t_attatchedCollisionObject: PhysicsComponent = null;\r\n\r\n\t/**@internal */\r\n\t_referenceCount: number = 0;\r\n\r\n\t/**@internal */\r\n\tprivate _localOffset: Vector3 = new Vector3(0, 0, 0);\r\n\t/**@internal */\r\n\tprivate _localRotation: Quaternion = new Quaternion(0, 0, 0, 1);\r\n\r\n\tneedsCustomCollisionCallback: boolean = false;//TODO:默认值,TODO:::::::::::::::::::::::::::::::\r\n\r\n\t/**\r\n\t * 碰撞类型。\r\n\t */\r\n\tget type(): number {\r\n\t\treturn this._type;\r\n\t}\r\n\r\n\t/**\r\n\t * Shape的本地偏移。\r\n\t */\r\n\tget localOffset(): Vector3 {\r\n\t\treturn this._localOffset;\r\n\t}\r\n\r\n\tset localOffset(value: Vector3) {\r\n\t\tthis._localOffset = value;\r\n\t\tif (this._compoundParent)\r\n\t\t\tthis._compoundParent._updateChildTransform(this);\r\n\t}\r\n\r\n\t/**\r\n\t * Shape的本地旋转。\r\n\t */\r\n\tget localRotation(): Quaternion {\r\n\t\treturn this._localRotation;\r\n\t}\r\n\r\n\tset localRotation(value: Quaternion) {\r\n\t\tthis._localRotation = value;\r\n\t\tif (this._compoundParent)\r\n\t\t\tthis._compoundParent._updateChildTransform(this);\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个新的 <code>ColliderShape</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_setScale(value: Vector3): void {\r\n\t\tif (this._compoundParent) {//TODO:待查,这里有问题\r\n\t\t\tthis.updateLocalTransformations();\r\n\t\t} else {\r\n\t\t\tvar bt: any = ILaya3D.Physics3D._bullet;\r\n\t\t\tbt.btVector3_setValue(ColliderShape._btScale, value.x, value.y, value.z);\r\n\t\t\tbt.btCollisionShape_setLocalScaling(this._btShape, ColliderShape._btScale);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 更新本地偏移,如果修改LocalOffset或LocalRotation需要调用。\r\n\t */\r\n\tupdateLocalTransformations(): void {//TODO:是否需要优化\r\n\t\tif (this._compoundParent) {\r\n\t\t\tvar offset: Vector3 = ColliderShape._tempVector30;\r\n\t\t\tVector3.multiply(this.localOffset, this._scale, offset);\r\n\t\t\tColliderShape._createAffineTransformation(offset, this.localRotation, this._centerMatrix.elements);\r\n\t\t} else {\r\n\t\t\tColliderShape._createAffineTransformation(this.localOffset, this.localRotation, this._centerMatrix.elements);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @param\tdestObject 克隆源。\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tvar destColliderShape: ColliderShape = (<ColliderShape>destObject);\r\n\t\tthis._localOffset.cloneTo(destColliderShape.localOffset);\r\n\t\tthis._localRotation.cloneTo(destColliderShape.localRotation);\r\n\t\tdestColliderShape.localOffset = destColliderShape.localOffset;\r\n\t\tdestColliderShape.localRotation = destColliderShape.localRotation;\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @return 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\treturn null;\r\n\t}\r\n\r\n\t/**\r\n\t * 销毁。\r\n\t */\r\n\tdestroy(): void {\r\n\t\tif (this._btShape) {\r\n\t\t\tILaya3D.Physics3D._bullet.btCollisionShape_destroy(this._btShape);\r\n\t\t\tthis._btShape = null;\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { ColliderShape } from \"./ColliderShape\";\r\nimport { ILaya3D } from \"../../../../ILaya3D\";\r\nimport { LayaEnv } from \"../../../../LayaEnv\";\r\n\r\n/**\r\n * <code>BoxColliderShape</code> 类用于创建盒子形状碰撞器。\r\n */\r\nexport class BoxColliderShape extends ColliderShape {\r\n\t/** @internal */\r\n\tprivate static _btSize: number;\r\n\r\n\t/**\r\n\t* @internal\r\n\t*/\r\n\tstatic __init__(): void {\r\n\t\tBoxColliderShape._btSize = ILaya3D.Physics3D._bullet.btVector3_create(0, 0, 0);\r\n\t}\r\n\r\n\t/**@internal */\r\n\tprivate _sizeX: number;\r\n\t/**@internal */\r\n\tprivate _sizeY: number;\r\n\t/**@internal */\r\n\tprivate _sizeZ: number;\r\n\r\n\t/**\r\n\t * X轴尺寸。\r\n\t */\r\n\tget sizeX(): number {\r\n\t\treturn this._sizeX;\r\n\t}\r\n\r\n\tset sizeX(value: number) {\r\n\t\tthis._sizeX = value;\r\n\t\tif (LayaEnv.isPlaying) {\r\n\t\t\tthis.changeBoxShape();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Y轴尺寸。\r\n\t */\r\n\tget sizeY(): number {\r\n\t\treturn this._sizeY;\r\n\t}\r\n\r\n\tset sizeY(value: number) {\r\n\t\tthis._sizeY = value;\r\n\t\tif (LayaEnv.isPlaying) {\r\n\t\t\tthis.changeBoxShape();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Z轴尺寸。\r\n\t */\r\n\tget sizeZ(): number {\r\n\t\treturn this._sizeZ;\r\n\t}\r\n\r\n\tset sizeZ(value: number) {\r\n\t\tthis._sizeZ = value;\r\n\t\tif (LayaEnv.isPlaying) {\r\n\t\t\tthis.changeBoxShape();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个新的 <code>BoxColliderShape</code> 实例。\r\n\t * @param sizeX 盒子X轴尺寸。\r\n\t * @param sizeY 盒子Y轴尺寸。\r\n\t * @param sizeZ 盒子Z轴尺寸。\r\n\t */\r\n\tconstructor(sizeX: number = 1.0, sizeY: number = 1.0, sizeZ: number = 1.0) {\r\n\r\n\t\tsuper();\r\n\t\tthis._sizeX = sizeX;\r\n\t\tthis._sizeY = sizeY;\r\n\t\tthis._sizeZ = sizeZ;\r\n\t\tthis._type = ColliderShape.SHAPETYPES_BOX;\r\n\r\n\t\tvar bt: any = ILaya3D.Physics3D._bullet;\r\n\t\tbt.btVector3_setValue(BoxColliderShape._btSize, sizeX / 2, sizeY / 2, sizeZ / 2);\r\n\t\tthis._btShape = bt.btBoxShape_create(BoxColliderShape._btSize);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tchangeBoxShape() {\r\n\t\t//TODO Miner\r\n\t\tvar bt: any = ILaya3D.Physics3D._bullet;\r\n\t\tif (this._btShape) {\r\n\t\t\tbt.btCollisionShape_destroy(this._btShape);\r\n\t\t}\r\n\t\tbt.btVector3_setValue(BoxColliderShape._btSize, this._sizeX / 2, this._sizeY / 2, this._sizeZ / 2);\r\n\t\tthis._btShape = bt.btBoxShape_create(BoxColliderShape._btSize);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tclone(): any {\r\n\t\tvar dest: BoxColliderShape = new BoxColliderShape(this._sizeX, this._sizeY, this._sizeZ);\r\n\t\tthis.cloneTo(dest);\r\n\t\treturn dest;\r\n\t}\r\n}\r\n\r\n\r\n","import { ColliderShape } from \"./ColliderShape\";\r\nimport { ILaya3D } from \"../../../../ILaya3D\";\r\nimport { LayaEnv } from \"../../../../LayaEnv\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\n\r\n/**\r\n * <code>CapsuleColliderShape</code> 类用于创建胶囊形状碰撞器。\r\n */\r\nexport class CapsuleColliderShape extends ColliderShape {\r\n\t/** @internal */\r\n\tpublic static _tempVector30: Vector3 = new Vector3();\r\n\r\n\t/**@internal */\r\n\tprivate _radius: number;\r\n\t/**@internal */\r\n\tprivate _length: number;\r\n\t/**@internal */\r\n\tprivate _orientation: number;\r\n\r\n\t/**\r\n\t * 半径。\r\n\t */\r\n\tget radius(): number {\r\n\t\treturn this._radius;\r\n\t}\r\n\r\n\tset radius(value: number) {\r\n\t\tthis._radius = value;\r\n\t\tif (LayaEnv.isPlaying) {\r\n\t\t\tthis.changeCapsuleShape();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 长度。\r\n\t */\r\n\tget length(): number {\r\n\t\treturn this._length;\r\n\t}\r\n\r\n\tset length(value: number) {\r\n\t\tthis._length = value;\r\n\t\tif (LayaEnv.isPlaying) {\r\n\t\t\tthis.changeCapsuleShape();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 方向。\r\n\t */\r\n\tget orientation(): number {\r\n\t\treturn this._orientation;\r\n\t}\r\n\r\n\tset orientation(value: number) {\r\n\t\tthis._orientation = value;\r\n\t\tif (LayaEnv.isPlaying) {\r\n\t\t\tthis.changeCapsuleShape();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个新的 <code>CapsuleColliderShape</code> 实例。\r\n\t * @param 半径。\r\n\t * @param 高(包含半径)。\r\n\t * @param orientation 胶囊体方向。\r\n\t */\r\n\tconstructor(radius: number = 0.5, length: number = 2, orientation: number = ColliderShape.SHAPEORIENTATION_UPY) {\r\n\r\n\t\tsuper();\r\n\t\tthis._radius = radius;\r\n\t\tthis._length = length;\r\n\t\tthis._orientation = orientation;\r\n\t\tthis._type = ColliderShape.SHAPETYPES_CAPSULE;\r\n\r\n\t\tvar bt: any = ILaya3D.Physics3D._bullet;\r\n\t\tswitch (orientation) {\r\n\t\t\tcase ColliderShape.SHAPEORIENTATION_UPX:\r\n\t\t\t\tthis._btShape = bt.btCapsuleShapeX_create(radius, length - radius * 2);\r\n\t\t\t\tbreak;\r\n\t\t\tcase ColliderShape.SHAPEORIENTATION_UPY:\r\n\t\t\t\tthis._btShape = bt.btCapsuleShape_create(radius, length - radius * 2);\r\n\t\t\t\tbreak;\r\n\t\t\tcase ColliderShape.SHAPEORIENTATION_UPZ:\r\n\t\t\t\tthis._btShape = bt.btCapsuleShapeZ_create(radius, length - radius * 2);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow \"CapsuleColliderShape:unknown orientation.\";\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tchangeCapsuleShape() {\r\n\t\t//TODO MIner\r\n\t\tvar bt: any = ILaya3D.Physics3D._bullet;\r\n\t\tif (this._btShape) {\r\n\t\t\tbt.btCollisionShape_destroy(this._btShape);\r\n\t\t}\r\n\t\tswitch (this._orientation) {\r\n\t\t\tcase ColliderShape.SHAPEORIENTATION_UPX:\r\n\t\t\t\tthis._btShape = bt.btCapsuleShapeX_create(this._radius, this._length - this._radius * 2);\r\n\t\t\t\tbreak;\r\n\t\t\tcase ColliderShape.SHAPEORIENTATION_UPY:\r\n\t\t\t\tthis._btShape = bt.btCapsuleShape_create(this._radius, this._length - this._radius * 2);\r\n\t\t\t\tbreak;\r\n\t\t\tcase ColliderShape.SHAPEORIENTATION_UPZ:\r\n\t\t\t\tthis._btShape = bt.btCapsuleShapeZ_create(this._radius, this._length - this._radius * 2);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow \"CapsuleColliderShape:unknown orientation.\";\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\t_setScale(value: Vector3): void {\r\n\t\tvar fixScale: Vector3 = CapsuleColliderShape._tempVector30;\r\n\t\tswitch (this.orientation) {\r\n\t\t\tcase ColliderShape.SHAPEORIENTATION_UPX:\r\n\t\t\t\tfixScale.x = value.x;\r\n\t\t\t\tfixScale.y = fixScale.z = Math.max(value.y, value.z);\r\n\t\t\t\tbreak;\r\n\t\t\tcase ColliderShape.SHAPEORIENTATION_UPY:\r\n\t\t\t\tfixScale.y = value.y;\r\n\t\t\t\tfixScale.x = fixScale.z = Math.max(value.x, value.z);\r\n\t\t\t\tbreak;\r\n\t\t\tcase ColliderShape.SHAPEORIENTATION_UPZ:\r\n\t\t\t\tfixScale.z = value.z;\r\n\t\t\t\tfixScale.x = fixScale.y = Math.max(value.x, value.y);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow \"CapsuleColliderShape:unknown orientation.\";\r\n\t\t}\r\n\t\tsuper._setScale(fixScale);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tclone(): any {\r\n\t\tvar dest: CapsuleColliderShape = new CapsuleColliderShape(this._radius, this._length, this._orientation);\r\n\t\tthis.cloneTo(dest);\r\n\t\treturn dest;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { ColliderShape } from \"./ColliderShape\";\r\nimport { ILaya3D } from \"../../../../ILaya3D\";\r\nimport { Quaternion } from \"../../../maths/Quaternion\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\n\r\n/**\r\n * <code>CompoundColliderShape</code> 类用于创建组合碰撞器。\r\n */\r\nexport class CompoundColliderShape extends ColliderShape {\r\n\t/**@internal */\r\n\tprivate static _btVector3One: number;\r\n\t/**@internal */\r\n\tprivate static _btTransform: number;\r\n\t/**@internal */\r\n\tprivate static _btOffset: number;\r\n\t/**@internal */\r\n\tprivate static _btRotation: number;\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic __init__(): void {\r\n\t\tvar bt: any = ILaya3D.Physics3D._bullet;\r\n\t\tCompoundColliderShape._btVector3One = bt.btVector3_create(1, 1, 1);\r\n\t\tCompoundColliderShape._btTransform = bt.btTransform_create();\r\n\t\tCompoundColliderShape._btOffset = bt.btVector3_create(0, 0, 0);\r\n\t\tCompoundColliderShape._btRotation = bt.btQuaternion_create(0, 0, 0, 1);\r\n\t}\r\n\r\n\t/**@internal */\r\n\tprivate _childColliderShapes: ColliderShape[] = [];\r\n\r\n\t/**\r\n\t * 创建一个新的 <code>CompoundColliderShape</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis._type = ColliderShape.SHAPETYPES_COMPOUND;\r\n\t\tthis._btShape = ILaya3D.Physics3D._bullet.btCompoundShape_create();\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _clearChildShape(shape: ColliderShape): void {\r\n\t\tshape._attatched = false;\r\n\t\tshape._compoundParent = null;\r\n\t\tshape._indexInCompound = -1;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_updateChildTransform(shape: ColliderShape): void {\r\n\t\tvar bt: any = ILaya3D.Physics3D._bullet;\r\n\t\tvar offset: Vector3 = shape.localOffset;\r\n\t\tvar rotation: Quaternion = shape.localRotation;\r\n\t\tvar btOffset: number = ColliderShape._btVector30;\r\n\t\tvar btQuaternion: number = ColliderShape._btQuaternion0;\r\n\t\tvar btTransform: number = ColliderShape._btTransform0;\r\n\t\tbt.btVector3_setValue(btOffset, offset.x, offset.y, offset.z);\r\n\t\tbt.btQuaternion_setValue(btQuaternion, rotation.x, rotation.y, rotation.z, rotation.w);\r\n\t\tbt.btTransform_setOrigin(btTransform, btOffset);\r\n\t\tbt.btTransform_setRotation(btTransform, btQuaternion);\r\n\t\tbt.btCompoundShape_updateChildTransform(this._btShape, shape._indexInCompound, btTransform, true);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * 设置物理shape数组\r\n\t * IDE\r\n\t */\r\n\tpublic set shapes(value: ColliderShape[]) {\r\n\t\tfor (var i = this._childColliderShapes.length - 1; i >= 0; i--) {\r\n\t\t\tthis.removeChildShape(this._childColliderShapes[i]);\r\n\t\t}\r\n\r\n\t\tfor (var i = 0; i < value.length; i++) {\r\n\t\t\tthis.addChildShape(value[i]);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic get shapes(): ColliderShape[] {\r\n\t\treturn this._childColliderShapes;\r\n\t}\r\n\r\n\t/**\r\n\t * 添加子碰撞器形状。\r\n\t * @param\tshape 子碰撞器形状。\r\n\t */\r\n\taddChildShape(shape: ColliderShape): void {\r\n\t\tif (shape._attatched)\r\n\t\t\tthrow \"CompoundColliderShape: this shape has attatched to other entity.\";\r\n\r\n\t\tshape._attatched = true;\r\n\t\tshape._compoundParent = this;\r\n\t\tshape._indexInCompound = this._childColliderShapes.length;\r\n\t\tthis._childColliderShapes.push(shape);\r\n\t\tvar offset: Vector3 = shape.localOffset;\r\n\t\tvar rotation: Quaternion = shape.localRotation;\r\n\t\tvar bt: any = ILaya3D.Physics3D._bullet;\r\n\t\tbt.btVector3_setValue(CompoundColliderShape._btOffset, offset.x, offset.y, offset.z);\r\n\t\tbt.btQuaternion_setValue(CompoundColliderShape._btRotation, rotation.x, rotation.y, rotation.z, rotation.w);\r\n\t\tbt.btTransform_setOrigin(CompoundColliderShape._btTransform, CompoundColliderShape._btOffset);\r\n\t\tbt.btTransform_setRotation(CompoundColliderShape._btTransform, CompoundColliderShape._btRotation);\r\n\r\n\t\tvar btScale: number = bt.btCollisionShape_getLocalScaling(this._btShape);\r\n\t\tbt.btCollisionShape_setLocalScaling(this._btShape, CompoundColliderShape._btVector3One);\r\n\t\tbt.btCompoundShape_addChildShape(this._btShape, CompoundColliderShape._btTransform, shape._btShape);\r\n\t\tbt.btCollisionShape_setLocalScaling(this._btShape, btScale);\r\n\r\n\t\t(this._attatchedCollisionObject) && (this._attatchedCollisionObject.colliderShape = this);//修改子Shape需要重新赋值父Shape以及将物理精灵重新加入物理世界等操作\r\n\t}\r\n\r\n\t/**\r\n\t * 移除子碰撞器形状。\r\n\t * @param\tshape 子碰撞器形状。\r\n\t */\r\n\tremoveChildShape(shape: ColliderShape): void {\r\n\t\tif (shape._compoundParent === this) {\r\n\t\t\tvar index: number = shape._indexInCompound;\r\n\t\t\tthis._clearChildShape(shape);\r\n\t\t\tvar endShape: ColliderShape = this._childColliderShapes[this._childColliderShapes.length - 1];\r\n\t\t\tendShape._indexInCompound = index;\r\n\t\t\tthis._childColliderShapes[index] = endShape;\r\n\t\t\tthis._childColliderShapes.pop();\r\n\t\t\tILaya3D.Physics3D._bullet.btCompoundShape_removeChildShapeByIndex(this._btShape, index);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 清空子碰撞器形状。\r\n\t */\r\n\tclearChildShape(): void {\r\n\t\tfor (var i: number = 0, n: number = this._childColliderShapes.length; i < n; i++) {\r\n\t\t\tthis._clearChildShape(this._childColliderShapes[i]);\r\n\t\t\tILaya3D.Physics3D._bullet.btCompoundShape_removeChildShapeByIndex(this._btShape, 0);\r\n\t\t}\r\n\t\tthis._childColliderShapes.length = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取子形状数量。\r\n\t * @return\r\n\t */\r\n\tgetChildShapeCount(): number {\r\n\t\treturn this._childColliderShapes.length;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tvar destCompoundColliderShape: CompoundColliderShape = (<CompoundColliderShape>destObject);\r\n\t\tdestCompoundColliderShape.clearChildShape();\r\n\t\tfor (var i: number = 0, n: number = this._childColliderShapes.length; i < n; i++)\r\n\t\t\tdestCompoundColliderShape.addChildShape(this._childColliderShapes[i].clone());\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tclone(): any {\r\n\t\tvar dest: CompoundColliderShape = new CompoundColliderShape();\r\n\t\tthis.cloneTo(dest);\r\n\t\treturn dest;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tdestroy(): void {\r\n\t\tsuper.destroy();\r\n\t\tfor (var i: number = 0, n: number = this._childColliderShapes.length; i < n; i++) {\r\n\t\t\tvar childShape: ColliderShape = this._childColliderShapes[i];\r\n\t\t\tif (childShape._referenceCount === 0)\r\n\t\t\t\tchildShape.destroy();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { ColliderShape } from \"./ColliderShape\";\r\nimport { ILaya3D } from \"../../../../ILaya3D\";\r\nimport { LayaEnv } from \"../../../../LayaEnv\";\r\n\r\n/**\r\n * <code>ConeColliderShape</code> 类用于创建圆锥碰撞器。\r\n */\r\nexport class ConeColliderShape extends ColliderShape {\r\n\tprivate _orientation: number;\r\n\tprivate _radius: number = 1;\r\n\tprivate _height: number = 0.5;\r\n\r\n\t/**\r\n\t * 半径。\r\n\t */\r\n\tget radius(): number {\r\n\t\treturn this._radius;\r\n\t}\r\n\r\n\tset radius(value: number) {\r\n\t\tthis._radius = value;\r\n\t\tif (LayaEnv.isPlaying) this.changeConeShape();\r\n\t}\r\n\r\n\t/**\r\n\t * 高度。\r\n\t */\r\n\tget height(): number {\r\n\t\treturn this._height;\r\n\t}\r\n\r\n\tset height(value: number) {\r\n\t\tthis._height = value;\r\n\t\tif (LayaEnv.isPlaying) this.changeConeShape();\r\n\t}\r\n\r\n\t/**\r\n\t * 方向。\r\n\t */\r\n\tget orientation(): number {\r\n\t\treturn this._orientation;\r\n\t}\r\n\r\n\tset orientation(value: number) {\r\n\t\tthis._orientation = value;\r\n\t\tif (LayaEnv.isPlaying) this.changeConeShape();\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个新的 <code>ConeColliderShape</code> 实例。\r\n\t * @param height 高。\r\n\t * @param radius 半径。\r\n\t */\r\n\tconstructor(radius: number = 0.5, height: number = 1.0, orientation: number = ColliderShape.SHAPEORIENTATION_UPY) {\r\n\t\tsuper();\r\n\t\tthis._radius = radius;\r\n\t\tthis._height = height;\r\n\t\tthis._orientation = orientation;\r\n\t\tthis._type = ColliderShape.SHAPETYPES_CYLINDER;\r\n\t\tvar bt: any = ILaya3D.Physics3D._bullet;\r\n\t\tswitch (orientation) {\r\n\t\t\tcase ColliderShape.SHAPEORIENTATION_UPX:\r\n\t\t\t\tthis._btShape = bt.btConeShapeX_create(radius, height);\r\n\t\t\t\tbreak;\r\n\t\t\tcase ColliderShape.SHAPEORIENTATION_UPY:\r\n\t\t\t\tthis._btShape = bt.btConeShape_create(radius, height);\r\n\t\t\t\tbreak;\r\n\t\t\tcase ColliderShape.SHAPEORIENTATION_UPZ:\r\n\t\t\t\tthis._btShape = bt.btConeShapeZ_create(radius, height);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow \"ConeColliderShape:unknown orientation.\";\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tchangeConeShape() {\r\n\t\tvar bt: any = ILaya3D.Physics3D._bullet;\r\n\t\tif (this._btShape) {\r\n\t\t\tbt.btCollisionShape_destroy(this._btShape);\r\n\t\t}\r\n\r\n\t\tswitch (this._orientation) {\r\n\t\t\tcase ColliderShape.SHAPEORIENTATION_UPX:\r\n\t\t\t\tthis._btShape = bt.btConeShapeX_create(this._radius, this._height);\r\n\t\t\t\tbreak;\r\n\t\t\tcase ColliderShape.SHAPEORIENTATION_UPY:\r\n\t\t\t\tthis._btShape = bt.btConeShape_create(this._radius, this._height);\r\n\t\t\t\tbreak;\r\n\t\t\tcase ColliderShape.SHAPEORIENTATION_UPZ:\r\n\t\t\t\tthis._btShape = bt.btConeShapeZ_create(this._radius, this._height);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow \"ConeColliderShape:unknown orientation.\";\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @returns 克隆的ConeColliderShape实例\r\n\t */\r\n\tclone(): any {\r\n\t\tvar dest: ConeColliderShape = new ConeColliderShape(this._radius, this._height, this._orientation);\r\n\t\tthis.cloneTo(dest);\r\n\t\treturn dest;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { ColliderShape } from \"./ColliderShape\";\r\nimport { ILaya3D } from \"../../../../ILaya3D\";\r\nimport { LayaEnv } from \"../../../../LayaEnv\";\r\n\r\n/**\r\n * <code>CylinderColliderShape</code> 类用于创建圆柱碰撞器。\r\n */\r\nexport class CylinderColliderShape extends ColliderShape {\r\n\t/** @internal */\r\n\tprivate static _btSize: number;\r\n\r\n\t/**\r\n\t* @internal\r\n\t*/\r\n\tstatic __init__(): void {\r\n\t\tCylinderColliderShape._btSize = ILaya3D.Physics3D._bullet.btVector3_create(0, 0, 0);\r\n\t}\r\n\r\n\tprivate _orientation: number;\r\n\tprivate _radius: number = 1;\r\n\tprivate _height: number = 0.5;\r\n\r\n\t/**\r\n\t * 半径。\r\n\t */\r\n\tget radius(): number {\r\n\t\treturn this._radius;\r\n\t}\r\n\r\n\tset radius(value: number) {\r\n\t\tthis._radius = value;\r\n\t\tif (LayaEnv.isPlaying) this.changeCylinder();\r\n\t}\r\n\r\n\t/**\r\n\t * 高度。\r\n\t */\r\n\tget height(): number {\r\n\t\treturn this._height;\r\n\t}\r\n\r\n\tset height(value: number) {\r\n\t\tthis._height = value;\r\n\t\tif (LayaEnv.isPlaying) this.changeCylinder();\r\n\t}\r\n\r\n\t/**\r\n\t * 方向。\r\n\t */\r\n\tget orientation(): number {\r\n\t\treturn this._orientation;\r\n\t}\r\n\r\n\tset orientation(value: number) {\r\n\t\tthis._orientation = value;\r\n\t\tif (LayaEnv.isPlaying) this.changeCylinder();\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个新的 <code>CylinderColliderShape</code> 实例。\r\n\t * @param height 高。\r\n\t * @param radius 半径。\r\n\t */\r\n\tconstructor(radius: number = 0.5, height: number = 1.0, orientation: number = ColliderShape.SHAPEORIENTATION_UPY) {\r\n\t\tsuper();\r\n\t\tthis._radius = radius;\r\n\t\tthis._height = height;\r\n\t\tthis._orientation = orientation;\r\n\t\tthis._type = ColliderShape.SHAPETYPES_CYLINDER;\r\n\t\tvar bt: any = ILaya3D.Physics3D._bullet;\r\n\t\tswitch (orientation) {\r\n\t\t\tcase ColliderShape.SHAPEORIENTATION_UPX:\r\n\t\t\t\tbt.btVector3_setValue(CylinderColliderShape._btSize, height / 2, radius, radius);\r\n\t\t\t\tthis._btShape = bt.btCylinderShapeX_create(CylinderColliderShape._btSize);\r\n\t\t\t\tbreak;\r\n\t\t\tcase ColliderShape.SHAPEORIENTATION_UPY:\r\n\t\t\t\tbt.btVector3_setValue(CylinderColliderShape._btSize, radius, height / 2, radius);\r\n\t\t\t\tthis._btShape = bt.btCylinderShape_create(CylinderColliderShape._btSize);\r\n\t\t\t\tbreak;\r\n\t\t\tcase ColliderShape.SHAPEORIENTATION_UPZ:\r\n\t\t\t\tbt.btVector3_setValue(CylinderColliderShape._btSize, radius, radius, height / 2);\r\n\t\t\t\tthis._btShape = bt.btCylinderShapeZ_create(CylinderColliderShape._btSize);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow \"CapsuleColliderShape:unknown orientation.\";\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tchangeCylinder() {\r\n\t\t//TODO \r\n\t\tvar bt: any = ILaya3D.Physics3D._bullet;\r\n\t\tif (this._btShape) {\r\n\t\t\tbt.btCollisionShape_destroy(this._btShape);\r\n\t\t}\r\n\t\tswitch (this._orientation) {\r\n\t\t\tcase ColliderShape.SHAPEORIENTATION_UPX:\r\n\t\t\t\tbt.btVector3_setValue(CylinderColliderShape._btSize, this._height / 2, this._radius, this._radius);\r\n\t\t\t\tthis._btShape = bt.btCylinderShapeX_create(CylinderColliderShape._btSize);\r\n\t\t\t\tbreak;\r\n\t\t\tcase ColliderShape.SHAPEORIENTATION_UPY:\r\n\t\t\t\tbt.btVector3_setValue(CylinderColliderShape._btSize, this._radius, this._height / 2, this._radius);\r\n\t\t\t\tthis._btShape = bt.btCylinderShape_create(CylinderColliderShape._btSize);\r\n\t\t\t\tbreak;\r\n\t\t\tcase ColliderShape.SHAPEORIENTATION_UPZ:\r\n\t\t\t\tbt.btVector3_setValue(CylinderColliderShape._btSize, this._radius, this._radius, this._height / 2);\r\n\t\t\t\tthis._btShape = bt.btCylinderShapeZ_create(CylinderColliderShape._btSize);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow \"CapsuleColliderShape:unknown orientation.\";\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tclone(): any {\r\n\t\tvar dest: CylinderColliderShape = new CylinderColliderShape(this._radius, this._height, this._orientation);\r\n\t\tthis.cloneTo(dest);\r\n\t\treturn dest;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { Mesh } from \"../../resource/models/Mesh\";\r\nimport { ColliderShape } from \"./ColliderShape\";\r\nimport { ILaya3D } from \"../../../../ILaya3D\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\n\r\n/**\r\n * <code>MeshColliderShape</code> 类用于创建网格碰撞器。\r\n */\r\nexport class MeshColliderShape extends ColliderShape {\r\n\t/** @internal */\r\n\tprivate _mesh: Mesh = null;\r\n\t/** @internal */\r\n\tprivate _convex: boolean = false;\r\n\t/** @internal */\r\n\tprivate _physicMesh:any;\r\n\r\n\t/**\r\n\t * 网格。\r\n\t */\r\n\tget mesh(): Mesh {\r\n\t\treturn this._mesh;\r\n\t}\r\n\r\n\tset mesh(value: Mesh) {\r\n\t\tif(!value)\r\n\t\t\treturn;\r\n\t\tif (this._mesh !== value) {\r\n\t\t\tvar bt: any = ILaya3D.Physics3D._bullet;\r\n\t\t\tthis._physicMesh = value._getPhysicMesh()\r\n\t\t\tif (this._mesh) {\r\n\t\t\t\tbt.btCollisionShape_destroy(this._btShape);\r\n\t\t\t}\r\n\t\t\tthis._setPhysicsMesh();\r\n\t\t\tthis._mesh = value;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 是否使用凸多边形。\r\n\t */\r\n\tget convex(): boolean {\r\n\t\treturn this._convex;\r\n\t}\r\n\r\n\tset convex(value: boolean) {\r\n\t\tthis._convex = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个新的 <code>MeshColliderShape</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\r\n\t}\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_setPhysicsMesh(){\r\n\t\t//if (this._attatchedCollisionObject) {\r\n\t\t\tif(false){\r\n\t\t\t\tthis._createDynamicMeshCollider();\r\n\t\t\t}else{\r\n\t\t\t\tthis._createBvhTriangleCollider();\r\n\t\t\t\t//bt.btGImpactShapeInterface_updateBound(this._btShape);\r\n\t\t\t}\r\n\t\t//}\r\n\t}\r\n\r\n\tprivate _createDynamicMeshCollider(){\r\n\t\tvar bt: any = ILaya3D.Physics3D._bullet;\r\n\t\tif(this._physicMesh){\r\n\t\t\tthis._btShape = bt.btGImpactMeshShape_create(this._physicMesh);\r\n\t\t\tbt.btGImpactShapeInterface_updateBound(this._btShape);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate _createBvhTriangleCollider(){\r\n\t\tvar bt: any = ILaya3D.Physics3D._bullet;\r\n\t\tif(this._physicMesh)\r\n\t\tthis._btShape = bt.btBvhTriangleMeshShape_create(this._physicMesh);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\t_setScale(value: Vector3): void {\r\n\t\tif (this._compoundParent) {//TODO:待查,这里有问题\r\n\t\t\tthis.updateLocalTransformations();//TODO:\r\n\t\t} else {\r\n\t\t\tvar bt: any = ILaya3D.Physics3D._bullet;\r\n\t\t\tbt.btVector3_setValue(ColliderShape._btScale, value.x, value.y, value.z);\r\n\t\t\tbt.btCollisionShape_setLocalScaling(this._btShape, ColliderShape._btScale);\r\n\t\t\tif(this._attatchedCollisionObject&&this._attatchedCollisionObject._enableProcessCollisions){\r\n\t\t\t\tbt.btGImpactShapeInterface_updateBound(this._btShape);//更新缩放后需要更新包围体,有性能损耗\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tvar destMeshCollider: MeshColliderShape = (<MeshColliderShape>destObject);\r\n\t\tdestMeshCollider.convex = this._convex;\r\n\t\tdestMeshCollider.mesh = this._mesh;\r\n\t\tsuper.cloneTo(destObject);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tclone(): any {\r\n\t\tvar dest: MeshColliderShape = new MeshColliderShape();\r\n\t\tthis.cloneTo(dest);\r\n\t\treturn dest;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\tdestroy(): void {\r\n\t\tif (this._btShape) {\r\n\t\t\tILaya3D.Physics3D._bullet.btCollisionShape_destroy(this._btShape);\r\n\t\t\tthis._btShape = null;\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { ColliderShape } from \"./ColliderShape\";\r\nimport { ILaya3D } from \"../../../../ILaya3D\";\r\nimport { LayaEnv } from \"../../../../LayaEnv\";\r\n\r\n/**\r\n * <code>SphereColliderShape</code> 类用于创建球形碰撞器。\r\n */\r\nexport class SphereColliderShape extends ColliderShape {\r\n\t/** @internal */\r\n\tprivate _radius: number;\r\n\r\n\t/**\r\n\t * 半径。\r\n\t */\r\n\tget radius(): number {\r\n\t\treturn this._radius;\r\n\t}\r\n\r\n\tset radius(value: number) {\r\n\t\tthis._radius = value;\r\n\t\tif (LayaEnv.isPlaying) this.changeSphere();\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个新的 <code>SphereColliderShape</code> 实例。\r\n\t * @param radius 半径。\r\n\t */\r\n\tconstructor(radius: number = 0.5) {//TODO:球形旋转无效，需要优化\r\n\r\n\t\tsuper();\r\n\t\tthis._radius = radius;\r\n\t\tthis._type = ColliderShape.SHAPETYPES_SPHERE;\r\n\r\n\t\tthis._btShape = ILaya3D.Physics3D._bullet.btSphereShape_create(radius);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tchangeSphere() {\r\n\t\tvar bt: any = ILaya3D.Physics3D._bullet;\r\n\t\tif (this._btShape) {\r\n\t\t\tbt.btCollisionShape_destroy(this._btShape);\r\n\t\t}\r\n\t\tthis._btShape = ILaya3D.Physics3D._bullet.btSphereShape_create(this._radius);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tclone(): any {\r\n\t\tvar dest: SphereColliderShape = new SphereColliderShape(this._radius);\r\n\t\tthis.cloneTo(dest);\r\n\t\treturn dest;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","\r\nimport { Component } from \"../../components/Component\";\r\nimport { Event } from \"../../events/Event\";\r\nimport { Loader } from \"../../net/Loader\";\r\nimport { Scene3D } from \"../core/scene/Scene3D\";\r\nimport { Sprite3D } from \"../core/Sprite3D\";\r\nimport { Transform3D } from \"../core/Transform3D\";\r\nimport { Physics3DUtils } from \"../utils/Physics3DUtils\";\r\nimport { PhysicsSimulation } from \"./PhysicsSimulation\";\r\nimport { BoxColliderShape } from \"./shape/BoxColliderShape\";\r\nimport { CapsuleColliderShape } from \"./shape/CapsuleColliderShape\";\r\nimport { ColliderShape } from \"./shape/ColliderShape\";\r\nimport { CompoundColliderShape } from \"./shape/CompoundColliderShape\";\r\nimport { ConeColliderShape } from \"./shape/ConeColliderShape\";\r\nimport { CylinderColliderShape } from \"./shape/CylinderColliderShape\";\r\nimport { MeshColliderShape } from \"./shape/MeshColliderShape\";\r\nimport { SphereColliderShape } from \"./shape/SphereColliderShape\";\r\nimport { ILaya3D } from \"../../../ILaya3D\";\r\nimport { Matrix4x4 } from \"../../maths/Matrix4x4\";\r\nimport { Quaternion } from \"../../maths/Quaternion\";\r\nimport { Vector3 } from \"../../maths/Vector3\";\r\n\r\n/**\r\n * <code>PhysicsComponent</code> 类用于创建物理组件的父类。\r\n */\r\nexport class PhysicsComponent extends Component {\r\n    /** @internal */\r\n    static ACTIVATIONSTATE_ACTIVE_TAG = 1;\r\n    /** @internal */\r\n    static ACTIVATIONSTATE_ISLAND_SLEEPING = 2;\r\n    /** @internal */\r\n    static ACTIVATIONSTATE_WANTS_DEACTIVATION = 3;\r\n    /** @internal */\r\n    static ACTIVATIONSTATE_DISABLE_DEACTIVATION = 4;\r\n    /** @internal */\r\n    static ACTIVATIONSTATE_DISABLE_SIMULATION = 5;\r\n\r\n    /** @internal */\r\n    static COLLISIONFLAGS_STATIC_OBJECT = 1;\r\n    /** @internal */\r\n    static COLLISIONFLAGS_KINEMATIC_OBJECT = 2;\r\n    /** @internal */\r\n    static COLLISIONFLAGS_NO_CONTACT_RESPONSE = 4;\r\n    /** @internal */\r\n    static COLLISIONFLAGS_CUSTOM_MATERIAL_CALLBACK = 8;//this allows per-triangle material (friction/restitution)\r\n    /** @internal */\r\n    static COLLISIONFLAGS_CHARACTER_OBJECT = 16;\r\n    /** @internal */\r\n    static COLLISIONFLAGS_DISABLE_VISUALIZE_OBJECT = 32;//disable debug drawing\r\n    /** @internal */\r\n    static COLLISIONFLAGS_DISABLE_SPU_COLLISION_PROCESSING = 64;//disable parallel/SPU processing\r\n\r\n    /** @internal */\r\n    protected static _tempVector30: Vector3 = new Vector3();\r\n    /** @internal */\r\n    protected static _tempQuaternion0: Quaternion = new Quaternion();\r\n    /** @internal */\r\n    protected static _tempQuaternion1: Quaternion = new Quaternion();\r\n    /** @internal */\r\n    protected static _tempMatrix4x40: Matrix4x4 = new Matrix4x4();\r\n    /** @internal */\r\n    protected static _btVector30: number;\r\n    /** @internal */\r\n    protected static _btQuaternion0: number;\r\n\r\n    /** @internal */\r\n    static _physicObjectsMap: any = {};\r\n    /** @internal */\r\n    static _addUpdateList: boolean = true;\r\n\r\n    /**\r\n    * @internal\r\n    */\r\n    static __init__(): void {\r\n        var bt: any = ILaya3D.Physics3D._bullet;\r\n        PhysicsComponent._btVector30 = bt.btVector3_create(0, 0, 0);\r\n        PhysicsComponent._btQuaternion0 = bt.btQuaternion_create(0, 0, 0, 1);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private static _createAffineTransformationArray(tranX: number, tranY: number, tranZ: number, rotX: number, rotY: number, rotZ: number, rotW: number, scale: Float32Array, outE: Float32Array): void {\r\n\r\n        var x2 = rotX + rotX, y2 = rotY + rotY, z2 = rotZ + rotZ;\r\n        var xx = rotX * x2, xy = rotX * y2, xz = rotX * z2, yy = rotY * y2, yz = rotY * z2, zz = rotZ * z2;\r\n        var wx = rotW * x2, wy = rotW * y2, wz = rotW * z2, sx = scale[0], sy = scale[1], sz = scale[2];\r\n\r\n        outE[0] = (1 - (yy + zz)) * sx;\r\n        outE[1] = (xy + wz) * sx;\r\n        outE[2] = (xz - wy) * sx;\r\n        outE[3] = 0;\r\n        outE[4] = (xy - wz) * sy;\r\n        outE[5] = (1 - (xx + zz)) * sy;\r\n        outE[6] = (yz + wx) * sy;\r\n        outE[7] = 0;\r\n        outE[8] = (xz + wy) * sz;\r\n        outE[9] = (yz - wx) * sz;\r\n        outE[10] = (1 - (xx + yy)) * sz;\r\n        outE[11] = 0;\r\n        outE[12] = tranX;\r\n        outE[13] = tranY;\r\n        outE[14] = tranZ;\r\n        outE[15] = 1;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    static _creatShape(shapeData: any): ColliderShape {\r\n        var colliderShape: ColliderShape;\r\n        switch (shapeData.type) {\r\n            case \"BoxColliderShape\":\r\n                var sizeData: any[] = shapeData.size;\r\n                colliderShape = sizeData ? new BoxColliderShape(sizeData[0], sizeData[1], sizeData[2]) : new BoxColliderShape();\r\n                break;\r\n            case \"SphereColliderShape\":\r\n                colliderShape = new SphereColliderShape(shapeData.radius);\r\n                break;\r\n            case \"CapsuleColliderShape\":\r\n                colliderShape = new CapsuleColliderShape(shapeData.radius, shapeData.height, shapeData.orientation);\r\n                break;\r\n            case \"MeshColliderShape\":\r\n                var meshCollider: MeshColliderShape = new MeshColliderShape();\r\n                shapeData.mesh && (meshCollider.mesh = Loader.getRes(shapeData.mesh));\r\n                colliderShape = meshCollider;\r\n                break;\r\n            case \"ConeColliderShape\":\r\n                colliderShape = new ConeColliderShape(shapeData.radius, shapeData.height, shapeData.orientation);\r\n                break;\r\n            case \"CylinderColliderShape\":\r\n                colliderShape = new CylinderColliderShape(shapeData.radius, shapeData.height, shapeData.orientation);\r\n                break;\r\n            default:\r\n                throw \"unknown shape type.\";\r\n        }\r\n\r\n        if (shapeData.center) {\r\n            var localOffset: Vector3 = colliderShape.localOffset;\r\n            localOffset.fromArray(shapeData.center);\r\n            colliderShape.localOffset = localOffset;\r\n        }\r\n        return colliderShape;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private static physicVector3TransformQuat(source: Vector3, qx: number, qy: number, qz: number, qw: number, out: Vector3): void {\r\n        var x = source.x, y = source.y, z = source.z, ix = qw * x + qy * z - qz * y, iy = qw * y + qz * x - qx * z, iz = qw * z + qx * y - qy * x, iw = -qx * x - qy * y - qz * z;\r\n        out.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;\r\n        out.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;\r\n        out.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private static physicQuaternionMultiply(lx: number, ly: number, lz: number, lw: number, right: Quaternion, out: Quaternion): void {\r\n        var rx = right.x;\r\n        var ry = right.y;\r\n        var rz = right.z;\r\n        var rw = right.w;\r\n        var a = (ly * rz - lz * ry);\r\n        var b = (lz * rx - lx * rz);\r\n        var c = (lx * ry - ly * rx);\r\n        var d = (lx * rx + ly * ry + lz * rz);\r\n        out.x = (lx * rw + rx * lw) + a;\r\n        out.y = (ly * rw + ry * lw) + b;\r\n        out.z = (lz * rw + rz * lw) + c;\r\n        out.w = lw * rw - d;\r\n    }\r\n\r\n    /** @internal */\r\n    private _restitution = 0.0;\r\n    /** @internal */\r\n    private _friction = 0.5;\r\n    /** @internal */\r\n    private _rollingFriction = 0.0;\r\n    /** @internal */\r\n    private _ccdMotionThreshold = 0.0;\r\n    /** @internal */\r\n    private _ccdSweptSphereRadius = 0.0;\r\n\r\n    /** @internal */\r\n    protected _collisionGroup = Physics3DUtils.COLLISIONFILTERGROUP_DEFAULTFILTER;\r\n    /** @internal */\r\n    protected _canCollideWith = Physics3DUtils.COLLISIONFILTERGROUP_ALLFILTER;\r\n    /** @internal */\r\n    protected _colliderShape: ColliderShape = null;\r\n    /** @internal */\r\n    protected _transformFlag = 2147483647 /*int.MAX_VALUE*/;\r\n    /** @internal */\r\n    protected _controlBySimulation: boolean = false;\r\n\r\n    /** @internal */\r\n    _btColliderObject: number;//TODO:不用声明,TODO:删除相关判断\r\n    /** @internal */\r\n    _simulation: PhysicsSimulation;\r\n    /** @internal */\r\n    _enableProcessCollisions: boolean = true;\r\n    /** @internal */\r\n    _inPhysicUpdateListIndex = -1;\r\n\r\n    /** 是否可以缩放Shape。 */\r\n    canScaleShape: boolean = true;\r\n\r\n    /**\r\n     * 弹力。\r\n     */\r\n    get restitution(): number {\r\n        return this._restitution;\r\n    }\r\n\r\n    set restitution(value: number) {\r\n        this._restitution = value;\r\n        this._btColliderObject && ILaya3D.Physics3D._bullet.btCollisionObject_setRestitution(this._btColliderObject, value);\r\n    }\r\n\r\n    /**\r\n     * 摩擦力。\r\n     */\r\n    get friction(): number {\r\n        return this._friction;\r\n    }\r\n\r\n    set friction(value: number) {\r\n        this._friction = value;\r\n        this._btColliderObject && ILaya3D.Physics3D._bullet.btCollisionObject_setFriction(this._btColliderObject, value);\r\n    }\r\n\r\n    /**\r\n     * 滚动摩擦力。\r\n     */\r\n    get rollingFriction(): number {\r\n        return this._rollingFriction;\r\n    }\r\n\r\n    set rollingFriction(value: number) {\r\n        this._rollingFriction = value;\r\n        this._btColliderObject && ILaya3D.Physics3D._bullet.btCollisionObject_setRollingFriction(this._btColliderObject, value);\r\n    }\r\n\r\n    /**\r\n     * 用于连续碰撞检测(CCD)的速度阈值,当物体移动速度小于该值时不进行CCD检测,防止快速移动物体(例如:子弹)错误的穿过其它物体,0表示禁止。\r\n     */\r\n    get ccdMotionThreshold(): number {\r\n        return this._ccdMotionThreshold;\r\n    }\r\n\r\n    set ccdMotionThreshold(value: number) {\r\n        this._ccdMotionThreshold = value;\r\n        this._btColliderObject && ILaya3D.Physics3D._bullet.btCollisionObject_setCcdMotionThreshold(this._btColliderObject, value);\r\n    }\r\n\r\n    /**\r\n     * 获取用于进入连续碰撞检测(CCD)范围的球半径。\r\n     */\r\n    get ccdSweptSphereRadius(): number {\r\n        return this._ccdSweptSphereRadius;\r\n    }\r\n\r\n    set ccdSweptSphereRadius(value: number) {\r\n        this._ccdSweptSphereRadius = value;\r\n        this._btColliderObject && ILaya3D.Physics3D._bullet.btCollisionObject_setCcdSweptSphereRadius(this._btColliderObject, value);\r\n    }\r\n\r\n    /**\r\n     * 获取是否激活。\r\n     */\r\n    get isActive(): boolean {\r\n        return this._btColliderObject ? ILaya3D.Physics3D._bullet.btCollisionObject_isActive(this._btColliderObject) : false;\r\n    }\r\n\r\n    /**\r\n     * 碰撞形状。\r\n     */\r\n    get colliderShape(): ColliderShape {\r\n        return this._colliderShape;\r\n    }\r\n\r\n    set colliderShape(value: ColliderShape) {\r\n        var lastColliderShape: ColliderShape = this._colliderShape;\r\n        if (lastColliderShape) {\r\n            lastColliderShape._attatched = false;\r\n            lastColliderShape._attatchedCollisionObject = null;\r\n        }\r\n\r\n        this._colliderShape = value;\r\n        if (value) {\r\n            if (value._attatched) {\r\n                throw \"PhysicsComponent: this shape has attatched to other entity.\";\r\n            } else {\r\n                value._attatched = true;\r\n                value._attatchedCollisionObject = this;\r\n            }\r\n\r\n            if (this._btColliderObject) {\r\n                ILaya3D.Physics3D._bullet.btCollisionObject_setCollisionShape(this._btColliderObject, value._btShape);\r\n                var canInSimulation: boolean = this._simulation && this._enabled;\r\n                (canInSimulation && lastColliderShape) && (this._removeFromSimulation());//修改shape必须把Collison从物理世界中移除再重新添加\r\n                this._onShapeChange(value);//修改shape会计算惯性\r\n                if (canInSimulation) {\r\n                    this._derivePhysicsTransformation(true);\r\n                    this._addToSimulation();\r\n                }\r\n            }\r\n        } else {\r\n            if (this._simulation && this._enabled)\r\n                lastColliderShape && this._removeFromSimulation();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 模拟器。\r\n     */\r\n    get simulation(): PhysicsSimulation {\r\n        return this._simulation;\r\n    }\r\n\r\n    /**\r\n     * 所属碰撞组。\r\n     */\r\n    get collisionGroup(): number {\r\n        return this._collisionGroup;\r\n    }\r\n\r\n    set collisionGroup(value: number) {\r\n        if (this._collisionGroup !== value) {\r\n            this._collisionGroup = value;\r\n            if (this._simulation && this._colliderShape && this._enabled) {\r\n                this._removeFromSimulation();\r\n                this._addToSimulation();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 可碰撞的碰撞组,基于位运算。\r\n     */\r\n    get canCollideWith(): number {\r\n        return this._canCollideWith;\r\n    }\r\n\r\n    set canCollideWith(value: number) {\r\n        if (this._canCollideWith !== value) {\r\n            this._canCollideWith = value;\r\n            if (this._simulation && this._colliderShape && this._enabled) {\r\n                this._removeFromSimulation();\r\n                this._addToSimulation();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 创建一个 <code>PhysicsComponent</code> 实例。\r\n     * @param collisionGroup 所属碰撞组。\r\n     * @param canCollideWith 可产生碰撞的碰撞组。\r\n     */\r\n    constructor(collisionGroup: number, canCollideWith: number) {\r\n        super();\r\n        this._collisionGroup = collisionGroup;\r\n        this._canCollideWith = canCollideWith;\r\n        PhysicsComponent._physicObjectsMap[this.id] = this;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _parseShape(shapesData: any[]): void {\r\n        var shapeCount = shapesData.length;\r\n        if (shapeCount === 1) {\r\n            var shape: ColliderShape = PhysicsComponent._creatShape(shapesData[0]);\r\n            this.colliderShape = shape;\r\n        } else {\r\n            var compoundShape: CompoundColliderShape = new CompoundColliderShape();\r\n            for (var i = 0; i < shapeCount; i++) {\r\n                shape = PhysicsComponent._creatShape(shapesData[i]);\r\n                compoundShape.addChildShape(shape);\r\n            }\r\n            this.colliderShape = compoundShape;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _onScaleChange(scale: Vector3): void {\r\n        this._colliderShape._setScale(scale);\r\n    }\r\n\r\n    protected _onAdded(): void {\r\n        this.restitution = this._restitution;\r\n        this.friction = this._friction;\r\n        this.rollingFriction = this._rollingFriction;\r\n        this.ccdMotionThreshold = this._ccdMotionThreshold;\r\n        this.ccdSweptSphereRadius = this._ccdSweptSphereRadius;\r\n    }\r\n\r\n    protected _onEnable(): void {\r\n        (<Sprite3D>this.owner).transform.on(Event.TRANSFORM_CHANGED, this, this._onTransformChanged);\r\n        this._simulation = ((<Scene3D>this.owner._scene)).physicsSimulation;\r\n        ILaya3D.Physics3D._bullet.btCollisionObject_setContactProcessingThreshold(this._btColliderObject, 0);\r\n        if (this._colliderShape) {\r\n            this._derivePhysicsTransformation(true);\r\n            this._addToSimulation();\r\n        }\r\n    }\r\n\r\n    protected _onDisable(): void {\r\n        (<Sprite3D>this.owner).transform.off(Event.TRANSFORM_CHANGED, this, this._onTransformChanged);\r\n        if (this._colliderShape) {\r\n            this._removeFromSimulation();\r\n            (this._inPhysicUpdateListIndex !== -1) && (this._simulation._physicsUpdateList.remove(this));//销毁前一定会调用 _onDisable()\r\n        }\r\n        this._simulation = null;\r\n    }\r\n\r\n    protected _onDestroy() {\r\n        delete PhysicsComponent._physicObjectsMap[this.id];\r\n        ILaya3D.Physics3D._bullet.btCollisionObject_destroy(this._btColliderObject);\r\n        this._colliderShape && this._colliderShape.destroy();\r\n        this._btColliderObject = null;\r\n        this._colliderShape = null;\r\n        this._simulation = null;\r\n    }\r\n\r\n    /**\r\n     * 获得物理位置\r\n     * @returns 返回位置\r\n     */\r\n    getPhysicsPosition() {\r\n        var bt: any = ILaya3D.Physics3D._bullet;\r\n        var btColliderObject: number = this._btColliderObject;\r\n        var btTransform: number = bt.btCollisionObject_getWorldTransform(btColliderObject);\r\n        var btPosition: number = bt.btTransform_getOrigin(btTransform);\r\n        let x = bt.btVector3_x(btPosition);\r\n        let y = bt.btVector3_y(btPosition);\r\n        let z = bt.btVector3_z(btPosition);\r\n        PhysicsComponent._tempVector30.setValue(x, y, z);\r\n        return PhysicsComponent._tempVector30;\r\n    }\r\n\r\n    /**\r\n     * 获得物理四元数\r\n     * @returns \r\n     */\r\n    getPhysicsOrientation() {\r\n        var bt: any = ILaya3D.Physics3D._bullet;\r\n        var btColliderObject: number = this._btColliderObject;\r\n        var btTransform: number = bt.btCollisionObject_getWorldTransform(btColliderObject);\r\n        var btRotation: number = bt.btTransform_getRotation(btTransform);\r\n\r\n        var qx: number = bt.btQuaternion_x(btRotation);\r\n        var qy: number = bt.btQuaternion_y(btRotation);\r\n        var qz: number = bt.btQuaternion_z(btRotation);\r\n        var qw: number = bt.btQuaternion_w(btRotation);\r\n\r\n        PhysicsComponent._tempQuaternion0.setValue(qx, qy, qz, qw);\r\n        return PhysicsComponent._tempQuaternion0;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _isValid(): boolean {\r\n        return this._simulation && this._colliderShape && this._enabled;\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     * @internal\r\n     */\r\n    _parse(data: any): void {\r\n        (data.collisionGroup != null) && (this.collisionGroup = data.collisionGroup);\r\n        (data.canCollideWith != null) && (this.canCollideWith = data.canCollideWith);\r\n        (data.ccdMotionThreshold != null) && (this.ccdMotionThreshold = data.ccdMotionThreshold);\r\n        (data.ccdSweptSphereRadius != null) && (this.ccdSweptSphereRadius = data.ccdSweptSphereRadius);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _setTransformFlag(type: number, value: boolean): void {\r\n        if (value)\r\n            this._transformFlag |= type;\r\n        else\r\n            this._transformFlag &= ~type;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _getTransformFlag(type: number): boolean {\r\n        return (this._transformFlag & type) != 0;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _addToSimulation(): void {\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _removeFromSimulation(): void {\r\n\r\n    }\r\n\r\n    /**\r\n     * \t@internal\r\n     * 通过渲染矩阵更新物理矩阵。\r\n     */\r\n    _derivePhysicsTransformation(force: boolean): void {\r\n        var bt: any = ILaya3D.Physics3D._bullet;\r\n        var btColliderObject: number = this._btColliderObject;\r\n        var btTransform: number = bt.btCollisionObject_getWorldTransform(btColliderObject);\r\n        this._innerDerivePhysicsTransformation(btTransform, force);\r\n        bt.btCollisionObject_setWorldTransform(btColliderObject, btTransform);\r\n    }\r\n\r\n    /**\r\n     * \t@internal\r\n     *\t通过渲染矩阵更新物理矩阵。\r\n     */\r\n    _innerDerivePhysicsTransformation(physicTransformPtr: number, force: boolean): void {\r\n        var bt = ILaya3D.Physics3D._bullet;\r\n        var transform = (<Sprite3D>this.owner)._transform;\r\n\r\n        let pxoff = 0;\r\n        let pyoff = 0;\r\n        let pzoff = 0;\r\n\r\n        if (force || this._getTransformFlag(Transform3D.TRANSFORM_WORLDPOSITION)) {\r\n            var shapeOffset = this._colliderShape.localOffset;\r\n            var position = transform.position;\r\n            //position.x-=pxoff; position.y-=pyoff; position.z-=pzoff; 这里错了，-=会修改模型位置，\r\n            var btPosition = PhysicsComponent._btVector30;\r\n            if (shapeOffset.x !== 0 || shapeOffset.y !== 0 || shapeOffset.z !== 0) {\r\n                var physicPosition = PhysicsComponent._tempVector30;\r\n                var worldMat = transform.worldMatrix;\r\n                Vector3.transformCoordinate(shapeOffset, worldMat, physicPosition);\r\n                bt.btVector3_setValue(btPosition, physicPosition.x, physicPosition.y, physicPosition.z);\r\n            } else {\r\n                bt.btVector3_setValue(btPosition, position.x - pxoff, position.y - pyoff, position.z - pzoff);\r\n            }\r\n            bt.btTransform_setOrigin(physicTransformPtr, btPosition);\r\n            this._setTransformFlag(Transform3D.TRANSFORM_WORLDPOSITION, false);\r\n        }\r\n\r\n        if (force || this._getTransformFlag(Transform3D.TRANSFORM_WORLDQUATERNION)) {\r\n            var shapeRotation = this._colliderShape.localRotation;\r\n            var btRotation = PhysicsComponent._btQuaternion0;\r\n            var rotation = transform.rotation;\r\n            if (shapeRotation.x !== 0 || shapeRotation.y !== 0 || shapeRotation.z !== 0 || shapeRotation.w !== 1) {\r\n                var physicRotation = PhysicsComponent._tempQuaternion0;\r\n                PhysicsComponent.physicQuaternionMultiply(rotation.x, rotation.y, rotation.z, rotation.w, shapeRotation, physicRotation);\r\n                bt.btQuaternion_setValue(btRotation, physicRotation.x, physicRotation.y, physicRotation.z, physicRotation.w);\r\n            } else {\r\n                bt.btQuaternion_setValue(btRotation, rotation.x, rotation.y, rotation.z, rotation.w);\r\n            }\r\n            bt.btTransform_setRotation(physicTransformPtr, btRotation);\r\n            this._setTransformFlag(Transform3D.TRANSFORM_WORLDQUATERNION, false);\r\n        }\r\n\r\n        if (force || this._getTransformFlag(Transform3D.TRANSFORM_WORLDSCALE)) {\r\n            this._onScaleChange(transform.getWorldLossyScale());\r\n            this._setTransformFlag(Transform3D.TRANSFORM_WORLDSCALE, false);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * 通过物理矩阵更新渲染矩阵。\r\n     */\r\n    _updateTransformComponent(physicsTransform: number, syncRot = true, addmargin = 0): void {\r\n        //TODO:Need Test!!! because _innerDerivePhysicsTransformation update position use worldMatrix,not(position rotation WorldLossyScale),maybe the center is no different.\r\n        var bt: any = ILaya3D.Physics3D._bullet;\r\n        var colliderShape = this._colliderShape;\r\n        var localOffset = colliderShape.localOffset;\r\n        var localRotation = colliderShape.localRotation;\r\n\r\n        var transform = (<Sprite3D>this.owner)._transform;\r\n        if (!transform) return;\r\n        var position = transform.position;\r\n        var rotation = transform.rotation;\r\n\r\n        var btPosition: number = bt.btTransform_getOrigin(physicsTransform);\r\n\r\n        if (syncRot) {\r\n            var btRotation: number = bt.btTransform_getRotation(physicsTransform);\r\n\r\n            var btRotX: number = bt.btQuaternion_x(btRotation);\r\n            var btRotY: number = bt.btQuaternion_y(btRotation);\r\n            var btRotZ: number = bt.btQuaternion_z(btRotation);\r\n            var btRotW: number = bt.btQuaternion_w(btRotation);\r\n\r\n            if (localRotation.x !== 0 || localRotation.y !== 0 || localRotation.z !== 0 || localRotation.w !== 1) {\r\n                var invertShapeRotaion = PhysicsComponent._tempQuaternion0;\r\n                localRotation.invert(invertShapeRotaion);\r\n                PhysicsComponent.physicQuaternionMultiply(btRotX, btRotY, btRotZ, btRotW, invertShapeRotaion, rotation);\r\n            } else {\r\n                rotation.x = btRotX;\r\n                rotation.y = btRotY;\r\n                rotation.z = btRotZ;\r\n                rotation.w = btRotW;\r\n            }\r\n            transform.rotation = rotation;\r\n        }\r\n\r\n        if (localOffset.x !== 0 || localOffset.y !== 0 || localOffset.z !== 0) {\r\n            var btScale: number = bt.btCollisionShape_getLocalScaling(colliderShape._btShape);\r\n            var rotShapePosition = PhysicsComponent._tempVector30;\r\n            rotShapePosition.x = localOffset.x * bt.btVector3_x(btScale);\r\n            rotShapePosition.y = localOffset.y * bt.btVector3_y(btScale);\r\n            rotShapePosition.z = localOffset.z * bt.btVector3_z(btScale);\r\n            Vector3.transformQuat(rotShapePosition, rotation, rotShapePosition);\r\n            position.x = bt.btVector3_x(btPosition) - rotShapePosition.x;\r\n            //TODO 临时加一个0.04，对一个人来说0.04的margin太大了，足以把脚陷入地下，所以先加回来\r\n            position.y = bt.btVector3_y(btPosition) - rotShapePosition.y + addmargin;\r\n            position.z = bt.btVector3_z(btPosition) - rotShapePosition.z;\r\n        } else {\r\n            position.x = bt.btVector3_x(btPosition);\r\n            position.y = bt.btVector3_y(btPosition);\r\n            position.z = bt.btVector3_z(btPosition);\r\n        }\r\n\r\n        transform.position = position;\r\n        //transform.worldMatrix;  TODO\r\n        //this.owner.callaterChange && this.owner.callaterChange();\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _onShapeChange(colShape: ColliderShape): void {\r\n        var btColObj: any = this._btColliderObject;\r\n        var bt: any = ILaya3D.Physics3D._bullet;\r\n        var flags: number = bt.btCollisionObject_getCollisionFlags(btColObj);\r\n        if (colShape.needsCustomCollisionCallback) {\r\n            if ((flags & PhysicsComponent.COLLISIONFLAGS_CUSTOM_MATERIAL_CALLBACK) === 0)\r\n                bt.btCollisionObject_setCollisionFlags(btColObj, flags | PhysicsComponent.COLLISIONFLAGS_CUSTOM_MATERIAL_CALLBACK);\r\n        } else {\r\n            if ((flags & PhysicsComponent.COLLISIONFLAGS_CUSTOM_MATERIAL_CALLBACK) > 0)\r\n                bt.btCollisionObject_setCollisionFlags(btColObj, flags ^ PhysicsComponent.COLLISIONFLAGS_CUSTOM_MATERIAL_CALLBACK);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _onTransformChanged(flag: number): void {\r\n        if (PhysicsComponent._addUpdateList || !this._controlBySimulation) {//PhysicsComponent._addUpdateList = false is the stage of physic simulation.\r\n            flag &= Transform3D.TRANSFORM_WORLDPOSITION | Transform3D.TRANSFORM_WORLDQUATERNION | Transform3D.TRANSFORM_WORLDSCALE;//过滤有用TRANSFORM标记\r\n            if (flag) {\r\n                this._transformFlag |= flag;\r\n                if (this._isValid() && this._inPhysicUpdateListIndex === -1)//_isValid()表示可使用\r\n                    this._simulation._physicsUpdateList.add(this);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     * @internal\r\n     */\r\n    _cloneTo(dest: Component): void {\r\n        var destPhysicsComponent: PhysicsComponent = <PhysicsComponent>dest;\r\n        destPhysicsComponent.restitution = this._restitution;\r\n        destPhysicsComponent.friction = this._friction;\r\n        destPhysicsComponent.rollingFriction = this._rollingFriction;\r\n        destPhysicsComponent.ccdMotionThreshold = this._ccdMotionThreshold;\r\n        destPhysicsComponent.ccdSweptSphereRadius = this._ccdSweptSphereRadius;\r\n        destPhysicsComponent.collisionGroup = this._collisionGroup;\r\n        destPhysicsComponent.canCollideWith = this._canCollideWith;\r\n        destPhysicsComponent.canScaleShape = this.canScaleShape;\r\n        (this._colliderShape) && (destPhysicsComponent.colliderShape = this._colliderShape.clone());\r\n    }\r\n}\r\n\r\n","import { Physics3DUtils } from \"../utils/Physics3DUtils\";\r\nimport { Utils3D } from \"../utils/Utils3D\";\r\nimport { PhysicsComponent } from \"./PhysicsComponent\";\r\nimport { ColliderShape } from \"./shape/ColliderShape\";\r\nimport { Component } from \"../../components/Component\";\r\nimport { ILaya3D } from \"../../../ILaya3D\";\r\nimport { Rigidbody3D } from \"./Rigidbody3D\";\r\nimport { MeshColliderShape } from \"./shape/MeshColliderShape\";\r\nimport { Quaternion } from \"../../maths/Quaternion\";\r\nimport { Vector3 } from \"../../maths/Vector3\";\r\n\r\n/**\r\n * <code>CharacterController</code> 类用于创建角色控制器。\r\n */\r\nexport class CharacterController extends PhysicsComponent {\r\n    /** @internal */\r\n    private static _btTempVector30: number;\r\n    /** @internal */\r\n    private static tmpPosition = new Vector3();\r\n    /** @internal */\r\n    private static tmpOrientation = new Quaternion();\r\n    /**\r\n     * @internal\r\n     */\r\n    static __init__(): void {\r\n        CharacterController._btTempVector30 = ILaya3D.Physics3D._bullet.btVector3_create(0, 0, 0);\r\n    }\r\n\r\n    /* UP轴_X轴。*/\r\n    static UPAXIS_X = 0;\r\n    /* UP轴_Y轴。*/\r\n    static UPAXIS_Y = 1;\r\n    /* UP轴_Z轴。*/\r\n    static UPAXIS_Z = 2;\r\n\r\n\r\n\r\n    /** @internal */\r\n    private _stepHeight: number;\r\n    /** @internal */\r\n    private _upAxis = new Vector3(0, 1, 0);\r\n    /**@internal */\r\n    private _maxSlope = 90.0;\t// 45度容易在地形上卡住\r\n    /**@internal */\r\n    private _jumpSpeed = 10.0;\r\n    /**@internal */\r\n    private _fallSpeed = 55.0;\r\n    /** @internal */\r\n    private _gravity = new Vector3(0, -9.8 * 3, 0);\r\n\r\n    /**@internal */\r\n    _btKinematicCharacter: number = null;\r\n\r\n    userData: any;\r\n\r\n    /**@internal */\r\n    protected _pushForce = 1;\r\n\r\n\r\n    set colliderShape(value: ColliderShape) {\r\n        if (value instanceof MeshColliderShape) {\r\n            value = null;\r\n            console.error(\"CharacterController is not support MeshColliderShape\");\r\n        }\r\n        super.colliderShape = value;\r\n    }\r\n\r\n    /**\r\n    * 碰撞形状。\r\n    */\r\n    get colliderShape(): ColliderShape {\r\n        return this._colliderShape;\r\n    }\r\n\r\n    /**\r\n     * 角色降落速度。\r\n     */\r\n    get fallSpeed(): number {\r\n        return this._fallSpeed;\r\n    }\r\n\r\n    set fallSpeed(value: number) {\r\n        this._fallSpeed = value;\r\n        ILaya3D.Physics3D._bullet.btKinematicCharacterController_setFallSpeed(this._btKinematicCharacter, value);\r\n    }\r\n\r\n    /**\r\n     * 角色与其他物体碰撞的时候，产生的推力的大小\r\n     */\r\n    set pushForce(v: number) {\r\n        this._pushForce = v;\r\n        if (this._btKinematicCharacter) {\r\n            var bt: any = ILaya3D.Physics3D._bullet;\r\n            bt.btKinematicCharacterController_setPushForce(this._btKinematicCharacter, v);\r\n        }\r\n    }\r\n\r\n    get pushForce() {\r\n        return this._pushForce;\r\n        //var bt: any = ILaya3D.Physics3D._bullet;\r\n        //return bt.btKinematicCharacterController_getPushForce(this._btKinematicCharacter);\r\n    }\r\n\r\n    /**\r\n     * 角色跳跃速度。\r\n     */\r\n    get jumpSpeed(): number {\r\n        return this._jumpSpeed;\r\n    }\r\n\r\n    set jumpSpeed(value: number) {\r\n        this._jumpSpeed = value;\r\n        ILaya3D.Physics3D._bullet.btKinematicCharacterController_setJumpSpeed(this._btKinematicCharacter, value);\r\n    }\r\n\r\n    /**\r\n     * 重力。\r\n     */\r\n    get gravity(): Vector3 {\r\n        return this._gravity;\r\n    }\r\n\r\n    set gravity(value: Vector3) {\r\n        this._gravity = value;\r\n        var bt: any = ILaya3D.Physics3D._bullet;\r\n        var btGravity: number = CharacterController._btTempVector30;\r\n        bt.btVector3_setValue(btGravity, value.x, value.y, value.z);\r\n        bt.btKinematicCharacterController_setGravity(this._btKinematicCharacter, btGravity);\r\n    }\r\n\r\n    /**\r\n     * 最大坡度。\r\n     */\r\n    get maxSlope(): number {\r\n        return this._maxSlope;\r\n    }\r\n\r\n    set maxSlope(value: number) {\r\n        this._maxSlope = value;\r\n        ILaya3D.Physics3D._bullet.btKinematicCharacterController_setMaxSlope(this._btKinematicCharacter, (value / 180) * Math.PI);\r\n    }\r\n\r\n    /**\r\n     * 角色是否在地表。\r\n     */\r\n    get isGrounded(): boolean {\r\n        return ILaya3D.Physics3D._bullet.btKinematicCharacterController_onGround(this._btKinematicCharacter);\r\n    }\r\n\r\n    /**\r\n     * 角色行走的脚步高度，表示可跨越的最大高度。\r\n     */\r\n    get stepHeight(): number {\r\n        return this._stepHeight;\r\n    }\r\n\r\n    set stepHeight(value: number) {\r\n        this._stepHeight = value;\r\n        ILaya3D.Physics3D._bullet.btKinematicCharacterController_setStepHeight(this._btKinematicCharacter, value);\r\n    }\r\n\r\n    /**\r\n     * 角色的Up轴。\r\n     */\r\n    get upAxis(): Vector3 {\r\n        return this._upAxis;\r\n    }\r\n\r\n    set upAxis(value: Vector3) {\r\n        this._upAxis = value;\r\n        var btUpAxis: number = CharacterController._btTempVector30;\r\n        Utils3D._convertToBulletVec3(value, btUpAxis);\r\n        ILaya3D.Physics3D._bullet.btKinematicCharacterController_setUp(this._btKinematicCharacter, btUpAxis);\r\n    }\r\n\r\n    /**\r\n     * 角色位置\r\n     */\r\n    get position() {\r\n        let bt = ILaya3D.Physics3D._bullet;\r\n        let pPos = bt.btKinematicCharacterController_getCurrentPosition(this._btKinematicCharacter);\r\n        CharacterController.tmpPosition.setValue(\r\n            bt.btVector3_x(pPos),\r\n            bt.btVector3_y(pPos),\r\n            bt.btVector3_z(pPos));\r\n        return CharacterController.tmpPosition;\r\n    }\r\n\r\n    set position(v: Vector3) {\r\n        var bt = ILaya3D.Physics3D._bullet;\r\n        bt.btKinematicCharacterController_setCurrentPosition(this._btKinematicCharacter, v.x, v.y, v.z);\r\n        //var btColliderObject = this._btColliderObject;\r\n        //bt.btCollisionObject_setWorldTransformPos(btColliderObject, v.x, v.y, v.z);\t\t\r\n    }\r\n\r\n    /**\r\n     * 获得角色四元数\r\n     */\r\n    get orientation() {\r\n        let bt = ILaya3D.Physics3D._bullet;\r\n        let pQuat = bt.btKinematicCharacterController_getCurrentOrientation(this._btKinematicCharacter);\r\n        CharacterController.tmpOrientation.setValue(\r\n            bt.btQuaternion_x(pQuat),\r\n            bt.btQuaternion_y(pQuat),\r\n            bt.btQuaternion_z(pQuat),\r\n            bt.btQuaternion_w(pQuat));\r\n        return CharacterController.tmpOrientation;\r\n    }\r\n\r\n    set orientation(v: Quaternion) {\r\n        var bt = ILaya3D.Physics3D._bullet;\r\n        var btColliderObject = this._btColliderObject;\r\n        // 不能按照rigidbody算，会破坏内存\r\n        //bt.btRigidBody_setCenterOfMassOrientation(btColliderObject, v.x, v.y, v.z, v.w);\r\n    }\r\n\r\n\r\n    /**\r\n     * 创建一个 <code>CharacterController</code> 实例。\r\n     * @param stepheight 角色脚步高度。\r\n     * @param upAxis 角色Up轴\r\n     * @param collisionGroup 所属碰撞组。\r\n     * @param canCollideWith 可产生碰撞的碰撞组。\r\n     */\r\n    constructor(stepheight: number = 0.1, upAxis: Vector3 = null, collisionGroup: number = Physics3DUtils.COLLISIONFILTERGROUP_DEFAULTFILTER, canCollideWith: number = Physics3DUtils.COLLISIONFILTERGROUP_ALLFILTER) {\r\n        super(collisionGroup, canCollideWith);\r\n        this._stepHeight = stepheight;\r\n        (upAxis) && (this._upAxis = upAxis);\r\n        this._controlBySimulation = true;\r\n    }\r\n\r\n    private setJumpAxis(x: number, y: number, z: number) {\r\n        ILaya3D.Physics3D._bullet.btKinematicCharacterController_setJumpAxis(this._btKinematicCharacter, x, y, z);\r\n    }\r\n\r\n    protected _onAdded(): void {\r\n        var bt: any = ILaya3D.Physics3D._bullet;\r\n        var ghostObject: number = bt.btPairCachingGhostObject_create();\r\n        bt.btCollisionObject_setUserIndex(ghostObject, this.id);\r\n        bt.btCollisionObject_setCollisionFlags(ghostObject, PhysicsComponent.COLLISIONFLAGS_CHARACTER_OBJECT);\r\n        this._btColliderObject = ghostObject;\r\n        (this._colliderShape) && (this._constructCharacter());\r\n        super._onAdded();\r\n    }\r\n\r\n    protected _onDestroy() {\r\n        ILaya3D.Physics3D._bullet.btKinematicCharacterController_destroy(this._btKinematicCharacter);\r\n        super._onDestroy();\r\n        this._btKinematicCharacter = null;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _constructCharacter(): void {\r\n        var bt: any = ILaya3D.Physics3D._bullet;\r\n        if (this._btKinematicCharacter)\r\n            bt.btKinematicCharacterController_destroy(this._btKinematicCharacter);\r\n\r\n        var btUpAxis: number = CharacterController._btTempVector30;\r\n        bt.btVector3_setValue(btUpAxis, this._upAxis.x, this._upAxis.y, this._upAxis.z);\r\n        this._btKinematicCharacter = bt.btKinematicCharacterController_create(this._btColliderObject, this._colliderShape._btShape, this._stepHeight, btUpAxis);\r\n        //bt.btKinematicCharacterController_setUseGhostSweepTest(this._btKinematicCharacter, false);\r\n        this.fallSpeed = this._fallSpeed;\r\n        this.maxSlope = this._maxSlope;\r\n        this.jumpSpeed = this._jumpSpeed;\r\n        this.gravity = this._gravity;\r\n        this.setJumpAxis(0, 1, 0);\r\n        this.pushForce = this._pushForce;\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     * @internal\r\n     */\r\n    _onShapeChange(colShape: ColliderShape): void {\r\n        super._onShapeChange(colShape);\r\n        this._constructCharacter();\r\n    }\r\n\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     * @internal\r\n     */\r\n    _addToSimulation(): void {\r\n        this._simulation._characters.push(this);\r\n        this._simulation._addCharacter(this, this._collisionGroup, this._canCollideWith);\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     * @internal\r\n     */\r\n    _removeFromSimulation(): void {\r\n        this._simulation._removeCharacter(this);\r\n        var characters: CharacterController[] = this._simulation._characters;\r\n        characters.splice(characters.indexOf(this), 1);\r\n    }\r\n\r\n    /**\r\n     * 获得碰撞标签\r\n     * @returns \r\n     */\r\n    getHitFlag() {\r\n        return ILaya3D.Physics3D._bullet.btKinematicCharacterController_getHitFlag(this._btKinematicCharacter);\r\n    }\r\n\r\n    /**\r\n     * 获得速度\r\n     * @returns \r\n     */\r\n    getVerticalVel() {\r\n        return ILaya3D.Physics3D._bullet.btKinematicCharacterController_getVerticalVelocity(this._btKinematicCharacter);\r\n    }\r\n\r\n    /**\r\n     * 获得角色碰撞的对象\r\n     * @param cb \r\n     */\r\n    getOverlappingObj(cb: (body: Rigidbody3D) => void) {\r\n        var bt: any = ILaya3D.Physics3D._bullet;\r\n        let ghost = this._btColliderObject;\r\n        let num = bt.btCollisionObject_getNumOverlappingObjects(ghost);\r\n        for (let i = 0; i < num; i++) {\r\n            let obj = bt.btCollisionObject_getOverlappingObject(ghost, i);\r\n            let comp = PhysicsComponent._physicObjectsMap[bt.btCollisionObject_getUserIndex(obj)] as Rigidbody3D;\r\n            if (comp) {\r\n                cb(comp);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 通过指定移动向量移动角色。\r\n     * @param\tmovement 移动向量。\r\n     */\r\n    move(movement: Vector3): void {\r\n        var btMovement: number = CharacterController._btVector30;\r\n        var bt: any = ILaya3D.Physics3D._bullet;\r\n        bt.btVector3_setValue(btMovement, movement.x, movement.y, movement.z);\r\n        bt.btKinematicCharacterController_setWalkDirection(this._btKinematicCharacter, btMovement);\r\n    }\r\n\r\n    /**\r\n     * 跳跃。\r\n     * @param velocity 跳跃速度。\r\n     */\r\n    jump(velocity: Vector3 = null): void {\r\n        var bt: any = ILaya3D.Physics3D._bullet;\r\n        var btVelocity: number = CharacterController._btVector30;\r\n        if (velocity) {\r\n            Utils3D._convertToBulletVec3(velocity, btVelocity);\r\n            bt.btKinematicCharacterController_jump(this._btKinematicCharacter, btVelocity);\r\n        } else {\r\n            bt.btVector3_setValue(btVelocity, 0, this._jumpSpeed, 0);\r\n            bt.btKinematicCharacterController_jump(this._btKinematicCharacter, btVelocity);\r\n        }\r\n    }\r\n\r\n    get btColliderObject(): number {\r\n        return this._btColliderObject;\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     * @internal\r\n     */\r\n    _cloneTo(dest: Component): void {\r\n        super._cloneTo(dest);\r\n        var destCharacterController: CharacterController = <CharacterController>dest;\r\n        destCharacterController.stepHeight = this._stepHeight;\r\n        destCharacterController.upAxis = this._upAxis;\r\n        destCharacterController.maxSlope = this._maxSlope;\r\n        destCharacterController.jumpSpeed = this._jumpSpeed;\r\n        destCharacterController.fallSpeed = this._fallSpeed;\r\n        destCharacterController.gravity = this._gravity;\r\n    }\r\n}\r\n\r\n","import { PhysicsComponent } from \"./PhysicsComponent\";\r\nimport { SingletonList } from \"../../utils/SingletonList\"\r\n\r\n/**\r\n * <code>PhysicsUpdateList</code> 类用于实现物理更新队列。\r\n */\r\nexport class PhysicsUpdateList extends SingletonList<PhysicsComponent> {\r\n\r\n    /**\r\n     * 创建一个新的 <code>PhysicsUpdateList</code> 实例。\r\n     */\r\n    constructor() {\r\n        super();\r\n\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    add(element: PhysicsComponent): void {\r\n        var index: number = element._inPhysicUpdateListIndex;\r\n        if (index !== -1)\r\n            throw \"PhysicsUpdateList:element has  in  PhysicsUpdateList.\";\r\n        this._add(element);\r\n        element._inPhysicUpdateListIndex = this.length++;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    remove(element: PhysicsComponent): void {\r\n        var index: number = element._inPhysicUpdateListIndex;\r\n        this.length--;\r\n        if (index !== this.length) {\r\n            var end: any = this.elements[this.length];\r\n            this.elements[index] = end;\r\n            end._inPhysicUpdateListIndex = index;\r\n        }\r\n        element._inPhysicUpdateListIndex = -1;\r\n    }\r\n\r\n}\r\n\r\n\r\n","import { Vector3 } from \"../../maths/Vector3\";\r\nimport { PhysicsComponent } from \"./PhysicsComponent\"\r\n\r\n/**\r\n * <code>ContactPoint</code> 类用于创建物理碰撞信息。\r\n */\r\nexport class ContactPoint {\r\n\t/**@internal */\r\n\t_idCounter: number = 0;\r\n\r\n\t/**@internal */\r\n\t_id: number;\r\n\r\n\t/**碰撞器A。*/\r\n\tcolliderA: PhysicsComponent = null;\r\n\t/**碰撞器B。*/\r\n\tcolliderB: PhysicsComponent = null;\r\n\t/**距离。*/\r\n\tdistance: number = 0;\r\n\t/**法线。*/\r\n\tnormal: Vector3 = new Vector3();\r\n\t/**碰撞器A的碰撞点。*/\r\n\tpositionOnA: Vector3 = new Vector3();\r\n\t/**碰撞器B的碰撞点。*/\r\n\tpositionOnB: Vector3 = new Vector3();\r\n\r\n\t/**\r\n\t * 创建一个 <code>ContactPoint</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tthis._id = ++this._idCounter;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { Vector3 } from \"../../maths/Vector3\";\r\nimport { PhysicsComponent } from \"./PhysicsComponent\"\r\n\r\n/**\r\n * <code>HitResult</code> 类用于实现射线检测或形状扫描的结果。\r\n */\r\nexport class HitResult {\r\n    /** 是否成功。 */\r\n    succeeded: boolean = false;\r\n    /** 发生碰撞的碰撞组件。*/\r\n    collider: PhysicsComponent = null;\r\n    /** 碰撞点。*/\r\n    point: Vector3 = new Vector3();\r\n    /** 碰撞法线。*/\r\n    normal: Vector3 = new Vector3();\r\n    /** 碰撞分数。 */\r\n    hitFraction: number = 0;\r\n\r\n    /**\r\n     * 创建一个 <code>HitResult</code> 实例。\r\n     */\r\n    constructor() {\r\n        \r\n    }\r\n}\r\n\r\n\r\n","import { ContactPoint } from \"./ContactPoint\";\r\nimport { PhysicsComponent } from \"./PhysicsComponent\"\r\n\r\n/**\r\n * <code>Collision</code> 类用于创建物理碰撞信息。\r\n */\r\nexport class Collision {\r\n    /**@internal */\r\n    _lastUpdateFrame = -2147483648/*int.MIN_VALUE*/;\r\n    /**@internal */\r\n    _updateFrame = -2147483648/*int.MIN_VALUE*/;\r\n    /**@internal */\r\n    _isTrigger = false;\r\n\r\n    /**@internal */\r\n    _colliderA: PhysicsComponent;\r\n    /**@internal */\r\n    _colliderB: PhysicsComponent;\r\n\r\n    /**@readonly*/\r\n    contacts: ContactPoint[] = [];\r\n    /**@readonly*/\r\n    other: PhysicsComponent;\r\n\r\n    /**\r\n     * 创建一个 <code>Collision</code> 实例。\r\n     */\r\n    constructor() {\r\n\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _setUpdateFrame(farme: number): void {\r\n        this._lastUpdateFrame = this._updateFrame;//TODO:为啥整两个\r\n        this._updateFrame = farme;\r\n    }\r\n\r\n}\r\n\r\n\r\n","import { ContactPoint } from \"./ContactPoint\";\r\nimport { HitResult } from \"./HitResult\";\r\nimport { Collision } from \"./Collision\";\r\nimport { PhysicsComponent } from \"./PhysicsComponent\";\r\n\r\n/**\r\n * <code>CollisionMap</code> 类用于实现碰撞组合实例图。\r\n */\r\nexport class CollisionTool {\r\n\t/**@internal\t*/\r\n\tprivate _hitResultsPoolIndex: number = 0;\r\n\t/**@internal\t*/\r\n\tprivate _hitResultsPool: HitResult[] = [];\r\n\t/**@internal\t*/\r\n\tprivate _contactPonintsPoolIndex: number = 0;\r\n\t/**@internal\t*/\r\n\tprivate _contactPointsPool: ContactPoint[] = [];\r\n\t/**@internal */\r\n\tprivate _collisionsPool: Collision[] = [];\r\n\r\n\t/**@internal */\r\n\tprivate _collisions: any = {};\r\n\r\n\t/**\r\n\t * 创建一个 <code>CollisionMap</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tgetHitResult(): HitResult {\r\n\t\tvar hitResult: HitResult = this._hitResultsPool[this._hitResultsPoolIndex++];\r\n\t\tif (!hitResult) {\r\n\t\t\thitResult = new HitResult();\r\n\t\t\tthis._hitResultsPool.push(hitResult);\r\n\t\t}\r\n\t\treturn hitResult;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\trecoverAllHitResultsPool(): void {\r\n\t\tthis._hitResultsPoolIndex = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tgetContactPoints(): ContactPoint {\r\n\t\tvar contactPoint: ContactPoint = this._contactPointsPool[this._contactPonintsPoolIndex++];\r\n\t\tif (!contactPoint) {\r\n\t\t\tcontactPoint = new ContactPoint();\r\n\t\t\tthis._contactPointsPool.push(contactPoint);\r\n\t\t}\r\n\t\treturn contactPoint;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\trecoverAllContactPointsPool(): void {\r\n\t\tthis._contactPonintsPoolIndex = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tgetCollision(physicComponentA: PhysicsComponent, physicComponentB: PhysicsComponent): Collision {\r\n\t\tvar collision: Collision;\r\n\t\tvar idA = physicComponentA.id;\r\n\t\tvar idB = physicComponentB.id;\r\n\t\tvar subCollisionFirst: any = this._collisions[idA];\r\n\t\tif (subCollisionFirst)\r\n\t\t\tcollision = subCollisionFirst[idB];\r\n\t\tif (!collision) {\r\n\t\t\tif (!subCollisionFirst) {\r\n\t\t\t\tsubCollisionFirst = {};\r\n\t\t\t\tthis._collisions[idA] = subCollisionFirst;\r\n\t\t\t}\r\n\t\t\tcollision = this._collisionsPool.length === 0 ? new Collision() : this._collisionsPool.pop();\r\n\t\t\tcollision._colliderA = physicComponentA;\r\n\t\t\tcollision._colliderB = physicComponentB;\r\n\t\t\tsubCollisionFirst[idB] = collision;\r\n\t\t}\r\n\t\treturn collision;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\trecoverCollision(collision: Collision): void {\r\n\t\tvar idA = collision._colliderA.id;\r\n\t\tvar idB = collision._colliderB.id;\r\n\t\tthis._collisions[idA][idB] = null;\r\n\t\tthis._collisionsPool.push(collision);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tgarbageCollection(): void {//TODO:哪里调用\r\n\t\tthis._hitResultsPoolIndex = 0;\r\n\t\tthis._hitResultsPool.length = 0;\r\n\r\n\t\tthis._contactPonintsPoolIndex = 0;\r\n\t\tthis._contactPointsPool.length = 0;\r\n\r\n\t\tthis._collisionsPool.length = 0;\r\n\t\tfor (var subCollisionsKey in this._collisionsPool) {\r\n\t\t\tvar subCollisions: any = this._collisionsPool[subCollisionsKey];\r\n\t\t\tvar wholeDelete: boolean = true;\r\n\t\t\tfor (var collisionKey in subCollisions) {\r\n\t\t\t\tif (subCollisions[collisionKey])\r\n\t\t\t\t\twholeDelete = false;\r\n\t\t\t\telse\r\n\t\t\t\t\tdelete subCollisions[collisionKey];\r\n\t\t\t}\r\n\t\t\tif (wholeDelete)\r\n\t\t\t\tdelete this._collisionsPool[subCollisionsKey];\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\n","import { ILaya } from \"../../../ILaya\";\r\nimport { ILaya3D } from \"../../../ILaya3D\";\r\nimport { Matrix4x4 } from \"../../maths/Matrix4x4\";\r\nimport { Quaternion } from \"../../maths/Quaternion\";\r\nimport { Vector3 } from \"../../maths/Vector3\";\r\n\r\nexport class RaycastWheel {\r\n    btWheelPtr: number;\r\n    worldPos = new Vector3();\r\n    worldQuat = new Quaternion();\r\n    bt: any;\r\n    private btMemory: WebAssembly.Memory;\r\n    worldMat = new Matrix4x4();\r\n\r\n\r\n    constructor(ptr: number) {\r\n        this.btWheelPtr = ptr;\r\n        this.bt = ILaya3D.Physics3D._bullet;\r\n        this.btMemory = ILaya.Laya.WasmModules['bullet']?.memory;\r\n    }\r\n\r\n    set engineForce(force: number) {\r\n        this.bt.btWheelInfo_setEengineForce(this.btWheelPtr, force);\r\n    }\r\n\r\n    get engineForce() {\r\n        return this.bt.btWheelInfo_getEengineForce(this.btWheelPtr);\r\n    }\r\n\r\n    set steeringValue(v: number) {\r\n        this.bt.btWheelInfo_setSteeringValue(this.btWheelPtr, v);\r\n    }\r\n\r\n    get steeringValue() {\r\n        return this.bt.btWheelInfo_getSteeringValue(this.btWheelPtr);\r\n    }\r\n\r\n    set brake(v: number) {\r\n        this.bt.btWheelInfo_setBrake(this.btWheelPtr, v);\r\n    }\r\n\r\n    get brake() {\r\n        return this.bt.btWheelInfo_getBrake(this.btWheelPtr);\r\n    }\r\n\r\n    get rotation() {\r\n        let bt = this.bt;\r\n        return bt.btWheelInfo_getRrotation(this.btWheelPtr);\r\n    }\r\n\r\n    get deltaRotation() {\r\n        let bt = this.bt;\r\n        return bt.btWheelInfo_getDeltaRotation(this.btWheelPtr);\r\n    }\r\n\r\n    get transform() {\r\n        let bt = this.bt;\r\n        let btrans = bt.btWheelInfo_getWorldTransform(this.btWheelPtr);\r\n        let ret = this.worldMat;\r\n        let retarr = ret.elements;\r\n        if ((window as any).conch) {\r\n            // runtime没有wasm的memory\r\n            let o = bt.btTransform_getOrigin(btrans);\r\n            let basisptr = bt.btTransform_getBasis(btrans);\r\n            let r0 = bt.btMatrix3x3_getRow(basisptr, 0);\r\n            let r1 = bt.btMatrix3x3_getRow(basisptr, 1);\r\n            let r2 = bt.btMatrix3x3_getRow(basisptr, 2);\r\n            // 重新排列一下，使符合laya matrix44排列\r\n            retarr[0] = bt.btVector3_x(r0); retarr[1] = bt.btVector3_x(r1); retarr[2] = bt.btVector3_x(r2); retarr[3] = 0;\r\n            retarr[4] = bt.btVector3_y(r0); retarr[5] = bt.btVector3_y(r1); retarr[6] = bt.btVector3_y(r2); retarr[7] = 0;\r\n            retarr[8] = bt.btVector3_z(r0); retarr[9] = bt.btVector3_z(r1); retarr[10] = bt.btVector3_z(r2); retarr[11] = 0;\r\n            retarr[12] = bt.btVector3_x(o); retarr[13] = bt.btVector3_y(o); retarr[14] = bt.btVector3_z(o); retarr[15] = 1;\r\n        } else {\r\n            let mem = this.btMemory;\r\n            let fbuff = new Float64Array(mem.buffer, btrans, 16);\r\n            // 重新排列一下，使符合laya matrix44排列\r\n            retarr[0] = fbuff[0]; retarr[1] = fbuff[4]; retarr[2] = fbuff[8]; retarr[3] = 0;\r\n            retarr[4] = fbuff[1]; retarr[5] = fbuff[5]; retarr[6] = fbuff[9]; retarr[7] = 0;\r\n            retarr[8] = fbuff[2]; retarr[9] = fbuff[6]; retarr[10] = fbuff[10]; retarr[11] = 0;\r\n            retarr[12] = fbuff[12]; retarr[13] = fbuff[13]; retarr[14] = fbuff[14]; retarr[15] = 1;\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    getWorldTransform() {\r\n        let bt = this.bt;\r\n        let btrans = bt.btWheelInfo_getWorldTransform(this.btWheelPtr);\r\n        let btOri = bt.btTransform_getOrigin(btrans);\r\n        let btRot = bt.btTransform_getRotation(btrans); // transform 转成的rotation\r\n        this.worldPos.set(bt.btVector3_x(btOri), bt.btVector3_y(btOri), bt.btVector3_z(btOri));\r\n        this.worldQuat.set(bt.btQuaternion_x(btRot), bt.btQuaternion_y(btRot), bt.btQuaternion_z(btRot), bt.btQuaternion_w(btRot));\r\n    }\r\n}","import { ILaya3D } from \"../../../ILaya3D\";\r\nimport { Vector3 } from \"../../maths/Vector3\";\r\nimport { RaycastWheel } from \"./RaycastWheel\";\r\nexport class btVehicleTuning {\r\n    suspensionStiffness = 15.88;\r\n    suspensionCompression = 0.83;\r\n    suspensionDamping = 0.88;\r\n    maxSuspensionTravelCm = 500;\r\n    frictionSlip = 10.5;\r\n    maxSuspensionForce = 6000;\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class btWheelInfo {\r\n    btPointer: number;\r\n}\r\n\r\nexport class RaycastVehicle {\r\n    userdata: any;\r\n    btVehiclePtr: number;\r\n    //tuning\r\n    tuing = new btVehicleTuning();\r\n    private wheels:RaycastWheel[]=[];\r\n\r\n    constructor(btObj: number) {\r\n        this.btVehiclePtr = btObj;\r\n    }\r\n\r\n    addWheel(connectionPointCS0: Vector3, wheelDirectionCS0: Vector3, wheelAxleCS: Vector3, wheelRadius: number,\r\n        suspensionRestLength: number,\r\n        suspensionMaxTravel:number,\r\n        suspensionStiffness:number,\r\n        suspensionDamping:number,\r\n        frictionSlip:number,\r\n        isFrontWheel: boolean) {\r\n            \r\n        let bt: any = ILaya3D.Physics3D._bullet;\r\n        let tuing = this.tuing;\r\n\r\n        let id = this.getNumWheels();\r\n        let wheelinfo = bt.btRaycastVehicle_addWheel(this.btVehiclePtr, connectionPointCS0.x, connectionPointCS0.y, connectionPointCS0.z,\r\n            wheelDirectionCS0.x, wheelDirectionCS0.y, wheelDirectionCS0.z,\r\n            wheelAxleCS.x, wheelAxleCS.y, wheelAxleCS.z,\r\n            suspensionRestLength,\r\n            wheelRadius,\r\n            suspensionStiffness || tuing.suspensionStiffness,\r\n            tuing.suspensionCompression,\r\n            suspensionDamping   || tuing.suspensionDamping,\r\n            frictionSlip        || tuing.frictionSlip,\r\n            (suspensionMaxTravel?suspensionMaxTravel*100:tuing.maxSuspensionTravelCm),\r\n            tuing.maxSuspensionForce,\r\n            isFrontWheel\r\n        )\r\n\r\n        let wheel =  new RaycastWheel(wheelinfo);\r\n        this.wheels.push(wheel);\r\n        // 更新每个wheel的指针。 因为前面返回的指针在这次push之后会失效\r\n        for(let i=0,n=this.wheels.length; i<n; i++){\r\n            let cwheel = this.wheels[i];\r\n            cwheel.btWheelPtr = this.getWheelInfo(i);\r\n        }\r\n        return wheel;\r\n    }\r\n\r\n    getNumWheels() {\r\n        let bt: any = ILaya3D.Physics3D._bullet;\r\n        return bt.btRaycastVehicle_getNumWheels(this.btVehiclePtr);\r\n    }\r\n\r\n    getWheelInfo(i: number) {\r\n        let bt: any = ILaya3D.Physics3D._bullet;\r\n        return bt.btRaycastVehicle_getWheelInfo(this.btVehiclePtr, i);\r\n    }\r\n}","import { Ray } from \"../math/Ray\";\r\nimport { Physics3DUtils } from \"../utils/Physics3DUtils\";\r\nimport { CharacterController } from \"./CharacterController\";\r\nimport { PhysicsUpdateList } from \"./PhysicsUpdateList\";\r\nimport { Collision } from \"./Collision\";\r\nimport { CollisionTool } from \"./CollisionTool\";\r\nimport { ContactPoint } from \"./ContactPoint\";\r\nimport { HitResult } from \"./HitResult\";\r\nimport { PhysicsCollider } from \"./PhysicsCollider\";\r\nimport { PhysicsComponent } from \"./PhysicsComponent\";\r\nimport { PhysicsSettings } from \"./PhysicsSettings\";\r\nimport { PhysicsTriggerComponent } from \"./PhysicsTriggerComponent\";\r\nimport { Rigidbody3D } from \"./Rigidbody3D\";\r\nimport { ColliderShape } from \"./shape/ColliderShape\";\r\nimport { ConstraintComponent } from \"./constraints/ConstraintComponent\";\r\nimport { ILaya3D } from \"../../../ILaya3D\";\r\nimport { RaycastVehicle } from \"./RaycastVehicle\";\r\nimport { NodeFlags } from \"../../Const\";\r\nimport { Event } from \"../../events/Event\";\r\nimport { Quaternion } from \"../../maths/Quaternion\";\r\nimport { Vector3 } from \"../../maths/Vector3\";\r\n\r\n/**\r\n * <code>Simulation</code> 类用于创建物理模拟器。\r\n */\r\nexport class PhysicsSimulation {\r\n    /** @internal */\r\n    static PHYSICSENGINEFLAGS_NONE = 0x0;\r\n    /** @internal */\r\n    static PHYSICSENGINEFLAGS_COLLISIONSONLY = 0x1;\r\n    /** @internal */\r\n    static PHYSICSENGINEFLAGS_SOFTBODYSUPPORT = 0x2;\r\n    /** @internal */\r\n    static PHYSICSENGINEFLAGS_MULTITHREADED = 0x4;\r\n    /** @internal */\r\n    static PHYSICSENGINEFLAGS_USEHARDWAREWHENPOSSIBLE = 0x8;\r\n\r\n    /** @internal */\r\n    static SOLVERMODE_RANDMIZE_ORDER = 1;\r\n    /** @internal */\r\n    static SOLVERMODE_FRICTION_SEPARATE = 2;\r\n    /** @internal */\r\n    static SOLVERMODE_USE_WARMSTARTING = 4;\r\n    /** @internal */\r\n    static SOLVERMODE_USE_2_FRICTION_DIRECTIONS = 16;\r\n    /** @internal */\r\n    static SOLVERMODE_ENABLE_FRICTION_DIRECTION_CACHING = 32;\r\n    /** @internal */\r\n    static SOLVERMODE_DISABLE_VELOCITY_DEPENDENT_FRICTION_DIRECTION = 64;\r\n    /** @internal */\r\n    static SOLVERMODE_CACHE_FRIENDLY = 128;\r\n    /** @internal */\r\n    static SOLVERMODE_SIMD = 256;\r\n    /** @internal */\r\n    static SOLVERMODE_INTERLEAVE_CONTACT_AND_FRICTION_CONSTRAINTS = 512;\r\n    /** @internal */\r\n    static SOLVERMODE_ALLOW_ZERO_LENGTH_FRICTION_DIRECTIONS = 1024;\r\n    /** @internal 射线回调模式*/\r\n    static HITSRAYRESULTCALLBACK_FLAG_NONE = 0;\r\n    /** @internal 射线回调模式 忽略反面,射线检测时，会忽略掉反面的三角形*/\r\n    static HITSRAYRESULTCALLBACK_FLAG_FILTERBACKFACESS = 1;\r\n    /** @internal 射线回调模式*/\r\n    static HITSRAYRESULTCALLBACK_FLAG_KEEPUNFILIPPEDNORMAL = 2;\r\n    /** @internal 射线回调模式*/\r\n    static HITSRAYRESULTCALLBACK_FLAG_USESUBSIMPLEXCONVEXCASTRAYTEST = 4;\r\n    /** @internal 射线回调模式*/\r\n    static HITSRAYRESULTCALLBACK_FLAG_USEGJKCONVEXCASTRAYTEST = 8;\r\n    /** @internal 射线回调模式*/\r\n    static HITSRAYRESULTCALLBACK_FLAG_TERMINATOR = 0xffffffff;\r\n    /** @internal */\r\n    private static _btTempVector30: number;\r\n    /** @internal */\r\n    private static _btTempVector31: number;\r\n    /** @internal */\r\n    private static _btTempQuaternion0: number;\r\n    /** @internal */\r\n    private static _btTempQuaternion1: number;\r\n    /** @internal */\r\n    private static _btTempTransform0: number;\r\n    /** @internal */\r\n    private static _btTempTransform1: number;\r\n    /** @internal */\r\n    private static _tempVector30 = new Vector3();\r\n\r\n    /*是否禁用所有模拟器。*/\r\n    static disableSimulation = false;\r\n\r\n    protected _updateCount = 0;\r\n\r\n    /**\r\n    * @internal\r\n    */\r\n    static __init__(): void {\r\n        var bt: any = ILaya3D.Physics3D._bullet;\r\n        PhysicsSimulation._btTempVector30 = bt.btVector3_create(0, 0, 0);\r\n        PhysicsSimulation._btTempVector31 = bt.btVector3_create(0, 0, 0);\r\n        PhysicsSimulation._btTempQuaternion0 = bt.btQuaternion_create(0, 0, 0, 1);\r\n        PhysicsSimulation._btTempQuaternion1 = bt.btQuaternion_create(0, 0, 0, 1);\r\n        PhysicsSimulation._btTempTransform0 = bt.btTransform_create();\r\n        PhysicsSimulation._btTempTransform1 = bt.btTransform_create();\r\n    }\r\n\r\n    /**\r\n     * 创建限制刚体运动的约束条件。\r\n     */\r\n    static createConstraint(): void {//TODO: 两种重载函数\r\n        //TODO:\r\n    }\r\n\r\n    /** @internal */\r\n    private _btDiscreteDynamicsWorld: number;\r\n    /** @internal */\r\n    private _btCollisionWorld: number;\r\n    /** @internal */\r\n    protected _btDispatcher: number;\r\n    /** @internal */\r\n    private _btCollisionConfiguration: number;\r\n    /** @internal */\r\n    private _btBroadphase: number;\r\n    /** @internal */\r\n    _btSolverInfo: number;\r\n    /** @internal */\r\n    private _btDispatchInfo: number;\r\n    /** @internal */\r\n    private _gravity = new Vector3(0, -10, 0);\r\n\r\n    /** @internal */\r\n    private _btVector3Zero: number = ILaya3D.Physics3D._bullet.btVector3_create(0, 0, 0);\r\n    /** @internal */\r\n    private _btDefaultQuaternion: number = ILaya3D.Physics3D._bullet.btQuaternion_create(0, 0, 0, -1);\r\n    /** @internal */\r\n    private _btClosestRayResultCallback: number;\r\n    /** @internal */\r\n    private _btAllHitsRayResultCallback: number;\r\n    /** @internal */\r\n    private _btClosestConvexResultCallback: number;\r\n    /** @internal */\r\n    private _btAllConvexResultCallback: number;\r\n\r\n    /** @internal */\r\n    protected _collisionsUtils = new CollisionTool();\r\n    /** @internal */\r\n    protected _previousFrameCollisions: Collision[] = [];\r\n    /** @internal */\r\n    protected _currentFrameCollisions: Collision[] = [];\r\n    /** @internal */\r\n    private _currentConstraint: { [key: number]: ConstraintComponent } = {};\r\n    /** @internal */\r\n    _physicsUpdateList = new PhysicsUpdateList();\r\n    /**@internal\t*/\r\n    _characters: CharacterController[] = [];\r\n    /**@internal\t*/\r\n    _updatedRigidbodies = 0;\r\n\r\n    /**物理引擎在一帧中用于补偿减速的最大次数：模拟器每帧允许的最大模拟次数，如果引擎运行缓慢,可能需要增加该次数，否则模拟器会丢失“时间\",引擎间隔时间小于maxSubSteps*fixedTimeStep非常重要。*/\r\n    maxSubSteps = 1;\r\n    /**物理模拟器帧的间隔时间:通过减少fixedTimeStep可增加模拟精度，默认是1.0 / 60.0。*/\r\n    fixedTimeStep = 1.0 / 60.0;\r\n\r\n    dt = 1 / 60;\r\n\r\n    /**\r\n     * 是否进行连续碰撞检测。\r\n     */\r\n    get continuousCollisionDetection(): boolean {\r\n        return ILaya3D.Physics3D._bullet.btCollisionWorld_get_m_useContinuous(this._btDispatchInfo);\r\n    }\r\n\r\n    set continuousCollisionDetection(value: boolean) {\r\n        ILaya3D.Physics3D._bullet.btCollisionWorld_set_m_useContinuous(this._btDispatchInfo, value);\r\n    }\r\n\r\n    /**\r\n     * 获取重力。\r\n     */\r\n    get gravity(): Vector3 {\r\n        if (!this._btDiscreteDynamicsWorld)\r\n            throw \"Simulation:Cannot perform this action when the physics engine is set to CollisionsOnly\";\r\n        return this._gravity;\r\n    }\r\n\r\n    set gravity(value: Vector3) {\r\n        if (!this._btDiscreteDynamicsWorld)\r\n            throw \"Simulation:Cannot perform this action when the physics engine is set to CollisionsOnly\";\r\n\r\n        this._gravity = value;\r\n        var bt: any = ILaya3D.Physics3D._bullet;\r\n        var btGravity: number = PhysicsSimulation._btTempVector30;\r\n        bt.btVector3_setValue(btGravity, value.x, value.y, value.z);//TODO:是否先get省一个变量\r\n        bt.btDiscreteDynamicsWorld_setGravity(this._btDiscreteDynamicsWorld, btGravity);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    get speculativeContactRestitution(): boolean {\r\n        if (!this._btDiscreteDynamicsWorld)\r\n            throw \"Simulation:Cannot Cannot perform this action when the physics engine is set to CollisionsOnly\";\r\n        return ILaya3D.Physics3D._bullet.btDiscreteDynamicsWorld_getApplySpeculativeContactRestitution(this._btDiscreteDynamicsWorld);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    set speculativeContactRestitution(value: boolean) {\r\n        if (!this._btDiscreteDynamicsWorld)\r\n            throw \"Simulation:Cannot Cannot perform this action when the physics engine is set to CollisionsOnly\";\r\n        ILaya3D.Physics3D._bullet.btDiscreteDynamicsWorld_setApplySpeculativeContactRestitution(this._btDiscreteDynamicsWorld, value);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * 创建一个 <code>Simulation</code> 实例。\r\n     */\r\n    constructor(configuration: PhysicsSettings) {\r\n        this.maxSubSteps = configuration.maxSubSteps;\r\n        this.fixedTimeStep = configuration.fixedTimeStep;\r\n\r\n        var bt: any = ILaya3D.Physics3D._bullet;\r\n        this._btCollisionConfiguration = bt.btDefaultCollisionConfiguration_create();\r\n        this._btDispatcher = bt.btCollisionDispatcher_create(this._btCollisionConfiguration);\r\n        this._btBroadphase = bt.btDbvtBroadphase_create();\r\n        bt.btOverlappingPairCache_setInternalGhostPairCallback(bt.btDbvtBroadphase_getOverlappingPairCache(this._btBroadphase), bt.btGhostPairCallback_create());//this allows characters to have proper physics behavior\r\n\r\n        var conFlags = configuration.flags;\r\n        if (conFlags & PhysicsSimulation.PHYSICSENGINEFLAGS_COLLISIONSONLY) {\r\n            this._btCollisionWorld = new bt.btCollisionWorld(this._btDispatcher, this._btBroadphase, this._btCollisionConfiguration);\r\n        } else if (conFlags & PhysicsSimulation.PHYSICSENGINEFLAGS_SOFTBODYSUPPORT) {\r\n            throw \"PhysicsSimulation:SoftBody processing is not yet available\";\r\n        } else {\r\n            var solver: number = bt.btSequentialImpulseConstraintSolver_create();\r\n            this._btDiscreteDynamicsWorld = bt.btDiscreteDynamicsWorld_create(this._btDispatcher, this._btBroadphase, solver, this._btCollisionConfiguration);\r\n            this._btCollisionWorld = this._btDiscreteDynamicsWorld;\r\n        }\r\n\r\n        if (this._btDiscreteDynamicsWorld) {\r\n            this._btSolverInfo = bt.btDynamicsWorld_getSolverInfo(this._btDiscreteDynamicsWorld); //we are required to keep this reference, or the GC will mess up\r\n            this._btDispatchInfo = bt.btCollisionWorld_getDispatchInfo(this._btDiscreteDynamicsWorld);\r\n        }\r\n\r\n        this._btClosestRayResultCallback = bt.ClosestRayResultCallback_create(this._btVector3Zero, this._btVector3Zero);\r\n        this._btAllHitsRayResultCallback = bt.AllHitsRayResultCallback_create(this._btVector3Zero, this._btVector3Zero);\r\n        this._btClosestConvexResultCallback = bt.ClosestConvexResultCallback_create(this._btVector3Zero, this._btVector3Zero);\r\n        this._btAllConvexResultCallback = bt.AllConvexResultCallback_create(this._btVector3Zero, this._btVector3Zero);//TODO:是否优化C++\r\n        //this.setHitsRayResultCallbackFlag();\r\n        bt.btGImpactCollisionAlgorithm_RegisterAlgorithm(this._btDispatcher);//注册算法\r\n    }\r\n\r\n    enableDebugDrawer(b: boolean) {\r\n        var bt: any = ILaya3D.Physics3D._bullet;\r\n        bt.btDynamicsWorld_enableDebugDrawer(this._btDiscreteDynamicsWorld, b);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _simulate(deltaTime: number): void {\r\n        this._updatedRigidbodies = 0;\r\n        this.dt = deltaTime;\r\n        var bt: any = ILaya3D.Physics3D._bullet;\r\n        if (this._btDiscreteDynamicsWorld)\r\n            bt.btDiscreteDynamicsWorld_stepSimulation(this._btDiscreteDynamicsWorld, deltaTime, this.maxSubSteps, this.fixedTimeStep);\r\n        else\r\n            bt.PerformDiscreteCollisionDetection(this._btCollisionWorld);\r\n\r\n        this._updateCount++;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _destroy(): void {\r\n        var bt: any = ILaya3D.Physics3D._bullet;\r\n        if (this._btDiscreteDynamicsWorld) {\r\n            bt.btCollisionWorld_destroy(this._btDiscreteDynamicsWorld);\r\n            this._btDiscreteDynamicsWorld = null;\r\n        } else {\r\n            bt.btCollisionWorld_destroy(this._btCollisionWorld);\r\n            this._btCollisionWorld = null;\r\n        }\r\n\r\n        bt.btDbvtBroadphase_destroy(this._btBroadphase);\r\n        this._btBroadphase = null;\r\n        bt.btCollisionDispatcher_destroy(this._btDispatcher);\r\n        this._btDispatcher = null;\r\n        bt.btDefaultCollisionConfiguration_destroy(this._btCollisionConfiguration);\r\n        this._btCollisionConfiguration = null;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _addPhysicsCollider(component: PhysicsCollider, group: number, mask: number): void {\r\n        ILaya3D.Physics3D._bullet.btCollisionWorld_addCollisionObject(this._btCollisionWorld, component._btColliderObject, group, mask);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _removePhysicsCollider(component: PhysicsCollider): void {\r\n        ILaya3D.Physics3D._bullet.btCollisionWorld_removeCollisionObject(this._btCollisionWorld, component._btColliderObject);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _addRigidBody(rigidBody: Rigidbody3D, group: number, mask: number): void {\r\n        if (!this._btDiscreteDynamicsWorld)\r\n            throw \"Simulation:Cannot perform this action when the physics engine is set to CollisionsOnly\";\r\n        ILaya3D.Physics3D._bullet.btDiscreteDynamicsWorld_addRigidBody(this._btCollisionWorld, rigidBody._btColliderObject, group, mask);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _removeRigidBody(rigidBody: Rigidbody3D): void {\r\n        if (!this._btDiscreteDynamicsWorld)\r\n            throw \"Simulation:Cannot perform this action when the physics engine is set to CollisionsOnly\";\r\n        ILaya3D.Physics3D._bullet.btDiscreteDynamicsWorld_removeRigidBody(this._btCollisionWorld, rigidBody._btColliderObject);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _addCharacter(character: CharacterController, group: number, mask: number): void {\r\n        if (!this._btDiscreteDynamicsWorld)\r\n            throw \"Simulation:Cannot perform this action when the physics engine is set to CollisionsOnly\";\r\n        var bt: any = ILaya3D.Physics3D._bullet;\r\n        bt.btCollisionWorld_addCollisionObject(this._btCollisionWorld, character._btColliderObject, group, mask);\r\n        bt.btDynamicsWorld_addAction(this._btCollisionWorld, character._btKinematicCharacter);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _removeCharacter(character: CharacterController): void {\r\n        if (!this._btDiscreteDynamicsWorld)\r\n            throw \"Simulation:Cannot perform this action when the physics engine is set to CollisionsOnly\";\r\n        var bt: any = ILaya3D.Physics3D._bullet;\r\n        bt.btCollisionWorld_removeCollisionObject(this._btCollisionWorld, character._btColliderObject);\r\n        bt.btDynamicsWorld_removeAction(this._btCollisionWorld, character._btKinematicCharacter);\r\n    }\r\n\r\n    /**\r\n     * 射线检测第一个碰撞物体。\r\n     * @param\tfrom 起始位置。\r\n     * @param\tto 结束位置。\r\n     * @param\tout 碰撞结果。\r\n     * @param   collisonGroup 射线所属碰撞组。\r\n     * @param   collisionMask 与射线可产生碰撞的组。\r\n     * @return \t是否成功。\r\n     */\r\n    raycastFromTo(from: Vector3, to: Vector3, out: HitResult = null, collisonGroup: number = Physics3DUtils.COLLISIONFILTERGROUP_ALLFILTER, collisionMask: number = Physics3DUtils.COLLISIONFILTERGROUP_ALLFILTER): boolean {\r\n        var bt: any = ILaya3D.Physics3D._bullet;\r\n        var rayResultCall: number = this._btClosestRayResultCallback;\r\n        var rayFrom = PhysicsSimulation._btTempVector30;\r\n        var rayTo = PhysicsSimulation._btTempVector31;\r\n        bt.btVector3_setValue(rayFrom, from.x, from.y, from.z);\r\n        bt.btVector3_setValue(rayTo, to.x, to.y, to.z);\r\n        bt.ClosestRayResultCallback_set_m_rayFromWorld(rayResultCall, rayFrom);\r\n        bt.ClosestRayResultCallback_set_m_rayToWorld(rayResultCall, rayTo);\r\n        bt.RayResultCallback_set_m_collisionFilterGroup(rayResultCall, collisonGroup);\r\n        bt.RayResultCallback_set_m_collisionFilterMask(rayResultCall, collisionMask);\r\n\r\n        bt.RayResultCallback_set_m_collisionObject(rayResultCall, null);//还原默认值\r\n        bt.RayResultCallback_set_m_closestHitFraction(rayResultCall, 1);//还原默认值\r\n        bt.btCollisionWorld_rayTest(this._btCollisionWorld, rayFrom, rayTo, rayResultCall);//TODO:out为空可优化,bullet内\r\n        if (bt.RayResultCallback_hasHit(rayResultCall)) {\r\n            if (out) {\r\n                out.succeeded = true;\r\n                out.collider = PhysicsComponent._physicObjectsMap[bt.btCollisionObject_getUserIndex(bt.RayResultCallback_get_m_collisionObject(rayResultCall))];\r\n                out.hitFraction = bt.RayResultCallback_get_m_closestHitFraction(rayResultCall);\r\n                var btPoint: number = bt.ClosestRayResultCallback_get_m_hitPointWorld(rayResultCall);\r\n                var point = out.point;\r\n                point.x = bt.btVector3_x(btPoint);\r\n                point.y = bt.btVector3_y(btPoint);\r\n                point.z = bt.btVector3_z(btPoint);\r\n                var btNormal: number = bt.ClosestRayResultCallback_get_m_hitNormalWorld(rayResultCall);\r\n                var normal = out.normal;\r\n                normal.x = bt.btVector3_x(btNormal);\r\n                normal.y = bt.btVector3_y(btNormal);\r\n                normal.z = bt.btVector3_z(btNormal);\r\n            }\r\n            return true;\r\n        } else {\r\n            if (out)\r\n                out.succeeded = false;\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 射线检测所有碰撞的物体。\r\n     * @param\tfrom 起始位置。\r\n     * @param\tto 结束位置。\r\n     * @param\tout 碰撞结果[数组元素会被回收]。\r\n     * @param   collisonGroup 射线所属碰撞组。\r\n     * @param   collisionMask 与射线可产生碰撞的组。\r\n     * @return \t是否成功。\r\n     */\r\n    raycastAllFromTo(from: Vector3, to: Vector3, out: HitResult[], collisonGroup: number = Physics3DUtils.COLLISIONFILTERGROUP_ALLFILTER, collisionMask: number = Physics3DUtils.COLLISIONFILTERGROUP_ALLFILTER): boolean {\r\n        var bt: any = ILaya3D.Physics3D._bullet;\r\n        var rayResultCall: number = this._btAllHitsRayResultCallback;\r\n        var rayFrom: number = PhysicsSimulation._btTempVector30;\r\n        var rayTo: number = PhysicsSimulation._btTempVector31;\r\n\r\n        out.length = 0;\r\n        bt.btVector3_setValue(rayFrom, from.x, from.y, from.z);\r\n        bt.btVector3_setValue(rayTo, to.x, to.y, to.z);\r\n        bt.AllHitsRayResultCallback_set_m_rayFromWorld(rayResultCall, rayFrom);\r\n        bt.AllHitsRayResultCallback_set_m_rayToWorld(rayResultCall, rayTo);\r\n        bt.RayResultCallback_set_m_collisionFilterGroup(rayResultCall, collisonGroup);\r\n        bt.RayResultCallback_set_m_collisionFilterMask(rayResultCall, collisionMask);\r\n\r\n        //rayResultCall.set_m_collisionObject(null);//还原默认值\r\n        //rayResultCall.set_m_closestHitFraction(1);//还原默认值\r\n        var collisionObjects: number = bt.AllHitsRayResultCallback_get_m_collisionObjects(rayResultCall);\r\n        var btPoints: number = bt.AllHitsRayResultCallback_get_m_hitPointWorld(rayResultCall);\r\n        var btNormals: number = bt.AllHitsRayResultCallback_get_m_hitNormalWorld(rayResultCall);\r\n        var btFractions: number = bt.AllHitsRayResultCallback_get_m_hitFractions(rayResultCall);\r\n        bt.tBtCollisionObjectArray_clear(collisionObjects);//清空检测队列\r\n        bt.tVector3Array_clear(btPoints);\r\n        bt.tVector3Array_clear(btNormals);\r\n        bt.tScalarArray_clear(btFractions);\r\n        bt.btCollisionWorld_rayTest(this._btCollisionWorld, rayFrom, rayTo, rayResultCall);\r\n        var count: number = bt.tBtCollisionObjectArray_size(collisionObjects);\r\n        if (count > 0) {\r\n            this._collisionsUtils.recoverAllHitResultsPool();\r\n            for (var i = 0; i < count; i++) {\r\n                var hitResult = this._collisionsUtils.getHitResult();\r\n                out.push(hitResult);\r\n                hitResult.succeeded = true;\r\n                hitResult.collider = PhysicsComponent._physicObjectsMap[bt.btCollisionObject_getUserIndex(bt.tBtCollisionObjectArray_at(collisionObjects, i))];\r\n                hitResult.hitFraction = bt.tScalarArray_at(btFractions, i);\r\n                var btPoint: number = bt.tVector3Array_at(btPoints, i);//取出后需要立即赋值,防止取出法线时被覆盖\r\n                var pointE = hitResult.point;\r\n                pointE.x = bt.btVector3_x(btPoint);\r\n                pointE.y = bt.btVector3_y(btPoint);\r\n                pointE.z = bt.btVector3_z(btPoint);\r\n                var btNormal: number = bt.tVector3Array_at(btNormals, i);\r\n                var normal = hitResult.normal;\r\n                normal.x = bt.btVector3_x(btNormal);\r\n                normal.y = bt.btVector3_y(btNormal);\r\n                normal.z = bt.btVector3_z(btNormal);\r\n            }\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  射线检测第一个碰撞物体。\r\n     * @param  \tray        射线\r\n     * @param  \toutHitInfo 与该射线发生碰撞的第一个碰撞器的碰撞信息\r\n     * @param  \tdistance   射线长度,默认为最大值\r\n     * @param   collisonGroup 射线所属碰撞组。\r\n     * @param   collisionMask 与射线可产生碰撞的组。\r\n     * @return \t是否检测成功。\r\n     */\r\n    rayCast(ray: Ray, outHitResult: HitResult = null, distance: number = 2147483647/*Int.MAX_VALUE*/, collisonGroup: number = Physics3DUtils.COLLISIONFILTERGROUP_ALLFILTER, collisionMask: number = Physics3DUtils.COLLISIONFILTERGROUP_ALLFILTER): boolean {\r\n        var from = ray.origin;\r\n        var to = PhysicsSimulation._tempVector30;\r\n        Vector3.normalize(ray.direction, to);\r\n        Vector3.scale(to, distance, to);\r\n        Vector3.add(from, to, to);\r\n        return this.raycastFromTo(from, to, outHitResult, collisonGroup, collisionMask);\r\n    }\r\n\r\n    /**\r\n     * 射线检测所有碰撞的物体。\r\n     * @param  \tray        射线\r\n     * @param  \tout 碰撞结果[数组元素会被回收]。\r\n     * @param  \tdistance   射线长度,默认为最大值\r\n     * @param   collisonGroup 射线所属碰撞组。\r\n     * @param   collisionMask 与射线可产生碰撞的组。\r\n     * @return \t是否检测成功。\r\n     */\r\n    rayCastAll(ray: Ray, out: HitResult[], distance: number = 2147483647/*Int.MAX_VALUE*/, collisonGroup: number = Physics3DUtils.COLLISIONFILTERGROUP_ALLFILTER, collisionMask: number = Physics3DUtils.COLLISIONFILTERGROUP_ALLFILTER): boolean {\r\n        var from = ray.origin;\r\n        var to = PhysicsSimulation._tempVector30;\r\n        Vector3.normalize(ray.direction, to);\r\n        Vector3.scale(to, distance, to);\r\n        Vector3.add(from, to, to);\r\n        return this.raycastAllFromTo(from, to, out, collisonGroup, collisionMask);\r\n    }\r\n\r\n    /**\r\n     * 形状检测第一个碰撞的物体。\r\n     * @param   shape 形状。\r\n     * @param\tfromPosition 世界空间起始位置。\r\n     * @param\ttoPosition 世界空间结束位置。\r\n     * @param\tout 碰撞结果。\r\n     * @param\tfromRotation 起始旋转。\r\n     * @param\ttoRotation 结束旋转。\r\n     * @param   collisonGroup 射线所属碰撞组。\r\n     * @param   collisionMask 与射线可产生碰撞的组。\r\n     * @return \t是否成功。\r\n     */\r\n    shapeCast(shape: ColliderShape, fromPosition: Vector3, toPosition: Vector3, out: HitResult = null, fromRotation: Quaternion = null, toRotation: Quaternion = null, collisonGroup: number = Physics3DUtils.COLLISIONFILTERGROUP_ALLFILTER, collisionMask: number = Physics3DUtils.COLLISIONFILTERGROUP_ALLFILTER, allowedCcdPenetration: number = 0.0): boolean {\r\n        var bt: any = ILaya3D.Physics3D._bullet;\r\n        var convexResultCall: number = this._btClosestConvexResultCallback;\r\n        var convexPosFrom: number = PhysicsSimulation._btTempVector30;\r\n        var convexPosTo: number = PhysicsSimulation._btTempVector31;\r\n        var convexRotFrom: number = PhysicsSimulation._btTempQuaternion0;\r\n        var convexRotTo: number = PhysicsSimulation._btTempQuaternion1;\r\n        var convexTransform: number = PhysicsSimulation._btTempTransform0;\r\n        var convexTransTo: number = PhysicsSimulation._btTempTransform1;\r\n\r\n        var sweepShape: number = shape._btShape;\r\n\r\n        bt.btVector3_setValue(convexPosFrom, fromPosition.x, fromPosition.y, fromPosition.z);\r\n        bt.btVector3_setValue(convexPosTo, toPosition.x, toPosition.y, toPosition.z);\r\n        //convexResultCall.set_m_convexFromWorld(convexPosFrom);\r\n        //convexResultCall.set_m_convexToWorld(convexPosTo);\r\n        bt.ConvexResultCallback_set_m_collisionFilterGroup(convexResultCall, collisonGroup);\r\n        bt.ConvexResultCallback_set_m_collisionFilterMask(convexResultCall, collisionMask);\r\n\r\n        bt.btTransform_setOrigin(convexTransform, convexPosFrom);\r\n        bt.btTransform_setOrigin(convexTransTo, convexPosTo);\r\n\r\n        if (fromRotation) {\r\n            bt.btQuaternion_setValue(convexRotFrom, fromRotation.x, fromRotation.y, fromRotation.z, fromRotation.w);\r\n            bt.btTransform_setRotation(convexTransform, convexRotFrom);\r\n        } else {\r\n            bt.btTransform_setRotation(convexTransform, this._btDefaultQuaternion);\r\n        }\r\n        if (toRotation) {\r\n            bt.btQuaternion_setValue(convexRotTo, toRotation.x, toRotation.y, toRotation.z, toRotation.w);\r\n            bt.btTransform_setRotation(convexTransTo, convexRotTo);\r\n        } else {\r\n            bt.btTransform_setRotation(convexTransTo, this._btDefaultQuaternion);\r\n        }\r\n\r\n        bt.ClosestConvexResultCallback_set_m_hitCollisionObject(convexResultCall, null);//还原默认值\r\n        bt.ConvexResultCallback_set_m_closestHitFraction(convexResultCall, 1);//还原默认值\r\n        bt.btCollisionWorld_convexSweepTest(this._btCollisionWorld, sweepShape, convexTransform, convexTransTo, convexResultCall, allowedCcdPenetration);\r\n        if (bt.ConvexResultCallback_hasHit(convexResultCall)) {\r\n            if (out) {\r\n                out.succeeded = true;\r\n                out.collider = PhysicsComponent._physicObjectsMap[bt.btCollisionObject_getUserIndex(bt.ClosestConvexResultCallback_get_m_hitCollisionObject(convexResultCall))];\r\n                out.hitFraction = bt.ConvexResultCallback_get_m_closestHitFraction(convexResultCall);\r\n                var btPoint: number = bt.ClosestConvexResultCallback_get_m_hitPointWorld(convexResultCall);\r\n                var btNormal: number = bt.ClosestConvexResultCallback_get_m_hitNormalWorld(convexResultCall);\r\n                var point = out.point;\r\n                var normal = out.normal;\r\n                point.x = bt.btVector3_x(btPoint);\r\n                point.y = bt.btVector3_y(btPoint);\r\n                point.z = bt.btVector3_z(btPoint);\r\n                normal.x = bt.btVector3_x(btNormal);\r\n                normal.y = bt.btVector3_y(btNormal);\r\n                normal.z = bt.btVector3_z(btNormal);\r\n            }\r\n            return true;\r\n        } else {\r\n            if (out)\r\n                out.succeeded = false;\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 形状检测所有碰撞的物体。\r\n     * @param   shape 形状。\r\n     * @param\tfromPosition 世界空间起始位置。\r\n     * @param\ttoPosition 世界空间结束位置。\r\n     * @param\tout 碰撞结果[数组元素会被回收]。\r\n     * @param\tfromRotation 起始旋转。\r\n     * @param\ttoRotation 结束旋转。\r\n     * @param   collisonGroup 射线所属碰撞组。\r\n     * @param   collisionMask 与射线可产生碰撞的组。\r\n     * @return \t是否成功。\r\n     */\r\n    shapeCastAll(shape: ColliderShape, fromPosition: Vector3, toPosition: Vector3, out: HitResult[], fromRotation: Quaternion = null, toRotation: Quaternion = null, collisonGroup: number = Physics3DUtils.COLLISIONFILTERGROUP_ALLFILTER, collisionMask: number = Physics3DUtils.COLLISIONFILTERGROUP_ALLFILTER, allowedCcdPenetration: number = 0.0): boolean {\r\n        var bt: any = ILaya3D.Physics3D._bullet;\r\n        var convexResultCall: number = this._btAllConvexResultCallback;\r\n        var convexPosFrom: number = PhysicsSimulation._btTempVector30;\r\n        var convexPosTo: number = PhysicsSimulation._btTempVector31;\r\n        var convexRotFrom: number = PhysicsSimulation._btTempQuaternion0;\r\n        var convexRotTo: number = PhysicsSimulation._btTempQuaternion1;\r\n        var convexTransform: number = PhysicsSimulation._btTempTransform0;\r\n        var convexTransTo: number = PhysicsSimulation._btTempTransform1;\r\n\r\n        var sweepShape: number = shape._btShape;\r\n\r\n        out.length = 0;\r\n        bt.btVector3_setValue(convexPosFrom, fromPosition.x, fromPosition.y, fromPosition.z);\r\n        bt.btVector3_setValue(convexPosTo, toPosition.x, toPosition.y, toPosition.z);\r\n\r\n        //convexResultCall.set_m_convexFromWorld(convexPosFrom);\r\n        //convexResultCall.set_m_convexToWorld(convexPosTo);\r\n\r\n        bt.ConvexResultCallback_set_m_collisionFilterGroup(convexResultCall, collisonGroup);\r\n        bt.ConvexResultCallback_set_m_collisionFilterMask(convexResultCall, collisionMask);\r\n\r\n        bt.btTransform_setOrigin(convexTransform, convexPosFrom);\r\n        bt.btTransform_setOrigin(convexTransTo, convexPosTo);\r\n        if (fromRotation) {\r\n            bt.btQuaternion_setValue(convexRotFrom, fromRotation.x, fromRotation.y, fromRotation.z, fromRotation.w);\r\n            bt.btTransform_setRotation(convexTransform, convexRotFrom);\r\n        } else {\r\n            bt.btTransform_setRotation(convexTransform, this._btDefaultQuaternion);\r\n        }\r\n        if (toRotation) {\r\n            bt.btQuaternion_setValue(convexRotTo, toRotation.x, toRotation.y, toRotation.z, toRotation.w);\r\n            bt.btTransform_setRotation(convexTransTo, convexRotTo);\r\n        } else {\r\n            bt.btTransform_setRotation(convexTransTo, this._btDefaultQuaternion);\r\n        }\r\n\r\n        var collisionObjects: number = bt.AllConvexResultCallback_get_m_collisionObjects(convexResultCall);\r\n        var btPoints: number = bt.AllConvexResultCallback_get_m_hitPointWorld(convexResultCall);\r\n        var btNormals: number = bt.AllConvexResultCallback_get_m_hitNormalWorld(convexResultCall);\r\n        var btFractions: number = bt.AllConvexResultCallback_get_m_hitFractions(convexResultCall);\r\n\r\n        bt.tVector3Array_clear(btPoints);\r\n        bt.tVector3Array_clear(btNormals);\r\n        bt.tScalarArray_clear(btFractions);\r\n        bt.tBtCollisionObjectArray_clear(collisionObjects);//清空检测队列\r\n        bt.btCollisionWorld_convexSweepTest(this._btCollisionWorld, sweepShape, convexTransform, convexTransTo, convexResultCall, allowedCcdPenetration);\r\n        var count: number = bt.tBtCollisionObjectArray_size(collisionObjects);\r\n\r\n        if (count > 0) {\r\n            this._collisionsUtils.recoverAllHitResultsPool();\r\n\r\n            for (var i = 0; i < count; i++) {\r\n                var hitResult = this._collisionsUtils.getHitResult();\r\n                out.push(hitResult);\r\n                hitResult.succeeded = true;\r\n                hitResult.collider = PhysicsComponent._physicObjectsMap[bt.btCollisionObject_getUserIndex(bt.tBtCollisionObjectArray_at(collisionObjects, i))];\r\n                hitResult.hitFraction = bt.tScalarArray_at(btFractions, i);\r\n                var btPoint: number = bt.tVector3Array_at(btPoints, i);\r\n                var point = hitResult.point;\r\n                point.x = bt.btVector3_x(btPoint);\r\n                point.y = bt.btVector3_y(btPoint);\r\n                point.z = bt.btVector3_z(btPoint);\r\n                var btNormal: number = bt.tVector3Array_at(btNormals, i);\r\n                var normal = hitResult.normal;\r\n                normal.x = bt.btVector3_x(btNormal);\r\n                normal.y = bt.btVector3_y(btNormal);\r\n                normal.z = bt.btVector3_z(btNormal);\r\n            }\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 添加刚体运动的约束条件。\r\n     * @param constraint 约束。\r\n     * @param disableCollisionsBetweenLinkedBodies 是否禁用\r\n     */\r\n    addConstraint(constraint: ConstraintComponent, disableCollisionsBetweenLinkedBodies: boolean = false): void {\r\n        if (!this._btDiscreteDynamicsWorld)\r\n            throw \"Cannot perform this action when the physics engine is set to CollisionsOnly\";\r\n        // this._nativeDiscreteDynamicsWorld.addConstraint(constraint._nativeConstraint, disableCollisionsBetweenLinkedBodies);\r\n        ILaya3D.Physics3D._bullet.btCollisionWorld_addConstraint(this._btDiscreteDynamicsWorld, constraint._btConstraint, disableCollisionsBetweenLinkedBodies);\r\n        this._currentConstraint[constraint.id] = constraint;\r\n    }\r\n\r\n    /**\r\n     * 移除刚体运动的约束条件。\r\n     */\r\n    removeConstraint(constraint: ConstraintComponent): void {\r\n        if (!this._btDiscreteDynamicsWorld)\r\n            throw \"Cannot perform this action when the physics engine is set to CollisionsOnly\";\r\n        // this._nativeDiscreteDynamicsWorld.removeConstraint(constraint._nativeConstraint);\r\n        ILaya3D.Physics3D._bullet.btCollisionWorld_removeConstraint(this._btDiscreteDynamicsWorld, constraint._btConstraint);\r\n        delete this._currentConstraint[constraint.id];\r\n    }\r\n\r\n    /**\r\n     * 设置射线检测回调\r\n     * @param HITSRAYRESULTCALLBACK_FLAG值\r\n     */\r\n    setHitsRayResultCallbackFlag(flag: number = 1) {\r\n        var bt: any = ILaya3D.Physics3D._bullet;\r\n        bt.RayResultCallback_set_m_flags(this._btAllHitsRayResultCallback, flag);\r\n        bt.RayResultCallback_set_m_flags(this._btClosestRayResultCallback, flag);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n\r\n    _updatePhysicsTransformFromRender(): void {\r\n        var elements: any = this._physicsUpdateList.elements;\r\n        for (var i = 0, n = this._physicsUpdateList.length; i < n; i++) {\r\n            var physicCollider: PhysicsComponent = elements[i];\r\n            physicCollider._derivePhysicsTransformation(false);\r\n            physicCollider._inPhysicUpdateListIndex = -1;//置空索引\r\n        }\r\n        this._physicsUpdateList.length = 0;//清空物理更新队列\r\n    }\r\n\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _updateCharacters(): void {\r\n        let bt = ILaya3D.Physics3D._bullet;\r\n        for (var i = 0, n = this._characters.length; i < n; i++) {\r\n            var character = this._characters[i];\r\n            //TODO 临时加一个0.04，对一个人来说0.04的margin太大了，足以把脚陷入地下，所以先加回来\r\n            character._updateTransformComponent(bt.btCollisionObject_getWorldTransform(character._btColliderObject), false, 0.04);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _updateCollisions(): void {\r\n        this._collisionsUtils.recoverAllContactPointsPool();\r\n        var previous = this._currentFrameCollisions;\r\n        this._currentFrameCollisions = this._previousFrameCollisions;\r\n        this._currentFrameCollisions.length = 0;\r\n        this._previousFrameCollisions = previous;\r\n        var loopCount = this._updateCount;\r\n        var bt: any = ILaya3D.Physics3D._bullet;\r\n        var numManifolds: number = bt.btDispatcher_getNumManifolds(this._btDispatcher);\r\n        for (let i = 0; i < numManifolds; i++) {\r\n            var contactManifold: number = bt.btDispatcher_getManifoldByIndexInternal(this._btDispatcher, i);//1.可能同时返回A和B、B和A 2.可能同时返回A和B多次(可能和CCD有关)\r\n            var componentA: PhysicsTriggerComponent = PhysicsComponent._physicObjectsMap[bt.btCollisionObject_getUserIndex(bt.btPersistentManifold_getBody0(contactManifold))];\r\n            var componentB: PhysicsTriggerComponent = PhysicsComponent._physicObjectsMap[bt.btCollisionObject_getUserIndex(bt.btPersistentManifold_getBody1(contactManifold))];\r\n            if (componentA.id > componentB.id) {\r\n                //交换一下，保证A.id<b.id\r\n                let tt = componentA;\r\n                componentA = componentB;\r\n                componentB = tt;\r\n            }\r\n            var collision: Collision = null;\r\n            var isFirstCollision: boolean;//可能同时返回A和B多次,需要过滤\r\n            var contacts: ContactPoint[] = null;\r\n            var isTrigger = componentA.isTrigger || componentB.isTrigger;\r\n            if (isTrigger) {\r\n                if (componentA.owner._getBit(NodeFlags.PROCESS_TRIGGERS) || componentB.owner._getBit(NodeFlags.PROCESS_TRIGGERS)) {\r\n                    var numContacts: number = bt.btPersistentManifold_getNumContacts(contactManifold);\r\n                    for (let j = 0; j < numContacts; j++) {\r\n                        var pt: number = bt.btPersistentManifold_getContactPoint(contactManifold, j);\r\n                        var distance: number = bt.btManifoldPoint_getDistance(pt);\r\n                        if (distance <= 0) {\r\n                            collision = this._collisionsUtils.getCollision(componentA, componentB);\r\n                            contacts = collision.contacts;\r\n                            isFirstCollision = collision._updateFrame !== loopCount;\r\n                            if (isFirstCollision) {\r\n                                collision._isTrigger = true;\r\n                                contacts.length = 0;\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            } else if (componentA.owner._getBit(NodeFlags.PROCESS_COLLISIONS) || componentB.owner._getBit(NodeFlags.PROCESS_COLLISIONS)) {\r\n                if (componentA._enableProcessCollisions || componentB._enableProcessCollisions) {//例：A和B均为运动刚体或PhysicCollider\r\n                    numContacts = bt.btPersistentManifold_getNumContacts(contactManifold);\r\n                    for (let j = 0; j < numContacts; j++) {\r\n                        pt = bt.btPersistentManifold_getContactPoint(contactManifold, j);\r\n                        distance = bt.btManifoldPoint_getDistance(pt)\r\n                        if (distance <= 0) {\r\n                            var contactPoint = this._collisionsUtils.getContactPoints();\r\n                            contactPoint.colliderA = componentA;\r\n                            contactPoint.colliderB = componentB;\r\n                            contactPoint.distance = distance;\r\n                            var btNormal: number = bt.btManifoldPoint_get_m_normalWorldOnB(pt);\r\n                            var normal = contactPoint.normal;\r\n                            normal.x = bt.btVector3_x(btNormal);\r\n                            normal.y = bt.btVector3_y(btNormal);\r\n                            normal.z = bt.btVector3_z(btNormal);\r\n                            var btPostionA: number = bt.btManifoldPoint_get_m_positionWorldOnA(pt);\r\n                            var positionOnA = contactPoint.positionOnA;\r\n                            positionOnA.x = bt.btVector3_x(btPostionA);\r\n                            positionOnA.y = bt.btVector3_y(btPostionA);\r\n                            positionOnA.z = bt.btVector3_z(btPostionA);\r\n                            var btPostionB: number = bt.btManifoldPoint_get_m_positionWorldOnB(pt);\r\n                            var positionOnB = contactPoint.positionOnB;\r\n                            positionOnB.x = bt.btVector3_x(btPostionB);\r\n                            positionOnB.y = bt.btVector3_y(btPostionB);\r\n                            positionOnB.z = bt.btVector3_z(btPostionB);\r\n\r\n                            if (!collision) {\r\n                                collision = this._collisionsUtils.getCollision(componentA, componentB);\r\n                                contacts = collision.contacts;\r\n                                isFirstCollision = collision._updateFrame !== loopCount;\r\n                                if (isFirstCollision) {\r\n                                    collision._isTrigger = false;\r\n                                    contacts.length = 0;\r\n                                }\r\n                            }\r\n                            contacts.push(contactPoint);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (collision && isFirstCollision) {//isFirstCollision是因为可能有AB,AB,BA\r\n                this._currentFrameCollisions.push(collision);\r\n                collision._setUpdateFrame(loopCount);\r\n            }\r\n        }\r\n\r\n        // 角色的碰撞需要特殊处理一下。由于在角色流程中有可能已经解决了碰撞，导致发现不了碰撞，所以特殊处理\r\n        for (var i = 0, n = this._characters.length; i < n; i++) {\r\n            var character = this._characters[i];\r\n\r\n            //取出所有碰撞对象\r\n            character.getOverlappingObj(body => {\r\n                // 如果body也是角色则忽略，因为每个角色都会遍历到\r\n                if (body instanceof CharacterController) return;\r\n                let compa = character;\r\n                let compb = body;\r\n                if (character.id > body.id) {\r\n                    compa = body as any;\r\n                    compb = character as any;\r\n                }\r\n                let collision = this._collisionsUtils.getCollision(compa, compb);\r\n                // a和b已经有碰撞了，则忽略\r\n                if (collision._updateFrame === loopCount) return;\r\n                let contacts = collision.contacts;\r\n                contacts.length = 1;\t// 反正是假的，只记录一个假的碰撞点\r\n                collision._setUpdateFrame(loopCount);\r\n                // 添加假的碰撞点\r\n                var contactPoint = this._collisionsUtils.getContactPoints();\r\n                contactPoint.colliderA = compa;\r\n                contactPoint.colliderB = compb;\r\n                contactPoint.distance = 0;\r\n                contacts[0] = contactPoint;\r\n                this._currentFrameCollisions.push(collision);\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * 这个只是给对象发送事件，不会挨个组件调用碰撞函数\r\n     * 组件要响应碰撞的话，要通过监听事件\r\n     */\r\n    dispatchCollideEvent(): void {\r\n        let loopCount = this._updateCount;\r\n        for (let i = 0, n = this._currentFrameCollisions.length; i < n; i++) {\r\n            let curFrameCol = this._currentFrameCollisions[i];\r\n            let colliderA = curFrameCol._colliderA;\r\n            let colliderB = curFrameCol._colliderB;\r\n            if (colliderA.destroyed || colliderB.destroyed)//前一个循环可能会销毁后面循环的同一物理组件\r\n                continue;\r\n            // TODO 下面是否正确。现在这个_enableProcessCollisions是kinematic的话，就是false，所以先改成&&\r\n            //if(!colliderA._enableProcessCollisions && colliderB._enableProcessCollisions) return;\t// 这个会导致角色和kinematic地板的碰撞不处理\r\n            let ownerA = colliderA.owner;\r\n            let ownerB = colliderB.owner;\r\n            if (loopCount - curFrameCol._lastUpdateFrame === 1) {// 上一帧有，这一帧还有,则是stay\r\n                if (curFrameCol._isTrigger) {\r\n                    ownerA.event(Event.TRIGGER_STAY, colliderB);\r\n                    ownerB.event(Event.TRIGGER_STAY, colliderA);\r\n                } else {\r\n                    curFrameCol.other = colliderB;\r\n                    ownerA.event(Event.COLLISION_STAY, curFrameCol);\r\n                    curFrameCol.other = colliderA;\r\n                    ownerB.event(Event.COLLISION_STAY, curFrameCol);\r\n                }\r\n            } else {\r\n                if (curFrameCol._isTrigger) {\r\n                    ownerA.event(Event.TRIGGER_ENTER, colliderB);\r\n                    ownerB.event(Event.TRIGGER_ENTER, colliderA);\r\n                } else {\r\n                    curFrameCol.other = colliderB;\r\n                    ownerA.event(Event.COLLISION_ENTER, curFrameCol);\r\n                    curFrameCol.other = colliderA;\r\n                    ownerB.event(Event.COLLISION_ENTER, curFrameCol);\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = 0, n = this._previousFrameCollisions.length; i < n; i++) {\r\n            let preFrameCol = this._previousFrameCollisions[i];\r\n            let preColliderA = preFrameCol._colliderA;\r\n            let preColliderB = preFrameCol._colliderB;\r\n            if (preColliderA.destroyed || preColliderB.destroyed)\r\n                continue;\r\n            let ownerA = preColliderA.owner;\r\n            let ownerB = preColliderB.owner;\r\n\r\n            if (loopCount - preFrameCol._updateFrame === 1) {\r\n                this._collisionsUtils.recoverCollision(preFrameCol);//回收collision对象\r\n                if (preFrameCol._isTrigger) {\r\n                    ownerA.event(Event.TRIGGER_EXIT, preColliderB);\r\n                    ownerB.event(Event.TRIGGER_EXIT, preColliderA);\r\n                } else {\r\n                    preFrameCol.other = preColliderB;\r\n                    ownerA.event(Event.COLLISION_EXIT, preFrameCol);\r\n                    preFrameCol.other = preColliderA;\r\n                    ownerB.event(Event.COLLISION_EXIT, preFrameCol);\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let id in this._currentConstraint) {\r\n            // 检查所有的约束\r\n            let constraintObj = this._currentConstraint[id];\r\n            // TODO 这个只要发一次就行\r\n            if (constraintObj.enabled && constraintObj._isBreakConstrained()) {\r\n                let bodya = constraintObj.ownBody.owner;\r\n                let bodyb = constraintObj.connectedBody.owner;\r\n                bodya.event(Event.JOINT_BREAK);\r\n                bodyb.event(Event.JOINT_BREAK);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 清除力。\r\n     */\r\n    clearForces(): void {\r\n        if (!this._btDiscreteDynamicsWorld)\r\n            throw \"Cannot perform this action when the physics engine is set to CollisionsOnly\";\r\n        ILaya3D.Physics3D._bullet.btDiscreteDynamicsWorld_clearForces(this._btDiscreteDynamicsWorld);\r\n    }\r\n\r\n    createRaycastVehicle(body: Rigidbody3D) {\r\n        let bt: any = ILaya3D.Physics3D._bullet;\r\n        let btVehiclePtr = bt.btRaycastVehicle_create(this._btDiscreteDynamicsWorld, body._btColliderObject);\r\n        bt.btCollisionObject_forceActivationState(body._btColliderObject, PhysicsComponent.ACTIVATIONSTATE_DISABLE_DEACTIVATION);//车辆禁止睡眠\r\n        let ret = new RaycastVehicle(btVehiclePtr);\r\n        return ret;\r\n    }\r\n\r\n    addVehicle(v: RaycastVehicle) {\r\n        let bt: any = ILaya3D.Physics3D._bullet;\r\n        bt.btDynamicsWorld_addAction(this._btDiscreteDynamicsWorld, v.btVehiclePtr);\r\n    }\r\n\r\n    removeVehicle(v: RaycastVehicle) {\r\n        let bt: any = ILaya3D.Physics3D._bullet;\r\n        bt.btDynamicsWorld_removeAction(v.btVehiclePtr);\r\n    }\r\n\r\n    // 给Query用的\r\n    private _btPairCachingGhost: number;\r\n    private _btSphereShape: number;\r\n    private _btTransform: number;\r\n    private _btVec: number;\r\n\r\n    sphereQuery(pos: Vector3, radius: number, result: PhysicsComponent[], collisionmask = Physics3DUtils.COLLISIONFILTERGROUP_ALLFILTER) {\r\n        let bt = ILaya3D.Physics3D._bullet;\r\n        if (!this._btPairCachingGhost) {\r\n            this._btPairCachingGhost = bt.btPairCachingGhostObject_create();\r\n            this._btTransform = bt.btTransform_create();\r\n            this._btVec = bt.btVector3_create(0, 0, 0);\r\n            this._btSphereShape = bt.btSphereShape_create(1);\r\n        }\r\n        result.length = 0;\r\n        let sphere = this._btSphereShape;\r\n        bt.btSphereShpae_setUnscaledRadius(sphere, radius);\r\n        let ghost = this._btPairCachingGhost;\r\n        let xform = this._btTransform;\r\n        let vpos = this._btVec;\r\n        bt.btVector3_setValue(vpos, pos.x, pos.y, pos.z);\r\n        bt.btTransform_setIdentity(xform);\r\n        bt.btTransform_setOrigin(xform, vpos);\r\n        bt.btCollisionObject_setCollisionShape(ghost, sphere);\r\n        bt.btCollisionObject_setWorldTransform(ghost, xform);\r\n        bt.btCollisionWorld_addCollisionObject(this._btDiscreteDynamicsWorld, ghost, -1, -1);\r\n        let num = bt.btCollisionObject_getNumOverlappingObjects(ghost);\r\n        for (let i = 0; i < num; i++) {\r\n            let obj = bt.btCollisionObject_getOverlappingObject(ghost, i);\r\n            let comp = PhysicsComponent._physicObjectsMap[bt.btCollisionObject_getUserIndex(obj)] as Rigidbody3D;\r\n            if (comp.collisionGroup & collisionmask)\r\n                result.push(comp);\r\n            //let motionstate = bt.btRigidBody_getMotionState(obj);\r\n            //let rigidid = bt.layaMotionState_get_rigidBodyID(motionstate)\r\n        }\r\n\r\n        // 必须要删掉，否则会触发碰撞事件\r\n        bt.btCollisionWorld_removeCollisionObject(this._btDiscreteDynamicsWorld, ghost);\r\n    }\r\n}\r\n\r\n\r\n","import { Component } from \"../../components/Component\"\r\nimport { PhysicsComponent } from \"./PhysicsComponent\"\r\nimport { ILaya3D } from \"../../../ILaya3D\";\r\n\r\n/**\r\n * <code>PhysicsTriggerComponent</code> 类用于创建物理触发器组件。\r\n */\r\nexport class PhysicsTriggerComponent extends PhysicsComponent {\r\n    /** @internal */\r\n    private _isTrigger: boolean = false;\r\n\r\n    /**\r\n     * 是否为触发器。\r\n     */\r\n    get isTrigger(): boolean {\r\n        return this._isTrigger;\r\n    }\r\n\r\n    set isTrigger(value: boolean) {\r\n        this._isTrigger = value;\r\n        var bt: any = ILaya3D.Physics3D._bullet;\r\n        if (this._btColliderObject) {\r\n            var flags: number = bt.btCollisionObject_getCollisionFlags(this._btColliderObject);\r\n            if (value) {\r\n                if ((flags & PhysicsComponent.COLLISIONFLAGS_NO_CONTACT_RESPONSE) === 0)\r\n                    bt.btCollisionObject_setCollisionFlags(this._btColliderObject, flags | PhysicsComponent.COLLISIONFLAGS_NO_CONTACT_RESPONSE);\r\n            } else {\r\n                if ((flags & PhysicsComponent.COLLISIONFLAGS_NO_CONTACT_RESPONSE) !== 0)\r\n                    bt.btCollisionObject_setCollisionFlags(this._btColliderObject, flags ^ PhysicsComponent.COLLISIONFLAGS_NO_CONTACT_RESPONSE);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 创建一个 <code>PhysicsTriggerComponent</code> 实例。\r\n     * @param collisionGroup 所属碰撞组。\r\n     * @param canCollideWith 可产生碰撞的碰撞组。\r\n     */\r\n    constructor(collisionGroup: number, canCollideWith: number) {\r\n        super(collisionGroup, canCollideWith);\r\n    }\r\n\r\n    protected _onAdded(): void {\r\n        super._onAdded();\r\n        this.isTrigger = this._isTrigger;\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     * @internal\r\n     */\r\n    _cloneTo(dest: Component): void {\r\n        super._cloneTo(dest);\r\n        (<PhysicsTriggerComponent>dest).isTrigger = this._isTrigger;\r\n    }\r\n}\r\n\r\n","import { Component } from \"../../components/Component\";\r\nimport { Physics3DUtils } from \"../utils/Physics3DUtils\";\r\nimport { Utils3D } from \"../utils/Utils3D\";\r\nimport { PhysicsComponent } from \"./PhysicsComponent\";\r\nimport { PhysicsTriggerComponent } from \"./PhysicsTriggerComponent\";\r\nimport { ColliderShape } from \"./shape/ColliderShape\";\r\nimport { ILaya3D } from \"../../../ILaya3D\";\r\nimport { MeshColliderShape } from \"./shape/MeshColliderShape\";\r\nimport { Quaternion } from \"../../maths/Quaternion\";\r\nimport { Vector3 } from \"../../maths/Vector3\";\r\n\r\n/**\r\n * <code>Rigidbody3D</code> 类用于创建刚体碰撞器。\r\n */\r\nexport class Rigidbody3D extends PhysicsTriggerComponent {\r\n    /*\r\n     * 刚体类型_静态。\r\n     * 设定为永远不会移动刚体,引擎也不会自动更新。\r\n     * 如果你打算移动物理,建议使用TYPE_KINEMATIC。\r\n     */\r\n    static TYPE_STATIC = 0;\r\n    /*\r\n     * 刚体类型_动态。\r\n     * 可以通过forces和impulsesy移动刚体,并且不需要修改移动转换。\r\n     */\r\n    static TYPE_DYNAMIC = 1;\r\n    /*\r\n     * 刚体类型_运动。\r\n     * 可以移动刚体,物理引擎会自动处理动态交互。\r\n     * 注意：和静态或其他类型刚体不会产生动态交互。\r\n     */\r\n    static TYPE_KINEMATIC = 2;\r\n\r\n    /** @internal */\r\n    static _BT_DISABLE_WORLD_GRAVITY = 1;\r\n    /** @internal */\r\n    static _BT_ENABLE_GYROPSCOPIC_FORCE = 2;\r\n\r\n    /** @internal */\r\n    private static _btTempVector30: number;\r\n    /** @internal */\r\n    private static _btTempVector31: number;\r\n    /** @internal */\r\n    private static _btVector3Zero: number;\r\n    /**@internal */\r\n    private static _btTransform0: number;\r\n    /** @internal */\r\n    private static _btInertia: number;\r\n    /** @internal */\r\n    private static _btImpulse: number;\r\n    /** @internal */\r\n    private static _btImpulseOffset: number;\r\n    /** @internal */\r\n    private static _btGravity: number;\r\n\r\n    userData: any;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    static __init__(): void {\r\n        var bt: any = ILaya3D.Physics3D._bullet;\r\n        Rigidbody3D._btTempVector30 = bt.btVector3_create(0, 0, 0);\r\n        Rigidbody3D._btTempVector31 = bt.btVector3_create(0, 0, 0);\r\n        Rigidbody3D._btVector3Zero = bt.btVector3_create(0, 0, 0);\r\n        Rigidbody3D._btInertia = bt.btVector3_create(0, 0, 0);\r\n        Rigidbody3D._btImpulse = bt.btVector3_create(0, 0, 0);\r\n        Rigidbody3D._btImpulseOffset = bt.btVector3_create(0, 0, 0);\r\n        Rigidbody3D._btGravity = bt.btVector3_create(0, 0, 0);\r\n        Rigidbody3D._btTransform0 = bt.btTransform_create();\r\n    }\r\n\r\n    /** @internal */\r\n    private _btLayaMotionState: number;\r\n    /** @internal */\r\n    private _isKinematic = false;\r\n    /** @internal */\r\n    private _mass = 1.0;\r\n    /** @internal */\r\n    private _gravity = new Vector3(0, -10, 0);\r\n    /** @internal */\r\n    private _angularDamping = 0.0;\r\n    /** @internal */\r\n    private _linearDamping = 0.0;\r\n    /** @internal */\r\n    private _overrideGravity = false;\r\n    /** @internal */\r\n    private _totalTorque = new Vector3(0, 0, 0);\r\n    /** @internal */\r\n    private _totalForce = new Vector3(0, 0, 0);\r\n    /** @internal */\r\n    private _linearVelocity = new Vector3();\r\n    /** @internal */\r\n    private _angularVelocity = new Vector3();\r\n    /** @internal */\r\n    private _linearFactor = new Vector3(1, 1, 1);\r\n    /** @internal */\r\n    private _angularFactor = new Vector3(1, 1, 1);\r\n    /** @internal */\r\n    private _detectCollisions = true;\r\n    //private var _linkedConstraints:Array;//TODO:\r\n    /**\r\n     * 质量。\r\n     */\r\n    get mass(): number {\r\n        return this._mass;\r\n    }\r\n\r\n    set mass(value: number) {\r\n        value = Math.max(value, 1e-07);//质量最小为1e-07\r\n        this._mass = value;\r\n        (this._isKinematic) || (this._updateMass(value));\r\n    }\r\n\r\n    // /**\r\n    //  * 设置禁止\r\n    //  */\r\n    // set disableSimulation(b: boolean) {\r\n    //     var bt: any = ILaya3D.Physics3D._bullet;\r\n    //     let curstate = bt.btCollisionObject_getActivationState(this._btColliderObject);\r\n    //     if (b) {\r\n    //         bt.btCollisionObject_forceActivationState(this._btColliderObject, PhysicsComponent.ACTIVATIONSTATE_DISABLE_SIMULATION);\r\n    //     } else {\r\n    //         if (curstate != PhysicsComponent.ACTIVATIONSTATE_DISABLE_SIMULATION) {\r\n    //             // 本身就没有禁止，则不改\r\n    //         } else {\r\n    //             bt.btCollisionObject_forceActivationState(this._btColliderObject, PhysicsComponent.ACTIVATIONSTATE_ACTIVE_TAG);\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    // get disableSimulation(): boolean {\r\n    //     //TODO\r\n    //     return false;\r\n    // }\r\n    /**\r\n    * 获得碰撞标记\r\n    * @returns \r\n    */\r\n    getCollisionFlags() {\r\n        var bt: any = ILaya3D.Physics3D._bullet;\r\n        if (!this._btColliderObject) return 0;\r\n        return bt.btCollisionObject_getCollisionFlags(this._btColliderObject);\r\n    }\r\n\r\n    /**\r\n     * 是否为运动物体，如果为true仅可通过transform属性移动物体,而非其他力相关属性。\r\n     * \r\n     * TODO 这个现在是指static或者kinematic\r\n     */\r\n    get isKinematic(): boolean {\r\n        return this._isKinematic;\r\n    }\r\n\r\n    set isKinematic(value: boolean) {\r\n        this._isKinematic = value;\r\n        this._controlBySimulation = !value;//isKinematic not controll by Simulation\r\n        var bt: any = ILaya3D.Physics3D._bullet;\r\n        var canInSimulation: boolean = !!(this._simulation && this._enabled && this._colliderShape);\r\n        canInSimulation && this._removeFromSimulation();\r\n        var natColObj: any = this._btColliderObject;\r\n        var flags: number = bt.btCollisionObject_getCollisionFlags(natColObj);\r\n        if (value) {\r\n            flags = flags | PhysicsComponent.COLLISIONFLAGS_KINEMATIC_OBJECT;\r\n            bt.btCollisionObject_setCollisionFlags(natColObj, flags);//加入场景前必须配置flag,加入后无效\r\n            // TODO kinematic直接禁止睡眠有问题，例如如果实际不动的话，会导致与他接触的物体都无法进入睡眠状态\r\n            bt.btCollisionObject_forceActivationState(this._btColliderObject, PhysicsComponent.ACTIVATIONSTATE_DISABLE_DEACTIVATION);//触发器开启主动检测,并防止睡眠\r\n            this._enableProcessCollisions = false;\r\n            this._updateMass(0);//必须设置Mass为0来保证InverMass为0\r\n        } else {\r\n            if ((flags & PhysicsComponent.COLLISIONFLAGS_KINEMATIC_OBJECT) > 0)\r\n                flags = flags ^ PhysicsComponent.COLLISIONFLAGS_KINEMATIC_OBJECT;\r\n            bt.btCollisionObject_setCollisionFlags(natColObj, flags);//加入场景前必须配置flag,加入后无效\r\n            bt.btCollisionObject_setActivationState(this._btColliderObject, PhysicsComponent.ACTIVATIONSTATE_ACTIVE_TAG);\r\n            this._enableProcessCollisions = true;\r\n            this._updateMass(this._mass);\r\n        }\r\n\r\n        var btZero: number = Rigidbody3D._btVector3Zero;\r\n        bt.btCollisionObject_setInterpolationLinearVelocity(natColObj, btZero);\r\n        bt.btRigidBody_setLinearVelocity(natColObj, btZero);\r\n        bt.btCollisionObject_setInterpolationAngularVelocity(natColObj, btZero);\r\n        bt.btRigidBody_setAngularVelocity(natColObj, btZero);\r\n\r\n        canInSimulation && this._addToSimulation();\r\n    }\r\n\r\n    /**\r\n     * 刚体的线阻力。\r\n     */\r\n    get linearDamping(): number {\r\n        return this._linearDamping;\r\n    }\r\n\r\n    set linearDamping(value: number) {\r\n        this._linearDamping = value;\r\n        if (this._btColliderObject)\r\n            ILaya3D.Physics3D._bullet.btRigidBody_setDamping(this._btColliderObject, value, this._angularDamping);\r\n    }\r\n\r\n    /**\r\n     * 刚体的角阻力。\r\n     */\r\n    get angularDamping(): number {\r\n        return this._angularDamping;\r\n    }\r\n\r\n    set angularDamping(value: number) {\r\n        this._angularDamping = value;\r\n        if (this._btColliderObject)\r\n            ILaya3D.Physics3D._bullet.btRigidBody_setDamping(this._btColliderObject, this._linearDamping, value);\r\n    }\r\n\r\n    /**\r\n     * 是否重载重力。\r\n     */\r\n    get overrideGravity(): boolean {\r\n        return this._overrideGravity;\r\n    }\r\n\r\n    set overrideGravity(value: boolean) {\r\n        this._overrideGravity = value;\r\n        var bt: any = ILaya3D.Physics3D._bullet;\r\n        if (this._btColliderObject) {\r\n            var flag: number = bt.btRigidBody_getFlags(this._btColliderObject);\r\n            if (value) {\r\n                if ((flag & Rigidbody3D._BT_DISABLE_WORLD_GRAVITY) === 0)\r\n                    bt.btRigidBody_setFlags(this._btColliderObject, flag | Rigidbody3D._BT_DISABLE_WORLD_GRAVITY);\r\n            } else {\r\n                if ((flag & Rigidbody3D._BT_DISABLE_WORLD_GRAVITY) > 0)\r\n                    bt.btRigidBody_setFlags(this._btColliderObject, flag ^ Rigidbody3D._BT_DISABLE_WORLD_GRAVITY);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 重力。\r\n     */\r\n    get gravity(): Vector3 {\r\n        var bt: any = ILaya3D.Physics3D._bullet;\r\n        Rigidbody3D._btGravity = bt.btRigidBody_getGravity(this._btColliderObject);\r\n        Utils3D._convertToLayaVec3(Rigidbody3D._btGravity, this._gravity);\r\n        return this._gravity;\r\n    }\r\n\r\n    set gravity(value: Vector3) {\r\n        this._gravity = value;\r\n        var bt: any = ILaya3D.Physics3D._bullet;\r\n        bt.btVector3_setValue(Rigidbody3D._btGravity, value.x, value.y, value.z);\r\n        bt.btRigidBody_setGravity(this._btColliderObject, Rigidbody3D._btGravity);\r\n    }\r\n\r\n    /**\r\n     * 总力。\r\n     */\r\n    get totalForce(): Vector3 {\r\n        if (this._btColliderObject) {\r\n            var btTotalForce: number = ILaya3D.Physics3D._bullet.btRigidBody_getTotalForce(this._btColliderObject);\r\n            Utils3D._convertToLayaVec3(btTotalForce, this._totalForce);\r\n            return this._totalForce;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * 每个轴的线性运动缩放因子,如果某一轴的值为0表示冻结在该轴的线性运动。\r\n     */\r\n    get linearFactor(): Vector3 {\r\n        return this._linearFactor;\r\n    }\r\n\r\n    set linearFactor(value: Vector3) {\r\n        this._linearFactor = value;\r\n        var btValue: number = Rigidbody3D._btTempVector30;\r\n        Utils3D._convertToBulletVec3(value, btValue);\r\n        ILaya3D.Physics3D._bullet.btRigidBody_setLinearFactor(this._btColliderObject, btValue);\r\n    }\r\n\r\n    /**\r\n     * 线速度\r\n     */\r\n    get linearVelocity(): Vector3 {\r\n        if (this._btColliderObject)\r\n            Utils3D._convertToLayaVec3(ILaya3D.Physics3D._bullet.btRigidBody_getLinearVelocity(this._btColliderObject), this._linearVelocity);\r\n        return this._linearVelocity;\r\n    }\r\n\r\n    set linearVelocity(value: Vector3) {\r\n        this._linearVelocity = value;\r\n        if (this._btColliderObject) {\r\n            var btValue = Rigidbody3D._btTempVector30;\r\n            Utils3D._convertToBulletVec3(value, btValue);\r\n            (this.isSleeping) && (this.wakeUp());//可能会因睡眠导致设置线速度无效\r\n            ILaya3D.Physics3D._bullet.btRigidBody_setLinearVelocity(this._btColliderObject, btValue);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 每个轴的角度运动缩放因子,如果某一轴的值为0表示冻结在该轴的角度运动。\r\n     */\r\n    get angularFactor(): Vector3 {\r\n        return this._angularFactor;\r\n    }\r\n\r\n    set angularFactor(value: Vector3) {\r\n        this._angularFactor = value;\r\n        var btValue: number = Rigidbody3D._btTempVector30;\r\n        Utils3D._convertToBulletVec3(value, btValue);\r\n        ILaya3D.Physics3D._bullet.btRigidBody_setAngularFactor(this._btColliderObject, btValue);\r\n\r\n    }\r\n\r\n    /**\r\n     * 角速度。\r\n     */\r\n    get angularVelocity(): Vector3 {\r\n        if (this._btColliderObject)\r\n            Utils3D._convertToLayaVec3(ILaya3D.Physics3D._bullet.btRigidBody_getAngularVelocity(this._btColliderObject), this._angularVelocity);\r\n        return this._angularVelocity;\r\n    }\r\n\r\n    set angularVelocity(value: Vector3) {\r\n        this._angularVelocity = value;\r\n        if (this._btColliderObject) {\r\n            var btValue: number = Rigidbody3D._btTempVector30;\r\n            Utils3D._convertToBulletVec3(value, btValue);\r\n            (this.isSleeping) && (this.wakeUp());//可能会因睡眠导致设置角速度无效\r\n            ILaya3D.Physics3D._bullet.btRigidBody_setAngularVelocity(this._btColliderObject, btValue);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 刚体所有扭力。\r\n     */\r\n    get totalTorque(): Vector3 {\r\n        if (this._btColliderObject) {\r\n            var btTotalTorque: number = ILaya3D.Physics3D._bullet.btRigidBody_getTotalTorque(this._btColliderObject);\r\n            Utils3D._convertToLayaVec3(btTotalTorque, this._totalTorque);\r\n            return this._totalTorque;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * 是否进行碰撞检测。\r\n     */\r\n    get detectCollisions(): boolean {\r\n        return this._detectCollisions;\r\n    }\r\n\r\n    set detectCollisions(value: boolean) {\r\n        if (this._detectCollisions !== value) {\r\n            this._detectCollisions = value;\r\n\r\n            if (this._colliderShape && this._enabled && this._simulation) {\r\n                this._simulation._removeRigidBody(this);\r\n                this._simulation._addRigidBody(this, this._collisionGroup, value ? this._canCollideWith : 0);\r\n                //_nativeColliderObject.getBroadphaseHandle().set_m_collisionFilterMask(value ? _canCollideWith : 0);//有延迟问题\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 是否处于睡眠状态。\r\n     */\r\n    get isSleeping(): boolean {\r\n        if (this._btColliderObject)\r\n            return ILaya3D.Physics3D._bullet.btCollisionObject_getActivationState(this._btColliderObject) === PhysicsComponent.ACTIVATIONSTATE_ISLAND_SLEEPING;\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * 刚体睡眠的线速度阈值。\r\n     */\r\n    get sleepLinearVelocity(): number {\r\n        return ILaya3D.Physics3D._bullet.btRigidBody_getLinearSleepingThreshold(this._btColliderObject);\r\n    }\r\n\r\n    set sleepLinearVelocity(value: number) {\r\n        var bt: any = ILaya3D.Physics3D._bullet;\r\n        bt.btRigidBody_setSleepingThresholds(this._btColliderObject, value, bt.btRigidBody_getAngularSleepingThreshold(this._btColliderObject));\r\n    }\r\n\r\n    /**\r\n     * 刚体睡眠的角速度阈值。\r\n     */\r\n    get sleepAngularVelocity(): number {\r\n        return ILaya3D.Physics3D._bullet.btRigidBody_getAngularSleepingThreshold(this._btColliderObject);\r\n    }\r\n\r\n    set sleepAngularVelocity(value: number) {\r\n        var bt: any = ILaya3D.Physics3D._bullet;\r\n        bt.btRigidBody_setSleepingThresholds(this._btColliderObject, bt.btRigidBody_getLinearSleepingThreshold(this._btColliderObject), value);\r\n    }\r\n\r\n    get btColliderObject(): number {\r\n        return this._btColliderObject;\r\n    }\r\n\r\n    /**\r\n     * 直接设置物理位置\r\n     */\r\n    set position(pos: Vector3) {\r\n        var bt = ILaya3D.Physics3D._bullet;\r\n        var btColliderObject = this._btColliderObject;\r\n        bt.btRigidBody_setCenterOfMassPos(btColliderObject, pos.x, pos.y, pos.z);\r\n    }\r\n\r\n    get position() {\r\n        return this.getPhysicsPosition();\r\n    }\r\n\r\n    /**\r\n     * 设置物理旋转\r\n     */\r\n    set orientation(q: Quaternion) {\r\n        var bt = ILaya3D.Physics3D._bullet;\r\n        var btColliderObject = this._btColliderObject;\r\n        bt.btRigidBody_setCenterOfMassOrientation(btColliderObject, q.x, q.y, q.z, q.w);\r\n    }\r\n\r\n    get orientation() {\r\n        return this.getPhysicsOrientation();\r\n    }\r\n\r\n    /**\r\n     * 创建一个 <code>RigidBody3D</code> 实例。\r\n     * @param collisionGroup 所属碰撞组。\r\n     * @param canCollideWith 可产生碰撞的碰撞组。\r\n     */\r\n    constructor(collisionGroup: number = Physics3DUtils.COLLISIONFILTERGROUP_DEFAULTFILTER, canCollideWith: number = Physics3DUtils.COLLISIONFILTERGROUP_ALLFILTER) {\r\n        //LinkedConstraints = new List<Constraint>();\r\n        super(collisionGroup, canCollideWith);\r\n        this._controlBySimulation = true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _updateMass(mass: number): void {\r\n        if (this._btColliderObject && this._colliderShape && this._colliderShape._btShape) {\r\n            var bt: any = ILaya3D.Physics3D._bullet;\r\n            bt.btCollisionShape_calculateLocalInertia(this._colliderShape._btShape, mass, Rigidbody3D._btInertia);\r\n            bt.btRigidBody_setMassProps(this._btColliderObject, mass, Rigidbody3D._btInertia);\r\n            bt.btRigidBody_updateInertiaTensor(this._btColliderObject); //this was the major headache when I had to debug Slider and Hinge constraint\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     * @internal\r\n     */\r\n    protected _onScaleChange(scale: Vector3): void {\r\n        super._onScaleChange(scale);\r\n        this._updateMass(this._isKinematic ? 0 : this._mass);//修改缩放需要更新惯性\r\n    }\r\n\r\n    /**\r\n     * \t@internal\r\n     */\r\n    _derivePhysicsTransformation(force: boolean): void {\r\n        var bt = ILaya3D.Physics3D._bullet;\r\n        var btColliderObject = this._btColliderObject;\r\n        //btColliderObject 当前的trasform\r\n        var oriTransform: number = bt.btCollisionObject_getWorldTransform(btColliderObject);\r\n\r\n        // 临时transform\r\n        var transform = Rigidbody3D._btTransform0;//must use another transform\r\n\r\n        // transform = origTransform。 由于transform是公用的，下面的设置可能只是设置一部分，所以先完整拷贝一下当前的物理位置\r\n        bt.btTransform_equal(transform, oriTransform);\r\n        this._innerDerivePhysicsTransformation(transform, force);\r\n        bt.btRigidBody_setCenterOfMassTransform(btColliderObject, transform);//RigidBody use 'setCenterOfMassTransform' instead(influence interpolationWorldTransform and so on) ,or stepSimulation may return old transform because interpolation.\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @param motionid 设置的物理ID\r\n     */\r\n    _initRigidbody(motionid: number,) {\r\n        var bt: any = ILaya3D.Physics3D._bullet;\r\n        var motionState: number = bt.layaMotionState_create();\r\n        bt.layaMotionState_set_rigidBodyID(motionState, motionid);\r\n        this._btLayaMotionState = motionState;\r\n        var constructInfo: number = bt.btRigidBodyConstructionInfo_create(0.0, motionState, null, Rigidbody3D._btVector3Zero);\r\n        var btRigid: number = bt.btRigidBody_create(constructInfo);\r\n        bt.btCollisionObject_setUserIndex(btRigid, this.id);\r\n        this._btColliderObject = btRigid;\r\n        bt.btRigidBodyConstructionInfo_destroy(constructInfo);\r\n    }\r\n\r\n    protected _onAdded(): void {\r\n        this._initRigidbody(this.id);\r\n        super._onAdded();\r\n        this.mass = this._mass;\r\n        this.linearFactor = this._linearFactor;\r\n        this.angularFactor = this._angularFactor;\r\n        this.linearDamping = this._linearDamping;\r\n        this.angularDamping = this._angularDamping;\r\n        this.overrideGravity = this._overrideGravity;\r\n        this.gravity = this._gravity;\r\n        this.isKinematic = this._isKinematic;\r\n    }\r\n\r\n    protected _onDestroy() {\r\n        ILaya3D.Physics3D._bullet.btMotionState_destroy(this._btLayaMotionState);\r\n\r\n        ////Remove constraints safely\r\n        //var toremove = new FastList<Constraint>();\r\n        //foreach (var c in LinkedConstraints)\r\n        //{\r\n        //toremove.Add(c);\r\n        //}\r\n\r\n        //foreach (var disposable in toremove)\r\n        //{\r\n        //disposable.Dispose();\r\n        //}\r\n\r\n        //LinkedConstraints.Clear();\r\n        ////~Remove constraints\r\n\r\n        super._onDestroy();\r\n        this._btLayaMotionState = null;\r\n        this._gravity = null;\r\n        this._totalTorque = null;\r\n        this._linearVelocity = null;\r\n        this._angularVelocity = null;\r\n        this._linearFactor = null;\r\n        this._angularFactor = null;\r\n    }\r\n\r\n    set colliderShape(value: ColliderShape) {\r\n        if (value instanceof MeshColliderShape) {\r\n            value = null;\r\n            console.error(\"RigidBody3D is not support MeshColliderShape\");\r\n        }\r\n        super.colliderShape = value;\r\n    }\r\n\r\n    /**\r\n    * 碰撞形状。\r\n    */\r\n    get colliderShape(): ColliderShape {\r\n        return this._colliderShape;\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     * @internal\r\n     */\r\n    _onShapeChange(colShape: ColliderShape): void {\r\n        super._onShapeChange(colShape);\r\n        //TODO:此时已经加入场景,只影响mass为0,函数内部设置的flas是否为static无效\t\t\t\r\n        if (this.mass <= 0) return;\r\n        if (this._isKinematic) {\r\n            this._updateMass(0);\r\n        } else {\r\n            var bt: any = ILaya3D.Physics3D._bullet;\r\n            bt.btRigidBody_setCenterOfMassTransform(this._btColliderObject, bt.btCollisionObject_getWorldTransform(this._btColliderObject));//修改Shape会影响坐标,需要更新插值坐标,否则物理引擎motionState.setWorldTrans数据为旧数据\r\n            this._updateMass(this._mass);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     * @internal\r\n     */\r\n    _parse(data: any): void {\r\n        (data.friction != null) && (this.friction = data.friction);\r\n        (data.rollingFriction != null) && (this.rollingFriction = data.rollingFriction);\r\n        (data.restitution != null) && (this.restitution = data.restitution);\r\n        (data.isTrigger != null) && (this.isTrigger = data.isTrigger);\r\n        (data.mass != null) && (this.mass = data.mass);\r\n        (data.linearDamping != null) && (this.linearDamping = data.linearDamping);\r\n        (data.angularDamping != null) && (this.angularDamping = data.angularDamping);\r\n        (data.overrideGravity != null) && (this.overrideGravity = data.overrideGravity);\r\n\r\n        if (data.linearFactor != null) {\r\n            var linFac = this.linearFactor;\r\n            linFac.fromArray(data.linearFactor);\r\n            this.linearFactor = linFac;\r\n        }\r\n        if (data.angularFactor != null) {\r\n            var angFac = this.angularFactor;\r\n            angFac.fromArray(data.angularFactor);\r\n            this.angularFactor = angFac;\r\n        }\r\n\r\n        if (data.gravity) {\r\n            this.gravity.fromArray(data.gravity);\r\n            this.gravity = this.gravity;\r\n        }\r\n        super._parse(data);\r\n        this._parseShape(data.shapes);\r\n        (data.isKinematic != null) && (this.isKinematic = data.isKinematic);\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     * @internal\r\n     */\r\n    _addToSimulation(): void {\r\n        this._simulation._addRigidBody(this, this._collisionGroup, this._detectCollisions ? this._canCollideWith : 0);\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     * @internal\r\n     */\r\n    _removeFromSimulation(): void {\r\n        this._simulation._removeRigidBody(this);\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     * @internal\r\n     */\r\n    _cloneTo(dest: Component): void {\r\n        super._cloneTo(dest);\r\n        var destRigidbody3D: Rigidbody3D = (<Rigidbody3D>dest);\r\n        destRigidbody3D.isKinematic = this._isKinematic;\r\n        destRigidbody3D.mass = this._mass;\r\n        destRigidbody3D.gravity = this._gravity;\r\n        destRigidbody3D.angularDamping = this._angularDamping;\r\n        destRigidbody3D.linearDamping = this._linearDamping;\r\n        destRigidbody3D.overrideGravity = this._overrideGravity;\r\n        //destRigidbody3D.totalTorque = _totalTorque;\r\n        destRigidbody3D.linearVelocity = this._linearVelocity;\r\n        destRigidbody3D.angularVelocity = this._angularVelocity;\r\n        destRigidbody3D.linearFactor = this._linearFactor;\r\n        destRigidbody3D.angularFactor = this._angularFactor;\r\n        destRigidbody3D.detectCollisions = this._detectCollisions;\r\n    }\r\n\r\n    /**\r\n     * 应用作用力。\r\n     * @param\tforce 作用力。\r\n     * @param\tlocalOffset 偏移,如果为null则为中心点\r\n     */\r\n    applyForce(force: Vector3, localOffset: Vector3 = null): void {\r\n        this.applyForceXYZ(force.x, force.y, force.z, localOffset);\r\n    }\r\n\r\n    /**\r\n     * 应用作用力\r\n     * @param fx \r\n     * @param fy \r\n     * @param fz \r\n     * @param localOffset \r\n     */\r\n    applyForceXYZ(fx: number, fy: number, fz: number, localOffset: Vector3 = null): void {\r\n        if (this._btColliderObject == null)\r\n            throw \"Attempted to call a Physics function that is avaliable only when the Entity has been already added to the Scene.\";\r\n        var bt: any = ILaya3D.Physics3D._bullet;\r\n        var btForce = Rigidbody3D._btTempVector30;\r\n        bt.btVector3_setValue(btForce, fx, fy, fz);\r\n        this.wakeUp();\r\n        if (localOffset) {\r\n            var btOffset: number = Rigidbody3D._btTempVector31;\r\n            bt.btVector3_setValue(btOffset, localOffset.x, localOffset.y, localOffset.z);\r\n            bt.btRigidBody_applyForce(this._btColliderObject, btForce, btOffset);\r\n        } else {\r\n            bt.btRigidBody_applyCentralForce(this._btColliderObject, btForce);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 设置物理标签\r\n     * @param flags \r\n     */\r\n    setCollisionFlags(flags: number) {\r\n        var bt: any = ILaya3D.Physics3D._bullet;\r\n        var canInSimulation = !!(this._simulation && this._enabled);\r\n        //如果动态改变只能重新添加。否则world不能正确记录动态物体\r\n        canInSimulation && this._removeFromSimulation();\r\n        if (flags & 3) {\r\n            this._isKinematic = true;\r\n            this._simulation && this._updateMass(0)\r\n        } else {\r\n            this._simulation && this._updateMass(this._mass);\r\n        }\r\n        bt.btCollisionObject_setCollisionFlags(this._btColliderObject, flags);\r\n        canInSimulation && this._addToSimulation();\r\n    }\r\n\r\n\r\n    /**\r\n     * 应用扭转力。\r\n     * @param\ttorque 扭转力。\r\n     */\r\n    applyTorque(torque: Vector3): void {\r\n        if (this._btColliderObject == null)\r\n            throw \"Attempted to call a Physics function that is avaliable only when the Entity has been already added to the Scene.\";\r\n        var bullet: any = ILaya3D.Physics3D._bullet;\r\n        var btTorque: number = Rigidbody3D._btTempVector30;\r\n        this.wakeUp();\r\n        bullet.btVector3_setValue(btTorque, torque.x, torque.y, torque.z);\r\n        bullet.btRigidBody_applyTorque(this._btColliderObject, btTorque);\r\n    }\r\n\r\n    /**\r\n     * 应用冲量。\r\n     * @param\timpulse 冲量。\r\n     * @param   localOffset 偏移,如果为null则为中心点。\r\n     */\r\n    applyImpulse(impulse: Vector3, localOffset: Vector3 = null): void {\r\n        if (this._btColliderObject == null)\r\n            throw \"Attempted to call a Physics function that is avaliable only when the Entity has been already added to the Scene.\";\r\n        var bt: any = ILaya3D.Physics3D._bullet;\r\n        bt.btVector3_setValue(Rigidbody3D._btImpulse, impulse.x, impulse.y, impulse.z);\r\n        this.wakeUp();\r\n        if (localOffset) {\r\n            bt.btVector3_setValue(Rigidbody3D._btImpulseOffset, localOffset.x, localOffset.y, localOffset.z);\r\n            bt.btRigidBody_applyImpulse(this._btColliderObject, Rigidbody3D._btImpulse, Rigidbody3D._btImpulseOffset);\r\n        } else {\r\n            bt.btRigidBody_applyCentralImpulse(this._btColliderObject, Rigidbody3D._btImpulse);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 应用扭转冲量。\r\n     * @param\ttorqueImpulse\r\n     */\r\n    applyTorqueImpulse(torqueImpulse: Vector3): void {\r\n        if (this._btColliderObject == null)\r\n            throw \"Attempted to call a Physics function that is avaliable only when the Entity has been already added to the Scene.\";\r\n        var bt: any = ILaya3D.Physics3D._bullet;\r\n        var btTorqueImpulse: number = Rigidbody3D._btTempVector30;\r\n        this.wakeUp();\r\n        bt.btVector3_setValue(btTorqueImpulse, torqueImpulse.x, torqueImpulse.y, torqueImpulse.z);\r\n        bt.btRigidBody_applyTorqueImpulse(this._btColliderObject, btTorqueImpulse);\r\n    }\r\n\r\n    /**\r\n     * 唤醒刚体。\r\n     */\r\n    wakeUp(): void {\r\n        this._btColliderObject && (ILaya3D.Physics3D._bullet.btCollisionObject_activate(this._btColliderObject, false));\r\n    }\r\n\r\n    /**\r\n     *清除应用到刚体上的所有力。\r\n     */\r\n    clearForces(): void {\r\n        var rigidBody: number = this._btColliderObject;\r\n        if (rigidBody == null)\r\n            throw \"Attempted to call a Physics function that is avaliable only when the Entity has been already added to the Scene.\";\r\n\r\n        var bt: any = ILaya3D.Physics3D._bullet;\r\n        bt.btRigidBody_clearForces(rigidBody);\r\n        var btZero: number = Rigidbody3D._btVector3Zero;\r\n        bt.btCollisionObject_setInterpolationLinearVelocity(rigidBody, btZero);\r\n        bt.btRigidBody_setLinearVelocity(rigidBody, btZero);\r\n        bt.btCollisionObject_setInterpolationAngularVelocity(rigidBody, btZero);\r\n        bt.btRigidBody_setAngularVelocity(rigidBody, btZero);\r\n    }\r\n\r\n}\r\n\r\n\r\n","import { ColliderShape } from \"./ColliderShape\";\r\nimport { ILaya3D } from \"../../../../ILaya3D\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\n\r\n/**\r\n * <code>StaticPlaneColliderShape</code> 类用于创建静态平面碰撞器。\r\n */\r\nexport class StaticPlaneColliderShape extends ColliderShape {\r\n\t/** @internal */\r\n\tprivate static _btNormal: number;\r\n\r\n\t/**@internal */\r\n\t_offset: number;\r\n\t/**@internal */\r\n\t_normal: Vector3;\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic __init__(): void {\r\n\t\tStaticPlaneColliderShape._btNormal = ILaya3D.Physics3D._bullet.btVector3_create(0, 0, 0);\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个新的 <code>StaticPlaneColliderShape</code> 实例。\r\n\t */\r\n\tconstructor(normal: Vector3, offset: number) {\r\n\t\tsuper();\r\n\t\tthis._normal = normal;\r\n\t\tthis._offset = offset;\r\n\t\tthis._type = ColliderShape.SHAPETYPES_STATICPLANE;\r\n\r\n\t\tvar bt: any = ILaya3D.Physics3D._bullet;\r\n\t\tbt.btVector3_setValue(StaticPlaneColliderShape._btNormal, -normal.x, normal.y, normal.z);\r\n\t\tthis._btShape = bt.btStaticPlaneShape_create(StaticPlaneColliderShape._btNormal, offset);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tclone(): any {\r\n\t\tvar dest: StaticPlaneColliderShape = new StaticPlaneColliderShape(this._normal, this._offset);\r\n\t\tthis.cloneTo(dest);\r\n\t\treturn dest;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { CharacterController } from \"./physics/CharacterController\";\r\nimport { PhysicsComponent } from \"./physics/PhysicsComponent\";\r\nimport { PhysicsSimulation } from \"./physics/PhysicsSimulation\";\r\nimport { Rigidbody3D } from \"./physics/Rigidbody3D\";\r\nimport { BoxColliderShape } from \"./physics/shape/BoxColliderShape\";\r\nimport { ColliderShape } from \"./physics/shape/ColliderShape\";\r\nimport { CompoundColliderShape } from \"./physics/shape/CompoundColliderShape\";\r\nimport { CylinderColliderShape } from \"./physics/shape/CylinderColliderShape\";\r\nimport { StaticPlaneColliderShape } from \"./physics/shape/StaticPlaneColliderShape\";\r\n\r\n\r\n/**\r\n * Laya物理类\r\n * internal\r\n */\r\nexport class Physics3D {\r\n    /**@internal */\r\n    static _bullet: any = null;\r\n    /**@internal */\r\n    static _cannon:any = null;\r\n    /**@internal */\r\n    static _enablePhysics: Boolean = false;\r\n\r\n    /**@internal */\r\n    static __bulletinit__(){\r\n        this._bullet = (window as any).Physics3D;\r\n        if(this._bullet){\r\n            StaticPlaneColliderShape.__init__();\r\n            ColliderShape.__init__();\r\n            CompoundColliderShape.__init__();\r\n            PhysicsComponent.__init__();\r\n            PhysicsSimulation.__init__();\r\n            BoxColliderShape.__init__();\r\n            CylinderColliderShape.__init__();\r\n            CharacterController.__init__();\r\n            Rigidbody3D.__init__();\r\n        }   \r\n    }\r\n}","import { KeyFrameValueType } from \"../component/Animator/KeyframeNodeOwner\";\r\nimport { Keyframe } from \"../core/Keyframe\"\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class KeyframeNode {\r\n\tprivate _ownerPath: string[] = [];\r\n\tprivate _propertys: string[] = [];\r\n\r\n\t/**@internal */\r\n\t_keyFrames: Keyframe[] = [];\r\n\t/**@internal */\r\n\t_indexInList: number;\r\n\r\n\t/**@internal */\r\n\ttype: KeyFrameValueType;\r\n\t/**@internal */\r\n\tfullPath: string;\r\n\t/**@internal */\r\n\tnodePath: string;\r\n\t/**@internal */\r\n\tpropertyOwner: string;\r\n\t/**@internal call bake fun*/\r\n\tcallbackFunData: string;\r\n\t/**@internal apply params*/\r\n\tcallParams: any[];\r\n\t/**\r\n\t * @internal\r\n\t * ide\r\n\t */\r\n\tpropertyChangePath: string;\r\n\r\n\t/**\r\n\t * 精灵路径个数。\r\n\t */\r\n\tget ownerPathCount(): number {\r\n\t\treturn this._ownerPath.length;\r\n\t}\r\n\r\n\t/**\r\n\t * 属性路径个数。\r\n\t */\r\n\tget propertyCount(): number {\r\n\t\treturn this._propertys.length;\r\n\t}\r\n\r\n\t/**\r\n\t * 帧个数。\r\n\t */\r\n\tget keyFramesCount(): number {\r\n\t\treturn this._keyFrames.length;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_setOwnerPathCount(value: number): void {\r\n\t\tthis._ownerPath.length = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_setOwnerPathByIndex(index: number, value: string): void {\r\n\t\tthis._ownerPath[index] = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_joinOwnerPath(sep: string): string {\r\n\t\treturn this._ownerPath.join(sep);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_setPropertyCount(value: number): void {\r\n\t\tthis._propertys.length = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_setPropertyByIndex(index: number, value: string): void {\r\n\t\tthis._propertys[index] = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_joinProperty(sep: string): string {\r\n\t\treturn this._propertys.join(sep);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_setKeyframeCount(value: number): void {\r\n\t\tthis._keyFrames.length = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_setKeyframeByIndex(index: number, value: Keyframe): void {\r\n\t\tthis._keyFrames[index] = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 通过索引获取精灵路径。\r\n\t * @param index 索引。\r\n\t */\r\n\tgetOwnerPathByIndex(index: number): string {\r\n\t\treturn this._ownerPath[index];\r\n\t}\r\n\r\n\t/**\r\n\t * 通过索引获取属性路径。\r\n\t * @param index 索引。\r\n\t */\r\n\tgetPropertyByIndex(index: number): string {\r\n\t\treturn this._propertys[index];\r\n\t}\r\n\r\n\t/**\r\n\t * 通过索引获取帧。\r\n\t * @param index 索引。\r\n\t */\r\n\tgetKeyframeByIndex(index: number): Keyframe {\r\n\t\treturn this._keyFrames[index];\r\n\t}\r\n}","/**\r\n * <code>AnimationEvent</code> 类用于实现动画事件。\r\n */\r\nexport class AnimationEvent {\r\n\t/** 事件触发时间。*/\r\n\ttime: number;\r\n\t/** 事件触发名称。*/\r\n\teventName: string;\r\n\t/** 事件触发参数。*/\r\n\tparams: any[];\r\n\r\n\t/**\r\n\t * 创建一个 <code>AnimationEvent</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { IClone } from \"../../utils/IClone\";\r\n/**\r\n * 动画权重模式\r\n */\r\n export enum WeightedMode {\r\n\t\r\n\t\r\n\tNone = 0,\r\n\tIn = 1,\r\n\tOut = 2,\r\n\tBoth = 3,\r\n}\r\n/**\r\n * <code>KeyFrame</code> 类用于创建关键帧实例。\r\n */\r\nexport class Keyframe implements IClone {\r\n\tstatic defaultWeight:number = 0.33333;\r\n\t/**时间。*/\r\n\ttime: number;\r\n\r\n\t/**\r\n\t * 创建一个 <code>KeyFrame</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @param\tdestObject 克隆源。\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tvar destKeyFrame: Keyframe = (<Keyframe>destObject);\r\n\t\tdestKeyFrame.time = this.time;\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @return\t 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar dest: Keyframe = new Keyframe();\r\n\t\t\r\n\t\tthis.cloneTo(dest);\r\n\t\treturn dest;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { Quaternion } from \"../../../maths/Quaternion\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\n\r\nexport enum KeyFrameValueType {\r\n\tNone = -1,\r\n\tFloat = 0,\r\n\tPosition = 1,\r\n\tRotation = 2,\r\n\tScale = 3,\r\n\tRotationEuler = 4,\r\n\tVector2 = 5,\r\n\tVector3 = 6,\r\n\tVector4 = 7,\r\n\tColor = 8\r\n}\r\n/**\r\n * @internal\r\n * <code>KeyframeNodeOwner</code> 类用于保存帧节点的拥有者信息。\r\n */\r\nexport class KeyframeNodeOwner {\r\n\t/**@internal */\r\n\tindexInList: number = -1;\r\n\t/**@internal */\r\n\treferenceCount: number = 0;\r\n\t/**@internal */\r\n\tupdateMark: number = -1;\r\n\r\n\t/**@internal 0 float,1 position,2 rotation,3 Scale,4 rotationEuler*/\r\n\ttype: KeyFrameValueType = -1;\r\n\t/**@internal */\r\n\tfullPath: string | null = null;\r\n\tnodePath: string | null = null;\r\n\t/**@internal */\r\n\tpropertyOwner: any = null;\r\n\t/**@internal */\r\n\tproperty: string[] | null = null;\r\n\t/**@internal */\r\n\tdefaultValue: any = null;\r\n\t/**@internal */\r\n\tvalue: any = null;\r\n\t/**@internal */\r\n\tcrossFixedValue: any = null;\r\n\t/**@internal */\r\n\tisMaterial: boolean = false;\r\n\t\r\n\t/**@internal 回调路径*/\r\n\tcallbackFunData:string;\r\n\t/**@internal 回调归属*/\r\n\tcallBackOwner:any;\r\n\t/**@internal */\r\n\tcallbackFun:string;\r\n\t/**@internal */\r\n\tcallParams:any[];\r\n\r\n\t/**\r\n\t * 创建一个 <code>KeyframeNodeOwner</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tsaveCrossFixedValue(): void {\r\n\t\tvar pro: any = this.propertyOwner;\r\n\t\tif (pro) {\r\n\t\t\tswitch (this.type) {\r\n\t\t\t\tcase 0:\r\n\t\t\t\t\tthis.crossFixedValue = this.value;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 1:\r\n\t\t\t\tcase 3:\r\n\t\t\t\tcase 4:\r\n\t\t\t\t\t(<Vector3>this.value).cloneTo(this.crossFixedValue);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\t(<Quaternion>this.value).cloneTo(this.crossFixedValue);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow \"Animator:unknown type.\";\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tanimatorDataSetCallBack(){\r\n\t\tlet fn:Function = this.callBackOwner[this.callbackFun];\r\n\t\tfn.apply(this.callBackOwner,this.callParams);\r\n\t}\r\n\t\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tgetCallbackNode(){\r\n\t\tif(this.propertyOwner&&this.callbackFunData){\r\n\t\t\tlet funPropertys = this.callbackFunData.split(\".\");\r\n\t\t\tthis.callBackOwner = this.propertyOwner;\r\n\t\t\tfor(let i = 0,n = funPropertys.length-1;i<n;i++){\r\n\t\t\t\tthis.callBackOwner = this.callBackOwner[funPropertys[i]];\r\n\t\t\t}\r\n\t\t\tthis.callbackFun = funPropertys[funPropertys.length-1];\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\n","import { Node } from \"../../display/Node\";\r\nimport { Handler } from \"../../utils/Handler\";\r\nimport { Transform3D } from \"./Transform3D\";\r\nimport { Shader3D } from \"../../RenderEngine/RenderShader/Shader3D\";\r\nimport { LayaGL } from \"../../layagl/LayaGL\";\r\nimport { Stat } from \"../../utils/Stat\";\r\nimport { Prefab } from \"../../resource/HierarchyResource\";\r\nimport { ILaya } from \"../../../ILaya\";\r\nimport { CommandUniformMap } from \"../../RenderEngine/CommandUniformMap\";\r\nimport { NodeFlags } from \"../../Const\";\r\nimport { Event } from \"../../events/Event\";\r\nimport { Scene3D } from \"./scene/Scene3D\";\r\nimport { Matrix4x4 } from \"../../maths/Matrix4x4\";\r\nimport { Quaternion } from \"../../maths/Quaternion\";\r\nimport { Vector3 } from \"../../maths/Vector3\";\r\n\r\n/**\r\n * @internal\r\n */\r\nexport enum StaticFlag {\r\n    Normal = 1 << 0,\r\n    StaticBatch = 1 << 1,\r\n}\r\n\r\n/**\r\n * <code>Sprite3D</code> 类用于实现3D精灵。\r\n */\r\nexport class Sprite3D extends Node {\r\n    /**@internal 着色器变量名，世界矩阵。*/\r\n    static WORLDMATRIX: number;\r\n    static WORLDINVERTFRONT: number;//-1为翻转了反面，1为正常情况\r\n    /**@internal */\r\n    static sprite3DCommandUniformMap: CommandUniformMap;\r\n    /**@internal */\r\n    protected static _uniqueIDCounter: number = 0;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    static __init__(): void {\r\n        Sprite3D.WORLDMATRIX = Shader3D.propertyNameToID(\"u_WorldMat\");\r\n        Sprite3D.WORLDINVERTFRONT = Shader3D.propertyNameToID(\"u_WroldInvertFront\");\r\n        Sprite3D.sprite3DCommandUniformMap = LayaGL.renderOBJCreate.createGlobalUniformMap(\"Sprite3D\");\r\n        Sprite3D.sprite3DCommandUniformMap.addShaderUniform(Sprite3D.WORLDMATRIX, \"u_WorldMat\");\r\n        Sprite3D.sprite3DCommandUniformMap.addShaderUniform(Sprite3D.WORLDINVERTFRONT, \"u_WroldInvertFront\");\r\n    }\r\n\r\n    /**\r\n     * 创建精灵的克隆实例。\r\n     * @param\toriginal  原始精灵。\r\n     * @param   parent    父节点。\r\n     * @param   worldPositionStays 是否保持自身世界变换。\r\n     * @param\tposition  世界位置,worldPositionStays为false时生效。\r\n     * @param\trotation  世界旋转,worldPositionStays为false时生效。\r\n     * @return  克隆实例。\r\n     */\r\n    static instantiate(original: Sprite3D, parent: Node = null, worldPositionStays: boolean = true, position: Vector3 = null, rotation: Quaternion = null): Sprite3D {\r\n        var destSprite3D: Sprite3D = (<Sprite3D>original.clone());\r\n        (parent) && (parent.addChild(destSprite3D));\r\n        var transform: Transform3D = destSprite3D.transform;\r\n        if (worldPositionStays) {\r\n            var worldMatrix: Matrix4x4 = transform.worldMatrix;\r\n            original.transform.worldMatrix.cloneTo(worldMatrix);\r\n            transform.worldMatrix = worldMatrix;\r\n        } else {\r\n            (position) && (transform.position = position);\r\n            (rotation) && (transform.rotation = rotation);\r\n        }\r\n        return destSprite3D;\r\n    }\r\n\r\n    /**\r\n     * 加载网格模板。\r\n     * @param url 模板地址。\r\n     * @param complete 完成回掉。\r\n     */\r\n    static load(url: string, complete: Handler): void {\r\n        ILaya.loader.load(url).then((res: Prefab) => {\r\n            complete && complete.runWith([res?.create()]);\r\n        });\r\n    }\r\n\r\n    /** @internal */\r\n    private _id: number;\r\n\r\n    /** @internal */\r\n    _isStatic: number;\r\n    /** @internal */\r\n    _layer: number;\r\n    /**@internal */\r\n    _transform: Transform3D;\r\n    /**@internal 0表示不是渲染节点*/\r\n    _isRenderNode: number = 0;\r\n\r\n    /**\r\n     * 唯一标识ID。\r\n     */\r\n    get id(): number {\r\n        return this._id;\r\n    }\r\n\r\n    /**\r\n     * 蒙版层。\r\n     */\r\n    get layer(): number {\r\n        return this._layer;\r\n    }\r\n\r\n    set layer(value: number) {\r\n        if (this._layer !== value) {\r\n            if (value >= 0 && value <= 30) {\r\n                this._layer = value;\r\n                this.event(Event.LAYERCHANGE, value);\r\n            } else {\r\n                throw new Error(\"Layer value must be 0-30.\");\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 是否为静态。\r\n     */\r\n    get isStatic(): boolean {\r\n        return !!(this._isStatic >> 1 | 0x0);\r\n    }\r\n\r\n    /**@internal IDE only*/\r\n    set isStatic(value: boolean) {\r\n        this._isStatic = value ? StaticFlag.StaticBatch : StaticFlag.Normal;\r\n        this.event(Event.staticMask, this._isStatic);\r\n    }\r\n\r\n    /**\r\n     * 精灵变换。\r\n     */\r\n    get transform(): Transform3D {\r\n        return this._transform;\r\n    }\r\n\r\n    get scene(): Scene3D {\r\n        return <Scene3D>this._scene;\r\n    }\r\n\r\n    /**\r\n     * 创建一个 <code>Sprite3D</code> 实例。\r\n     * @param name 精灵名称。\r\n     * @param isStatic 是否为静态。\r\n     */\r\n    constructor(name: string = null, isStatic: boolean = false) {\r\n        super();\r\n        this._id = ++Sprite3D._uniqueIDCounter;\r\n        this._is3D = true;\r\n        this._transform = LayaGL.renderOBJCreate.createTransform(this);\r\n        this._isStatic = isStatic ? StaticFlag.StaticBatch : StaticFlag.Normal;\r\n        this.layer = 0;\r\n        this.name = name ? name : \"New Sprite3D\";\r\n    }\r\n\r\n    /**\r\n    * @private\r\n    */\r\n    protected _onActive(): void {\r\n        super._onActive();\r\n        Stat.sprite3DCount++;\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    protected _onInActive(): void {\r\n        super._onInActive();\r\n        Stat.sprite3DCount--;\r\n    }\r\n\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     */\r\n    protected _onAdded(): void {\r\n        if (this._parent instanceof Sprite3D) {\r\n            var parent3D: Sprite3D = (<Sprite3D>this._parent);\r\n            this.transform._setParent(parent3D.transform);\r\n        }\r\n        else\r\n            this.transform._onWorldTransform();\r\n        super._onAdded();\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     */\r\n    protected _onRemoved(): void {\r\n        super._onRemoved();\r\n        if (this._parent instanceof Sprite3D)\r\n            this.transform._setParent(null);\r\n    }\r\n\r\n    protected onStartListeningToType(type: string) {\r\n        super.onStartListeningToType(type);\r\n        if (type.startsWith(\"collision\"))\r\n            this._setBit(NodeFlags.PROCESS_COLLISIONS, true);\r\n        else if (type.startsWith(\"trigger\"))\r\n            this._setBit(NodeFlags.PROCESS_TRIGGERS, true);\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     * @internal\r\n     */\r\n    _parse(data: any, spriteMap: any): void {\r\n        (data.isStatic !== undefined) && (this.isStatic = data.isStatic);\r\n        (data.active !== undefined) && (this.active = data.active);\r\n        (data.name != undefined) && (this.name = data.name);\r\n        (data.tag != undefined) && (this.tag = data.tag);\r\n\r\n        if (data.position !== undefined) {\r\n            var loccalPosition: Vector3 = this.transform.localPosition;\r\n            loccalPosition.fromArray(data.position);\r\n            this.transform.localPosition = loccalPosition;\r\n        }\r\n\r\n        if (data.rotationEuler !== undefined) {\r\n            var localRotationEuler: Vector3 = this.transform.localRotationEuler;\r\n            localRotationEuler.fromArray(data.rotationEuler);\r\n            this.transform.localRotationEuler = localRotationEuler;\r\n        }\r\n        if (data.rotation !== undefined) {\r\n            var localRotation: Quaternion = this.transform.localRotation;\r\n            localRotation.fromArray(data.rotation);\r\n            this.transform.localRotation = localRotation;\r\n        }\r\n\r\n        if (data.scale !== undefined) {\r\n            var localScale: Vector3 = this.transform.localScale;\r\n            localScale.fromArray(data.scale);\r\n            this.transform.localScale = localScale;\r\n        }\r\n\r\n        (data.layer != undefined) && (this.layer = data.layer);\r\n    }\r\n\r\n    /**\r\n     * @override\r\n     * @internal\r\n     * 克隆。\r\n     * @param\tdestObject 克隆源。\r\n     */\r\n    _cloneTo(destObject: any, srcRoot: Node, dstRoot: Node): void {\r\n        if (this._destroyed)\r\n            throw new Error(\"Sprite3D: Can't be cloned if the Sprite3D has destroyed.\");\r\n\r\n        var destSprite3D: Sprite3D = <Sprite3D>destObject;\r\n        var trans: Transform3D = this._transform;\r\n        var destTrans: Transform3D = destSprite3D._transform;\r\n\r\n        destSprite3D.name = this.name/* + \"(clone)\"*/;//TODO:克隆后不能播放刚体动画，找不到名字\r\n        destSprite3D.tag = this.tag;\r\n        destSprite3D._destroyed = this._destroyed;\r\n        destSprite3D.active = this.active;\r\n        destTrans.localPosition = trans.localPosition;\r\n        destTrans.localRotation = trans.localRotation;\r\n        destTrans.localScale = trans.localScale;\r\n\r\n        destSprite3D._isStatic = this._isStatic;\r\n        destSprite3D.layer = this.layer;\r\n        super._cloneTo(destSprite3D, srcRoot, dstRoot);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private static _createSprite3DInstance(scrSprite: Sprite3D): Node {\r\n        var node: Node = scrSprite._create();\r\n        var children: any[] = scrSprite._children;\r\n        for (var i: number = 0, n: number = children.length; i < n; i++) {\r\n            var child: any = Sprite3D._createSprite3DInstance(children[i])\r\n            node.addChild(child);\r\n        }\r\n        return node;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private static _parseSprite3DInstance(srcRoot: Node, dstRoot: Node, scrSprite: Node, dstSprite: Node): void {\r\n        var srcChildren: any[] = scrSprite._children;\r\n        var dstChildren: any[] = dstSprite._children;\r\n        for (var i: number = 0, n: number = srcChildren.length; i < n; i++)\r\n            Sprite3D._parseSprite3DInstance(srcRoot, dstRoot, srcChildren[i], dstChildren[i])\r\n        scrSprite._cloneTo(dstSprite, srcRoot, dstRoot);\r\n    }\r\n\r\n    /**\r\n     * 克隆。\r\n     * @return\t 克隆副本。\r\n     */\r\n    clone(): Node {\r\n        var dstSprite3D: Node = Sprite3D._createSprite3DInstance(this);\r\n        Sprite3D._parseSprite3DInstance(this, dstSprite3D, this, dstSprite3D);\r\n        return dstSprite3D;\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     */\r\n    destroy(destroyChild: boolean = true): void {\r\n        if (this._destroyed)\r\n            return;\r\n\r\n        super.destroy(destroyChild);\r\n        this._transform = null;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _create(): Node {\r\n        return new Sprite3D();\r\n    }\r\n}\r\n\r\n","import { Plane } from \"./Plane\";\r\nimport { CollisionUtils } from \"./CollisionUtils\";\r\nimport { ContainmentType } from \"./ContainmentType\";\r\nimport { BoundBox } from \"./BoundBox\";\r\nimport { BoundSphere } from \"./BoundSphere\";\r\nimport { IClone } from \"../../utils/IClone\";\r\nimport { Bounds } from \"./Bounds\";\r\nimport { Matrix4x4 } from \"../../maths/Matrix4x4\";\r\nimport { Vector3 } from \"../../maths/Vector3\";\r\n\r\n/**\r\n * 锥体角点。\r\n */\r\nexport enum FrustumCorner {\r\n\tFarBottomLeft = 0,\r\n\tFarTopLeft = 1,\r\n\tFarTopRight = 2,\r\n\tFarBottomRight = 3,\r\n\tnearBottomLeft = 4,\r\n\tnearTopLeft = 5,\r\n\tnearTopRight = 6,\r\n\tnearBottomRight = 7,\r\n\tunknown = 8\r\n}\r\n\r\n\r\n/**\r\n * <code>BoundFrustum</code> 类用于创建锥截体。\r\n */\r\nexport class BoundFrustum implements IClone {\r\n\t/** @internal */\r\n\tprivate static _tempV30: Vector3 = new Vector3();\r\n\t/** @internal */\r\n\tprivate static _tempV31: Vector3 = new Vector3();\r\n\t/** @internal */\r\n\tprivate static _tempV32: Vector3 = new Vector3();\r\n\t/** @internal */\r\n\tprivate static _tempV33: Vector3 = new Vector3();\r\n\t/** @internal */\r\n\tprivate static _tempV34: Vector3 = new Vector3();\r\n\t/** @internal */\r\n\tprivate static _tempV35: Vector3 = new Vector3();\r\n\t/** @internal */\r\n\tprivate static _tempV36: Vector3 = new Vector3();\r\n\r\n\t/**\r\n\t * 根据矩阵获取6个包围平面。\r\n\t * @param  m 描述矩阵。\r\n\t * @param  np 近平面。\r\n\t * @param  fp 远平面。\r\n\t * @param  lp 左平面。\r\n\t * @param  rp 右平面。\r\n\t * @param  tp 顶平面。\r\n\t * @param  bp 底平面。\r\n\t */\r\n\tstatic getPlanesFromMatrix(m: Matrix4x4, np: Plane, fp: Plane, lp: Plane, rp: Plane, tp: Plane, bp: Plane): void {\r\n\t\tvar matrixE: Float32Array = m.elements;\r\n\t\tvar m11: number = matrixE[0];\r\n\t\tvar m12: number = matrixE[1];\r\n\t\tvar m13: number = matrixE[2];\r\n\t\tvar m14: number = matrixE[3];\r\n\t\tvar m21: number = matrixE[4];\r\n\t\tvar m22: number = matrixE[5];\r\n\t\tvar m23: number = matrixE[6];\r\n\t\tvar m24: number = matrixE[7];\r\n\t\tvar m31: number = matrixE[8];\r\n\t\tvar m32: number = matrixE[9];\r\n\t\tvar m33: number = matrixE[10];\r\n\t\tvar m34: number = matrixE[11];\r\n\t\tvar m41: number = matrixE[12];\r\n\t\tvar m42: number = matrixE[13];\r\n\t\tvar m43: number = matrixE[14];\r\n\t\tvar m44: number = matrixE[15];\r\n\r\n\t\t//near\r\n\t\tvar nearNorE: Vector3 = np.normal;\r\n\t\tnearNorE.x = m13;\r\n\t\tnearNorE.y = m23;\r\n\t\tnearNorE.z = m33;\r\n\t\tnp.distance = m43;\r\n\t\tnp.normal = nearNorE;\r\n\t\tnp.normalize();\r\n\r\n\t\t//far\r\n\t\tvar farNorE: Vector3 = fp.normal;\r\n\t\tfarNorE.x = m14 - m13;\r\n\t\tfarNorE.y = m24 - m23;\r\n\t\tfarNorE.z = m34 - m33;\r\n\t\tfp.distance = m44 - m43;\r\n\t\tfp.normal = farNorE;\r\n\t\tfp.normalize();\r\n\r\n\t\t//left\r\n\t\tvar leftNorE: Vector3 = lp.normal;\r\n\t\tleftNorE.x = m14 + m11;\r\n\t\tleftNorE.y = m24 + m21;\r\n\t\tleftNorE.z = m34 + m31;\r\n\t\tlp.distance = m44 + m41;\r\n\t\tlp.normal = leftNorE;\r\n\t\tlp.normalize();\r\n\r\n\t\t//right\r\n\t\tvar rightNorE: Vector3 = rp.normal;\r\n\t\trightNorE.x = m14 - m11;\r\n\t\trightNorE.y = m24 - m21;\r\n\t\trightNorE.z = m34 - m31;\r\n\t\trp.distance = m44 - m41;\r\n\t\trp.normal = rightNorE;\r\n\t\trp.normalize();\r\n\r\n\t\t//top\r\n\t\tvar topNorE: Vector3 = tp.normal;\r\n\t\ttopNorE.x = m14 - m12;\r\n\t\ttopNorE.y = m24 - m22;\r\n\t\ttopNorE.z = m34 - m32;\r\n\t\ttp.distance = m44 - m42;\r\n\t\ttp.normal = topNorE;\r\n\t\ttp.normalize();\r\n\r\n\t\t//bottom\r\n\t\tvar bottomNorE: Vector3 = bp.normal;\r\n\t\tbottomNorE.x = m14 + m12;\r\n\t\tbottomNorE.y = m24 + m22;\r\n\t\tbottomNorE.z = m34 + m32;\r\n\t\tbp.distance = m44 + m42;\r\n\t\tbp.normal = bottomNorE;\r\n\t\tbp.normalize();\r\n\t}\r\n\r\n\t/** @internal */\r\n\tprotected _matrix: Matrix4x4;\r\n\t/** @internal */\r\n\tprotected _near: Plane;\r\n\t/** @internal */\r\n\tprotected _far: Plane;\r\n\t/** @internal */\r\n\tprotected _left: Plane;\r\n\t/** @internal */\r\n\tprotected _right: Plane;\r\n\t/** @internal */\r\n\tprotected _top: Plane;\r\n\t/** @internal */\r\n\tprotected _bottom: Plane;\r\n\r\n\t/**\r\n\t * 创建一个 <code>BoundFrustum</code> 实例。\r\n\t * @param\tmatrix 锥截体的描述4x4矩阵。\r\n\t */\r\n\tconstructor(matrix: Matrix4x4) {\r\n\t\tthis._matrix = matrix;\r\n\t\tthis.initBoundingPlane();\r\n\t}\r\n\r\n\tprotected initBoundingPlane() {\r\n\t\tthis._near = new Plane();\r\n\t\tthis._far = new Plane();\r\n\t\tthis._left = new Plane();\r\n\t\tthis._right = new Plane();\r\n\t\tthis._top = new Plane();\r\n\t\tthis._bottom = new Plane();\r\n\t\tBoundFrustum.getPlanesFromMatrix(this._matrix, this._near, this._far, this._left, this._right, this._top, this._bottom);\r\n\t}\r\n\r\n\t/**\r\n\t * 描述矩阵。\r\n\t */\r\n\tget matrix(): Matrix4x4 {\r\n\t\treturn this._matrix;\r\n\t}\r\n\r\n\tset matrix(matrix: Matrix4x4) {\r\n\t\tmatrix.cloneTo(this._matrix)\r\n\t\tBoundFrustum.getPlanesFromMatrix(this._matrix, this._near, this._far, this._left, this._right, this._top, this._bottom);\r\n\t}\r\n\r\n\t/**\r\n\t * 近平面。\r\n\t */\r\n\tget near(): Plane {\r\n\t\treturn this._near;\r\n\t}\r\n\r\n\t/**\r\n\t * 远平面。\r\n\t */\r\n\tget far(): Plane {\r\n\t\treturn this._far;\r\n\t}\r\n\r\n\t/**\r\n\t * 左平面。\r\n\t */\r\n\tget left(): Plane {\r\n\t\treturn this._left;\r\n\t}\r\n\r\n\t/**\r\n\t * 右平面。\r\n\t */\r\n\tget right(): Plane {\r\n\t\treturn this._right;\r\n\t}\r\n\r\n\t/**\r\n\t * 顶平面。\r\n\t */\r\n\tget top(): Plane {\r\n\t\treturn this._top;\r\n\t}\r\n\r\n\t/**\r\n\t * 底平面。\r\n\t */\r\n\tget bottom(): Plane {\r\n\t\treturn this._bottom;\r\n\t}\r\n\r\n\t/**\r\n\t * 判断是否与其他锥截体相等。\r\n\t * @param\tother 锥截体。\r\n\t */\r\n\tequalsBoundFrustum(other: BoundFrustum): boolean {\r\n\t\treturn this._matrix.equalsOtherMatrix(other.matrix)\r\n\t}\r\n\r\n\t/**\r\n\t * 判断是否与其他对象相等。\r\n\t * @param\tobj 对象。\r\n\t */\r\n\tequalsObj(obj: any): boolean {\r\n\t\tif (obj instanceof BoundFrustum) {\r\n\t\t\tvar bf: BoundFrustum = (<BoundFrustum>obj);\r\n\t\t\treturn this.equalsBoundFrustum(bf);\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取锥截体的任意一平面。\r\n\t * 0:近平面\r\n\t * 1:远平面\r\n\t * 2:左平面\r\n\t * 3:右平面\r\n\t * 4:顶平面\r\n\t * 5:底平面\r\n\t * @param\tindex 索引。\r\n\t */\r\n\tgetPlane(index: number): Plane {\r\n\t\tswitch (index) {\r\n\t\t\tcase 0:\r\n\t\t\t\treturn this._near;\r\n\t\t\tcase 1:\r\n\t\t\t\treturn this._far;\r\n\t\t\tcase 2:\r\n\t\t\t\treturn this._left;\r\n\t\t\tcase 3:\r\n\t\t\t\treturn this._right;\r\n\t\t\tcase 4:\r\n\t\t\t\treturn this._top;\r\n\t\t\tcase 5:\r\n\t\t\t\treturn this._bottom;\r\n\t\t\tdefault:\r\n\t\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 锥截体三个相交平面的交点。\r\n\t * @param  p1  平面1。\r\n\t * @param  p2  平面2。\r\n\t * @param  p3  平面3。\r\n\t */\r\n\tstatic get3PlaneInterPoint(p1: Plane, p2: Plane, p3: Plane, out: Vector3): void {\r\n\t\tvar p1Nor: Vector3 = p1.normal;\r\n\t\tvar p2Nor: Vector3 = p2.normal;\r\n\t\tvar p3Nor: Vector3 = p3.normal;\r\n\r\n\t\tVector3.cross(p2Nor, p3Nor, BoundFrustum._tempV30);\r\n\t\tVector3.cross(p3Nor, p1Nor, BoundFrustum._tempV31);\r\n\t\tVector3.cross(p1Nor, p2Nor, BoundFrustum._tempV32);\r\n\r\n\t\tvar a: number = Vector3.dot(p1Nor, BoundFrustum._tempV30);\r\n\t\tvar b: number = Vector3.dot(p2Nor, BoundFrustum._tempV31);\r\n\t\tvar c: number = Vector3.dot(p3Nor, BoundFrustum._tempV32);\r\n\r\n\t\tVector3.scale(BoundFrustum._tempV30, -p1.distance / a, BoundFrustum._tempV33);\r\n\t\tVector3.scale(BoundFrustum._tempV31, -p2.distance / b, BoundFrustum._tempV34);\r\n\t\tVector3.scale(BoundFrustum._tempV32, -p3.distance / c, BoundFrustum._tempV35);\r\n\r\n\t\tVector3.add(BoundFrustum._tempV33, BoundFrustum._tempV34, BoundFrustum._tempV36);\r\n\t\tVector3.add(BoundFrustum._tempV35, BoundFrustum._tempV36, out);\r\n\t}\r\n\r\n\t/**\r\n\t * 锥截体的8个顶点。\r\n\t * @param  corners  返回顶点的输出队列。\r\n\t */\r\n\tgetCorners(corners: Vector3[]): void {\r\n\t\tBoundFrustum.get3PlaneInterPoint(this._near, this._bottom, this._right, corners[FrustumCorner.nearBottomRight]);\r\n\t\tBoundFrustum.get3PlaneInterPoint(this._near, this._top, this._right, corners[FrustumCorner.nearTopRight]);\r\n\t\tBoundFrustum.get3PlaneInterPoint(this._near, this._top, this._left, corners[FrustumCorner.nearTopLeft]);\r\n\t\tBoundFrustum.get3PlaneInterPoint(this._near, this._bottom, this._left, corners[FrustumCorner.nearBottomLeft]);\r\n\t\tBoundFrustum.get3PlaneInterPoint(this._far, this._bottom, this._right, corners[FrustumCorner.FarBottomRight]);\r\n\t\tBoundFrustum.get3PlaneInterPoint(this._far, this._top, this._right, corners[FrustumCorner.FarTopRight]);\r\n\t\tBoundFrustum.get3PlaneInterPoint(this._far, this._top, this._left, corners[FrustumCorner.FarTopLeft]);\r\n\t\tBoundFrustum.get3PlaneInterPoint(this._far, this._bottom, this._left, corners[FrustumCorner.FarBottomLeft]);\r\n\t}\r\n\r\n\t/**\r\n\t * 与点的关系。\r\n\t * @param  point  点。\r\n\t * @returns 包涵:1,相交:2,不相交:0\r\n\t */\r\n\tcontainsPoint(point: Vector3): number {\r\n\t\tvar result: number = Plane.PlaneIntersectionType_Front;\r\n\t\tvar planeResult: number = Plane.PlaneIntersectionType_Front;\r\n\r\n\t\tfor (var i: number = 0; i < 6; i++) {\r\n\r\n\t\t\tswitch (i) {\r\n\t\t\t\tcase 0:\r\n\t\t\t\t\tplaneResult = CollisionUtils.intersectsPlaneAndPoint(this._near, point);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\tplaneResult = CollisionUtils.intersectsPlaneAndPoint(this._far, point);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\tplaneResult = CollisionUtils.intersectsPlaneAndPoint(this._left, point);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 3:\r\n\t\t\t\t\tplaneResult = CollisionUtils.intersectsPlaneAndPoint(this._right, point);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 4:\r\n\t\t\t\t\tplaneResult = CollisionUtils.intersectsPlaneAndPoint(this._top, point);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 5:\r\n\t\t\t\t\tplaneResult = CollisionUtils.intersectsPlaneAndPoint(this._bottom, point);\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tswitch (planeResult) {\r\n\t\t\t\tcase Plane.PlaneIntersectionType_Back:\r\n\t\t\t\t\treturn ContainmentType.Disjoint;\r\n\t\t\t\tcase Plane.PlaneIntersectionType_Intersecting:\r\n\t\t\t\t\tresult = Plane.PlaneIntersectionType_Intersecting;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tswitch (result) {\r\n\t\t\tcase Plane.PlaneIntersectionType_Intersecting:\r\n\t\t\t\treturn ContainmentType.Intersects;\r\n\t\t\tdefault:\r\n\t\t\t\treturn ContainmentType.Contains;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 是否与包围盒交叉。\r\n\t * @param box 包围盒。\r\n\t * @returns boolean 是否相交\r\n\t */\r\n\tintersects(box: BoundBox|Bounds): boolean {\r\n\t\tvar min: Vector3 = box.min;\r\n\t\tvar max: Vector3 = box.max;\r\n\t\tvar minX: number = min.x;\r\n\t\tvar minY: number = min.y;\r\n\t\tvar minZ: number = min.z;\r\n\t\tvar maxX: number = max.x;\r\n\t\tvar maxY: number = max.y;\r\n\t\tvar maxZ: number = max.z;\r\n\r\n\t\tvar nearNormal: Vector3 = this._near.normal;\r\n\t\tif (this._near.distance + (nearNormal.x * (nearNormal.x < 0 ? minX : maxX)) + (nearNormal.y * (nearNormal.y < 0 ? minY : maxY)) + (nearNormal.z * (nearNormal.z < 0 ? minZ : maxZ)) < 0)\r\n\t\t\treturn false;\r\n\r\n\t\tvar leftNormal: Vector3 = this._left.normal;\r\n\t\tif (this._left.distance + (leftNormal.x * (leftNormal.x < 0 ? minX : maxX)) + (leftNormal.y * (leftNormal.y < 0 ? minY : maxY)) + (leftNormal.z * (leftNormal.z < 0 ? minZ : maxZ)) < 0)\r\n\t\t\treturn false\r\n\r\n\t\tvar rightNormal: Vector3 = this._right.normal;\r\n\t\tif (this._right.distance + (rightNormal.x * (rightNormal.x < 0 ? minX : maxX)) + (rightNormal.y * (rightNormal.y < 0 ? minY : maxY)) + (rightNormal.z * (rightNormal.z < 0 ? minZ : maxZ)) < 0)\r\n\t\t\treturn false;\r\n\r\n\t\tvar bottomNormal: Vector3 = this._bottom.normal;\r\n\t\tif (this._bottom.distance + (bottomNormal.x * (bottomNormal.x < 0 ? minX : maxX)) + (bottomNormal.y * (bottomNormal.y < 0 ? minY : maxY)) + (bottomNormal.z * (bottomNormal.z < 0 ? minZ : maxZ)) < 0)\r\n\t\t\treturn false;\r\n\r\n\t\tvar topNormal: Vector3 = this._top.normal;\r\n\t\tif (this._top.distance + (topNormal.x * (topNormal.x < 0 ? minX : maxX)) + (topNormal.y * (topNormal.y < 0 ? minY : maxY)) + (topNormal.z * (topNormal.z < 0 ? minZ : maxZ)) < 0)\r\n\t\t\treturn false;\r\n\r\n\t\t// Can ignore far plane when distant object culling is handled by another mechanism\r\n\t\tvar farNormal: Vector3 = this._far.normal;\r\n\t\tif (this._far.distance + (farNormal.x * (farNormal.x < 0 ? minX : maxX)) + (farNormal.y * (farNormal.y < 0 ? minY : maxY)) + (farNormal.z * (farNormal.z < 0 ? minZ : maxZ)) < 0)\r\n\t\t\treturn false;\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * 与包围盒的位置关系。\r\n\t * @param  box  包围盒。\r\n\t * @returns 包涵:1,相交:2,不相交:0\r\n\t */\r\n\tcontainsBoundBox(box: BoundBox|Bounds): number {\r\n\t\tvar p: Vector3 = BoundFrustum._tempV30, n: Vector3 = BoundFrustum._tempV31;\r\n\t\tvar boxMin: Vector3 = box.min;\r\n\t\tvar boxMax: Vector3 = box.max;\r\n\t\tvar result: number = ContainmentType.Contains;\r\n\t\tfor (var i: number = 0; i < 6; i++) {\r\n\t\t\tvar plane: Plane = this.getPlane(i);\r\n\t\t\tvar planeNor: Vector3 = plane.normal;\r\n\r\n\t\t\tif (planeNor.x >= 0) {\r\n\t\t\t\tp.x = boxMax.x;\r\n\t\t\t\tn.x = boxMin.x;\r\n\t\t\t} else {\r\n\t\t\t\tp.x = boxMin.x;\r\n\t\t\t\tn.x = boxMax.x;\r\n\t\t\t}\r\n\t\t\tif (planeNor.y >= 0) {\r\n\t\t\t\tp.y = boxMax.y;\r\n\t\t\t\tn.y = boxMin.y;\r\n\t\t\t} else {\r\n\t\t\t\tp.y = boxMin.y;\r\n\t\t\t\tn.y = boxMax.y;\r\n\t\t\t}\r\n\t\t\tif (planeNor.z >= 0) {\r\n\t\t\t\tp.z = boxMax.z;\r\n\t\t\t\tn.z = boxMin.z;\r\n\t\t\t} else {\r\n\t\t\t\tp.z = boxMin.z;\r\n\t\t\t\tn.z = boxMax.z;\r\n\t\t\t}\r\n\r\n\t\t\tif (CollisionUtils.intersectsPlaneAndPoint(plane, p) === Plane.PlaneIntersectionType_Back)\r\n\t\t\t\treturn ContainmentType.Disjoint;\r\n\r\n\t\t\tif (CollisionUtils.intersectsPlaneAndPoint(plane, n) === Plane.PlaneIntersectionType_Back)\r\n\t\t\t\tresult = ContainmentType.Intersects;\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\t/**\r\n\t * 与包围球的位置关系\r\n\t * @param  sphere  包围球。\r\n\t * @returns 包涵:1,相交:2,不相交:0\r\n\t */\r\n\tcontainsBoundSphere(sphere: BoundSphere): number {\r\n\t\tvar result: number = Plane.PlaneIntersectionType_Front;\r\n\t\tvar planeResult: number = Plane.PlaneIntersectionType_Front;\r\n\t\tfor (var i: number = 0; i < 6; i++) {\r\n\t\t\tswitch (i) {\r\n\t\t\t\tcase 0:\r\n\t\t\t\t\tplaneResult = CollisionUtils.intersectsPlaneAndSphere(this._near, sphere);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\tplaneResult = CollisionUtils.intersectsPlaneAndSphere(this._far, sphere);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\tplaneResult = CollisionUtils.intersectsPlaneAndSphere(this._left, sphere);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 3:\r\n\t\t\t\t\tplaneResult = CollisionUtils.intersectsPlaneAndSphere(this._right, sphere);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 4:\r\n\t\t\t\t\tplaneResult = CollisionUtils.intersectsPlaneAndSphere(this._top, sphere);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 5:\r\n\t\t\t\t\tplaneResult = CollisionUtils.intersectsPlaneAndSphere(this._bottom, sphere);\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tswitch (planeResult) {\r\n\r\n\t\t\t\tcase Plane.PlaneIntersectionType_Back:\r\n\t\t\t\t\treturn ContainmentType.Disjoint;\r\n\t\t\t\tcase Plane.PlaneIntersectionType_Intersecting:\r\n\t\t\t\t\tresult = Plane.PlaneIntersectionType_Intersecting;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tswitch (result) {\r\n\r\n\t\t\tcase Plane.PlaneIntersectionType_Intersecting:\r\n\t\t\t\treturn ContainmentType.Intersects;\r\n\t\t\tdefault:\r\n\t\t\t\treturn ContainmentType.Contains;\r\n\t\t}\r\n\t}\r\n\r\n\tcloneTo(dest: BoundFrustum) {\r\n\t\tdest.matrix = this.matrix;\r\n\t}\r\n\r\n\tclone(): BoundFrustum {\r\n\t\tlet dest = new BoundFrustum(new Matrix4x4);\r\n\t\tthis.cloneTo(dest);\r\n\t\treturn dest;\r\n\t}\r\n}\r\n\r\n\r\n","import { Component } from \"../../../components/Component\";\r\nimport { BaseRender } from \"../../core/render/BaseRender\";\r\nimport { Sprite3D } from \"../../core/Sprite3D\";\r\nimport { Bounds } from \"../../math/Bounds\";\r\nimport { VolumeManager } from \"./VolumeManager\";\r\nimport { Event } from \"../../../events/Event\";\r\nimport { Scene3D } from \"../../core/scene/Scene3D\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\n\r\nexport enum volumeIntersectType {\r\n    /**包含 */\r\n    contain,\r\n    /**相交 */\r\n    intersect,\r\n    /**不相交*/\r\n    Disjoint\r\n}\r\n\r\n/**\r\n * 物体于Volume的相交属性\r\n */\r\nexport class volumeIntersectInfo {\r\n    type: volumeIntersectType;\r\n    /**相交比例 */\r\n    intersectRate: number;\r\n}\r\n\r\nexport class Volume extends Component {\r\n    /**@internal */\r\n    protected _primitiveBounds: Bounds;\r\n    /** 包围盒 */\r\n    protected _bounds: Bounds;\r\n    /**cache number of around Volume */\r\n    protected _aroundVolumeCacheNum: number = 0;\r\n    /** around Volume */\r\n    protected _aroundVolume: Volume[];\r\n    /** volume manager */\r\n    protected _volumeManager: VolumeManager;\r\n    /** volume intersect Comonent */\r\n    protected _type: number;\r\n    /** 重要性 */\r\n    protected _importance: number;\r\n\r\n    /**\r\n     * 创建一个<code>Volume</code>实例\r\n     */\r\n    constructor() {\r\n        super();\r\n        this._bounds = new Bounds();\r\n        this._primitiveBounds = new Bounds();\r\n        this._importance = 0;\r\n        this.runInEditor = true;\r\n    }\r\n\r\n    /**\r\n     * volume Type\r\n     */\r\n    get type() {\r\n        return this._type;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    get bounds(): Bounds {\r\n        return this._bounds;\r\n    }\r\n\r\n    get boundsMax(): Vector3 {\r\n        return this._primitiveBounds.getMax();\r\n    }\r\n\r\n    /**\r\n     * primitive包围盒max\r\n     */\r\n    set boundsMax(value: Vector3) {\r\n        this._primitiveBounds.setMax(value);\r\n        this._reCaculateBoundBox();\r\n    }\r\n\r\n    /**\r\n     * primitiveBoxMax\r\n     */\r\n    set boundsMin(value: Vector3) {\r\n        this._primitiveBounds.setMin(value);\r\n        this._reCaculateBoundBox();\r\n    }\r\n\r\n    get boundsMin(): Vector3 {\r\n        return this._primitiveBounds.getMin();\r\n    }\r\n\r\n    get probePosition(): Vector3 {\r\n        return (this.owner as Sprite3D).transform.position;\r\n    }\r\n\r\n    get importance() {\r\n        return this._importance;\r\n    }\r\n\r\n    set importance(value: number) {\r\n        this._importance = value;\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     */\r\n    protected _onEnable(): void {\r\n        (this.owner as Sprite3D).transform.on(Event.TRANSFORM_CHANGED, this, this._VolumeChange);\r\n        this._volumeManager = ((this.owner as Sprite3D).scene as Scene3D)._volumeManager;\r\n        this._volumeManager.add(this);\r\n        this._reCaculateBoundBox();\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     */\r\n    protected _onDisable(): void {\r\n        (this.owner as Sprite3D).transform.off(Event.TRANSFORM_CHANGED, this, this._VolumeChange);\r\n        this._volumeManager.remove(this);\r\n    }\r\n\r\n    /**\r\n     * 当一个渲染节点进入体积\r\n     * @param renderNode \r\n     */\r\n    _addRenderNode?(renderNode: BaseRender): void;\r\n\r\n    /**\r\n     * 当一个渲染节点移除体积\r\n     * @param renderNode    \r\n     */\r\n    _removeRenderNode?(renderNode: BaseRender): void;\r\n\r\n    /**\r\n     * 当一个渲染节点在体积中移动\r\n     * @param renderNode \r\n     */\r\n    _motionInVolume?(renderNode: BaseRender): void;\r\n\r\n\r\n    /**\r\n     * Volume change\r\n     */\r\n    _VolumeChange() {\r\n        this._volumeManager._needUpdateAllRender = true;\r\n        this._reCaculateBoundBox();\r\n    }\r\n\r\n    _reCaculateBoundBox() {\r\n        this.owner && this._primitiveBounds._tranform((this.owner as Sprite3D).transform.worldMatrix, this._bounds);\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     * @internal\r\n     */\r\n    _cloneTo(dest: Volume): void {\r\n    }\r\n\r\n}","/**\r\n * 环境光模式\r\n */\r\nexport enum AmbientMode {\r\n    /** 固定颜色。*/\r\n    SolidColor,\r\n    /** 球谐光照, 通过天空盒生成的球谐数据。 */\r\n    SphericalHarmonics,\r\n    /** 分别设置天空, 地平线, 地面的环境光颜色 */\r\n    TripleColor\r\n}\r\n","import { TextureDecodeFormat } from \"../../../../RenderEngine/RenderEnum/TextureDecodeFormat\";\r\nimport { Sprite3D } from \"../../../core/Sprite3D\";\r\nimport { Bounds } from \"../../../math/Bounds\";\r\nimport { TextureCube } from \"../../../../resource/TextureCube\";\r\nimport { Volume } from \"../Volume\";\r\nimport { VolumeManager } from \"../VolumeManager\";\r\nimport { SphericalHarmonicsL2, SphericalHarmonicsL2Generater } from \"../../../graphics/SphericalHarmonicsL2\";\r\nimport { ShaderData, ShaderDataType } from \"../../../../RenderEngine/RenderShader/ShaderData\";\r\nimport { RenderableSprite3D } from \"../../../core/RenderableSprite3D\";\r\nimport { Sprite3DRenderDeclaration } from \"../../../core/render/Sprite3DRenderDeclaration\";\r\nimport { ILaya3D } from \"../../../../../ILaya3D\";\r\nimport { AmbientMode } from \"../../../core/scene/AmbientMode\";\r\nimport { Color } from \"../../../../maths/Color\";\r\nimport { Vector3 } from \"../../../../maths/Vector3\";\r\nimport { Vector4 } from \"../../../../maths/Vector4\";\r\n\r\n\r\n/**\r\n * 反射探针模式\r\n */\r\nexport enum ReflectionProbeMode {\r\n\t/**烘培模式 */\r\n\toff = 0,//现在仅仅支持Back烘培\r\n\t/**实时简单采样模式 还未支持*/\r\n\tsimple = 1,\r\n}\r\n/**\r\n * <code>ReflectionProbe</code> 类用于实现反射探针组件\r\n * @miner\r\n */\r\nexport class ReflectionProbe extends Volume {\r\n\t//因为纹理数量问题 暂不支持探针混合\r\n\tstatic TEMPVECTOR3: Vector3 = new Vector3();\r\n\t/** 默认解码数据 */\r\n\tstatic defaultTextureHDRDecodeValues: Vector4 = new Vector4(1.0, 1.0, 0.0, 0.0);\r\n\t/** 盒子反射是否开启 */\r\n\tprivate _boxProjection: boolean = false;\r\n\t/** 包围盒 */\r\n\tprotected _bounds: Bounds;\r\n\t/** 探针重要度 */\r\n\tprotected _importance: number;\r\n\t/**漫反射顔色 */\r\n\tprivate _ambientColor: Color = new Color();\r\n\t/**漫反射SH */\r\n\tprivate _ambientSH: Float32Array;\r\n\t/**漫反射强度 */\r\n\tprivate _ambientIntensity: number;\r\n\t/**ibl反射 */\r\n\tprivate _iblTex: TextureCube;\r\n\t/**ibl是否压缩 */\r\n\tprivate _iblTexRGBD: boolean;\r\n\t/**反射强度 */\r\n\tprivate _reflectionIntensity: number;\r\n\t/** @internal */\r\n\tprivate _ambientMode: AmbientMode = AmbientMode.SolidColor;\r\n\r\n\t/** 是否是场景探针 */\r\n\t_isScene: boolean = false;\r\n\t/**修改了值，需要更新shader，需要和updateMask对应 */\r\n\t_updateMark: number;\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis._importance = 0;\r\n\t\tthis._type = VolumeManager.ReflectionProbeVolumeType;\r\n\t\tthis._ambientIntensity = 1.0;\r\n\t\tthis._reflectionIntensity = 1.0;\r\n\t\tthis.boundsMax = new Vector3(5, 5, 5);\r\n\t\tthis.boundsMin = new Vector3(-5, -5, -5);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * 是否开启正交反射。\r\n\t */\r\n\tget boxProjection(): boolean {\r\n\t\treturn this._boxProjection;\r\n\t}\r\n\r\n\tset boxProjection(value: boolean) {\r\n\t\tif (value != this._boxProjection) {\r\n\t\t\tthis._updateMark = ILaya3D.Scene3D._updateMark;\r\n\t\t}\r\n\t\tthis._boxProjection = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 设置反射探针的重要度\r\n\t */\r\n\tget importance(): number {\r\n\t\treturn this._importance;\r\n\t}\r\n\r\n\tset importance(value: number) {\r\n\t\tthis._importance = value\r\n\t}\r\n\r\n\t/**\r\n\t * 设置环境漫反射的强度\r\n\t */\r\n\tget ambientIntensity(): number {\r\n\t\treturn this._ambientIntensity;\r\n\t}\r\n\r\n\tset ambientIntensity(value: number) {\r\n\t\tif (value == this._ambientIntensity) return;\r\n\t\tthis._ambientIntensity = value;\r\n\t\tthis._updateMark = ILaya3D.Scene3D._updateMark;\r\n\t}\r\n\r\n\t/**\r\n\t * 设置反射探针强度\r\n\t */\r\n\tget reflectionIntensity(): number {\r\n\t\treturn this._reflectionIntensity;\r\n\t}\r\n\r\n\tset reflectionIntensity(value: number) {\r\n\t\tif (value == this._reflectionIntensity) return;\r\n\t\tvalue = Math.max(value, 0.0);\r\n\t\tthis._reflectionIntensity = value\r\n\t\tthis._updateMark = ILaya3D.Scene3D._updateMark;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * 获得反射探针的包围盒\r\n\t */\r\n\tget bounds(): Bounds {\r\n\t\treturn this._bounds as Bounds;\r\n\t}\r\n\r\n\t/**\r\n\t * 包围盒 max\r\n\t */\r\n\tset boundsMax(value: Vector3) {\r\n\t\tsuper.boundsMax = value;\r\n\t\tif (this.boxProjection)\r\n\t\t\tthis._updateMark = ILaya3D.Scene3D._updateMark;\r\n\t}\r\n\r\n\tget boundsMax(): Vector3 {\r\n\t\treturn this._primitiveBounds.getMax();\r\n\t}\r\n\r\n\t/**\r\n\t * 包围盒 min\r\n\t */\r\n\tset boundsMin(value: Vector3) {\r\n\t\tsuper.boundsMin = value;\r\n\t\tif (this.boxProjection)\r\n\t\t\tthis._updateMark = ILaya3D.Scene3D._updateMark;\r\n\t}\r\n\r\n\tget boundsMin(): Vector3 {\r\n\t\treturn this._primitiveBounds.getMin();\r\n\t}\r\n\r\n\t/**\r\n\t * probe 位置\r\n\t */\r\n\tget probePosition(): Vector3 {\r\n\t\treturn (this.owner as Sprite3D).transform.position;\r\n\t}\r\n\r\n\t/**\r\n\t * 漫反射颜色\r\n\t */\r\n\tpublic get ambientColor(): Color {\r\n\t\treturn this._ambientColor;\r\n\t}\r\n\tpublic set ambientColor(value: Color) {\r\n\t\tvalue && value.cloneTo(this._ambientColor);\r\n\t\tif (this.ambientMode == AmbientMode.SolidColor)\r\n\t\t\tthis._updateMark = ILaya3D.Scene3D._updateMark;\r\n\t}\r\n\r\n\t/**\r\n\t * 漫反射颜色 sh\r\n\t */\r\n\tpublic get ambientSH(): Float32Array {\r\n\t\treturn this._ambientSH;\r\n\t}\r\n\r\n\tpublic set ambientSH(value: Float32Array) {\r\n\t\tif (this.ambientMode == AmbientMode.SphericalHarmonics)\r\n\t\t\tthis._updateMark = ILaya3D.Scene3D._updateMark;\r\n\t\tthis._ambientSH = value;\r\n\t}\r\n\r\n\t/**\r\n\t* 环境光模式。\r\n\t* 如果值为AmbientMode.SolidColor一般使用ambientColor作为环境光源，如果值为如果值为AmbientMode.SphericalHarmonics一般使用ambientSphericalHarmonics作为环境光源。\r\n\t*/\r\n\tget ambientMode(): AmbientMode {\r\n\t\treturn this._ambientMode;\r\n\t}\r\n\r\n\tset ambientMode(value: AmbientMode) {\r\n\t\tif (value == this.ambientMode) return;\r\n\t\tthis._ambientMode = value;\r\n\t\tif (!this.ambientSH) {\r\n\t\t\tif (value == AmbientMode.SphericalHarmonics) {\r\n\t\t\t\tthis._ambientSphericalHarmonics && this._applySHCoefficients(this._ambientSphericalHarmonics, Math.pow(this._ambientIntensity, 2.2));\r\n\t\t\t} else if (value == AmbientMode.TripleColor) {\r\n\t\t\t\tthis._ambientTripleColorSphericalHarmonics && this._applySHCoefficients(this._ambientTripleColorSphericalHarmonics, 1.0);\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis._updateMark = ILaya3D.Scene3D._updateMark;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Image base Light\r\n\t */\r\n\tpublic get iblTex(): TextureCube {\r\n\t\treturn this._iblTex;\r\n\t}\r\n\r\n\tpublic set iblTex(value: TextureCube) {\r\n\t\tif (this.iblTex == value) return;\r\n\t\tif (this.iblTex) this.iblTex._removeReference();\r\n\t\tthis._iblTex = value;\r\n\t\tif (value)\r\n\t\t\tvalue._addReference();\r\n\t\tthis._updateMark = ILaya3D.Scene3D._updateMark;\r\n\t}\r\n\r\n\t/**\r\n\t * Image base Light Compress by RGBD\r\n\t */\r\n\tpublic get iblTexRGBD(): boolean {\r\n\t\treturn this._iblTexRGBD;\r\n\t}\r\n\r\n\tpublic set iblTexRGBD(value: boolean) {\r\n\t\tif (value == this._iblTexRGBD)\r\n\t\t\treturn;\r\n\t\tthis._iblTexRGBD = value;\r\n\t\tthis._updateMark = ILaya3D.Scene3D._updateMark;\r\n\t}\r\n\r\n\tapplyReflectionShaderData(shaderData: ShaderData) {\r\n\t\t//boxProjection\r\n\t\tif (!this.boxProjection) {\r\n\t\t\tshaderData.removeDefine(Sprite3DRenderDeclaration.SHADERDEFINE_SPECCUBE_BOX_PROJECTION);\r\n\t\t} else {\r\n\t\t\tshaderData.addDefine(Sprite3DRenderDeclaration.SHADERDEFINE_SPECCUBE_BOX_PROJECTION);\r\n\t\t\tshaderData.setShaderData(RenderableSprite3D.REFLECTIONCUBE_PROBEPOSITION, ShaderDataType.Vector3, this.probePosition);\r\n\t\t\tshaderData.setShaderData(RenderableSprite3D.REFLECTIONCUBE_PROBEBOXMAX, ShaderDataType.Vector3, this._bounds.getMax());\r\n\t\t\tshaderData.setShaderData(RenderableSprite3D.REFLECTIONCUBE_PROBEBOXMIN, ShaderDataType.Vector3, this._bounds.getMin());\r\n\r\n\t\t}\r\n\t\tif (this.ambientMode == AmbientMode.SolidColor) {\r\n\t\t\tshaderData.removeDefine(Sprite3DRenderDeclaration.SHADERDEFINE_GI_LEGACYIBL);\r\n\t\t\tshaderData.removeDefine(Sprite3DRenderDeclaration.SHADERDEFINE_GI_IBL);\r\n\t\t\tshaderData.setColor(RenderableSprite3D.AMBIENTCOLOR, this.ambientColor);\r\n\t\t} else if (this.iblTex && this.ambientSH) {\r\n\t\t\tshaderData.addDefine(Sprite3DRenderDeclaration.SHADERDEFINE_GI_IBL);\r\n\t\t\tshaderData.removeDefine(Sprite3DRenderDeclaration.SHADERDEFINE_GI_LEGACYIBL);\r\n\t\t\tif (this.iblTex) {\r\n\t\t\t\tshaderData.setTexture(RenderableSprite3D.IBLTEX, this.iblTex);\r\n\t\t\t\tshaderData.setNumber(RenderableSprite3D.IBLROUGHNESSLEVEL, this.iblTex.maxMipmapLevel);\r\n\t\t\t};\r\n\t\t\tthis.iblTexRGBD ? shaderData.addDefine(Sprite3DRenderDeclaration.SHADERDEFINE_IBL_RGBD) : shaderData.removeDefine(Sprite3DRenderDeclaration.SHADERDEFINE_IBL_RGBD);\r\n\t\t\tthis.ambientSH && shaderData.setBuffer(RenderableSprite3D.AMBIENTSH, this.ambientSH);\r\n\t\t} else {//Legency\r\n\t\t\tshaderData.removeDefine(Sprite3DRenderDeclaration.SHADERDEFINE_GI_IBL);\r\n\t\t\tshaderData.addDefine(Sprite3DRenderDeclaration.SHADERDEFINE_GI_LEGACYIBL);\r\n\t\t\tif (this._reflectionTexture) {\r\n\t\t\t\tshaderData.setShaderData(RenderableSprite3D.REFLECTIONTEXTURE, ShaderDataType.TextureCube, this.reflectionTexture ? this.reflectionTexture : TextureCube.blackTexture);\r\n\t\t\t\tshaderData.setShaderData(RenderableSprite3D.REFLECTIONCUBE_HDR_PARAMS, ShaderDataType.Vector4, this.reflectionHDRParams);\r\n\t\t\t}\r\n\r\n\t\t\tif (this._shCoefficients) {\r\n\t\t\t\tshaderData.setVector(RenderableSprite3D.AMBIENTSHAR, this._shCoefficients[0]);\r\n\t\t\t\tshaderData.setVector(RenderableSprite3D.AMBIENTSHAG, this._shCoefficients[1]);\r\n\t\t\t\tshaderData.setVector(RenderableSprite3D.AMBIENTSHAB, this._shCoefficients[2]);\r\n\t\t\t\tshaderData.setVector(RenderableSprite3D.AMBIENTSHBR, this._shCoefficients[3]);\r\n\t\t\t\tshaderData.setVector(RenderableSprite3D.AMBIENTSHBG, this._shCoefficients[4]);\r\n\t\t\t\tshaderData.setVector(RenderableSprite3D.AMBIENTSHBB, this._shCoefficients[5]);\r\n\t\t\t\tshaderData.setVector(RenderableSprite3D.AMBIENTSHC, this._shCoefficients[6]);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t\tshaderData.setNumber(RenderableSprite3D.AMBIENTINTENSITY, this.ambientIntensity);\r\n\t\tshaderData.setNumber(RenderableSprite3D.REFLECTIONINTENSITY, this.reflectionIntensity);\r\n\t}\r\n\r\n\t/**\r\n\t* @inheritDoc\r\n\t* @override\r\n\t*/\r\n\tprotected _onEnable(): void {\r\n\t\tsuper._onEnable();\r\n\t\tthis._updateMark = ILaya3D.Scene3D._updateMark;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tprotected _onDisable(): void {\r\n\t\tsuper._onDisable();\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tprotected _onDestroy() {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\t_cloneTo(dest: ReflectionProbe): void {\r\n\t\t//TODO\r\n\t}\r\n\r\n\r\n\r\n\t//----------------------------------------deprecated--------------------------------------------\r\n\t/**\r\n\t * @deprecated\r\n\t *  反射探针图片 */\r\n\tprivate _reflectionTexture: TextureCube;\r\n\t/**\r\n\t * @deprecated\r\n\t *  反射参数 \r\n\t */\r\n\tprivate _reflectionHDRParams: Vector4 = new Vector4();\r\n\t/**\r\n\t * @deprecated 反射探针解码格式 \r\n\t */\r\n\tprivate _reflectionDecodeFormat: TextureDecodeFormat = TextureDecodeFormat.Normal;\r\n\t/**\r\n\t * @deprecated\r\n\t *  @internal \r\n\t */\r\n\tprivate _ambientSphericalHarmonics: SphericalHarmonicsL2;\r\n\t/**\r\n\t * 三颜色\r\n\t * @deprecated\r\n\t *  @internal \r\n\t */\r\n\tprivate _ambientTripleColorSphericalHarmonics: SphericalHarmonicsL2;\r\n\t/**\r\n\t * @deprecated\r\n\t *  @internal \r\n\t */\r\n\tprivate _shCoefficients: Vector4[];\r\n\t/**\r\n\t * @deprecated\r\n\t *  @internal \r\n\t */\r\n\tprivate _ambientSkyColor: Vector3 = new Vector3();\r\n\t/**\r\n\t * @deprecated\r\n\t *  @internal \r\n\t */\r\n\tprivate _ambientEquatorColor: Vector3 = new Vector3();\r\n\t/**\r\n\t * @deprecated\r\n\t *  @internal \r\n\t */\r\n\tprivate _ambientGroundColor: Vector3 = new Vector3();\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * 设置反射贴图\r\n\t */\r\n\tget reflectionTexture() {\r\n\t\treturn this._reflectionTexture;\r\n\t}\r\n\r\n\tset reflectionTexture(value: TextureCube) {\r\n\t\tif (this._reflectionTexture == value) return;\r\n\t\tif (this._reflectionTexture) this.iblTex._removeReference();\r\n\t\tthis._reflectionTexture = value\r\n\t\tif (value) {\r\n\t\t\tthis._reflectionTexture._addReference();\r\n\t\t\tthis._updateMark = ILaya3D.Scene3D._updateMark;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t* @deprecated\r\n\t*/\r\n\tget customReflection(): TextureCube {\r\n\t\treturn this.reflectionTexture;\r\n\t}\r\n\r\n\tset customReflection(value: TextureCube) {\r\n\t\tthis.reflectionTexture = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * 反射参数\r\n\t */\r\n\tget reflectionHDRParams(): Vector4 {\r\n\t\treturn this._reflectionHDRParams;\r\n\t}\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * @internal\r\n\t */\r\n\tset reflectionHDRParams(value: Vector4) {\r\n\t\tthis._reflectionHDRParams = value;\r\n\t\tthis._updateMark = ILaya3D.Scene3D._updateMark;\r\n\t}\r\n\r\n\t/**\r\n\t * 反射立方体纹理解码格式。\r\n\t * @deprecated\r\n\t */\r\n\tget reflectionDecodingFormat(): TextureDecodeFormat {\r\n\t\treturn this._reflectionDecodeFormat;\r\n\t}\r\n\r\n\tset reflectionDecodingFormat(value: TextureDecodeFormat) {\r\n\t\tif (this._reflectionDecodeFormat != value) {\r\n\t\t\tthis._reflectionDecodeFormat = value;\r\n\t\t\tif (this._reflectionDecodeFormat == TextureDecodeFormat.RGBM)\r\n\t\t\t\tthis._reflectionHDRParams.x = 5.0;//5.0 is RGBM param\r\n\t\t\tthis._updateMark = ILaya3D.Scene3D._updateMark;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t* @deprecated\r\n\t* 球谐环境光,修改后必须重新赋值。\r\n\t* use scene.ambientSH\r\n\t*/\r\n\tget ambientSphericalHarmonics(): SphericalHarmonicsL2 {\r\n\t\treturn this._ambientSphericalHarmonics;\r\n\t}\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * use scene.ambientSH\r\n\t */\r\n\tset ambientSphericalHarmonics(value: SphericalHarmonicsL2) {\r\n\t\tvar originalSH: SphericalHarmonicsL2 = value || SphericalHarmonicsL2._default;\r\n\r\n\t\tif (!this._ambientSphericalHarmonics) {\r\n\t\t\tthis._ambientSphericalHarmonics = new SphericalHarmonicsL2();\r\n\t\t}\r\n\t\tif (this._ambientSphericalHarmonics != value) {\r\n\t\t\tvalue.cloneTo(this._ambientSphericalHarmonics);\r\n\t\t\tthis._applySHCoefficients(this._ambientSphericalHarmonics, Math.pow(this.ambientIntensity, 2.2))\r\n\t\t}\r\n\t\tif (this.ambientMode == AmbientMode.TripleColor)\r\n\t\t\tthis._applySHCoefficients(originalSH, Math.pow(this.ambientIntensity, 2.2));//Gamma to Linear,I prefer use 'Color.gammaToLinearSpace',but must same with Unity now.\r\n\t\tthis._updateMark = ILaya3D.Scene3D._updateMark;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * @internal\r\n\t */\r\n\tprivate _applySHCoefficients(originalSH: SphericalHarmonicsL2, intensity: number): void {\r\n\t\tif (!this._shCoefficients) {\r\n\t\t\tthis._shCoefficients = new Array(7);\r\n\t\t\tfor (var i: number = 0; i < 7; i++)\r\n\t\t\t\tthis._shCoefficients[i] = new Vector4();\r\n\t\t}\r\n\t\tvar optSH: Vector4[] = this._shCoefficients;\r\n\t\tfor (var i = 0; i < 3; i++) {\r\n\t\t\tvar shaderSHA: Vector4 = optSH[i];\r\n\t\t\tvar shaderSHB: Vector4 = optSH[i + 3];\r\n\t\t\tshaderSHA.setValue(originalSH.getCoefficient(i, 3) * intensity, originalSH.getCoefficient(i, 1) * intensity, originalSH.getCoefficient(i, 2) * intensity, (originalSH.getCoefficient(i, 0) - originalSH.getCoefficient(i, 6)) * intensity);\r\n\t\t\tshaderSHB.setValue(originalSH.getCoefficient(i, 4) * intensity, originalSH.getCoefficient(i, 5) * intensity, originalSH.getCoefficient(i, 6) * 3 * intensity, originalSH.getCoefficient(i, 7) * intensity);// Quadratic polynomials \r\n\t\t}\r\n\t\toptSH[6].setValue(originalSH.getCoefficient(0, 8) * intensity, originalSH.getCoefficient(1, 8) * intensity, originalSH.getCoefficient(2, 8) * intensity, 1);// Final quadratic polynomial\r\n\t}\r\n\r\n\t/**\r\n   * @deprecated\r\n   * 设置 天空， 地平线， 地面 环境光颜色\r\n   */\r\n\tpublic setGradientAmbient(skyColor: Vector3, equatorColor: Vector3, groundColor: Vector3) {\r\n\t\tthis._ambientSkyColor = skyColor;\r\n\t\tthis._ambientEquatorColor = equatorColor;\r\n\t\tthis._ambientGroundColor = groundColor;\r\n\r\n\t\tlet gradientSH = SphericalHarmonicsL2Generater.CalGradientSH(this._ambientSkyColor, this._ambientEquatorColor, this._ambientGroundColor, true);\r\n\t\tthis._ambientTripleColorSphericalHarmonics = gradientSH;\r\n\r\n\t\tif (this.ambientMode == AmbientMode.TripleColor) {\r\n\t\t\tthis._applySHCoefficients(gradientSH, 2.2);\r\n\t\t}\r\n\t\tthis._updateMark = ILaya3D.Scene3D._updateMark;\r\n\t}\r\n}\r\n\r\n\r\n","import { RenderElement } from \"./RenderElement\";\r\nimport { RenderContext3D } from \"./RenderContext3D\";\r\nimport { RenderableSprite3D } from \"../RenderableSprite3D\"\r\nimport { Transform3D } from \"../Transform3D\"\r\nimport { Material } from \"../material/Material\"\r\nimport { BoundFrustum } from \"../../math/BoundFrustum\"\r\nimport { Event } from \"../../../events/Event\"\r\nimport { Lightmap } from \"../scene/Lightmap\";\r\nimport { MeshSprite3DShaderDeclaration } from \"../../../d3/core/MeshSprite3DShaderDeclaration\";\r\nimport { TextureCube } from \"../../../resource/TextureCube\";\r\nimport { Component } from \"../../../components/Component\";\r\nimport { Sprite3D } from \"../Sprite3D\";\r\nimport { ShaderData, ShaderDataType } from \"../../../RenderEngine/RenderShader/ShaderData\";\r\nimport { TransLargeUBOUtils } from \"../TransLargeUBOUtils\";\r\nimport { LayaGL } from \"../../../layagl/LayaGL\";\r\nimport { IBaseRenderNode } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/IBaseRenderNode\";\r\nimport { SubUniformBufferData } from \"../../../RenderEngine/SubUniformBufferData\";\r\nimport { Stat } from \"../../../utils/Stat\";\r\nimport { Bounds } from \"../../math/Bounds\";\r\nimport { Volume } from \"../../component/Volume/Volume\";\r\nimport { ReflectionProbe, ReflectionProbeMode } from \"../../component/Volume/reflectionProbe/ReflectionProbe\";\r\nimport { Mesh } from \"../../resource/models/Mesh\";\r\nimport { ShaderDefine } from \"../../../RenderEngine/RenderShader/ShaderDefine\";\r\nimport { NodeFlags } from \"../../../Const\";\r\nimport { Sprite3DRenderDeclaration } from \"./Sprite3DRenderDeclaration\";\r\nimport { Shader3D } from \"../../../RenderEngine/RenderShader/Shader3D\";\r\nimport { BatchRender } from \"../../component/Volume/BatchVolume/BatchRender\";\r\nimport { ILaya3D } from \"../../../../ILaya3D\";\r\nimport { IBoundsCell } from \"../../math/IBoundsCell\";\r\nimport { Matrix4x4 } from \"../../../maths/Matrix4x4\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\nimport { Vector4 } from \"../../../maths/Vector4\";\r\nimport { VertexMesh } from \"../../../RenderEngine/RenderShader/VertexMesh\";\r\n\r\nexport enum RenderBitFlag {\r\n    RenderBitFlag_CullFlag = 0,\r\n    RenderBitFlag_Batch = 1,\r\n    RenderBitFlag_Editor = 2,\r\n    RenderBitFlag_InstanceBatch = 3,\r\n    RenderBitFlag_VertexMergeBatch = 4,\r\n\r\n}\r\n/**\r\n * <code>Render</code> 类用于渲染器的父类，抽象类不允许实例。\r\n */\r\nexport class BaseRender extends Component implements IBoundsCell {\r\n    /** @internal */\r\n    static _meshVerticeDefine: Array<ShaderDefine> = [];\r\n\r\n    /**@internal */\r\n    private static _uniqueIDCounter: number = 0;\r\n\r\n    /**@internal */\r\n    static _tempBoundBoxCorners: Vector3[] = [new Vector3(), new Vector3(), new Vector3(), new Vector3(), new Vector3(), new Vector3(), new Vector3(), new Vector3()];\r\n\r\n    /**@internal */\r\n    static _defaultLightmapScaleOffset: Vector4 = new Vector4(1.0, 1.0, 0.0, 0.0);\r\n\r\n    /**@internal */\r\n    static _transLargeUbO: TransLargeUBOUtils;\r\n\r\n    /**\r\n     * BaseRender Init\r\n     */\r\n    static __init__() {\r\n        BaseRender.shaderValueInit();\r\n        // if (Config3D._config._uniformBlock)\r\n        // \tBaseRender.initRenderableLargeUniformBlock();\r\n    }\r\n    /**\r\n      * @internal\r\n      * @param mesh \r\n      * @param out \r\n      */\r\n    static getMeshDefine(mesh: Mesh, out: Array<ShaderDefine>): number {\r\n        out.length = 0;\r\n        var define: number;\r\n        for (var i: number = 0, n: number = mesh._subMeshes.length; i < n; i++) {\r\n            var subMesh = mesh.getSubMesh(i);\r\n            var vertexElements: any[] = subMesh._vertexBuffer._vertexDeclaration._vertexElements;\r\n            for (var j: number = 0, m: number = vertexElements.length; j < m; j++) {\r\n                var vertexElement = vertexElements[j];\r\n                var name: number = vertexElement._elementUsage;\r\n                switch (name) {\r\n                    case VertexMesh.MESH_COLOR0:\r\n                        out.push(MeshSprite3DShaderDeclaration.SHADERDEFINE_COLOR);\r\n                        break\r\n                    case VertexMesh.MESH_TEXTURECOORDINATE0:\r\n                        out.push(MeshSprite3DShaderDeclaration.SHADERDEFINE_UV0);\r\n                        break;\r\n                    case VertexMesh.MESH_TEXTURECOORDINATE1:\r\n                        out.push(MeshSprite3DShaderDeclaration.SHADERDEFINE_UV1);\r\n                        break;\r\n                    case VertexMesh.MESH_TANGENT0:\r\n                        out.push(MeshSprite3DShaderDeclaration.SHADERDEFINE_TANGENT);\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        return define;\r\n    }\r\n\r\n    static changeVertexDefine(oldMesh: Mesh, mesh: Mesh, defineDatas: ShaderData) {\r\n\r\n        var lastValue: Mesh = oldMesh;\r\n        if (lastValue) {\r\n            BaseRender.getMeshDefine(lastValue, BaseRender._meshVerticeDefine);\r\n            for (var i: number = 0, n: number = BaseRender._meshVerticeDefine.length; i < n; i++)\r\n                defineDatas.removeDefine(BaseRender._meshVerticeDefine[i]);\r\n        }\r\n        if (mesh) {\r\n            BaseRender.getMeshDefine(mesh, BaseRender._meshVerticeDefine);\r\n            for (var i: number = 0, n: number = BaseRender._meshVerticeDefine.length; i < n; i++)\r\n                defineDatas.addDefine(BaseRender._meshVerticeDefine[i]);\r\n        }\r\n    }\r\n\r\n    static shaderValueInit() {\r\n        Sprite3DRenderDeclaration.SHADERDEFINE_GI_LEGACYIBL = Shader3D.getDefineByName(\"GI_LEGACYIBL\");\r\n        Sprite3DRenderDeclaration.SHADERDEFINE_GI_IBL = Shader3D.getDefineByName(\"GI_IBL\");\r\n        Sprite3DRenderDeclaration.SHADERDEFINE_IBL_RGBD = Shader3D.getDefineByName(\"IBL_RGBD\");\r\n        Sprite3DRenderDeclaration.SHADERDEFINE_SPECCUBE_BOX_PROJECTION = Shader3D.getDefineByName(\"SPECCUBE_BOX_PROJECTION\");\r\n\r\n        Sprite3DRenderDeclaration.SHADERDEFINE_VOLUMETRICGI = Shader3D.getDefineByName(\"VOLUMETRICGI\");\r\n    }\r\n\r\n    /** @internal */\r\n    private _lightmapScaleOffset: Vector4 = new Vector4(1, 1, 0, 0);\r\n    /** @internal */\r\n    private _lightmapIndex: number;\r\n    /** @internal */\r\n    private _materialsInstance: boolean[];\r\n    /** @internal */\r\n    _sharedMaterials: Material[] = [];\r\n    /** @internal TODO*/\r\n    _supportOctree: boolean = true;\r\n    /** @internal TODO*/\r\n    _scene: any;//Scene3D\r\n    /** @internal */\r\n    _sceneUpdateMark: number = -1;\r\n    /** @internal 属于相机的标记*/\r\n    _updateMark: number = -1;\r\n    /** @internal 是否需要反射探针*/\r\n    _probReflection: ReflectionProbe;\r\n    /**@internal 属于更新反射探针的标志 */\r\n    _probeReflectionUpdateMark: number = -1;\r\n    /** @internal 材质是否支持反射探针*/\r\n    _surportReflectionProbe: boolean = false;\r\n    /** @internal 设置是反射探针模式 off  simple */\r\n    _reflectionMode: number = ReflectionProbeMode.simple;\r\n    /** @internal */\r\n    _shaderValues: ShaderData;\r\n    /**@internal */\r\n    _renderElements: RenderElement[];\r\n    /** @internal */\r\n    _updateRenderType: number = -1;\r\n    /**排序矫正值。*/\r\n    sortingFudge: number;\r\n    /**@internal */\r\n    _subUniformBufferData: SubUniformBufferData;\r\n    /**@internal motion list index，not motion is -1*/\r\n    _motionIndexList: number = -1;\r\n    /**@internal 是否自定义了needRender*/\r\n    _customCull: boolean;\r\n    /**@internal 可以根据不同的值来设置*/\r\n    _ratioIgnor: number = 0.005;//TODO\r\n    /**@internal TODO*/\r\n    _LOD: number = -1;\r\n    /**@internal TODO*/\r\n    _batchRender: BatchRender;\r\n    /**@internal 如果这个值不是0,说明有一些条件使他不能加入渲染队列，例如如果是1，证明此节点被lod淘汰*/\r\n    private _volume: Volume;\r\n    /**@internal */\r\n    protected _worldParams: Vector4;//x:invertFaceFront  yzw?\r\n    /**\r\n     * DistanceVolumCull\r\n     * 根据距离和包围盒进行裁剪，越大越容易被裁\r\n     */\r\n    set ratioIgnor(value: number) {\r\n        this._ratioIgnor = value;\r\n    }\r\n\r\n    get ratioIgnor(): number {\r\n        return this._ratioIgnor;\r\n    }\r\n\r\n    get renderbitFlag() {\r\n        return this._rendernode.renderbitFlag;\r\n    }\r\n\r\n    set boundsChange(value: boolean) {\r\n        this._rendernode.boundsChange = value\r\n    }\r\n\r\n    get boundsChange(): boolean {\r\n        return this._rendernode.boundsChange;\r\n    }\r\n\r\n    /**@internal */\r\n    protected _rendernode: IBaseRenderNode;\r\n\r\n    /** @internal */\r\n    protected _bounds: Bounds;\r\n\r\n    /** @internal */\r\n    protected _baseGeometryBounds: Bounds;\r\n\r\n    /**@internal */\r\n    protected _transform: Transform3D;\r\n\r\n    /**@internal */\r\n    _distanceForSort: number;\r\n\r\n    /**@interface */\r\n    _receiveShadow: boolean;\r\n\r\n    get renderNode(): IBaseRenderNode {\r\n        return this._rendernode;\r\n    }\r\n\r\n    set distanceForSort(value: number) {\r\n        this._distanceForSort = value;\r\n        this._rendernode.distanceForSort = value;\r\n    }\r\n\r\n    get distanceForSort() {\r\n        return this._distanceForSort;\r\n    }\r\n\r\n    /**\r\n     * 设置GeometryBounds，\r\n     * 如果设置了此bounds，渲染包围盒会根据geometryBounds和transform来更新，native层会下沉\r\n     * @internal\r\n     */\r\n    set geometryBounds(value: Bounds) {\r\n        this._baseGeometryBounds = this._rendernode.geometryBounds = value;\r\n    }\r\n\r\n    get geometryBounds(): Bounds {\r\n        return this._baseGeometryBounds;\r\n    }\r\n    /**\r\n     * 获取唯一标识ID,通常用于识别。\r\n     */\r\n    get id(): number {\r\n        return this._rendernode.renderId;\r\n    }\r\n\r\n    /**\r\n     * 光照贴图的索引。\r\n     */\r\n    get lightmapIndex(): number {\r\n        return this._lightmapIndex;\r\n    }\r\n\r\n    set lightmapIndex(value: number) {\r\n        if (value != -1) {\r\n            this._scene && this._scene.on(Lightmap.ApplyLightmapEvent, this, this._applyLightMapParams);\r\n        } else {\r\n            this._scene && this._scene.off(Lightmap.ApplyLightmapEvent, this, this._applyLightMapParams);\r\n        }\r\n        this._lightmapIndex = value;\r\n        this._scene && this._applyLightMapParams();\r\n    }\r\n\r\n    /**\r\n     * 光照贴图的缩放和偏移。\r\n     */\r\n    get lightmapScaleOffset(): Vector4 {\r\n        return this._lightmapScaleOffset;\r\n    }\r\n\r\n    set lightmapScaleOffset(value: Vector4) {\r\n        if (!value)\r\n            throw \"BaseRender: lightmapScaleOffset can't be null.\";\r\n        this._lightmapScaleOffset = value;\r\n        this._setShaderValue(RenderableSprite3D.LIGHTMAPSCALEOFFSET, ShaderDataType.Vector4, value);\r\n    }\r\n\r\n    /**\r\n     * 返回第一个实例材质,第一次使用会拷贝实例对象。\r\n     */\r\n    get material(): Material {\r\n        var material: Material = this._sharedMaterials[0];\r\n        if (material && !this._materialsInstance[0]) {\r\n            var insMat: Material = this._getInstanceMaterial(material, 0);\r\n            var renderElement: RenderElement = this._renderElements[0];\r\n            (renderElement) && (renderElement.material = insMat);\r\n        }\r\n        return this._sharedMaterials[0];\r\n    }\r\n\r\n    set material(value: Material) {\r\n        this.sharedMaterial = value;\r\n        this._isSupportReflection();\r\n    }\r\n\r\n    /**\r\n     * 潜拷贝实例材质列表,第一次使用会拷贝实例对象。\r\n     */\r\n    get materials(): Material[] {\r\n        for (var i: number = 0, n: number = this._sharedMaterials.length; i < n; i++) {\r\n            if (!this._materialsInstance[i]) {\r\n                var insMat: Material = this._getInstanceMaterial(this._sharedMaterials[i], i);\r\n                var renderElement: RenderElement = this._renderElements[i];\r\n                (renderElement) && (renderElement.material = insMat);\r\n            }\r\n        }\r\n        return this._sharedMaterials.slice();\r\n    }\r\n\r\n    set materials(value: Material[]) {\r\n        this.sharedMaterials = value;\r\n        this._isSupportReflection();\r\n    }\r\n\r\n    /**\r\n     * 返回第一个材质。\r\n     */\r\n    get sharedMaterial(): Material {\r\n        return this._sharedMaterials[0];\r\n    }\r\n\r\n    set sharedMaterial(value: Material) {\r\n        var lastValue: Material = this._sharedMaterials[0];\r\n        if (lastValue !== value) {\r\n            this._sharedMaterials[0] = value;\r\n            this._materialsInstance[0] = false;\r\n            this._changeMaterialReference(lastValue, value);\r\n            var renderElement: RenderElement = this._renderElements[0];\r\n            (renderElement) && (renderElement.material = value);\r\n        }\r\n        this._isSupportReflection();\r\n    }\r\n\r\n    /**\r\n     * 浅拷贝材质列表。\r\n     */\r\n    get sharedMaterials(): Material[] {\r\n        return this._sharedMaterials.slice();\r\n    }\r\n\r\n    set sharedMaterials(value: Material[]) {\r\n        var materialsInstance: boolean[] = this._materialsInstance;\r\n        var sharedMats: Material[] = this._sharedMaterials;\r\n\r\n        for (var i: number = 0, n: number = sharedMats.length; i < n; i++) {\r\n            var lastMat: Material = sharedMats[i];\r\n            (lastMat) && (lastMat._removeReference());\r\n        }\r\n\r\n        if (value) {\r\n            var count: number = value.length;\r\n            materialsInstance.length = count;\r\n            sharedMats.length = count;\r\n            for (i = 0; i < count; i++) {\r\n                lastMat = sharedMats[i];\r\n                var mat: Material = value[i];\r\n                if (lastMat !== mat) {\r\n                    materialsInstance[i] = false;\r\n                    var renderElement: RenderElement = this._renderElements[i];\r\n                    (renderElement) && (renderElement.material = mat);\r\n                }\r\n                if (mat) {\r\n                    mat._addReference();\r\n                }\r\n                sharedMats[i] = mat;\r\n            }\r\n        } else {\r\n            throw new Error(\"BaseRender: shadredMaterials value can't be null.\");\r\n        }\r\n        this._isSupportReflection();\r\n    }\r\n\r\n    /**\r\n     * 包围盒,只读,不允许修改其值。\r\n     */\r\n    get bounds(): Bounds {\r\n        if (this.boundsChange) {\r\n            this._calculateBoundingBox();\r\n            this.boundsChange = false;\r\n        }\r\n        return this._bounds as Bounds;\r\n    }\r\n\r\n    set receiveShadow(value: boolean) {\r\n        if (this.renderNode.receiveShadow !== value) {\r\n            this.renderNode.receiveShadow = value;\r\n            this._receiveShadow = value;\r\n            if (value)\r\n                this._shaderValues.addDefine(RenderableSprite3D.SHADERDEFINE_RECEIVE_SHADOW);\r\n            else\r\n                this._shaderValues.removeDefine(RenderableSprite3D.SHADERDEFINE_RECEIVE_SHADOW);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 是否接收阴影属性\r\n     */\r\n    get receiveShadow(): boolean {\r\n        return this.renderNode.receiveShadow;\r\n    }\r\n\r\n    /**\r\n     * 是否产生阴影。\r\n     */\r\n    get castShadow(): boolean {\r\n        return this.renderNode.castShadow;\r\n    }\r\n\r\n    set castShadow(value: boolean) {\r\n        this.renderNode.castShadow = value;\r\n    }\r\n\r\n    /**\r\n     * 反射模式\r\n     */\r\n    set reflectionMode(value: ReflectionProbeMode) {\r\n        this._reflectionMode = value;\r\n    }\r\n\r\n    get reflectionMode(): ReflectionProbeMode {\r\n        return this._reflectionMode;\r\n    }\r\n\r\n\r\n\r\n    set volume(value: Volume) {\r\n        if (!value) {//value = null,\r\n            if (this._volume) {\r\n                this._volume._removeRenderNode && this._volume._removeRenderNode(this);\r\n                this._volume = null;\r\n            }\r\n            return;\r\n        }\r\n        if (this._volume != value) {\r\n            value._addRenderNode && value._addRenderNode(this);\r\n            this._volume = value;\r\n            return;\r\n        } else {\r\n            value._motionInVolume && value._motionInVolume(this);\r\n        }\r\n    }\r\n\r\n    get volume(): Volume {\r\n        return this._volume;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * 设置反射球\r\n     */\r\n    set probReflection(voluemProbe: ReflectionProbe) {\r\n        if (this._probReflection == voluemProbe)\r\n            return;\r\n        this._probeReflectionUpdateMark = -1;\r\n        this._probReflection = voluemProbe;\r\n        if (this._reflectionMode == ReflectionProbeMode.off) {\r\n            this._shaderValues.removeDefine(Sprite3DRenderDeclaration.SHADERDEFINE_SPECCUBE_BOX_PROJECTION);\r\n            this._shaderValues.addDefine(Sprite3DRenderDeclaration.SHADERDEFINE_GI_IBL);\r\n            this._setShaderValue(RenderableSprite3D.IBLTEX, ShaderDataType.TextureCube, TextureCube.blackTexture);\r\n            this._setShaderValue(RenderableSprite3D.IBLROUGHNESSLEVEL, ShaderDataType.Float, 0);\r\n        } else {\r\n            this._probReflection.applyReflectionShaderData(this._shaderValues);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 创建一个新的 <code>BaseRender</code> 实例。\r\n     */\r\n    constructor() {\r\n        super();\r\n        this._rendernode = this._createBaseRenderNode();\r\n        this._rendernode.owner = this;\r\n        this._rendernode.renderId = ++BaseRender._uniqueIDCounter;\r\n        this._bounds = this._rendernode.bounds = new Bounds(Vector3.ZERO, Vector3.ZERO);\r\n        this._renderElements = [];\r\n        this._enabled = true;\r\n        this._materialsInstance = [];\r\n        this._shaderValues = LayaGL.renderOBJCreate.createShaderData(null);\r\n        this.lightmapIndex = -1;\r\n        this.receiveShadow = false;\r\n        this.sortingFudge = 0.0;\r\n        this._customCull = this._needRender !== BaseRender.prototype._needRender;\r\n        this.runInEditor = true;\r\n        this.boundsChange = true;\r\n        this._rendernode.renderbitFlag = 0;\r\n        this._rendernode.staticMask = 1;\r\n        this._worldParams = new Vector4(1.0, 0.0, 0.0, 0.0);\r\n    }\r\n\r\n    protected _createBaseRenderNode(): IBaseRenderNode {\r\n        return LayaGL.renderOBJCreate.createBaseRenderNode();\r\n    }\r\n\r\n    private _changeLayer(layer: number) {\r\n        this._rendernode.layer = layer;\r\n    }\r\n\r\n    private _changeStaticMask(staticmask: number) {\r\n        this._rendernode.staticMask = staticmask;\r\n    }\r\n\r\n    protected _onAdded(): void {\r\n        this._transform = (this.owner as Sprite3D).transform;\r\n        (this.owner as Sprite3D)._isRenderNode++;\r\n        this.setRenderbitFlag(RenderBitFlag.RenderBitFlag_Editor, this.owner._getBit(NodeFlags.HIDE_BY_EDITOR));\r\n        this._rendernode.transform = this._transform;\r\n        this._changeLayer((this.owner as Sprite3D).layer);\r\n        this._changeStaticMask((this.owner as Sprite3D)._isStatic);\r\n    }\r\n\r\n    protected _onEnable(): void {\r\n        super._onEnable();\r\n        if (this.owner) {\r\n            (this.owner as Sprite3D).transform.on(Event.TRANSFORM_CHANGED, this, this._onWorldMatNeedChange);//如果为合并BaseRender,owner可能为空\r\n            (this.owner as Sprite3D).on(Event.LAYERCHANGE, this, this._changeLayer);\r\n            (this.owner as Sprite3D).on(Event.staticMask, this, this._changeStaticMask);\r\n            this._changeLayer((this.owner as Sprite3D).layer);\r\n            this._changeStaticMask((this.owner as Sprite3D)._isStatic);\r\n        }\r\n        this.owner.scene._addRenderObject(this);\r\n        this._setBelongScene(this.owner.scene);\r\n    }\r\n\r\n    protected _onDisable(): void {\r\n        if (this.owner) {\r\n            (this.owner as Sprite3D).transform.off(Event.TRANSFORM_CHANGED, this, this._onWorldMatNeedChange);//如果为合并BaseRender,owner可能为空\r\n            (this.owner as Sprite3D).off(Event.LAYERCHANGE, this, this._changeLayer);\r\n            (this.owner as Sprite3D).off(Event.staticMask, this, this._changeStaticMask);\r\n        }\r\n        this.owner.scene._removeRenderObject(this);\r\n        this._setUnBelongScene();\r\n        this.volume = null;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _changeMaterialReference(lastValue: Material, value: Material): void {\r\n        (lastValue) && (lastValue._removeReference());\r\n        value._addReference();//TODO:value可以为空\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _getInstanceMaterial(material: Material, index: number): Material {\r\n        var insMat: Material = material.clone();//深拷贝\r\n        insMat.name = insMat.name + \"(Instance)\";\r\n        this._materialsInstance[index] = true;\r\n        this._changeMaterialReference(this._sharedMaterials[index], insMat);\r\n        this._sharedMaterials[index] = insMat;\r\n        return insMat;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _isSupportReflection() {\r\n        let pre = this._surportReflectionProbe;\r\n        this._surportReflectionProbe = false;\r\n        var sharedMats: Material[] = this._sharedMaterials;\r\n        for (var i: number = 0, n: number = sharedMats.length; i < n; i++) {\r\n            var mat: Material = sharedMats[i];\r\n            this._surportReflectionProbe ||= (this._surportReflectionProbe || (mat && mat._shader._supportReflectionProbe));//TODO：最后一个判断是否合理\r\n        }\r\n        if (!pre && this._surportReflectionProbe)//如果变成支持Reflection\r\n            this._addReflectionProbeUpdate();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * BaseRender motion\r\n     */\r\n    protected _onWorldMatNeedChange(flag: number): void {\r\n        this.boundsChange = true;\r\n        this._addReflectionProbeUpdate();\r\n        this._subUniformBufferData && (this._subUniformBufferData._needUpdate = true);\r\n        this._batchRender && this._batchRender._updateOneRender(this);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _calculateBoundingBox(): void {\r\n        throw (\"BaseRender: must override it.\");\r\n    }\r\n\r\n\r\n    /**\r\n     * 设置渲染flag,每一位都代表不同的淘汰原因，1表示lod淘汰\r\n     */\r\n    setRenderbitFlag(flag: number, pass: boolean) {\r\n        if (pass)\r\n            this._rendernode.renderbitFlag |= (1 << flag);\r\n        else\r\n            this._rendernode.renderbitFlag &= ~(1 << flag);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _setShaderValue(index: number, shaderdataType: ShaderDataType, value: any) {\r\n        this._shaderValues.setShaderData(index, shaderdataType, value);\r\n    }\r\n\r\n    /**\r\n     * 渲染器添加到更新反射探针队列\r\n     * @internal\r\n     */\r\n    _addReflectionProbeUpdate() {\r\n        //TODO目前暂时不支持混合以及与天空盒模式，只支持simple和off\r\n        this._scene && this._scene._volumeManager.addMotionObject(this);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * 全局贴图\r\n     */\r\n    _applyLightMapParams(): void {\r\n        if (!this._scene) return;\r\n        var lightMaps: Lightmap[] = this._scene.lightmaps;\r\n        var shaderValues: ShaderData = this._shaderValues;\r\n        var lightmapIndex: number = this._lightmapIndex;\r\n        if (lightmapIndex >= 0 && lightmapIndex < lightMaps.length) {\r\n            var lightMap: Lightmap = lightMaps[lightmapIndex];\r\n            shaderValues.setTexture(RenderableSprite3D.LIGHTMAP, lightMap.lightmapColor);\r\n            shaderValues.addDefine(RenderableSprite3D.SAHDERDEFINE_LIGHTMAP);\r\n            if (lightMap.lightmapDirection) {\r\n                shaderValues.setTexture(RenderableSprite3D.LIGHTMAP_DIRECTION, lightMap.lightmapDirection);\r\n                shaderValues.addDefine(RenderableSprite3D.SHADERDEFINE_LIGHTMAP_DIRECTIONAL);\r\n            }\r\n            else {\r\n                shaderValues.removeDefine(RenderableSprite3D.SHADERDEFINE_LIGHTMAP_DIRECTIONAL);\r\n            }\r\n        } else {\r\n            shaderValues.removeDefine(RenderableSprite3D.SAHDERDEFINE_LIGHTMAP);\r\n            shaderValues.removeDefine(RenderableSprite3D.SHADERDEFINE_LIGHTMAP_DIRECTIONAL);\r\n        }\r\n    }\r\n\r\n    _applyReflection() {\r\n        if (!this._probReflection) return;\r\n        if (this._probReflection._updateMark != this._probeReflectionUpdateMark) {\r\n            this._probeReflectionUpdateMark = this._probReflection._updateMark;\r\n            this._probReflection.applyReflectionShaderData(this._shaderValues);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _setBelongScene(scene: any): void {\r\n        this._scene = scene;\r\n        this._onWorldMatNeedChange(1);\r\n        this._isSupportReflection();\r\n        this._batchRender && this._batchRender._batchOneRender(this);\r\n        this.lightmapIndex = this.lightmapIndex;\r\n        Stat.renderNode++;\r\n        if (false) {\r\n            this._subUniformBufferData = BaseRender._transLargeUbO.create();\r\n            this._subUniformBufferData.setMatrix(\"u_WorldMat\", Matrix4x4.DEFAULT);\r\n            this._addReflectionProbeUpdate();\r\n            this.probReflection = this._probReflection;\r\n            this.lightmapScaleOffset = this._lightmapScaleOffset;\r\n            this._subUniformBufferData._needUpdate = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _setUnBelongScene() {\r\n        Stat.renderNode--;\r\n        this._scene._volumeManager.removeMotionObject(this);\r\n        let batch = this._batchRender;\r\n        this._batchRender && this._batchRender._removeOneRender(this);\r\n        this._batchRender = batch;\r\n        if (false) {\r\n            this._subUniformBufferData && BaseRender._transLargeUbO.recover(this._subUniformBufferData);\r\n            this._subUniformBufferData = null;\r\n        }\r\n        this._scene = null;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @param boundFrustum 裁剪。\r\n     */\r\n    _needRender(boundFrustum: BoundFrustum, context: RenderContext3D): boolean {\r\n        if (boundFrustum)\r\n            return boundFrustum.intersects(this.bounds);\r\n        else\r\n            return true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * 裁剪失败后，如果需要可以调用此函数更新数据\r\n     */\r\n    _CullOut(): void {\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _renderUpdate(context: RenderContext3D, transform: Transform3D): void {\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _renderUpdateWithCamera(context: RenderContext3D, transform: Transform3D): void {\r\n    }\r\n\r\n    protected _onDestroy() {\r\n        if (this.owner as Sprite3D)\r\n            (this.owner as Sprite3D)._isRenderNode--;\r\n        (this._motionIndexList !== -1) && (this._scene._sceneRenderManager.removeMotionObject(this));\r\n        (this._scene) && this._scene.sceneRenderableManager.removeRenderObject(this);\r\n        var i: number = 0, n: number = 0;\r\n        for (i = 0, n = this._renderElements.length; i < n; i++)\r\n            this._renderElements[i].destroy();\r\n        for (i = 0, n = this._sharedMaterials.length; i < n; i++) {\r\n            let m = this._sharedMaterials[i];\r\n            m && !m.destroyed && m._removeReference();\r\n        }\r\n        this._renderElements = null;\r\n        this._sharedMaterials = null;\r\n        this._bounds = null;\r\n        this._lightmapScaleOffset = null;\r\n        this._lightmapIndex = -1;\r\n        this._scene = null;\r\n        this._rendernode = null;\r\n        this._shaderValues.destroy();\r\n        this._shaderValues = null;\r\n        this._transform = null;\r\n        this._batchRender = null;\r\n        if (this._subUniformBufferData) {\r\n            BaseRender._transLargeUbO.recover(this._subUniformBufferData);\r\n            this._subUniformBufferData = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @override\r\n     * @param dest \r\n     */\r\n    _cloneTo(dest: Component): void {\r\n        super._cloneTo(dest);\r\n        let render = (dest as BaseRender);\r\n        render.receiveShadow = this.receiveShadow;\r\n        render.sharedMaterials = this.sharedMaterials;\r\n        render.reflectionMode = this.reflectionMode;\r\n        render.castShadow = this.castShadow;\r\n        render.sortingFudge = this.sortingFudge;\r\n    }\r\n}\r\n\r\n","/**\r\n * 阴影模式。\r\n */\r\nexport enum ShadowMode {\r\n    /**不产生阴影。*/\r\n    None,\r\n    /**硬阴影，对性能要求较低。*/\r\n    Hard,\r\n    /**低强度软阴影，对性能要求一般。*/\r\n    SoftLow,\r\n    /**高强度软阴影,对性能要求较高。*/\r\n    SoftHigh\r\n}","/**\r\n * 阴影得级联模式。\r\n */\r\nexport enum ShadowCascadesMode {\r\n    /** 无级联。 */\r\n    NoCascades,\r\n    /** 二级级联。 */\r\n    TwoCascades,\r\n    /** 四级级联。 */\r\n    FourCascades,\r\n}","import { Config3D } from \"../../../../Config3D\";\r\nimport { Scene3D } from \"../scene/Scene3D\";\r\nimport { Sprite3D } from \"../Sprite3D\";\r\nimport { ShadowMode } from \"./ShadowMode\";\r\nimport { Component } from \"../../../components/Component\";\r\nimport { Color } from \"../../../maths/Color\";\r\nimport { Matrix4x4 } from \"../../../maths/Matrix4x4\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\n\r\n\r\n/**\r\n * @internal\r\n */\r\nexport enum LightType {\r\n    Directional,\r\n    Spot,\r\n    Point,\r\n    Area\r\n}\r\n\r\nexport enum LightMode {\r\n    mix,\r\n    realTime,//\r\n    bakeOnly\r\n}\r\n\r\n/**\r\n * <code>LightSprite</code> 类用于创建灯光的父类。\r\n */\r\nexport class Light extends Component {\r\n\r\n    /** @internal */\r\n    protected _shadowMode: ShadowMode = ShadowMode.None;\r\n\r\n    /** @internal */\r\n    _isAlternate: boolean = false;\r\n    /** @internal */\r\n    _intensityColor: Vector3;\r\n    /** @internal */\r\n    _intensity: number;\r\n    /** @internal */\r\n    _shadowResolution: number = 2048;\r\n    /** @internal */\r\n    _shadowDistance: number = 50.0;\r\n    /** @internal */\r\n    _shadowDepthBias: number = 1.0;\r\n    /** @internal */\r\n    _shadowNormalBias: number = 1.0;\r\n    /** @internal */\r\n    _shadowNearPlane: number = 0.1;\r\n    /** @internal */\r\n    _shadowStrength: number = 1.0;\r\n    /** @internal */\r\n    _lightmapBakedType: LightMode;\r\n    /** @internal */\r\n    _lightType: LightType;\r\n    /** @internal 因为scale会影响裁剪阴影*/\r\n    _lightWoldMatrix: Matrix4x4 = new Matrix4x4();\r\n\r\n    /** 灯光颜色。 */\r\n    color: Color;\r\n\r\n    /**\r\n     * 灯光强度。\r\n     */\r\n    get intensity(): number {\r\n        return this._intensity;\r\n    }\r\n\r\n    set intensity(value: number) {\r\n        this._intensity = value;\r\n    }\r\n\r\n    /**\r\n     * 阴影模式。\r\n     */\r\n    get shadowMode(): ShadowMode {\r\n        return this._shadowMode;\r\n    }\r\n\r\n    set shadowMode(value: ShadowMode) {\r\n        this._shadowMode = value\r\n    }\r\n\r\n    /**\r\n     * 最大阴影距离。\r\n     */\r\n    get shadowDistance(): number {\r\n        return this._shadowDistance;\r\n    }\r\n\r\n    set shadowDistance(value: number) {\r\n        this._shadowDistance = value;\r\n    }\r\n\r\n    /**\r\n     * 阴影贴图分辨率。\r\n     */\r\n    get shadowResolution(): number {\r\n        return this._shadowResolution;\r\n    }\r\n\r\n    set shadowResolution(value: number) {\r\n        this._shadowResolution = value;\r\n    }\r\n\r\n    /**\r\n     * 阴影深度偏差。\r\n     */\r\n    get shadowDepthBias(): number {\r\n        return this._shadowDepthBias;\r\n    }\r\n\r\n    set shadowDepthBias(value: number) {\r\n        this._shadowDepthBias = value;\r\n    }\r\n\r\n    /**\r\n     * 阴影法线偏差。\r\n     */\r\n    get shadowNormalBias(): number {\r\n        return this._shadowNormalBias;\r\n    }\r\n\r\n    set shadowNormalBias(value: number) {\r\n        this._shadowNormalBias = value;\r\n    }\r\n\r\n    /**\r\n     * 阴影强度。\r\n     */\r\n    get shadowStrength(): number {\r\n        return this._shadowStrength;\r\n    }\r\n\r\n    set shadowStrength(value: number) {\r\n        this._shadowStrength = value;\r\n    }\r\n\r\n    /**\r\n     * 阴影视锥的近裁面。\r\n     */\r\n    get shadowNearPlane(): number {\r\n        return this._shadowNearPlane;\r\n    }\r\n\r\n    set shadowNearPlane(value: number) {\r\n        this._shadowNearPlane = value;\r\n    }\r\n\r\n    /**\r\n     * 灯光烘培类型。\r\n     */\r\n    get lightmapBakedType(): LightMode {\r\n        return this._lightmapBakedType;\r\n    }\r\n\r\n    set lightmapBakedType(value: LightMode) {\r\n        let premode = this._lightmapBakedType;\r\n        if (this._lightmapBakedType !== value) {\r\n            this._lightmapBakedType = value;\r\n            if (this._enabled) {\r\n                if (value == LightMode.bakeOnly)\r\n                    this._removeFromScene();\r\n                else\r\n                    if (premode == LightMode.bakeOnly)\r\n                        this._addToScene();\r\n            }\r\n        }\r\n    }\r\n\r\n    get lightWorldMatrix(): Matrix4x4 {\r\n        var position = (this.owner as Sprite3D).transform.position;\r\n        var quaterian = (this.owner as Sprite3D).transform.rotation;\r\n        Matrix4x4.createAffineTransformation(position, quaterian, Vector3.ONE, this._lightWoldMatrix);\r\n        return this._lightWoldMatrix;\r\n    }\r\n\r\n    /**\r\n     * 创建一个 <code>LightSprite</code> 实例。\r\n     */\r\n    constructor() {\r\n        super();\r\n\r\n        this.runInEditor = true;\r\n        this._intensity = 1.0;\r\n        this._intensityColor = new Vector3();\r\n        this.color = new Color(1.0, 1.0, 1.0, 1.0);\r\n        this._lightmapBakedType = LightMode.realTime;\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     * @internal\r\n     */\r\n    _parse(data: any, spriteMap: any): void {\r\n        super._parse(data, spriteMap);\r\n        var colorData: any[] = data.color;\r\n        this.color.r = colorData[0];\r\n        this.color.g = colorData[1];\r\n        this.color.b = colorData[2];\r\n        this.intensity = data.intensity;\r\n        this.lightmapBakedType = data.lightmapBakedType;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     * @internal\r\n     */\r\n    _cloneTo(dest: Component) {\r\n        super._cloneTo(dest);\r\n        var light = <Light>dest;\r\n        light.color = this.color.clone();\r\n        light.intensity = this.intensity;\r\n        light.lightmapBakedType = this.lightmapBakedType;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _addToScene(): void {\r\n        var scene: Scene3D = <Scene3D>this.owner.scene;\r\n        var maxLightCount: number = Config3D.maxLightCount;\r\n        if (scene._lightCount < maxLightCount) {\r\n            scene._lightCount++;\r\n            this._addToLightQueue();\r\n            this._isAlternate = false;\r\n        }\r\n        else {\r\n            scene._alternateLights.add(this);\r\n            this._isAlternate = true;\r\n            console.warn(\"LightSprite:light count has large than maxLightCount,the latest added light will be ignore.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _removeFromScene(): void {\r\n        var scene: Scene3D = <Scene3D>this.owner._scene;\r\n        if (!scene)\r\n            return;\r\n        if (this._isAlternate) {\r\n            scene._alternateLights.remove(this);\r\n        }\r\n        else {\r\n            scene._lightCount--;\r\n            this._removeFromLightQueue();\r\n            if (scene._alternateLights._length > 0) {\r\n                var alternateLight = scene._alternateLights.shift();\r\n                alternateLight!._addToLightQueue();\r\n                alternateLight!._isAlternate = false;\r\n                scene._lightCount++;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _addToLightQueue(): void {\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _removeFromLightQueue(): void {\r\n    }\r\n\r\n    protected _onEnable(): void {\r\n        (this.lightmapBakedType !== LightMode.bakeOnly) && (this._addToScene());\r\n    }\r\n\r\n    protected _onDisable(): void {\r\n        (this.lightmapBakedType !== LightMode.bakeOnly) && (this._removeFromScene());\r\n    }\r\n\r\n    protected _onDestroy() {\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _create(): Component {\r\n        return new Light();\r\n    }\r\n}\r\n\r\n","import { LayaGL } from \"../../../layagl/LayaGL\";\r\nimport { BoundFrustum, FrustumCorner } from \"../../math/BoundFrustum\";\r\nimport { BoundSphere } from \"../../math/BoundSphere\";\r\nimport { Plane } from \"../../math/Plane\";\r\nimport { ShadowSliceData, ShadowSpotData } from \"../../shadowMap/ShadowSliceData\";\r\nimport { Utils3D } from \"../../utils/Utils3D\";\r\nimport { ShadowCascadesMode } from \"./ShadowCascadesMode\";\r\nimport { ShadowMode } from \"./ShadowMode\";\r\nimport { Light, LightType } from \"./Light\";\r\nimport { SpotLightCom } from \"./SpotLightCom\";\r\nimport { Sprite3D } from \"../Sprite3D\";\r\nimport { DirectionLightCom } from \"./DirectionLightCom\";\r\nimport { FilterMode } from \"../../../RenderEngine/RenderEnum/FilterMode\";\r\nimport { WrapMode } from \"../../../RenderEngine/RenderEnum/WrapMode\";\r\nimport { RenderCapable } from \"../../../RenderEngine/RenderEnum/RenderCapable\";\r\nimport { TextureCompareMode } from \"../../../RenderEngine/RenderEnum/TextureCompareMode\";\r\nimport { MathUtils3D } from \"../../../maths/MathUtils3D\";\r\nimport { Matrix4x4 } from \"../../../maths/Matrix4x4\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\nimport { Vector4 } from \"../../../maths/Vector4\";\r\nimport { RenderTexture } from \"../../../resource/RenderTexture\";\r\nimport { RenderTargetFormat } from \"../../../RenderEngine/RenderEnum/RenderTargetFormat\";\r\n\r\n/**\r\n * @internal\r\n */\r\nenum FrustumFace {\r\n    Near = 0,\r\n    Far = 1,\r\n    Left = 2,\r\n    Right = 3,\r\n    Bottom = 4,\r\n    Top = 5,\r\n}\r\n\r\nexport enum ShadowMapFormat {\r\n    bit16,\r\n    bit24_8,\r\n    bit32\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class ShadowUtils {\r\n    /** @internal */\r\n    private static _tempMatrix0: Matrix4x4 = new Matrix4x4()\r\n\r\n\r\n    /** @internal */\r\n    private static _shadowMapScaleOffsetMatrix: Matrix4x4 = new Matrix4x4(\r\n        0.5, 0.0, 0.0, 0.0,\r\n        0.0, 0.5, 0.0, 0.0,\r\n        0.0, 0.0, 1.0, 0.0,\r\n        0.5, 0.5, 0.0, 1.0,\r\n    );\r\n\r\n    /** @internal */\r\n    private static _frustumCorners: Vector3[] = [new Vector3(), new Vector3(), new Vector3(), new Vector3(), new Vector3(), new Vector3(), new Vector3(), new Vector3()];\r\n    /** @internal */\r\n    private static _adjustNearPlane: Plane;\r\n    /** @internal */\r\n    private static _adjustFarPlane: Plane;\r\n    /** @internal */\r\n    private static _backPlaneFaces: FrustumFace[] = new Array(5);\r\n    /** @internal */\r\n    private static _edgePlanePoint2: Vector3 = new Vector3();\r\n\r\n    /** @internal */\r\n    private static _frustumPlaneNeighbors: FrustumFace[][] = [\r\n        [FrustumFace.Left, FrustumFace.Right, FrustumFace.Top, FrustumFace.Bottom],// near\r\n        [FrustumFace.Left, FrustumFace.Right, FrustumFace.Top, FrustumFace.Bottom],// far\r\n        [FrustumFace.Near, FrustumFace.Far, FrustumFace.Top, FrustumFace.Bottom],// left\r\n        [FrustumFace.Near, FrustumFace.Far, FrustumFace.Top, FrustumFace.Bottom],// right\r\n        [FrustumFace.Near, FrustumFace.Far, FrustumFace.Left, FrustumFace.Right],// bottom\r\n        [FrustumFace.Near, FrustumFace.Far, FrustumFace.Left, FrustumFace.Right]];// top\r\n\r\n    /** @internal */\r\n    private static _frustumTwoPlaneCorners: FrustumCorner[][][] = [\r\n        [[FrustumCorner.unknown, FrustumCorner.unknown]/* near */, [FrustumCorner.unknown, FrustumCorner.unknown]/* far */, [FrustumCorner.nearBottomLeft, FrustumCorner.nearTopLeft]/* left */, [FrustumCorner.nearTopRight, FrustumCorner.nearBottomRight]/* right */, [FrustumCorner.nearBottomRight, FrustumCorner.nearBottomLeft]/* bottom */, [FrustumCorner.nearTopLeft, FrustumCorner.nearTopRight]/* top */],// near\r\n        [[FrustumCorner.unknown, FrustumCorner.unknown]/* near */, [FrustumCorner.unknown, FrustumCorner.unknown]/* far */, [FrustumCorner.FarTopLeft, FrustumCorner.FarBottomLeft]/* left */, [FrustumCorner.FarBottomRight, FrustumCorner.FarTopRight]/* right */, [FrustumCorner.FarBottomLeft, FrustumCorner.FarBottomRight]/* bottom */, [FrustumCorner.FarTopRight, FrustumCorner.FarTopLeft]/* top */],// far\r\n        [[FrustumCorner.nearTopLeft, FrustumCorner.nearBottomLeft]/* near */, [FrustumCorner.FarBottomLeft, FrustumCorner.FarTopLeft]/* far */, [FrustumCorner.unknown, FrustumCorner.unknown]/* left */, [FrustumCorner.unknown, FrustumCorner.unknown]/* right */, [FrustumCorner.nearBottomLeft, FrustumCorner.FarBottomLeft]/* bottom */, [FrustumCorner.FarTopLeft, FrustumCorner.nearTopLeft]/* top */],// left\r\n        [[FrustumCorner.nearBottomRight, FrustumCorner.nearTopRight]/* near */, [FrustumCorner.FarTopRight, FrustumCorner.FarBottomRight]/* far */, [FrustumCorner.unknown, FrustumCorner.unknown]/* left */, [FrustumCorner.unknown, FrustumCorner.unknown]/* right */, [FrustumCorner.FarBottomRight, FrustumCorner.nearBottomRight]/* bottom */, [FrustumCorner.nearTopRight, FrustumCorner.FarTopRight]/* top */],// right\r\n        [[FrustumCorner.nearBottomLeft, FrustumCorner.nearBottomRight]/* near */, [FrustumCorner.FarBottomRight, FrustumCorner.FarBottomLeft]/* far */, [FrustumCorner.FarBottomLeft, FrustumCorner.nearBottomLeft]/* left */, [FrustumCorner.nearBottomRight, FrustumCorner.FarBottomRight]/* right */, [FrustumCorner.unknown, FrustumCorner.unknown]/* bottom */, [FrustumCorner.unknown, FrustumCorner.unknown]/* top */],// bottom\r\n        [[FrustumCorner.nearTopRight, FrustumCorner.nearTopLeft]/* near */, [FrustumCorner.FarTopLeft, FrustumCorner.FarTopRight]/* far */, [FrustumCorner.nearTopLeft, FrustumCorner.FarTopLeft]/* left */, [FrustumCorner.FarTopRight, FrustumCorner.nearTopRight], [FrustumCorner.unknown/* right */, FrustumCorner.unknown]/* bottom */, [FrustumCorner.unknown, FrustumCorner.unknown]/* top */]// top\r\n    ];\r\n\r\n    /** @internal */\r\n    static readonly atlasBorderSize: number = 4.0;//now max shadow sample tent is 5x5,atlas borderSize at leate 3=ceil(2.5),and +1 pixle is for global border for no cascade mode.\r\n\r\n    static init() {\r\n        ShadowUtils._adjustNearPlane = new Plane(new Vector3(), 0);\r\n        ShadowUtils._adjustFarPlane = new Plane(new Vector3(), 0);\r\n    }\r\n\r\n    /**\r\n    * @internal\r\n    */\r\n    static supportShadow(): boolean {\r\n        return LayaGL.renderEngine.getCapable(RenderCapable.RenderTextureFormat_Depth);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    static getTemporaryShadowTexture(witdh: number, height: number, shadowFormat: ShadowMapFormat): RenderTexture {\r\n        let depthFormat = RenderTargetFormat.DEPTH_16;\r\n        switch (shadowFormat) {\r\n            case ShadowMapFormat.bit16:\r\n                depthFormat = RenderTargetFormat.DEPTH_16;\r\n                break;\r\n            case ShadowMapFormat.bit24_8:\r\n                depthFormat = RenderTargetFormat.DEPTHSTENCIL_24_8;\r\n                break;\r\n            case ShadowMapFormat.bit32:\r\n                depthFormat = RenderTargetFormat.DEPTH_32;\r\n                break;\r\n        }\r\n\r\n        var shadowMap: RenderTexture = RenderTexture.createFromPool(witdh, height, depthFormat, RenderTargetFormat.None, false, 1);\r\n        shadowMap.compareMode = TextureCompareMode.LESS;\r\n        shadowMap.filterMode = FilterMode.Bilinear;\r\n        shadowMap.wrapModeU = WrapMode.Clamp;\r\n        shadowMap.wrapModeV = WrapMode.Clamp;\r\n        return shadowMap;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    static getShadowBias(light: Light, shadowProjectionMatrix: Matrix4x4, shadowResolution: number, out: Vector4): void {\r\n        var frustumSize: number;\r\n        if (light._lightType == LightType.Directional) {\r\n            // Frustum size is guaranteed to be a cube as we wrap shadow frustum around a sphere\r\n            // elements[0] = 2.0 / (right - left)\r\n            frustumSize = 2.0 / shadowProjectionMatrix.elements[0];\r\n        }\r\n        else if (light._lightType == LightType.Spot) {\r\n            // For perspective projections, shadow texel size varies with depth\r\n            // It will only work well if done in receiver side in the pixel shader. Currently We\r\n            // do bias on caster side in vertex shader. When we add shader quality tiers we can properly\r\n            // handle this. For now, as a poor approximation we do a constant bias and compute the size of\r\n            // the frustum as if it was orthogonal considering the size at mid point between near and far planes.\r\n            // Depending on how big the light range is, it will be good enough with some tweaks in bias\r\n            frustumSize = Math.tan((<SpotLightCom>light).spotAngle * 0.5 * MathUtils3D.Deg2Rad) * (<SpotLightCom>light).range;\r\n        }\r\n        else {\r\n            console.warn(\"ShadowUtils:Only spot and directional shadow casters are supported now.\");\r\n            frustumSize = 0.0;\r\n        }\r\n\r\n        // depth and normal bias scale is in shadowmap texel size in world space\r\n        var texelSize: number = frustumSize / shadowResolution;\r\n        var depthBias: number = -light._shadowDepthBias * texelSize;\r\n        var normalBias: number = -light._shadowNormalBias * texelSize;\r\n\r\n        if (light.shadowMode == ShadowMode.SoftHigh) {\r\n            // TODO: depth and normal bias assume sample is no more than 1 texel away from shadowmap\r\n            // This is not true with PCF. Ideally we need to do either\r\n            // cone base bias (based on distance to center sample)\r\n            // or receiver place bias based on derivatives.\r\n            // For now we scale it by the PCF kernel size (5x5)\r\n            const kernelRadius: number = 2.5;\r\n            depthBias *= kernelRadius;\r\n            normalBias *= kernelRadius;\r\n        }\r\n        out.setValue(depthBias, normalBias, 0.0, 0.0);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    static getCameraFrustumPlanes(cameraViewProjectMatrix: Matrix4x4, frustumPlanes: Plane[]): void {\r\n        BoundFrustum.getPlanesFromMatrix(cameraViewProjectMatrix, frustumPlanes[FrustumFace.Near], frustumPlanes[FrustumFace.Far], frustumPlanes[FrustumFace.Left], frustumPlanes[FrustumFace.Right], frustumPlanes[FrustumFace.Top], frustumPlanes[FrustumFace.Bottom]);\r\n    }\r\n\r\n    /**\r\n    * @internal\r\n    */\r\n    static getFarWithRadius(radius: number, denominator: number): number {\r\n        // use the frustum side as the radius and get the far distance form camera.\r\n        // var tFov: number = Math.tan(fov * 0.5);// get this the equation using Pythagorean\r\n        // return Math.sqrt(radius * radius / (1.0 + tFov * tFov * (aspectRatio * aspectRatio + 1.0)));\r\n        return Math.sqrt(radius * radius / denominator);\r\n    }\r\n\r\n    /**\r\n    * @internal\r\n    */\r\n    static getCascadesSplitDistance(twoSplitRatio: number, fourSplitRatio: Vector3, cameraNear: number, shadowFar: number, fov: number, aspectRatio: number, cascadesMode: ShadowCascadesMode, out: number[]): void {\r\n        out[0] = cameraNear;\r\n        var range: number = shadowFar - cameraNear;\r\n        var tFov: number = Math.tan(fov * 0.5);\r\n        var denominator: number = 1.0 + tFov * tFov * (aspectRatio * aspectRatio + 1.0);\r\n        switch (cascadesMode) {\r\n            case ShadowCascadesMode.NoCascades:\r\n                out[1] = ShadowUtils.getFarWithRadius(shadowFar, denominator);\r\n                break;\r\n            case ShadowCascadesMode.TwoCascades:\r\n                out[1] = ShadowUtils.getFarWithRadius(cameraNear + range * twoSplitRatio, denominator);\r\n                out[2] = ShadowUtils.getFarWithRadius(shadowFar, denominator);\r\n                break;\r\n            case ShadowCascadesMode.FourCascades:\r\n                out[1] = ShadowUtils.getFarWithRadius(cameraNear + range * fourSplitRatio.x, denominator);\r\n                out[2] = ShadowUtils.getFarWithRadius(cameraNear + range * fourSplitRatio.y, denominator);\r\n                out[3] = ShadowUtils.getFarWithRadius(cameraNear + range * fourSplitRatio.z, denominator);\r\n                out[4] = ShadowUtils.getFarWithRadius(shadowFar, denominator);\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    static applySliceTransform(shadowSliceData: ShadowSliceData, atlasWidth: number, atlasHeight: number, cascadeIndex: number, outShadowMatrices: Float32Array): void {\r\n        // Apply shadow slice scale and offset\r\n        var sliceE: Float32Array = ShadowUtils._tempMatrix0.elements;\r\n        var oneOverAtlasWidth: number = 1.0 / atlasWidth;\r\n        var oneOverAtlasHeight: number = 1.0 / atlasHeight;\r\n\r\n        sliceE[0] = shadowSliceData.resolution * oneOverAtlasWidth;//scale\r\n        sliceE[5] = shadowSliceData.resolution * oneOverAtlasHeight;\r\n        sliceE[12] = shadowSliceData.offsetX * oneOverAtlasWidth;//offset\r\n        sliceE[13] = shadowSliceData.offsetY * oneOverAtlasHeight;\r\n        sliceE[1] = sliceE[2] = sliceE[2] = sliceE[4] = sliceE[6] = sliceE[7] = sliceE[8] = sliceE[9] = sliceE[11] = sliceE[14] = 0;\r\n        sliceE[10] = sliceE[15] = 1;\r\n\r\n        var offset: number = cascadeIndex * 16;\r\n        Utils3D._mulMatrixArray(sliceE, outShadowMatrices, offset, outShadowMatrices, offset);\r\n    }\r\n\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    static getDirectionLightShadowCullPlanes(cameraFrustumPlanes: Array<Plane>, cascadeIndex: number, splitDistance: number[], cameraNear: number, direction: Vector3, shadowSliceData: ShadowSliceData): void {\r\n        // http://lspiroengine.com/?p=187\r\n        var frustumCorners: Vector3[] = ShadowUtils._frustumCorners;\r\n        var backPlaneFaces: FrustumFace[] = ShadowUtils._backPlaneFaces;\r\n        var planeNeighbors: FrustumFace[][] = ShadowUtils._frustumPlaneNeighbors;\r\n        var twoPlaneCorners: FrustumCorner[][][] = ShadowUtils._frustumTwoPlaneCorners;\r\n        var edgePlanePoint2: Vector3 = ShadowUtils._edgePlanePoint2;\r\n        var out: Plane[] = shadowSliceData.cullPlanes;\r\n\r\n        // cameraFrustumPlanes is share\r\n        var near: Plane = cameraFrustumPlanes[FrustumFace.Near], far: Plane = cameraFrustumPlanes[FrustumFace.Far];\r\n        var left: Plane = cameraFrustumPlanes[FrustumFace.Left], right: Plane = cameraFrustumPlanes[FrustumFace.Right];\r\n        var bottom: Plane = cameraFrustumPlanes[FrustumFace.Bottom], top: Plane = cameraFrustumPlanes[FrustumFace.Top];\r\n\r\n        // adjustment the near/far plane\r\n        var splitNearDistance: number = splitDistance[cascadeIndex] - cameraNear;\r\n        var splitNear: Plane = ShadowUtils._adjustNearPlane;\r\n        var splitFar: Plane = ShadowUtils._adjustFarPlane;\r\n        splitNear.normal = near.normal;\r\n        splitFar.normal = far.normal;\r\n        splitNear.distance = near.distance - splitNearDistance;\r\n        splitFar.distance = Math.min(-near.distance + shadowSliceData.sphereCenterZ + shadowSliceData.splitBoundSphere.radius, far.distance);//do a clamp is the sphere is out of range the far plane\r\n\r\n        BoundFrustum.get3PlaneInterPoint(splitNear, bottom, right, frustumCorners[FrustumCorner.nearBottomRight]);\r\n        BoundFrustum.get3PlaneInterPoint(splitNear, top, right, frustumCorners[FrustumCorner.nearTopRight]);\r\n        BoundFrustum.get3PlaneInterPoint(splitNear, top, left, frustumCorners[FrustumCorner.nearTopLeft]);\r\n        BoundFrustum.get3PlaneInterPoint(splitNear, bottom, left, frustumCorners[FrustumCorner.nearBottomLeft]);\r\n        BoundFrustum.get3PlaneInterPoint(splitFar, bottom, right, frustumCorners[FrustumCorner.FarBottomRight]);\r\n        BoundFrustum.get3PlaneInterPoint(splitFar, top, right, frustumCorners[FrustumCorner.FarTopRight]);\r\n        BoundFrustum.get3PlaneInterPoint(splitFar, top, left, frustumCorners[FrustumCorner.FarTopLeft]);\r\n        BoundFrustum.get3PlaneInterPoint(splitFar, bottom, left, frustumCorners[FrustumCorner.FarBottomLeft]);\r\n\r\n        var backIndex: number = 0;\r\n        for (var i: FrustumFace = 0; i < 6; i++) {// meybe 3、4、5(light eye is at far, forward is near, or orth camera is any axis)\r\n            var plane: Plane;\r\n            switch (i) {\r\n                case FrustumFace.Near:\r\n                    plane = splitNear;\r\n                    break;\r\n                case FrustumFace.Far:\r\n                    plane = splitFar;\r\n                    break;\r\n                default:\r\n                    plane = cameraFrustumPlanes[i];\r\n                    break;\r\n            }\r\n            if (Vector3.dot(plane.normal, direction) < 0.0) {\r\n                plane.cloneTo(out[backIndex]);\r\n                backPlaneFaces[backIndex] = i;\r\n                backIndex++;\r\n            }\r\n        }\r\n\r\n        var edgeIndex: number = backIndex;\r\n        for (var i: FrustumFace = 0; i < backIndex; i++) {\r\n            var backFace: FrustumFace = backPlaneFaces[i];\r\n            var neighborFaces: Array<FrustumFace> = planeNeighbors[backFace];\r\n            for (var j: number = 0; j < 4; j++) {\r\n                var neighborFace: FrustumFace = neighborFaces[j];\r\n                var notBackFace: boolean = true;\r\n                for (var k: number = 0; k < backIndex; k++)\r\n                    if (neighborFace == backPlaneFaces[k]) {\r\n                        notBackFace = false;\r\n                        break;\r\n                    }\r\n                if (notBackFace) {\r\n                    var corners: Array<FrustumCorner> = twoPlaneCorners[backFace][neighborFace];\r\n                    var point0: Vector3 = frustumCorners[corners[0]];\r\n                    var point1: Vector3 = frustumCorners[corners[1]];\r\n                    Vector3.add(point0, direction, edgePlanePoint2);\r\n                    Plane.createPlaneBy3P(point0, point1, edgePlanePoint2, out[edgeIndex++]);\r\n                }\r\n            }\r\n        }\r\n        shadowSliceData.cullPlaneCount = edgeIndex;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    static getBoundSphereByFrustum(near: number, far: number, fov: number, aspectRatio: number, cameraPos: Vector3, forward: Vector3, outBoundSphere: BoundSphere): number {\r\n        // https://lxjk.github.io/2017/04/15/Calculate-Minimal-Bounding-Sphere-of-Frustum.html\r\n        var centerZ: number;\r\n        var radius: number;\r\n        var k: number = Math.sqrt(1.0 + aspectRatio * aspectRatio) * Math.tan(fov / 2.0);\r\n        var k2: number = k * k;\r\n        var farSNear: number = far - near;\r\n        var farANear: number = far + near;\r\n        if (k2 > farSNear / farANear) {\r\n            centerZ = far;\r\n            radius = far * k;\r\n        }\r\n        else {\r\n            centerZ = 0.5 * farANear * (1 + k2);\r\n            radius = 0.5 * Math.sqrt(farSNear * farSNear + 2.0 * (far * far + near * near) * k2 + farANear * farANear * k2 * k2);\r\n        }\r\n\r\n        var center: Vector3 = outBoundSphere.center;\r\n        outBoundSphere.radius = radius;\r\n        Vector3.scale(forward, centerZ, center);\r\n        Vector3.add(cameraPos, center, center);\r\n        outBoundSphere.center = center;\r\n        return centerZ;\r\n    }\r\n\r\n    /**\r\n     * @inernal\r\n     */\r\n    static getMaxTileResolutionInAtlas(atlasWidth: number, atlasHeight: number, tileCount: number): number {\r\n        var resolution: number = Math.min(atlasWidth, atlasHeight);\r\n        var currentTileCount: number = Math.floor(atlasWidth / resolution) * Math.floor(atlasHeight / resolution);\r\n        while (currentTileCount < tileCount) {\r\n            resolution = Math.floor(resolution >> 1);\r\n            currentTileCount = Math.floor(atlasWidth / resolution) * Math.floor(atlasHeight / resolution);\r\n        }\r\n        return resolution;\r\n    }\r\n\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    static getDirectionalLightMatrices(lightUp: Vector3, lightSide: Vector3, lightForward: Vector3, cascadeIndex: number, nearPlane: number, shadowResolution: number, shadowSliceData: ShadowSliceData, shadowMatrices: Float32Array): void {\r\n        var boundSphere: BoundSphere = shadowSliceData.splitBoundSphere;\r\n\r\n        // To solve shdow swimming problem.\r\n        var center: Vector3 = boundSphere.center;\r\n        var radius: number = boundSphere.radius;\r\n        var halfShadowResolution: number = shadowResolution / 2;\r\n        // Add border to prject edge pixel PCF.\r\n        // Improve:the clip planes not conside the border,but I think is OK,because the object can clip is not continuous.\r\n        var borderRadius: number = radius * halfShadowResolution / (halfShadowResolution - ShadowUtils.atlasBorderSize);\r\n        var borderDiam: number = borderRadius * 2.0;\r\n        var sizeUnit: number = shadowResolution / borderDiam;\r\n        var radiusUnit: number = borderDiam / shadowResolution;\r\n        var upLen: number = Math.ceil(Vector3.dot(center, lightUp) * sizeUnit) * radiusUnit;\r\n        var sideLen: number = Math.ceil(Vector3.dot(center, lightSide) * sizeUnit) * radiusUnit;\r\n        var forwardLen: number = Vector3.dot(center, lightForward);\r\n        center.x = lightUp.x * upLen + lightSide.x * sideLen + lightForward.x * forwardLen;\r\n        center.y = lightUp.y * upLen + lightSide.y * sideLen + lightForward.y * forwardLen;\r\n        center.z = lightUp.z * upLen + lightSide.z * sideLen + lightForward.z * forwardLen;\r\n        boundSphere.center = center;\r\n\r\n        // Direction light use shadow pancaking tech,do special dispose with nearPlane.\r\n        var origin: Vector3 = shadowSliceData.position;\r\n        var viewMatrix: Matrix4x4 = shadowSliceData.viewMatrix;\r\n        var projectMatrix: Matrix4x4 = shadowSliceData.projectionMatrix;\r\n        var viewProjectMatrix: Matrix4x4 = shadowSliceData.viewProjectMatrix;\r\n\r\n        shadowSliceData.resolution = shadowResolution;\r\n        shadowSliceData.offsetX = (cascadeIndex % 2) * shadowResolution;\r\n        shadowSliceData.offsetY = Math.floor(cascadeIndex / 2) * shadowResolution;\r\n\r\n        Vector3.scale(lightForward, radius + nearPlane, origin);\r\n        Vector3.subtract(center, origin, origin);\r\n        Matrix4x4.createLookAt(origin, center, lightUp, viewMatrix);\r\n        Matrix4x4.createOrthoOffCenter(- borderRadius, borderRadius, - borderRadius, borderRadius, 0.0, radius * 2.0 + nearPlane, projectMatrix);\r\n        Matrix4x4.multiply(projectMatrix, viewMatrix, viewProjectMatrix);\r\n        Utils3D._mulMatrixArray(ShadowUtils._shadowMapScaleOffsetMatrix.elements, viewProjectMatrix.elements, 0, shadowMatrices, cascadeIndex * 16);\r\n    }\r\n\r\n    /** \r\n    * @internal\r\n    */\r\n    static getSpotLightShadowData(shadowSpotData: ShadowSpotData, spotLight: SpotLightCom, resolution: number, shadowParams: Vector4, shadowSpotMatrices: Matrix4x4, shadowMapSize: Vector4) {\r\n        var out: Vector3 = shadowSpotData.position = (spotLight.owner as Sprite3D).transform.position;\r\n        shadowSpotData.resolution = resolution;\r\n        shadowMapSize.setValue(1.0 / resolution, 1.0 / resolution, resolution, resolution);\r\n        shadowSpotData.offsetX = 0;\r\n        shadowSpotData.offsetY = 0;\r\n\r\n        var spotWorldMatrix: Matrix4x4 = spotLight.lightWorldMatrix;\r\n        var viewMatrix: Matrix4x4 = shadowSpotData.viewMatrix;\r\n        var projectMatrix: Matrix4x4 = shadowSpotData.projectionMatrix;\r\n        var viewProjectMatrix: Matrix4x4 = shadowSpotData.viewProjectMatrix;\r\n        var BoundFrustum: BoundFrustum = shadowSpotData.cameraCullInfo.boundFrustum;\r\n        spotWorldMatrix.invert(viewMatrix);\r\n        Matrix4x4.createPerspective(3.1416 * spotLight.spotAngle / 180.0, 1, 0.1, spotLight.range, projectMatrix);\r\n        shadowParams.y = spotLight.shadowStrength;\r\n        Matrix4x4.multiply(projectMatrix, viewMatrix, viewProjectMatrix);\r\n        BoundFrustum.matrix = viewProjectMatrix;\r\n        viewProjectMatrix.cloneTo(shadowSpotMatrices);\r\n        shadowSpotData.cameraCullInfo.position = out;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    static prepareShadowReceiverShaderValues(light: DirectionLightCom, shadowMapWidth: number, shadowMapHeight: number, shadowSliceDatas: ShadowSliceData[], cascadeCount: number, shadowMapSize: Vector4, shadowParams: Vector4, shadowMatrices: Float32Array, splitBoundSpheres: Float32Array): void {\r\n        shadowMapSize.setValue(1.0 / shadowMapWidth, 1.0 / shadowMapHeight, shadowMapWidth, shadowMapHeight);\r\n        shadowParams.setValue(light._shadowStrength, 0.0, 0.0, 0.0);\r\n        if (cascadeCount > 1) {\r\n            const matrixFloatCount: number = 16;\r\n            for (var i: number = cascadeCount * matrixFloatCount, n: number = 4 * matrixFloatCount; i < n; i++)//the last matrix is always ZERO\r\n                shadowMatrices[i] = 0.0;//set Matrix4x4.ZERO to project the cascade index is 4\r\n\r\n            for (var i: number = 0; i < cascadeCount; i++) {\r\n                var boundSphere: BoundSphere = shadowSliceDatas[i].splitBoundSphere;\r\n                var center: Vector3 = boundSphere.center;\r\n                var radius: number = boundSphere.radius;\r\n                var offset: number = i * 4;\r\n                splitBoundSpheres[offset] = center.x;\r\n                splitBoundSpheres[offset + 1] = center.y;\r\n                splitBoundSpheres[offset + 2] = center.z;\r\n                splitBoundSpheres[offset + 3] = radius * radius;\r\n            }\r\n            const sphereFloatCount: number = 4;\r\n            for (var i: number = cascadeCount * sphereFloatCount, n: number = 4 * sphereFloatCount; i < n; i++)\r\n                splitBoundSpheres[i] = 0.0;//set Matrix4x4.ZERO to project the cascade index is 4\r\n        }\r\n    }\r\n}","import { Loader } from \"../../../net/Loader\";\r\nimport { BaseTexture } from \"../../../resource/BaseTexture\";\r\nimport { Resource } from \"../../../resource/Resource\";\r\nimport { Handler } from \"../../../utils/Handler\";\r\nimport { DefineDatas } from \"../../../RenderEngine/RenderShader/DefineDatas\";\r\nimport { Shader3D } from \"../../../RenderEngine/RenderShader/Shader3D\";\r\nimport { ShaderData, ShaderDataDefaultValue, ShaderDataItem, ShaderDataType } from \"../../../RenderEngine/RenderShader/ShaderData\";\r\nimport { ShaderDefine } from \"../../../RenderEngine/RenderShader/ShaderDefine\";\r\nimport { UniformBufferObject } from \"../../../RenderEngine/UniformBufferObject\";\r\nimport { IClone } from \"../../../utils/IClone\";\r\nimport { LayaGL } from \"../../../layagl/LayaGL\";\r\nimport { Config3D } from \"../../../../Config3D\";\r\nimport { BufferUsage } from \"../../../RenderEngine/RenderEnum/BufferTargetType\";\r\nimport { ILaya } from \"../../../../ILaya\";\r\nimport { Color } from \"../../../maths/Color\";\r\nimport { Matrix4x4 } from \"../../../maths/Matrix4x4\";\r\nimport { Vector2 } from \"../../../maths/Vector2\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\nimport { Vector4 } from \"../../../maths/Vector4\";\r\nimport { RenderState } from \"../../../RenderEngine/RenderShader/RenderState\";\r\nimport { Event } from \"../../../events/Event\";\r\nimport { Config } from \"../../../../Config\";\r\n\r\nexport enum MaterialRenderMode {\r\n    /**渲染状态_不透明。*/\r\n    RENDERMODE_OPAQUE,\r\n    /**渲染状态_阿尔法测试。*/\r\n    RENDERMODE_CUTOUT,\r\n    /**渲染状态__透明。*/\r\n    RENDERMODE_TRANSPARENT,\r\n    /**渲染状态__加色法混合。*/\r\n    RENDERMODE_ADDTIVE,\r\n    /**渲染状态_透明混合。*/\r\n    RENDERMODE_ALPHABLENDED,\r\n    /**渲染状态_自定义 */\r\n    RENDERMODE_CUSTOME\r\n}\r\n\r\n/**\r\n * <code>Material</code> 类用于创建材质。\r\n */\r\nexport class Material extends Resource implements IClone {\r\n    /** 渲染队列_不透明。*/\r\n    static RENDERQUEUE_OPAQUE: number = 2000;\r\n    /** 渲染队列_阿尔法裁剪。*/\r\n    static RENDERQUEUE_ALPHATEST: number = 2450;\r\n    /** 渲染队列_透明。*/\r\n    static RENDERQUEUE_TRANSPARENT: number = 3000;\r\n\r\n    /**着色器变量,透明测试值。*/\r\n    static ALPHATESTVALUE: number;\r\n\r\n    /**材质级着色器宏定义,透明测试。*/\r\n    static SHADERDEFINE_ALPHATEST: ShaderDefine;\r\n    static SHADERDEFINE_MAINTEXTURE: ShaderDefine;\r\n    static SHADERDEFINE_ADDTIVEFOG: ShaderDefine;\r\n    /**\r\n     * 加载材质。\r\n     * @param url 材质地址。\r\n     * @param complete 完成回掉。\r\n     */\r\n    static load(url: string, complete: Handler): void {\r\n        ILaya.loader.load(url, complete, null, Loader.MATERIAL);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    static __initDefine__(): void {\r\n        Material.SHADERDEFINE_ALPHATEST = Shader3D.getDefineByName(\"ALPHATEST\");\r\n        Material.SHADERDEFINE_MAINTEXTURE = Shader3D.getDefineByName(\"MAINTEXTURE\");\r\n        Material.SHADERDEFINE_ADDTIVEFOG = Shader3D.getDefineByName(\"ADDTIVEFOG\");\r\n        Material.ALPHATESTVALUE = Shader3D.propertyNameToID(\"u_AlphaTestValue\");\r\n        Shader3D.CULL = Shader3D.propertyNameToID(\"s_Cull\");\r\n        Shader3D.BLEND = Shader3D.propertyNameToID(\"s_Blend\");\r\n        Shader3D.BLEND_SRC = Shader3D.propertyNameToID(\"s_BlendSrc\");\r\n        Shader3D.BLEND_DST = Shader3D.propertyNameToID(\"s_BlendDst\");\r\n        Shader3D.BLEND_SRC_RGB = Shader3D.propertyNameToID(\"s_BlendSrcRGB\");\r\n        Shader3D.BLEND_DST_RGB = Shader3D.propertyNameToID(\"s_BlendDstRGB\");\r\n        Shader3D.BLEND_SRC_ALPHA = Shader3D.propertyNameToID(\"s_BlendSrcAlpha\");\r\n        Shader3D.BLEND_DST_ALPHA = Shader3D.propertyNameToID(\"s_BlendDstAlpha\");\r\n        Shader3D.BLEND_EQUATION = Shader3D.propertyNameToID(\"s_BlendEquation\");\r\n        Shader3D.BLEND_EQUATION_RGB = Shader3D.propertyNameToID(\"s_BlendEquationRGB\");\r\n        Shader3D.BLEND_EQUATION_ALPHA = Shader3D.propertyNameToID(\"s_BlendEquationAlpha\");\r\n        Shader3D.DEPTH_TEST = Shader3D.propertyNameToID(\"s_DepthTest\");\r\n        Shader3D.DEPTH_WRITE = Shader3D.propertyNameToID(\"s_DepthWrite\");\r\n        Shader3D.STENCIL_Ref = Shader3D.propertyNameToID(\"s_StencilRef\");\r\n        Shader3D.STENCIL_TEST = Shader3D.propertyNameToID(\"s_StencilTest\");\r\n        Shader3D.STENCIL_WRITE = Shader3D.propertyNameToID(\"s_StencilWrite\");\r\n        Shader3D.STENCIL_Op = Shader3D.propertyNameToID(\"s_StencilOp\");\r\n    }\r\n\r\n    /**@internal */\r\n    private _matRenderNode: MaterialRenderMode;\r\n    /** @internal */\r\n    _shader: Shader3D;\r\n    /** @private */\r\n    _shaderValues: ShaderData | null;//TODO:剥离贴图ShaderValue\r\n    /** 所属渲染队列. */\r\n    renderQueue: number;\r\n\r\n    /**\r\n     * 着色器数据。\r\n     */\r\n    get shaderData(): ShaderData {\r\n        return this._shaderValues;\r\n    }\r\n\r\n    /**\r\n     * 透明测试模式裁剪值。\r\n     */\r\n    get alphaTestValue(): number {\r\n        return this._shaderValues.getNumber(Material.ALPHATESTVALUE);\r\n    }\r\n\r\n    set alphaTestValue(value: number) {\r\n        this._shaderValues.setNumber(Material.ALPHATESTVALUE, value);\r\n    }\r\n\r\n    /**\r\n     * 是否透明裁剪。\r\n     */\r\n    get alphaTest(): boolean {\r\n        return this.shaderData.hasDefine(Material.SHADERDEFINE_ALPHATEST);\r\n    }\r\n\r\n    set alphaTest(value: boolean) {\r\n        if (value)\r\n            this._shaderValues.addDefine(Material.SHADERDEFINE_ALPHATEST);\r\n        else\r\n            this._shaderValues.removeDefine(Material.SHADERDEFINE_ALPHATEST);\r\n    }\r\n\r\n    /**\r\n     * 增加Shader宏定义。\r\n     * @param value 宏定义。\r\n     */\r\n    addDefine(define: ShaderDefine): void {\r\n        this._shaderValues.addDefine(define);\r\n    }\r\n\r\n    /**\r\n     * 移除Shader宏定义。\r\n     * @param value 宏定义。\r\n     */\r\n    removeDefine(define: ShaderDefine): void {\r\n        this._shaderValues.removeDefine(define);\r\n    }\r\n\r\n    /**\r\n     * 开启 或 关闭 shader 宏定义\r\n     * @param define \r\n     * @param value true: addDefine, false: removeDefine\r\n     */\r\n    setDefine(define: ShaderDefine, value: boolean) {\r\n        if (value) {\r\n            this._shaderValues.addDefine(define);\r\n        }\r\n        else {\r\n            this._shaderValues.removeDefine(define);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 是否包含Shader宏定义。\r\n     * @param value 宏定义。\r\n     */\r\n    hasDefine(define: ShaderDefine): boolean {\r\n        return this._shaderValues.hasDefine(define);\r\n    }\r\n\r\n    /**\r\n     * 是否写入深度。\r\n     */\r\n    get depthWrite(): boolean {\r\n        return this._shaderValues.getBool(Shader3D.DEPTH_WRITE);\r\n    }\r\n\r\n    set depthWrite(value: boolean) {\r\n        this._shaderValues.setBool(Shader3D.DEPTH_WRITE, value);\r\n    }\r\n\r\n\r\n    /**\r\n     * 剔除方式。\r\n     */\r\n    get cull(): number {\r\n        return this._shaderValues.getInt(Shader3D.CULL);\r\n    }\r\n\r\n    set cull(value: number) {\r\n        this._shaderValues.setInt(Shader3D.CULL, value);\r\n    }\r\n\r\n    /**\r\n     * 混合方式。\r\n     */\r\n    get blend(): number {\r\n        return this._shaderValues.getInt(Shader3D.BLEND);\r\n    }\r\n\r\n    set blend(value: number) {\r\n        this._shaderValues.setInt(Shader3D.BLEND, value);\r\n    }\r\n\r\n\r\n    /**\r\n     * 混合源。\r\n     */\r\n    get blendSrc(): number {\r\n        return this._shaderValues.getInt(Shader3D.BLEND_SRC);\r\n    }\r\n\r\n    set blendSrc(value: number) {\r\n        this._shaderValues.setInt(Shader3D.BLEND_SRC, value);\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * 混合目标。\r\n     */\r\n    get blendDst(): number {\r\n        return this._shaderValues.getInt(Shader3D.BLEND_DST);\r\n    }\r\n\r\n    set blendDst(value: number) {\r\n        this._shaderValues.setInt(Shader3D.BLEND_DST, value);\r\n    }\r\n\r\n    /**\r\n     * 混合目标 alpha\r\n     */\r\n    public get blendSrcAlpha(): number {\r\n        return this._shaderValues.getInt(Shader3D.BLEND_SRC_ALPHA);\r\n    }\r\n    public set blendSrcAlpha(value: number) {\r\n        this._shaderValues.setInt(Shader3D.BLEND_SRC_ALPHA, value);\r\n    }\r\n\r\n    /**\r\n     * 混合原 RGB\r\n     */\r\n    public get blendSrcRGB(): number {\r\n        return this._shaderValues.getInt(Shader3D.BLEND_SRC_RGB);\r\n    }\r\n    /**\r\n     * 混合原 RGB\r\n     */\r\n    public set blendSrcRGB(value: number) {\r\n        this._shaderValues.setInt(Shader3D.BLEND_SRC_RGB, value);\r\n    }\r\n\r\n    public get blendDstRGB(): number {\r\n        return this._shaderValues.getInt(Shader3D.BLEND_DST_RGB);\r\n    }\r\n    public set blendDstRGB(value: number) {\r\n        this._shaderValues.setInt(Shader3D.BLEND_DST_RGB, value);\r\n    }\r\n\r\n    /**\r\n     * 混合目标 alpha\r\n     */\r\n    public get blendDstAlpha(): number {\r\n        return this._shaderValues.getInt(Shader3D.BLEND_DST_ALPHA);\r\n    }\r\n    public set blendDstAlpha(value: number) {\r\n        this._shaderValues.setInt(Shader3D.BLEND_DST_ALPHA, value);\r\n    }\r\n\r\n    /**\r\n     * 混合方程\r\n     */\r\n    public get blendEquation(): number {\r\n        return this._shaderValues.getInt(Shader3D.BLEND_EQUATION);\r\n    }\r\n    public set blendEquation(value: number) {\r\n        this._shaderValues.setInt(Shader3D.BLEND_EQUATION, value);\r\n    }\r\n\r\n    /**\r\n     * 混合方式 RGB\r\n     */\r\n    public get blendEquationRGB(): number {\r\n        return this._shaderValues.getInt(Shader3D.BLEND_EQUATION_RGB);\r\n    }\r\n    public set blendEquationRGB(value: number) {\r\n        this._shaderValues.setInt(Shader3D.BLEND_EQUATION_RGB, value);\r\n    }\r\n\r\n    /**\r\n     * 混合方式 Alpha\r\n     */\r\n    public get blendEquationAlpha(): number {\r\n        return this._shaderValues.getInt(Shader3D.BLEND_EQUATION_ALPHA);\r\n    }\r\n    public set blendEquationAlpha(value: number) {\r\n        this._shaderValues.setInt(Shader3D.BLEND_EQUATION_ALPHA, value);\r\n    }\r\n\r\n    /**\r\n     * 深度测试方式。\r\n     */\r\n    get depthTest(): number {\r\n        return this._shaderValues.getInt(Shader3D.DEPTH_TEST);\r\n    }\r\n\r\n    set depthTest(value: number) {\r\n        this._shaderValues.setInt(Shader3D.DEPTH_TEST, value);\r\n    }\r\n\r\n    /**\r\n     * 模板测试方式\r\n     */\r\n    get stencilTest(): number {\r\n        return this._shaderValues.getInt(Shader3D.STENCIL_TEST);\r\n    }\r\n\r\n    set stencilTest(value: number) {\r\n        this._shaderValues.setInt(Shader3D.STENCIL_TEST, value);\r\n    }\r\n\r\n    /**\r\n     * 是否写入模板。\r\n     */\r\n    get stencilWrite(): boolean {\r\n        return this._shaderValues.getBool(Shader3D.STENCIL_WRITE);\r\n    }\r\n\r\n    set stencilWrite(value: boolean) {\r\n        this._shaderValues.setBool(Shader3D.STENCIL_WRITE, value);\r\n    }\r\n\r\n    /**\r\n     * 写入模板值\r\n     */\r\n    set stencilRef(value: number) {\r\n        this._shaderValues.setInt(Shader3D.STENCIL_Ref, value);\r\n    }\r\n\r\n    get stencilRef(): number {\r\n        return this._shaderValues.getInt(Shader3D.STENCIL_Ref);\r\n    }\r\n\r\n    /** */\r\n    /**\r\n     * 写入模板测试设置\r\n     * vector(fail, zfail, zpass)\r\n     */\r\n    set stencilOp(value: Vector3) {\r\n        this._shaderValues.setVector3(Shader3D.STENCIL_Op, value);\r\n    }\r\n\r\n    get stencilOp(): Vector3 {\r\n        return this._shaderValues.getVector3(Shader3D.STENCIL_Op);\r\n    }\r\n\r\n    /**\r\n     * 获得材质属性\r\n     */\r\n    get MaterialProperty(): any {\r\n        let propertyMap: any = {};\r\n        var shaderValues = this._shaderValues.getData();\r\n        for (let key in shaderValues) {\r\n            propertyMap[LayaGL.renderEngine.propertyIDToName(parseInt(key))] = shaderValues[key];\r\n        }\r\n        return propertyMap;\r\n    }\r\n\r\n    /**\r\n     * 获得材质宏\r\n     */\r\n    get MaterialDefine(): Array<string> {\r\n        let shaderDefineArray = new Array<string>();\r\n        let defineData = this._shaderValues._defineDatas;\r\n        Shader3D._getNamesByDefineData(defineData, shaderDefineArray);\r\n        return shaderDefineArray;\r\n    }\r\n\r\n    /**\r\n     * 渲染模式。\r\n     */\r\n    set materialRenderMode(value: MaterialRenderMode) {\r\n        this._matRenderNode = value;\r\n        switch (value) {\r\n            case MaterialRenderMode.RENDERMODE_OPAQUE:\r\n                this.alphaTest = false;\r\n                this.renderQueue = Material.RENDERQUEUE_OPAQUE;\r\n                this.depthWrite = true;\r\n                //this.cull = RenderState.CULL_BACK;\r\n                this.blend = RenderState.BLEND_DISABLE;\r\n                this.depthTest = RenderState.DEPTHTEST_LESS;\r\n                break;\r\n            case MaterialRenderMode.RENDERMODE_CUTOUT:\r\n                this.renderQueue = Material.RENDERQUEUE_ALPHATEST;\r\n                this.alphaTest = true;\r\n                this.depthWrite = true;\r\n                //this.cull = RenderState.CULL_BACK;\r\n                this.blend = RenderState.BLEND_DISABLE;\r\n                this.depthTest = RenderState.DEPTHTEST_LESS;\r\n                break;\r\n            case MaterialRenderMode.RENDERMODE_TRANSPARENT:\r\n                this.renderQueue = Material.RENDERQUEUE_TRANSPARENT;\r\n                this.alphaTest = false;\r\n                this.depthWrite = false;\r\n                //this.cull = RenderState.CULL_BACK;\r\n                this.blend = RenderState.BLEND_ENABLE_ALL;\r\n                this.blendSrc = RenderState.BLENDPARAM_SRC_ALPHA;\r\n                this.blendDst = RenderState.BLENDPARAM_ONE_MINUS_SRC_ALPHA;\r\n                this.depthTest = RenderState.DEPTHTEST_LESS;\r\n                break;\r\n            case MaterialRenderMode.RENDERMODE_ADDTIVE:\r\n                this.renderQueue = Material.RENDERQUEUE_TRANSPARENT;\r\n                this.alphaTest = false;\r\n                this.depthWrite = false;\r\n                //this.cull = RenderState.CULL_NONE;\r\n                this.blend = RenderState.BLEND_ENABLE_ALL;\r\n                this.blendSrc = RenderState.BLENDPARAM_SRC_ALPHA;\r\n                this.blendDst = RenderState.BLENDPARAM_ONE;\r\n                this.depthTest = RenderState.DEPTHTEST_LESS;\r\n                this._shaderValues.addDefine(Material.SHADERDEFINE_ADDTIVEFOG);\r\n                break;\r\n            case MaterialRenderMode.RENDERMODE_ALPHABLENDED:\r\n                this.renderQueue = Material.RENDERQUEUE_TRANSPARENT;\r\n                this.alphaTest = false;\r\n                this.depthWrite = false;\r\n                //this.cull = RenderState.CULL_NONE;\r\n                this.blend = RenderState.BLEND_ENABLE_ALL;\r\n                this.blendSrc = RenderState.BLENDPARAM_SRC_ALPHA;\r\n                this.blendDst = RenderState.BLENDPARAM_ONE_MINUS_SRC_ALPHA;\r\n                this.depthTest = RenderState.DEPTHTEST_LESS;\r\n                this._shaderValues.removeDefine(Material.SHADERDEFINE_ADDTIVEFOG);\r\n                break;\r\n            case MaterialRenderMode.RENDERMODE_CUSTOME:\r\n                //TODO IDE\r\n                break;\r\n            default:\r\n                console.warn(`Material : renderMode value error - (${value}).`);\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获得材质渲染状态\r\n     */\r\n    get materialRenderMode() {\r\n        return this._matRenderNode;\r\n    }\r\n\r\n    /**\r\n     * 创建一个 <code>Material</code> 实例。\r\n     */\r\n    constructor() {\r\n        super();\r\n        this._shaderValues = LayaGL.renderOBJCreate.createShaderData(this);\r\n        this.renderQueue = Material.RENDERQUEUE_OPAQUE;\r\n        this.alphaTest = false;\r\n        this.cull = RenderState.CULL_BACK;\r\n        this.blend = RenderState.BLEND_DISABLE;\r\n        this.blendSrc = RenderState.BLENDPARAM_ONE;\r\n        this.blendDst = RenderState.BLENDPARAM_ZERO;\r\n        this.blendSrcRGB = RenderState.BLENDPARAM_ONE;\r\n        this.blendDstRGB = RenderState.BLENDPARAM_ZERO;\r\n        this.blendSrcAlpha = RenderState.BLENDPARAM_ONE;\r\n        this.blendDstAlpha = RenderState.BLENDPARAM_ZERO;\r\n        this.blendEquation = RenderState.BLENDEQUATION_ADD;\r\n        this.blendEquationRGB = RenderState.BLENDEQUATION_ADD;\r\n        this.blendEquationAlpha = RenderState.BLENDEQUATION_ADD;\r\n        this.depthTest = RenderState.DEPTHTEST_LEQUAL;\r\n        this.depthWrite = true;\r\n        this.stencilRef = 1;\r\n        this.stencilTest = RenderState.STENCILTEST_OFF;\r\n        this.stencilWrite = false;\r\n        this.stencilOp = new Vector3(RenderState.STENCILOP_KEEP, RenderState.STENCILOP_KEEP, RenderState.STENCILOP_REPLACE);\r\n        this.destroyedImmediately = Config.destroyResourceImmediatelyDefault;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @param shader \r\n     * @returns \r\n     */\r\n    private _bindShaderInfo(shader: Shader3D) {\r\n        //update UBOData by Shader\r\n        let subShader = shader.getSubShaderAt(0);//TODO\t\r\n        // ubo\r\n        let shaderUBODatas = subShader._uniformBufferDataMap;\r\n        if (!shaderUBODatas)\r\n            return;\r\n        for (let key of shaderUBODatas.keys()) {\r\n            //create data\r\n            let uboData = shaderUBODatas.get(key).clone();\r\n            //create UBO\r\n            let ubo = UniformBufferObject.create(key, BufferUsage.Dynamic, uboData.getbyteLength(), false);\r\n            this._shaderValues.setUniformBuffer(Shader3D.propertyNameToID(key), ubo);\r\n            this._shaderValues._addCheckUBO(key, ubo, uboData);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * 清除UBO\r\n     * @returns \r\n     */\r\n    private _releaseUBOData() {\r\n        if (!this._shaderValues.uniformBufferDatas) {\r\n            return;\r\n        }\r\n        for (let value of this._shaderValues.uniformBufferDatas.values()) {\r\n            value.ubo._updateDataInfo.destroy();\r\n            value.ubo.destroy();\r\n            value.ubo._updateDataInfo = null;\r\n        }\r\n        this._shaderValues.uniformBufferDatas.clear();\r\n        this._shaderValues.uniformBuffersMap.clear();\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     */\r\n    protected _disposeResource(): void {\r\n        this._releaseUBOData();\r\n        this._shaderValues.destroy();\r\n        this._shaderValues = null;\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * get all material uniform property \r\n     * @returns \r\n     */\r\n    effectiveProperty() {\r\n        return this._shader.getSubShaderAt(0)._uniformTypeMap;\r\n    }\r\n\r\n    /**\r\n     * 设置使用Shader名字。\r\n     * @param name 名称。\r\n     */\r\n    setShaderName(name: string): void {\r\n        this._shader = Shader3D.find(name);\r\n        if (!this._shader) {\r\n            //throw new Error(\"Material: unknown shader name.\");\r\n            console.warn(`Material: unknown shader name '${name}'`);\r\n            this._shader = Shader3D.find(\"BLINNPHONG\");\r\n        }\r\n\r\n        if (Config3D._uniformBlock) {\r\n            this._releaseUBOData();\r\n            //bind shader info\r\n            // todo 清理残留 shader data\r\n            this._bindShaderInfo(this._shader);\r\n        }\r\n\r\n        // set default value\r\n        // todo subShader 选择\r\n        let subShader = this._shader.getSubShaderAt(0);\r\n        let defaultValue = subShader._uniformDefaultValue;\r\n        let typeMap = subShader._uniformTypeMap;\r\n        this.applyUniformDefaultValue(typeMap, defaultValue);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    applyUniformDefaultValue(typeMap: Map<string, ShaderDataType>, defaultValue: Record<string, ShaderDataItem>) {\r\n        typeMap.forEach((type, key) => {\r\n            if (defaultValue && defaultValue[key] != undefined) {\r\n                let value = defaultValue[key];\r\n                this.setShaderData(key, type, value);\r\n            }\r\n            else {\r\n                this.setShaderData(key, type, ShaderDataDefaultValue(type));\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 获得bool属性值\r\n     * @param uniformIndex 属性索引\r\n     * @returns \r\n     */\r\n    getBoolByIndex(uniformIndex: number): boolean {\r\n        return this.shaderData.getBool(uniformIndex);\r\n    }\r\n\r\n\r\n    /**\r\n     * 设置bool值\r\n     * @param uniformIndex 属性索引\r\n     * @param value 值\r\n     */\r\n    setBoolByIndex(uniformIndex: number, value: boolean) {\r\n        this.shaderData.setBool(uniformIndex, value);\r\n    }\r\n\r\n    /**\r\n     * 活得bool值\r\n     * @param name 属性名称\r\n     * @returns \r\n     */\r\n    getBool(name: string): boolean {\r\n        let uniformIndex = Shader3D.propertyNameToID(name);\r\n        return this.getBoolByIndex(uniformIndex);\r\n    }\r\n\r\n    /**\r\n     * 设置bool值\r\n     * @param name 属性名称\r\n     * @param value 值\r\n     */\r\n    setBool(name: string, value: boolean) {\r\n        let uniformIndex = Shader3D.propertyNameToID(name);\r\n        this.setBoolByIndex(uniformIndex, value);\r\n    }\r\n\r\n    /**\r\n     * 获得Float值\r\n     * @param uniformIndex 属性索引\r\n     * @returns \r\n     */\r\n    getFloatByIndex(uniformIndex: number): number {\r\n        return this.shaderData.getNumber(uniformIndex);\r\n    }\r\n\r\n    /**\r\n     * 设置Float值\r\n     * @param uniformIndex 属性索引\r\n     * @param value 值\r\n     */\r\n    setFloatByIndex(uniformIndex: number, value: number) {\r\n        this.shaderData.setNumber(uniformIndex, value);\r\n    }\r\n\r\n    /**\r\n     * 获得Float值\r\n     * @param name 属性名称\r\n     * @returns \r\n     */\r\n    getFloat(name: string): number {\r\n        let uniformIndex = Shader3D.propertyNameToID(name);\r\n        return this.getFloatByIndex(uniformIndex);\r\n    }\r\n\r\n    /**\r\n     * 设置Float值\r\n     * @param name 属性名称\r\n     * @param value 值\r\n     */\r\n    setFloat(name: string, value: number) {\r\n        let uniformIndex = Shader3D.propertyNameToID(name);\r\n        this.setFloatByIndex(uniformIndex, value);\r\n    }\r\n\r\n    /**\r\n     * 获得Int值\r\n     * @param uniformIndex 属性索引\r\n     * @returns \r\n     */\r\n    getIntByIndex(uniformIndex: number): number {\r\n        return this.shaderData.getInt(uniformIndex);\r\n    }\r\n\r\n    /**\r\n     * 设置Int值\r\n     * @param uniformIndex 属性索引\r\n     * @param value 值\r\n     */\r\n    setIntByIndex(uniformIndex: number, value: number) {\r\n        this.shaderData.setInt(uniformIndex, value);\r\n    }\r\n\r\n    /**\r\n     * 获得Int值\r\n     * @param name 属性名称\r\n     * @returns \r\n     */\r\n    getInt(name: string): number {\r\n        let uniformIndex = Shader3D.propertyNameToID(name);\r\n        return this.getIntByIndex(uniformIndex);\r\n    }\r\n\r\n    /**\r\n     * 设置Int值\r\n     * @param name 属性名称\r\n     * @param value 值\r\n     */\r\n    setInt(name: string, value: number) {\r\n        let uniformIndex = Shader3D.propertyNameToID(name);\r\n        this.setIntByIndex(uniformIndex, value);\r\n    }\r\n\r\n    /**\r\n     * 获得Vector2\r\n     * @param uniformIndex 属性索引\r\n     * @returns \r\n     */\r\n    getVector2ByIndex(uniformIndex: number): Vector2 {\r\n        return this.shaderData.getVector2(uniformIndex);\r\n    }\r\n\r\n    /**\r\n     * 设置Vector2\r\n     * @param uniformIndex 属性索引\r\n     * @param value 值\r\n     */\r\n    setVector2ByIndex(uniformIndex: number, value: Vector2) {\r\n        this.shaderData.setVector2(uniformIndex, value);\r\n    }\r\n\r\n    /**\r\n     * 获得Vector2\r\n     * @param name 属性名称\r\n     * @returns \r\n     */\r\n    getVector2(name: string): Vector2 {\r\n        let uniformIndex = Shader3D.propertyNameToID(name);\r\n        return this.getVector2ByIndex(uniformIndex);\r\n    }\r\n\r\n    /**\r\n     * 设置Vector2\r\n     * @param name 属性名称\r\n     * @param value 值\r\n     */\r\n    setVector2(name: string, value: Vector2) {\r\n        let uniformIndex = Shader3D.propertyNameToID(name);\r\n        this.setVector2ByIndex(uniformIndex, value);\r\n    }\r\n\r\n    /**\r\n     * 获得Vector3\r\n     * @param uniformIndex 属性索引\r\n     * @returns \r\n     */\r\n    getVector3ByIndex(uniformIndex: number): Vector3 {\r\n        return this.shaderData.getVector3(uniformIndex);\r\n    }\r\n\r\n    /**\r\n     * 设置Vector3\r\n     * @param uniformIndex 属性索引\r\n     * @param value 值\r\n     */\r\n    setVector3ByIndex(uniformIndex: number, value: Vector3) {\r\n        this.shaderData.setVector3(uniformIndex, value);\r\n    }\r\n\r\n    /**\r\n     * 获得Vector3\r\n     * @param name 属性名称\r\n     * @returns \r\n     */\r\n    getVector3(name: string) {\r\n        let uniformIndex = Shader3D.propertyNameToID(name);\r\n        return this.getVector3ByIndex(uniformIndex);\r\n    }\r\n\r\n    /**\r\n     * 设置Vector3\r\n     * @param name 属性名称\r\n     * @param value 值\r\n     */\r\n    setVector3(name: string, value: Vector3) {\r\n        let uniformIndex = Shader3D.propertyNameToID(name);\r\n        this.setVector3ByIndex(uniformIndex, value);\r\n    }\r\n\r\n    /**\r\n     * 获得Vector4\r\n     * @param uniformIndex 属性索引\r\n     * @param value 值\r\n     */\r\n    setVector4ByIndex(uniformIndex: number, value: Vector4) {\r\n        this.shaderData.setVector(uniformIndex, value);\r\n    }\r\n\r\n    /**\r\n     * 设置Vector4\r\n     * @param uniformIndex 属性索引\r\n     * @returns \r\n     */\r\n    getVector4ByIndex(uniformIndex: number): Vector4 {\r\n        return this.shaderData.getVector(uniformIndex);\r\n    }\r\n\r\n    /**\r\n     * 设置Vector4\r\n     * @param name 属性名称\r\n     * @param value 值\r\n     */\r\n    setVector4(name: string, value: Vector4) {\r\n        let uniformIndex = Shader3D.propertyNameToID(name);\r\n        this.setVector4ByIndex(uniformIndex, value);\r\n    }\r\n\r\n    /**\r\n     * 获得Vector4\r\n     * @param name 属性名称\r\n     * @returns \r\n     */\r\n    getVector4(name: string) {\r\n        let uniformIndex = Shader3D.propertyNameToID(name);\r\n        return this.getVector4ByIndex(uniformIndex);\r\n    }\r\n\r\n    /**\r\n     * 获得Color\r\n     * @param uniformIndex 属性索引\r\n     * @returns \r\n     */\r\n    getColorByIndex(uniformIndex: number): Color {\r\n        return this.shaderData.getColor(uniformIndex);\r\n    }\r\n\r\n    /**\r\n     * 设置Color\r\n     * @param uniformIndex 属性索引\r\n     * @param value 值\r\n     */\r\n    setColorByIndex(uniformIndex: number, value: Color) {\r\n        this.shaderData.setColor(uniformIndex, value);\r\n    }\r\n\r\n    /**\r\n     * 获得Color\r\n     * @param name 属性名称\r\n     * @returns \r\n     */\r\n    getColor(name: string): Color {\r\n        let uniformIndex = Shader3D.propertyNameToID(name);\r\n        return this.shaderData.getColor(uniformIndex);\r\n    }\r\n\r\n    /**\r\n     * 设置Color\r\n     * @param name 属性名称\r\n     * @param value 值\r\n     */\r\n    setColor(name: string, value: Color) {\r\n        let uniformIndex = Shader3D.propertyNameToID(name);\r\n        this.setColorByIndex(uniformIndex, value);\r\n    }\r\n\r\n    /**\r\n     * 获得Matrix4x4\r\n     * @param uniformIndex 属性索引\r\n     * @returns \r\n     */\r\n    getMatrix4x4ByIndex(uniformIndex: number): Matrix4x4 {\r\n        return this.shaderData.getMatrix4x4(uniformIndex);\r\n    }\r\n\r\n    /**\r\n     * 设置Matrix4x4\r\n     * @param uniformIndex 属性索引\r\n     * @param value 值\r\n     */\r\n    setMatrix4x4ByIndex(uniformIndex: number, value: Matrix4x4) {\r\n        this.shaderData.setMatrix4x4(uniformIndex, value);\r\n    }\r\n\r\n    /**\r\n     * 获得Matrix4x4\r\n     * @param name 属性名称\r\n     * @returns \r\n     */\r\n    getMatrix4x4(name: string): Matrix4x4 {\r\n        let uniformIndex = Shader3D.propertyNameToID(name);\r\n        return this.getMatrix4x4ByIndex(uniformIndex);\r\n    }\r\n\r\n    /**\r\n     * 设置Matrix4x4\r\n     * @param name 属性名称\r\n     * @param value 值\r\n     */\r\n    setMatrix4x4(name: string, value: Matrix4x4) {\r\n        let uniformIndex = Shader3D.propertyNameToID(name);\r\n        this.setMatrix4x4ByIndex(uniformIndex, value);\r\n    }\r\n\r\n    /**\r\n     * 设置纹理\r\n     * @param uniformIndex 属性索引\r\n     * @param texture \r\n     */\r\n    setTextureByIndex(uniformIndex: number, texture: BaseTexture) {\r\n        this.shaderData.setTexture(uniformIndex, texture);\r\n        if (texture && !texture._texture)//贴图为加载完，需要重设\r\n            texture.once(Event.READY, this, this.reSetTexture);\r\n    }\r\n\r\n    private reSetTexture(texture: BaseTexture) {\r\n        let index = this.shaderData.getSourceIndex(texture);\r\n        if (index != -1) {\r\n            this.setTextureByIndex(index, texture);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获得纹理\r\n     * @param uniformIndex 属性索引\r\n     * @returns \r\n     */\r\n    getTextureByIndex(uniformIndex: number) {\r\n        return this.shaderData.getTexture(uniformIndex);\r\n    }\r\n\r\n    /**\r\n     * 设置纹理\r\n     * @param name 属性名称\r\n     * @param texture \r\n     */\r\n    setTexture(name: string, texture: BaseTexture) {\r\n        let uniformIndex = Shader3D.propertyNameToID(name);\r\n        this.setTextureByIndex(uniformIndex, texture);\r\n    }\r\n\r\n    /**\r\n     * 获得纹理\r\n     * @param name 属性名称\r\n     * @returns \r\n     */\r\n    getTexture(name: string): BaseTexture {\r\n        let uniformIndex = Shader3D.propertyNameToID(name);\r\n        return this.getTextureByIndex(uniformIndex);\r\n    }\r\n\r\n    /**\r\n     * 获得Buffer\r\n     * @param uniformIndex 属性索引\r\n     * @returns \r\n     */\r\n    getBufferByIndex(uniformIndex: number): Float32Array {\r\n        return this.shaderData.getBuffer(uniformIndex);\r\n    }\r\n\r\n    /**\r\n     * 设置Buffer\r\n     * @param uniformIndex 属性索引\r\n     * @param value 值\r\n     */\r\n    setBufferByIndex(uniformIndex: number, value: Float32Array) {\r\n        this.shaderData.setBuffer(uniformIndex, value);\r\n    }\r\n\r\n    /**\r\n     * 获得Buffer\r\n     * @param name 属性名称\r\n     * @returns \r\n     */\r\n    getBuffer(name: string): Float32Array {\r\n        let uniformIndex = Shader3D.propertyNameToID(name);\r\n        return this.getBufferByIndex(uniformIndex);\r\n    }\r\n\r\n    /**\r\n     * 设置Buffer\r\n     * @param name 属性名称\r\n     * @param value 值\r\n     */\r\n    setBuffer(name: string, value: Float32Array) {\r\n        let uniformIndex = Shader3D.propertyNameToID(name);\r\n        this.setBufferByIndex(uniformIndex, value);\r\n    }\r\n\r\n    /**\r\n     * 设置ShaderData的属性值\r\n     * @param uniformIndex 属性索引\r\n     * @param type 值类型\r\n     * @param value 值\r\n     */\r\n    setShaderDataByIndex(uniformIndex: number, type: ShaderDataType, value: ShaderDataItem) {\r\n        this.shaderData.setShaderData(uniformIndex, type, value);\r\n    }\r\n\r\n    /**\r\n     * 设置ShaderData的属性值\r\n     * @param name 属性名称\r\n     * @param type 值类型\r\n     * @param value 值\r\n     */\r\n    setShaderData(name: string, type: ShaderDataType, value: ShaderDataItem) {\r\n        let uniformIndex = Shader3D.propertyNameToID(name);\r\n        this.setShaderDataByIndex(uniformIndex, type, value);\r\n    }\r\n\r\n    /**\r\n     * 获得ShaderData的属性值\r\n     * @param name 属性名称\r\n     * @param type 值类型\r\n     * @returns \r\n     */\r\n    getShaderData(name: string, type: ShaderDataType): ShaderDataItem {\r\n        let uniformIndex = Shader3D.propertyNameToID(name);\r\n        return this.getShaderDataByIndex(uniformIndex, type);\r\n    }\r\n\r\n    /**\r\n     * 获得ShaderData的属性值\r\n     * @param uniformIndex 属性索引\r\n     * @param type 值类型\r\n     * @returns \r\n     */\r\n    getShaderDataByIndex(uniformIndex: number, type: ShaderDataType): ShaderDataItem {\r\n        return this._shaderValues.getShaderData(uniformIndex, type);\r\n    }\r\n\r\n    /**\r\n     * 克隆。\r\n     * @param\tdestObject 克隆源。\r\n     */\r\n    cloneTo(destObject: any): void {\r\n        var destBaseMaterial: Material = (<Material>destObject);\r\n        destBaseMaterial.name = this.name;\r\n        destBaseMaterial.renderQueue = this.renderQueue;\r\n        destBaseMaterial.setShaderName(this._shader._name);\r\n        this._shaderValues.cloneTo(destBaseMaterial._shaderValues);\r\n    }\r\n\r\n    /**\r\n     * 克隆。\r\n     * @return\t 克隆副本。\r\n     */\r\n    clone(): any {\r\n        var dest: Material = new Material();\r\n        this.cloneTo(dest);\r\n        return dest;\r\n    }\r\n\r\n    //--------------------------------------------兼容-------------------------------------------------\r\n    /**\r\n     * 设置属性值\r\n     * @deprecated\r\n     * @param name \r\n     * @param value \r\n     */\r\n    setShaderPropertyValue(name: string, value: any) {\r\n        let propertyID = Shader3D.propertyNameToID(name);\r\n        this.shaderData.setValueData(propertyID, value);\r\n    }\r\n\r\n    /**\r\n     * 获取属性值\r\n     * @deprecated\r\n     * @param name \r\n     */\r\n    getShaderPropertyValue(name: string): any {\r\n        return this.shaderData.getValueData(Shader3D.propertyNameToID(name));\r\n    }\r\n\r\n    get _defineDatas(): DefineDatas {\r\n        return this._shaderValues._defineDatas;\r\n    }\r\n\r\n    /**\r\n     * override it\r\n     */\r\n    oldparseEndEvent() {\r\n        //TODO\r\n    }\r\n}\r\n\r\n\r\n","/**\r\n * Shadow Light enum\r\n */\r\n export enum ShadowLightType {\r\n    /**直射光 */\r\n    DirectionLight,\r\n    /**聚光 */\r\n    SpotLight,\r\n    /**点光 */\r\n    PointLight\r\n}","import { Config3D } from \"../../../../Config3D\";\r\nimport { ILaya } from \"../../../../ILaya\";\r\nimport { Sprite } from \"../../../display/Sprite\";\r\nimport { LayaGL } from \"../../../layagl/LayaGL\";\r\nimport { Loader } from \"../../../net/Loader\";\r\nimport { Context } from \"../../../resource/Context\";\r\nimport { Texture2D } from \"../../../resource/Texture2D\";\r\nimport { Handler } from \"../../../utils/Handler\";\r\nimport { Timer } from \"../../../utils/Timer\";\r\nimport { ISubmit } from \"../../../webgl/submit/ISubmit\";\r\nimport { SubmitKey } from \"../../../webgl/submit/SubmitKey\";\r\nimport { Cluster } from \"../../graphics/renderPath/Cluster\";\r\nimport { SphericalHarmonicsL2 } from \"../../graphics/SphericalHarmonicsL2\";\r\nimport { Viewport } from \"../../math/Viewport\";\r\nimport { PhysicsComponent } from \"../../physics/PhysicsComponent\";\r\nimport { PhysicsSettings } from \"../../physics/PhysicsSettings\";\r\nimport { PhysicsSimulation } from \"../../physics/PhysicsSimulation\";\r\nimport { SkyBox } from \"../../resource/models/SkyBox\";\r\nimport { SkyDome } from \"../../resource/models/SkyDome\";\r\nimport { SkyRenderer } from \"../../resource/models/SkyRenderer\";\r\nimport { TextureCube } from \"../../../resource/TextureCube\";\r\nimport { Utils3D } from \"../../utils/Utils3D\";\r\nimport { BaseCamera } from \"../BaseCamera\";\r\nimport { Camera, CameraClearFlags } from \"../Camera\";\r\nimport { AlternateLightQueue, LightQueue } from \"../light/LightQueue\";\r\nimport { RenderContext3D } from \"../render/RenderContext3D\";\r\nimport { RenderElement } from \"../render/RenderElement\";\r\nimport { Lightmap } from \"./Lightmap\";\r\nimport { Scene3DShaderDeclaration } from \"./Scene3DShaderDeclaration\";\r\nimport { ShadowCasterPass } from \"../../shadowMap/ShadowCasterPass\";\r\nimport { Physics3D } from \"../../Physics3D\";\r\nimport { BaseTexture } from \"../../../resource/BaseTexture\";\r\nimport { BlitFrameBufferCMD } from \"../render/command/BlitFrameBufferCMD\";\r\nimport { DirectionLightCom } from \"../light/DirectionLightCom\";\r\nimport { Sprite3D } from \"../Sprite3D\";\r\nimport { PointLightCom } from \"../light/PointLightCom\";\r\nimport { SpotLightCom } from \"../light/SpotLightCom\";\r\nimport { FilterMode } from \"../../../RenderEngine/RenderEnum/FilterMode\";\r\nimport { RenderCapable } from \"../../../RenderEngine/RenderEnum/RenderCapable\";\r\nimport { DefineDatas } from \"../../../RenderEngine/RenderShader/DefineDatas\";\r\nimport { Shader3D } from \"../../../RenderEngine/RenderShader/Shader3D\";\r\nimport { ShaderData, ShaderDataItem, ShaderDataType } from \"../../../RenderEngine/RenderShader/ShaderData\";\r\nimport { UnifromBufferData, UniformBufferParamsType } from \"../../../RenderEngine/UniformBufferData\";\r\nimport { UniformBufferObject } from \"../../../RenderEngine/UniformBufferObject\";\r\nimport { RenderTargetFormat } from \"../../../RenderEngine/RenderEnum/RenderTargetFormat\";\r\nimport { RenderClearFlag } from \"../../../RenderEngine/RenderEnum/RenderClearFlag\";\r\nimport { ICullPass } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/ICullPass\";\r\nimport { FrustumCulling } from \"../../graphics/FrustumCulling\";\r\nimport { IShadowCullInfo } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/IShadowCullInfo\";\r\nimport { ICameraCullInfo } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/ICameraCullInfo\";\r\nimport { WebGL } from \"../../../webgl/WebGL\";\r\nimport { BufferUsage } from \"../../../RenderEngine/RenderEnum/BufferTargetType\";\r\nimport { Prefab } from \"../../../resource/HierarchyResource\";\r\nimport { Stat } from \"../../../utils/Stat\";\r\nimport { CommandUniformMap } from \"../../../RenderEngine/CommandUniformMap\";\r\nimport { ComponentDriver } from \"../../../components/ComponentDriver\";\r\nimport { IRenderQueue } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/IRenderQueue\";\r\nimport { LayaEnv } from \"../../../../LayaEnv\";\r\nimport { SceneRenderManager } from \"./SceneRenderManager\";\r\nimport { VolumeManager } from \"../../component/Volume/VolumeManager\";\r\nimport { UI3DManager } from \"../UI3D/UI3DManager\";\r\nimport { Scene } from \"../../../display/Scene\";\r\nimport { ReflectionProbe } from \"../../component/Volume/reflectionProbe/ReflectionProbe\";\r\nimport { AmbientMode } from \"./AmbientMode\";\r\nimport { BVHSpatialConfig } from \"./bvh/SpatialManager\";\r\nimport { BVHSceneRenderManager } from \"./BVHSceneRenderManager/BVHSceneRenderManager\";\r\nimport { BVHCullPass } from \"./BVHSceneRenderManager/BVHCullPass\";\r\nimport { Color } from \"../../../maths/Color\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\nimport { Vector4 } from \"../../../maths/Vector4\";\r\nimport { BufferState } from \"../../../webgl/utils/BufferState\";\r\nimport { RenderTexture } from \"../../../resource/RenderTexture\";\r\n\r\nexport enum FogMode {\r\n    Linear = 0, //Linear\r\n    EXP = 1,    // 指数\r\n    EXP2 = 2,   // 指数平方\r\n}\r\n\r\n/**\r\n * 用于实现3D场景。\r\n */\r\nexport class Scene3D extends Sprite implements ISubmit {\r\n    /** @internal */\r\n    private static _lightTexture: Texture2D;\r\n    /** @internal */\r\n    private static _lightPixles: Float32Array;\r\n    /** @internal */\r\n    static _shadowCasterPass: ShadowCasterPass;\r\n    /**@internal */\r\n    static physicsSettings: PhysicsSettings;\r\n    /** reflection mode */\r\n    static REFLECTIONMODE_SKYBOX: number = 0;\r\n    static REFLECTIONMODE_CUSTOM: number = 1;\r\n    /** RenderQueue mode */\r\n    static SCENERENDERFLAG_RENDERQPAQUE = 0;\r\n    static SCENERENDERFLAG_SKYBOX = 1;\r\n    static SCENERENDERFLAG_RENDERTRANSPARENT = 2;\r\n    /**Scene3D UniformMap */\r\n    static sceneUniformMap: CommandUniformMap;\r\n    /** Scene UniformPropertyID */\r\n    /** @internal */\r\n    static FOGCOLOR: number;\r\n    /** @internal */\r\n    static FOGPARAMS: number;\r\n    /** @internal */\r\n    static DIRECTIONLIGHTCOUNT: number;\r\n    /** @internal */\r\n    static LIGHTBUFFER: number;\r\n    /** @internal */\r\n    static CLUSTERBUFFER: number;\r\n    /** @internal */\r\n    static SUNLIGHTDIRECTION: number;\r\n    /** @internal */\r\n    static SUNLIGHTDIRCOLOR: number;\r\n\r\n    /** @internal */\r\n    static AMBIENTCOLOR: number;\r\n\r\n    /** @internal */\r\n    static TIME: number;\r\n    /**@internal */\r\n    static GIRotate: number;\r\n    /** @internal */\r\n    static sceneID: number;\r\n\r\n    static SceneUBOData: UnifromBufferData;\r\n    /**@internal scene uniform block */\r\n    static SCENEUNIFORMBLOCK: number;\r\n    //------------------legacy lighting-------------------------------\r\n    /** @internal */\r\n    static LIGHTDIRECTION: number;\r\n    /** @internal */\r\n    static LIGHTDIRCOLOR: number;\r\n    /** @internal */\r\n    static LIGHTMODE: number;\r\n    /** @internal */\r\n    static POINTLIGHTPOS: number;\r\n    /** @internal */\r\n    static POINTLIGHTRANGE: number;\r\n    /** @internal */\r\n    static POINTLIGHTATTENUATION: number;\r\n    /** @internal */\r\n    static POINTLIGHTCOLOR: number;\r\n    /** @internal */\r\n    static POINTLIGHTMODE: number;\r\n    /** @internal */\r\n    static SPOTLIGHTPOS: number;\r\n    /** @internal */\r\n    static SPOTLIGHTDIRECTION: number;\r\n    /** @internal */\r\n    static SPOTLIGHTSPOTANGLE: number;\r\n    /** @internal */\r\n    static SPOTLIGHTRANGE: number;\r\n    /** @internal */\r\n    static SPOTLIGHTCOLOR: number;\r\n    /** @internal */\r\n    static SPOTLIGHTMODE: number;\r\n    //------------------legacy lighting-------------------------------\r\n    /** @internal 场景更新标记*/\r\n    static __updateMark: number = 0;\r\n    /** @internal*/\r\n    static _blitTransRT: RenderTexture;\r\n    /**@internal */\r\n    static _blitOffset: Vector4 = new Vector4();\r\n    /**@internal */\r\n    static mainCavansViewPort: Viewport = new Viewport(0, 0, 1, 1);\r\n\r\n\r\n\r\n    /**\r\n     * 场景更新标记\r\n     */\r\n    static set _updateMark(value: number) {\r\n        Scene3D.__updateMark = value;\r\n    }\r\n\r\n    static get _updateMark(): number {\r\n        return Scene3D.__updateMark;\r\n    }\r\n\r\n    /**\r\n     * init shaderData\r\n     */\r\n    static shaderValueInit() {\r\n        Scene3DShaderDeclaration.SHADERDEFINE_FOG = Shader3D.getDefineByName(\"FOG\");\r\n        Scene3DShaderDeclaration.SHADERDEFINE_FOG_LINEAR = Shader3D.getDefineByName(\"FOG_LINEAR\");\r\n        Scene3DShaderDeclaration.SHADERDEFINE_FOG_EXP = Shader3D.getDefineByName(\"FOG_EXP\");\r\n        Scene3DShaderDeclaration.SHADERDEFINE_FOG_EXP2 = Shader3D.getDefineByName(\"FOG_EXP2\");\r\n        Scene3DShaderDeclaration.SHADERDEFINE_DIRECTIONLIGHT = Shader3D.getDefineByName(\"DIRECTIONLIGHT\");\r\n        Scene3DShaderDeclaration.SHADERDEFINE_POINTLIGHT = Shader3D.getDefineByName(\"POINTLIGHT\");\r\n        Scene3DShaderDeclaration.SHADERDEFINE_SPOTLIGHT = Shader3D.getDefineByName(\"SPOTLIGHT\");\r\n        Scene3DShaderDeclaration.SHADERDEFINE_SHADOW = Shader3D.getDefineByName(\"SHADOW\");\r\n        Scene3DShaderDeclaration.SHADERDEFINE_SHADOW_CASCADE = Shader3D.getDefineByName(\"SHADOW_CASCADE\");\r\n        Scene3DShaderDeclaration.SHADERDEFINE_SHADOW_SOFT_SHADOW_LOW = Shader3D.getDefineByName(\"SHADOW_SOFT_SHADOW_LOW\");\r\n        Scene3DShaderDeclaration.SHADERDEFINE_SHADOW_SOFT_SHADOW_HIGH = Shader3D.getDefineByName(\"SHADOW_SOFT_SHADOW_HIGH\");\r\n\r\n        Scene3DShaderDeclaration.SHADERDEFINE_SHADOW_SPOT = Shader3D.getDefineByName(\"SHADOW_SPOT\");\r\n        Scene3DShaderDeclaration.SHADERDEFINE_SHADOW_SPOT_SOFT_SHADOW_LOW = Shader3D.getDefineByName(\"SHADOW_SPOT_SOFT_SHADOW_LOW\");\r\n        Scene3DShaderDeclaration.SHADERDEFINE_SHADOW_SPOT_SOFT_SHADOW_HIGH = Shader3D.getDefineByName(\"SHADOW_SPOT_SOFT_SHADOW_HIGH\");\r\n\r\n        Scene3D.FOGCOLOR = Shader3D.propertyNameToID(\"u_FogColor\");\r\n        Scene3D.FOGPARAMS = Shader3D.propertyNameToID(\"u_FogParams\");//x start,y end,z Density\r\n        Scene3D.DIRECTIONLIGHTCOUNT = Shader3D.propertyNameToID(\"u_DirationLightCount\");\r\n        Scene3D.LIGHTBUFFER = Shader3D.propertyNameToID(\"u_LightBuffer\");\r\n        Scene3D.CLUSTERBUFFER = Shader3D.propertyNameToID(\"u_LightClusterBuffer\");\r\n        Scene3D.TIME = Shader3D.propertyNameToID(\"u_Time\");\r\n        Scene3D.GIRotate = Shader3D.propertyNameToID(\"u_GIRotate\");\r\n        Scene3D.SCENEUNIFORMBLOCK = Shader3D.propertyNameToID(UniformBufferObject.UBONAME_SCENE);\r\n\r\n        let sceneUniformMap: CommandUniformMap = Scene3D.sceneUniformMap = LayaGL.renderOBJCreate.createGlobalUniformMap(\"Scene3D\");\r\n        sceneUniformMap.addShaderUniform(Scene3D.FOGCOLOR, \"u_FogColor\");\r\n        sceneUniformMap.addShaderUniform(Scene3D.FOGPARAMS, \"u_FogParams\");\r\n        sceneUniformMap.addShaderUniform(Scene3D.DIRECTIONLIGHTCOUNT, \"u_DirationLightCount\");\r\n        sceneUniformMap.addShaderUniform(Scene3D.LIGHTBUFFER, \"u_LightBuffer\");\r\n        sceneUniformMap.addShaderUniform(Scene3D.CLUSTERBUFFER, \"u_LightClusterBuffer\");\r\n        sceneUniformMap.addShaderUniform(Scene3D.TIME, \"u_Time\");\r\n        sceneUniformMap.addShaderUniform(Scene3D.GIRotate, \"u_GIRotate\")\r\n        sceneUniformMap.addShaderUniform(Scene3D.SCENEUNIFORMBLOCK, UniformBufferObject.UBONAME_SCENE);\r\n    }\r\n\r\n    /**\r\n     * legency ShaderData\r\n     */\r\n    static legacyLightingValueInit() {\r\n        Scene3D.LIGHTDIRECTION = Shader3D.propertyNameToID(\"u_DirectionLight.direction\");\r\n        Scene3D.sceneUniformMap.addShaderUniform(Scene3D.LIGHTDIRECTION, \"u_DirectionLight.direction\");\r\n        Scene3D.LIGHTDIRCOLOR = Shader3D.propertyNameToID(\"u_DirectionLight.color\");\r\n        Scene3D.sceneUniformMap.addShaderUniform(Scene3D.LIGHTDIRCOLOR, \"u_DirectionLight.color\");\r\n        Scene3D.LIGHTMODE = Shader3D.propertyNameToID(\"u_DirectionLight.lightMode\");\r\n        Scene3D.sceneUniformMap.addShaderUniform(Scene3D.LIGHTMODE, \"u_DirectionLight.lightMode\");\r\n\r\n        Scene3D.POINTLIGHTPOS = Shader3D.propertyNameToID(\"u_PointLight.position\");\r\n        Scene3D.sceneUniformMap.addShaderUniform(Scene3D.POINTLIGHTPOS, \"u_PointLight.position\");\r\n        Scene3D.POINTLIGHTRANGE = Shader3D.propertyNameToID(\"u_PointLight.range\");\r\n        Scene3D.sceneUniformMap.addShaderUniform(Scene3D.POINTLIGHTRANGE, \"u_PointLight.range\");\r\n        Scene3D.POINTLIGHTATTENUATION = Shader3D.propertyNameToID(\"u_PointLight.attenuation\");\r\n        Scene3D.sceneUniformMap.addShaderUniform(Scene3D.POINTLIGHTATTENUATION, \"u_PointLight.attenuation\");\r\n        Scene3D.POINTLIGHTCOLOR = Shader3D.propertyNameToID(\"u_PointLight.color\");\r\n        Scene3D.sceneUniformMap.addShaderUniform(Scene3D.POINTLIGHTCOLOR, \"u_PointLight.color\");\r\n        Scene3D.POINTLIGHTMODE = Shader3D.propertyNameToID(\"u_PointLight.lightMode\");\r\n        Scene3D.sceneUniformMap.addShaderUniform(Scene3D.POINTLIGHTMODE, \"u_PointLight.lightMode\");\r\n\r\n        Scene3D.SPOTLIGHTPOS = Shader3D.propertyNameToID(\"u_SpotLight.position\");\r\n        Scene3D.sceneUniformMap.addShaderUniform(Scene3D.SPOTLIGHTPOS, \"u_SpotLight.position\");\r\n        Scene3D.SPOTLIGHTDIRECTION = Shader3D.propertyNameToID(\"u_SpotLight.direction\");\r\n        Scene3D.sceneUniformMap.addShaderUniform(Scene3D.SPOTLIGHTDIRECTION, \"u_SpotLight.direction\");\r\n        Scene3D.SPOTLIGHTSPOTANGLE = Shader3D.propertyNameToID(\"u_SpotLight.spot\");\r\n        Scene3D.sceneUniformMap.addShaderUniform(Scene3D.SPOTLIGHTSPOTANGLE, \"u_SpotLight.spot\");\r\n        Scene3D.SPOTLIGHTRANGE = Shader3D.propertyNameToID(\"u_SpotLight.range\");\r\n        Scene3D.sceneUniformMap.addShaderUniform(Scene3D.SPOTLIGHTRANGE, \"u_SpotLight.range\");\r\n        Scene3D.SPOTLIGHTCOLOR = Shader3D.propertyNameToID(\"u_SpotLight.color\");\r\n        Scene3D.sceneUniformMap.addShaderUniform(Scene3D.SPOTLIGHTCOLOR, \"u_SpotLight.color\");\r\n        Scene3D.SPOTLIGHTMODE = Shader3D.propertyNameToID(\"u_SpotLight.lightMode\");\r\n        Scene3D.sceneUniformMap.addShaderUniform(Scene3D.SPOTLIGHTMODE, \"u_SpotLight.lightMode\");\r\n    }\r\n\r\n    /**\r\n     * create Scene UniformBuffer\r\n     * @internal\r\n     * @returns \r\n     */\r\n    static createSceneUniformBlock(): UnifromBufferData {\r\n        let uniformpara: Map<string, UniformBufferParamsType> = new Map<string, UniformBufferParamsType>();\r\n        // uniformpara.set(\"u_AmbientColor\", UniformBufferParamsType.Vector4);\r\n        uniformpara.set(\"u_Time\", UniformBufferParamsType.Number);\r\n        uniformpara.set(\"u_FogParams\", UniformBufferParamsType.Vector4);\r\n        uniformpara.set(\"u_FogColor\", UniformBufferParamsType.Vector4);\r\n        let uniformMap = new Map<number, UniformBufferParamsType>();\r\n        uniformpara.forEach((value, key) => {\r\n            uniformMap.set(Shader3D.propertyNameToID(key), value);\r\n        });\r\n        return new UnifromBufferData(uniformMap);\r\n    }\r\n\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    static __init__(): void {\r\n        var multiLighting: boolean = Config3D._multiLighting;\r\n        if (multiLighting) {\r\n            const width = 4;\r\n            var maxLightCount: number = Config3D.maxLightCount;\r\n            var clusterSlices: Vector3 = Config3D.lightClusterCount;\r\n            Cluster.instance = new Cluster(clusterSlices.x, clusterSlices.y, clusterSlices.z, Math.min(Config3D.maxLightCount, Config3D._maxAreaLightCountPerClusterAverage));\r\n            Scene3D._lightTexture = Utils3D._createFloatTextureBuffer(width, maxLightCount);\r\n            Scene3D._lightTexture.lock = true;\r\n            Scene3D._lightPixles = new Float32Array(maxLightCount * width * 4);\r\n        }\r\n        Scene3D.shaderValueInit();\r\n        var configShaderValue: DefineDatas = Shader3D._configDefineValues;\r\n        if (!Config3D._multiLighting) {\r\n            (configShaderValue.add(Shader3D.SHADERDEFINE_LEGACYSINGALLIGHTING));\r\n            Scene3D.legacyLightingValueInit()\r\n        }\r\n        Scene3D._shadowCasterPass = new ShadowCasterPass();\r\n        //TODO:\r\n        if (LayaGL.renderEngine.getCapable(RenderCapable.GRAPHICS_API_GLES3))\r\n            configShaderValue.add(Shader3D.SHADERDEFINE_GRAPHICS_API_GLES3);\r\n        else\r\n            configShaderValue.add(Shader3D.SHADERDEFINE_GRAPHICS_API_GLES2);\r\n        //UniformBuffer\r\n        if (Config3D._uniformBlock)\r\n            configShaderValue.add(Shader3D.SHADERDEFINE_ENUNIFORMBLOCK);\r\n\r\n        Physics3D._bullet && (Scene3D.physicsSettings = new PhysicsSettings());\r\n\r\n        let supportFloatTex = LayaGL.renderEngine.getCapable(RenderCapable.TextureFormat_R32G32B32A32);\r\n        if (supportFloatTex) {\r\n            configShaderValue.add(Shader3D.SHADERDEFINE_FLOATTEXTURE);\r\n        }\r\n        let supportFloatLinearFiltering = LayaGL.renderEngine.getCapable(RenderCapable.Texture_FloatLinearFiltering);\r\n        if (supportFloatLinearFiltering) {\r\n            configShaderValue.add(Shader3D.SHADERDEFINE_FLOATTEXTURE_FIL_LINEAR);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 加载场景,注意:不缓存。\r\n     * @param url 模板地址。\r\n     * @param complete 完成回调。\r\n     */\r\n    static load(url: string, complete: Handler): void {\r\n        ILaya.loader.load(url).then((res: Prefab) => {\r\n            if (complete) {\r\n                let ret: Scene3D;\r\n                if (res) {\r\n                    let scene = res.create();\r\n                    if (scene instanceof Scene)\r\n                        ret = scene._scene3D;\r\n                    else\r\n                        ret = <Scene3D>scene;\r\n                }\r\n                complete.runWith([ret]);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**ide配置文件使用 */\r\n    _reflectionsSource: number = 0;\r\n    /**ide配置文件使用 */\r\n    _reflectionsResolution: string = \"256\";\r\n    /**ide配置文件使用 */\r\n    _reflectionsIblSamples = 128;\r\n\r\n\r\n\r\n    /** @internal */\r\n    private _group: string;\r\n    /** @internal */\r\n    public _lightCount: number = 0;\r\n    /** @internal */\r\n    public _pointLights: LightQueue<PointLightCom> = new LightQueue();\r\n    /** @internal */\r\n    public _spotLights: LightQueue<SpotLightCom> = new LightQueue();\r\n    /** @internal */\r\n    public _directionLights: LightQueue<DirectionLightCom> = new LightQueue();\r\n    /** @internal */\r\n    public _alternateLights: AlternateLightQueue = new AlternateLightQueue();\r\n    /** @internal */\r\n    private _lightmaps: Lightmap[] = [];\r\n    /** @internal */\r\n    private _skyRenderer: SkyRenderer = new SkyRenderer();\r\n    /** @internal */\r\n    private _enableFog: boolean;\r\n    /** @internal */\r\n    private _timer: Timer;\r\n    /** @internal */\r\n    private _time: number = 0;\r\n    /** @internal */\r\n    private _fogParams: Vector4;\r\n    /** @internal */\r\n    private _fogMode: FogMode;\r\n    /**@internal */\r\n    private _sceneReflectionProb: ReflectionProbe;\r\n\r\n    /**@internal */\r\n    _sunColor: Color = new Color(1.0, 1.0, 1.0);\r\n    /**@interanl */\r\n    _sundir: Vector3 = new Vector3();\r\n    /**@internal*/\r\n    _id = Scene3D.sceneID++;\r\n    /** @internal */\r\n    _mainDirectionLight: DirectionLightCom;\r\n    /** @internal */\r\n    _mainSpotLight: SpotLightCom;\r\n    /** @internal */\r\n    _mainPointLight: PointLightCom;//TODO\r\n    /** @internal */\r\n    _physicsSimulation: PhysicsSimulation;\r\n    /**@internal */\r\n    _physicsdisableSimulation: boolean = false;\r\n    /** @internal 只读,不允许修改。*/\r\n    _collsionTestList: number[] = [];\r\n    /** @internal */\r\n    _shaderValues: ShaderData;\r\n    /** @interanl */\r\n    _sceneUniformData: UnifromBufferData;\r\n    /** @internal */\r\n    _sceneUniformObj: UniformBufferObject;\r\n    /** @internal */\r\n    _key: SubmitKey = new SubmitKey();\r\n\r\n    /** @internal */\r\n    _opaqueQueue: IRenderQueue = LayaGL.renderOBJCreate.createBaseRenderQueue(false);\r\n    /** @internal */\r\n    _transparentQueue: IRenderQueue = LayaGL.renderOBJCreate.createBaseRenderQueue(true);\r\n    /** @internal */\r\n    _cameraPool: BaseCamera[] = [];\r\n\r\n    /** @internal */\r\n    _volumeManager: VolumeManager;\r\n    /**@internal */\r\n    _UI3DManager: UI3DManager = new UI3DManager();\r\n    /**@internal */\r\n    _sceneRenderManager: SceneRenderManager;\r\n    /**@internal */\r\n    _cullPass: ICullPass;\r\n    /** 当前创建精灵所属遮罩层。*/\r\n    currentCreationLayer: number = Math.pow(2, 0);\r\n    /** 是否启用灯光。*/\r\n    enableLight: boolean = true;\r\n    /**lightShadowMap 更新频率 @internal */\r\n    _ShadowMapupdateFrequency: number = 1;\r\n    /** @internal */\r\n    _nativeObj: any;\r\n\r\n    /** @internal 由IDE负责调用渲染 */\r\n    _renderByEditor: boolean;\r\n    /** @internal */\r\n    _scene2D: Scene;\r\n\r\n    /**\r\n     * Scene3D所属的2D场景，使用IDE编辑的场景载入后具有此属性。\r\n     */\r\n    get scene2D(): Scene {\r\n        return this._scene2D;\r\n    }\r\n\r\n    /**\r\n     * set SceneRenderableManager\r\n     */\r\n    set sceneRenderableManager(manager: SceneRenderManager) {\r\n        manager.list = this._sceneRenderManager.list;\r\n        this._sceneRenderManager = manager;\r\n    }\r\n\r\n    get sceneRenderableManager(): SceneRenderManager {\r\n        return this._sceneRenderManager;\r\n    }\r\n\r\n    /**\r\n     * set ICullPass\r\n     */\r\n    set cullPass(cullPass: ICullPass) {\r\n        this._cullPass = cullPass;\r\n    }\r\n\r\n    /**\r\n     * 是否允许雾化。\r\n     */\r\n    get enableFog(): boolean {\r\n        return this._enableFog;\r\n    }\r\n\r\n    set enableFog(value: boolean) {\r\n        if (this._enableFog !== value) {\r\n            this._enableFog = value;\r\n            if (value) {\r\n                this._shaderValues.addDefine(Scene3DShaderDeclaration.SHADERDEFINE_FOG);\r\n            } else\r\n                this._shaderValues.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_FOG);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 场景雾模式\r\n     */\r\n    get fogMode(): FogMode {\r\n        return this._fogMode;\r\n    }\r\n\r\n    set fogMode(value: FogMode) {\r\n        this._fogMode = value;\r\n        switch (value) {\r\n            case FogMode.Linear:\r\n                this._shaderValues.addDefine(Scene3DShaderDeclaration.SHADERDEFINE_FOG_LINEAR);\r\n                this._shaderValues.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_FOG_EXP);\r\n                this._shaderValues.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_FOG_EXP2);\r\n                break;\r\n            case FogMode.EXP:\r\n                this._shaderValues.addDefine(Scene3DShaderDeclaration.SHADERDEFINE_FOG_EXP);\r\n                this._shaderValues.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_FOG_LINEAR);\r\n                this._shaderValues.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_FOG_EXP2);\r\n                break;\r\n            case FogMode.EXP2:\r\n                this._shaderValues.addDefine(Scene3DShaderDeclaration.SHADERDEFINE_FOG_EXP2);\r\n                this._shaderValues.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_FOG_LINEAR);\r\n                this._shaderValues.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_FOG_EXP);\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 雾化颜色。\r\n     */\r\n    get fogColor(): Color {\r\n        return this._shaderValues.getColor(Scene3D.FOGCOLOR);\r\n    }\r\n\r\n    set fogColor(value: Color) {\r\n        this._shaderValues.setColor(Scene3D.FOGCOLOR, value);\r\n    }\r\n\r\n    /**\r\n     * 雾化起始位置。\r\n     */\r\n    get fogStart(): number {\r\n        return this._fogParams.x;\r\n\r\n    }\r\n\r\n    set fogStart(value: number) {\r\n        this._fogParams.x = value;\r\n        this.fogParams = this._fogParams;\r\n    }\r\n\r\n    /**\r\n     * 雾化end范围。\r\n     */\r\n    get fogEnd(): number {\r\n        return this._fogParams.y;\r\n    }\r\n\r\n    set fogEnd(value: number) {\r\n        this._fogParams.y = value;\r\n        this.fogParams = this._fogParams;\r\n    }\r\n\r\n\r\n    /**\r\n     * 雾化密度\r\n     */\r\n    get fogDensity(): number {\r\n        return this._fogParams.z\r\n    }\r\n\r\n    set fogDensity(value: number) {\r\n        this._fogParams.z = value;\r\n        this.fogParams = this._fogParams;\r\n    }\r\n\r\n    /**@internal */\r\n    get fogParams(): Vector4 {\r\n        return this._shaderValues.getVector(Scene3D.FOGPARAMS);\r\n    }\r\n\r\n    set fogParams(value: Vector4) {\r\n        this._shaderValues.setVector(Scene3D.FOGPARAMS, value);\r\n    }\r\n\r\n    //0-2PI\r\n    set GIRotate(value: number) {\r\n        this._shaderValues.setNumber(Scene3D.GIRotate, value);\r\n    }\r\n\r\n    get GIRotate() {\r\n        return this._shaderValues.getNumber(Scene3D.GIRotate);\r\n    }\r\n\r\n    /**\r\n     * 环境光模式。\r\n     * 如果值为AmbientMode.SolidColor一般使用ambientColor作为环境光源，如果值为如果值为AmbientMode.SphericalHarmonics一般使用ambientSphericalHarmonics作为环境光源。\r\n     */\r\n    get ambientMode(): AmbientMode {\r\n        return this._sceneReflectionProb.ambientMode;\r\n    }\r\n\r\n    set ambientMode(value: AmbientMode) {\r\n        this._sceneReflectionProb.ambientMode = value;\r\n    }\r\n\r\n    get sceneReflectionProb(): ReflectionProbe {\r\n        return this._sceneReflectionProb;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    set sceneReflectionProb(value: ReflectionProbe) {\r\n        this._sceneReflectionProb = value;\r\n    }\r\n\r\n    /**\r\n     * 固定颜色环境光。\r\n     */\r\n    get ambientColor(): Color {\r\n        return this._sceneReflectionProb.ambientColor;\r\n    }\r\n\r\n    set ambientColor(value: Color) {\r\n        this._sceneReflectionProb.ambientColor = value;\r\n    }\r\n\r\n\r\n    /**\r\n     * 设置环境漫反射的强度\r\n     */\r\n    get ambientIntensity(): number {\r\n        return this._sceneReflectionProb.ambientIntensity;\r\n    }\r\n\r\n    set ambientIntensity(value: number) {\r\n        this._sceneReflectionProb.ambientIntensity = value;\r\n    }\r\n\r\n    /**\r\n     * 设置反射探针强度\r\n     */\r\n    get reflectionIntensity(): number {\r\n        return this._sceneReflectionProb.reflectionIntensity;\r\n    }\r\n\r\n    set reflectionIntensity(value: number) {\r\n        this._sceneReflectionProb.reflectionIntensity = value;\r\n    }\r\n\r\n    /**\r\n     * ambient sh\r\n     */\r\n    public get ambientSH(): Float32Array {\r\n        return this._sceneReflectionProb.ambientSH;\r\n    }\r\n    public set ambientSH(value: Float32Array) {\r\n        this._sceneReflectionProb.ambientSH = value;\r\n    }\r\n    /**\r\n     * ambient iblTexture\r\n     */\r\n    public get iblTex(): TextureCube {\r\n        return this._sceneReflectionProb.iblTex;\r\n\r\n    }\r\n    public set iblTex(value: TextureCube) {\r\n        this._sceneReflectionProb.iblTex = value\r\n    }\r\n\r\n    /**\r\n     * ambient rgbd compress\r\n     */\r\n    public get iblTexRGBD(): boolean {\r\n        return this._sceneReflectionProb.iblTexRGBD;\r\n    }\r\n    public set iblTexRGBD(value: boolean) {\r\n        this._sceneReflectionProb.iblTexRGBD = value;\r\n    }\r\n\r\n    /**\r\n     * 天空渲染器。\r\n     */\r\n    get skyRenderer(): SkyRenderer {\r\n        return this._skyRenderer;\r\n    }\r\n\r\n    /**\r\n     * 物理模拟器。\r\n     */\r\n    get physicsSimulation(): PhysicsSimulation {\r\n        return this._physicsSimulation;\r\n    }\r\n\r\n    /**\r\n     * 场景时钟。\r\n     * @override\r\n     */\r\n    get timer(): Timer {\r\n        return this._timer;\r\n    }\r\n\r\n    set timer(value: Timer) {\r\n        this._timer = value;\r\n    }\r\n\r\n    /**\r\n     * 光照贴图数组,返回值为浅拷贝数组。\r\n     */\r\n    get lightmaps(): Lightmap[] {\r\n        return this._lightmaps.slice();\r\n    }\r\n\r\n    set lightmaps(value: Lightmap[]) {\r\n        var maps: Lightmap[] = this._lightmaps;\r\n        if (maps) {\r\n            for (var i: number = 0, n: number = maps.length; i < n; i++) {\r\n                var map: Lightmap = maps[i];\r\n                map.lightmapColor && map.lightmapColor._removeReference();\r\n                map.lightmapDirection && map.lightmapDirection._removeReference();\r\n            }\r\n        }\r\n        if (value) {\r\n            var count: number = value.length;\r\n            maps.length = count;\r\n            for (i = 0; i < count; i++) {\r\n                var map: Lightmap = value[i];\r\n                map.lightmapColor && map.lightmapColor._addReference();\r\n                map.lightmapDirection && map.lightmapDirection._addReference();\r\n                maps[i] = map;\r\n            }\r\n        } else {\r\n            maps.length = 0;\r\n        }\r\n        this.event(Lightmap.ApplyLightmapEvent);\r\n\r\n    }\r\n\r\n    /**\r\n     * 阴影图更新频率（如果无自阴影，可以加大频率优化性能）\r\n     */\r\n    get shadowMapFrequency() {\r\n        return this._ShadowMapupdateFrequency;\r\n    }\r\n\r\n    set shadowMapFrequency(value: number) {\r\n        this._ShadowMapupdateFrequency = value;\r\n    }\r\n\r\n\r\n    /**\r\n     * 创建一个 <code>Scene3D</code> 实例。\r\n     */\r\n    constructor() {\r\n        super();\r\n\r\n        this._is3D = true;\r\n        this._componentDriver = new ComponentDriver();\r\n        this._timer = ILaya.timer;\r\n\r\n        if (LayaEnv.isConch && !(window as any).conchConfig.conchWebGL) {\r\n            this._nativeObj = new (window as any).conchSubmitScene3D(this.renderSubmit.bind(this));\r\n        }\r\n        if (Physics3D._bullet)\r\n            this._physicsSimulation = new PhysicsSimulation(Scene3D.physicsSettings);\r\n\r\n        this._shaderValues = LayaGL.renderOBJCreate.createShaderData(null);\r\n        this._shaderValues._defineDatas.addDefineDatas(Shader3D._configDefineValues);\r\n        if (Config3D._uniformBlock) {\r\n            //SceneUniformBlock\r\n            this._sceneUniformObj = UniformBufferObject.getBuffer(UniformBufferObject.UBONAME_SCENE, 0);\r\n            this._sceneUniformData = Scene3D.createSceneUniformBlock();\r\n            if (!this._sceneUniformObj) {\r\n                this._sceneUniformObj = UniformBufferObject.create(UniformBufferObject.UBONAME_SCENE, BufferUsage.Dynamic, this._sceneUniformData.getbyteLength(), true);\r\n            }\r\n            this._shaderValues._addCheckUBO(UniformBufferObject.UBONAME_SCENE, this._sceneUniformObj, this._sceneUniformData);\r\n            this._shaderValues.setUniformBuffer(Scene3D.SCENEUNIFORMBLOCK, this._sceneUniformObj);\r\n\r\n            //ShadowUniformBlock\r\n            //Scene3D._shadowCasterPass\r\n            this._shaderValues._addCheckUBO(UniformBufferObject.UBONAME_SHADOW, Scene3D._shadowCasterPass._castDepthBufferOBJ, Scene3D._shadowCasterPass._castDepthBufferData);\r\n            this._shaderValues.setUniformBuffer(Shader3D.propertyNameToID(UniformBufferObject.UBONAME_SHADOW), Scene3D._shadowCasterPass._castDepthBufferOBJ);\r\n        }\r\n        this._fogParams = new Vector4(300, 1000, 0.01, 0);\r\n        this.enableFog = false;\r\n        this.fogStart = 300;\r\n        this.fogEnd = 1000;\r\n        this.fogDensity = 0.01;\r\n        this.fogColor = new Color(0.7, 0.7, 0.7);\r\n        this.fogMode = FogMode.Linear;\r\n        this.GIRotate = 0;\r\n\r\n        this._scene = this;\r\n        if (Config3D.useBVHCull) {\r\n            let bvhConfig = new BVHSpatialConfig();\r\n            bvhConfig.Min_BVH_Build_Nums = Config3D.BVH_Min_Build_nums;\r\n            bvhConfig.limit_size = Config3D.BVH_limit_size;\r\n            bvhConfig.max_SpatialCount = Config3D.BVH_max_SpatialCount;\r\n            this._sceneRenderManager = new BVHSceneRenderManager(bvhConfig);\r\n            this._cullPass = new BVHCullPass();\r\n        } else {\r\n            this._sceneRenderManager = new SceneRenderManager();\r\n            this._cullPass = LayaGL.renderOBJCreate.createCullPass();\r\n        }\r\n\r\n        //this._cullPass = LayaGL.renderOBJCreate.createCullPass();\r\n\r\n        // if (Scene3D.octreeCulling)\r\n        // \tthis._octree = new BoundsOctree(Scene3D.octreeInitialSize, Scene3D.octreeInitialCenter, Scene3D.octreeMinNodeSize, Scene3D.octreeLooseness);\r\n        if (Config3D.debugFrustumCulling) {\r\n            // this._debugTool = new PixelLineSprite3D();\r\n            // var lineMaterial: PixelLineMaterial = new PixelLineMaterial();\r\n            // lineMaterial.renderQueue = Material.RENDERQUEUE_TRANSPARENT;\r\n            // lineMaterial.alphaTest = false;\r\n            // lineMaterial.depthWrite = false;\r\n            // lineMaterial.cull = RenderState.CULL_BACK;\r\n            // lineMaterial.blend = RenderState.BLEND_ENABLE_ALL;\r\n            // lineMaterial.blendSrc = RenderState.BLENDPARAM_SRC_ALPHA;\r\n            // lineMaterial.blendDst = RenderState.BLENDPARAM_ONE_MINUS_SRC_ALPHA;\r\n            // lineMaterial.depthTest = RenderState.DEPTHTEST_LESS;\r\n            // this._debugTool.pixelLineRenderer.sharedMaterial = lineMaterial;\r\n        }\r\n\r\n        this._volumeManager = new VolumeManager();\r\n        this._UI3DManager = new UI3DManager();\r\n        this.sceneReflectionProb = this._volumeManager.reflectionProbeManager.sceneReflectionProbe;\r\n\r\n        this._sceneReflectionProb.reflectionIntensity = 1.0;\r\n        this.ambientColor = new Color(0.212, 0.227, 0.259);\r\n    }\r\n\r\n    /**\r\n     *@internal\r\n     */\r\n    protected _update(): void {\r\n        var delta: number = this.timer._delta / 1000;\r\n        this._time += delta;\r\n        this._shaderValues.setNumber(Scene3D.TIME, this._time);\r\n        //Physics\r\n        let simulation: PhysicsSimulation = this._physicsSimulation;\r\n        if (LayaEnv.isPlaying) {\r\n            if (Physics3D._enablePhysics && !PhysicsSimulation.disableSimulation && Stat.enablePhysicsUpdate) {\r\n                simulation._updatePhysicsTransformFromRender();\r\n                PhysicsComponent._addUpdateList = false;//物理模拟器会触发_updateTransformComponent函数,不加入更新队列\r\n                //simulate physics\r\n                simulation._simulate(delta);\r\n                //update character sprite3D transforms from physics engine simulation\r\n                simulation._updateCharacters();\r\n                PhysicsComponent._addUpdateList = true;\r\n                //handle frame contacts\r\n                simulation._updateCollisions();\r\n                //send contact events\r\n                simulation.dispatchCollideEvent();\r\n            }\r\n        }\r\n\r\n        if (this._volumeManager.needreCaculateAllRenderObjects())\r\n            this._volumeManager.reCaculateAllRenderObjects(this._sceneRenderManager.list);\r\n        else\r\n            this._volumeManager.handleMotionlist();\r\n\r\n        this._componentDriver.callStart();\r\n        this._componentDriver.callUpdate();\r\n\r\n        this._componentDriver.callLateUpdate();\r\n        this._componentDriver.callDestroy();\r\n\r\n        this._sceneRenderManager.updateMotionObjects();\r\n\r\n        if (!this._renderByEditor)\r\n            this._UI3DManager.update();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _binarySearchIndexInCameraPool(camera: BaseCamera): number {\r\n        var start: number = 0;\r\n        var end: number = this._cameraPool.length - 1;\r\n        var mid: number;\r\n        while (start <= end) {\r\n            mid = Math.floor((start + end) / 2);\r\n            var midValue: number = this._cameraPool[mid]._renderingOrder;\r\n            if (midValue == camera._renderingOrder)\r\n                return mid;\r\n            else if (midValue > camera._renderingOrder)\r\n                end = mid - 1;\r\n            else\r\n                start = mid + 1;\r\n        }\r\n        return start;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _getGroup(): string {\r\n        return this._group;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _setGroup(value: string): void {\r\n        this._group = value;\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     */\r\n    protected _onActive(): void {\r\n        super._onActive();\r\n        ILaya.stage._scene3Ds.push(this);\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     */\r\n    protected _onInActive(): void {\r\n        super._onInActive();\r\n        var scenes: any[] = ILaya.stage._scene3Ds;\r\n        scenes.splice(scenes.indexOf(this), 1);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _prepareSceneToRender(): void {\r\n        var shaderValues: ShaderData = this._shaderValues;\r\n        var multiLighting: boolean = Config3D._multiLighting && Stat.enableMulLight;\r\n        if (multiLighting) {\r\n            var ligTex: Texture2D = Scene3D._lightTexture;\r\n            var ligPix: Float32Array = Scene3D._lightPixles;\r\n            const pixelWidth: number = ligTex.width;\r\n            const floatWidth: number = pixelWidth * 4;\r\n            var curCount: number = 0;\r\n            var dirCount: number = Stat.enableLight ? this._directionLights._length : 0;\r\n            var dirElements: DirectionLightCom[] = this._directionLights._elements;\r\n            if (dirCount > 0) {\r\n                var sunLightIndex: number = this._directionLights.getBrightestLight();//get the brightest light as sun\r\n                this._mainDirectionLight = dirElements[sunLightIndex];\r\n                this._directionLights.normalLightOrdering(sunLightIndex);\r\n                for (var i: number = 0; i < dirCount; i++, curCount++) {\r\n                    var dirLight: DirectionLightCom = dirElements[i];\r\n                    var dir: Vector3 = dirLight._direction;\r\n                    var intCor: Vector3 = dirLight._intensityColor;\r\n                    var off: number = floatWidth * curCount;\r\n                    intCor.x = Color.gammaToLinearSpace(dirLight.color.r);\r\n                    intCor.y = Color.gammaToLinearSpace(dirLight.color.g);\r\n                    intCor.z = Color.gammaToLinearSpace(dirLight.color.b);\r\n                    Vector3.scale(intCor, dirLight._intensity, intCor);\r\n                    (dirLight.owner as Sprite3D).transform.worldMatrix.getForward(dir);\r\n                    Vector3.normalize(dir, dir);//矩阵有缩放时需要归一化\r\n                    ligPix[off] = intCor.x;\r\n                    ligPix[off + 1] = intCor.y;\r\n                    ligPix[off + 2] = intCor.z;\r\n                    ligPix[off + 3] = dirLight._lightmapBakedType;//0: MIX  1:REALTIME\r\n                    ligPix[off + 4] = dir.x;\r\n                    ligPix[off + 5] = dir.y;\r\n                    ligPix[off + 6] = dir.z;\r\n                    // if (i == 0) {\r\n                    // \tthis._setShaderValue(Scene3D.SUNLIGHTDIRCOLOR, intCor);\r\n                    // \tthis._setShaderValue(Scene3D.SUNLIGHTDIRECTION, dir);\r\n                    // }\r\n                    if (i == 0) {\r\n                        this._sunColor = dirLight.color;\r\n                        this._sundir = dir;\r\n                    }\r\n                }\r\n                shaderValues.addDefine(Scene3DShaderDeclaration.SHADERDEFINE_DIRECTIONLIGHT);\r\n            }\r\n            else {\r\n                shaderValues.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_DIRECTIONLIGHT);\r\n            }\r\n\r\n            var poiCount: number = Stat.enableLight ? this._pointLights._length : 0;\r\n            if (poiCount > 0) {\r\n                var poiElements: PointLightCom[] = this._pointLights._elements;\r\n                var mainPointLightIndex: number = this._pointLights.getBrightestLight();\r\n                this._mainPointLight = poiElements[mainPointLightIndex];\r\n                this._pointLights.normalLightOrdering(mainPointLightIndex);\r\n                for (var i: number = 0; i < poiCount; i++, curCount++) {\r\n                    var poiLight: PointLightCom = poiElements[i];\r\n                    var pos: Vector3 = (poiLight.owner as Sprite3D).transform.position;\r\n                    var intCor: Vector3 = poiLight._intensityColor;\r\n                    var off: number = floatWidth * curCount;\r\n                    intCor.x = Color.gammaToLinearSpace(poiLight.color.r);\r\n                    intCor.y = Color.gammaToLinearSpace(poiLight.color.g);\r\n                    intCor.z = Color.gammaToLinearSpace(poiLight.color.b);\r\n                    Vector3.scale(intCor, poiLight._intensity, intCor);\r\n                    ligPix[off] = intCor.x;\r\n                    ligPix[off + 1] = intCor.y;\r\n                    ligPix[off + 2] = intCor.z;\r\n                    ligPix[off + 3] = poiLight.range;\r\n                    ligPix[off + 4] = pos.x;\r\n                    ligPix[off + 5] = pos.y;\r\n                    ligPix[off + 6] = pos.z;\r\n                    ligPix[off + 7] = poiLight._lightmapBakedType;//0: MIX  1:REALTIME\r\n                }\r\n                shaderValues.addDefine(Scene3DShaderDeclaration.SHADERDEFINE_POINTLIGHT);\r\n            }\r\n            else {\r\n                shaderValues.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_POINTLIGHT);\r\n            }\r\n\r\n            var spoCount: number = Stat.enableLight ? this._spotLights._length : 0;\r\n            if (spoCount > 0) {\r\n                var spoElements: SpotLightCom[] = this._spotLights._elements;\r\n                var mainSpotLightIndex: number = this._spotLights.getBrightestLight();\r\n                this._mainSpotLight = spoElements[mainSpotLightIndex];\r\n                this._spotLights.normalLightOrdering(mainSpotLightIndex)\r\n                for (var i: number = 0; i < spoCount; i++, curCount++) {\r\n                    var spoLight: SpotLightCom = spoElements[i];\r\n                    var dir: Vector3 = spoLight._direction;\r\n                    var pos: Vector3 = (spoLight.owner as Sprite3D).transform.position;\r\n                    var intCor: Vector3 = spoLight._intensityColor;\r\n                    var off: number = floatWidth * curCount;\r\n                    intCor.x = Color.gammaToLinearSpace(spoLight.color.r);\r\n                    intCor.y = Color.gammaToLinearSpace(spoLight.color.g);\r\n                    intCor.z = Color.gammaToLinearSpace(spoLight.color.b);\r\n                    Vector3.scale(intCor, spoLight._intensity, intCor);\r\n                    (spoLight.owner as Sprite3D).transform.worldMatrix.getForward(dir);\r\n                    Vector3.normalize(dir, dir);\r\n                    ligPix[off] = intCor.x;\r\n                    ligPix[off + 1] = intCor.y;\r\n                    ligPix[off + 2] = intCor.z;\r\n                    ligPix[off + 3] = spoLight.range;\r\n                    ligPix[off + 4] = pos.x;\r\n                    ligPix[off + 5] = pos.y;\r\n                    ligPix[off + 6] = pos.z;\r\n                    ligPix[off + 7] = spoLight.spotAngle * Math.PI / 180;\r\n                    ligPix[off + 8] = dir.x;\r\n                    ligPix[off + 9] = dir.y;\r\n                    ligPix[off + 10] = dir.z;\r\n                    ligPix[off + 11] = spoLight._lightmapBakedType;//0: MIX  1:REALTIME\r\n                }\r\n                shaderValues.addDefine(Scene3DShaderDeclaration.SHADERDEFINE_SPOTLIGHT);\r\n            }\r\n            else {\r\n                shaderValues.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_SPOTLIGHT);\r\n            }\r\n\r\n            (curCount > 0) && (ligTex.setSubPixelsData(0, 0, pixelWidth, curCount, ligPix, 0, false, false, false));\r\n            shaderValues.setTexture(Scene3D.LIGHTBUFFER, ligTex);\r\n            shaderValues.setInt(Scene3D.DIRECTIONLIGHTCOUNT, this._directionLights._length);\r\n            shaderValues.setTexture(Scene3D.CLUSTERBUFFER, Cluster.instance._clusterTexture);\r\n        }\r\n        else {\r\n            if (this._directionLights._length > 0 && Stat.enableLight) {\r\n                var dirLight: DirectionLightCom = this._directionLights._elements[0];\r\n                this._mainDirectionLight = dirLight;\r\n                dirLight._intensityColor.x = Color.gammaToLinearSpace(dirLight.color.r);\r\n                dirLight._intensityColor.y = Color.gammaToLinearSpace(dirLight.color.g);\r\n                dirLight._intensityColor.z = Color.gammaToLinearSpace(dirLight.color.b);\r\n                Vector3.scale(dirLight._intensityColor, dirLight._intensity, dirLight._intensityColor);\r\n\r\n                (dirLight.owner as Sprite3D).transform.worldMatrix.getForward(dirLight._direction);\r\n                Vector3.normalize(dirLight._direction, dirLight._direction);\r\n                shaderValues.setVector3(Scene3D.LIGHTDIRCOLOR, dirLight._intensityColor);\r\n                shaderValues.setVector3(Scene3D.LIGHTDIRECTION, dirLight._direction);\r\n                shaderValues.setInt(Scene3D.LIGHTMODE, dirLight._lightmapBakedType);\r\n                if (i == 0) {\r\n                    this._sunColor = dirLight.color;\r\n                    this._sundir = dirLight._direction;\r\n                }\r\n                // this._setShaderValue(Scene3D.SUNLIGHTDIRCOLOR, dirLight._intensityColor);\r\n                // this._setShaderValue(Scene3D.SUNLIGHTDIRECTION, dirLight._direction);\r\n                shaderValues.addDefine(Scene3DShaderDeclaration.SHADERDEFINE_DIRECTIONLIGHT);\r\n            }\r\n            else {\r\n                shaderValues.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_DIRECTIONLIGHT);\r\n            }\r\n            if (this._pointLights._length > 0 && Stat.enableLight) {\r\n                var poiLight: PointLightCom = this._pointLights._elements[0];\r\n                this._mainPointLight = poiLight;\r\n                poiLight._intensityColor.x = Color.gammaToLinearSpace(poiLight.color.r);\r\n                poiLight._intensityColor.y = Color.gammaToLinearSpace(poiLight.color.g);\r\n                poiLight._intensityColor.z = Color.gammaToLinearSpace(poiLight.color.b);\r\n                Vector3.scale(poiLight._intensityColor, poiLight._intensity, poiLight._intensityColor);\r\n                shaderValues.setVector3(Scene3D.POINTLIGHTCOLOR, poiLight._intensityColor);\r\n                shaderValues.setVector3(Scene3D.POINTLIGHTPOS, (poiLight.owner as Sprite3D).transform.position);\r\n                shaderValues.setNumber(Scene3D.POINTLIGHTRANGE, poiLight.range);\r\n                shaderValues.setInt(Scene3D.POINTLIGHTMODE, poiLight._lightmapBakedType);\r\n                shaderValues.addDefine(Scene3DShaderDeclaration.SHADERDEFINE_POINTLIGHT);\r\n            }\r\n            else {\r\n                shaderValues.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_POINTLIGHT);\r\n            }\r\n            if (this._spotLights._length > 0 && Stat.enableLight) {\r\n                var spotLight: SpotLightCom = this._spotLights._elements[0];\r\n                this._mainSpotLight = spotLight;\r\n                spotLight._intensityColor.x = Color.gammaToLinearSpace(spotLight.color.r);\r\n                spotLight._intensityColor.y = Color.gammaToLinearSpace(spotLight.color.g);\r\n                spotLight._intensityColor.z = Color.gammaToLinearSpace(spotLight.color.b);\r\n                Vector3.scale(spotLight._intensityColor, spotLight._intensity, spotLight._intensityColor);\r\n                shaderValues.setVector3(Scene3D.SPOTLIGHTCOLOR, spotLight._intensityColor);\r\n                shaderValues.setVector3(Scene3D.SPOTLIGHTPOS, (spotLight.owner as Sprite3D).transform.position);\r\n                (spotLight.owner as Sprite3D).transform.worldMatrix.getForward(spotLight._direction);\r\n                Vector3.normalize(spotLight._direction, spotLight._direction);\r\n                shaderValues.setVector3(Scene3D.SPOTLIGHTDIRECTION, spotLight._direction);\r\n                shaderValues.setNumber(Scene3D.SPOTLIGHTRANGE, spotLight.range);\r\n                shaderValues.setNumber(Scene3D.SPOTLIGHTSPOTANGLE, spotLight.spotAngle * Math.PI / 180);\r\n                shaderValues.setInt(Scene3D.SPOTLIGHTMODE, spotLight._lightmapBakedType);\r\n                shaderValues.addDefine(Scene3DShaderDeclaration.SHADERDEFINE_SPOTLIGHT);\r\n            }\r\n            else {\r\n                shaderValues.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_SPOTLIGHT);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _cullInfoCamera: Camera\r\n    get cullInfoCamera(): Camera {\r\n        return this._cullInfoCamera;\r\n    }\r\n    /**\r\n     * scence外的Camera渲染场景,需要设置这个接口\r\n     * @param camera \r\n     */\r\n    _setCullCamera(camera: Camera) {\r\n        this._cullInfoCamera = camera;\r\n    }\r\n\r\n    /**\r\n     * 重新计算CullCamera\r\n     */\r\n    recaculateCullCamera() {\r\n        this._cullInfoCamera = this._cameraPool[0] as Camera;\r\n        this._cameraPool.forEach(element => {\r\n            if (this.cullInfoCamera.maxlocalYDistance < (element as Camera).maxlocalYDistance) {\r\n                this._cullInfoCamera = element as Camera;\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _addCamera(camera: BaseCamera): void {\r\n        var index: number = this._binarySearchIndexInCameraPool(camera);\r\n        var order: number = camera._renderingOrder;\r\n        var count: number = this._cameraPool.length;\r\n        while (index < count && this._cameraPool[index]._renderingOrder <= order)\r\n            index++;\r\n        this._cameraPool.splice(index, 0, camera);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _removeCamera(camera: BaseCamera): void {\r\n        this._cameraPool.splice(this._cameraPool.indexOf(camera), 1);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _preCulling(context: RenderContext3D, camera: Camera): void {\r\n        this._clearRenderQueue();\r\n        var cameraCullInfo: ICameraCullInfo = FrustumCulling._cameraCullInfo;\r\n        var cameraPos = cameraCullInfo.position = camera._transform.position;\r\n        cameraCullInfo.cullingMask = camera.cullingMask;\r\n        cameraCullInfo.staticMask = camera.staticMask;\r\n        cameraCullInfo.boundFrustum = camera.boundFrustum;\r\n        cameraCullInfo.useOcclusionCulling = camera.useOcclusionCulling;\r\n        this._cullPass.cullByCameraCullInfo(cameraCullInfo, this.sceneRenderableManager);\r\n        //addQueue\r\n        let list = this._cullPass.cullList;\r\n        let element = list.elements;\r\n        for (let i: number = 0; i < list.length; i++) {\r\n            let render = element[i];\r\n            render.distanceForSort = Vector3.distance(render.bounds.getCenter(), cameraPos);//TODO:合并计算浪费,或者合并后取平均值\r\n            var elements: RenderElement[] = render._renderElements;\r\n            for (var j: number = 0, m: number = elements.length; j < m; j++)\r\n                elements[j]._update(this, context, context.customShader, context.replaceTag);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @param cullInfo \r\n     * @param context \r\n     */\r\n    _directLightShadowCull(cullInfo: IShadowCullInfo, context: RenderContext3D) {\r\n        this._clearRenderQueue();\r\n        const position: Vector3 = cullInfo.position;\r\n        this._cullPass.cullByShadowCullInfo(cullInfo, this.sceneRenderableManager);\r\n        let list = this._cullPass.cullList;\r\n        let element = list.elements;\r\n        for (let i: number = 0; i < list.length; i++) {\r\n            let render = element[i];\r\n            render.distanceForSort = Vector3.distance(render.bounds.getCenter(), position);//TODO:合并计算浪费,或者合并后取平均值\r\n            var elements: RenderElement[] = render._renderElements;\r\n            for (var j: number = 0, m: number = elements.length; j < m; j++)\r\n                elements[j]._update(this, context, null, null);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @param cameraCullInfo \r\n     * @param context \r\n     */\r\n    _sportLightShadowCull(cameraCullInfo: ICameraCullInfo, context: RenderContext3D) {\r\n        this._clearRenderQueue();\r\n        this._cullPass.cullingSpotShadow(cameraCullInfo, this.sceneRenderableManager);\r\n        let list = this._cullPass.cullList;\r\n        let element = list.elements;\r\n        for (var i: number = 0, n: number = list.length; i < n; i++) {\r\n            var render = element[i];\r\n            render.distanceForSort = Vector3.distance(render.bounds.getCenter(), cameraCullInfo.position);\r\n            var elements: RenderElement[] = render._renderElements;\r\n            for (var j: number = 0, m: number = elements.length; j < m; j++)\r\n                elements[j]._update(this, context, null, null);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _clear(state: RenderContext3D): void {\r\n        var viewport: Viewport = state.viewport;\r\n        var camera: Camera = <Camera>state.camera;\r\n        var renderTex: RenderTexture = camera._getRenderTexture();\r\n        var vpX: number, vpY: number;\r\n        var vpW: number = viewport.width;\r\n        var vpH: number = viewport.height;\r\n        let needInternalRT = camera._needInternalRenderTexture();\r\n\r\n        if (needInternalRT) {\r\n            vpX = 0;\r\n            vpY = 0;\r\n        }\r\n        else {\r\n            if (camera.renderTarget) {\r\n                vpX = viewport.x;\r\n                vpY = viewport.y;\r\n            }\r\n            else {\r\n                vpX = viewport.x;\r\n                vpY = camera._getCanvasHeight() - viewport.y - vpH;\r\n            }\r\n        }\r\n\r\n        LayaGL.renderEngine.viewport(vpX, vpY, vpW, vpH);\r\n        LayaGL.renderEngine.scissor(vpX, vpY, vpW, vpH);\r\n        state.changeViewport(vpX, vpY, vpW, vpH);\r\n        state.changeScissor(vpX, vpY, vpW, vpH);\r\n        Camera._context3DViewPortCatch.set(vpX, vpY, vpW, vpH);\r\n        Camera._contextScissorPortCatch.setValue(vpX, vpY, vpW, vpH);\r\n\r\n        var clearFlag: number = camera.clearFlag;\r\n        if (clearFlag === CameraClearFlags.Sky && !(camera.skyRenderer._isAvailable() || this._skyRenderer._isAvailable()))\r\n            clearFlag = CameraClearFlags.SolidColor;\r\n        let clearConst: number = 0;\r\n        let stencilFlag = renderTex.depthStencilFormat == RenderTargetFormat.DEPTHSTENCIL_24_8 ? RenderClearFlag.Stencil : 0;\r\n        switch (clearFlag) {\r\n            case CameraClearFlags.SolidColor:\r\n                clearConst = RenderClearFlag.Color | RenderClearFlag.Depth | stencilFlag;\r\n                break;\r\n            case CameraClearFlags.DepthOnly:\r\n            case CameraClearFlags.Sky:\r\n                clearConst = RenderClearFlag.Depth | stencilFlag;\r\n                break;\r\n            case CameraClearFlags.Nothing:\r\n                clearConst = 0;\r\n                break;\r\n            case CameraClearFlags.ColorOnly:\r\n                clearConst = RenderClearFlag.Color;\r\n                break;\r\n\r\n        }\r\n\r\n        // todo other color gamut\r\n        let clearColor = camera._linearClearColor;\r\n        if (renderTex.gammaCorrection != 1) {\r\n            clearColor = camera.clearColor;\r\n        }\r\n\r\n        LayaGL.renderEngine.clearRenderTexture(clearConst, clearColor, 1);\r\n    }\r\n\r\n    /**\r\n     * @internal 渲染Scene的各个管线\r\n     */\r\n    _renderScene(context: RenderContext3D, renderFlag: number): void {\r\n        var camera: Camera = <Camera>context.camera;\r\n        switch (renderFlag) {\r\n            case Scene3D.SCENERENDERFLAG_RENDERQPAQUE:\r\n                Stat.opaqueDrawCall += this._opaqueQueue.renderQueue(context);\r\n                break;\r\n            case Scene3D.SCENERENDERFLAG_SKYBOX:\r\n                if (camera.clearFlag === CameraClearFlags.Sky) {\r\n                    if (camera.skyRenderer._isAvailable())\r\n                        camera.skyRenderer._render(context);\r\n                    else if (this._skyRenderer._isAvailable())\r\n                        this._skyRenderer._render(context);\r\n                }\r\n                break;\r\n            case Scene3D.SCENERENDERFLAG_RENDERTRANSPARENT:\r\n                Stat.transDrawCall += this._transparentQueue.renderQueue(context);\r\n                if (Config3D.debugFrustumCulling) {\r\n                    // var renderElements: RenderElement[] = this._debugTool._render._renderElements;\r\n                    // for (var i: number = 0, n: number = renderElements.length; i < n; i++) {\r\n                    //     context.drawRenderElement(renderElements[i]);\r\n                    // }\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     * @internal\r\n     */\r\n    _parse(data: any, spriteMap: any): void {\r\n        var lightMapsData: any[] = data.lightmaps;\r\n        if (lightMapsData) {\r\n            var lightMapCount: number = lightMapsData.length;\r\n            var lightmaps: Lightmap[] = new Array(lightMapCount);\r\n            for (var i: number = 0; i < lightMapCount; i++) {\r\n                var lightMap: Lightmap = new Lightmap();\r\n                var lightMapData: any = lightMapsData[i];\r\n                if (lightMapData.path) {//兼容\r\n                    lightMap.lightmapColor = Loader.getTexture2D(lightMapData.path);\r\n                }\r\n                else {\r\n                    lightMap.lightmapColor = Loader.getTexture2D(lightMapData.color.path);\r\n                    if (lightMapData.direction)\r\n                        lightMap.lightmapDirection = Loader.getTexture2D(lightMapData.direction.path);\r\n                }\r\n                lightmaps[i] = lightMap;\r\n            }\r\n            this.lightmaps = lightmaps;\r\n        }\r\n        var skyData: any = data.sky;\r\n        if (skyData) {\r\n            this._skyRenderer.material = Loader.getRes(skyData.material.path);\r\n            switch (skyData.mesh) {\r\n                case \"SkyBox\":\r\n                    this._skyRenderer.mesh = SkyBox.instance;\r\n                    break;\r\n                case \"SkyDome\":\r\n                    this._skyRenderer.mesh = SkyDome.instance;\r\n                    break;\r\n                default:\r\n                    this.skyRenderer.mesh = SkyBox.instance;\r\n            }\r\n        }\r\n        this.enableFog = data.enableFog;\r\n        this.fogStart = data.fogStart;\r\n        this.fogRange = data.fogRange;\r\n        var fogColorData: any[] = data.fogColor;\r\n        if (fogColorData) {\r\n            var fogCol: Color = this.fogColor;\r\n            fogCol.fromArray(fogColorData);\r\n            this.fogColor = fogCol;\r\n        }\r\n        // 环境光 模式\r\n        var ambientModeData: AmbientMode = data.ambientMode;\r\n        // 单颜色\r\n        var ambientColorData: any[] = data.ambientColor;\r\n        if (ambientColorData) {\r\n            var ambCol: Color = this.ambientColor;\r\n            ambCol.fromArray(ambientColorData);\r\n            this.ambientColor = ambCol;\r\n        }\r\n        if (ambientModeData == AmbientMode.TripleColor) {\r\n            // 三颜色\r\n            let ambientSkyColor: number[] = data.ambientSkyColor;\r\n            let tempV3sky = new Vector3();\r\n            tempV3sky.fromArray(ambientSkyColor);\r\n\r\n            let ambientEquatorColor: number[] = data.ambientEquatorColor;\r\n            let tempV3Equaltor = new Vector3();\r\n            tempV3Equaltor.fromArray(ambientEquatorColor);\r\n\r\n            let ambientGroundColor: number[] = data.ambientGroundColor;\r\n            let tempV3Ground = new Vector3();\r\n            tempV3Ground.fromArray(ambientGroundColor);\r\n\r\n            this._sceneReflectionProb.setGradientAmbient(tempV3sky, tempV3Equaltor, tempV3Ground);\r\n        }\r\n        // skybox\r\n        var ambientSphericalHarmonicsData: Array<number> = data.ambientSphericalHarmonics;\r\n        if (ambientSphericalHarmonicsData) {\r\n            var ambientSH: SphericalHarmonicsL2 = new SphericalHarmonicsL2();\r\n            for (var i: number = 0; i < 3; i++) {\r\n                var off: number = i * 9;\r\n                ambientSH.setCoefficients(i, ambientSphericalHarmonicsData[off], ambientSphericalHarmonicsData[off + 1], ambientSphericalHarmonicsData[off + 2], ambientSphericalHarmonicsData[off + 3], ambientSphericalHarmonicsData[off + 4], ambientSphericalHarmonicsData[off + 5], ambientSphericalHarmonicsData[off + 6], ambientSphericalHarmonicsData[off + 7], ambientSphericalHarmonicsData[off + 8]);\r\n            }\r\n            this._sceneReflectionProb.ambientSphericalHarmonics = ambientSH;\r\n        }\r\n        (ambientModeData != undefined) && (this.ambientMode = ambientModeData);\r\n        var reflectionData: string = data.reflection;\r\n        (reflectionData != undefined) && (this._sceneReflectionProb.reflectionTexture = Loader.getRes(reflectionData));\r\n        var reflectionDecodingFormatData: number = data.reflectionDecodingFormat;\r\n        (reflectionDecodingFormatData != undefined) && (this._sceneReflectionProb.reflectionDecodingFormat = reflectionDecodingFormatData);\r\n        var ambientSphericalHarmonicsIntensityData: number = data.ambientSphericalHarmonicsIntensity;\r\n        (ambientSphericalHarmonicsIntensityData != undefined) && (this._sceneReflectionProb.ambientIntensity = ambientSphericalHarmonicsIntensityData);\r\n        var reflectionIntensityData: number = data.reflectionIntensity;\r\n        (reflectionIntensityData != undefined) && (this._sceneReflectionProb.reflectionIntensity = reflectionIntensityData);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _addRenderObject(render: any): void {\r\n        // if (this._octree && render._supportOctree) {\r\n        // \tthis._octree.addRender(render);\r\n        // } else {\r\n        //this._renders.add(render);\r\n        this._sceneRenderManager.addRenderObject(render);\r\n        // }\r\n        render._addReflectionProbeUpdate();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _removeRenderObject(render: any): void {\r\n        // if (this._octree && render._supportOctree) {\r\n        // \tthis._octree.removeRender(render);\r\n        // } else {\r\n        this._sceneRenderManager.removeRenderObject(render);\r\n        //this._renders.remove(render);\r\n        // }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _getRenderQueue(index: number): IRenderQueue {\r\n        if (index <= 2500)//2500作为队列临界点\r\n            return this._opaqueQueue;\r\n        else\r\n            return this._transparentQueue;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _clearRenderQueue(): void {\r\n        this._opaqueQueue.clear();\r\n        this._transparentQueue.clear();\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     * 删除资源\r\n     */\r\n    destroy(destroyChild: boolean = true): void {\r\n        if (this._destroyed)\r\n            return;\r\n        super.destroy(destroyChild);\r\n        this._nativeObj = null;\r\n        this._skyRenderer.destroy();\r\n        this._skyRenderer = null;\r\n        this._directionLights = null;\r\n        this._pointLights = null;\r\n        this._spotLights = null;\r\n        this._alternateLights = null;\r\n        this._shaderValues.destroy();\r\n        this._opaqueQueue.destroy();\r\n        this._transparentQueue.destroy();\r\n        (RenderContext3D._instance.scene == this) && (RenderContext3D._instance.scene = null);\r\n        this._shaderValues = null;\r\n        this.sceneRenderableManager.destroy();\r\n        this._sceneRenderManager = null\r\n        this._cameraPool = null;\r\n        // this._octree = null;\r\n        this._physicsSimulation && this._physicsSimulation._destroy();\r\n        // this._reflection._removeReference();\r\n        // this._reflection = null;\r\n        var maps: Lightmap[] = this._lightmaps;\r\n        if (maps) {\r\n            for (var i: number = 0, n: number = maps.length; i < n; i++) {\r\n                var map: Lightmap = maps[i];\r\n                map.lightmapColor && map.lightmapColor._removeReference();\r\n                map.lightmapDirection && map.lightmapDirection._removeReference();\r\n            }\r\n        }\r\n        //this._sceneUniformData.destroy();\r\n        this._lightmaps = null;\r\n        this._volumeManager.destroy();\r\n        this._componentDriver.callDestroy();\r\n\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     * @internal\r\n     */\r\n    render(ctx: Context): void {\r\n        if (this._children.length > 0) {\r\n            ctx.addRenderObject3D(this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 渲染入口\r\n     */\r\n    renderSubmit(): number {\r\n        if (this._renderByEditor) return 1;\r\n        BufferState._curBindedBufferState && BufferState._curBindedBufferState.unBind();\r\n        this._prepareSceneToRender();\r\n        var i: number, n: number, n1: number;\r\n        Scene3D._updateMark++;\r\n        // if (this._sceneUniformData) {\r\n        // \tthis._sceneUniformObj && this._sceneUniformObj.setDataByUniformBufferData(this._sceneUniformData);\r\n        // }\r\n        for (i = 0, n = this._cameraPool.length, n1 = n - 1; i < n; i++) {\r\n            // if (Render.supportWebGLPlusRendering)\r\n            // \tShaderData.setRuntimeValueMode((i == n1) ? true : false);\r\n\r\n            var camera: Camera = (<Camera>this._cameraPool[i]);\r\n            if (camera.renderTarget)\r\n                (camera.enableBuiltInRenderTexture = false);//TODO:可能会有性能问题\r\n            else\r\n                camera.enableBuiltInRenderTexture = true;\r\n\r\n            camera.enableRender && camera.render();\r\n            Scene3D._blitTransRT = null;\r\n\r\n            if (camera.enableRender && !camera.renderTarget) {\r\n                (Scene3D._blitTransRT = camera._internalRenderTexture);\r\n                var canvasWidth: number = camera._getCanvasWidth(), canvasHeight: number = camera._getCanvasHeight();\r\n                Scene3D._blitOffset.setValue(camera.viewport.x / canvasWidth, camera.viewport.y / canvasHeight, camera.viewport.width / canvasWidth, camera.viewport.height / canvasHeight);\r\n                this.blitMainCanvans(Scene3D._blitTransRT, camera.normalizedViewport, camera);\r\n            }\r\n            if (!camera._cacheDepth) {\r\n                camera.enableRender && camera._needInternalRenderTexture() && (!camera._internalRenderTexture._inPool) && RenderTexture.recoverToPool(camera._internalRenderTexture);\r\n            }\r\n\r\n        }\r\n        Context.set2DRenderConfig();//还原2D配置\r\n        RenderTexture.clearPool();\r\n        return 1;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @param source \r\n     * @param normalizeViewPort \r\n     * @param camera \r\n     * @returns \r\n     */\r\n    blitMainCanvans(source: BaseTexture, normalizeViewPort: Viewport, camera: Camera) {\r\n        if (!source)\r\n            return;\r\n        Scene3D.mainCavansViewPort.x = RenderContext3D.clientWidth * normalizeViewPort.x | 0;\r\n        Scene3D.mainCavansViewPort.y = RenderContext3D.clientHeight * normalizeViewPort.y | 0;\r\n        Scene3D.mainCavansViewPort.width = RenderContext3D.clientWidth * normalizeViewPort.width | 0;\r\n        Scene3D.mainCavansViewPort.height = RenderContext3D.clientHeight * normalizeViewPort.height | 0;\r\n        source.filterMode = FilterMode.Bilinear;\r\n        if (camera.fxaa)\r\n            BlitFrameBufferCMD.shaderdata.addDefine(BaseCamera.SHADERDEFINE_FXAA);\r\n        var cmd = BlitFrameBufferCMD.create(source, null, Scene3D.mainCavansViewPort, null, null, BlitFrameBufferCMD.shaderdata);\r\n        cmd.run();\r\n        cmd.recover();\r\n        BlitFrameBufferCMD.shaderdata.removeDefine(BaseCamera.SHADERDEFINE_FXAA);\r\n    }\r\n\r\n    /**\r\n     * 获得渲染类型\r\n     */\r\n    getRenderType(): number {\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * 删除渲染\r\n     */\r\n    releaseRender(): void {\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    reUse(context: Context, pos: number): number {\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * 设置全局渲染数据\r\n     * @param name 数据对应着色器名字\r\n     * @param shaderDataType 渲染数据类型\r\n     * @param value 渲染数据值\r\n     */\r\n    setGlobalShaderValue(name: string, type: ShaderDataType, value: ShaderDataItem) {\r\n        var shaderOffset = Shader3D.propertyNameToID(name);\r\n        this._shaderValues.setShaderData(shaderOffset, type, value);\r\n    }\r\n    //--------------------------------------------------------deprecated------------------------------------------------------------------------\r\n\r\n    /**\r\n     * @deprecated\r\n     */\r\n    get fogRange(): number {\r\n        return this._fogParams.y - this.fogParams.x;\r\n    }\r\n\r\n    set fogRange(value: number) {\r\n        this._fogParams.y = value + this.fogParams.x;\r\n        this.fogParams = this._fogParams;\r\n    }\r\n\r\n    /**\r\n     * @deprecated\r\n     * 设置光照贴图。\r\n     * @param value 光照贴图。\r\n     */\r\n    setlightmaps(value: Texture2D[]): void {\r\n        var maps: Lightmap[] = this._lightmaps;\r\n        for (var i: number = 0, n: number = maps.length; i < n; i++)\r\n            maps[i].lightmapColor._removeReference();\r\n        if (value) {\r\n            var count: number = value.length;\r\n            maps.length = count;\r\n            for (i = 0; i < count; i++) {\r\n                var lightMap: Texture2D = value[i];\r\n                lightMap._addReference();\r\n                (maps[i]) || (maps[i] = new Lightmap());\r\n                maps[i].lightmapColor = lightMap;\r\n            }\r\n        } else {\r\n            throw new Error(\"Scene3D: value value can't be null.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @deprecated\r\n     * 获取光照贴图浅拷贝列表。\r\n     * @return 获取光照贴图浅拷贝列表。\r\n     */\r\n    getlightmaps(): Texture2D[] {\r\n        var lightmapColors: Texture2D[] = new Array(this._lightmaps.length);\r\n        for (var i: number = 0; i < this._lightmaps.length; i++) {\r\n            lightmapColors[i] = this._lightmaps[i].lightmapColor;\r\n        }\r\n        return lightmapColors;//slice()防止修改数组内容\r\n    }\r\n\r\n\r\n}","\r\nimport { Config3D } from \"../../../Config3D\";\r\nimport { ILaya3D } from \"../../../ILaya3D\";\r\nimport { Node } from \"../../display/Node\";\r\nimport { Event } from \"../../events/Event\";\r\nimport { LayaGL } from \"../../layagl/LayaGL\";\r\nimport { BaseTexture } from \"../../resource/BaseTexture\";\r\nimport { PostProcess } from \"../component/PostProcess\";\r\nimport { DepthPass, DepthTextureMode } from \"../depthMap/DepthPass\";\r\nimport { Cluster } from \"../graphics/renderPath/Cluster\";\r\nimport { BoundFrustum } from \"../math/BoundFrustum\";\r\nimport { Ray } from \"../math/Ray\";\r\nimport { Viewport } from \"../math/Viewport\";\r\nimport { Picker } from \"../utils/Picker\";\r\nimport { BaseCamera } from \"./BaseCamera\";\r\nimport { DirectionLightCom } from \"./light/DirectionLightCom\";\r\nimport { ShadowMode } from \"./light/ShadowMode\";\r\nimport { ShadowUtils } from \"./light/ShadowUtils\";\r\nimport { BlitScreenQuadCMD } from \"./render/command/BlitScreenQuadCMD\";\r\nimport { CommandBuffer } from \"./render/command/CommandBuffer\";\r\nimport { RenderContext3D } from \"./render/RenderContext3D\";\r\nimport { Scene3D } from \"./scene/Scene3D\";\r\nimport { Scene3DShaderDeclaration } from \"./scene/Scene3DShaderDeclaration\";\r\nimport { Transform3D } from \"./Transform3D\";\r\nimport { FilterMode } from \"../../RenderEngine/RenderEnum/FilterMode\";\r\nimport { RenderTargetFormat } from \"../../RenderEngine/RenderEnum/RenderTargetFormat\";\r\nimport { RenderCapable } from \"../../RenderEngine/RenderEnum/RenderCapable\";\r\nimport { Shader3D } from \"../../RenderEngine/RenderShader/Shader3D\";\r\nimport { ILaya } from \"../../../ILaya\";\r\nimport { ShadowLightType } from \"../shadowMap/ShadowLightType\";\r\nimport { TextureCube } from \"../../resource/TextureCube\";\r\nimport { TextureFormat } from \"../../RenderEngine/RenderEnum/TextureFormat\";\r\nimport { Texture2D } from \"../../resource/Texture2D\";\r\nimport { Matrix4x4 } from \"../../maths/Matrix4x4\";\r\nimport { Quaternion } from \"../../maths/Quaternion\";\r\nimport { Vector2 } from \"../../maths/Vector2\";\r\nimport { Vector3 } from \"../../maths/Vector3\";\r\nimport { Vector4 } from \"../../maths/Vector4\";\r\nimport { RenderTexture } from \"../../resource/RenderTexture\";\r\nimport { Stat } from \"../../utils/Stat\";\r\n\r\n/**\r\n * 相机清除标记。\r\n */\r\nexport enum CameraClearFlags {\r\n    /**固定颜色。*/\r\n    SolidColor,\r\n    /**天空。*/\r\n    Sky,\r\n    /**仅深度。*/\r\n    DepthOnly,\r\n    /**不清除。*/\r\n    Nothing,\r\n    /**只清理颜色 */\r\n    ColorOnly,\r\n}\r\n\r\n/**\r\n * 相机事件标记\r\n */\r\nexport enum CameraEventFlags {\r\n    //BeforeDepthTexture,\r\n    //AfterDepthTexture,\r\n    //BeforeDepthNormalsTexture,\r\n    //AfterDepthNormalTexture,\r\n    /**在渲染非透明物体之前。*/\r\n    BeforeForwardOpaque = 0,\r\n    /**在渲染天空盒之前。*/\r\n    BeforeSkyBox = 2,\r\n    /**在渲染透明物体之前。*/\r\n    BeforeTransparent = 4,\r\n    /**在后期处理之前。*/\r\n    BeforeImageEffect = 6,\r\n    /**所有渲染之后。*/\r\n    AfterEveryThing = 8,\r\n}\r\n\r\n/**\r\n * <code>Camera</code> 类用于创建摄像机。\r\n */\r\nexport class Camera extends BaseCamera {\r\n    /** @internal */\r\n    static _tempVector20: Vector2 = new Vector2();\r\n    /** @internal*/\r\n    static _context3DViewPortCatch: Viewport = new Viewport(0, 0, 0, 0);\r\n    static _contextScissorPortCatch: Vector4 = new Vector4(0, 0, 0, 0);\r\n\r\n    /** @internal */\r\n    static __updateMark: number = 0;\r\n    static set _updateMark(value: number) {\r\n        Camera.__updateMark = value;\r\n    }\r\n\r\n    static get _updateMark(): number {\r\n        return Camera.__updateMark;\r\n    }\r\n\r\n    /** @internal 深度贴图管线*/\r\n    static depthPass: DepthPass;\r\n\r\n    /**\r\n     * 根据相机、scene信息获得scene中某一位置的渲染结果\r\n     * @param camera 相机\r\n     * @param scene 需要渲染的场景\r\n     * @param shader 着色器\r\n     * @param replacementTag 替换标记。\r\n     */\r\n    static drawRenderTextureByScene(camera: Camera, scene: Scene3D, renderTexture: RenderTexture, shader: Shader3D = null, replaceFlag: string = null): RenderTexture {\r\n        if (!renderTexture) return null;\r\n        Scene3D._updateMark++;\r\n        //@ts-ignore\r\n        scene._prepareSceneToRender();\r\n        scene._setCullCamera(camera);\r\n        let recoverTexture = camera.renderTarget;\r\n        camera.renderTarget = renderTexture;\r\n\r\n        var viewport: Viewport = camera.viewport;\r\n        var needInternalRT: boolean = camera._needInternalRenderTexture();\r\n        var context: RenderContext3D = RenderContext3D._instance;\r\n        var scene: Scene3D = context.scene = scene\r\n        context.pipelineMode = context.configPipeLineMode;\r\n        context.replaceTag = replaceFlag;\r\n        context.customShader = shader;\r\n\r\n        if (needInternalRT) {\r\n            camera._internalRenderTexture = RenderTexture.createFromPool(viewport.width, viewport.height, camera._getRenderTextureFormat(), camera.depthTextureFormat, false, camera.msaa ? 4 : 1, false, camera._needRenderGamma(camera._getRenderTextureFormat()));\r\n            camera._internalRenderTexture.filterMode = FilterMode.Bilinear;\r\n        }\r\n        else {\r\n            camera._internalRenderTexture = null;\r\n        }\r\n        scene._componentDriver.callPreRender();\r\n        var needShadowCasterPass: boolean = camera._renderShadowMap(scene, context);\r\n        camera._preRenderMainPass(context, scene, needInternalRT, viewport);\r\n        camera._renderMainPass(context, viewport, scene, shader, replaceFlag, needInternalRT);\r\n        camera._aftRenderMainPass(needShadowCasterPass);\r\n        camera.renderTarget = recoverTexture;\r\n        scene.recaculateCullCamera();\r\n        scene._componentDriver.callPostRender();\r\n        if (camera._internalRenderTexture)\r\n            (!camera._internalRenderTexture._inPool) && RenderTexture.recoverToPool(camera._internalRenderTexture);\r\n        return renderTexture;\r\n    }\r\n\r\n    /**\r\n     * get PixelTexture\r\n     * @param texture \r\n     * @returns \r\n     */\r\n    static getTexturePixel(texture: Texture2D): ArrayBufferView {\r\n        let coverFilter = texture.filterMode;\r\n        texture.filterMode = FilterMode.Point;\r\n        let rtFormat = RenderTargetFormat.R8G8B8;\r\n        let pixelData;\r\n        let size = texture.width * texture.height;\r\n        switch (texture.format) {\r\n            case TextureFormat.R32G32B32A32:\r\n            case TextureFormat.R16G16B16A16:\r\n                rtFormat = RenderTargetFormat.R32G32B32A32;\r\n                pixelData = new Float32Array(size * 4);\r\n                break;\r\n            case TextureFormat.R32G32B32:\r\n            case TextureFormat.R16G16B16:\r\n                rtFormat = RenderTargetFormat.R32G32B32;\r\n                pixelData = new Float32Array(size * 3);\r\n                break;\r\n            case TextureFormat.R5G6B5:\r\n            case TextureFormat.R8G8B8:\r\n                rtFormat = RenderTargetFormat.R8G8B8;\r\n                pixelData = new Uint8Array(size * 3);\r\n                break;\r\n            default:\r\n                rtFormat = RenderTargetFormat.R8G8B8A8;\r\n                pixelData = new Uint8Array(size * 4);\r\n                break;\r\n        }\r\n        let rt = new RenderTexture(texture.width, texture.height, rtFormat, RenderTargetFormat.None, false, 0, false);\r\n        var blit: BlitScreenQuadCMD = BlitScreenQuadCMD.create(texture, rt);\r\n        blit.setContext(RenderContext3D._instance);\r\n        blit.run();\r\n        blit.recover();\r\n        texture.filterMode = coverFilter;\r\n        rt.getData(0, 0, texture.width, texture.height, pixelData);\r\n        rt.destroy();//删除\r\n        return pixelData;\r\n    }\r\n\r\n    /**\r\n     * 根据场景中的位置\r\n     * @param position \r\n     * @param scene \r\n     * @param renderCubeSize \r\n     * @param format \r\n     * @returns bake front left right up down\r\n     */\r\n    static drawTextureCubePixelByScene(camera: Camera, scene: Scene3D, renderCubeSize: number, format: TextureFormat, cullingMask: number): ArrayBufferView[] {\r\n        let rtFormat = RenderTargetFormat.R8G8B8;\r\n        let pixelData;\r\n        let size = renderCubeSize * renderCubeSize;\r\n        let bytelength;\r\n        switch (format) {\r\n            case TextureFormat.R32G32B32A32:\r\n            case TextureFormat.R16G16B16A16:\r\n                rtFormat = RenderTargetFormat.R32G32B32A32;\r\n                size *= 4;\r\n                bytelength = 4;\r\n                break;\r\n            case TextureFormat.R32G32B32:\r\n            case TextureFormat.R16G16B16:\r\n                rtFormat = RenderTargetFormat.R32G32B32;\r\n                size *= 3;\r\n                bytelength = 4;\r\n                break;\r\n            case TextureFormat.R5G6B5:\r\n            case TextureFormat.R8G8B8:\r\n                rtFormat = RenderTargetFormat.R8G8B8;\r\n                size *= 3;\r\n                bytelength = 1;\r\n                break;\r\n            case TextureFormat.R8G8B8A8:\r\n                rtFormat = RenderTargetFormat.R8G8B8A8;\r\n                pixelData = new Uint8Array(size * 4);\r\n                size *= 4;\r\n                bytelength = 1;\r\n                break;\r\n            default:\r\n                throw \"Type is not supported\";\r\n                break;\r\n        }\r\n        let rt = new RenderTexture(renderCubeSize, renderCubeSize, rtFormat, RenderTargetFormat.DEPTH_16, false, 0, false, false);\r\n        camera.fieldOfView = 90;\r\n        camera.cullingMask = cullingMask;\r\n        // bake 0,1,0,0\r\n        //front 0,0,0,1\r\n        //left 0,0.7071068,0,0.7071068\r\n        //right 0,0.7071068,0,-0.7071068\r\n        //up 0,0.7071068,-0.7071068,0\r\n        //down 0,-0.7071068,-0.7071068,0\r\n        let pixels: ArrayBufferView[] = [];\r\n        let quaterionArray = [\r\n            new Quaternion(0, 1, 0, 0),\r\n            new Quaternion(0, 0, 0, 1),\r\n            new Quaternion(0, 0.7071068, 0, 0.7071068),\r\n            new Quaternion(0, 0.7071068, 0, -0.7071068),\r\n            new Quaternion(0, 0.7071068, -0.7071068, 0),\r\n            new Quaternion(0, -0.7071068, -0.7071068, 0),\r\n        ];\r\n        for (var i = 0; i < 6; i++) {\r\n            camera.transform.rotation = quaterionArray[i];\r\n            this.drawRenderTextureByScene(camera, scene, rt);\r\n            if (bytelength == 4)\r\n                pixelData = new Float32Array(size);\r\n            else\r\n                pixelData = new Uint8Array(size);\r\n            pixels[i] = rt.getData(0, 0, renderCubeSize, renderCubeSize, pixelData);\r\n        }\r\n        rt.destroy();\r\n        return pixels;\r\n    }\r\n\r\n    static drawTextureCubeByScene(camera: Camera, position: Vector3, scene: Scene3D, renderCubeSize: number, format: TextureFormat, cullingMask: number = 0): TextureCube {\r\n        camera.transform.position = position;\r\n        let pixels = this.drawTextureCubePixelByScene(camera, scene, renderCubeSize, format, cullingMask);\r\n        let finalformat: TextureFormat;\r\n        switch (format) {\r\n            case TextureFormat.R32G32B32A32:\r\n            case TextureFormat.R16G16B16A16:\r\n                finalformat = TextureFormat.R32G32B32A32;\r\n                break;\r\n            case TextureFormat.R32G32B32:\r\n            case TextureFormat.R16G16B16:\r\n                finalformat = TextureFormat.R32G32B32;\r\n                break;\r\n            case TextureFormat.R5G6B5:\r\n            case TextureFormat.R8G8B8:\r\n                finalformat = TextureFormat.R8G8B8;\r\n                break;\r\n            case TextureFormat.R8G8B8A8:\r\n                finalformat = TextureFormat.R8G8B8A8;\r\n                break;\r\n            default:\r\n                throw \"Type is not supported\";\r\n        }\r\n        let textureCube = new TextureCube(renderCubeSize, format, true, false);\r\n        textureCube.setPixelsData(pixels, false, false);\r\n        return textureCube;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    static __init__(): void {\r\n        Camera.depthPass = new DepthPass();\r\n    }\r\n\r\n\r\n    /** @internal */\r\n    protected _aspectRatio: number;\r\n    /** @internal */\r\n    protected _viewport: Viewport;\r\n    /** @internal */\r\n    protected _rayViewport: Viewport;\r\n    /** @internal */\r\n    protected _normalizedViewport: Viewport;\r\n    /** @internal */\r\n    protected _viewMatrix: Matrix4x4;\r\n    /** @internal */\r\n    protected _projectionMatrix: Matrix4x4;\r\n    /** @internal */\r\n    protected _projectionViewMatrix: Matrix4x4;\r\n    /** @internal */\r\n    protected _boundFrustum: BoundFrustum;\r\n    /** @internal */\r\n    private _updateViewMatrix: boolean = true;\r\n    /** @internal */\r\n    protected _postProcess: PostProcess = null;\r\n    /** @internal */\r\n    protected _enableHDR: boolean = false;\r\n    /** @internal */\r\n    private _viewportParams: Vector4 = new Vector4();\r\n    /** @internal */\r\n    private _projectionParams: Vector4 = new Vector4();\r\n    /** @internal*/\r\n    protected _needBuiltInRenderTexture: boolean = false;\r\n    /**@internal */\r\n    protected _msaa: boolean = false;\r\n    /**@internal */\r\n    private _fxaa: boolean = false;\r\n    /** @internal*/\r\n    private _depthTextureMode: DepthTextureMode;\r\n    /** @internal */\r\n    _offScreenRenderTexture: RenderTexture = null;\r\n    /** @internal */\r\n    _internalRenderTexture: RenderTexture = null;\r\n    /** @internal　是否直接使用渲染深度贴图*/\r\n    _canBlitDepth: boolean = false;\r\n    /**@internal */\r\n    _internalCommandBuffer: CommandBuffer = new CommandBuffer();\r\n    /**深度贴图模式 */\r\n    protected _depthTextureFormat: RenderTargetFormat = RenderTargetFormat.DEPTH_16;\r\n    /** 深度贴图*/\r\n    private _depthTexture: BaseTexture;\r\n    /** 深度法线贴图*/\r\n    private _depthNormalsTexture: RenderTexture;\r\n\r\n    /** 非透明物体贴图 */\r\n    private _opaqueTexture: RenderTexture;\r\n    /** 是否开启非透明物体通道 */\r\n    private _opaquePass: boolean;\r\n\r\n\r\n    private _cameraEventCommandBuffer: { [key: string]: CommandBuffer[] } = {};\r\n    /**@internal 实现CommanBuffer的阴影渲染 */\r\n    private _shadowCasterCommanBuffer: CommandBuffer[] = [];\r\n\r\n    /** @internal */\r\n    _clusterXPlanes: Vector3[];\r\n    /** @internal */\r\n    _clusterYPlanes: Vector3[];\r\n    /** @internal */\r\n    _clusterPlaneCacheFlag: Vector2 = new Vector2(-1, -1);\r\n    /** @internal */\r\n    _screenOffsetScale: Vector4 = new Vector4();\r\n\r\n    /**是否允许渲染。*/\r\n    enableRender: boolean = true;\r\n    /**清除标记。*/\r\n    clearFlag: CameraClearFlags = CameraClearFlags.SolidColor;\r\n    /**是否缓存上一帧的Depth纹理 */\r\n    _cacheDepth: boolean\r\n    /**cache 上一帧纹理 */\r\n    _cacheDepthTexture: RenderTexture;\r\n\r\n    /**\r\n     * 横纵比。\r\n     */\r\n    get aspectRatio(): number {\r\n        if (this._aspectRatio === 0) {\r\n            var vp: Viewport = this.viewport;\r\n            return vp.width / vp.height;\r\n        }\r\n        return this._aspectRatio;\r\n    }\r\n\r\n    set aspectRatio(value: number) {\r\n        if (value < 0)\r\n            throw new Error(\"Camera: the aspect ratio has to be a positive real number.\");\r\n        this._aspectRatio = value;\r\n        this._calculateProjectionMatrix();\r\n    }\r\n\r\n    /**\r\n     * 获取屏幕像素坐标的视口。\r\n     */\r\n    get viewport(): Viewport {//TODO:优化\r\n        if (this._offScreenRenderTexture)\r\n            this._calculationViewport(this._normalizedViewport, this._offScreenRenderTexture.width, this._offScreenRenderTexture.height);\r\n        else\r\n            this._calculationViewport(this._normalizedViewport, this.clientWidth, this.clientHeight);//屏幕尺寸会动态变化,需要重置\r\n        return this._viewport;\r\n    }\r\n\r\n    set viewport(value: Viewport) {\r\n        var width: number;\r\n        var height: number;\r\n        if (this._offScreenRenderTexture) {\r\n            width = this._offScreenRenderTexture.width;\r\n            height = this._offScreenRenderTexture.height;\r\n        } else {\r\n            width = this.clientWidth;\r\n            height = this.clientHeight;\r\n        }\r\n        this._normalizedViewport.x = value.x / width;\r\n        this._normalizedViewport.y = value.y / height;\r\n        this._normalizedViewport.width = value.width / width;\r\n        this._normalizedViewport.height = value.height / height;\r\n        this._calculationViewport(this._normalizedViewport, width, height);\r\n        this._calculateProjectionMatrix();\r\n    }\r\n\r\n    get clientWidth(): number {\r\n        ILaya.stage.needUpdateCanvasSize();\r\n        if (Config3D.customResolution)\r\n            return Config3D.pixelRatio * Config3D._resoluWidth | 0;\r\n        else\r\n            return RenderContext3D.clientWidth * Config3D.pixelRatio | 0;\r\n    }\r\n\r\n    get clientHeight(): number {\r\n        ILaya.stage.needUpdateCanvasSize();\r\n        if (Config3D.customResolution)\r\n            return Config3D.pixelRatio * Config3D._resoluHeight | 0;\r\n        else\r\n            return RenderContext3D.clientHeight * Config3D.pixelRatio | 0;\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * 多重采样抗锯齿\r\n     */\r\n    set msaa(value: boolean) {\r\n        LayaGL.renderEngine.getCapable(RenderCapable.MSAA) ? this._msaa = value : this._msaa = false;\r\n    }\r\n\r\n\r\n    get msaa(): boolean {\r\n        return this._msaa && Stat.enablemsaa;\r\n    }\r\n\r\n    /**\r\n     * 空间抗锯齿\r\n     */\r\n    set fxaa(value: boolean) {\r\n        this._fxaa = value;\r\n    }\r\n\r\n    get fxaa(): boolean {\r\n        return this._fxaa;\r\n    }\r\n\r\n    /**\r\n     * 裁剪空间的视口。\r\n     */\r\n    get normalizedViewport(): Viewport {\r\n        return this._normalizedViewport;\r\n    }\r\n\r\n    set normalizedViewport(value: Viewport) {\r\n        var width: number;\r\n        var height: number;\r\n        if (this._offScreenRenderTexture) {\r\n            width = this._offScreenRenderTexture.width;\r\n            height = this._offScreenRenderTexture.height;\r\n        } else {\r\n            width = this.clientWidth;\r\n            height = this.clientHeight;\r\n        }\r\n        if (this._normalizedViewport !== value)\r\n            value.cloneTo(this._normalizedViewport);\r\n        this._calculationViewport(value, width, height);\r\n        this._calculateProjectionMatrix();\r\n    }\r\n\r\n    /**\r\n     * 获取视图矩阵。\r\n     */\r\n    get viewMatrix(): Matrix4x4 {\r\n        if (this._updateViewMatrix) {\r\n            var scale: Vector3 = this.transform.getWorldLossyScale();\r\n            var scaleX: number = scale.x;\r\n            var scaleY: number = scale.y;\r\n            var scaleZ: number = scale.z;\r\n            var viewMatE: Float32Array = this._viewMatrix.elements;\r\n\r\n            this.transform.worldMatrix.cloneTo(this._viewMatrix)\r\n            viewMatE[0] /= scaleX;//忽略缩放\r\n            viewMatE[1] /= scaleX;\r\n            viewMatE[2] /= scaleX;\r\n            viewMatE[4] /= scaleY;\r\n            viewMatE[5] /= scaleY;\r\n            viewMatE[6] /= scaleY;\r\n            viewMatE[8] /= scaleZ;\r\n            viewMatE[9] /= scaleZ;\r\n            viewMatE[10] /= scaleZ;\r\n            this._viewMatrix.invert(this._viewMatrix);\r\n            this._updateViewMatrix = false;\r\n        }\r\n        return this._viewMatrix;\r\n    }\r\n\r\n    /**\r\n     * 投影矩阵。\r\n     */\r\n    get projectionMatrix(): Matrix4x4 {\r\n        return this._projectionMatrix;\r\n    }\r\n\r\n    set projectionMatrix(value: Matrix4x4) {\r\n        this._projectionMatrix = value;\r\n        this._useUserProjectionMatrix = true;\r\n    }\r\n\r\n    /**\r\n     * 获取视图投影矩阵。\r\n     */\r\n    get projectionViewMatrix(): Matrix4x4 {\r\n        Matrix4x4.multiply(this.projectionMatrix, this.viewMatrix, this._projectionViewMatrix);\r\n        return this._projectionViewMatrix;\r\n    }\r\n\r\n    /**\r\n     * 获取摄像机视锥。\r\n     */\r\n    get boundFrustum(): BoundFrustum {\r\n        this._boundFrustum.matrix = this.projectionViewMatrix;\r\n        return this._boundFrustum;\r\n    }\r\n\r\n    /**\r\n     * 自定义渲染场景的渲染目标。\r\n     */\r\n    get renderTarget(): RenderTexture {\r\n        return this._offScreenRenderTexture;\r\n    }\r\n\r\n    set renderTarget(value: RenderTexture) {\r\n        var lastValue: RenderTexture = this._offScreenRenderTexture;\r\n        if (lastValue !== value) {\r\n            (lastValue) && (lastValue._isCameraTarget = false);\r\n            (value) && (value._isCameraTarget = true);\r\n            this._offScreenRenderTexture = value;\r\n            this._calculateProjectionMatrix();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 后期处理。\r\n     */\r\n    get postProcess(): PostProcess {\r\n        return this._postProcess;\r\n    }\r\n\r\n    set postProcess(value: PostProcess) {\r\n        this._postProcess = value;\r\n        //if (!value) return;\r\n        //value && value._init(this);\r\n    }\r\n\r\n    /**\r\n     * 是否开启HDR。\r\n     * 开启后对性能有一定影响。\r\n     */\r\n    get enableHDR(): boolean {\r\n        return this._enableHDR;\r\n    }\r\n\r\n    set enableHDR(value: boolean) {\r\n        if (value && !LayaGL.renderEngine.getCapable(RenderCapable.RenderTextureFormat_R16G16B16A16)) {\r\n            console.warn(\"Camera:can't enable HDR in this device.\");\r\n            return;\r\n        }\r\n        this._enableHDR = value;\r\n    }\r\n\r\n    /**\r\n     * 是否使用正在渲染的RenderTexture为CommandBuffer服务，设置为true\r\n     * 一般和CommandBuffer一起使用\r\n     */\r\n    get enableBuiltInRenderTexture(): boolean {\r\n        return this._needBuiltInRenderTexture;\r\n    }\r\n\r\n    set enableBuiltInRenderTexture(value: boolean) {\r\n        this._needBuiltInRenderTexture = value;\r\n    }\r\n\r\n    /**\r\n     * 深度贴图模式\r\n     */\r\n    get depthTextureMode(): DepthTextureMode {\r\n        return this._depthTextureMode;\r\n    }\r\n\r\n    set depthTextureMode(value: DepthTextureMode) {\r\n        this._depthTextureMode = value;\r\n    }\r\n\r\n    /**\r\n     * 设置OpaquePass模式\r\n     */\r\n    set opaquePass(value: boolean) {\r\n        if (value == this._opaquePass)\r\n            return;\r\n        if (!value) {\r\n            this._shaderValues.setTexture(BaseCamera.OPAQUETEXTURE, null);\r\n            this._opaqueTexture && RenderTexture.recoverToPool(this._opaqueTexture);\r\n        }\r\n        this._opaquePass = value;\r\n    }\r\n\r\n    get opaquePass() {\r\n        return this._opaquePass;\r\n    }\r\n\r\n    /**\r\n     * 深度贴图格式\r\n     */\r\n    get depthTextureFormat(): RenderTargetFormat {\r\n        return this._depthTextureFormat;\r\n    }\r\n    set depthTextureFormat(value: RenderTargetFormat) {\r\n        this._depthTextureFormat = value;\r\n    }\r\n\r\n\r\n    /**\r\n     * 设置是否使用内置的深度贴图(TODO:如果开启,只可在后期使用深度贴图，不可在渲染流程中使用)\r\n     */\r\n    set enableBlitDepth(value: boolean) {\r\n        if (value == this._canBlitDepth)\r\n            return;\r\n        this._canBlitDepth = value;\r\n        this._cacheDepth = value;\r\n        if (value)\r\n            this._internalRenderTexture && (this._internalRenderTexture.generateDepthTexture = true);\r\n        else {\r\n            this._internalRenderTexture && (this._internalRenderTexture.generateDepthTexture = false);\r\n            if (this._cacheDepthTexture)\r\n                this._cacheDepthTexture._inPool ? 0 : RenderTexture.recoverToPool(this._cacheDepthTexture);\r\n        }\r\n\r\n    }\r\n    get enableBlitDepth() {\r\n        return this._canBlitDepth;\r\n    }\r\n    get canblitDepth() {\r\n        return this._canBlitDepth && this._internalRenderTexture && this._internalRenderTexture.depthStencilFormat != null;\r\n    }\r\n\r\n    /**\r\n     * 创建一个 <code>Camera</code> 实例。\r\n     * @param\taspectRatio 横纵比。\r\n     * @param\tnearPlane 近裁面。\r\n     * @param\tfarPlane 远裁面。\r\n     */\r\n    constructor(aspectRatio: number = 0, nearPlane: number = 0.3, farPlane: number = 1000) {\r\n        super(nearPlane, farPlane);\r\n        this._viewMatrix = new Matrix4x4();\r\n        this._projectionMatrix = new Matrix4x4();\r\n        this._projectionViewMatrix = new Matrix4x4();\r\n        this._viewport = new Viewport(0, 0, 0, 0);\r\n        this._normalizedViewport = new Viewport(0, 0, 1, 1);\r\n        this._rayViewport = new Viewport(0, 0, 0, 0);\r\n        this._aspectRatio = aspectRatio;\r\n        this._boundFrustum = new BoundFrustum(new Matrix4x4());\r\n        this._depthTextureMode = 0;\r\n        this._calculateProjectionMatrix();\r\n        ILaya.stage.on(Event.RESIZE, this, this._onScreenSizeChanged);\r\n        this.transform.on(Event.TRANSFORM_CHANGED, this, this._onTransformChanged);\r\n        this.opaquePass = false;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _calculationViewport(normalizedViewport: Viewport, width: number, height: number): void {\r\n        var lx: number = normalizedViewport.x * width;//不应限制x范围\r\n        var ly: number = normalizedViewport.y * height;//不应限制y范围\r\n        var rx: number = lx + Math.max(normalizedViewport.width * width, 0);\r\n        var ry: number = ly + Math.max(normalizedViewport.height * height, 0);\r\n\r\n        var ceilLeftX: number = Math.ceil(lx);\r\n        var ceilLeftY: number = Math.ceil(ly);\r\n        var floorRightX: number = Math.floor(rx);\r\n        var floorRightY: number = Math.floor(ry);\r\n\r\n        var pixelLeftX: number = ceilLeftX - lx >= 0.5 ? Math.floor(lx) : ceilLeftX;\r\n        var pixelLeftY: number = ceilLeftY - ly >= 0.5 ? Math.floor(ly) : ceilLeftY;\r\n        var pixelRightX: number = rx - floorRightX >= 0.5 ? Math.ceil(rx) : floorRightX;\r\n        var pixelRightY: number = ry - floorRightY >= 0.5 ? Math.ceil(ry) : floorRightY;\r\n\r\n        this._viewport.x = pixelLeftX;\r\n        this._viewport.y = pixelLeftY;\r\n        this._viewport.width = pixelRightX - pixelLeftX;\r\n        this._viewport.height = pixelRightY - pixelLeftY;\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     * @internal\r\n     */\r\n    protected _calculateProjectionMatrix(): void {\r\n        if (!this._useUserProjectionMatrix) {\r\n            if (this._orthographic) {\r\n                var halfHeight: number = this.orthographicVerticalSize * 0.5;\r\n                var halfWidth: number = halfHeight * this.aspectRatio;\r\n                Matrix4x4.createOrthoOffCenter(-halfWidth, halfWidth, -halfHeight, halfHeight, this.nearPlane, this.farPlane, this._projectionMatrix);\r\n            } else {\r\n                Matrix4x4.createPerspective(3.1416 * this.fieldOfView / 180.0, this.aspectRatio, this.nearPlane, this.farPlane, this._projectionMatrix);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\t通过蒙版值获取蒙版是否显示。\r\n     * \t@param  layer 层。\r\n     * \t@return 是否显示。\r\n     */\r\n    _isLayerVisible(layer: number): boolean {\r\n        return (Math.pow(2, layer) & this.cullingMask) != 0;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _onTransformChanged(flag: number): void {\r\n        flag &= Transform3D.TRANSFORM_WORLDMATRIX;//过滤有用TRANSFORM标记\r\n        (flag) && (this._updateViewMatrix = true);\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     * @internal\r\n     */\r\n    _parse(data: any, spriteMap: any): void {\r\n        super._parse(data, spriteMap);\r\n        var clearFlagData: any = data.clearFlag;\r\n        (clearFlagData !== undefined) && (this.clearFlag = clearFlagData);\r\n        var viewport: any[] = data.viewport;\r\n        this.normalizedViewport = new Viewport(viewport[0], viewport[1], viewport[2], viewport[3]);\r\n        var enableHDR: boolean = data.enableHDR;\r\n        (enableHDR !== undefined) && (this.enableHDR = enableHDR);\r\n    }\r\n\r\n    clone(): Camera {\r\n        let camera = <Camera>super.clone();\r\n        camera.clearFlag = this.clearFlag;\r\n        this.clearColor.cloneTo(camera.clearColor);\r\n        camera.clearColor = camera.clearColor;\r\n        camera.viewport = this.viewport;\r\n        this.normalizedViewport.cloneTo(camera.normalizedViewport);\r\n        camera.enableHDR = this.enableHDR;\r\n        camera.farPlane = this.farPlane;\r\n        camera.nearPlane = this.nearPlane;\r\n        camera.fieldOfView = this.fieldOfView;\r\n        camera.orthographic = this.orthographic;\r\n        camera._cameraEventCommandBuffer = this._cameraEventCommandBuffer;\r\n        camera.opaquePass = this.opaquePass;\r\n        //Object.assign(camera._cameraEventCommandBuffer, this._cameraEventCommandBuffer);\r\n        return camera;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _getCanvasWidth(): number {\r\n        if (this._offScreenRenderTexture)\r\n            return this._offScreenRenderTexture.width;\r\n        else\r\n            return this.clientWidth;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _getCanvasHeight(): number {\r\n        if (this._offScreenRenderTexture)\r\n            return this._offScreenRenderTexture.height;\r\n        else\r\n            return this.clientHeight;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _getRenderTexture(): RenderTexture {\r\n        return this._internalRenderTexture || this._offScreenRenderTexture;\r\n    }\r\n\r\n    /**\r\n     * 渲染结果是否是Gamma\r\n     * @param rt \r\n     */\r\n    _needRenderGamma(rt: RenderTargetFormat) {\r\n        switch (rt) {\r\n            case RenderTargetFormat.R8G8B8:\r\n            case RenderTargetFormat.R8G8B8A8:\r\n                return true;\r\n            default:\r\n                return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _needInternalRenderTexture(): boolean {\r\n        return (this._postProcess && this._postProcess.enable) || this._enableHDR || this._needBuiltInRenderTexture ? true : false;//condition of internal RT\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _getRenderTextureFormat(): RenderTargetFormat {\r\n        if (this._enableHDR)\r\n            return RenderTargetFormat.R16G16B16A16;\r\n        else\r\n            return RenderTargetFormat.R8G8B8A8;\r\n    }\r\n\r\n    /**\r\n     * update Camera Render\r\n     * @param context \r\n     */\r\n    _updateCameraRenderData(context: RenderContext3D) {\r\n        this._prepareCameraToRender();\r\n        this._applyViewProject(context, this.viewMatrix, this._projectionMatrix);\r\n    }\r\n\r\n\r\n    /**\r\n     * @override\r\n     * @internal\r\n     */\r\n    _prepareCameraToRender(): void {\r\n        super._prepareCameraToRender();\r\n        var vp: Viewport = this.viewport;\r\n        this._viewportParams.setValue(vp.x, vp.y, vp.width, vp.height);\r\n        this._projectionParams.setValue(this._nearPlane, this._farPlane, RenderContext3D._instance.invertY ? -1 : 1, 1 / this.farPlane);\r\n        this._shaderValues.setVector(BaseCamera.VIEWPORT, this._viewportParams);\r\n        this._shaderValues.setVector(BaseCamera.PROJECTION_PARAMS, this._projectionParams);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _applyViewProject(context: RenderContext3D, viewMat: Matrix4x4, proMat: Matrix4x4): void {\r\n        var projectView: Matrix4x4;\r\n        if (context.invertY) {\r\n            Matrix4x4.multiply(BaseCamera._invertYScaleMatrix, proMat, BaseCamera._invertYProjectionMatrix);\r\n            Matrix4x4.multiply(BaseCamera._invertYProjectionMatrix, viewMat, BaseCamera._invertYProjectionViewMatrix);\r\n            proMat = BaseCamera._invertYProjectionMatrix;\r\n            projectView = BaseCamera._invertYProjectionViewMatrix;\r\n        }\r\n        else {\r\n            Matrix4x4.multiply(proMat, viewMat, this._projectionViewMatrix);\r\n            projectView = this._projectionViewMatrix;\r\n        }\r\n\r\n        context.viewMatrix = viewMat;\r\n        context.projectionMatrix = proMat;\r\n        context.projectionViewMatrix = projectView;\r\n        this._shaderValues.setMatrix4x4(BaseCamera.VIEWMATRIX, viewMat);\r\n        this._shaderValues.setMatrix4x4(BaseCamera.PROJECTMATRIX, proMat);\r\n        this._shaderValues.setMatrix4x4(BaseCamera.VIEWPROJECTMATRIX, projectView);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _updateClusterPlaneXY(): void {\r\n        var fieldOfView: number = this.fieldOfView;\r\n        var aspectRatio: number = this.aspectRatio;\r\n        if (this._clusterPlaneCacheFlag.x !== fieldOfView || this._clusterPlaneCacheFlag.y !== aspectRatio) {\r\n            var clusterCount: Vector3 = Config3D.lightClusterCount;\r\n            var xSlixe: number = clusterCount.x, ySlice: number = clusterCount.y;\r\n            var xCount: number = xSlixe + 1, yCount: number = ySlice + 1;\r\n            var xPlanes: Vector3[] = this._clusterXPlanes, yPlanes: Vector3[] = this._clusterYPlanes;\r\n\r\n            if (!xPlanes) {\r\n                xPlanes = this._clusterXPlanes = new Array(xCount);\r\n                yPlanes = this._clusterYPlanes = new Array(yCount);\r\n                for (var i: number = 0; i < xCount; i++)\r\n                    xPlanes[i] = new Vector3();\r\n                for (var i: number = 0; i < yCount; i++)\r\n                    yPlanes[i] = new Vector3();\r\n            }\r\n            var halfY = Math.tan((this.fieldOfView / 2) * Math.PI / 180);\r\n            var halfX = this.aspectRatio * halfY;\r\n            var yLengthPerCluster = 2 * halfY / ySlice;\r\n            var xLengthPerCluster = 2 * halfX / xSlixe;\r\n            for (var i: number = 0; i < xCount; i++) {\r\n                var angle: number = -halfX + xLengthPerCluster * i;\r\n                var bigHypot: number = Math.sqrt(1 + angle * angle);\r\n                var normX: number = 1 / bigHypot;\r\n                var xPlane: Vector3 = xPlanes[i];\r\n                xPlane.setValue(normX, 0, -angle * normX);\r\n            }\r\n            //start from top is more similar to light pixel data\r\n            for (var i: number = 0; i < yCount; i++) {\r\n                var angle: number = halfY - yLengthPerCluster * i;\r\n                var bigHypot: number = Math.sqrt(1 + angle * angle);\r\n                var normY: number = -1 / bigHypot;\r\n                var yPlane: Vector3 = yPlanes[i];\r\n                yPlane.setValue(0, normY, -angle * normY);\r\n            }\r\n\r\n            this._clusterPlaneCacheFlag.x = fieldOfView;\r\n            this._clusterPlaneCacheFlag.y = aspectRatio;\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * 调用渲染命令流\r\n     * @param event \r\n     * @param renderTarget \r\n     * @param context \r\n     */\r\n    _applyCommandBuffer(event: number, context: RenderContext3D) {\r\n        if (!Stat.enableCameraCMD)\r\n            return;\r\n        var commandBufferArray: CommandBuffer[] = this._cameraEventCommandBuffer[event];\r\n        if (!commandBufferArray || commandBufferArray.length == 0)\r\n            return;\r\n        commandBufferArray.forEach(function (value) {\r\n            value._context = context;\r\n            value._apply();\r\n        });\r\n        (RenderTexture.currentActive) && (RenderTexture.currentActive._end());\r\n        if (this._internalRenderTexture || this._offScreenRenderTexture)\r\n            this._getRenderTexture()._start();\r\n        else {\r\n            LayaGL.textureContext.bindoutScreenTarget();\r\n        }\r\n        LayaGL.renderEngine.viewport(0, 0, context.viewport.width, context.viewport.height);\r\n    }\r\n\r\n    /**\r\n     * apply \r\n     * @internal\r\n     */\r\n    _applyCasterPassCommandBuffer(context: RenderContext3D) {\r\n        if (!this._shadowCasterCommanBuffer || this._shadowCasterCommanBuffer.length == 0)\r\n            return;\r\n        this._shadowCasterCommanBuffer.forEach(function (value) {\r\n            value._context = context;\r\n            value._apply();\r\n        });\r\n    }\r\n\r\n    /**\r\n    * @internal\r\n    */\r\n    _addCasterShadowCommandBuffer(commandBuffer: CommandBuffer) {\r\n        if (this._shadowCasterCommanBuffer.indexOf(commandBuffer) < 0)\r\n            this._shadowCasterCommanBuffer.push(commandBuffer);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @param commandBuffer \r\n     */\r\n    _removeCasterShadowCommandBuffer(commandBuffer: CommandBuffer) {\r\n        var index: number = this._shadowCasterCommanBuffer.indexOf(commandBuffer);\r\n        if (index != -1) this._shadowCasterCommanBuffer.splice(index, 1);\r\n    }\r\n\r\n    /**\r\n     * 渲染阴影模式\r\n     * @internal\r\n     * @param scene 渲染场景\r\n     * @param context 渲染上下文\r\n     */\r\n    _renderShadowMap(scene: Scene3D, context: RenderContext3D) {\r\n        if (Scene3D._updateMark % scene._ShadowMapupdateFrequency != 0) {\r\n            return false;\r\n        }\r\n\r\n        //render shadowMap\r\n        var shadowCasterPass;\r\n        var mainDirectLight: DirectionLightCom = scene._mainDirectionLight;\r\n        var needShadowCasterPass: boolean = mainDirectLight && mainDirectLight.shadowMode !== ShadowMode.None && ShadowUtils.supportShadow() && Stat.enableShadow;\r\n        if (needShadowCasterPass) {\r\n            scene._shaderValues.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_SHADOW_SPOT)\r\n            scene._shaderValues.addDefine(Scene3DShaderDeclaration.SHADERDEFINE_SHADOW);\r\n            shadowCasterPass = ILaya3D.Scene3D._shadowCasterPass;\r\n            shadowCasterPass.update(this, mainDirectLight, ShadowLightType.DirectionLight);\r\n            shadowCasterPass.render(context, scene, ShadowLightType.DirectionLight, this);\r\n        }\r\n        else {\r\n            scene._shaderValues.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_SHADOW);\r\n        }\r\n        var spotMainLight = scene._mainSpotLight;\r\n        var spotneedShadowCasterPass: boolean = spotMainLight && spotMainLight.shadowMode !== ShadowMode.None && ShadowUtils.supportShadow() && Stat.enableShadow;\r\n        if (spotneedShadowCasterPass) {\r\n            scene._shaderValues.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_SHADOW);\r\n            scene._shaderValues.addDefine(Scene3DShaderDeclaration.SHADERDEFINE_SHADOW_SPOT);\r\n            shadowCasterPass = ILaya3D.Scene3D._shadowCasterPass;\r\n            shadowCasterPass.update(this, spotMainLight, ShadowLightType.SpotLight);\r\n            shadowCasterPass.render(context, scene, ShadowLightType.SpotLight, this);\r\n        }\r\n        else {\r\n            scene._shaderValues.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_SHADOW_SPOT);\r\n        }\r\n        if (needShadowCasterPass)\r\n            scene._shaderValues.addDefine(Scene3DShaderDeclaration.SHADERDEFINE_SHADOW);\r\n        if (spotneedShadowCasterPass)\r\n            scene._shaderValues.addDefine(Scene3DShaderDeclaration.SHADERDEFINE_SHADOW_SPOT);\r\n\r\n        return needShadowCasterPass || spotneedShadowCasterPass;\r\n\r\n    }\r\n\r\n    /**\r\n     * 渲染主流程之前\r\n     * @internal\r\n     * @param context 渲染上下文\r\n     * @param scene 渲染场景\r\n     * @param needInternalRT 是否需要内部Rendertarget\r\n     * @param viewport 视口\r\n     */\r\n    _preRenderMainPass(context: RenderContext3D, scene: Scene3D, needInternalRT: boolean, viewport: Viewport) {\r\n        context.camera = this;\r\n        context.cameraShaderValue = this._shaderValues;\r\n        Camera._updateMark++;\r\n\r\n        //TODO:webgl2 should use blitFramebuffer\r\n        //TODO:if adjacent camera param can use same internal RT can merge\r\n        //if need internal RT and no off screen RT and clearFlag is DepthOnly or Nothing, should grab the backBuffer\r\n        if (needInternalRT && !this._offScreenRenderTexture && (this.clearFlag == CameraClearFlags.DepthOnly || this.clearFlag == CameraClearFlags.Nothing)) {\r\n            if (RenderTexture.bindCanvasRender) {//解决iOS中使用CopyTexSubImage2D特别慢的bug\r\n                if (RenderTexture.bindCanvasRender != this._internalRenderTexture) {\r\n                    var blit: BlitScreenQuadCMD = BlitScreenQuadCMD.create(RenderTexture.bindCanvasRender, this._internalRenderTexture);\r\n                    blit.setContext(context);\r\n                    blit.run();\r\n                    blit.recover();\r\n                }\r\n            } else {\r\n                if (this._enableHDR) {//internal RT is HDR can't directly copy\r\n                    var grabTexture: RenderTexture = RenderTexture.createFromPool(viewport.width, viewport.height, RenderTargetFormat.R8G8B8, RenderTargetFormat.DEPTH_16, false, 1);\r\n                    grabTexture.filterMode = FilterMode.Bilinear;\r\n                    this._renderEngine.copySubFrameBuffertoTex(grabTexture, 0, 0, 0, viewport.x, RenderContext3D.clientHeight - (viewport.y + viewport.height), viewport.width, viewport.height);\r\n                    // this._renderEngine.bindTexture(gl.TEXTURE_2D, grabTexture._getSource());\r\n                    // gl.copyTexSubImage2D(gl.TEXTURE_2D, 0, 0, 0, viewport.x, RenderContext3D.clientHeight - (viewport.y + viewport.height), viewport.width, viewport.height);\r\n                    var blit: BlitScreenQuadCMD = BlitScreenQuadCMD.create(grabTexture, this._internalRenderTexture);\r\n                    blit.setContext(context);\r\n                    blit.run();\r\n                    blit.recover();\r\n                    RenderTexture.recoverToPool(grabTexture);\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 渲染主流程\r\n     * @internal\r\n     * @param context 渲染上下文\r\n     * @param viewport 视口\r\n     * @param scene 场景\r\n     * @param shader shader\r\n     * @param replacementTag 替换标签\r\n     * @param needInternalRT 是否需要内部RT\r\n     */\r\n    _renderMainPass(context: RenderContext3D, viewport: Viewport, scene: Scene3D, shader: Shader3D, replacementTag: string, needInternalRT: boolean) {\r\n        var renderTex: RenderTexture = this._getRenderTexture();//如果有临时renderTexture则画到临时renderTexture,最后再画到屏幕或者离屏画布,如果无临时renderTexture则直接画到屏幕或离屏画布\r\n        if (renderTex && renderTex._isCameraTarget)//保证反转Y状态正确\r\n            context.invertY = true;\r\n        else\r\n            context.invertY = false;\r\n        context.viewport = viewport;\r\n        //设置context的渲染目标\r\n        context.destTarget = renderTex;\r\n        this._prepareCameraToRender();\r\n        var multiLighting: boolean = Config3D._multiLighting;\r\n        (multiLighting) && (Cluster.instance.update(this, <Scene3D>(scene)));\r\n\r\n        context.customShader = shader;\r\n        context.replaceTag = replacementTag;\r\n        scene._preCulling(context, this);\r\n\r\n        this._applyViewProject(context, this.viewMatrix, this._projectionMatrix);\r\n        if (this._cameraUniformData) {//需要在Depth之前更新数据\r\n            this._cameraUniformUBO && this._cameraUniformUBO.setDataByUniformBufferData(this._cameraUniformData);\r\n        }\r\n        // if (this.depthTextureMode != 0) {\r\n        //     //TODO:是否可以不多次\r\n        this._renderDepthMode(context);\r\n        // }\r\n\r\n        // todo layame temp\r\n        (renderTex) && (renderTex._start());\r\n\r\n\r\n        scene._clear(context);\r\n\r\n        this._applyCommandBuffer(CameraEventFlags.BeforeForwardOpaque, context);\r\n\r\n        this.recoverRenderContext3D(context, renderTex);\r\n        Stat.enableOpaque && scene._renderScene(context, ILaya3D.Scene3D.SCENERENDERFLAG_RENDERQPAQUE);\r\n        this._applyCommandBuffer(CameraEventFlags.BeforeSkyBox, context);\r\n        this._opaquePass && this._createOpaqueTexture(renderTex, context);\r\n        this.recoverRenderContext3D(context, renderTex);\r\n        scene._renderScene(context, ILaya3D.Scene3D.SCENERENDERFLAG_SKYBOX);\r\n        this._applyCommandBuffer(CameraEventFlags.BeforeTransparent, context);\r\n\r\n        this.recoverRenderContext3D(context, renderTex);\r\n        Stat.enableTransparent && scene._renderScene(context, ILaya3D.Scene3D.SCENERENDERFLAG_RENDERTRANSPARENT);\r\n        //scene._componentDriver.callPostRender();//TODO:duo相机是否重复\r\n        this._applyCommandBuffer(CameraEventFlags.BeforeImageEffect, context);\r\n        (renderTex) && (renderTex._end());\r\n\r\n        if (needInternalRT && Stat.enablePostprocess) {\r\n            if (this._postProcess && this._postProcess.enable) {\r\n                this._postProcess.commandContext = context;\r\n                this._postProcess._render(this);\r\n                this._postProcess._applyPostProcessCommandBuffers();\r\n            } else if (this._enableHDR || this._needBuiltInRenderTexture) {\r\n                var canvasWidth: number = this._getCanvasWidth(), canvasHeight: number = this._getCanvasHeight();\r\n                if (this._offScreenRenderTexture) {\r\n                    this._screenOffsetScale.setValue(viewport.x / canvasWidth, (canvasHeight - viewport.y - viewport.height) / canvasHeight, viewport.width / canvasWidth, viewport.height / canvasHeight);\r\n                    this._internalCommandBuffer._camera = this;\r\n                    this._internalCommandBuffer._context = context;\r\n                    this._internalCommandBuffer.blitScreenQuad(this._internalRenderTexture, this._offScreenRenderTexture, this._screenOffsetScale, null, null, 0);\r\n                    this._internalCommandBuffer._apply();\r\n                    this._internalCommandBuffer.clear();\r\n                }\r\n            }\r\n        }\r\n        if (this._offScreenRenderTexture) {\r\n            RenderTexture.bindCanvasRender = null;\r\n        } else\r\n            RenderTexture.bindCanvasRender = this._internalRenderTexture;\r\n        this._applyCommandBuffer(CameraEventFlags.AfterEveryThing, context);\r\n\r\n        // if (renderTex && renderTex._isCameraTarget)//保证反转Y状态正确\r\n        //     context.invertY = false;\r\n    }\r\n\r\n    recoverRenderContext3D(context: RenderContext3D, renderTexture: RenderTexture) {\r\n        const cacheViewPor = Camera._context3DViewPortCatch;\r\n        const cacheScissor = Camera._contextScissorPortCatch;\r\n        context.changeViewport(cacheViewPor.x, cacheViewPor.y, cacheViewPor.width, cacheViewPor.height);\r\n        context.changeScissor(cacheScissor.x, cacheScissor.y, cacheScissor.z, cacheScissor.w);\r\n        context.destTarget = renderTexture;\r\n    }\r\n\r\n    /**\r\n     * 根据camera的深度贴图模式更新深度贴图\r\n     * @internal\r\n     */\r\n    _renderDepthMode(context: RenderContext3D) {\r\n        var cameraDepthMode = this._depthTextureMode;\r\n        if (this._postProcess && this._postProcess.enable) {\r\n            cameraDepthMode |= this._postProcess.cameraDepthTextureMode;\r\n        }\r\n        if ((cameraDepthMode & DepthTextureMode.Depth) != 0) {\r\n            // todo\r\n            if (!this.canblitDepth || !this._internalRenderTexture.depthStencilTexture) {\r\n                Camera.depthPass.update(this, DepthTextureMode.Depth, this._depthTextureFormat);\r\n                Camera.depthPass.render(context, DepthTextureMode.Depth);\r\n            }\r\n            else {\r\n                this.depthTexture = this._cacheDepthTexture.depthStencilTexture;\r\n                //@ts-ignore;\r\n                Camera.depthPass._depthTexture = this.depthTexture;\r\n                Camera.depthPass._setupDepthModeShaderValue(DepthTextureMode.Depth, this);\r\n            }\r\n        }\r\n        if ((cameraDepthMode & DepthTextureMode.DepthNormals) != 0) {\r\n            Camera.depthPass.update(this, DepthTextureMode.DepthNormals, this._depthTextureFormat);\r\n            Camera.depthPass.render(context, DepthTextureMode.DepthNormals);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * 深度贴图\r\n     */\r\n    get depthTexture(): BaseTexture {\r\n        return this._depthTexture;\r\n    }\r\n\r\n    set depthTexture(value: BaseTexture) {\r\n        this._depthTexture = value;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * 深度法线贴图\r\n     */\r\n    get depthNormalTexture(): RenderTexture {\r\n        return this._depthNormalsTexture;\r\n    }\r\n\r\n    set depthNormalTexture(value: RenderTexture) {\r\n        this._depthNormalsTexture = value;\r\n    }\r\n\r\n\r\n    /**\r\n     * @internal\r\n     * @param needShadowPass \r\n     */\r\n    _aftRenderMainPass(needShadowPass: Boolean) {\r\n        // if (needShadowPass)\r\n        //     ILaya3D.Scene3D._shadowCasterPass.cleanUp();\r\n        if (this._cacheDepth && this._internalRenderTexture) {\r\n            if (this._cacheDepthTexture)\r\n                this._cacheDepthTexture._inPool ? 0 : RenderTexture.recoverToPool(this._cacheDepthTexture);\r\n            this._cacheDepthTexture = this._internalRenderTexture;\r\n        }\r\n        Camera.depthPass.cleanUp();\r\n    }\r\n\r\n\r\n    _createOpaqueTexture(currentTarget: RenderTexture, renderContext: RenderContext3D) {\r\n        if (!this._opaqueTexture) {\r\n            let tex = this._getRenderTexture();\r\n            this._opaqueTexture = RenderTexture.createFromPool(tex.width, tex.height, tex.colorFormat, RenderTargetFormat.None, false, 1, false, true);\r\n            this._shaderValues.setTexture(BaseCamera.OPAQUETEXTURE, this._opaqueTexture);\r\n        }\r\n        var blit: BlitScreenQuadCMD = BlitScreenQuadCMD.create(currentTarget, this._opaqueTexture);\r\n        blit.setContext(renderContext);\r\n        blit.run();\r\n        blit.recover();\r\n    }\r\n\r\n    /**\r\n     * @override\r\n     * @param shader 着色器\r\n     * @param replacementTag 替换标记。\r\n     */\r\n    render(shader: Shader3D = null, replacementTag: string = null): void {\r\n        if (!this.activeInHierarchy) //custom render should protected with activeInHierarchy=true\r\n            return;\r\n\r\n        var viewport: Viewport = this.viewport;\r\n        var needInternalRT: boolean = this._needInternalRenderTexture();\r\n        var context: RenderContext3D = RenderContext3D._instance;\r\n        var scene: Scene3D = context.scene = <Scene3D>this._scene;\r\n        scene._setCullCamera(this);\r\n        context.pipelineMode = context.configPipeLineMode;\r\n        context.replaceTag = replacementTag;\r\n        context.customShader = shader;\r\n        let texFormat = this._getRenderTextureFormat();\r\n\r\n        if (needInternalRT) {\r\n            if (this.msaa) {\r\n                this._internalRenderTexture = RenderTexture.createFromPool(viewport.width, viewport.height, texFormat, this._depthTextureFormat, false, 4, this.canblitDepth, this._needRenderGamma(texFormat));\r\n                this._internalRenderTexture.filterMode = FilterMode.Bilinear;\r\n            } else {\r\n                this._internalRenderTexture = RenderTexture.createFromPool(viewport.width, viewport.height, texFormat, this._depthTextureFormat, false, 1, this.canblitDepth, this._needRenderGamma(texFormat));\r\n                this._internalRenderTexture.filterMode = FilterMode.Bilinear;\r\n            }\r\n        }\r\n        else {\r\n            this._internalRenderTexture = null;\r\n        }\r\n        scene._componentDriver.callPreRender();\r\n        var needShadowCasterPass: boolean = this._renderShadowMap(scene, context);\r\n        this._preRenderMainPass(context, scene, needInternalRT, viewport);\r\n        this._renderMainPass(context, viewport, scene, shader, replacementTag, needInternalRT);\r\n        this._aftRenderMainPass(needShadowCasterPass);\r\n        scene._componentDriver.callPostRender();\r\n    }\r\n\r\n\r\n    /**\r\n     * 计算从屏幕空间生成的射线。\r\n     * @param point 屏幕空间的位置位置。\r\n     * @param out  输出射线。\r\n     */\r\n    viewportPointToRay(point: Vector2, out: Ray): void {\r\n        this._rayViewport.x = this.viewport.x;\r\n        this._rayViewport.y = this.viewport.y;\r\n        this._rayViewport.width = ILaya.stage._width;\r\n        this._rayViewport.height = ILaya.stage._height;\r\n        Picker.calculateCursorRay(point, this._rayViewport, this._projectionMatrix, this.viewMatrix, null, out);\r\n    }\r\n\r\n    /** \r\n     * 计算从裁切空间生成的射线。\r\n     * @param point 裁切空间的位置。\r\n     * @param out  输出射线。\r\n     */\r\n    normalizedViewportPointToRay(point: Vector2, out: Ray): void {\r\n        var finalPoint: Vector2 = Camera._tempVector20;\r\n        var vp: Viewport = this.normalizedViewport;\r\n        point.x = point.x * Config3D.pixelRatio;\r\n        point.y = point.y * Config3D.pixelRatio;\r\n        finalPoint.x = point.x * vp.width;\r\n        finalPoint.y = point.y * vp.height;\r\n\r\n        Picker.calculateCursorRay(finalPoint, this.viewport, this._projectionMatrix, this.viewMatrix, null, out);\r\n    }\r\n\r\n    /**\r\n     * 将一个点从世界空间转换到视口空间。\r\n     * @param position 世界空间的坐标。\r\n     * @param out  x、y、z为视口空间坐标,w为相对于摄像机的z轴坐标。\r\n     */\r\n    worldToViewportPoint(position: Vector3, out: Vector4): void {\r\n        Matrix4x4.multiply(this._projectionMatrix, this._viewMatrix, this._projectionViewMatrix);\r\n        this.viewport.project(position, this._projectionViewMatrix, out);\r\n        var r = Config3D.pixelRatio;\r\n        let _wr = (out.x - this.viewport.x) / r;\r\n        let _hr = (out.y - this.viewport.y) / r;\r\n        out.x = _wr + this.viewport.x;\r\n        out.y = _hr + this.viewport.y;\r\n\r\n        out.x = (out.x / ILaya.stage.clientScaleX) | 0;\r\n        out.y = (out.y / ILaya.stage.clientScaleY) | 0;\r\n    }\r\n\r\n    /**\r\n     * 将一个点从世界空间转换到归一化视口空间。\r\n     * @param position 世界空间的坐标。\r\n     * @param out  x、y、z为归一化视口空间坐标,w为相对于摄像机的z轴坐标。\r\n     */\r\n    worldToNormalizedViewportPoint(position: Vector3, out: Vector4): void {\r\n        this.worldToViewportPoint(position, out);\r\n        out.x = out.x / ILaya.stage.width;\r\n        out.y = out.y / ILaya.stage.height;\r\n    }\r\n\r\n    /**\r\n     * 转换2D屏幕坐标系统到3D正交投影下的坐标系统，注:只有正交模型下有效。\r\n     * @param   source 源坐标。\r\n     * @param   out 输出坐标。\r\n     * @return 是否转换成功。\r\n     */\r\n    convertScreenCoordToOrthographicCoord(source: Vector3, out: Vector3): boolean {//TODO:是否应该使用viewport宽高\r\n        if (this._orthographic) {\r\n            var clientWidth: number = this.clientWidth;\r\n            var clientHeight: number = this.clientHeight;\r\n            var ratioX: number = this.orthographicVerticalSize * this.aspectRatio / clientWidth;\r\n            var ratioY: number = this.orthographicVerticalSize / clientHeight;\r\n            out.x = (-clientWidth / 2 + source.x * ILaya.stage.clientScaleX) * ratioX;\r\n            out.y = (clientHeight / 2 - source.y * ILaya.stage.clientScaleY) * ratioY;\r\n            out.z = (this.nearPlane - this.farPlane) * (source.z + 1) / 2 - this.nearPlane;\r\n            Vector3.transformCoordinate(out, this.transform.worldMatrix, out);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     */\r\n    destroy(destroyChild: boolean = true): void {\r\n        this._needInternalRenderTexture() && (!this._internalRenderTexture._inPool) && RenderTexture.recoverToPool(this._internalRenderTexture);\r\n        this._offScreenRenderTexture = null;\r\n        this.transform.off(Event.TRANSFORM_CHANGED, this, this._onTransformChanged);\r\n        ILaya.stage.off(Event.RESIZE, this, this._onScreenSizeChanged);\r\n        this._cameraEventCommandBuffer = {};\r\n        this._shaderValues.destroy();\r\n        if (RenderContext3D._instance.camera == this) {\r\n            RenderContext3D._instance.cameraShaderValue = null;\r\n            RenderContext3D._instance.camera = null;\r\n        }\r\n        super.destroy(destroyChild);\r\n    }\r\n\r\n    /**\r\n     * 增加camera渲染节点渲染缓存\r\n     * @param event 相机事件标志\r\n     * @param commandBuffer 渲染命令流\r\n     */\r\n    addCommandBuffer(event: CameraEventFlags, commandBuffer: CommandBuffer): void {\r\n        var commandBufferArray: CommandBuffer[] = this._cameraEventCommandBuffer[event];\r\n        if (!commandBufferArray) commandBufferArray = this._cameraEventCommandBuffer[event] = [];\r\n        if (commandBufferArray.indexOf(commandBuffer) < 0)\r\n            commandBufferArray.push(commandBuffer);\r\n        commandBuffer._camera = this;\r\n        if (commandBuffer.casterShadow) {\r\n            this._addCasterShadowCommandBuffer(commandBuffer);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 移除camera渲染节点渲染缓存\r\n     * @param event 相机事件标志\r\n     * @param commandBuffer 渲染命令流\r\n     */\r\n    removeCommandBuffer(event: CameraEventFlags, commandBuffer: CommandBuffer): void {\r\n        var commandBufferArray: CommandBuffer[] = this._cameraEventCommandBuffer[event];\r\n        if (commandBufferArray) {\r\n            var index: number = commandBufferArray.indexOf(commandBuffer);\r\n            if (index != -1) commandBufferArray.splice(index, 1);\r\n\r\n            commandBuffer.casterShadow && this._removeCasterShadowCommandBuffer(commandBuffer);\r\n        }\r\n        else\r\n            throw \"Camera:unknown event.\";\r\n    }\r\n\r\n    /**\r\n     * 移除camera相机节点的所有渲染缓存\r\n     * @param event 相机事件标志\r\n     */\r\n    removeCommandBuffers(event: CameraEventFlags): void {\r\n        if (this._cameraEventCommandBuffer[event])\r\n            this._cameraEventCommandBuffer[event].length = 0;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _create(): Node {\r\n        return new Camera();\r\n    }\r\n\r\n    /** @internal [NATIVE]*/\r\n    _boundFrustumBuffer: Float32Array;\r\n}\r\n\r\n","/**\r\n * PBR材质渲染质量。\r\n */\r\nexport enum PBRRenderQuality {\r\n    /**高质量。*/\r\n    High,\r\n    /**低质量。*/\r\n    Low\r\n}","import { Keyframe, WeightedMode } from \"./Keyframe\";\r\n/**\r\n\t * <code>FloatKeyFrame</code> 类用于创建浮点关键帧实例。\r\n\t */\r\nexport class FloatKeyframe extends Keyframe {\r\n\t/**内切线 */\r\n\tinTangent: number;\r\n\t/**外切线 */\r\n\toutTangent: number;\r\n\t/**帧数据 */\r\n\tvalue: number;\r\n\t/**内权重 */\r\n\tinWeight: number = Keyframe.defaultWeight;\r\n\t/**外权重 */\r\n\toutWeight: number = Keyframe.defaultWeight;\r\n\t/**权重模式 */\r\n\tweightedMode: number = WeightedMode.None;\r\n\r\n\t/**\r\n\t * 创建一个 <code>FloatKeyFrame</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆数据\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tsuper.cloneTo(destObject);\r\n\t\tvar destKeyFrame: FloatKeyframe = (<FloatKeyframe>destObject);\r\n\t\tdestKeyFrame.inTangent = this.inTangent;\r\n\t\tdestKeyFrame.outTangent = this.outTangent;\r\n\t\tdestKeyFrame.value = this.value;\r\n\t\tdestKeyFrame.inTangent = this.inTangent;\r\n\t\tdestKeyFrame.outTangent = this.outTangent;\r\n\t\tdestKeyFrame.value = this.value;\r\n\t\tdestKeyFrame.inWeight = this.inWeight;\r\n\t\tdestKeyFrame.outWeight = this.outWeight;\r\n\t\tdestKeyFrame.weightedMode = this.weightedMode;\r\n\t}\r\n\r\n\tclone(): FloatKeyframe {\r\n\t\tlet f = new FloatKeyframe();\r\n\t\tthis.cloneTo(f);\r\n\t\treturn f;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { Quaternion } from \"../../maths/Quaternion\";\r\nimport { Vector4 } from \"../../maths/Vector4\";\r\nimport { Keyframe } from \"./Keyframe\";\r\n\r\n/**\r\n * <code>QuaternionKeyframe</code> 类用于创建四元数关键帧实例。\r\n */\r\nexport class QuaternionKeyframe extends Keyframe {\r\n\t/**内切线 */\r\n\tinTangent: Vector4 = new Vector4();\r\n\t/**外切线 */\r\n\toutTangent: Vector4 = new Vector4();\r\n\t/**帧数据 */\r\n\tvalue: Quaternion = new Quaternion();\r\n\t/**内权重 */\r\n\tinWeight: Vector4;\r\n\t/**外权重 */\r\n\toutWeight: Vector4;\r\n\t/**权重模式*/\r\n\tweightedMode: Vector4;\r\n\r\n\t/**\r\n\t * 创建一个 <code>QuaternionKeyframe</code> 实例。\r\n\t */\r\n\tconstructor(weightMode: boolean = false) {\r\n\t\tsuper();\r\n\t\tif (weightMode) {\r\n\t\t\tthis.inWeight = new Vector4();\r\n\t\t\tthis.outWeight = new Vector4();\r\n\t\t\tthis.weightedMode = new Vector4();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @param\tdestObject 克隆源。\r\n\t * @override\r\n\t */\r\n\tcloneTo(dest: any): void {\r\n\t\tsuper.cloneTo(dest);\r\n\t\tvar destKeyFarme: QuaternionKeyframe = (<QuaternionKeyframe>dest);\r\n\t\tthis.inTangent.cloneTo(destKeyFarme.inTangent);\r\n\t\tthis.outTangent.cloneTo(destKeyFarme.outTangent);\r\n\t\tthis.value.cloneTo(destKeyFarme.value);\r\n\t\tif (this.weightedMode) {\r\n\t\t\tthis.inWeight.cloneTo(destKeyFarme.inWeight);\r\n\t\t\tthis.outWeight.cloneTo(destKeyFarme.outWeight);\r\n\t\t\tthis.weightedMode.cloneTo(destKeyFarme.weightedMode);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n","import { Vector3 } from \"../../maths/Vector3\";\r\nimport { Keyframe, WeightedMode } from \"./Keyframe\";\r\n\r\n/**\r\n * <code>Vector3Keyframe</code> 类用于创建三维向量关键帧实例。\r\n */\r\nexport class Vector3Keyframe extends Keyframe {\r\n\t/**内切线 */\r\n\tinTangent: Vector3 = new Vector3();\r\n\t/**外切线 */\r\n\toutTangent: Vector3 = new Vector3();\r\n\t/**帧数据 */\r\n\tvalue: Vector3 = new Vector3();\r\n\t/**内权重 */\r\n\tinWeight: Vector3;\r\n\t/**外权重 */\r\n\toutWeight: Vector3;\r\n\t/**权重模式 */\r\n\tweightedMode: Vector3;\r\n\r\n\r\n\t/**\r\n\t * 创建一个 <code>Vector3Keyframe</code> 实例。\r\n\t */\r\n\tconstructor(weightMode:boolean = false) {\r\n\t\tsuper();\r\n\t\tif(weightMode){\r\n\t\t\tthis.inWeight = new Vector3(Keyframe.defaultWeight, Keyframe.defaultWeight, Keyframe.defaultWeight);\r\n\t\t\tthis.outWeight = new Vector3(Keyframe.defaultWeight, Keyframe.defaultWeight, Keyframe.defaultWeight);\r\n\t\t\tthis.weightedMode = new Vector3(WeightedMode.None, WeightedMode.None, WeightedMode.None);\r\n\t\t}\r\n\t\t\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @param\tdestObject 克隆源。\r\n\t * @override\r\n\t */\r\n\tcloneTo(dest: any): void {\r\n\t\tsuper.cloneTo(dest);\r\n\t\tvar destKeyFarme: Vector3Keyframe = (<Vector3Keyframe>dest);\r\n\t\tthis.inTangent.cloneTo(destKeyFarme.inTangent);\r\n\t\tthis.outTangent.cloneTo(destKeyFarme.outTangent);\r\n\t\tthis.value.cloneTo(destKeyFarme.value);\r\n\t\tif(this.weightedMode){\r\n\t\t\tthis.inWeight.cloneTo(destKeyFarme.inWeight);\r\n\t\t\tthis.outWeight.cloneTo(destKeyFarme.outWeight);\r\n\t\t\tthis.weightedMode.cloneTo(destKeyFarme.weightedMode);\r\n\t\t}\r\n\t\t\r\n\t}\r\n}","import { KeyframeNode } from \"./KeyframeNode\";\r\nimport { KeyframeNodeList } from \"./KeyframeNodeList\";\r\nimport { AnimationEvent } from \"./AnimationEvent\";\r\nimport { FloatKeyframe } from \"../core/FloatKeyframe\"\r\nimport { QuaternionKeyframe } from \"../core/QuaternionKeyframe\"\r\nimport { Vector3Keyframe } from \"../core/Vector3Keyframe\"\r\nimport { Byte } from \"../../utils/Byte\"\r\nimport { AnimationClip } from \"./AnimationClip\";\r\nimport { Quaternion } from \"../../maths/Quaternion\";\r\nimport { Vector3 } from \"../../maths/Vector3\";\r\nimport { Vector4 } from \"../../maths/Vector4\";\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class AnimationClipParser03 {\r\n\tprivate static _animationClip: AnimationClip;\r\n\tprivate static _reader: Byte;\r\n\tprivate static _strings: any[] = [];\r\n\tprivate static _BLOCK: any = { count: 0 };\r\n\tprivate static _DATA: any = { offset: 0, size: 0 };\r\n\r\n\tprivate static READ_DATA(): void {\r\n\t\tAnimationClipParser03._DATA.offset = AnimationClipParser03._reader.getUint32();\r\n\t\tAnimationClipParser03._DATA.size = AnimationClipParser03._reader.getUint32();\r\n\t}\r\n\r\n\tprivate static READ_BLOCK(): void {\r\n\t\tvar count: number = AnimationClipParser03._BLOCK.count = AnimationClipParser03._reader.getUint16();\r\n\t\tvar blockStarts: any[] = AnimationClipParser03._BLOCK.blockStarts = [];\r\n\t\tvar blockLengths: any[] = AnimationClipParser03._BLOCK.blockLengths = [];\r\n\t\tfor (var i: number = 0; i < count; i++) {\r\n\t\t\tblockStarts.push(AnimationClipParser03._reader.getUint32());\r\n\t\t\tblockLengths.push(AnimationClipParser03._reader.getUint32());\r\n\t\t}\r\n\t}\r\n\r\n\tprivate static READ_STRINGS(): void {\r\n\t\tvar offset: number = AnimationClipParser03._reader.getUint32();\r\n\t\tvar count: number = AnimationClipParser03._reader.getUint16();\r\n\t\tvar prePos: number = AnimationClipParser03._reader.pos;\r\n\t\tAnimationClipParser03._reader.pos = offset + AnimationClipParser03._DATA.offset;\r\n\r\n\t\tfor (var i: number = 0; i < count; i++)\r\n\t\t\tAnimationClipParser03._strings[i] = AnimationClipParser03._reader.readUTFString();\r\n\t\tAnimationClipParser03._reader.pos = prePos;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic parse(clip: AnimationClip, reader: Byte): void {\r\n\t\tAnimationClipParser03._animationClip = clip;\r\n\t\tAnimationClipParser03._reader = reader;\r\n\t\r\n\t\tAnimationClipParser03.READ_DATA();\r\n\t\tAnimationClipParser03.READ_BLOCK();\r\n\t\tAnimationClipParser03.READ_STRINGS();\r\n\t\tfor (var i: number = 0, n: number = AnimationClipParser03._BLOCK.count; i < n; i++) {\r\n\t\t\tvar index: number = reader.getUint16();\r\n\t\t\tvar blockName: string = AnimationClipParser03._strings[index];\r\n\t\t\tvar fn:()=>void = (AnimationClipParser03 as any)[\"READ_\" + blockName];\r\n\t\t\tif (fn == null)\r\n\t\t\t\tthrow new Error(\"model file err,no this function:\" + index + \" \" + blockName);\r\n\t\t\telse\r\n\t\t\t\tfn.call(null);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic READ_ANIMATIONS(): void {\r\n\t\tvar i: number, j: number;\r\n\t\tvar node: KeyframeNode;\r\n\t\tvar reader: Byte = AnimationClipParser03._reader;\r\n\r\n\t\tvar startTimeTypes: number[] = [];\r\n\t\tvar startTimeTypeCount: number = reader.getUint16();\r\n\t\tstartTimeTypes.length = startTimeTypeCount;\r\n\t\tfor (i = 0; i < startTimeTypeCount; i++)\r\n\t\t\tstartTimeTypes[i] = reader.getFloat32();\r\n\r\n\t\tvar clip: AnimationClip = AnimationClipParser03._animationClip;\r\n\t\tclip.name = AnimationClipParser03._strings[reader.getUint16()];\r\n\t\tvar clipDur: number = clip._duration = reader.getFloat32();\r\n\t\tclip.islooping = !!reader.getByte();\r\n\t\tclip._frameRate = reader.getInt16();\r\n\t\tvar nodeCount: number = reader.getInt16();\r\n\t\tvar nodes = clip._nodes;\r\n\t\t(nodes as KeyframeNodeList).count = nodeCount;\r\n\t\tvar nodesMap: any = clip._nodesMap = {};\r\n\t\tvar nodesDic: any = clip._nodesDic = {};\r\n\r\n\t\tfor (i = 0; i < nodeCount; i++) {\r\n\t\t\tnode = new KeyframeNode();\r\n\t\t\t(nodes as KeyframeNodeList).setNodeByIndex(i, node);\r\n\t\t\tnode._indexInList = i;\r\n\t\t\tvar type: number = node.type = reader.getUint8();\r\n\r\n\t\t\tvar pathLength: number = reader.getUint16();\r\n\t\t\tnode._setOwnerPathCount(pathLength);\r\n\t\t\tfor (j = 0; j < pathLength; j++)\r\n\t\t\t\tnode._setOwnerPathByIndex(j, AnimationClipParser03._strings[reader.getUint16()]);//TODO:如果只有根节点并且为空，是否可以和componentType一样优化。\r\n\r\n\t\t\tvar nodePath: string = node._joinOwnerPath(\"/\");\r\n\t\t\tvar mapArray: KeyframeNode[] = nodesMap[nodePath];\r\n\t\t\t(mapArray) || (nodesMap[nodePath] = mapArray = []);\r\n\t\t\tmapArray.push(node);\r\n\r\n\t\t\tnode.propertyOwner = AnimationClipParser03._strings[reader.getUint16()];\r\n\r\n\t\t\tvar propertyLength: number = reader.getUint16();\r\n\t\t\tnode._setPropertyCount(propertyLength);\r\n\t\t\tfor (j = 0; j < propertyLength; j++)\r\n\t\t\t\tnode._setPropertyByIndex(j, AnimationClipParser03._strings[reader.getUint16()]);\r\n\r\n\t\t\tvar fullPath: string = nodePath + \".\" + node.propertyOwner + \".\" + node._joinProperty(\".\");\r\n\t\t\tnodesDic[fullPath] = node;\r\n\t\t\tnode.fullPath = fullPath;\r\n\r\n\t\t\tvar keyframeCount: number = reader.getUint16();\r\n\t\t\tnode._setKeyframeCount(keyframeCount);\r\n\r\n\t\t\tfor (j = 0; j < keyframeCount; j++) {\r\n\t\t\t\tswitch (type) {\r\n\t\t\t\t\tcase 0:\r\n\t\t\t\t\t\tvar floatKeyframe: FloatKeyframe = new FloatKeyframe();\r\n\t\t\t\t\t\tnode._setKeyframeByIndex(j, floatKeyframe);\r\n\t\t\t\t\t\tfloatKeyframe.time = startTimeTypes[reader.getUint16()];\r\n\t\t\t\t\t\tfloatKeyframe.inTangent = reader.getFloat32();\r\n\t\t\t\t\t\tfloatKeyframe.outTangent = reader.getFloat32();\r\n\t\t\t\t\t\tfloatKeyframe.value = reader.getFloat32();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 1:\r\n\t\t\t\t\tcase 3:\r\n\t\t\t\t\tcase 4:\r\n\t\t\t\t\t\tvar floatArrayKeyframe: Vector3Keyframe = new Vector3Keyframe();\r\n\t\t\t\t\t\tnode._setKeyframeByIndex(j, floatArrayKeyframe);\r\n\r\n\t\t\t\t\t\tfloatArrayKeyframe.time = startTimeTypes[reader.getUint16()];\r\n\r\n\r\n\t\t\t\t\t\t\tvar inTangent: Vector3 = floatArrayKeyframe.inTangent;\r\n\t\t\t\t\t\t\tvar outTangent: Vector3 = floatArrayKeyframe.outTangent;\r\n\t\t\t\t\t\t\tvar value: Vector3 = floatArrayKeyframe.value;\r\n\t\t\t\t\t\t\tinTangent.x = reader.getFloat32();\r\n\t\t\t\t\t\t\tinTangent.y = reader.getFloat32();\r\n\t\t\t\t\t\t\tinTangent.z = reader.getFloat32();\r\n\t\t\t\t\t\t\toutTangent.x = reader.getFloat32();\r\n\t\t\t\t\t\t\toutTangent.y = reader.getFloat32();\r\n\t\t\t\t\t\t\toutTangent.z = reader.getFloat32();\r\n\t\t\t\t\t\t\tvalue.x = reader.getFloat32();\r\n\t\t\t\t\t\t\tvalue.y = reader.getFloat32();\r\n\t\t\t\t\t\t\tvalue.z = reader.getFloat32();\r\n\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\tvar quaArrayKeyframe: QuaternionKeyframe = new QuaternionKeyframe();\r\n\t\t\t\t\t\tnode._setKeyframeByIndex(j, quaArrayKeyframe);\r\n\t\t\t\t\t\tquaArrayKeyframe.time = startTimeTypes[reader.getUint16()];\r\n\r\n\t\t\t\t\t\t\tvar inTangentQua: Vector4 = quaArrayKeyframe.inTangent;\r\n\t\t\t\t\t\t\tvar outTangentQua: Vector4 = quaArrayKeyframe.outTangent;\r\n\t\t\t\t\t\t\tvar valueQua: Quaternion = quaArrayKeyframe.value;\r\n\t\t\t\t\t\t\tinTangentQua.x = reader.getFloat32();\r\n\t\t\t\t\t\t\tinTangentQua.y = reader.getFloat32();\r\n\t\t\t\t\t\t\tinTangentQua.z = reader.getFloat32();\r\n\t\t\t\t\t\t\tinTangentQua.w = reader.getFloat32();\r\n\t\t\t\t\t\t\toutTangentQua.x = reader.getFloat32();\r\n\t\t\t\t\t\t\toutTangentQua.y = reader.getFloat32();\r\n\t\t\t\t\t\t\toutTangentQua.z = reader.getFloat32();\r\n\t\t\t\t\t\t\toutTangentQua.w = reader.getFloat32();\r\n\t\t\t\t\t\t\tvalueQua.x = reader.getFloat32();\r\n\t\t\t\t\t\t\tvalueQua.y = reader.getFloat32();\r\n\t\t\t\t\t\t\tvalueQua.z = reader.getFloat32();\r\n\t\t\t\t\t\t\tvalueQua.w = reader.getFloat32();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tthrow \"AnimationClipParser03:unknown type.\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tvar eventCount: number = reader.getUint16();\r\n\t\tfor (i = 0; i < eventCount; i++) {\r\n\t\t\tvar event: AnimationEvent = new AnimationEvent();\r\n\t\t\tevent.time = Math.min(clipDur, reader.getFloat32());//TODO:事件时间可能大于动画总时长\r\n\t\t\tevent.eventName = AnimationClipParser03._strings[reader.getUint16()];\r\n\t\t\tvar params: Array<number|boolean|string> = [];\r\n\t\t\tvar paramCount: number = reader.getUint16();\r\n\t\t\t(paramCount > 0) && (event.params = params = []);\r\n\r\n\t\t\tfor (j = 0; j < paramCount; j++) {\r\n\t\t\t\tvar eventType: number = reader.getByte();\r\n\t\t\t\tswitch (eventType) {\r\n\t\t\t\t\tcase 0:\r\n\t\t\t\t\t\tparams.push(!!reader.getByte());\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\tparams.push(reader.getInt32());\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\tparams.push(reader.getFloat32());\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 3:\r\n\t\t\t\t\t\tparams.push(AnimationClipParser03._strings[reader.getUint16()]);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tthrow new Error(\"unknown type.\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tclip.addEvent(event);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n","import { Vector2 } from \"../../maths/Vector2\";\r\nimport { Keyframe, WeightedMode } from \"./Keyframe\";\r\n\r\n\r\n/**\r\n * <code>Vector2Keyframe</code> 类用于创建三维向量关键帧实例。\r\n */\r\nexport class Vector2Keyframe extends Keyframe {\r\n\t/**内切线 */\r\n\tinTangent: Vector2 = new Vector2();\r\n\t/**外切线 */\r\n\toutTangent: Vector2 = new Vector2();\r\n\t/**帧数据 */\r\n\tvalue: Vector2 = new Vector2();\r\n\t/**内权重 */\r\n\tinWeight: Vector2;\r\n\t/**外权重 */\r\n\toutWeight: Vector2;\r\n\t/**权重模式 */\r\n\tweightedMode: Vector2;\r\n\r\n\r\n\t/**\r\n\t * 创建一个 <code>Vector2Keyframe</code> 实例。\r\n\t */\r\n\tconstructor(weightMode:boolean = false) {\r\n\t\tsuper();\r\n\t\tif(weightMode){\r\n\t\t\tthis.inWeight = new Vector2(Keyframe.defaultWeight, Keyframe.defaultWeight);\r\n\t\t\tthis.outWeight = new Vector2(Keyframe.defaultWeight, Keyframe.defaultWeight);\r\n\t\t\tthis.weightedMode = new Vector2(WeightedMode.None, WeightedMode.None);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @param\tdestObject 克隆源。\r\n\t * @override\r\n\t */\r\n\tcloneTo(dest: any): void {\r\n\t\tsuper.cloneTo(dest);\r\n\t\tvar destKeyFarme: Vector2Keyframe = (<Vector2Keyframe>dest);\r\n\t\tthis.inTangent.cloneTo(destKeyFarme.inTangent);\r\n\t\tthis.outTangent.cloneTo(destKeyFarme.outTangent);\r\n\t\tthis.value.cloneTo(destKeyFarme.value);\r\n\t\tif(this.weightedMode){\r\n\t\t\tthis.inWeight.cloneTo(destKeyFarme.inWeight);\r\n\t\t\tthis.outWeight.cloneTo(destKeyFarme.outWeight);\r\n\t\t\tthis.weightedMode.cloneTo(destKeyFarme.weightedMode);\r\n\t\t}\r\n\t\t\r\n\t}\r\n}\r\n","import { Vector4 } from \"../../maths/Vector4\";\r\nimport { Keyframe, WeightedMode } from \"./Keyframe\";\r\n\r\n\r\n/**\r\n * <code>Vector4Keyframe</code> 类用于创建三维向量关键帧实例。\r\n */\r\nexport class Vector4Keyframe extends Keyframe {\r\n\t/**内切线 */\r\n\tinTangent: Vector4 = new Vector4();\r\n\t/**外切线 */\r\n\toutTangent: Vector4 = new Vector4();\r\n\t/**帧数据 */\r\n\tvalue: Vector4 = new Vector4();\r\n\t/**内权重 */\r\n\tinWeight: Vector4;\r\n\t/**外权重 */\r\n\toutWeight: Vector4;\r\n\t/**权重模式 */\r\n\tweightedMode: Vector4;\r\n\r\n\r\n\t/**\r\n\t * 创建一个 <code>Vector4Keyframe</code> 实例。\r\n\t */\r\n\tconstructor(weightMode: boolean = false) {\r\n\t\tsuper();\r\n\t\tif (weightMode) {\r\n\t\t\tthis.inWeight = new Vector4(Keyframe.defaultWeight, Keyframe.defaultWeight, Keyframe.defaultWeight, Keyframe.defaultWeight);\r\n\t\t\tthis.outWeight = new Vector4(Keyframe.defaultWeight, Keyframe.defaultWeight, Keyframe.defaultWeight, Keyframe.defaultWeight);\r\n\t\t\tthis.weightedMode = new Vector4(WeightedMode.None, WeightedMode.None, WeightedMode.None, WeightedMode.None);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @param\tdestObject 克隆源。\r\n\t * @override\r\n\t */\r\n\tcloneTo(dest: any): void {\r\n\t\tsuper.cloneTo(dest);\r\n\t\tvar destKeyFarme: Vector4Keyframe = (<Vector4Keyframe>dest);\r\n\t\tthis.inTangent.cloneTo(destKeyFarme.inTangent);\r\n\t\tthis.outTangent.cloneTo(destKeyFarme.outTangent);\r\n\t\tthis.value.cloneTo(destKeyFarme.value);\r\n\t\tif (this.weightedMode) {\r\n\t\t\tthis.inWeight.cloneTo(destKeyFarme.inWeight);\r\n\t\t\tthis.outWeight.cloneTo(destKeyFarme.outWeight);\r\n\t\t\tthis.weightedMode.cloneTo(destKeyFarme.weightedMode);\r\n\t\t}\r\n\t}\r\n}","import { KeyframeNode } from \"./KeyframeNode\";\r\nimport { KeyframeNodeList } from \"./KeyframeNodeList\";\r\nimport { AnimationEvent } from \"./AnimationEvent\";\r\nimport { FloatKeyframe } from \"../core/FloatKeyframe\"\r\nimport { QuaternionKeyframe } from \"../core/QuaternionKeyframe\"\r\nimport { Vector3Keyframe } from \"../core/Vector3Keyframe\"\r\nimport { AnimationClip } from \"./AnimationClip\";\r\nimport { Byte } from \"../../utils/Byte\";\r\nimport { HalfFloatUtils } from \"../../utils/HalfFloatUtils\";\r\nimport { Vector2Keyframe } from \"../core/Vector2Keyframe\";\r\nimport { Vector4Keyframe } from \"../core/Vector4Keyframe\";\r\nimport { KeyFrameValueType } from \"../component/Animator/KeyframeNodeOwner\";\r\nimport { Quaternion } from \"../../maths/Quaternion\";\r\nimport { Vector2 } from \"../../maths/Vector2\";\r\nimport { Vector3 } from \"../../maths/Vector3\";\r\nimport { Vector4 } from \"../../maths/Vector4\";\r\nimport { WeightedMode } from \"../core/Keyframe\";\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class AnimationClipParser04 {\r\n\tprivate static _animationClip: AnimationClip | null;\r\n\tprivate static _reader: Byte | null;\r\n\tprivate static _strings: any[] = [];\r\n\tprivate static _BLOCK: any = { count: 0 };\r\n\tprivate static _DATA: any = { offset: 0, size: 0 };\r\n\tprivate static _version: string | null;\r\n\r\n\tprivate static READ_DATA(): void {\r\n\t\tAnimationClipParser04._DATA.offset = AnimationClipParser04._reader!.getUint32();\r\n\t\tAnimationClipParser04._DATA.size = AnimationClipParser04._reader!.getUint32();\r\n\t}\r\n\r\n\tprivate static READ_BLOCK(): void {\r\n\t\tvar count: number = AnimationClipParser04._BLOCK.count = AnimationClipParser04._reader!.getUint16();\r\n\t\tvar blockStarts: any[] = AnimationClipParser04._BLOCK.blockStarts = [];\r\n\t\tvar blockLengths: any[] = AnimationClipParser04._BLOCK.blockLengths = [];\r\n\t\tfor (var i: number = 0; i < count; i++) {\r\n\t\t\tblockStarts.push(AnimationClipParser04._reader!.getUint32());\r\n\t\t\tblockLengths.push(AnimationClipParser04._reader!.getUint32());\r\n\t\t}\r\n\t}\r\n\r\n\tprivate static READ_STRINGS(): void {\r\n\t\tvar offset: number = AnimationClipParser04._reader!.getUint32();\r\n\t\tvar count: number = AnimationClipParser04._reader!.getUint16();\r\n\t\tvar prePos: number = AnimationClipParser04._reader!.pos;\r\n\t\tAnimationClipParser04._reader!.pos = offset + AnimationClipParser04._DATA.offset;\r\n\r\n\t\tfor (var i: number = 0; i < count; i++)\r\n\t\t\tAnimationClipParser04._strings[i] = AnimationClipParser04._reader!.readUTFString();\r\n\t\tAnimationClipParser04._reader!.pos = prePos;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic parse(clip: AnimationClip, reader: Byte, version: string): void {\r\n\t\tAnimationClipParser04._animationClip = clip;\r\n\t\tAnimationClipParser04._reader = reader;\r\n\t\tAnimationClipParser04._version = version;\r\n\t\tAnimationClipParser04.READ_DATA();\r\n\t\tAnimationClipParser04.READ_BLOCK();\r\n\t\tAnimationClipParser04.READ_STRINGS();\r\n\t\tfor (var i: number = 0, n: number = AnimationClipParser04._BLOCK.count; i < n; i++) {\r\n\t\t\tvar index: number = reader.getUint16();\r\n\t\t\tvar blockName: string = AnimationClipParser04._strings[index];\r\n\t\t\tvar fn: () => void = (AnimationClipParser04 as any)[\"READ_\" + blockName];\r\n\t\t\tif (fn == null)\r\n\t\t\t\tthrow new Error(\"model file err,no this function:\" + index + \" \" + blockName);\r\n\t\t\telse\r\n\t\t\t\tfn.call(null);\r\n\t\t}\r\n\t\tAnimationClipParser04._version = null;\r\n\t\tAnimationClipParser04._reader = null;\r\n\t\tAnimationClipParser04._animationClip = null;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic READ_ANIMATIONS(): void {\r\n\t\tvar i: number, j: number;\r\n\t\tvar node: KeyframeNode;\r\n\t\tvar reader: Byte = AnimationClipParser04._reader!;\r\n\r\n\t\tvar startTimeTypes: number[] = [];\r\n\t\tvar startTimeTypeCount: number = reader.getUint16();\r\n\t\tstartTimeTypes.length = startTimeTypeCount;\r\n\t\tfor (i = 0; i < startTimeTypeCount; i++)\r\n\t\t\tstartTimeTypes[i] = reader.getFloat32();\r\n\r\n\t\tvar clip: AnimationClip = AnimationClipParser04._animationClip!;\r\n\t\tclip.name = AnimationClipParser04._strings[reader.getUint16()];\r\n\t\tvar clipDur: number = clip._duration = reader.getFloat32();\r\n\t\tclip.islooping = !!reader.getByte();\r\n\t\tclip._frameRate = reader.getInt16();\r\n\t\tvar nodeCount: number = reader.getInt16();\r\n\t\tvar nodes: KeyframeNodeList = clip._nodes!;\r\n\t\tnodes.count = nodeCount;\r\n\t\tvar nodesMap: any = clip._nodesMap = {};\r\n\t\tvar nodesDic: any = clip._nodesDic = {};\r\n\r\n\t\tfor (i = 0; i < nodeCount; i++) {\r\n\t\t\tnode = new KeyframeNode();\r\n\t\t\tif (\"LAYAANIMATION:WEIGHT_05\" == AnimationClipParser04._version) {\r\n\t\t\t\tif (1 == reader.getByte()) {\r\n\t\t\t\t\t//propertyChangePath,IDE里面还原数据时候使用，引擎中是不需要的\r\n\t\t\t\t\tnode.propertyChangePath = AnimationClipParser04._strings[reader.getUint16()];\r\n\t\t\t\t}\r\n\t\t\t\tif (1 == reader.getByte()) {\r\n\t\t\t\t\tnode.callbackFunData = AnimationClipParser04._strings[reader.getUint16()];\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet paramLen = reader.getUint8();\r\n\t\t\t\tlet callParms: any[] = null;\r\n\t\t\t\tfor (j = 0; j < paramLen; j++) {\r\n\t\t\t\t\tif (null == callParms) {\r\n\t\t\t\t\t\tcallParms = [];\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcallParms.push(AnimationClipParser04._strings[reader.getUint16()]);\r\n\t\t\t\t}\r\n\t\t\t\tnode.callParams = callParms;\r\n\t\t\t}\r\n\t\t\tnodes.setNodeByIndex(i, node);\r\n\t\t\tnode._indexInList = i;\r\n\t\t\tvar type: number = node.type = reader.getUint8();\r\n\r\n\t\t\tvar pathLength: number = reader.getUint16();\r\n\t\t\tnode._setOwnerPathCount(pathLength);\r\n\t\t\tfor (j = 0; j < pathLength; j++)\r\n\t\t\t\tnode._setOwnerPathByIndex(j, AnimationClipParser04._strings[reader.getUint16()]);//TODO:如果只有根节点并且为空，是否可以和componentType一样优化。\r\n\r\n\t\t\tvar nodePath: string = node._joinOwnerPath(\"/\");\r\n\t\t\tvar mapArray: KeyframeNode[] = nodesMap[nodePath];\r\n\t\t\t(mapArray) || (nodesMap[nodePath] = mapArray = []);\r\n\t\t\tmapArray.push(node);\r\n\r\n\t\t\tnode.propertyOwner = AnimationClipParser04._strings[reader.getUint16()];\r\n\r\n\t\t\tvar propertyLength: number = reader.getUint16();\r\n\t\t\tnode._setPropertyCount(propertyLength);\r\n\t\t\tfor (j = 0; j < propertyLength; j++)\r\n\t\t\t\tnode._setPropertyByIndex(j, AnimationClipParser04._strings[reader.getUint16()]);\r\n\r\n\t\t\tvar fullPath: string = nodePath + \".\" + node.propertyOwner + \".\" + node._joinProperty(\".\");\r\n\t\t\tnodesDic[fullPath] = node;\r\n\t\t\tnode.fullPath = fullPath;\r\n\t\t\tnode.nodePath = nodePath;\r\n\r\n\t\t\tvar keyframeCount: number = reader.getUint16();\r\n\t\t\tnode._setKeyframeCount(keyframeCount);\r\n\t\t\tswitch (AnimationClipParser04._version) {\r\n\t\t\t\tcase \"LAYAANIMATION:04\":\r\n\t\t\t\t\tfor (j = 0; j < keyframeCount; j++) {\r\n\t\t\t\t\t\tswitch (type) {\r\n\t\t\t\t\t\t\tcase KeyFrameValueType.Float:\r\n\t\t\t\t\t\t\t\tvar floatKeyframe: FloatKeyframe = new FloatKeyframe();\r\n\t\t\t\t\t\t\t\tnode._setKeyframeByIndex(j, floatKeyframe);\r\n\t\t\t\t\t\t\t\tfloatKeyframe.time = startTimeTypes[reader.getUint16()];\r\n\t\t\t\t\t\t\t\tfloatKeyframe.inTangent = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tfloatKeyframe.outTangent = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tfloatKeyframe.value = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase KeyFrameValueType.Position:\r\n\t\t\t\t\t\t\tcase KeyFrameValueType.Scale:\r\n\t\t\t\t\t\t\tcase KeyFrameValueType.RotationEuler:\r\n\t\t\t\t\t\t\tcase KeyFrameValueType.Vector3:\r\n\t\t\t\t\t\t\t\tvar floatArrayKeyframe: Vector3Keyframe = new Vector3Keyframe();\r\n\t\t\t\t\t\t\t\tnode._setKeyframeByIndex(j, floatArrayKeyframe);\r\n\t\t\t\t\t\t\t\tfloatArrayKeyframe.time = startTimeTypes[reader.getUint16()];\r\n\t\t\t\t\t\t\t\tvar inTangent: Vector3 = floatArrayKeyframe.inTangent;\r\n\t\t\t\t\t\t\t\tvar outTangent: Vector3 = floatArrayKeyframe.outTangent;\r\n\t\t\t\t\t\t\t\tvar value: Vector3 = floatArrayKeyframe.value;\r\n\t\t\t\t\t\t\t\tinTangent.x = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tinTangent.y = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tinTangent.z = reader.getFloat32();\r\n\t\t\t\t\t\t\t\toutTangent.x = reader.getFloat32();\r\n\t\t\t\t\t\t\t\toutTangent.y = reader.getFloat32();\r\n\t\t\t\t\t\t\t\toutTangent.z = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tvalue.x = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tvalue.y = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tvalue.z = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase KeyFrameValueType.Rotation:\r\n\t\t\t\t\t\t\t\tvar quaternionKeyframe: QuaternionKeyframe = new QuaternionKeyframe();\r\n\t\t\t\t\t\t\t\tnode._setKeyframeByIndex(j, quaternionKeyframe);\r\n\t\t\t\t\t\t\t\tquaternionKeyframe.time = startTimeTypes[reader.getUint16()];\r\n\t\t\t\t\t\t\t\tvar inTangentQua: Vector4 = quaternionKeyframe.inTangent;\r\n\t\t\t\t\t\t\t\tvar outTangentQua: Vector4 = quaternionKeyframe.outTangent;\r\n\t\t\t\t\t\t\t\tvar valueQua: Quaternion = quaternionKeyframe.value;\r\n\t\t\t\t\t\t\t\tinTangentQua.x = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tinTangentQua.y = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tinTangentQua.z = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tinTangentQua.w = reader.getFloat32();\r\n\t\t\t\t\t\t\t\toutTangentQua.x = reader.getFloat32();\r\n\t\t\t\t\t\t\t\toutTangentQua.y = reader.getFloat32();\r\n\t\t\t\t\t\t\t\toutTangentQua.z = reader.getFloat32();\r\n\t\t\t\t\t\t\t\toutTangentQua.w = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tvalueQua.x = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tvalueQua.y = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tvalueQua.z = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tvalueQua.w = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase KeyFrameValueType.Vector2:\r\n\t\t\t\t\t\t\t\tvar vec2Keyfram = new Vector2Keyframe();\r\n\t\t\t\t\t\t\t\tnode._setKeyframeByIndex(j, vec2Keyfram);\r\n\t\t\t\t\t\t\t\tvec2Keyfram.time = startTimeTypes[reader.getUint16()];\r\n\t\t\t\t\t\t\t\tvar inTangentV2: Vector2 = vec2Keyfram.inTangent;\r\n\t\t\t\t\t\t\t\tvar outTangentV2: Vector2 = vec2Keyfram.outTangent;\r\n\t\t\t\t\t\t\t\tvar valueV2: Vector2 = vec2Keyfram.value;\r\n\t\t\t\t\t\t\t\tinTangentV2.x = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tinTangentV2.y = reader.getFloat32();\r\n\t\t\t\t\t\t\t\toutTangentV2.x = reader.getFloat32();\r\n\t\t\t\t\t\t\t\toutTangentV2.y = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tvalueV2.x = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tvalueV2.y = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase KeyFrameValueType.Vector4:\r\n\t\t\t\t\t\t\tcase KeyFrameValueType.Color:\r\n\t\t\t\t\t\t\t\tvar vec4Keyfram = new Vector4Keyframe();\r\n\t\t\t\t\t\t\t\tnode._setKeyframeByIndex(j, vec4Keyfram);\r\n\t\t\t\t\t\t\t\tvec4Keyfram.time = startTimeTypes[reader.getUint16()];\r\n\t\t\t\t\t\t\t\tvar inTangentV4: Vector4 = vec4Keyfram.inTangent;\r\n\t\t\t\t\t\t\t\tvar outTangentV4: Vector4 = vec4Keyfram.outTangent;\r\n\t\t\t\t\t\t\t\tvar valueV4: Vector4 = vec4Keyfram.value;\r\n\t\t\t\t\t\t\t\tinTangentV4.x = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tinTangentV4.y = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tinTangentV4.z = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tinTangentV4.w = reader.getFloat32();\r\n\t\t\t\t\t\t\t\toutTangentV4.x = reader.getFloat32();\r\n\t\t\t\t\t\t\t\toutTangentV4.y = reader.getFloat32();\r\n\t\t\t\t\t\t\t\toutTangentV4.z = reader.getFloat32();\r\n\t\t\t\t\t\t\t\toutTangentV4.w = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tvalueV4.x = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tvalueV4.y = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tvalueV4.z = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tvalueV4.w = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\tthrow \"AnimationClipParser04:unknown type.\";\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"LAYAANIMATION:WEIGHT_04\":\r\n\t\t\t\tcase \"LAYAANIMATION:WEIGHT_05\":\r\n\t\t\t\t\tfor (j = 0; j < keyframeCount; j++) {\r\n\t\t\t\t\t\tlet isWeight = 1;\r\n\t\t\t\t\t\tswitch (type) {\r\n\t\t\t\t\t\t\tcase KeyFrameValueType.Float:\r\n\t\t\t\t\t\t\t\tvar floatKeyframe: FloatKeyframe = new FloatKeyframe();\r\n\t\t\t\t\t\t\t\tnode._setKeyframeByIndex(j, floatKeyframe);\r\n\t\t\t\t\t\t\t\tfloatKeyframe.time = startTimeTypes[reader.getUint16()];\r\n\t\t\t\t\t\t\t\tfloatKeyframe.inTangent = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tfloatKeyframe.outTangent = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tfloatKeyframe.value = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tfloatKeyframe.weightedMode = reader.getUint8();\r\n\t\t\t\t\t\t\t\tif (\"LAYAANIMATION:WEIGHT_05\" == AnimationClipParser04._version) {\r\n\t\t\t\t\t\t\t\t\tif (WeightedMode.In == floatKeyframe.weightedMode || WeightedMode.Both == floatKeyframe.weightedMode) {\r\n\t\t\t\t\t\t\t\t\t\tfloatKeyframe.inWeight = reader.getFloat32();\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tif (WeightedMode.Out == floatKeyframe.weightedMode || WeightedMode.Both == floatKeyframe.weightedMode) {\r\n\t\t\t\t\t\t\t\t\t\tfloatKeyframe.outWeight = reader.getFloat32();\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tfloatKeyframe.inWeight = reader.getFloat32();\r\n\t\t\t\t\t\t\t\t\tfloatKeyframe.outWeight = reader.getFloat32();\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase KeyFrameValueType.Position:\r\n\t\t\t\t\t\t\tcase KeyFrameValueType.Scale:\r\n\t\t\t\t\t\t\tcase KeyFrameValueType.RotationEuler:\r\n\t\t\t\t\t\t\tcase KeyFrameValueType.Vector3:\r\n\t\t\t\t\t\t\t\tvar floatArrayKeyframe: Vector3Keyframe = new Vector3Keyframe(true);\r\n\t\t\t\t\t\t\t\tnode._setKeyframeByIndex(j, floatArrayKeyframe);\r\n\t\t\t\t\t\t\t\tfloatArrayKeyframe.time = startTimeTypes[reader.getUint16()];\r\n\t\t\t\t\t\t\t\tvar inTangent: Vector3 = floatArrayKeyframe.inTangent;\r\n\t\t\t\t\t\t\t\tvar outTangent: Vector3 = floatArrayKeyframe.outTangent;\r\n\t\t\t\t\t\t\t\tvar value: Vector3 = floatArrayKeyframe.value;\r\n\t\t\t\t\t\t\t\tlet weidhtMode = floatArrayKeyframe.weightedMode;\r\n\t\t\t\t\t\t\t\tlet inWeight = floatArrayKeyframe.inWeight;\r\n\t\t\t\t\t\t\t\tlet outWeight = floatArrayKeyframe.outWeight;\r\n\t\t\t\t\t\t\t\tinTangent.x = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tinTangent.y = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tinTangent.z = reader.getFloat32();\r\n\t\t\t\t\t\t\t\toutTangent.x = reader.getFloat32();\r\n\t\t\t\t\t\t\t\toutTangent.y = reader.getFloat32();\r\n\t\t\t\t\t\t\t\toutTangent.z = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tvalue.x = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tvalue.y = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tvalue.z = reader.getFloat32();\r\n\r\n\t\t\t\t\t\t\t\tif (\"LAYAANIMATION:WEIGHT_05\" == AnimationClipParser04._version) {\r\n\t\t\t\t\t\t\t\t\tisWeight = reader.getByte();\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif (1 == isWeight) {\r\n\t\t\t\t\t\t\t\t\tweidhtMode.x = reader.getUint8();\r\n\t\t\t\t\t\t\t\t\tweidhtMode.y = reader.getUint8();\r\n\t\t\t\t\t\t\t\t\tweidhtMode.z = reader.getUint8();\r\n\t\t\t\t\t\t\t\t\tinWeight.x = reader.getFloat32();\r\n\t\t\t\t\t\t\t\t\tinWeight.y = reader.getFloat32();\r\n\t\t\t\t\t\t\t\t\tinWeight.z = reader.getFloat32();\r\n\t\t\t\t\t\t\t\t\toutWeight.x = reader.getFloat32();\r\n\t\t\t\t\t\t\t\t\toutWeight.y = reader.getFloat32();\r\n\t\t\t\t\t\t\t\t\toutWeight.z = reader.getFloat32();\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase KeyFrameValueType.Rotation:\r\n\t\t\t\t\t\t\t\tvar quaternionKeyframe: QuaternionKeyframe = new QuaternionKeyframe(true);\r\n\t\t\t\t\t\t\t\tnode._setKeyframeByIndex(j, quaternionKeyframe);\r\n\t\t\t\t\t\t\t\tquaternionKeyframe.time = startTimeTypes[reader.getUint16()];\r\n\t\t\t\t\t\t\t\tvar inTangentQua: Vector4 = quaternionKeyframe.inTangent;\r\n\t\t\t\t\t\t\t\tvar outTangentQua: Vector4 = quaternionKeyframe.outTangent;\r\n\t\t\t\t\t\t\t\tvar valueQua: Quaternion = quaternionKeyframe.value;\r\n\t\t\t\t\t\t\t\tlet weightModeV4 = quaternionKeyframe.weightedMode;\r\n\t\t\t\t\t\t\t\tlet inWeightQua = quaternionKeyframe.inWeight;\r\n\t\t\t\t\t\t\t\tlet outWeightQua = quaternionKeyframe.outWeight;\r\n\t\t\t\t\t\t\t\tinTangentQua.x = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tinTangentQua.y = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tinTangentQua.z = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tinTangentQua.w = reader.getFloat32();\r\n\t\t\t\t\t\t\t\toutTangentQua.x = reader.getFloat32();\r\n\t\t\t\t\t\t\t\toutTangentQua.y = reader.getFloat32();\r\n\t\t\t\t\t\t\t\toutTangentQua.z = reader.getFloat32();\r\n\t\t\t\t\t\t\t\toutTangentQua.w = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tvalueQua.x = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tvalueQua.y = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tvalueQua.z = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tvalueQua.w = reader.getFloat32();\r\n\r\n\t\t\t\t\t\t\t\tif (\"LAYAANIMATION:WEIGHT_05\" == AnimationClipParser04._version) {\r\n\t\t\t\t\t\t\t\t\tisWeight = reader.getByte();\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif (1 == isWeight) {\r\n\t\t\t\t\t\t\t\t\tweightModeV4.x = reader.getUint8();\r\n\t\t\t\t\t\t\t\t\tweightModeV4.y = reader.getUint8();\r\n\t\t\t\t\t\t\t\t\tweightModeV4.z = reader.getUint8();\r\n\t\t\t\t\t\t\t\t\tweightModeV4.w = reader.getUint8();\r\n\t\t\t\t\t\t\t\t\tinWeightQua.x = reader.getFloat32();\r\n\t\t\t\t\t\t\t\t\tinWeightQua.y = reader.getFloat32();\r\n\t\t\t\t\t\t\t\t\tinWeightQua.z = reader.getFloat32();\r\n\t\t\t\t\t\t\t\t\tinWeightQua.w = reader.getFloat32();\r\n\t\t\t\t\t\t\t\t\toutWeightQua.x = reader.getFloat32();\r\n\t\t\t\t\t\t\t\t\toutWeightQua.y = reader.getFloat32();\r\n\t\t\t\t\t\t\t\t\toutWeightQua.z = reader.getFloat32();\r\n\t\t\t\t\t\t\t\t\toutWeightQua.w = reader.getFloat32();\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase KeyFrameValueType.Vector2:\r\n\t\t\t\t\t\t\t\tvar vec2Keyfram = new Vector2Keyframe(true);\r\n\t\t\t\t\t\t\t\tnode._setKeyframeByIndex(j, vec2Keyfram);\r\n\t\t\t\t\t\t\t\tvec2Keyfram.time = startTimeTypes[reader.getUint16()];\r\n\t\t\t\t\t\t\t\tvar inTangentV2: Vector2 = vec2Keyfram.inTangent;\r\n\t\t\t\t\t\t\t\tvar outTangentV2: Vector2 = vec2Keyfram.outTangent;\r\n\t\t\t\t\t\t\t\tvar valueV2: Vector2 = vec2Keyfram.value;\r\n\t\t\t\t\t\t\t\tlet weightModeV2 = vec2Keyfram.weightedMode;\r\n\t\t\t\t\t\t\t\tlet inWeightV2 = vec2Keyfram.inWeight;\r\n\t\t\t\t\t\t\t\tlet outWeightV2 = vec2Keyfram.outWeight;\r\n\t\t\t\t\t\t\t\tinTangentV2.x = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tinTangentV2.y = reader.getFloat32();\r\n\t\t\t\t\t\t\t\toutTangentV2.x = reader.getFloat32();\r\n\t\t\t\t\t\t\t\toutTangentV2.y = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tvalueV2.x = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tvalueV2.y = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tif (\"LAYAANIMATION:WEIGHT_05\" == AnimationClipParser04._version) {\r\n\t\t\t\t\t\t\t\t\tisWeight = reader.getByte();\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif (1 == isWeight) {\r\n\t\t\t\t\t\t\t\t\tweightModeV2.x = reader.getUint8();\r\n\t\t\t\t\t\t\t\t\tweightModeV2.y = reader.getUint8();\r\n\t\t\t\t\t\t\t\t\tinWeightV2.x = reader.getFloat32();\r\n\t\t\t\t\t\t\t\t\tinWeightV2.y = reader.getFloat32();\r\n\t\t\t\t\t\t\t\t\toutWeightV2.x = reader.getFloat32();\r\n\t\t\t\t\t\t\t\t\toutWeightV2.y = reader.getFloat32();\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase KeyFrameValueType.Vector4:\r\n\t\t\t\t\t\t\tcase KeyFrameValueType.Color:\r\n\t\t\t\t\t\t\t\tvar vec4Keyfram = new Vector4Keyframe(true);\r\n\t\t\t\t\t\t\t\tnode._setKeyframeByIndex(j, vec4Keyfram);\r\n\t\t\t\t\t\t\t\tvec4Keyfram.time = startTimeTypes[reader.getUint16()];\r\n\t\t\t\t\t\t\t\tvar inTangentV4: Vector4 = vec4Keyfram.inTangent;\r\n\t\t\t\t\t\t\t\tvar outTangentV4: Vector4 = vec4Keyfram.outTangent;\r\n\t\t\t\t\t\t\t\tvar valueV4: Vector4 = vec4Keyfram.value;\r\n\t\t\t\t\t\t\t\tvar weightMode_V4 = vec4Keyfram.weightedMode;\r\n\t\t\t\t\t\t\t\tvar inWeightV4 = vec4Keyfram.inWeight;\r\n\t\t\t\t\t\t\t\tvar outWeightV4 = vec4Keyfram.outWeight;\r\n\t\t\t\t\t\t\t\tinTangentV4.x = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tinTangentV4.y = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tinTangentV4.z = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tinTangentV4.w = reader.getFloat32();\r\n\t\t\t\t\t\t\t\toutTangentV4.x = reader.getFloat32();\r\n\t\t\t\t\t\t\t\toutTangentV4.y = reader.getFloat32();\r\n\t\t\t\t\t\t\t\toutTangentV4.z = reader.getFloat32();\r\n\t\t\t\t\t\t\t\toutTangentV4.w = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tvalueV4.x = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tvalueV4.y = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tvalueV4.z = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tvalueV4.w = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tif (\"LAYAANIMATION:WEIGHT_05\" == AnimationClipParser04._version) {\r\n\t\t\t\t\t\t\t\t\tisWeight = reader.getByte();\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif (1 == isWeight) {\r\n\t\t\t\t\t\t\t\t\tweightMode_V4.x = reader.getUint8();\r\n\t\t\t\t\t\t\t\t\tweightMode_V4.y = reader.getUint8();\r\n\t\t\t\t\t\t\t\t\tweightMode_V4.z = reader.getUint8();\r\n\t\t\t\t\t\t\t\t\tweightMode_V4.w = reader.getUint8();\r\n\t\t\t\t\t\t\t\t\tinWeightV4.x = reader.getFloat32();\r\n\t\t\t\t\t\t\t\t\tinWeightV4.y = reader.getFloat32();\r\n\t\t\t\t\t\t\t\t\tinWeightV4.z = reader.getFloat32();\r\n\t\t\t\t\t\t\t\t\tinWeightV4.w = reader.getFloat32();\r\n\t\t\t\t\t\t\t\t\toutWeightV4.x = reader.getFloat32();\r\n\t\t\t\t\t\t\t\t\toutWeightV4.y = reader.getFloat32();\r\n\t\t\t\t\t\t\t\t\toutWeightV4.z = reader.getFloat32();\r\n\t\t\t\t\t\t\t\t\toutWeightV4.w = reader.getFloat32();\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\tthrow \"AnimationClipParser04:unknown type.\";\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"LAYAANIMATION:COMPRESSION_04\":\r\n\t\t\t\t\tfor (j = 0; j < keyframeCount; j++) {\r\n\t\t\t\t\t\tswitch (type) {\r\n\t\t\t\t\t\t\tcase KeyFrameValueType.Float:\r\n\t\t\t\t\t\t\t\tfloatKeyframe = new FloatKeyframe();\r\n\t\t\t\t\t\t\t\tnode._setKeyframeByIndex(j, floatKeyframe);\r\n\t\t\t\t\t\t\t\tfloatKeyframe.time = startTimeTypes[reader.getUint16()];\r\n\t\t\t\t\t\t\t\tfloatKeyframe.inTangent = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\tfloatKeyframe.outTangent = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\tfloatKeyframe.value = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase KeyFrameValueType.Position:\r\n\t\t\t\t\t\t\tcase KeyFrameValueType.Scale:\r\n\t\t\t\t\t\t\tcase KeyFrameValueType.RotationEuler:\r\n\t\t\t\t\t\t\tcase KeyFrameValueType.Vector3:\r\n\t\t\t\t\t\t\t\tfloatArrayKeyframe = new Vector3Keyframe();\r\n\t\t\t\t\t\t\t\tnode._setKeyframeByIndex(j, floatArrayKeyframe);\r\n\t\t\t\t\t\t\t\tfloatArrayKeyframe.time = startTimeTypes[reader.getUint16()];\r\n\r\n\t\t\t\t\t\t\t\tinTangent = floatArrayKeyframe.inTangent;\r\n\t\t\t\t\t\t\t\toutTangent = floatArrayKeyframe.outTangent;\r\n\t\t\t\t\t\t\t\tvalue = floatArrayKeyframe.value;\r\n\t\t\t\t\t\t\t\tinTangent.x = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\tinTangent.y = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\tinTangent.z = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\toutTangent.x = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\toutTangent.y = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\toutTangent.z = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\tvalue.x = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\tvalue.y = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\tvalue.z = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase KeyFrameValueType.Rotation:\r\n\t\t\t\t\t\t\t\tquaternionKeyframe = new QuaternionKeyframe();\r\n\t\t\t\t\t\t\t\tnode._setKeyframeByIndex(j, quaternionKeyframe);\r\n\t\t\t\t\t\t\t\tquaternionKeyframe.time = startTimeTypes[reader.getUint16()];\r\n\r\n\t\t\t\t\t\t\t\tinTangentQua = quaternionKeyframe.inTangent;\r\n\t\t\t\t\t\t\t\toutTangentQua = quaternionKeyframe.outTangent;\r\n\t\t\t\t\t\t\t\tvalueQua = quaternionKeyframe.value;\r\n\t\t\t\t\t\t\t\tinTangentQua.x = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\tinTangentQua.y = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\tinTangentQua.z = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\tinTangentQua.w = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\toutTangentQua.x = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\toutTangentQua.y = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\toutTangentQua.z = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\toutTangentQua.w = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\tvalueQua.x = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\tvalueQua.y = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\tvalueQua.z = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\tvalueQua.w = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase KeyFrameValueType.Vector2:\r\n\t\t\t\t\t\t\t\tvar vec2Keyfram = new Vector2Keyframe();\r\n\t\t\t\t\t\t\t\tnode._setKeyframeByIndex(j, vec2Keyfram);\r\n\t\t\t\t\t\t\t\tvec2Keyfram.time = startTimeTypes[reader.getUint16()];\r\n\t\t\t\t\t\t\t\tvar inTangentV2: Vector2 = vec2Keyfram.inTangent;\r\n\t\t\t\t\t\t\t\tvar outTangentV2: Vector2 = vec2Keyfram.outTangent;\r\n\t\t\t\t\t\t\t\tvar valueV2: Vector2 = vec2Keyfram.value;\r\n\t\t\t\t\t\t\t\tinTangentV2.x = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\tinTangentV2.y = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\toutTangentV2.x = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\toutTangentV2.y = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\tvalueV2.x = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\tvalueV2.y = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase KeyFrameValueType.Vector4:\r\n\t\t\t\t\t\t\tcase KeyFrameValueType.Color:\r\n\t\t\t\t\t\t\t\tvar vec4Keyfram = new Vector4Keyframe();\r\n\t\t\t\t\t\t\t\tnode._setKeyframeByIndex(j, vec4Keyfram);\r\n\t\t\t\t\t\t\t\tvec4Keyfram.time = startTimeTypes[reader.getUint16()];\r\n\t\t\t\t\t\t\t\tvar inTangentV4: Vector4 = vec4Keyfram.inTangent;\r\n\t\t\t\t\t\t\t\tvar outTangentV4: Vector4 = vec4Keyfram.outTangent;\r\n\t\t\t\t\t\t\t\tvar valueV4: Vector4 = vec4Keyfram.value;\r\n\t\t\t\t\t\t\t\tinTangentV4.x = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\tinTangentV4.y = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\tinTangentV4.z = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\tinTangentV4.w = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\toutTangentV4.x = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\toutTangentV4.y = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\toutTangentV4.z = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\toutTangentV4.w = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\tvalueV4.x = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\tvalueV4.y = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\tvalueV4.z = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\tvalueV4.w = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\tthrow \"AnimationClipParser04:unknown type.\";\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tvar eventCount: number = reader.getUint16();\r\n\t\tfor (i = 0; i < eventCount; i++) {\r\n\t\t\tvar event: AnimationEvent = new AnimationEvent();\r\n\t\t\tevent.time = Math.min(clipDur, reader.getFloat32());//TODO:事件时间可能大于动画总时长\r\n\t\t\tevent.eventName = AnimationClipParser04._strings[reader.getUint16()];\r\n\t\t\tvar params: Array<number | string | boolean> = [];\r\n\t\t\tvar paramCount: number = reader.getUint16();\r\n\t\t\t(paramCount > 0) && (event.params = params = []);\r\n\r\n\t\t\tfor (j = 0; j < paramCount; j++) {\r\n\t\t\t\tvar eventType: number = reader.getByte();\r\n\t\t\t\tswitch (eventType) {\r\n\t\t\t\t\tcase 0:\r\n\t\t\t\t\t\tparams.push(!!reader.getByte());\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\tparams.push(reader.getInt32());\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\tparams.push(reader.getFloat32());\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 3:\r\n\t\t\t\t\t\tparams.push(AnimationClipParser04._strings[reader.getUint16()]);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tthrow new Error(\"unknown type.\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tclip.addEvent(event);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n","import { KeyframeNode } from \"./KeyframeNode\";\r\n\r\n/**\r\n * @internal\r\n * <code>KeyframeNodeList</code> 类用于创建KeyframeNode节点队列。\r\n */\r\nexport class KeyframeNodeList {\r\n\t/** @internal */\r\n\tprivate _nodes: KeyframeNode[] = [];\r\n\r\n\t/**\r\n\t *\t节点个数。\r\n\t */\r\n\tget count(): number {\r\n\t\treturn this._nodes.length;\r\n\t}\r\n\r\n\tset count(value: number) {\r\n\t\tthis._nodes.length = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>KeyframeNodeList</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t}\r\n\r\n\t/**\r\n\t * 通过索引获取节点。\r\n\t * @param\tindex 索引。\r\n\t * @return 节点。\r\n\t */\r\n\tgetNodeByIndex(index: number): KeyframeNode {\r\n\t\treturn this._nodes[index];\r\n\t}\r\n\r\n\t/**\r\n\t * 通过索引设置节点。\r\n\t * @param\tindex 索引。\r\n\t * @param 节点。\r\n\t */\r\n\tsetNodeByIndex(index: number, node: KeyframeNode): void {\r\n\t\tthis._nodes[index] = node;\r\n\t}\r\n\r\n}\r\n","import { AnimationClipParser03 } from \"./AnimationClipParser03\";\r\nimport { AnimationClipParser04 } from \"./AnimationClipParser04\";\r\nimport { KeyframeNodeList } from \"./KeyframeNodeList\";\r\nimport { AnimationEvent } from \"./AnimationEvent\";\r\nimport { FloatKeyframe } from \"../core/FloatKeyframe\"\r\nimport { QuaternionKeyframe } from \"../core/QuaternionKeyframe\"\r\nimport { Vector3Keyframe } from \"../core/Vector3Keyframe\"\r\nimport { Utils3D } from \"../utils/Utils3D\"\r\nimport { Resource } from \"../../resource/Resource\"\r\nimport { Byte } from \"../../utils/Byte\"\r\nimport { Handler } from \"../../utils/Handler\"\r\nimport { ILaya } from \"../../../ILaya\";\r\nimport { WeightedMode } from \"../core/Keyframe\";\r\nimport { Loader } from \"../../net/Loader\";\r\nimport { Vector2Keyframe } from \"../core/Vector2Keyframe\";\r\nimport { Vector4Keyframe } from \"../core/Vector4Keyframe\";\r\nimport { AvatarMask } from \"../component/Animator/AvatarMask\";\r\nimport { KeyFrameValueType } from \"../component/Animator/KeyframeNodeOwner\";\r\nimport { Quaternion } from \"../../maths/Quaternion\";\r\nimport { Vector2 } from \"../../maths/Vector2\";\r\nimport { Vector3 } from \"../../maths/Vector3\";\r\nimport { Vector4 } from \"../../maths/Vector4\";\r\n\r\n/**\r\n * <code>AnimationClip</code> 类用于动画片段资源。\r\n */\r\nexport class AnimationClip extends Resource {\r\n\r\n\t/**@internal\t*/\r\n\tstatic _tempQuaternion0: Quaternion = new Quaternion();\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @internal\r\n\t */\r\n\tstatic _parse(data: any): AnimationClip {\r\n\t\tvar clip = new AnimationClip();\r\n\t\tvar reader = new Byte(data);\r\n\t\tvar version = reader.readUTFString();\r\n\t\tswitch (version) {\r\n\t\t\tcase \"LAYAANIMATION:03\":\r\n\t\t\t\tAnimationClipParser03.parse(clip, reader);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"LAYAANIMATION:04\":\r\n\t\t\tcase \"LAYAANIMATION:COMPRESSION_04\":\r\n\t\t\tcase \"LAYAANIMATION:WEIGHT_04\":\r\n\t\t\tcase \"LAYAANIMATION:WEIGHT_05\":\r\n\t\t\t\tAnimationClipParser04.parse(clip, reader, version);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow \"unknown animationClip version.\";\r\n\t\t}\r\n\t\treturn clip;\r\n\t}\r\n\r\n\t/**\r\n\t * 加载动画片段。\r\n\t * @param url 动画片段地址。\r\n\t * @param complete  完成回掉。load\r\n\t */\r\n\tstatic load(url: string, complete: Handler): void {\r\n\t\tILaya.loader.load(url, complete, null, Loader.ANIMATIONCLIP);\r\n\t}\r\n\r\n\t/**@internal */\r\n\t_duration: number = 0;\r\n\t/**@internal */\r\n\t_frameRate: number = 0;\r\n\t/**@internal */\r\n\t_nodes: KeyframeNodeList | null = new KeyframeNodeList();\r\n\t/**@internal */\r\n\t_nodesDic: any;\r\n\t/**@internal */\r\n\t_nodesMap: any;//TODO:去掉\r\n\t/** @internal */\r\n\t_animationEvents: AnimationEvent[];\r\n\r\n\t/**是否循环。*/\r\n\tislooping: boolean = false;\r\n\r\n\t/**\r\n\t * 动画持续时间\r\n\t * @returns 返回动画持续时间\r\n\t */\r\n\tduration(): number {\r\n\t\treturn this._duration;\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>AnimationClip</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis._animationEvents = [];\r\n\t}\r\n\r\n\t/**\r\n\t * 是否是Weight模式\r\n\t * @param weightMode \r\n\t * @param nextweightMode \r\n\t * @returns true 此段动画插值使用埃尔米特插值\r\n\t */\r\n\tprivate _weightModeHermite(weightMode: number, nextweightMode: number): boolean {\r\n\t\treturn (((weightMode & WeightedMode.Out) == 0) && ((nextweightMode & WeightedMode.In) == 0));\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _hermiteInterpolate(frame: FloatKeyframe, nextFrame: FloatKeyframe, t: number, dur: number): number {\r\n\t\tvar t0 = frame.outTangent, t1 = nextFrame.inTangent;\r\n\t\tif (Number.isFinite(t0) && Number.isFinite(t1)) {\r\n\t\t\tvar t2 = t * t;\r\n\t\t\tvar t3 = t2 * t;\r\n\t\t\tvar a = 2.0 * t3 - 3.0 * t2 + 1.0;\r\n\t\t\tvar b = t3 - 2.0 * t2 + t;\r\n\t\t\tvar c = t3 - t2;\r\n\t\t\tvar d = -2.0 * t3 + 3.0 * t2;\r\n\t\t\treturn a * frame.value + b * t0 * dur + c * t1 * dur + d * nextFrame.value;\r\n\t\t} else\r\n\t\t\treturn frame.value;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _hermiteInterpolateVector3(frame: Vector3Keyframe, nextFrame: Vector3Keyframe, t: number, dur: number, out: Vector3): void {\r\n\t\tvar p0 = frame.value;\r\n\t\tvar tan0 = frame.outTangent;\r\n\t\tvar p1 = nextFrame.value;\r\n\t\tvar tan1 = nextFrame.inTangent;\r\n\r\n\t\tvar t2 = t * t;\r\n\t\tvar t3 = t2 * t;\r\n\t\tvar a = 2.0 * t3 - 3.0 * t2 + 1.0;\r\n\t\tvar b = t3 - 2.0 * t2 + t;\r\n\t\tvar c = t3 - t2;\r\n\t\tvar d = -2.0 * t3 + 3.0 * t2;\r\n\r\n\t\tvar t0 = tan0.x, t1 = tan1.x;\r\n\t\tif ((!frame.weightedMode) || this._weightModeHermite(frame.weightedMode.x, nextFrame.weightedMode.x)) {\r\n\t\t\tif (Number.isFinite(t0) && Number.isFinite(t1))\r\n\t\t\t\tout.x = a * p0.x + b * t0 * dur + c * t1 * dur + d * p1.x;\r\n\t\t\telse\r\n\t\t\t\tout.x = p0.x;\r\n\t\t} else {\r\n\t\t\tout.x = this._hermiteCurveSplineWeight(frame.value.x, frame.time, frame.outWeight.x, frame.outTangent.x,\r\n\t\t\t\tnextFrame.value.x, nextFrame.time, nextFrame.inWeight.x, nextFrame.inTangent.x, t);\r\n\t\t}\r\n\r\n\t\tt0 = tan0.y, t1 = tan1.y;\r\n\t\tif ((!frame.weightedMode) || this._weightModeHermite(frame.weightedMode.y, nextFrame.weightedMode.y)) {\r\n\t\t\tif (Number.isFinite(t0) && Number.isFinite(t1))\r\n\t\t\t\tout.y = a * p0.y + b * t0 * dur + c * t1 * dur + d * p1.y;\r\n\t\t\telse\r\n\t\t\t\tout.y = p0.y;\r\n\t\t} else {\r\n\t\t\tout.y = this._hermiteCurveSplineWeight(frame.value.y, frame.time, frame.outWeight.y, frame.outTangent.y,\r\n\t\t\t\tnextFrame.value.y, nextFrame.time, nextFrame.inWeight.y, nextFrame.inTangent.y, t);\r\n\t\t}\r\n\r\n\t\tt0 = tan0.z, t1 = tan1.z;\r\n\t\tif ((!frame.weightedMode) || this._weightModeHermite(frame.weightedMode.z, nextFrame.weightedMode.z)) {\r\n\t\t\tif (Number.isFinite(t0) && Number.isFinite(t1))\r\n\t\t\t\tout.z = a * p0.z + b * t0 * dur + c * t1 * dur + d * p1.z;\r\n\t\t\telse\r\n\t\t\t\tout.z = p0.z;\r\n\t\t} else {\r\n\t\t\tout.z = this._hermiteCurveSplineWeight(frame.value.z, frame.time, frame.outWeight.z, frame.outTangent.z,\r\n\t\t\t\tnextFrame.value.z, nextFrame.time, nextFrame.inWeight.z, nextFrame.inTangent.z, t);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _hermiteInterpolateQuaternion(frame: QuaternionKeyframe, nextFrame: QuaternionKeyframe, t: number, dur: number, out: Quaternion): void {\r\n\t\tvar p0 = frame.value;\r\n\t\tvar tan0 = frame.outTangent;\r\n\t\tvar p1 = nextFrame.value;\r\n\t\tvar tan1 = nextFrame.inTangent;\r\n\r\n\t\tvar t2 = t * t;\r\n\t\tvar t3 = t2 * t;\r\n\t\tvar a = 2.0 * t3 - 3.0 * t2 + 1.0;\r\n\t\tvar b = t3 - 2.0 * t2 + t;\r\n\t\tvar c = t3 - t2;\r\n\t\tvar d = -2.0 * t3 + 3.0 * t2;\r\n\r\n\t\tvar t0 = tan0.x, t1 = tan1.x;\r\n\t\tif ((!frame.weightedMode) || this._weightModeHermite(frame.weightedMode.x, nextFrame.weightedMode.x)) {\r\n\t\t\tif (Number.isFinite(t0) && Number.isFinite(t1))\r\n\t\t\t\tout.x = a * p0.x + b * t0 * dur + c * t1 * dur + d * p1.x;\r\n\t\t\telse\r\n\t\t\t\tout.x = p0.x;\r\n\t\t} else {\r\n\t\t\tout.x = this._hermiteCurveSplineWeight(frame.value.x, frame.time, frame.outWeight.x, frame.outTangent.x,\r\n\t\t\t\tnextFrame.value.x, nextFrame.time, nextFrame.inWeight.x, nextFrame.inTangent.x, t);\r\n\t\t}\r\n\r\n\r\n\t\tt0 = tan0.y, t1 = tan1.y;\r\n\t\tif ((!frame.weightedMode) || this._weightModeHermite(frame.weightedMode.y, nextFrame.weightedMode.y)) {\r\n\t\t\tif (Number.isFinite(t0) && Number.isFinite(t1))\r\n\t\t\t\tout.y = a * p0.y + b * t0 * dur + c * t1 * dur + d * p1.y;\r\n\t\t\telse\r\n\t\t\t\tout.y = p0.y;\r\n\t\t} else {\r\n\t\t\tout.y = this._hermiteCurveSplineWeight(frame.value.y, frame.time, frame.outWeight.y, frame.outTangent.y,\r\n\t\t\t\tnextFrame.value.y, nextFrame.time, nextFrame.inWeight.y, nextFrame.inTangent.y, t);\r\n\t\t}\r\n\r\n\t\tt0 = tan0.z, t1 = tan1.z;\r\n\t\tif ((!frame.weightedMode) || this._weightModeHermite(frame.weightedMode.z, nextFrame.weightedMode.z)) {\r\n\t\t\tif (Number.isFinite(t0) && Number.isFinite(t1))\r\n\t\t\t\tout.z = a * p0.z + b * t0 * dur + c * t1 * dur + d * p1.z;\r\n\t\t\telse\r\n\t\t\t\tout.z = p0.z;\r\n\t\t} else {\r\n\t\t\tout.z = this._hermiteCurveSplineWeight(frame.value.z, frame.time, frame.outWeight.z, frame.outTangent.z,\r\n\t\t\t\tnextFrame.value.z, nextFrame.time, nextFrame.inWeight.z, nextFrame.inTangent.z, t);\r\n\t\t}\r\n\r\n\t\tt0 = tan0.w, t1 = tan1.w;\r\n\t\tif ((!frame.weightedMode) || this._weightModeHermite(frame.weightedMode.w, nextFrame.weightedMode.w)) {\r\n\t\t\tif (Number.isFinite(t0) && Number.isFinite(t1))\r\n\t\t\t\tout.w = a * p0.w + b * t0 * dur + c * t1 * dur + d * p1.w;\r\n\t\t\telse\r\n\t\t\t\tout.w = p0.w;\r\n\t\t} else {\r\n\t\t\tout.w = this._hermiteCurveSplineWeight(frame.value.w, frame.time, frame.outWeight.w, frame.outTangent.w,\r\n\t\t\t\tnextFrame.value.w, nextFrame.time, nextFrame.inWeight.w, nextFrame.inTangent.w, t);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate _hermiteInterpolateVector4(frame: Vector4Keyframe, nextFrame: Vector4Keyframe, t: number, dur: number, out: Vector4) {\r\n\t\tvar p0 = frame.value;\r\n\t\tvar tan0 = frame.outTangent;\r\n\t\tvar p1 = nextFrame.value;\r\n\t\tvar tan1 = nextFrame.inTangent;\r\n\r\n\t\tvar t2 = t * t;\r\n\t\tvar t3 = t2 * t;\r\n\t\tvar a = 2.0 * t3 - 3.0 * t2 + 1.0;\r\n\t\tvar b = t3 - 2.0 * t2 + t;\r\n\t\tvar c = t3 - t2;\r\n\t\tvar d = -2.0 * t3 + 3.0 * t2;\r\n\r\n\t\tvar t0 = tan0.x, t1 = tan1.x;\r\n\t\tif ((!frame.weightedMode) || this._weightModeHermite(frame.weightedMode.x, nextFrame.weightedMode.x)) {\r\n\t\t\tif (Number.isFinite(t0) && Number.isFinite(t1))\r\n\t\t\t\tout.x = a * p0.x + b * t0 * dur + c * t1 * dur + d * p1.x;\r\n\t\t\telse\r\n\t\t\t\tout.x = p0.x;\r\n\t\t} else {\r\n\t\t\tout.x = this._hermiteCurveSplineWeight(frame.value.x, frame.time, frame.outWeight.x, frame.outTangent.x,\r\n\t\t\t\tnextFrame.value.x, nextFrame.time, nextFrame.inWeight.x, nextFrame.inTangent.x, t);\r\n\t\t}\r\n\t\tt0 = tan0.y, t1 = tan1.y;\r\n\t\tif ((!frame.weightedMode) || this._weightModeHermite(frame.weightedMode.y, nextFrame.weightedMode.y)) {\r\n\t\t\tif (Number.isFinite(t0) && Number.isFinite(t1))\r\n\t\t\t\tout.y = a * p0.y + b * t0 * dur + c * t1 * dur + d * p1.y;\r\n\t\t\telse\r\n\t\t\t\tout.y = p0.y;\r\n\t\t} else {\r\n\t\t\tout.y = this._hermiteCurveSplineWeight(frame.value.y, frame.time, frame.outWeight.y, frame.outTangent.y,\r\n\t\t\t\tnextFrame.value.y, nextFrame.time, nextFrame.inWeight.y, nextFrame.inTangent.y, t);\r\n\t\t}\r\n\r\n\t\tt0 = tan0.z, t1 = tan1.z;\r\n\t\tif ((!frame.weightedMode) || this._weightModeHermite(frame.weightedMode.z, nextFrame.weightedMode.z)) {\r\n\t\t\tif (Number.isFinite(t0) && Number.isFinite(t1))\r\n\t\t\t\tout.z = a * p0.z + b * t0 * dur + c * t1 * dur + d * p1.z;\r\n\t\t\telse\r\n\t\t\t\tout.z = p0.z;\r\n\t\t} else {\r\n\t\t\tout.z = this._hermiteCurveSplineWeight(frame.value.z, frame.time, frame.outWeight.z, frame.outTangent.z,\r\n\t\t\t\tnextFrame.value.z, nextFrame.time, nextFrame.inWeight.z, nextFrame.inTangent.z, t);\r\n\t\t}\r\n\r\n\t\tt0 = tan0.w, t1 = tan1.w;\r\n\t\tif ((!frame.weightedMode) || this._weightModeHermite(frame.weightedMode.w, nextFrame.weightedMode.w)) {\r\n\t\t\tif (Number.isFinite(t0) && Number.isFinite(t1))\r\n\t\t\t\tout.w = a * p0.w + b * t0 * dur + c * t1 * dur + d * p1.w;\r\n\t\t\telse\r\n\t\t\t\tout.w = p0.w;\r\n\t\t} else {\r\n\t\t\tout.w = this._hermiteCurveSplineWeight(frame.value.w, frame.time, frame.outWeight.w, frame.outTangent.w,\r\n\t\t\t\tnextFrame.value.w, nextFrame.time, nextFrame.inWeight.w, nextFrame.inTangent.w, t);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate _hermiteInterpolateVector2(frame: Vector2Keyframe, nextFrame: Vector2Keyframe, t: number, dur: number, out: Vector2) {\r\n\t\tvar p0 = frame.value;\r\n\t\tvar tan0 = frame.outTangent;\r\n\t\tvar p1 = nextFrame.value;\r\n\t\tvar tan1 = nextFrame.inTangent;\r\n\r\n\t\tvar t2 = t * t;\r\n\t\tvar t3 = t2 * t;\r\n\t\tvar a = 2.0 * t3 - 3.0 * t2 + 1.0;\r\n\t\tvar b = t3 - 2.0 * t2 + t;\r\n\t\tvar c = t3 - t2;\r\n\t\tvar d = -2.0 * t3 + 3.0 * t2;\r\n\r\n\t\tvar t0 = tan0.x, t1 = tan1.x;\r\n\t\tif ((!frame.weightedMode) || this._weightModeHermite(frame.weightedMode.x, nextFrame.weightedMode.x)) {\r\n\t\t\tif (Number.isFinite(t0) && Number.isFinite(t1))\r\n\t\t\t\tout.x = a * p0.x + b * t0 * dur + c * t1 * dur + d * p1.x;\r\n\t\t\telse\r\n\t\t\t\tout.x = p0.x;\r\n\t\t} else {\r\n\t\t\tout.x = this._hermiteCurveSplineWeight(frame.value.x, frame.time, frame.outWeight.x, frame.outTangent.x,\r\n\t\t\t\tnextFrame.value.x, nextFrame.time, nextFrame.inWeight.x, nextFrame.inTangent.x, t);\r\n\t\t}\r\n\r\n\t\tt0 = tan0.y, t1 = tan1.y;\r\n\t\tif ((!frame.weightedMode) || this._weightModeHermite(frame.weightedMode.y, nextFrame.weightedMode.y)) {\r\n\t\t\tif (Number.isFinite(t0) && Number.isFinite(t1))\r\n\t\t\t\tout.y = a * p0.y + b * t0 * dur + c * t1 * dur + d * p1.y;\r\n\t\t\telse\r\n\t\t\t\tout.y = p0.y;\r\n\t\t} else {\r\n\t\t\tout.y = this._hermiteCurveSplineWeight(frame.value.y, frame.time, frame.outWeight.y, frame.outTangent.y,\r\n\t\t\t\tnextFrame.value.y, nextFrame.time, nextFrame.inWeight.y, nextFrame.inTangent.y, t);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate _hermiteCurveSplineWeight(frameValue: number, frametime: number, frameOutWeight: number, frameOutTangent: number, nextframeValue: number, nextframetime: number, nextframeInweight: number, nextframeIntangent: number, time: number) {\r\n\t\tlet Eps = 2.22e-16;\r\n\r\n\t\tlet x = time;\r\n\t\tlet x1 = frametime;\r\n\t\tlet y1 = frameValue;\r\n\t\tlet wt1 = frameOutWeight;\r\n\t\tlet x2 = nextframetime;\r\n\t\tlet y2 = nextframeValue;\r\n\t\tlet wt2 = nextframeInweight;\r\n\r\n\t\tlet dx = x2 - x1;\r\n\t\tlet dy = y2 - y1;\r\n\t\tdy = Math.max(Math.abs(dy), Eps) * (dy < 0 ? -1 : 1);\r\n\r\n\t\tlet yp1 = frameOutTangent;\r\n\t\tlet yp2 = nextframeIntangent;\r\n\r\n\t\tif (!Number.isFinite(yp1) || !Number.isFinite(yp2)) {\r\n\t\t\treturn frameValue;\r\n\t\t}\r\n\r\n\t\typ1 = yp1 * dx / dy;\r\n\t\typ2 = yp2 * dx / dy;\r\n\r\n\t\tlet wt2s = 1 - wt2;\r\n\r\n\t\tlet t = 0.5;\r\n\t\tlet t2 = 0;\r\n\r\n\t\tif (Math.abs(wt1 - 0.33333334) < 0.0001 && Math.abs(wt2 - 0.33333334) < 0.0001) {\r\n\t\t\tt = x;\r\n\t\t\tt2 = 1 - t;\r\n\t\t}\r\n\t\telse {\r\n\t\t\twhile (true) {\r\n\t\t\t\tt2 = (1 - t);\r\n\t\t\t\tlet fg = 3 * t2 * t2 * t * wt1 + 3 * t2 * t * t * wt2s + t * t * t - x;\r\n\t\t\t\tif (Math.abs(fg) <= 2.5 * Eps)\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t// third order householder method\r\n\t\t\t\tlet fpg = 3 * t2 * t2 * wt1 + 6 * t2 * t * (wt2s - wt1) + 3 * t * t * (1 - wt2s);\r\n\t\t\t\tlet fppg = 6 * t2 * (wt2s - 2 * wt1) + 6 * t * (1 - 2 * wt2s + wt1);\r\n\t\t\t\tlet fpppg = 18 * wt1 - 18 * wt2s + 6;\r\n\r\n\t\t\t\tt -= (6 * fg * fpg * fpg - 3 * fg * fg * fppg) / (6 * fpg * fpg * fpg - 6 * fg * fpg * fppg + fg * fg * fpppg);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet y = 3 * t2 * t2 * t * wt1 * yp1 + 3 * t2 * t * t * (1 - wt2 * yp2) + t * t * t;\r\n\r\n\t\treturn y * dy + y1;\r\n\t}\r\n\r\n\tprivate _curveInterpolate(frame: FloatKeyframe, nextFrame: FloatKeyframe, t: number, dur: number): number {\r\n\t\tif ((!frame.weightedMode) || this._weightModeHermite(frame.weightedMode, nextFrame.weightedMode)) {\r\n\t\t\treturn this._hermiteInterpolate(frame, nextFrame, t, dur);\r\n\t\t} else {\r\n\t\t\t//weight\r\n\t\t\treturn this._hermiteCurveSplineWeight(frame.value, frame.time, frame.outWeight, frame.outTangent,\r\n\t\t\t\tnextFrame.value, nextFrame.time, nextFrame.inWeight, nextFrame.inTangent, t);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * @param nodes 动画帧\r\n\t * @param playCurTime 现在的播放时间\r\n\t * @param realTimeCurrentFrameIndexes 目前到达了动画的第几帧\r\n\t * @param addtive 是否是addtive模式\r\n\t * @param frontPlay 是否是前向播放\r\n\t * @param outDatas 计算好的动画数据\r\n\t */\r\n\t_evaluateClipDatasRealTime(nodes: KeyframeNodeList, playCurTime: number, realTimeCurrentFrameIndexes: Int16Array, addtive: boolean, frontPlay: boolean, outDatas: Array<number | Vector3 | Quaternion | Vector4 | Vector2>, avatarMask: AvatarMask): void {\r\n\t\tfor (var i = 0, n = nodes.count; i < n; i++) {\r\n\t\t\tvar node = nodes.getNodeByIndex(i);\r\n\t\t\tvar type = node.type;\r\n\t\t\tvar nextFrameIndex;\r\n\t\t\tvar keyFrames = node._keyFrames;\r\n\t\t\tvar keyFramesCount = keyFrames.length;\r\n\t\t\tvar frameIndex = realTimeCurrentFrameIndexes[i];\r\n\t\t\tif (avatarMask && (!avatarMask.getTransformActive(node.nodePath))) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tif (frontPlay) {\r\n\t\t\t\tif ((frameIndex !== -1) && (playCurTime < keyFrames[frameIndex].time)) {//重置正向循环\r\n\t\t\t\t\tframeIndex = -1;\r\n\t\t\t\t\trealTimeCurrentFrameIndexes[i] = frameIndex;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tnextFrameIndex = frameIndex + 1;\r\n\t\t\t\twhile (nextFrameIndex < keyFramesCount) {\r\n\t\t\t\t\tif (keyFrames[nextFrameIndex].time > playCurTime)\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tframeIndex++;\r\n\t\t\t\t\tnextFrameIndex++;\r\n\t\t\t\t\trealTimeCurrentFrameIndexes[i] = frameIndex;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tnextFrameIndex = frameIndex + 1;\r\n\t\t\t\tif ((nextFrameIndex !== keyFramesCount) && (playCurTime > keyFrames[nextFrameIndex].time)) {//重置逆向循环\r\n\t\t\t\t\tframeIndex = keyFramesCount - 1;\r\n\t\t\t\t\trealTimeCurrentFrameIndexes[i] = frameIndex;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tnextFrameIndex = frameIndex + 1;\r\n\t\t\t\twhile (frameIndex > -1) {\r\n\t\t\t\t\tif (keyFrames[frameIndex].time < playCurTime)\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tframeIndex--;\r\n\t\t\t\t\tnextFrameIndex--;\r\n\t\t\t\t\trealTimeCurrentFrameIndexes[i] = frameIndex;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tvar isEnd = nextFrameIndex === keyFramesCount;\r\n\t\t\tswitch (type) {\r\n\t\t\t\tcase KeyFrameValueType.Float:\r\n\t\t\t\t\tif (frameIndex !== -1) {\r\n\t\t\t\t\t\tvar frame = (<FloatKeyframe>keyFrames[frameIndex]);\r\n\t\t\t\t\t\tif (isEnd) {//如果nextFarme为空，不修改数据，保持上一帧\r\n\t\t\t\t\t\t\toutDatas[i] = frame.value;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tvar nextFarme = (<FloatKeyframe>keyFrames[nextFrameIndex]);\r\n\t\t\t\t\t\t\tvar d = nextFarme.time - frame.time;\r\n\t\t\t\t\t\t\tvar t;\r\n\t\t\t\t\t\t\tif (d !== 0)\r\n\t\t\t\t\t\t\t\tt = (playCurTime - frame.time) / d;\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\tt = 0;\r\n\t\t\t\t\t\t\toutDatas[i] = this._curveInterpolate(frame, nextFarme, t, d);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\toutDatas[i] = (<FloatKeyframe>keyFrames[0]).value;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (addtive)\r\n\t\t\t\t\t\toutDatas[i] = <number>outDatas[i] - (<FloatKeyframe>keyFrames[0]).value;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase KeyFrameValueType.Position:\r\n\t\t\t\tcase KeyFrameValueType.RotationEuler:\r\n\t\t\t\tcase KeyFrameValueType.Vector3:\r\n\t\t\t\t\tvar clipData = <Vector3>outDatas[i];\r\n\t\t\t\t\tthis._evaluateFrameNodeVector3DatasRealTime(keyFrames as Vector3Keyframe[], frameIndex, isEnd, playCurTime, clipData);\r\n\t\t\t\t\tif (addtive) {\r\n\t\t\t\t\t\tvar firstFrameValue = ((<Vector3Keyframe>keyFrames[0])).value;\r\n\t\t\t\t\t\tclipData.x -= firstFrameValue.x;\r\n\t\t\t\t\t\tclipData.y -= firstFrameValue.y;\r\n\t\t\t\t\t\tclipData.z -= firstFrameValue.z;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase KeyFrameValueType.Rotation:\r\n\t\t\t\t\tvar clipQuat = <Quaternion>outDatas[i];\r\n\t\t\t\t\tthis._evaluateFrameNodeQuaternionDatasRealTime(keyFrames as QuaternionKeyframe[], frameIndex, isEnd, playCurTime, clipQuat);\r\n\t\t\t\t\tif (addtive) {\r\n\t\t\t\t\t\tvar tempQuat = AnimationClip._tempQuaternion0;\r\n\t\t\t\t\t\tvar firstFrameValueQua = ((<QuaternionKeyframe>keyFrames[0])).value;\r\n\t\t\t\t\t\tUtils3D.quaternionConjugate(firstFrameValueQua, tempQuat);\r\n\t\t\t\t\t\tQuaternion.multiply(tempQuat, clipQuat, clipQuat);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase KeyFrameValueType.Scale:\r\n\t\t\t\t\tclipData = <Vector3>outDatas[i];\r\n\t\t\t\t\tthis._evaluateFrameNodeVector3DatasRealTime(keyFrames as Vector3Keyframe[], frameIndex, isEnd, playCurTime, clipData);\r\n\t\t\t\t\tif (addtive) {\r\n\t\t\t\t\t\tfirstFrameValue = ((<Vector3Keyframe>keyFrames[0])).value;\r\n\t\t\t\t\t\tclipData.x /= firstFrameValue.x;\r\n\t\t\t\t\t\tclipData.y /= firstFrameValue.y;\r\n\t\t\t\t\t\tclipData.z /= firstFrameValue.z;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase KeyFrameValueType.Vector2:\r\n\t\t\t\t\tvar v2Data = <Vector2>outDatas[i];\r\n\t\t\t\t\tthis._evaluateFrameNodeVector2DatasRealTime(keyFrames as Vector2Keyframe[], frameIndex, isEnd, playCurTime, v2Data);\r\n\t\t\t\t\tif (addtive) {\r\n\t\t\t\t\t\tvar v2FrameValue = ((<Vector2Keyframe>keyFrames[0])).value;\r\n\t\t\t\t\t\tv2Data.x -= v2FrameValue.x;\r\n\t\t\t\t\t\tv2Data.y -= v2FrameValue.y;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase KeyFrameValueType.Vector4:\r\n\t\t\t\tcase KeyFrameValueType.Color:\r\n\t\t\t\t\tvar v4Data = <Vector4>outDatas[i];\r\n\t\t\t\t\tthis._evaluateFrameNodeVector4DatasRealTime(keyFrames as Vector4Keyframe[], frameIndex, isEnd, playCurTime, v4Data);\r\n\t\t\t\t\tif (addtive) {\r\n\t\t\t\t\t\tvar v4FrameValue = ((<Vector4Keyframe>keyFrames[0])).value;\r\n\t\t\t\t\t\tv4Data.x -= v4FrameValue.x;\r\n\t\t\t\t\t\tv4Data.y -= v4FrameValue.y;\r\n\t\t\t\t\t\tv4Data.z -= v4FrameValue.z;\r\n\t\t\t\t\t\tv4Data.w -= v4FrameValue.w;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow \"AnimationClip:unknown node type.\";\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprivate _evaluateFrameNodeVector3DatasRealTime(keyFrames: Vector3Keyframe[], frameIndex: number, isEnd: boolean, playCurTime: number, outDatas: Vector3): void {\r\n\t\tif (frameIndex !== -1) {\r\n\t\t\tvar frame = keyFrames[frameIndex];\r\n\t\t\tif (isEnd) {\r\n\t\t\t\tvar frameData = frame.value;\r\n\t\t\t\toutDatas.x = frameData.x;//不能设为null，会造成跳过当前帧数据\r\n\t\t\t\toutDatas.y = frameData.y;\r\n\t\t\t\toutDatas.z = frameData.z;\r\n\t\t\t} else {\r\n\t\t\t\tvar nextKeyFrame = keyFrames[frameIndex + 1];\r\n\t\t\t\tvar t;\r\n\t\t\t\tvar startTime = frame.time;\r\n\t\t\t\tvar d = nextKeyFrame.time - startTime;\r\n\t\t\t\tif (d !== 0)\r\n\t\t\t\t\tt = (playCurTime - startTime) / d;\r\n\t\t\t\telse\r\n\t\t\t\t\tt = 0;\r\n\r\n\t\t\t\tthis._hermiteInterpolateVector3(frame, nextKeyFrame, t, d, outDatas);\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\t\t\tvar firstFrameDatas = keyFrames[0].value;\r\n\t\t\toutDatas.x = firstFrameDatas.x;\r\n\t\t\toutDatas.y = firstFrameDatas.y;\r\n\t\t\toutDatas.z = firstFrameDatas.z;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate _evaluateFrameNodeVector2DatasRealTime(keyFrames: Vector2Keyframe[], frameIndex: number, isEnd: boolean, playCurTime: number, outDatas: Vector2): void {\r\n\t\tif (frameIndex !== -1) {\r\n\t\t\tvar frame = keyFrames[frameIndex];\r\n\t\t\tif (isEnd) {\r\n\t\t\t\tvar frameData = frame.value;\r\n\t\t\t\toutDatas.x = frameData.x;//不能设为null，会造成跳过当前帧数据\r\n\t\t\t\toutDatas.y = frameData.y;\r\n\t\t\t} else {\r\n\t\t\t\tvar nextKeyFrame = keyFrames[frameIndex + 1];\r\n\t\t\t\tvar t;\r\n\t\t\t\tvar startTime = frame.time;\r\n\t\t\t\tvar d = nextKeyFrame.time - startTime;\r\n\t\t\t\tif (d !== 0)\r\n\t\t\t\t\tt = (playCurTime - startTime) / d;\r\n\t\t\t\telse\r\n\t\t\t\t\tt = 0;\r\n\r\n\t\t\t\tthis._hermiteInterpolateVector2(frame, nextKeyFrame, t, d, outDatas);\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\t\t\tvar firstFrameDatas = keyFrames[0].value;\r\n\t\t\toutDatas.x = firstFrameDatas.x;\r\n\t\t\toutDatas.y = firstFrameDatas.y;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate _evaluateFrameNodeVector4DatasRealTime(keyFrames: Vector4Keyframe[], frameIndex: number, isEnd: boolean, playCurTime: number, outDatas: Vector4): void {\r\n\t\tif (frameIndex !== -1) {\r\n\t\t\tvar frame = keyFrames[frameIndex];\r\n\t\t\tif (isEnd) {\r\n\t\t\t\tvar frameData = frame.value;\r\n\t\t\t\toutDatas.x = frameData.x;//不能设为null，会造成跳过当前帧数据\r\n\t\t\t\toutDatas.y = frameData.y;\r\n\t\t\t\toutDatas.z = frameData.z;\r\n\t\t\t} else {\r\n\t\t\t\tvar nextKeyFrame = keyFrames[frameIndex + 1];\r\n\t\t\t\tvar t;\r\n\t\t\t\tvar startTime = frame.time;\r\n\t\t\t\tvar d = nextKeyFrame.time - startTime;\r\n\t\t\t\tif (d !== 0)\r\n\t\t\t\t\tt = (playCurTime - startTime) / d;\r\n\t\t\t\telse\r\n\t\t\t\t\tt = 0;\r\n\r\n\t\t\t\tthis._hermiteInterpolateVector4(frame, nextKeyFrame, t, d, outDatas);\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\t\t\tvar firstFrameDatas = keyFrames[0].value;\r\n\t\t\toutDatas.x = firstFrameDatas.x;\r\n\t\t\toutDatas.y = firstFrameDatas.y;\r\n\t\t\toutDatas.z = firstFrameDatas.z;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tprivate _evaluateFrameNodeQuaternionDatasRealTime(keyFrames: QuaternionKeyframe[], frameIndex: number, isEnd: boolean, playCurTime: number, outDatas: Quaternion): void {\r\n\t\tif (frameIndex !== -1) {\r\n\t\t\tvar frame = keyFrames[frameIndex];\r\n\t\t\tif (isEnd) {\r\n\t\t\t\tvar frameData = frame.value;\r\n\t\t\t\toutDatas.x = frameData.x;//不能设为null，会造成跳过当前帧数据\r\n\t\t\t\toutDatas.y = frameData.y;\r\n\t\t\t\toutDatas.z = frameData.z;\r\n\t\t\t\toutDatas.w = frameData.w;\r\n\t\t\t} else {\r\n\t\t\t\tvar nextKeyFrame = keyFrames[frameIndex + 1];\r\n\t\t\t\tvar t;\r\n\t\t\t\tvar startTime = frame.time;\r\n\t\t\t\tvar d = nextKeyFrame.time - startTime;\r\n\t\t\t\tif (d !== 0)\r\n\t\t\t\t\tt = (playCurTime - startTime) / d;\r\n\t\t\t\telse\r\n\t\t\t\t\tt = 0;\r\n\r\n\t\t\t\tthis._hermiteInterpolateQuaternion(frame, nextKeyFrame, t, d, outDatas);\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\t\t\tvar firstFrameDatas = keyFrames[0].value;\r\n\t\t\toutDatas.x = firstFrameDatas.x;\r\n\t\t\toutDatas.y = firstFrameDatas.y;\r\n\t\t\toutDatas.z = firstFrameDatas.z;\r\n\t\t\toutDatas.w = firstFrameDatas.w;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate _binarySearchEventIndex(time: number): number {\r\n\t\tvar start = 0;\r\n\t\tvar end = this._animationEvents.length - 1;\r\n\t\tvar mid;\r\n\t\twhile (start <= end) {\r\n\t\t\tmid = Math.floor((start + end) / 2);\r\n\t\t\tvar midValue = this._animationEvents[mid].time;\r\n\t\t\tif (midValue == time)\r\n\t\t\t\treturn mid;\r\n\t\t\telse if (midValue > time)\r\n\t\t\t\tend = mid - 1;\r\n\t\t\telse\r\n\t\t\t\tstart = mid + 1;\r\n\t\t}\r\n\t\treturn start;\r\n\t}\r\n\r\n\t/**\r\n\t * 添加动画事件。\r\n\t * @param event 动画事件\r\n\t */\r\n\taddEvent(event: AnimationEvent): void {\r\n\t\tvar index = this._binarySearchEventIndex(event.time);\r\n\t\tthis._animationEvents.splice(index, 0, event);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tprotected _disposeResource(): void {\r\n\t\tthis._nodes = null;\r\n\t\tthis._nodesMap = null;\r\n\t}\r\n}\r\n\r\n\r\n\r\n","import { Config3D } from \"../../../../Config3D\";\r\nimport { Matrix4x4 } from \"../../../maths/Matrix4x4\";\r\nimport { Vector2 } from \"../../../maths/Vector2\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\nimport { Texture2D } from \"../../../resource/Texture2D\";\r\nimport { Camera } from \"../../core/Camera\";\r\nimport { LightQueue } from \"../../core/light/LightQueue\";\r\nimport { PointLightCom } from \"../../core/light/PointLightCom\";\r\nimport { SpotLightCom } from \"../../core/light/SpotLightCom\";\r\nimport { Scene3D } from \"../../core/scene/Scene3D\";\r\nimport { Sprite3D } from \"../../core/Sprite3D\";\r\n\r\nimport { Utils3D } from \"../../utils/Utils3D\";\r\n\r\n/**\r\n * @internal\r\n */\r\nclass LightBound {\r\n    xMin: number;\r\n    xMax: number;\r\n    yMin: number;\r\n    yMax: number;\r\n    zMin: number;\r\n    zMax: number;\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nclass ClusterData {\r\n    updateMark: number = -1;\r\n    pointLightCount: number = 0;\r\n    spotLightCount: number = 0;\r\n    indices: number[] = [];\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class Cluster {\r\n    private static _tempVector30: Vector3 = new Vector3();\r\n    private static _tempVector31: Vector3 = new Vector3();\r\n    private static _tempVector32: Vector3 = new Vector3();\r\n    private static _tempVector33: Vector3 = new Vector3();\r\n    private static _tempVector34: Vector3 = new Vector3();\r\n    private static _tempVector35: Vector3 = new Vector3();\r\n    private static _tempVector36: Vector3 = new Vector3();\r\n    private static _tempVector37: Vector3 = new Vector3();\r\n    private static _tempLightBound: LightBound = new LightBound();\r\n\r\n    static instance: Cluster;\r\n\r\n    private _xSlices: number;\r\n    private _ySlices: number;\r\n    private _zSlices: number;\r\n    private _clusterDatas: ClusterData[][][];\r\n    private _clusterPixels: Float32Array;\r\n    private _updateMark: number = 0;\r\n    private _depthSliceParam: Vector2 = new Vector2();\r\n\r\n    public _clusterTexture: Texture2D;\r\n\r\n    constructor(xSlices: number, ySlices: number, zSlices: number, maxLightsPerClusterAverage: number) {\r\n        this._xSlices = xSlices;\r\n        this._ySlices = ySlices;\r\n        this._zSlices = zSlices;\r\n        var clusterTexWidth: number = xSlices * ySlices;\r\n        var clisterTexHeight: number = zSlices * (1 + Math.ceil(maxLightsPerClusterAverage / 4));\r\n        this._clusterTexture = Utils3D._createFloatTextureBuffer(clusterTexWidth, clisterTexHeight);\r\n        this._clusterTexture.lock = true;\r\n        this._clusterPixels = new Float32Array(clusterTexWidth * clisterTexHeight * 4);\r\n\r\n        //Init for every cluster\r\n        var clusterDatas: ClusterData[][][] = new Array<Array<Array<ClusterData>>>(this._zSlices);\r\n        for (var z = 0; z < this._zSlices; z++) {\r\n            clusterDatas[z] = new Array<Array<ClusterData>>(this._ySlices);\r\n            for (var y = 0; y < this._ySlices; y++) {\r\n                clusterDatas[z][y] = new Array<ClusterData>(this._xSlices);\r\n                for (var x = 0; x < this._xSlices; x++)\r\n                    clusterDatas[z][y][x] = new ClusterData();\r\n            }\r\n        }\r\n        this._clusterDatas = clusterDatas;\r\n\r\n        /*\r\n        Layout of clusterTexture\r\n        |------------------------------------------------------U(XY)\r\n        |               cluster0               cluster1       \r\n        |        (PCou|SCou|Off0|Off1) | (PCou|SCou|Off0|Off1) \r\n        |               cluster2               cluster3      \r\n        |        (PCou|SCou|Off0|Off1) | (PCou|SCou|Off0|Off1) \r\n        |-----------------------------------------------------------\r\n        |                                    _                              \r\n        |        (poi0|poi1|spo0|spo1) |(spo2|poi0|poi1|poi2)\r\n        |             _\r\n        |        (poi3|spo0|....|....) |(....|....|....|....) \r\n        |\r\n        V(Z)\r\n        */\r\n    }\r\n\r\n    // private _insertSpotLightSphere(origin: Vector3, forward: Vector3, size: number, angle: number, testSphere: Vector4): boolean {\r\n    //     //combine cone cull and sphere range cull\r\n    //     var V: Vector3 = Cluster._tempVector35;\r\n    //     V.x = testSphere.x - origin.x;\r\n    //     V.y = testSphere.y - origin.y;\r\n    //     V.z = testSphere.z - origin.z;\r\n\r\n    //     var VlenSq = Vector3.dot(V, V);\r\n    //     var sphereRadius: number = testSphere.w;\r\n\r\n    //     var rangeCull: boolean = VlenSq > sphereRadius * sphereRadius;\r\n    //     if (!rangeCull)\r\n    //         return false;\r\n\r\n    //     var V1len: number = Vector3.dot(V, forward);\r\n    //     var distanceClosestPoint: number = Math.cos(angle) * Math.sqrt(VlenSq - V1len * V1len) - V1len * Math.sin(angle);\r\n\r\n    //     var angleCull: boolean = distanceClosestPoint > sphereRadius;\r\n    //     var frontCull: boolean = V1len > sphereRadius + size;\r\n    //     var backCull: boolean = V1len < -sphereRadius;\r\n    //     return !(angleCull || frontCull || backCull);\r\n    // }\r\n\r\n    private _placePointLightToClusters(lightIndex: number, lightBound: LightBound): void {\r\n        var clusterDatas: ClusterData[][][] = this._clusterDatas;\r\n        var updateMark: number = this._updateMark;\r\n        for (var z: number = lightBound.zMin, zEnd: number = lightBound.zMax; z < zEnd; z++) {\r\n            for (var y: number = lightBound.yMin, yEnd: number = lightBound.yMax; y < yEnd; y++) {\r\n                for (var x: number = lightBound.xMin, xEnd: number = lightBound.xMax; x < xEnd; x++) {\r\n                    var data: ClusterData = clusterDatas[z][y][x];\r\n                    if (data.updateMark != updateMark) {\r\n                        data.pointLightCount = 0;\r\n                        data.spotLightCount = 0;\r\n                        data.updateMark = updateMark;\r\n                    }\r\n                    var indices: number[] = data.indices;\r\n                    var lightCount: number = data.pointLightCount++;\r\n                    if (lightCount < indices.length)\r\n                        indices[lightCount] = lightIndex;\r\n                    else\r\n                        indices.push(lightIndex);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private _placeSpotLightToClusters(lightIndex: number, lightBound: LightBound): void {\r\n        var clusterDatas: ClusterData[][][] = this._clusterDatas;\r\n        var updateMark: number = this._updateMark;\r\n        for (var z: number = lightBound.zMin, zEnd: number = lightBound.zMax; z < zEnd; z++) {\r\n            for (var y: number = lightBound.yMin, yEnd: number = lightBound.yMax; y < yEnd; y++) {\r\n                for (var x: number = lightBound.xMin, xEnd: number = lightBound.xMax; x < xEnd; x++) {\r\n                    var data: ClusterData = clusterDatas[z][y][x];\r\n                    if (data.updateMark != updateMark) {\r\n                        data.pointLightCount = 0;\r\n                        data.spotLightCount = 0;\r\n                        data.updateMark = updateMark;\r\n                    }\r\n                    var indices: number[] = data.indices;\r\n                    var lightCount: number = data.pointLightCount + data.spotLightCount++;\r\n                    if (lightCount < indices.length)\r\n                        indices[lightCount] = lightIndex;\r\n                    else\r\n                        indices.push(lightIndex);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    private _insertConePlane(origin: Vector3, forward: Vector3, radius: number, halfAngle: number, pNor: Vector3): boolean {\r\n        //https://bartwronski.com/2017/04/13/cull-that-cone/\r\n        //because distance is always zero so we ease this method\r\n        var V1: Vector3 = Cluster._tempVector36;\r\n        var V2: Vector3 = Cluster._tempVector37;\r\n        Vector3.cross(pNor, forward, V1);\r\n        Vector3.cross(V1, forward, V2);\r\n        Vector3.normalize(V2, V2);\r\n        var tanR: number = radius * Math.tan(halfAngle);\r\n        var capRimX: number = origin.x + radius * forward.x + tanR * V2.x;\r\n        var capRimY: number = origin.y + radius * forward.y + tanR * V2.y;\r\n        var capRimZ: number = origin.z + radius * forward.z + tanR * V2.z;\r\n\r\n        return capRimX * pNor.x + capRimY * pNor.y + capRimZ * pNor.z <= 0 || origin.x * pNor.x + origin.y * pNor.y + origin.z * pNor.z <= 0;\r\n    }\r\n\r\n\r\n    private _shrinkSphereLightZPerspective(near: number, far: number, lightviewPos: Vector3, radius: number, lightBound: LightBound): boolean {\r\n        var lvZ: number = lightviewPos.z;\r\n        var minZ: number = lvZ - radius;\r\n        var maxZ: number = lvZ + radius;\r\n\r\n        if ((minZ > far) || (maxZ <= near))\r\n            return false;\r\n        // slice = Math.log2(z) * (numSlices / Math.log2(far / near)) - Math.log2(near) * numSlices / Math.log2(far / near)\r\n        // slice start from near plane,near is index:0,z must large than near,or the result will NaN\r\n        var depthSliceParam: Vector2 = this._depthSliceParam;\r\n        lightBound.zMin = Math.floor(Math.log2(Math.max(minZ, near)) * depthSliceParam.x - depthSliceParam.y);\r\n        lightBound.zMax = Math.min(Math.ceil(Math.log2(maxZ) * depthSliceParam.x - depthSliceParam.y), this._zSlices);\r\n        return true;\r\n    }\r\n\r\n    private _shrinkSpotLightZPerspective(near: number, far: number, viewLightPos: Vector3, viewConeCap: Vector3, radius: number, halfAngle: number, lightBound: LightBound): boolean {\r\n        //https://bartwronski.com/2017/04/13/cull-that-cone/\r\n        //http://www.iquilezles.org/www/articles/diskbbox/diskbbox.htm\r\n\r\n        var pbX: number = viewConeCap.x, pbY: number = viewConeCap.y, pbZ: number = viewConeCap.z;\r\n        var rb: number = Math.tan(halfAngle) * radius;\r\n        var paX: number = viewLightPos.x, paY: number = viewLightPos.y, paZ: number = viewLightPos.z;\r\n        var aX: number = pbX - paX, aY: number = pbY - paY, aZ: number = pbZ - paZ;\r\n        var dotA: number = aX * aX + aY * aY + aZ * aZ;\r\n        var eZ: number = Math.sqrt(1.0 - aZ * aZ / dotA);\r\n\r\n        //flat-capped cone is not spotLight shape,spoltlight is sphere-capped.so we get the common boundBox of flat-capped cone bounds and sphere bounds.\r\n        var minZ: number = Math.max(Math.min(paZ, pbZ - eZ * rb), viewLightPos.z - radius);\r\n        var maxZ: number = Math.min(Math.max(paZ, pbZ + eZ * rb), viewLightPos.z + radius);\r\n\r\n        if ((minZ > far) || (maxZ <= near))\r\n            return false;\r\n        // slice = Math.log2(z) * (numSlices / Math.log2(far / near)) - Math.log2(near) * numSlices / Math.log2(far / near)\r\n        // slice start from near plane,near is index:0,z must large than near,or the result will NaN\r\n        var depthSliceParam: Vector2 = this._depthSliceParam;\r\n        lightBound.zMin = Math.floor(Math.log2(Math.max(minZ, near)) * depthSliceParam.x - depthSliceParam.y);\r\n        lightBound.zMax = Math.min(Math.ceil(Math.log2(maxZ) * depthSliceParam.x - depthSliceParam.y), this._zSlices);\r\n        return true;\r\n    }\r\n\r\n    private _shrinkSphereLightByBoundOrth(halfX: number, halfY: number, near: number, far: number, lightviewPos: Vector3, radius: number, lightBound: LightBound): boolean {\r\n        var lvZ: number = lightviewPos.z;\r\n        var minZ: number = lvZ - radius, maxZ: number = lvZ + radius;\r\n        if ((minZ > far) || (maxZ <= near))\r\n            return false;\r\n        var lvX: number = lightviewPos.x;\r\n        var minX: number = lvX - radius, maxX: number = lvX + radius;\r\n        if ((minX > halfX) || (maxX <= -halfX))\r\n            return false;\r\n        var lvY: number = lightviewPos.y;\r\n        var minY: number = lvY - radius, maxY: number = lvY + radius;\r\n        if ((minY > halfY) || (maxY <= -halfY))\r\n            return false;\r\n\r\n        // slice = Math.log2(z) * (numSlices / Math.log2(far / near)) - Math.log2(near) * numSlices / Math.log2(far / near)\r\n        // slice start from near plane,near is index:0,z must large than near,or the result will NaN\r\n        var xSlices: number = this._xSlices, ySlices: number = this._ySlices;\r\n        var depthSliceParam: Vector2 = this._depthSliceParam;\r\n        var xStride: number = halfX * 2 / xSlices, yStride: number = halfY * 2 / ySlices;\r\n        lightBound.xMin = Math.max(Math.floor((minX + halfX) / xStride), 0);\r\n        lightBound.xMax = Math.min(Math.ceil((maxX + halfX) / xStride), xSlices);\r\n        lightBound.yMin = Math.max(Math.floor((halfY - maxY) / yStride), 0);//zero is from top\r\n        lightBound.yMax = Math.min(Math.ceil((halfY - minY) / yStride), ySlices);\r\n        lightBound.zMin = Math.floor(Math.log2(Math.max(minZ, near)) * depthSliceParam.x - depthSliceParam.y);\r\n        lightBound.zMax = Math.min(Math.ceil(Math.log2(maxZ) * depthSliceParam.x - depthSliceParam.y), this._zSlices);\r\n        return true;\r\n    }\r\n\r\n    private _shrinkSpotLightByBoundOrth(halfX: number, halfY: number, near: number, far: number, viewLightPos: Vector3, viewConeCap: Vector3, radius: number, halfAngle: number, lightBound: LightBound): boolean {\r\n        //https://bartwronski.com/2017/04/13/cull-that-cone/\r\n        //http://www.iquilezles.org/www/articles/diskbbox/diskbbox.htm\r\n        var pbX: number = viewConeCap.x, pbY: number = viewConeCap.y, pbZ: number = viewConeCap.z;\r\n        var rb: number = Math.tan(halfAngle) * radius;\r\n        var paX: number = viewLightPos.x, paY: number = viewLightPos.y, paZ: number = viewLightPos.z;\r\n        var aX: number = pbX - paX, aY: number = pbY - paY, aZ: number = pbZ - paZ;\r\n        var dotA: number = aX * aX + aY * aY + aZ * aZ;\r\n\r\n        //flat-capped cone is not spotLight shape,spoltlight is sphere-capped.so we get the common boundBox of flat-capped cone bounds and sphere bounds.\r\n        var eZ: number = Math.sqrt(1.0 - aZ * aZ / dotA);\r\n        var minZ: number = Math.max(Math.min(paZ, pbZ - eZ * rb), viewLightPos.z - radius);\r\n        var maxZ: number = Math.min(Math.max(paZ, pbZ + eZ * rb), viewLightPos.z + radius);\r\n        if ((minZ > far) || (maxZ <= near))\r\n            return false;\r\n        var eX: number = Math.sqrt(1.0 - aX * aX / dotA);\r\n        var minX: number = Math.max(Math.min(paX, pbX - eX * rb), viewLightPos.x - radius);\r\n        var maxX: number = Math.min(Math.max(paX, pbX + eX * rb), viewLightPos.x + radius);\r\n        if ((minX > halfX) || (maxX <= -halfX))\r\n            return false;\r\n        var eY: number = Math.sqrt(1.0 - aY * aY / dotA);\r\n        var minY: number = Math.max(Math.min(paY, pbY - eY * rb), viewLightPos.y - radius);\r\n        var maxY: number = Math.min(Math.max(paY, pbY + eY * rb), viewLightPos.y + radius);\r\n        if ((minY > halfY) || (maxY <= -halfY))\r\n            return false;\r\n\r\n        // slice = Math.log2(z) * (numSlices / Math.log2(far / near)) - Math.log2(near) * numSlices / Math.log2(far / near)\r\n        // slice start from near plane,near is index:0,z must large than near,or the result will NaN\r\n        var xSlices: number = this._xSlices, ySlices: number = this._ySlices;\r\n        var depthSliceParam: Vector2 = this._depthSliceParam;\r\n        var xStride: number = halfX * 2 / xSlices, yStride: number = halfY * 2 / ySlices;\r\n        lightBound.xMin = Math.max(Math.floor((minX + halfX) / xStride), 0);\r\n        lightBound.xMax = Math.min(Math.ceil((maxX + halfX) / xStride), xSlices);\r\n        lightBound.yMin = Math.max(Math.floor((halfY - maxY) / yStride), 0);//zero is from top\r\n        lightBound.yMax = Math.min(Math.ceil((halfY - minY) / yStride), ySlices);\r\n        lightBound.zMin = Math.floor(Math.log2(Math.max(minZ, near)) * depthSliceParam.x - depthSliceParam.y);\r\n        lightBound.zMax = Math.min(Math.ceil(Math.log2(maxZ) * depthSliceParam.x - depthSliceParam.y), this._zSlices);\r\n        return true;\r\n    }\r\n\r\n\r\n    private _shrinkXYByRadiusPerspective(lightviewPos: Vector3, radius: number, lightBound: LightBound, xPlanes: Vector3[], yPlanes: Vector3[]): boolean {\r\n        var xMin: number, yMin: number;\r\n        var xMax: number, yMax: number;\r\n        var lvX: number = lightviewPos.x, lvY: number = lightviewPos.y, lvZ: number = lightviewPos.z;\r\n\r\n        var i: number;\r\n        var n: number = this._ySlices + 1;\r\n        for (i = 0; i < n; i++) {\r\n            var plane: Vector3 = yPlanes[i];\r\n            if (lvY * plane.y + lvZ * plane.z < radius) {//Dot\r\n                yMin = Math.max(0, i - 1);\r\n                break;\r\n            }\r\n        }\r\n        if (i == n)//fail scan insert\r\n            return false;\r\n        yMax = this._ySlices;\r\n        for (i = yMin + 1; i < n; i++) {\r\n            var plane: Vector3 = yPlanes[i];\r\n            if (lvY * plane.y + lvZ * plane.z <= -radius) {//Dot\r\n                yMax = Math.max(0, i);\r\n                break;\r\n            }\r\n        }\r\n\r\n        n = this._xSlices + 1;\r\n        for (i = 0; i < n; i++) {\r\n            var plane: Vector3 = xPlanes[i];\r\n            if (lvX * plane.x + lvZ * plane.z < radius) {//Dot\r\n                xMin = Math.max(0, i - 1);\r\n                break;\r\n            }\r\n        }\r\n        xMax = this._xSlices;\r\n        for (i = xMin + 1; i < n; i++) {\r\n            var plane: Vector3 = xPlanes[i];\r\n            if (lvX * plane.x + lvZ * plane.z <= -radius) {//Dot\r\n                xMax = Math.max(0, i);\r\n                break;\r\n            }\r\n        }\r\n\r\n\r\n        lightBound.xMin = xMin\r\n        lightBound.xMax = xMax;\r\n        lightBound.yMin = yMin;\r\n        lightBound.yMax = yMax;\r\n        return true;\r\n    }\r\n\r\n    private _shrinkSpotXYByConePerspective(lightviewPos: Vector3, viewForward: Vector3, radius: number, halfAngle: number, lightBound: LightBound, xPlanes: Vector3[], yPlanes: Vector3[]): void {\r\n        var xMin: number, yMin: number;\r\n        var xMax: number, yMax: number;\r\n\r\n        var normal: Vector3 = Cluster._tempVector32;\r\n        var n: number = lightBound.yMax + 1;\r\n        for (var i: number = lightBound.yMin + 1; i < n; i++) {\r\n            if (this._insertConePlane(lightviewPos, viewForward, radius, halfAngle, yPlanes[i])) {\r\n                yMin = Math.max(0, i - 1);\r\n                break;\r\n            }\r\n        }\r\n\r\n        yMax = lightBound.yMax;\r\n        for (var i: number = yMin + 1; i < n; i++) {\r\n            var plane: Vector3 = yPlanes[i];\r\n            normal.setValue(0, -plane.y, -plane.z);\r\n            if (!this._insertConePlane(lightviewPos, viewForward, radius, halfAngle, normal)) {\r\n                yMax = Math.max(0, i);\r\n                break;\r\n            }\r\n        }\r\n\r\n        n = lightBound.xMax + 1;\r\n        for (var i: number = lightBound.xMin + 1; i < n; i++) {\r\n            if (this._insertConePlane(lightviewPos, viewForward, radius, halfAngle, xPlanes[i])) {\r\n                xMin = Math.max(0, i - 1);\r\n                break;\r\n            }\r\n        }\r\n        xMax = lightBound.xMax;\r\n        for (var i: number = xMin + 1; i < n; i++) {\r\n            var plane: Vector3 = xPlanes[i];\r\n            normal.setValue(-plane.x, 0, -plane.z);\r\n            if (!this._insertConePlane(lightviewPos, viewForward, radius, halfAngle, normal)) {\r\n                xMax = Math.max(0, i);\r\n                break;\r\n            }\r\n        }\r\n\r\n        lightBound.xMin = xMin;\r\n        lightBound.xMax = xMax;\r\n        lightBound.yMin = yMin;\r\n        lightBound.yMax = yMax;\r\n    }\r\n\r\n\r\n\r\n    private _updatePointLightPerspective(near: number, far: number, viewMat: Matrix4x4, pointLight: PointLightCom, lightIndex: number, xPlanes: Vector3[], yPlanes: Vector3[]): void {\r\n        var lightBound: LightBound = Cluster._tempLightBound;\r\n        var lightviewPos: Vector3 = Cluster._tempVector30;\r\n        Vector3.transformV3ToV3((pointLight.owner as Sprite3D)._transform.position, viewMat, lightviewPos);//World to View\r\n        lightviewPos.z *= -1;\r\n        if (!this._shrinkSphereLightZPerspective(near, far, lightviewPos, pointLight.range, lightBound))\r\n            return;\r\n        if (!this._shrinkXYByRadiusPerspective(lightviewPos, pointLight.range, lightBound, xPlanes, yPlanes))\r\n            return;\r\n\r\n        this._placePointLightToClusters(lightIndex, lightBound);\r\n    }\r\n\r\n    private _updateSpotLightPerspective(near: number, far: number, viewMat: Matrix4x4, spotLight: SpotLightCom, lightIndex: number, xPlanes: Vector3[], yPlanes: Vector3[]): void {\r\n        // technically could fall outside the bounds we make because the planes themeselves are tilted by some angle\r\n        // the effect is exaggerated the steeper the angle the plane makes is\r\n        var lightBound: LightBound = Cluster._tempLightBound;\r\n        var viewPos: Vector3 = Cluster._tempVector30;\r\n        var forward: Vector3 = Cluster._tempVector31;\r\n        var viewConeCap: Vector3 = Cluster._tempVector34;\r\n        var position: Vector3 = (spotLight.owner as Sprite3D)._transform.position;\r\n        var range: number = spotLight.range;\r\n        (spotLight.owner as Sprite3D)._transform.worldMatrix.getForward(forward);\r\n        Vector3.normalize(forward, forward);\r\n        Vector3.scale(forward, range, viewConeCap);\r\n        Vector3.add(position, viewConeCap, viewConeCap);\r\n\r\n        Vector3.transformV3ToV3(position, viewMat, viewPos);//World to View\r\n        Vector3.transformV3ToV3(viewConeCap, viewMat, viewConeCap);//World to View\r\n        viewPos.z *= -1;\r\n        viewConeCap.z *= -1;\r\n        var halfAngle: number = (spotLight.spotAngle / 2) * Math.PI / 180;\r\n        if (!this._shrinkSpotLightZPerspective(near, far, viewPos, viewConeCap, range, halfAngle, lightBound))\r\n            return;\r\n        if (!this._shrinkXYByRadiusPerspective(viewPos, range, lightBound, xPlanes, yPlanes))\r\n            return;\r\n        var viewFor: Vector3 = Cluster._tempVector33;\r\n        viewFor.x = viewConeCap.x - viewPos.x, viewFor.y = viewConeCap.y - viewPos.y, viewFor.z = viewConeCap.z - viewPos.z;\r\n        Vector3.normalize(viewFor, viewFor);\r\n        this._shrinkSpotXYByConePerspective(viewPos, viewFor, range, halfAngle, lightBound, xPlanes, yPlanes);\r\n\r\n        this._placeSpotLightToClusters(lightIndex, lightBound);\r\n    }\r\n\r\n    private _updatePointLightOrth(halfX: number, halfY: number, near: number, far: number, viewMat: Matrix4x4, pointLight: PointLightCom, lightIndex: number): void {\r\n        var lightBound: LightBound = Cluster._tempLightBound;\r\n        var lightviewPos: Vector3 = Cluster._tempVector30;\r\n        Vector3.transformV3ToV3((pointLight.owner as Sprite3D)._transform.position, viewMat, lightviewPos);//World to View\r\n        lightviewPos.z *= -1;\r\n\r\n        if (!this._shrinkSphereLightByBoundOrth(halfX, halfY, near, far, lightviewPos, pointLight.range, lightBound))\r\n            return;\r\n\r\n        this._placePointLightToClusters(lightIndex, lightBound);\r\n    }\r\n\r\n    private _updateSpotLightOrth(halfX: number, halfY: number, near: number, far: number, viewMat: Matrix4x4, spotLight: SpotLightCom, lightIndex: number): void {\r\n        // technically could fall outside the bounds we make because the planes themeselves are tilted by some angle\r\n        // the effect is exaggerated the steeper the angle the plane makes is\r\n        var lightBound: LightBound = Cluster._tempLightBound;\r\n        var viewPos: Vector3 = Cluster._tempVector30;\r\n        var forward: Vector3 = Cluster._tempVector31;\r\n        var viewConeCap: Vector3 = Cluster._tempVector34;\r\n        var position: Vector3 = (spotLight.owner as Sprite3D)._transform.position;\r\n        var range: number = spotLight.range;\r\n        (spotLight.owner as Sprite3D)._transform.worldMatrix.getForward(forward);\r\n        Vector3.normalize(forward, forward);\r\n        Vector3.scale(forward, range, viewConeCap);\r\n        Vector3.add(position, viewConeCap, viewConeCap);\r\n\r\n        Vector3.transformV3ToV3(position, viewMat, viewPos);//World to View\r\n        Vector3.transformV3ToV3(viewConeCap, viewMat, viewConeCap);//World to View\r\n        viewPos.z *= -1;\r\n        viewConeCap.z *= -1;\r\n        var halfAngle: number = (spotLight.spotAngle / 2) * Math.PI / 180;\r\n        if (!this._shrinkSpotLightByBoundOrth(halfX, halfY, near, far, viewPos, viewConeCap, range, halfAngle, lightBound))\r\n            return;\r\n\r\n        this._placeSpotLightToClusters(lightIndex, lightBound);\r\n    }\r\n\r\n    update(camera: Camera, scene: Scene3D): void {\r\n        this._updateMark++;\r\n        var camNear: number = camera.nearPlane;\r\n        this._depthSliceParam.x = Config3D.lightClusterCount.z / Math.log2(camera.farPlane / camNear);\r\n        this._depthSliceParam.y = Math.log2(camNear) * this._depthSliceParam.x;\r\n\r\n        var near: number = camera.nearPlane;\r\n        var far: number = camera.farPlane;\r\n        var viewMat: Matrix4x4 = camera.viewMatrix;\r\n        var curCount: number = scene._directionLights._length;\r\n        var pointLights: LightQueue<PointLightCom> = scene._pointLights;\r\n        var poiCount: number = pointLights._length;\r\n        var poiElements: PointLightCom[] = <PointLightCom[]>pointLights._elements;\r\n        var spotLights: LightQueue<SpotLightCom> = scene._spotLights;\r\n        var spoCount: number = spotLights._length;\r\n        var spoElements: SpotLightCom[] = <SpotLightCom[]>spotLights._elements;\r\n        if (camera.orthographic) {\r\n            var halfY: number = camera.orthographicVerticalSize / 2.0;\r\n            var halfX: number = halfY * camera.aspectRatio;\r\n            for (var i = 0; i < poiCount; i++, curCount++)\r\n                this._updatePointLightOrth(halfX, halfY, near, far, viewMat, poiElements[i], curCount);\r\n            for (var i = 0; i < spoCount; i++, curCount++)\r\n                this._updateSpotLightOrth(halfX, halfY, near, far, viewMat, spoElements[i], curCount);\r\n        }\r\n        else {\r\n            camera._updateClusterPlaneXY();\r\n            var xPlanes: Vector3[] = camera._clusterXPlanes;//must after camera._updateClusterPlaneXY()\r\n            var yPlanes: Vector3[] = camera._clusterYPlanes;\r\n            for (var i = 0; i < poiCount; i++, curCount++)\r\n                this._updatePointLightPerspective(near, far, viewMat, poiElements[i], curCount, xPlanes, yPlanes);\r\n            for (var i = 0; i < spoCount; i++, curCount++)\r\n                this._updateSpotLightPerspective(near, far, viewMat, spoElements[i], curCount, xPlanes, yPlanes);\r\n        }\r\n\r\n        if (poiCount + spoCount > 0) {\r\n            var xSlices: number = this._xSlices, ySlices: number = this._ySlices, zSlices: number = this._zSlices;\r\n            var widthFloat: number = xSlices * ySlices * 4;\r\n            var lightOff: number = widthFloat * zSlices;\r\n            var clusterPixels: Float32Array = this._clusterPixels;\r\n            var clusterPixelsCount: number = clusterPixels.length;\r\n            var clusterDatas: ClusterData[][][] = this._clusterDatas;\r\n            var updateMark: number = this._updateMark;\r\n            var freeSpace: boolean = true;\r\n            for (var z = 0; z < zSlices; z++) {\r\n                for (var y = 0; y < ySlices; y++) {\r\n                    for (var x = 0; x < xSlices; x++) {\r\n                        var data: ClusterData = clusterDatas[z][y][x];\r\n                        var clusterOff: number = (x + y * xSlices + z * xSlices * ySlices) * 4;\r\n                        if (data.updateMark !== updateMark) {\r\n                            clusterPixels[clusterOff] = 0;\r\n                            clusterPixels[clusterOff + 1] = 0;\r\n                        }\r\n                        else {\r\n                            if (freeSpace) {\r\n                                var indices: number[] = data.indices;\r\n                                var pCount: number = data.pointLightCount;\r\n                                var sCount: number = data.spotLightCount;\r\n                                var count: number = pCount + sCount;\r\n                                if (lightOff + count < clusterPixelsCount) {\r\n                                    clusterPixels[clusterOff] = pCount;\r\n                                    clusterPixels[clusterOff + 1] = sCount;\r\n                                    clusterPixels[clusterOff + 2] = Math.floor(lightOff / widthFloat);//solve precision problme, if data is big some GPU int(float) have problem\r\n                                    clusterPixels[clusterOff + 3] = lightOff % widthFloat;\r\n                                    for (var i: number = 0; i < count; i++)\r\n                                        clusterPixels[lightOff++] = indices[i];\r\n                                }\r\n                                else {\r\n                                    count = clusterPixelsCount - (lightOff + count);\r\n                                    pCount = Math.min(pCount, count);\r\n                                    clusterPixels[clusterOff] = pCount;\r\n                                    clusterPixels[clusterOff + 1] = Math.min(sCount, count - pCount);\r\n                                    clusterPixels[clusterOff + 2] = Math.floor(lightOff / widthFloat);//solve precision problme, if data is big some GPU int(float) have problem\r\n                                    clusterPixels[clusterOff + 3] = lightOff % widthFloat;\r\n                                    for (var i: number = 0; i < count; i++)\r\n                                        clusterPixels[lightOff++] = indices[i];\r\n                                    freeSpace = false;//remain cluster light will be ignore\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            var width: number = this._clusterTexture.width;\r\n            this._clusterTexture.setSubPixelsData(0, 0, width, Math.ceil(lightOff / (4 * width)), clusterPixels, 0, false, false, false);\r\n        }\r\n    }\r\n}\r\n","import { Vector3 } from \"../../maths/Vector3\";\r\n\r\n/**\r\n * 平面。\r\n */\r\nexport class Plane {\r\n\t/**平面与其他几何体相交类型*/\r\n\tstatic PlaneIntersectionType_Back: number = 0;\r\n\tstatic PlaneIntersectionType_Front: number = 1;\r\n\tstatic PlaneIntersectionType_Intersecting: number = 2;\r\n\t\r\n\t/**@internal 平面的向量*/\r\n\t_normal: Vector3;\r\n\t\r\n\t/**@internal 平面到坐标系原点的距离*/\r\n\t_distance: number;\r\n\r\n\t/**\r\n\t * 创建一个 <code>Plane</code> 实例。\r\n\t * @param\tnormal 平面的向量\r\n\t * @param\td  平面到原点的距离\r\n\t */\r\n\tconstructor(normal: Vector3 = new Vector3, d: number = 0) {\r\n\t\tthis._normal = normal;\r\n\t\tthis._distance = d;//this.distance = d;\r\n\t}\r\n\r\n\t/**\r\n\t * 平面法线\r\n\t */\r\n\tset normal(value: Vector3) {\r\n\t\tvalue.cloneTo(this._normal);\r\n\t}\r\n\r\n\tget normal() {\r\n\t\treturn this._normal;\r\n\t}\r\n\r\n\t/**\r\n\t * 平面距离\r\n\t */\r\n\tset distance(value: number) {\r\n\t\tthis._distance = value;\r\n\t}\r\n\r\n\tget distance(): number {\r\n\t\treturn this._distance;\r\n\t}\r\n\r\n\t/**\r\n\t * 通过三个点创建一个平面。\r\n\t * @param\tpoint0 第零个点\r\n\t * @param\tpoint1 第一个点\r\n\t * @param\tpoint2 第二个点\r\n\t */\r\n\tstatic createPlaneBy3P(point0: Vector3, point1: Vector3, point2: Vector3, out: Plane): void {\r\n\t\tvar x1: number = point1.x - point0.x;\r\n\t\tvar y1: number = point1.y - point0.y;\r\n\t\tvar z1: number = point1.z - point0.z;\r\n\t\tvar x2: number = point2.x - point0.x;\r\n\t\tvar y2: number = point2.y - point0.y;\r\n\t\tvar z2: number = point2.z - point0.z;\r\n\t\tvar yz: number = (y1 * z2) - (z1 * y2);\r\n\t\tvar xz: number = (z1 * x2) - (x1 * z2);\r\n\t\tvar xy: number = (x1 * y2) - (y1 * x2);\r\n\t\tvar invPyth: number = 1.0 / (Math.sqrt((yz * yz) + (xz * xz) + (xy * xy)));\r\n\r\n\t\tvar x: number = yz * invPyth;\r\n\t\tvar y: number = xz * invPyth;\r\n\t\tvar z: number = xy * invPyth;\r\n\r\n\t\tvar normal: Vector3 = out.normal;\r\n\t\tnormal.x = x;\r\n\t\tnormal.y = y;\r\n\t\tnormal.z = z;\r\n\t\tout.normal = normal.normalize();\r\n\t\tout.distance = -((x * point0.x) + (y * point0.y) + (z * point0.z));\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * 更改平面法线向量的系数，使之成单位长度。\r\n\t */\r\n\tnormalize(): void {\r\n\t\tvar normalEX: number = this.normal.x;\r\n\t\tvar normalEY: number = this.normal.y;\r\n\t\tvar normalEZ: number = this.normal.z;\r\n\t\tvar magnitude: number = 1.0 / Math.sqrt(normalEX * normalEX + normalEY * normalEY + normalEZ * normalEZ);\r\n\r\n\t\tthis.normal.x = normalEX * magnitude;\r\n\t\tthis.normal.y = normalEY * magnitude;\r\n\t\tthis.normal.z = normalEZ * magnitude;\r\n\t\tthis.distance *= magnitude;\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @param\tdestObject 克隆源。\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tvar dest: Plane = <Plane>destObject;\r\n\t\tthis.normal.cloneTo(dest.normal);\r\n\t\tdest.distance = this.distance;\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @return\t 克隆副本。\r\n\t */\r\n\tclone(): Plane {\r\n\t\tvar dest = new Plane();\r\n\t\tthis.cloneTo(dest);\r\n\t\treturn dest;\r\n\t}\r\n\r\n}\r\n\r\n\r\n\r\n","import { Vector3 } from \"../../maths/Vector3\";\r\n\r\n/**\r\n\t * <code>Ray</code> 类用于创建射线。\r\n\t */\r\nexport class Ray {\r\n\t/**原点*/\r\n\torigin: Vector3;\r\n\t/**方向*/\r\n\tdirection: Vector3;\r\n\r\n\t/**\r\n\t * 创建一个 <code>Ray</code> 实例。\r\n\t * @param\torigin 射线的起点\r\n\t * @param\tdirection  射线的方向\r\n\t */\r\n\tconstructor(origin: Vector3, direction: Vector3) {\r\n\t\tthis.origin = origin;\r\n\t\tthis.direction = direction;\r\n\t}\r\n\r\n\t/**\r\n\t * 射线上的某点\r\n\t * @param t \r\n\t * @param out \r\n\t */\r\n\tat(t: number, out: Vector3) {\r\n\t\tVector3.scale(this.direction, t, out);\r\n\t\tVector3.add(this.origin, out, out);\r\n\t}\r\n\r\n}\r\n\r\n","/**\r\n * <code>ContainmentType</code> 类用于定义空间物体位置关系。\r\n */\r\nexport class ContainmentType {\r\n\r\n\t/**不相交*/\r\n\tstatic Disjoint: number = 0;\r\n\t/**包含*/\r\n\tstatic Contains: number = 1;\r\n\t/**相交*/\r\n\tstatic Intersects: number = 2;\r\n\r\n}\r\n\r\n\r\n","import { Plane } from \"./Plane\";\r\nimport { BoundBox } from \"./BoundBox\";\r\nimport { BoundSphere } from \"./BoundSphere\";\r\nimport { Ray } from \"./Ray\";\r\nimport { ContainmentType } from \"./ContainmentType\";\r\nimport { MathUtils3D } from \"../../maths/MathUtils3D\";\r\nimport { Vector3 } from \"../../maths/Vector3\";\r\n/**\r\n     * <code>Collision</code> 类用于检测碰撞。\r\n     */\r\nexport class CollisionUtils {\r\n\r\n    /** @internal */\r\n    private static _tempV30: Vector3 = new Vector3();\r\n    /** @internal */\r\n    private static _tempV31: Vector3 = new Vector3();\r\n    /** @internal */\r\n    private static _tempV32: Vector3 = new Vector3();\r\n    /** @internal */\r\n    private static _tempV33: Vector3 = new Vector3();\r\n    /** @internal */\r\n    private static _tempV34: Vector3 = new Vector3();\r\n    /** @internal */\r\n    private static _tempV35: Vector3 = new Vector3();\r\n    /** @internal */\r\n    private static _tempV36: Vector3 = new Vector3();\r\n\r\n\r\n    /**\r\n     * 创建一个 <code>Collision</code> 实例。\r\n     */\r\n    constructor() {\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * 空间中点到平面的距离\r\n     * @param\tplane 平面\r\n     * @param\tpoint 点\r\n     */\r\n    static distancePlaneToPoint(plane: Plane, point: Vector3): number {\r\n\r\n        var dot: number = Vector3.dot(plane.normal, point);\r\n        return dot + plane.distance;\r\n    }\r\n\r\n    /**\r\n     * 空间中点到包围盒的距离\r\n     * @param\tbox 包围盒\r\n     * @param\tpoint 点\r\n     */\r\n    static distanceBoxToPoint(box: BoundBox, point: Vector3): number {\r\n\r\n        var boxMin: Vector3 = box.min;\r\n        var boxMineX: number = boxMin.x;\r\n        var boxMineY: number = boxMin.y;\r\n        var boxMineZ: number = boxMin.z;\r\n\r\n        var boxMax: Vector3 = box.max;\r\n        var boxMaxeX: number = boxMax.x;\r\n        var boxMaxeY: number = boxMax.y;\r\n        var boxMaxeZ: number = boxMax.z;\r\n\r\n        var pointeX: number = point.x;\r\n        var pointeY: number = point.y;\r\n        var pointeZ: number = point.z;\r\n\r\n        var distance: number = 0;\r\n\r\n        if (pointeX < boxMineX)\r\n            distance += (boxMineX - pointeX) * (boxMineX - pointeX);\r\n        if (pointeX > boxMaxeX)\r\n            distance += (boxMaxeX - pointeX) * (boxMaxeX - pointeX);\r\n\r\n        if (pointeY < boxMineY)\r\n            distance += (boxMineY - pointeY) * (boxMineY - pointeY);\r\n        if (pointeY > boxMaxeY)\r\n            distance += (boxMaxeY - pointeY) * (boxMaxeY - pointeY);\r\n\r\n        if (pointeZ < boxMineZ)\r\n            distance += (boxMineZ - pointeZ) * (boxMineZ - pointeZ);\r\n        if (pointeZ > boxMaxeZ)\r\n            distance += (boxMaxeZ - pointeZ) * (boxMaxeZ - pointeZ);\r\n\r\n        return Math.sqrt(distance);\r\n    }\r\n\r\n    /**\r\n     * 空间中包围盒到包围盒的距离\r\n     * @param\tbox1 包围盒1\r\n     * @param\tbox2 包围盒2\r\n     */\r\n    static distanceBoxToBox(box1: BoundBox, box2: BoundBox): number {\r\n\r\n        var box1Mine: Vector3 = box1.min;\r\n        var box1MineX: number = box1Mine.x;\r\n        var box1MineY: number = box1Mine.y;\r\n        var box1MineZ: number = box1Mine.z;\r\n\r\n        var box1Maxe: Vector3 = box1.max;\r\n        var box1MaxeX: number = box1Maxe.x;\r\n        var box1MaxeY: number = box1Maxe.y;\r\n        var box1MaxeZ: number = box1Maxe.z;\r\n\r\n        var box2Mine: Vector3 = box2.min;\r\n        var box2MineX: number = box2Mine.x;\r\n        var box2MineY: number = box2Mine.y;\r\n        var box2MineZ: number = box2Mine.z;\r\n\r\n        var box2Maxe: Vector3 = box2.max;\r\n        var box2MaxeX: number = box2Maxe.x;\r\n        var box2MaxeY: number = box2Maxe.y;\r\n        var box2MaxeZ: number = box2Maxe.z;\r\n\r\n        var distance: number = 0;\r\n        var delta: number;\r\n\r\n        if (box1MineX > box2MaxeX) {\r\n\r\n            delta = box1MineX - box2MaxeX;\r\n            distance += delta * delta;\r\n        } else if (box2MineX > box1MaxeX) {\r\n\r\n            delta = box2MineX - box1MaxeX;\r\n            distance += delta * delta;\r\n        }\r\n\r\n        if (box1MineY > box2MaxeY) {\r\n\r\n            delta = box1MineY - box2MaxeY;\r\n            distance += delta * delta;\r\n        } else if (box2MineY > box1MaxeY) {\r\n\r\n            delta = box2MineY - box1MaxeY;\r\n            distance += delta * delta;\r\n        }\r\n\r\n        if (box1MineZ > box2MaxeZ) {\r\n\r\n            delta = box1MineZ - box2MaxeZ;\r\n            distance += delta * delta;\r\n        } else if (box2MineZ > box1MaxeZ) {\r\n\r\n            delta = box2MineZ - box1MaxeZ;\r\n            distance += delta * delta;\r\n        }\r\n\r\n        return Math.sqrt(distance);\r\n    }\r\n\r\n    /**\r\n     * 空间中点到包围球的距离\r\n     * @param\tsphere 包围球\r\n     * @param\tpoint  点\r\n     */\r\n    static distanceSphereToPoint(sphere: BoundSphere, point: Vector3): number {\r\n\r\n        var distance: number = Math.sqrt(Vector3.distanceSquared(sphere.center, point));\r\n        distance -= sphere.radius;\r\n\r\n        return Math.max(distance, 0);\r\n    }\r\n\r\n    /**\r\n     * 空间中包围球到包围球的距离\r\n     * @param\tsphere1 包围球1\r\n     * @param\tsphere2 包围球2\r\n     */\r\n    static distanceSphereToSphere(sphere1: BoundSphere, sphere2: BoundSphere): number {\r\n\r\n        var distance: number = Math.sqrt(Vector3.distanceSquared(sphere1.center, sphere2.center));\r\n        distance -= sphere1.radius + sphere2.radius;\r\n\r\n        return Math.max(distance, 0);\r\n    }\r\n\r\n\r\n    /**\r\n     * 空间中射线和三角面是否相交,输出距离\r\n     * @param\tray 射线\r\n     * @param\tvertex1 三角面顶点1\r\n     * @param\tvertex2\t三角面顶点2\r\n     * @param\tvertex3 三角面顶点3\r\n     * @param\tout 点和三角面的距离\r\n     * @return  是否相交\r\n     */\r\n    static intersectsRayAndTriangleRD(ray: Ray, vertex1: Vector3, vertex2: Vector3, vertex3: Vector3, out: number): boolean {\r\n\r\n        var rayO: Vector3 = ray.origin;\r\n        var rayOeX: number = rayO.x;\r\n        var rayOeY: number = rayO.y;\r\n        var rayOeZ: number = rayO.z;\r\n\r\n        var rayD: Vector3 = ray.direction;\r\n        var rayDeX: number = rayD.x;\r\n        var rayDeY: number = rayD.y;\r\n        var rayDeZ: number = rayD.z;\r\n\r\n        var v1eX: number = vertex1.x;\r\n        var v1eY: number = vertex1.y;\r\n        var v1eZ: number = vertex1.z;\r\n\r\n        var v2eX: number = vertex2.x;\r\n        var v2eY: number = vertex2.y;\r\n        var v2eZ: number = vertex2.z;\r\n\r\n        var v3eX: number = vertex3.x;\r\n        var v3eY: number = vertex3.y;\r\n        var v3eZ: number = vertex3.z;\r\n\r\n        var _tempV30eX: number = CollisionUtils._tempV30.x;\r\n        var _tempV30eY: number = CollisionUtils._tempV30.y;\r\n        var _tempV30eZ: number = CollisionUtils._tempV30.z;\r\n\r\n        _tempV30eX = v2eX - v1eX;\r\n        _tempV30eY = v2eY - v1eY;\r\n        _tempV30eZ = v2eZ - v1eZ;\r\n\r\n        var _tempV31eX: number = CollisionUtils._tempV31.x;\r\n        var _tempV31eY: number = CollisionUtils._tempV31.y;\r\n        var _tempV31eZ: number = CollisionUtils._tempV31.z;\r\n\r\n        _tempV31eX = v3eX - v1eX;\r\n        _tempV31eY = v3eY - v1eY;\r\n        _tempV31eZ = v3eZ - v1eZ;\r\n\r\n        var _tempV32eX: number = CollisionUtils._tempV32.x;\r\n        var _tempV32eY: number = CollisionUtils._tempV32.y;\r\n        var _tempV32eZ: number = CollisionUtils._tempV32.z;\r\n\r\n        _tempV32eX = (rayDeY * _tempV31eZ) - (rayDeZ * _tempV31eY);\r\n        _tempV32eY = (rayDeZ * _tempV31eX) - (rayDeX * _tempV31eZ);\r\n        _tempV32eZ = (rayDeX * _tempV31eY) - (rayDeY * _tempV31eX);\r\n\r\n        var determinant: number = (_tempV30eX * _tempV32eX) + (_tempV30eY * _tempV32eY) + (_tempV30eZ * _tempV32eZ);\r\n\r\n        if (MathUtils3D.isZero(determinant)) {\r\n\r\n            out = 0;\r\n            return false;\r\n        }\r\n\r\n        var inversedeterminant: number = 1 / determinant;\r\n\r\n        var _tempV33eX: number = CollisionUtils._tempV33.x;\r\n        var _tempV33eY: number = CollisionUtils._tempV33.y;\r\n        var _tempV33eZ: number = CollisionUtils._tempV33.z;\r\n\r\n        _tempV33eX = rayOeX - v1eX;\r\n        _tempV33eY = rayOeY - v1eY;\r\n        _tempV33eZ = rayOeZ - v1eZ;\r\n\r\n        var triangleU: number = (_tempV33eX * _tempV32eX) + (_tempV33eY * _tempV32eY) + (_tempV33eZ * _tempV32eZ);\r\n        triangleU *= inversedeterminant;\r\n\r\n        if (triangleU < 0 || triangleU > 1) {\r\n\r\n            out = 0;\r\n            return false;\r\n        }\r\n\r\n        var _tempV34eX: number = CollisionUtils._tempV34.x;\r\n        var _tempV34eY: number = CollisionUtils._tempV34.y;\r\n        var _tempV34eZ: number = CollisionUtils._tempV34.z;\r\n\r\n        _tempV34eX = (_tempV33eY * _tempV30eZ) - (_tempV33eZ * _tempV30eY);\r\n        _tempV34eY = (_tempV33eZ * _tempV30eX) - (_tempV33eX * _tempV30eZ);\r\n        _tempV34eZ = (_tempV33eX * _tempV30eY) - (_tempV33eY * _tempV30eX);\r\n\r\n        var triangleV: number = ((rayDeX * _tempV34eX) + (rayDeY * _tempV34eY)) + (rayDeZ * _tempV34eZ);\r\n        triangleV *= inversedeterminant;\r\n\r\n        if (triangleV < 0 || triangleU + triangleV > 1) {\r\n\r\n            out = 0;\r\n            return false;\r\n        }\r\n\r\n        var raydistance: number = (_tempV31eX * _tempV34eX) + (_tempV31eY * _tempV34eY) + (_tempV31eZ * _tempV34eZ);\r\n        raydistance *= inversedeterminant;\r\n\r\n        if (raydistance < 0) {\r\n\r\n            out = 0;\r\n            return false;\r\n        }\r\n\r\n        out = raydistance;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 空间中射线和三角面是否相交,输出相交点\r\n     * @param\tray 射线\r\n     * @param\tvertex1 三角面顶点1\r\n     * @param\tvertex2\t三角面顶点2\r\n     * @param\tvertex3 三角面顶点3\r\n     * @param\tout 相交点\r\n     * @return  是否相交\r\n     */\r\n    static intersectsRayAndTriangleRP(ray: Ray, vertex1: Vector3, vertex2: Vector3, vertex3: Vector3, out: Vector3): boolean {\r\n\r\n        var distance: number;\r\n        if (!CollisionUtils.intersectsRayAndTriangleRD(ray, vertex1, vertex2, vertex3, distance)) {\r\n\r\n            Vector3.ZERO.cloneTo(out);\r\n            return false;\r\n        }\r\n\r\n        Vector3.scale(ray.direction, distance, CollisionUtils._tempV30);\r\n        Vector3.add(ray.origin, CollisionUtils._tempV30, out);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 空间中射线和点是否相交\r\n     * @param\tsphere1 包围球1\r\n     * @param\tsphere2 包围球2\r\n     */\r\n    static intersectsRayAndPoint(ray: Ray, point: Vector3): boolean {\r\n\r\n        Vector3.subtract(ray.origin, point, CollisionUtils._tempV30);\r\n\r\n        var b: number = Vector3.dot(CollisionUtils._tempV30, ray.direction);\r\n        var c: number = Vector3.dot(CollisionUtils._tempV30, CollisionUtils._tempV30) - MathUtils3D.zeroTolerance;\r\n\r\n        if (c > 0 && b > 0)\r\n            return false;\r\n        var discriminant: number = b * b - c;\r\n        if (discriminant < 0)\r\n            return false;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 空间中射线和射线是否相交\r\n     * @param\tray1 射线1\r\n     * @param\tray2 射线2\r\n     * @param\tout 相交点\r\n     */\r\n    static intersectsRayAndRay(ray1: Ray, ray2: Ray, out: Vector3): boolean {\r\n\r\n        var ray1o: Vector3 = ray1.origin;\r\n        var ray1oeX: number = ray1o.x;\r\n        var ray1oeY: number = ray1o.y;\r\n        var ray1oeZ: number = ray1o.z;\r\n\r\n        var ray1d: Vector3 = ray1.direction;\r\n        var ray1deX: number = ray1d.x;\r\n        var ray1deY: number = ray1d.y;\r\n        var ray1deZ: number = ray1d.z;\r\n\r\n        var ray2o: Vector3 = ray2.origin;\r\n        var ray2oeX: number = ray2o.x;\r\n        var ray2oeY: number = ray2o.y;\r\n        var ray2oeZ: number = ray2o.z;\r\n\r\n        var ray2d: Vector3 = ray2.direction;\r\n        var ray2deX: number = ray2d.x;\r\n        var ray2deY: number = ray2d.y;\r\n        var ray2deZ: number = ray2d.z;\r\n\r\n        Vector3.cross(ray1d, ray2d, CollisionUtils._tempV30);\r\n        var tempV3: Vector3 = CollisionUtils._tempV30;\r\n        var denominator: number = Vector3.scalarLength(CollisionUtils._tempV30);\r\n\r\n        if (MathUtils3D.isZero(denominator)) {\r\n\r\n            if (MathUtils3D.nearEqual(ray2oeX, ray1oeX) && MathUtils3D.nearEqual(ray2oeY, ray1oeY) && MathUtils3D.nearEqual(ray2oeZ, ray1oeZ)) {\r\n                Vector3.ZERO.cloneTo(out);\r\n                return true;\r\n            }\r\n        }\r\n\r\n        denominator = denominator * denominator;\r\n\r\n        var m11: number = ray2oeX - ray1oeX;\r\n        var m12: number = ray2oeY - ray1oeY;\r\n        var m13: number = ray2oeZ - ray1oeZ;\r\n        var m21: number = ray2deX;\r\n        var m22: number = ray2deY;\r\n        var m23: number = ray2deZ;\r\n        var m31: number = tempV3.x;\r\n        var m32: number = tempV3.y;\r\n        var m33: number = tempV3.z;\r\n\r\n        var dets: number = m11 * m22 * m33 + m12 * m23 * m31 + m13 * m21 * m32 - m11 * m23 * m32 - m12 * m21 * m33 - m13 * m22 * m31;\r\n\r\n        m21 = ray1deX;\r\n        m22 = ray1deY;\r\n        m23 = ray1deZ;\r\n\r\n\r\n        var s: number = dets / denominator;\r\n\r\n        Vector3.scale(ray1d, s, CollisionUtils._tempV30);\r\n        Vector3.scale(ray2d, s, CollisionUtils._tempV31);\r\n\r\n        Vector3.add(ray1o, CollisionUtils._tempV30, CollisionUtils._tempV32);\r\n        Vector3.add(ray2o, CollisionUtils._tempV31, CollisionUtils._tempV33);\r\n\r\n        var point1e: Vector3 = CollisionUtils._tempV32;\r\n        var point2e: Vector3 = CollisionUtils._tempV33;\r\n\r\n        if (!MathUtils3D.nearEqual(point2e.x, point1e.x) || !MathUtils3D.nearEqual(point2e.y, point1e.y) || !MathUtils3D.nearEqual(point2e.z, point1e.z)) {\r\n            Vector3.ZERO.cloneTo(out);\r\n            return false;\r\n        }\r\n\r\n        out = CollisionUtils._tempV32;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 空间中平面和三角面是否相交\r\n     * @param\tplane 平面\r\n     * @param\tvertex1 三角面顶点1\r\n     * @param\tvertex2 三角面顶点2\r\n     * @param\tvertex3 三角面顶点3\r\n     * @return  返回空间位置关系\r\n     */\r\n    static intersectsPlaneAndTriangle(plane: Plane, vertex1: Vector3, vertex2: Vector3, vertex3: Vector3): number {\r\n\r\n        var test1: number = CollisionUtils.intersectsPlaneAndPoint(plane, vertex1);\r\n        var test2: number = CollisionUtils.intersectsPlaneAndPoint(plane, vertex2);\r\n        var test3: number = CollisionUtils.intersectsPlaneAndPoint(plane, vertex3);\r\n\r\n        if (test1 == Plane.PlaneIntersectionType_Front && test2 == Plane.PlaneIntersectionType_Front && test3 == Plane.PlaneIntersectionType_Front)\r\n            return Plane.PlaneIntersectionType_Front;\r\n\r\n        if (test1 == Plane.PlaneIntersectionType_Back && test2 == Plane.PlaneIntersectionType_Back && test3 == Plane.PlaneIntersectionType_Back)\r\n            return Plane.PlaneIntersectionType_Back;\r\n\r\n        return Plane.PlaneIntersectionType_Intersecting;\r\n    }\r\n\r\n    /**\r\n     * 射线和平面是否相交,并返回相交距离。\r\n     * @param\tray   射线。\r\n     * @param\tplane 平面。\r\n     * @return\t相交距离,-1为不相交。\r\n     */\r\n    static intersectsRayAndPlaneRD(ray: Ray, plane: Plane): number {\r\n        //Source: Real-Time Collision Detection by Christer Ericson\r\n        //Reference: Page 175\r\n        var planeNor: Vector3 = plane.normal;\r\n        var direction: number = Vector3.dot(planeNor, ray.direction);\r\n\r\n        if (Math.abs(direction) < MathUtils3D.zeroTolerance)\r\n            return -1;\r\n\r\n        var position: number = Vector3.dot(planeNor, ray.origin);\r\n        var distance: number = (-plane.distance - position) / direction;\r\n\r\n        if (distance < 0) {\r\n            if (distance < -MathUtils3D.zeroTolerance)\r\n                return -1;\r\n            distance = 0;\r\n        }\r\n        return distance;\r\n    }\r\n\r\n    /**\r\n     * 空间中射线和平面是否相交，并返回相交点。\r\n     * @param\tray   射线。\r\n     * @param\tplane 平面。\r\n     * @param\tout 相交点。\r\n     */\r\n    static intersectsRayAndPlaneRP(ray: Ray, plane: Plane, out: Vector3): boolean {\r\n        //Source: Real-Time Collision Detection by Christer Ericson\r\n        //Reference: Page 175\r\n        var distance: number = CollisionUtils.intersectsRayAndPlaneRD(ray, plane);\r\n        if (distance == -1) {\r\n            out.setValue(0, 0, 0);\r\n            return false;\r\n        }\r\n\r\n        var scaDis: Vector3 = CollisionUtils._tempV30;\r\n        Vector3.scale(ray.direction, distance, scaDis);\r\n        Vector3.add(ray.origin, scaDis, out);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 空间中射线和包围盒是否相交\r\n     * @param\tray 射线\r\n     * @param\tbox\t包围盒\r\n     * @param\tout 相交距离,如果为0,不相交\r\n     */\r\n    static intersectsRayAndBoxRD(ray: Ray, box: BoundBox): number {\r\n\r\n        var rayoe: Vector3 = ray.origin;\r\n        var rayoeX: number = rayoe.x;\r\n        var rayoeY: number = rayoe.y;\r\n        var rayoeZ: number = rayoe.z;\r\n\r\n        var rayde: Vector3 = ray.direction;\r\n        var raydeX: number = rayde.x;\r\n        var raydeY: number = rayde.y;\r\n        var raydeZ: number = rayde.z;\r\n\r\n        var boxMine: Vector3 = box.min;\r\n        var boxMineX: number = boxMine.x;\r\n        var boxMineY: number = boxMine.y;\r\n        var boxMineZ: number = boxMine.z;\r\n\r\n        var boxMaxe: Vector3 = box.max;\r\n        var boxMaxeX: number = boxMaxe.x;\r\n        var boxMaxeY: number = boxMaxe.y;\r\n        var boxMaxeZ: number = boxMaxe.z;\r\n\r\n        var out: number = 0;\r\n\r\n        var tmax: number = MathUtils3D.MaxValue;\r\n\r\n        if (MathUtils3D.isZero(raydeX)) {\r\n\r\n            if (rayoeX < boxMineX || rayoeX > boxMaxeX) {\r\n\r\n                //out = 0;\r\n                return -1;\r\n            }\r\n        } else {\r\n\r\n            var inverse: number = 1 / raydeX;\r\n            var t1: number = (boxMineX - rayoeX) * inverse;\r\n            var t2: number = (boxMaxeX - rayoeX) * inverse;\r\n\r\n            if (t1 > t2) {\r\n\r\n                var temp: number = t1;\r\n                t1 = t2;\r\n                t2 = temp;\r\n            }\r\n\r\n            out = Math.max(t1, out);\r\n            tmax = Math.min(t2, tmax);\r\n\r\n            if (out > tmax) {\r\n\r\n                //out = 0;\r\n                return -1;\r\n            }\r\n        }\r\n\r\n        if (MathUtils3D.isZero(raydeY)) {\r\n\r\n            if (rayoeY < boxMineY || rayoeY > boxMaxeY) {\r\n\r\n                //out = 0;\r\n                return -1;\r\n            }\r\n        } else {\r\n\r\n            var inverse1: number = 1 / raydeY;\r\n            var t3: number = (boxMineY - rayoeY) * inverse1;\r\n            var t4: number = (boxMaxeY - rayoeY) * inverse1;\r\n\r\n            if (t3 > t4) {\r\n\r\n                var temp1: number = t3;\r\n                t3 = t4;\r\n                t4 = temp1;\r\n            }\r\n\r\n            out = Math.max(t3, out);\r\n            tmax = Math.min(t4, tmax);\r\n\r\n            if (out > tmax) {\r\n\r\n                //out = 0;\r\n                return -1;\r\n            }\r\n        }\r\n\r\n        if (MathUtils3D.isZero(raydeZ)) {\r\n\r\n            if (rayoeZ < boxMineZ || rayoeZ > boxMaxeZ) {\r\n\r\n                //out = 0;\r\n                return -1;\r\n            }\r\n        } else {\r\n\r\n            var inverse2: number = 1 / raydeZ;\r\n            var t5: number = (boxMineZ - rayoeZ) * inverse2;\r\n            var t6: number = (boxMaxeZ - rayoeZ) * inverse2;\r\n\r\n            if (t5 > t6) {\r\n\r\n                var temp2: number = t5;\r\n                t5 = t6;\r\n                t6 = temp2;\r\n            }\r\n\r\n            out = Math.max(t5, out);\r\n            tmax = Math.min(t6, tmax);\r\n\r\n            if (out > tmax) {\r\n\r\n                //out = 0;\r\n                return -1;\r\n            }\r\n        }\r\n\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * 空间中射线和包围盒是否相交\r\n     * @param\tray 射线\r\n     * @param\tbox\t包围盒\r\n     * @param\tout 相交点\r\n     */\r\n    static intersectsRayAndBoxRP(ray: Ray, box: BoundBox, out: Vector3): number {\r\n\r\n        var distance: number = CollisionUtils.intersectsRayAndBoxRD(ray, box);\r\n        if (distance === -1) {\r\n\r\n            Vector3.ZERO.cloneTo(out);\r\n            return distance;\r\n        }\r\n        Vector3.scale(ray.direction, distance, CollisionUtils._tempV30);\r\n        Vector3.add(ray.origin, CollisionUtils._tempV30, CollisionUtils._tempV31);\r\n\r\n        CollisionUtils._tempV31.cloneTo(out);\r\n\r\n        return distance;\r\n    }\r\n\r\n    /**\r\n     * 空间中射线和包围球是否相交\r\n     * @param\tray    射线\r\n     * @param\tsphere 包围球\r\n     * @return\t相交距离,-1表示不相交\r\n     */\r\n    static intersectsRayAndSphereRD(ray: Ray, sphere: BoundSphere): number {\r\n\r\n        var sphereR: number = sphere.radius;\r\n        Vector3.subtract(ray.origin, sphere.center, CollisionUtils._tempV30);\r\n\r\n        var b: number = Vector3.dot(CollisionUtils._tempV30, ray.direction);\r\n        var c: number = Vector3.dot(CollisionUtils._tempV30, CollisionUtils._tempV30) - (sphereR * sphereR);\r\n\r\n        if (c > 0 && b > 0) {\r\n            return -1;\r\n        }\r\n\r\n        var discriminant: number = b * b - c;\r\n\r\n        if (discriminant < 0) {\r\n            return -1;\r\n        }\r\n\r\n        var distance: number = -b - Math.sqrt(discriminant);\r\n\r\n        if (distance < 0)\r\n            distance = 0;\r\n\r\n        return distance;\r\n\r\n    }\r\n\r\n    /**\r\n     * 空间中射线和包围球是否相交\r\n     * @param\tray    射线\r\n     * @param\tsphere 包围球\r\n     * @param\tout    相交点\r\n     * @return  相交距离,-1表示不相交\r\n     */\r\n    static intersectsRayAndSphereRP(ray: Ray, sphere: BoundSphere, out: Vector3): number {\r\n        var distance: number = CollisionUtils.intersectsRayAndSphereRD(ray, sphere);\r\n        if (distance === -1) {\r\n            Vector3.ZERO.cloneTo(out);\r\n            return distance;\r\n        }\r\n\r\n        Vector3.scale(ray.direction, distance, CollisionUtils._tempV30);\r\n        Vector3.add(ray.origin, CollisionUtils._tempV30, CollisionUtils._tempV31);\r\n\r\n        CollisionUtils._tempV31.cloneTo(out);\r\n        return distance;\r\n    }\r\n\r\n    /**\r\n     * 空间中包围球和三角面是否相交\r\n     * @param\tsphere 包围球\r\n     * @param\tvertex1 三角面顶点1\r\n     * @param\tvertex2 三角面顶点2\r\n     * @param\tvertex3 三角面顶点3\r\n     * @return  返回是否相交\r\n     */\r\n    static intersectsSphereAndTriangle(sphere: BoundSphere, vertex1: Vector3, vertex2: Vector3, vertex3: Vector3): boolean {\r\n\r\n        var sphereC: Vector3 = sphere.center;\r\n        var sphereR: number = sphere.radius;\r\n\r\n        CollisionUtils.closestPointPointTriangle(sphereC, vertex1, vertex2, vertex3, CollisionUtils._tempV30);\r\n        Vector3.subtract(CollisionUtils._tempV30, sphereC, CollisionUtils._tempV31);\r\n\r\n        var dot: number = Vector3.dot(CollisionUtils._tempV31, CollisionUtils._tempV31);\r\n\r\n        return dot <= sphereR * sphereR;\r\n    }\r\n\r\n    /**\r\n     * 空间中点和平面是否相交\r\n     * @param\tplane  平面\r\n     * @param\tpoint  点\r\n     * @return  碰撞状态\r\n     */\r\n    static intersectsPlaneAndPoint(plane: Plane, point: Vector3): number {\r\n        var distance: number = Vector3.dot(plane.normal, point) + plane.distance;\r\n        if (distance > 0)\r\n            return Plane.PlaneIntersectionType_Front;\r\n        if (distance < 0)\r\n            return Plane.PlaneIntersectionType_Back;\r\n        return Plane.PlaneIntersectionType_Intersecting;\r\n    }\r\n\r\n    /**\r\n     * 空间中平面和平面是否相交\r\n     * @param\tplane1 平面1\r\n     * @param\tplane2 平面2\r\n     * @return  是否相交\r\n     */\r\n    static intersectsPlaneAndPlane(plane1: Plane, plane2: Plane): boolean {\r\n\r\n        Vector3.cross(plane1.normal, plane2.normal, CollisionUtils._tempV30);\r\n\r\n        var denominator: number = Vector3.dot(CollisionUtils._tempV30, CollisionUtils._tempV30);\r\n\r\n        if (MathUtils3D.isZero(denominator))\r\n            return false;\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 空间中平面和平面是否相交\r\n     * @param\tplane1 平面1\r\n     * @param\tplane2 平面2\r\n     * @param\tline   相交线\r\n     * @return  是否相交\r\n     */\r\n    static intersectsPlaneAndPlaneRL(plane1: Plane, plane2: Plane, line: Ray): boolean {\r\n\r\n        var plane1nor: Vector3 = plane1.normal;\r\n        var plane2nor: Vector3 = plane2.normal;\r\n\r\n        Vector3.cross(plane1nor, plane2nor, CollisionUtils._tempV34);\r\n        var denominator: number = Vector3.dot(CollisionUtils._tempV34, CollisionUtils._tempV34);\r\n\r\n        if (MathUtils3D.isZero(denominator))\r\n            return false;\r\n\r\n        Vector3.scale(plane2nor, plane1.distance, CollisionUtils._tempV30);\r\n        Vector3.scale(plane1nor, plane2.distance, CollisionUtils._tempV31);\r\n        Vector3.subtract(CollisionUtils._tempV30, CollisionUtils._tempV31, CollisionUtils._tempV32);\r\n        Vector3.cross(CollisionUtils._tempV32, CollisionUtils._tempV34, CollisionUtils._tempV33);\r\n\r\n        Vector3.normalize(CollisionUtils._tempV34, CollisionUtils._tempV34);\r\n        line = new Ray(CollisionUtils._tempV33, CollisionUtils._tempV34);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 空间中平面和包围盒是否相交\r\n     * @param\tplane 平面\r\n     * @param   box  包围盒\r\n     * @return  碰撞状态\r\n     */\r\n    static intersectsPlaneAndBox(plane: Plane, box: BoundBox): number {\r\n\r\n        var planeD: number = plane.distance;\r\n\r\n        var planeNor: Vector3 = plane.normal;\r\n        var planeNoreX: number = planeNor.x;\r\n        var planeNoreY: number = planeNor.y;\r\n        var planeNoreZ: number = planeNor.z;\r\n\r\n        var boxMine: Vector3 = box.min;\r\n        var boxMineX: number = boxMine.x;\r\n        var boxMineY: number = boxMine.y;\r\n        var boxMineZ: number = boxMine.z;\r\n\r\n        var boxMaxe: Vector3 = box.max;\r\n        var boxMaxeX: number = boxMaxe.x;\r\n        var boxMaxeY: number = boxMaxe.y;\r\n        var boxMaxeZ: number = boxMaxe.z;\r\n\r\n        CollisionUtils._tempV30.x = (planeNoreX > 0) ? boxMineX : boxMaxeX;\r\n        CollisionUtils._tempV30.y = (planeNoreY > 0) ? boxMineY : boxMaxeY;\r\n        CollisionUtils._tempV30.z = (planeNoreZ > 0) ? boxMineZ : boxMaxeZ;\r\n\r\n        CollisionUtils._tempV31.x = (planeNoreX > 0) ? boxMaxeX : boxMineX;\r\n        CollisionUtils._tempV31.y = (planeNoreY > 0) ? boxMaxeY : boxMineY;\r\n        CollisionUtils._tempV31.z = (planeNoreZ > 0) ? boxMaxeZ : boxMineZ;\r\n\r\n        var distance: number = Vector3.dot(planeNor, CollisionUtils._tempV30);\r\n        if (distance + planeD > 0)\r\n            return Plane.PlaneIntersectionType_Front;\r\n\r\n        distance = Vector3.dot(planeNor, CollisionUtils._tempV31);\r\n        if (distance + planeD < 0)\r\n            return Plane.PlaneIntersectionType_Back;\r\n\r\n        return Plane.PlaneIntersectionType_Intersecting;\r\n    }\r\n\r\n    /**\r\n     * 空间中平面和包围球是否相交\r\n     * @param\tplane 平面\r\n     * @param   sphere 包围球\r\n     * @return  碰撞状态\r\n     */\r\n    static intersectsPlaneAndSphere(plane: Plane, sphere: BoundSphere): number {\r\n\r\n        var sphereR: number = sphere.radius;\r\n        var distance: number = Vector3.dot(plane.normal, sphere.center) + plane.distance;\r\n\r\n        if (distance > sphereR)\r\n            return Plane.PlaneIntersectionType_Front;\r\n        if (distance < -sphereR)\r\n            return Plane.PlaneIntersectionType_Back;\r\n        return Plane.PlaneIntersectionType_Intersecting;\r\n    }\r\n\r\n    /**\r\n     * 空间中包围盒和包围盒是否相交\r\n     * @param\tbox1 包围盒1\r\n     * @param   box2 包围盒2\r\n     * @return  是否相交\r\n     */\r\n    static intersectsBoxAndBox(box1: BoundBox, box2: BoundBox): boolean {\r\n\r\n        var box1Mine: Vector3 = box1.min;\r\n        var box1Maxe: Vector3 = box1.max;\r\n        var box2Mine: Vector3 = box2.min;\r\n        var box2Maxe: Vector3 = box2.max;\r\n\r\n        if (box1Mine.x > box2Maxe.x || box2Mine.x > box1Maxe.x)\r\n            return false;\r\n        if (box1Mine.y > box2Maxe.y || box2Mine.y > box1Maxe.y)\r\n            return false;\r\n        if (box1Mine.z > box2Maxe.z || box2Mine.z > box1Maxe.z)\r\n            return false;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 空间中包围盒和包围球是否相交\r\n     * @param\tbox 包围盒\r\n     * @param   sphere 包围球\r\n     * @return  是否相交\r\n     */\r\n    static intersectsBoxAndSphere(box: BoundBox, sphere: BoundSphere): boolean {\r\n        var center: Vector3 = sphere.center;\r\n        var radius: number = sphere.radius;\r\n        var nearest: Vector3 = CollisionUtils._tempV30;\r\n        Vector3.Clamp(center, box.min, box.max, nearest);\r\n        var distance: number = Vector3.distanceSquared(center, nearest);\r\n        return distance <= radius * radius;\r\n    }\r\n\r\n    /**\r\n     * 空间中包围球和包围球是否相交\r\n     * @param\tsphere1 包围球1\r\n     * @param   sphere2 包围球2\r\n     * @return  是否相交\r\n     */\r\n    static intersectsSphereAndSphere(sphere1: BoundSphere, sphere2: BoundSphere): boolean {\r\n\r\n        var radiisum: number = sphere1.radius + sphere2.radius;\r\n        return Vector3.distanceSquared(sphere1.center, sphere2.center) <= radiisum * radiisum;\r\n    }\r\n\r\n\r\n    /**\r\n     * 空间中包围盒是否包含另一个点\r\n     * @param\tbox 包围盒\r\n     * @param   point 点\r\n     * @return  位置关系:0 不想交,1 包含, 2 相交\r\n     */\r\n    static boxContainsPoint(box: BoundBox, point: Vector3): number {\r\n        var boxMine: Vector3 = box.min;\r\n        var boxMaxe: Vector3 = box.max;\r\n        if (boxMine.x <= point.x && boxMaxe.x >= point.x && boxMine.y <= point.y && boxMaxe.y >= point.y && boxMine.z <= point.z && boxMaxe.z >= point.z)\r\n            return ContainmentType.Contains;\r\n        return ContainmentType.Disjoint;\r\n    }\r\n\r\n    /**\r\n     * 空间中包围盒是否包含另一个包围盒\r\n     * @param\tbox1 包围盒1\r\n     * @param   box2 包围盒2\r\n     * @return  位置关系:0 不想交,1 包含, 2 相交\r\n     */\r\n    static boxContainsBox(box1: BoundBox, box2: BoundBox): number {\r\n\r\n        var box1Mine: Vector3 = box1.min;\r\n        var box1MineX: number = box1Mine.x;\r\n        var box1MineY: number = box1Mine.y;\r\n        var box1MineZ: number = box1Mine.z;\r\n\r\n        var box1Maxe: Vector3 = box1.max;\r\n        var box1MaxeX: number = box1Maxe.x;\r\n        var box1MaxeY: number = box1Maxe.y;\r\n        var box1MaxeZ: number = box1Maxe.z;\r\n\r\n        var box2Mine: Vector3 = box2.min;\r\n        var box2MineX: number = box2Mine.x;\r\n        var box2MineY: number = box2Mine.y;\r\n        var box2MineZ: number = box2Mine.z;\r\n\r\n        var box2Maxe: Vector3 = box2.max;\r\n        var box2MaxeX: number = box2Maxe.x;\r\n        var box2MaxeY: number = box2Maxe.y;\r\n        var box2MaxeZ: number = box2Maxe.z;\r\n\r\n        if (box1MaxeX < box2MineX || box1MineX > box2MaxeX)\r\n            return ContainmentType.Disjoint;\r\n\r\n        if (box1MaxeY < box2MineY || box1MineY > box2MaxeY)\r\n            return ContainmentType.Disjoint;\r\n\r\n        if (box1MaxeZ < box2MineZ || box1MineZ > box2MaxeZ)\r\n            return ContainmentType.Disjoint;\r\n\r\n        if (box1MineX <= box2MineX && box2MaxeX <= box1MaxeX && box1MineY <= box2MineY && box2MaxeY <= box1MaxeY && box1MineZ <= box2MineZ && box2MaxeZ <= box1MaxeZ) {\r\n            return ContainmentType.Contains;\r\n        }\r\n\r\n        return ContainmentType.Intersects;\r\n    }\r\n\r\n\r\n    /**\r\n     * 空间中包围盒是否包含另一个包围球\r\n     * @param\tbox 包围盒\r\n     * @param   sphere 包围球\r\n     * @return  位置关系:0 不想交,1 包含, 2 相交\r\n     */\r\n    static boxContainsSphere(box: BoundBox, sphere: BoundSphere): number {\r\n\r\n        var boxMin: Vector3 = box.min;\r\n        var boxMineX: number = boxMin.x;\r\n        var boxMineY: number = boxMin.y;\r\n        var boxMineZ: number = boxMin.z;\r\n\r\n        var boxMax: Vector3 = box.max;\r\n        var boxMaxeX: number = boxMax.x;\r\n        var boxMaxeY: number = boxMax.y;\r\n        var boxMaxeZ: number = boxMax.z;\r\n\r\n        var sphereC: Vector3 = sphere.center;\r\n        var sphereCeX: number = sphereC.x;\r\n        var sphereCeY: number = sphereC.y;\r\n        var sphereCeZ: number = sphereC.z;\r\n\r\n        var sphereR: number = sphere.radius;\r\n\r\n        Vector3.Clamp(sphereC, boxMin, boxMax, CollisionUtils._tempV30);\r\n        var distance: number = Vector3.distanceSquared(sphereC, CollisionUtils._tempV30);\r\n\r\n        if (distance > sphereR * sphereR)\r\n            return ContainmentType.Disjoint;\r\n\r\n        if ((((boxMineX + sphereR <= sphereCeX) && (sphereCeX <= boxMaxeX - sphereR)) && ((boxMaxeX - boxMineX > sphereR) &&\r\n            (boxMineY + sphereR <= sphereCeY))) && (((sphereCeY <= boxMaxeY - sphereR) && (boxMaxeY - boxMineY > sphereR)) &&\r\n                (((boxMineZ + sphereR <= sphereCeZ) && (sphereCeZ <= boxMaxeZ - sphereR)) && (boxMaxeZ - boxMineZ > sphereR))))\r\n            return ContainmentType.Contains;\r\n\r\n        return ContainmentType.Intersects;\r\n    }\r\n\r\n    /**\r\n     * 空间中包围球是否包含另一个点\r\n     * @param\tsphere 包围球\r\n     * @param   point 点\r\n     * @return  位置关系:0 不想交,1 包含, 2 相交\r\n     */\r\n    static sphereContainsPoint(sphere: BoundSphere, point: Vector3): number {\r\n\r\n        if (Vector3.distanceSquared(point, sphere.center) <= sphere.radius * sphere.radius)\r\n            return ContainmentType.Contains;\r\n\r\n        return ContainmentType.Disjoint;\r\n    }\r\n\r\n    /**\r\n     * 空间中包围球是否包含另一个三角面\r\n     * @param\tsphere\r\n     * @param\tvertex1 三角面顶点1\r\n     * @param\tvertex2 三角面顶点2\r\n     * @param\tvertex3 三角面顶点3\r\n     * @return  返回空间位置关系\r\n     */\r\n    static sphereContainsTriangle(sphere: BoundSphere, vertex1: Vector3, vertex2: Vector3, vertex3: Vector3): number {\r\n        var test1: number = CollisionUtils.sphereContainsPoint(sphere, vertex1);\r\n        var test2: number = CollisionUtils.sphereContainsPoint(sphere, vertex2);\r\n        var test3: number = CollisionUtils.sphereContainsPoint(sphere, vertex3);\r\n\r\n        if (test1 == ContainmentType.Contains && test2 == ContainmentType.Contains && test3 == ContainmentType.Contains)\r\n            return ContainmentType.Contains;\r\n\r\n        if (CollisionUtils.intersectsSphereAndTriangle(sphere, vertex1, vertex2, vertex3))\r\n            return ContainmentType.Intersects;\r\n\r\n        return ContainmentType.Disjoint;\r\n    }\r\n\r\n    /**\r\n     * 空间中包围球是否包含另一包围盒\r\n     * @param\tsphere 包围球\r\n     * @param   box 包围盒\r\n     * @return  位置关系:0 不想交,1 包含, 2 相交\r\n     */\r\n    static sphereContainsBox(sphere: BoundSphere, box: BoundBox): number {\r\n\r\n        var sphereC: Vector3 = sphere.center;\r\n        var sphereCeX: number = sphereC.x;\r\n        var sphereCeY: number = sphereC.y;\r\n        var sphereCeZ: number = sphereC.z;\r\n\r\n        var sphereR: number = sphere.radius;\r\n\r\n        var boxMin: Vector3 = box.min;\r\n        var boxMineX: number = boxMin.x;\r\n        var boxMineY: number = boxMin.y;\r\n        var boxMineZ: number = boxMin.z;\r\n\r\n        var boxMax: Vector3 = box.max;\r\n        var boxMaxeX: number = boxMax.x;\r\n        var boxMaxeY: number = boxMax.y;\r\n        var boxMaxeZ: number = boxMax.z;\r\n\r\n        var _tempV30e: Vector3 = CollisionUtils._tempV30;\r\n        var _tempV30eX: number = _tempV30e.x;\r\n        var _tempV30eY: number = _tempV30e.y;\r\n        var _tempV30eZ: number = _tempV30e.z;\r\n\r\n        if (!CollisionUtils.intersectsBoxAndSphere(box, sphere))\r\n            return ContainmentType.Disjoint;\r\n\r\n        var radiusSquared: number = sphereR * sphereR;\r\n\r\n        _tempV30eX = sphereCeX - boxMineX;\r\n        _tempV30eY = sphereCeY - boxMaxeY;\r\n        _tempV30eZ = sphereCeZ - boxMaxeZ;\r\n        if (Vector3.scalarLengthSquared(CollisionUtils._tempV30) > radiusSquared)\r\n            return ContainmentType.Intersects;\r\n\r\n        _tempV30eX = sphereCeX - boxMaxeX;\r\n        _tempV30eY = sphereCeY - boxMaxeY;\r\n        _tempV30eZ = sphereCeZ - boxMaxeZ;\r\n        if (Vector3.scalarLengthSquared(CollisionUtils._tempV30) > radiusSquared)\r\n            return ContainmentType.Intersects;\r\n\r\n        _tempV30eX = sphereCeX - boxMaxeX;\r\n        _tempV30eY = sphereCeY - boxMineY;\r\n        _tempV30eZ = sphereCeZ - boxMaxeZ;\r\n        if (Vector3.scalarLengthSquared(CollisionUtils._tempV30) > radiusSquared)\r\n            return ContainmentType.Intersects;\r\n\r\n        _tempV30eX = sphereCeX - boxMineX;\r\n        _tempV30eY = sphereCeY - boxMineY;\r\n        _tempV30eZ = sphereCeZ - boxMaxeZ;\r\n        if (Vector3.scalarLengthSquared(CollisionUtils._tempV30) > radiusSquared)\r\n            return ContainmentType.Intersects;\r\n\r\n        _tempV30eX = sphereCeX - boxMineX;\r\n        _tempV30eY = sphereCeY - boxMaxeY;\r\n        _tempV30eZ = sphereCeZ - boxMineZ;\r\n        if (Vector3.scalarLengthSquared(CollisionUtils._tempV30) > radiusSquared)\r\n            return ContainmentType.Intersects;\r\n\r\n        _tempV30eX = sphereCeX - boxMaxeX;\r\n        _tempV30eY = sphereCeY - boxMaxeY;\r\n        _tempV30eZ = sphereCeZ - boxMineZ;\r\n        if (Vector3.scalarLengthSquared(CollisionUtils._tempV30) > radiusSquared)\r\n            return ContainmentType.Intersects;\r\n\r\n        _tempV30eX = sphereCeX - boxMaxeX;\r\n        _tempV30eY = sphereCeY - boxMineY;\r\n        _tempV30eZ = sphereCeZ - boxMineZ;\r\n        if (Vector3.scalarLengthSquared(CollisionUtils._tempV30) > radiusSquared)\r\n            return ContainmentType.Intersects;\r\n\r\n        _tempV30eX = sphereCeX - boxMineX;\r\n        _tempV30eY = sphereCeY - boxMineY;\r\n        _tempV30eZ = sphereCeZ - boxMineZ;\r\n        if (Vector3.scalarLengthSquared(CollisionUtils._tempV30) > radiusSquared)\r\n            return ContainmentType.Intersects;\r\n\r\n        return ContainmentType.Contains;\r\n\r\n    }\r\n\r\n    /**\r\n     * 空间中包围球是否包含另一包围球\r\n     * @param\tsphere1 包围球\r\n     * @param   sphere2 包围球\r\n     * @return  位置关系:0 不想交,1 包含, 2 相交\r\n     */\r\n    static sphereContainsSphere(sphere1: BoundSphere, sphere2: BoundSphere): number {\r\n\r\n        var sphere1R: number = sphere1.radius;\r\n        var sphere2R: number = sphere2.radius;\r\n\r\n        var distance: number = Vector3.distance(sphere1.center, sphere2.center);\r\n\r\n        if (sphere1R + sphere2R < distance)\r\n            return ContainmentType.Disjoint;\r\n\r\n        if (sphere1R - sphere2R < distance)\r\n            return ContainmentType.Intersects;\r\n\r\n        return ContainmentType.Contains;\r\n    }\r\n\r\n\r\n    /**\r\n     * 空间中点与三角面的最近点\r\n     * @param\tpoint 点\r\n     * @param\tvertex1 三角面顶点1\r\n     * @param\tvertex2\t三角面顶点2\r\n     * @param\tvertex3 三角面顶点3\r\n     * @param\tout 最近点\r\n     */\r\n    static closestPointPointTriangle(point: Vector3, vertex1: Vector3, vertex2: Vector3, vertex3: Vector3, out: Vector3): void {\r\n\r\n        Vector3.subtract(vertex2, vertex1, CollisionUtils._tempV30);\r\n        Vector3.subtract(vertex3, vertex1, CollisionUtils._tempV31);\r\n\r\n        Vector3.subtract(point, vertex1, CollisionUtils._tempV32);\r\n        Vector3.subtract(point, vertex2, CollisionUtils._tempV33);\r\n        Vector3.subtract(point, vertex3, CollisionUtils._tempV34);\r\n\r\n        var d1: number = Vector3.dot(CollisionUtils._tempV30, CollisionUtils._tempV32);\r\n        var d2: number = Vector3.dot(CollisionUtils._tempV31, CollisionUtils._tempV32);\r\n        var d3: number = Vector3.dot(CollisionUtils._tempV30, CollisionUtils._tempV33);\r\n        var d4: number = Vector3.dot(CollisionUtils._tempV31, CollisionUtils._tempV33);\r\n        var d5: number = Vector3.dot(CollisionUtils._tempV30, CollisionUtils._tempV34);\r\n        var d6: number = Vector3.dot(CollisionUtils._tempV31, CollisionUtils._tempV34);\r\n\r\n        if (d1 <= 0 && d2 <= 0) {\r\n            vertex1.cloneTo(out);\r\n            return;\r\n        }\r\n\r\n        if (d3 >= 0 && d4 <= d3) {\r\n            vertex2.cloneTo(out);\r\n            return;\r\n        }\r\n\r\n        var vc: number = d1 * d4 - d3 * d2;\r\n        if (vc <= 0 && d1 >= 0 && d3 <= 0) {\r\n            var v: number = d1 / (d1 - d3);\r\n            Vector3.scale(CollisionUtils._tempV30, v, out);\r\n            Vector3.add(vertex1, out, out);\r\n            return;\r\n        }\r\n\r\n        if (d6 >= 0 && d5 <= d6) {\r\n            vertex3.cloneTo(out);\r\n            return;\r\n        }\r\n\r\n        var vb: number = d5 * d2 - d1 * d6;\r\n        if (vb <= 0 && d2 >= 0 && d6 <= 0) {\r\n            var w: number = d2 / (d2 - d6);\r\n            Vector3.scale(CollisionUtils._tempV31, w, out);\r\n            Vector3.add(vertex1, out, out);\r\n            return;\r\n        }\r\n\r\n        var va: number = d3 * d6 - d5 * d4;\r\n        if (va <= 0 && (d4 - d3) >= 0 && (d5 - d6) >= 0) {\r\n            var w3: number = (d4 - d3) / ((d4 - d3) + (d5 - d6));\r\n            Vector3.subtract(vertex3, vertex2, out);\r\n            Vector3.scale(out, w3, out);\r\n            Vector3.add(vertex2, out, out);\r\n            return;\r\n        }\r\n\r\n        var denom: number = 1 / (va + vb + vc);\r\n        var v2: number = vb * denom;\r\n        var w2: number = vc * denom;\r\n        Vector3.scale(CollisionUtils._tempV30, v2, CollisionUtils._tempV35);\r\n        Vector3.scale(CollisionUtils._tempV31, w2, CollisionUtils._tempV36);\r\n        Vector3.add(CollisionUtils._tempV35, CollisionUtils._tempV36, out);\r\n        Vector3.add(vertex1, out, out);\r\n    }\r\n\r\n    /**\r\n     * 空间中平面与一点的最近点\r\n     * @param\tplane 平面\r\n     * @param\tpoint 点\r\n     * @param\tout 最近点\r\n     */\r\n    static closestPointPlanePoint(plane: Plane, point: Vector3, out: Vector3): void {\r\n\r\n        var planeN: Vector3 = plane.normal;\r\n        var t: number = Vector3.dot(planeN, point) - plane.distance;\r\n\r\n        Vector3.scale(planeN, t, CollisionUtils._tempV30);\r\n        Vector3.subtract(point, CollisionUtils._tempV30, out);\r\n    }\r\n\r\n    /**\r\n     * 空间中包围盒与一点的最近点\r\n     * @param\tbox 包围盒\r\n     * @param\tpoint 点\r\n     * @param\tout 最近点\r\n     */\r\n    static closestPointBoxPoint(box: BoundBox, point: Vector3, out: Vector3): void {\r\n        Vector3.max(point, box.min, CollisionUtils._tempV30);\r\n        Vector3.min(CollisionUtils._tempV30, box.max, out);\r\n    }\r\n\r\n    /**\r\n     * 空间中包围球与一点的最近点\r\n     * @param\tsphere 包围球\r\n     * @param\tpoint 点\r\n     * @param\tout 最近点\r\n     */\r\n    static closestPointSpherePoint(sphere: BoundSphere, point: Vector3, out: Vector3): void {\r\n        var sphereC: Vector3 = sphere.center;\r\n\r\n        Vector3.subtract(point, sphereC, out);\r\n        Vector3.normalize(out, out);\r\n\r\n        Vector3.scale(out, sphere.radius, out);\r\n        Vector3.add(out, sphereC, out);\r\n    }\r\n\r\n    /**\r\n     * 空间中包围球与包围球的最近点\r\n     * @param\tsphere1 包围球1\r\n     * @param\tsphere2 包围球2\r\n     * @param\tout 最近点\r\n     */\r\n    static closestPointSphereSphere(sphere1: BoundSphere, sphere2: BoundSphere, out: Vector3): void {\r\n        var sphere1C: Vector3 = sphere1.center;\r\n\r\n        Vector3.subtract(sphere2.center, sphere1C, out);\r\n        Vector3.normalize(out, out);\r\n\r\n        Vector3.scale(out, sphere1.radius, out);\r\n        Vector3.add(out, sphere1C, out);\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n","import { Matrix4x4 } from \"../../maths/Matrix4x4\";\r\nimport { Vector3 } from \"../../maths/Vector3\";\r\nimport { Vector4 } from \"../../maths/Vector4\";\r\n\r\n/**\r\n * <code>Viewport</code> 类用于创建视口。\r\n */\r\nexport class Viewport {\r\n\t/** @internal */\r\n\tstatic _tempMatrix4x4: Matrix4x4 = new Matrix4x4();\r\n\tstatic _tempViewport: Viewport = new Viewport(0, 0, 0, 0);\r\n\t/**X轴坐标*/\r\n\tx: number;\r\n\t/**Y轴坐标*/\r\n\ty: number;\r\n\t/**宽度*/\r\n\twidth: number;\r\n\t/**高度*/\r\n\theight: number;\r\n\t/**最小深度*/\r\n\tminDepth: number;\r\n\t/**最大深度*/\r\n\tmaxDepth: number;\r\n\r\n\t/**\r\n\t * 创建一个 <code>Viewport</code> 实例。\r\n\t * @param\tx x坐标。\r\n\t * @param\ty y坐标。\r\n\t * @param\twidth 宽度。\r\n\t * @param\theight 高度。\r\n\t */\r\n\tconstructor(x?: number, y?: number, width?: number, height?: number) {\r\n\t\tthis.minDepth = 0.0;\r\n\t\tthis.maxDepth = 1.0;\r\n\r\n\t\tthis.x = x ?? 0;\r\n\t\tthis.y = y ?? 0;\r\n\t\tthis.width = width ?? 0;\r\n\t\tthis.height = height ?? 0;\r\n\t}\r\n\r\n\t/**\r\n\t * 投影一个三维向量到视口空间。\r\n\t * @param\tsource 三维向量。\r\n\t * @param\tmatrix 变换矩阵。\r\n\t * @param\tout x、y、z为视口空间坐标,透视投影下w为相对于变换矩阵的z轴坐标。\r\n\t */\r\n\tproject(source: Vector3, matrix: Matrix4x4, out: Vector4): void {\r\n\t\tVector3.transformV3ToV4(source, matrix, out);\r\n\t\tvar x: number = out.x, y: number = out.y, z: number = out.z;\r\n\t\tvar w: number = out.w;\r\n\t\tif (w !== 1.0) {\r\n\t\t\tx = x / w;\r\n\t\t\ty = y / w;\r\n\t\t\tz = z / w;\r\n\t\t}\r\n\t\tout.x = (x + 1.0) * 0.5 * this.width + this.x;\r\n\t\tout.y = (-y + 1.0) * 0.5 * this.height + this.y;\r\n\t\tout.z = z * (this.maxDepth - this.minDepth) + this.minDepth;\r\n\t}\r\n\r\n\t/**\r\n\t * 反变换一个三维向量。\r\n\t * @param\tsource 源三维向量。\r\n\t * @param\tmatrix 变换矩阵。\r\n\t * @param\tout 输出三维向量。\r\n\t */\r\n\tunprojectFromMat(source: Vector3, matrix: Matrix4x4, out: Vector3): void {\r\n\t\tvar matrixEleme: Float32Array = matrix.elements;\r\n\r\n\t\tout.x = (((source.x - this.x) / this.width) * 2.0) - 1.0;\r\n\t\tout.y = -((((source.y - this.y) / this.height) * 2.0) - 1.0);\r\n\t\tout.z = (source.z - this.minDepth) / (this.maxDepth - this.minDepth);\r\n\t\tvar a: number = (((out.x * matrixEleme[3]) + (out.y * matrixEleme[7])) + (out.z * matrixEleme[11])) + matrixEleme[15];\r\n\t\tVector3.transformV3ToV3(out, matrix, out);\r\n\t\tif (a !== 1.0) {\r\n\t\t\tout.x = out.x / a;\r\n\t\t\tout.y = out.y / a;\r\n\t\t\tout.z = out.z / a;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 反变换一个三维向量。\r\n\t * @param\tsource 源三维向量。\r\n\t * @param\tprojection  透视投影矩阵。\r\n\t * @param\tview 视图矩阵。\r\n\t * @param\tworld 世界矩阵,可设置为null。\r\n\t * @param   out 输出向量。\r\n\t */\r\n\tunprojectFromWVP(source: Vector3, projection: Matrix4x4, view: Matrix4x4, world: Matrix4x4, out: Vector3): void {\r\n\r\n\t\tMatrix4x4.multiply(projection, view, Viewport._tempMatrix4x4);\r\n\t\t(world) && (Matrix4x4.multiply(Viewport._tempMatrix4x4, world, Viewport._tempMatrix4x4));\r\n\t\tViewport._tempMatrix4x4.invert(Viewport._tempMatrix4x4);\r\n\t\tthis.unprojectFromMat(source, Viewport._tempMatrix4x4, out);\r\n\t}\r\n\r\n\tset(x: number, y: number, width: number, height: number) {\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\t\tthis.width = width;\r\n\t\tthis.height = height;\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆\r\n\t * @param\tout\r\n\t */\r\n\tcloneTo(out: Viewport): void {\r\n\t\tout.x = this.x;\r\n\t\tout.y = this.y;\r\n\t\tout.width = this.width;\r\n\t\tout.height = this.height;\r\n\t\tout.minDepth = this.minDepth;\r\n\t\tout.maxDepth = this.maxDepth;\r\n\t}\r\n}\r\n\r\n\r\n","\r\nimport { Matrix4x4 } from \"../../maths/Matrix4x4\";\r\nimport { Vector2 } from \"../../maths/Vector2\";\r\nimport { Vector3 } from \"../../maths/Vector3\";\r\nimport { Plane } from \"../math/Plane\"\r\nimport { Ray } from \"../math/Ray\"\r\n\r\nimport { Viewport } from \"../math/Viewport\"\r\n\r\n/**\r\n * <code>Picker</code> 类用于创建拾取。\r\n */\r\nexport class Picker {\r\n\tprivate static _tempVector30: Vector3 = new Vector3();\r\n\tprivate static _tempVector31: Vector3 = new Vector3();\r\n\tprivate static _tempVector32: Vector3 = new Vector3();\r\n\tprivate static _tempVector33: Vector3 = new Vector3();\r\n\tprivate static _tempVector34: Vector3 = new Vector3();\r\n\r\n\t/**\r\n\t * 创建一个 <code>Picker</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t}\r\n\r\n\t/**\r\n\t * 计算鼠标生成的射线。\r\n\t * @param\tpoint 鼠标位置。\r\n\t * @param\tviewPort 视口。\r\n\t * @param\tprojectionMatrix 透视投影矩阵。\r\n\t * @param\tviewMatrix 视图矩阵。\r\n\t * @param\tworld 世界偏移矩阵。\r\n\t * @return  out  输出射线。\r\n\t */\r\n\tstatic calculateCursorRay(point: Vector2, viewPort: Viewport, projectionMatrix: Matrix4x4, viewMatrix: Matrix4x4, world: Matrix4x4, out: Ray): void {\r\n\r\n\t\tvar x: number = point.x;\r\n\t\tvar y: number = point.y;\r\n\r\n\t\tvar nearSource: Vector3 = Picker._tempVector30;\r\n\t\tvar nerSourceE: Vector3 = nearSource;\r\n\t\tnerSourceE.x = x;\r\n\t\tnerSourceE.y = y;\r\n\t\tnerSourceE.z = viewPort.minDepth;\r\n\r\n\t\tvar farSource: Vector3 = Picker._tempVector31;\r\n\t\tvar farSourceE: Vector3 = farSource;\r\n\t\tfarSourceE.x = x;\r\n\t\tfarSourceE.y = y;\r\n\t\tfarSourceE.z = viewPort.maxDepth;\r\n\r\n\t\tvar nearPoint: Vector3 = out.origin;\r\n\t\tvar farPoint: Vector3 = Picker._tempVector32;\r\n\r\n\t\tviewPort.unprojectFromWVP(nearSource, projectionMatrix, viewMatrix, world, nearPoint);\r\n\t\tviewPort.unprojectFromWVP(farSource, projectionMatrix, viewMatrix, world, farPoint);\r\n\r\n\t\tvar outDire: Vector3 = out.direction;\r\n\t\toutDire.x = farPoint.x - nearPoint.x;\r\n\t\toutDire.y = farPoint.y - nearPoint.y;\r\n\t\toutDire.z = farPoint.z - nearPoint.z;\r\n\t\tVector3.normalize(out.direction, out.direction);\r\n\t}\r\n\r\n\t/**\r\n\t * 计算射线和三角形碰撞并返回碰撞距离。\r\n\t * @param\tray 射线。\r\n\t * @param\tvertex1 顶点1。\r\n\t * @param\tvertex2 顶点2。\r\n\t * @param\tvertex3 顶点3。\r\n\t * @return   射线距离三角形的距离，返回Number.NaN则不相交。\r\n\t */\r\n\tstatic rayIntersectsTriangle(ray: Ray, vertex1: Vector3, vertex2: Vector3, vertex3: Vector3): number {\r\n\r\n\t\tvar result: number;\r\n\t\t// Compute vectors along two edges of the triangle.\r\n\t\tvar edge1: Vector3 = Picker._tempVector30, edge2: Vector3 = Picker._tempVector31;\r\n\r\n\t\tVector3.subtract(vertex2, vertex1, edge1);\r\n\t\tVector3.subtract(vertex3, vertex1, edge2);\r\n\r\n\t\t// Compute the determinant.\r\n\t\tvar directionCrossEdge2: Vector3 = Picker._tempVector32;\r\n\t\tVector3.cross(ray.direction, edge2, directionCrossEdge2);\r\n\r\n\t\tvar determinant: number;\r\n\t\tdeterminant = Vector3.dot(edge1, directionCrossEdge2);\r\n\r\n\t\t// If the ray is parallel to the triangle plane, there is no collision.\r\n\t\tif (determinant > -Number.MIN_VALUE && determinant < Number.MIN_VALUE) {\r\n\t\t\tresult = Number.NaN;\r\n\t\t\treturn result;\r\n\t\t}\r\n\r\n\t\tvar inverseDeterminant: number = 1.0 / determinant;\r\n\r\n\t\t// Calculate the U parameter of the intersection point.\r\n\t\tvar distanceVector: Vector3 = Picker._tempVector33;\r\n\t\tVector3.subtract(ray.origin, vertex1, distanceVector);\r\n\r\n\t\tvar triangleU: number;\r\n\t\ttriangleU = Vector3.dot(distanceVector, directionCrossEdge2);\r\n\t\ttriangleU *= inverseDeterminant;\r\n\r\n\t\t// Make sure it is inside the triangle.\r\n\t\tif (triangleU < 0 || triangleU > 1) {\r\n\t\t\tresult = Number.NaN;\r\n\t\t\treturn result;\r\n\t\t}\r\n\r\n\t\t// Calculate the V parameter of the intersection point.\r\n\t\tvar distanceCrossEdge1: Vector3 = Picker._tempVector34;\r\n\t\tVector3.cross(distanceVector, edge1, distanceCrossEdge1);\r\n\r\n\t\tvar triangleV: number;\r\n\t\ttriangleV = Vector3.dot(ray.direction, distanceCrossEdge1);\r\n\t\ttriangleV *= inverseDeterminant;\r\n\r\n\t\t// Make sure it is inside the triangle.\r\n\t\tif (triangleV < 0 || triangleU + triangleV > 1) {\r\n\t\t\tresult = Number.NaN;\r\n\t\t\treturn result;\r\n\t\t}\r\n\r\n\t\t// Compute the distance along the ray to the triangle.\r\n\t\tvar rayDistance: number;\r\n\t\trayDistance = Vector3.dot(edge2, distanceCrossEdge1);\r\n\t\trayDistance *= inverseDeterminant;\r\n\r\n\t\t// Is the triangle behind the ray origin?\r\n\t\tif (rayDistance < 0) {\r\n\t\t\tresult = Number.NaN;\r\n\t\t\treturn result;\r\n\t\t}\r\n\r\n\t\tresult = rayDistance;\r\n\t\treturn result;\r\n\t}\r\n\r\n\t/**\r\n\t * 检测射线和平面的交点\r\n\t * @param ray \r\n\t * @param plane \r\n\t * @returns \r\n\t */\r\n\tstatic rayPlaneIntersection(ray: Ray, plane: Plane): Vector3 {\r\n\t\tlet point = new Vector3();\r\n\t\tlet ddotn = Vector3.dot(ray.direction.normalize(), plane.normal.normalize());\r\n\t\tif (ddotn == 0) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tlet t = (-plane.distance - Vector3.dot(ray.origin, plane.normal)) / ddotn;\r\n\t\tif (t < 0)\r\n\t\t\treturn null;\r\n\t\tray.at(t, point);\r\n\t\treturn point;\r\n\t}\r\n}\r\n\r\n\r\n","import { Node } from \"../../display/Node\";\r\nimport { Sprite3D } from \"./Sprite3D\";\r\nimport { BaseRender } from \"./render/BaseRender\";\r\nimport { Shader3D } from \"../../RenderEngine/RenderShader/Shader3D\";\r\nimport { ShaderDefine } from \"../../RenderEngine/RenderShader/ShaderDefine\";\r\nimport { LayaGL } from \"../../layagl/LayaGL\";\r\n\r\n/**\r\n * <code>RenderableSprite3D</code> 类用于可渲染3D精灵的父类，抽象类不允许实例。\r\n */\r\nexport class RenderableSprite3D extends Sprite3D {\r\n\t/**精灵级着色器宏定义,接收阴影。*/\r\n\tstatic SHADERDEFINE_RECEIVE_SHADOW: ShaderDefine;\r\n\t/**精灵级着色器宏定义,光照贴图。*/\r\n\tstatic SAHDERDEFINE_LIGHTMAP: ShaderDefine;\r\n\t/**精灵级着色器宏定义,光照贴图方向。 */\r\n\tstatic SHADERDEFINE_LIGHTMAP_DIRECTIONAL: ShaderDefine;\r\n\t/**着色器变量名，光照贴图缩放和偏移。*/\r\n\tstatic LIGHTMAPSCALEOFFSET: number;\r\n\t/**着色器变量名，光照贴图。*/\r\n\tstatic LIGHTMAP: number;\r\n\t/**着色器变量名，光照贴图方向。*/\r\n\tstatic LIGHTMAP_DIRECTION: number;\r\n\t/**拾取颜色。*/\r\n\tstatic PICKCOLOR: number;\r\n\r\n\r\n\t/** 反射探针位置 最大、最小值*/\r\n\tstatic REFLECTIONCUBE_PROBEPOSITION: number;\r\n\tstatic REFLECTIONCUBE_PROBEBOXMAX: number;\r\n\tstatic REFLECTIONCUBE_PROBEBOXMIN: number;\r\n\r\n\t/** volumetric GI */\r\n\r\n\tstatic VOLUMETRICGI_PROBECOUNTS: number;\r\n\tstatic VOLUMETRICGI_PROBESTEPS: number;\r\n\tstatic VOLUMETRICGI_PROBESTARTPOS: number;\r\n\tstatic VOLUMETRICGI_PROBEPARAMS: number;\r\n\tstatic VOLUMETRICGI_IRRADIANCE: number;\r\n\tstatic VOLUMETRICGI_DISTANCE: number;\r\n\r\n\t/** @internal */\r\n\tstatic IBLTEX: number;\r\n\t/** @internal */\r\n\tstatic IBLROUGHNESSLEVEL: number;\r\n\t/** @internal */\r\n\tstatic AMBIENTSH: number;\r\n\t/** @internal */\r\n\tstatic AMBIENTCOLOR: number;\r\n\t/** @internal */\r\n\tstatic AMBIENTINTENSITY: number;\r\n\t/** @internal */\r\n\tstatic REFLECTIONINTENSITY: number;\r\n\r\n\t/// Morph target\r\n\r\n\tstatic SHADERDEFINE_MORPHTARGET: ShaderDefine;\r\n\tstatic SHADERDEFINE_MORPHTARGET_POSITION: ShaderDefine;\r\n\tstatic SHADERDEFINE_MORPHTARGET_NORMAL: ShaderDefine;\r\n\tstatic SHADERDEFINE_MORPHTARGET_TANGENT: ShaderDefine;\r\n\r\n\t/** @internal */\r\n\tstatic MorphTex: number;\r\n\t/** @internal */\r\n\tstatic MorphParams: number;\r\n\t/** @internal */\r\n\tstatic MorphAttriOffset: number;\r\n\t/** @internal */\r\n\tstatic MorphActiceTargets: number;\r\n\t/** @internal */\r\n\tstatic MorphActiveWeights: number;\r\n\t/** @internal */\r\n\tstatic MorphActiveCount: number;\r\n\r\n\t//--------------------------------------------------------deprecated------------------------------------------------------------------------\r\n\t/**\r\n\t * @deprecated\r\n\t * @internal\r\n\t */\r\n\tstatic AMBIENTSHAR: number;\r\n\t/**\r\n\t * @deprecated\r\n\t * @internal\r\n\t */\r\n\tstatic AMBIENTSHAG: number;\r\n\t/**\r\n\t * @deprecated\r\n\t * @internal\r\n\t */\r\n\tstatic AMBIENTSHAB: number;\r\n\t/**\r\n\t * @deprecated\r\n\t * @internal\r\n\t */\r\n\tstatic AMBIENTSHBR: number;\r\n\t/**\r\n\t* @deprecated\r\n\t* @internal\r\n\t*/\r\n\tstatic AMBIENTSHBG: number;\r\n\t/**\r\n\t* @deprecated\r\n\t* @internal\r\n\t*/\r\n\tstatic AMBIENTSHBB: number;\r\n\t/**\r\n\t* @deprecated\r\n\t* @internal\r\n\t*/\r\n\tstatic AMBIENTSHC: number;\r\n\t/**\r\n\t * @deprecated\r\n\t *  反射贴图 \r\n\t */\r\n\tstatic REFLECTIONTEXTURE: number;\r\n\t/**\r\n\t * @deprecated\r\n\t *  反射贴图参数 \r\n\t */\r\n\tstatic REFLECTIONCUBE_HDR_PARAMS: number;\r\n\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic __init__(): void {\r\n\t\tRenderableSprite3D.SHADERDEFINE_RECEIVE_SHADOW = Shader3D.getDefineByName(\"RECEIVESHADOW\");\r\n\t\tRenderableSprite3D.SAHDERDEFINE_LIGHTMAP = Shader3D.getDefineByName(\"LIGHTMAP\");\r\n\t\tRenderableSprite3D.SHADERDEFINE_LIGHTMAP_DIRECTIONAL = Shader3D.getDefineByName(\"LIGHTMAP_DIRECTIONAL\");\r\n\r\n\t\tRenderableSprite3D.LIGHTMAPSCALEOFFSET = Shader3D.propertyNameToID(\"u_LightmapScaleOffset\");\r\n\t\tRenderableSprite3D.LIGHTMAP = Shader3D.propertyNameToID(\"u_LightMap\");\r\n\t\tRenderableSprite3D.LIGHTMAP_DIRECTION = Shader3D.propertyNameToID(\"u_LightMapDirection\");\r\n\t\tRenderableSprite3D.PICKCOLOR = Shader3D.propertyNameToID(\"u_PickColor\");\r\n\r\n\t\tRenderableSprite3D.REFLECTIONCUBE_PROBEPOSITION = Shader3D.propertyNameToID(\"u_SpecCubeProbePosition\");\r\n\t\tRenderableSprite3D.REFLECTIONCUBE_PROBEBOXMAX = Shader3D.propertyNameToID(\"u_SpecCubeBoxMax\");\r\n\t\tRenderableSprite3D.REFLECTIONCUBE_PROBEBOXMIN = Shader3D.propertyNameToID(\"u_SpecCubeBoxMin\");\r\n\r\n\t\t// volumestric GI\r\n\t\tRenderableSprite3D.VOLUMETRICGI_PROBECOUNTS = Shader3D.propertyNameToID(\"u_VolumetricGI.probeCounts\");\r\n\t\tRenderableSprite3D.VOLUMETRICGI_PROBESTEPS = Shader3D.propertyNameToID(\"u_VolumetricGI.probeStep\");\r\n\t\tRenderableSprite3D.VOLUMETRICGI_PROBESTARTPOS = Shader3D.propertyNameToID(\"u_VolumetricGI.probeStartPosition\");\r\n\t\tRenderableSprite3D.VOLUMETRICGI_PROBEPARAMS = Shader3D.propertyNameToID(\"u_VolumetricGI.probeParams\");\r\n\t\tRenderableSprite3D.VOLUMETRICGI_IRRADIANCE = Shader3D.propertyNameToID(\"u_ProbeIrradiance\");\r\n\t\tRenderableSprite3D.VOLUMETRICGI_DISTANCE = Shader3D.propertyNameToID(\"u_ProbeDistance\");\r\n\r\n\t\t//ambient Color\r\n\t\tRenderableSprite3D.AMBIENTCOLOR = Shader3D.propertyNameToID(\"u_AmbientColor\");\r\n\t\t// sh \r\n\t\tRenderableSprite3D.AMBIENTSH = Shader3D.propertyNameToID(\"u_IblSH\");\r\n\t\t//GI instance\r\n\t\tRenderableSprite3D.AMBIENTINTENSITY = Shader3D.propertyNameToID(\"u_AmbientIntensity\");\r\n\t\tRenderableSprite3D.REFLECTIONINTENSITY = Shader3D.propertyNameToID(\"u_ReflectionIntensity\");\r\n\t\tRenderableSprite3D.IBLTEX = Shader3D.propertyNameToID(\"u_IBLTex\");\r\n\t\tRenderableSprite3D.IBLROUGHNESSLEVEL = Shader3D.propertyNameToID(\"u_IBLRoughnessLevel\");\r\n\r\n\t\tconst commandUniform = LayaGL.renderOBJCreate.createGlobalUniformMap(\"Sprite3D\");\r\n\r\n\t\t/// morph target\r\n\r\n\t\tRenderableSprite3D.SHADERDEFINE_MORPHTARGET = Shader3D.getDefineByName(\"MORPHTARGETS\");\r\n\t\tRenderableSprite3D.SHADERDEFINE_MORPHTARGET_POSITION = Shader3D.getDefineByName(\"MORPHTARGETS_POSITION\");\r\n\t\tRenderableSprite3D.SHADERDEFINE_MORPHTARGET_NORMAL = Shader3D.getDefineByName(\"MORPHTARGETS_NORMAL\");\r\n\t\tRenderableSprite3D.SHADERDEFINE_MORPHTARGET_TANGENT = Shader3D.getDefineByName(\"MORPHTARGETS_TANGENT\");\r\n\r\n\t\tRenderableSprite3D.MorphTex = Shader3D.propertyNameToID(\"u_MorphTargetsTex\");\r\n\t\tRenderableSprite3D.MorphParams = Shader3D.propertyNameToID(\"u_MorphParams\");\r\n\t\tRenderableSprite3D.MorphAttriOffset = Shader3D.propertyNameToID(\"u_MorphAttrOffset\");\r\n\t\tRenderableSprite3D.MorphActiceTargets = Shader3D.propertyNameToID(\"u_MorphActiveTargets\");\r\n\t\tRenderableSprite3D.MorphActiveWeights = Shader3D.propertyNameToID(\"u_MorphTargetWeights\");\r\n\t\tRenderableSprite3D.MorphActiveCount = Shader3D.propertyNameToID(\"u_MorphTargetActiveCount\");\r\n\r\n\t\tcommandUniform.addShaderUniform(RenderableSprite3D.MorphTex, \"u_MorphTargetsTex\");\r\n\t\tcommandUniform.addShaderUniform(RenderableSprite3D.MorphParams, \"u_MorphParams\");\r\n\t\tcommandUniform.addShaderUniform(RenderableSprite3D.MorphAttriOffset, \"u_MorphAttrOffset\");\r\n\t\tcommandUniform.addShaderUniform(RenderableSprite3D.MorphActiceTargets, \"u_MorphActiveTargets\");\r\n\t\tcommandUniform.addShaderUniform(RenderableSprite3D.MorphActiveWeights, \"u_MorphTargetWeights\")\r\n\t\tcommandUniform.addShaderUniform(RenderableSprite3D.MorphActiveCount, \"u_MorphTargetActiveCount\");\r\n\r\n\t\tcommandUniform.addShaderUniform(RenderableSprite3D.LIGHTMAPSCALEOFFSET, \"u_LightmapScaleOffset\");\r\n\t\tcommandUniform.addShaderUniform(RenderableSprite3D.LIGHTMAP, \"u_LightMap\");\r\n\t\tcommandUniform.addShaderUniform(RenderableSprite3D.LIGHTMAP_DIRECTION, \"u_LightMapDirection\");\r\n\t\tcommandUniform.addShaderUniform(RenderableSprite3D.PICKCOLOR, \"u_PickColor\");\r\n\r\n\t\tcommandUniform.addShaderUniform(RenderableSprite3D.REFLECTIONCUBE_PROBEPOSITION, \"u_SpecCubeProbePosition\");\r\n\t\tcommandUniform.addShaderUniform(RenderableSprite3D.REFLECTIONCUBE_PROBEBOXMAX, \"u_SpecCubeBoxMax\");\r\n\t\tcommandUniform.addShaderUniform(RenderableSprite3D.REFLECTIONCUBE_PROBEBOXMIN, \"u_SpecCubeBoxMin\");\r\n\t\tcommandUniform.addShaderUniform(RenderableSprite3D.IBLTEX, \"u_IBLTex\");\r\n\t\tcommandUniform.addShaderUniform(RenderableSprite3D.IBLROUGHNESSLEVEL, \"u_IBLRoughnessLevel\");\r\n\t\tcommandUniform.addShaderUniform(RenderableSprite3D.VOLUMETRICGI_PROBECOUNTS, \"u_VolumetricGI.probeCounts\");\r\n\t\tcommandUniform.addShaderUniform(RenderableSprite3D.VOLUMETRICGI_PROBESTEPS, \"u_VolumetricGI.probeStep\");\r\n\t\tcommandUniform.addShaderUniform(RenderableSprite3D.VOLUMETRICGI_PROBESTARTPOS, \"u_VolumetricGI.probeStartPosition\");\r\n\t\tcommandUniform.addShaderUniform(RenderableSprite3D.VOLUMETRICGI_PROBEPARAMS, \"u_VolumetricGI.probeParams\");\r\n\t\tcommandUniform.addShaderUniform(RenderableSprite3D.VOLUMETRICGI_IRRADIANCE, \"u_ProbeIrradiance\");\r\n\t\tcommandUniform.addShaderUniform(RenderableSprite3D.VOLUMETRICGI_DISTANCE, \"u_ProbeDistance\");\r\n\t\tcommandUniform.addShaderUniform(RenderableSprite3D.AMBIENTSH, \"u_IblSH\");\r\n\t\tcommandUniform.addShaderUniform(RenderableSprite3D.AMBIENTCOLOR, \"u_AmbientColor\");\r\n\t\tcommandUniform.addShaderUniform(RenderableSprite3D.AMBIENTINTENSITY, \"u_AmbientIntensity\");\r\n\t\tcommandUniform.addShaderUniform(RenderableSprite3D.REFLECTIONINTENSITY, \"u_ReflectionIntensity\");\r\n\r\n\t\t//Legency Reflectexture\r\n\t\tRenderableSprite3D.REFLECTIONTEXTURE = Shader3D.propertyNameToID(\"u_ReflectTexture\");\r\n\t\tRenderableSprite3D.REFLECTIONCUBE_HDR_PARAMS = Shader3D.propertyNameToID(\"u_ReflectCubeHDRParams\");\r\n\t\tcommandUniform.addShaderUniform(RenderableSprite3D.REFLECTIONTEXTURE, \"REFLECTIONTEXTURE\");\r\n\t\tcommandUniform.addShaderUniform(RenderableSprite3D.REFLECTIONCUBE_HDR_PARAMS, \"u_ReflectCubeHDRParams\");\r\n\t\t// legacy sh\r\n\t\tRenderableSprite3D.AMBIENTSHAR = Shader3D.propertyNameToID(\"u_AmbientSHAr\");\r\n\t\tcommandUniform.addShaderUniform(RenderableSprite3D.AMBIENTSHAR, \"u_AmbientSHAr\");\r\n\t\tRenderableSprite3D.AMBIENTSHAG = Shader3D.propertyNameToID(\"u_AmbientSHAg\");\r\n\t\tcommandUniform.addShaderUniform(RenderableSprite3D.AMBIENTSHAG, \"u_AmbientSHAg\");\r\n\t\tRenderableSprite3D.AMBIENTSHAB = Shader3D.propertyNameToID(\"u_AmbientSHAb\");\r\n\t\tcommandUniform.addShaderUniform(RenderableSprite3D.AMBIENTSHAB, \"u_AmbientSHAb\");\r\n\t\tRenderableSprite3D.AMBIENTSHBR = Shader3D.propertyNameToID(\"u_AmbientSHBr\");\r\n\t\tcommandUniform.addShaderUniform(RenderableSprite3D.AMBIENTSHBR, \"u_AmbientSHBr\");\r\n\t\tRenderableSprite3D.AMBIENTSHBG = Shader3D.propertyNameToID(\"u_AmbientSHBg\");\r\n\t\tcommandUniform.addShaderUniform(RenderableSprite3D.AMBIENTSHBG, \"u_AmbientSHBg\");\r\n\t\tRenderableSprite3D.AMBIENTSHBB = Shader3D.propertyNameToID(\"u_AmbientSHBb\");\r\n\t\tcommandUniform.addShaderUniform(RenderableSprite3D.AMBIENTSHBB, \"u_AmbientSHBb\");\r\n\t\tRenderableSprite3D.AMBIENTSHC = Shader3D.propertyNameToID(\"u_AmbientSHC\");\r\n\t\tcommandUniform.addShaderUniform(RenderableSprite3D.AMBIENTSHC, \"u_AmbientSHC\");\r\n\t}\r\n\r\n\t/** @internal */\r\n\t_render: BaseRender;\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * 创建一个 <code>RenderableSprite3D</code> 实例。\r\n\t */\r\n\tconstructor(name: string) {\r\n\t\tsuper(name);\r\n\t}\r\n\r\n\t/** \r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tprotected _onInActive(): void {\r\n\t\tsuper._onInActive();\r\n\t}\r\n\r\n\t/** \r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tprotected _onActive(): void {\r\n\t\tsuper._onActive();\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tprotected _onActiveInScene(): void {\r\n\t\tsuper._onActiveInScene();\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprotected _create(): Node {\r\n\t\treturn new Sprite3D(this.name);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_addToInitStaticBatchManager(): void {\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @internal\r\n\t * @override\r\n\t */\r\n\t_setBelongScene(scene: Node): void {\r\n\t\tsuper._setBelongScene(scene);\r\n\t\t//this._render._setBelongScene(<Scene3D>scene);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @internal\r\n\t * @override\r\n\t */\r\n\t_setUnBelongScene(): void {\r\n\t\tsuper._setUnBelongScene();\r\n\t}\r\n}\r\n\r\n\r\n","import { Texture2D } from \"../../../resource/Texture2D\";\r\n\r\n/**\r\n * 光照贴图。\r\n */\r\nexport class Lightmap {\r\n    static ApplyLightmapEvent:string = \"ApplyLightmap\";\r\n    /** 光照贴图颜色。 */\r\n    lightmapColor: Texture2D;\r\n    /** 光照贴图方向。 */\r\n    lightmapDirection: Texture2D;\r\n\r\n    \r\n}","import { ShaderDefine } from \"../../RenderEngine/RenderShader/ShaderDefine\";\r\n\r\n/**\r\n * 类用来记录精灵数据宏\r\n */\r\nexport class MeshSprite3DShaderDeclaration {\r\n\t/**UV0通道顶点数据宏 */\r\n\tstatic SHADERDEFINE_UV0: ShaderDefine;\r\n\t/**顶点色顶点数据宏 */\r\n\tstatic SHADERDEFINE_COLOR: ShaderDefine;\r\n\t/**UV1通道顶点数据宏 */\r\n\tstatic SHADERDEFINE_UV1: ShaderDefine;\r\n\t/** Tangent 通道顶点数据宏 */\r\n\tstatic SHADERDEFINE_TANGENT: ShaderDefine;\r\n\t/**instance调用宏 */\r\n\tstatic SHADERDEFINE_GPU_INSTANCE: ShaderDefine;\r\n\t\r\n}\r\n","import { LayaGL } from \"../../layagl/LayaGL\";\r\nimport { Matrix4x4 } from \"../../maths/Matrix4x4\";\r\nimport { Vector3 } from \"../../maths/Vector3\";\r\nimport { IClone } from \"../../utils/IClone\";\r\nimport { BoundBox } from \"./BoundBox\";\r\n\r\n/**\r\n * <code>Bounds</code> 类用于创建包围体。\r\n */\r\nexport class Bounds implements IClone {\r\n    /**\r\n     * 合并两个包围盒。\r\n     * @param\tbox1 包围盒1。\r\n     * @param\tbox2 包围盒2。\r\n     * @param\tout 生成的包围盒。\r\n     */\r\n    static merge(box1: Bounds, box2: Bounds, out: Bounds): void {\r\n        Vector3.min(box1.min, box2.min, out.min);\r\n        Vector3.max(box1.max, box2.max, out.max);\r\n        out.min = out.min;\r\n        out.max = out.max;\r\n    }\r\n\r\n    /**\r\n     * 包围盒是否包含点\r\n     * @param box \r\n     * @param point \r\n     * @returns \r\n     */\r\n    static containPoint(box: Bounds, point: Vector3): boolean {\r\n        let max = box.getMax();\r\n        let min = box.getMin();\r\n        if (point.x > max.x || point.x < min.x) return false;\r\n        if (point.y > max.y || point.y < min.y) return false;\r\n        if (point.z > max.z || point.z < min.z) return false;\r\n        return true;\r\n    }\r\n\r\n\r\n    /**@internal */\r\n    static _UPDATE_MIN: number = 0x01;\r\n    /**@internal */\r\n    static _UPDATE_MAX: number = 0x02;\r\n    /**@internal */\r\n    static _UPDATE_CENTER: number = 0x04;\r\n    /**@internal */\r\n    static _UPDATE_EXTENT: number = 0x08;\r\n\r\n    /**@internal\t*/\r\n    _imp: any;\r\n\r\n    get min() {\r\n        return this.getMin();\r\n    }\r\n\r\n    set min(value: Vector3) {\r\n        this.setMin(value);\r\n    }\r\n\r\n    get max() {\r\n        return this.getMax();\r\n    }\r\n\r\n    set max(value: Vector3) {\r\n        this.setMax(value);\r\n    }\r\n\r\n    /**\r\n     * 设置包围盒的最小点。\r\n     * @param value\t包围盒的最小点。\r\n     */\r\n    setMin(value: Vector3): void {\r\n        this._imp.setMin(value);\r\n    }\r\n\r\n    /**\r\n     * 获取包围盒的最小点。\r\n     * @return\t包围盒的最小点。\r\n     */\r\n    getMin(): Vector3 {\r\n        return this._imp.getMin();\r\n    }\r\n\r\n    /**\r\n     * 设置包围盒的最大点。\r\n     * @param value\t包围盒的最大点。\r\n     */\r\n    setMax(value: Vector3): void {\r\n        this._imp.setMax(value);\r\n    }\r\n\r\n    /**\r\n     * 获取包围盒的最大点。\r\n     * @return\t包围盒的最大点。\r\n     */\r\n    getMax(): Vector3 {\r\n        return this._imp.getMax();\r\n    }\r\n\r\n    /**\r\n     * 设置包围盒的中心点。\r\n     * @param value\t包围盒的中心点。\r\n     */\r\n    setCenter(value: Vector3): void {\r\n        this._imp.setCenter(value);\r\n    }\r\n\r\n    /**\r\n     * 获取包围盒的中心点。\r\n     * @return\t包围盒的中心点。\r\n     */\r\n    getCenter(): Vector3 {\r\n        return this._imp.getCenter();\r\n    }\r\n\r\n    /**\r\n     * 设置包围盒的范围。\r\n     * @param value\t包围盒的范围。\r\n     */\r\n    setExtent(value: Vector3): void {\r\n        this._imp.setExtent(value);\r\n    }\r\n\r\n    /**\r\n     * 获取包围盒的范围。\r\n     * @return\t包围盒的范围。\r\n     */\r\n    getExtent(): Vector3 {\r\n        return this._imp.getExtent();\r\n    }\r\n\r\n    /**\r\n     * 创建一个 <code>Bounds</code> 实例。\r\n     * @param\tmin  min 最小坐标\r\n     * @param\tmax  max 最大坐标。\r\n     */\r\n    constructor(min?: Vector3, max?: Vector3) {\r\n        this._imp = LayaGL.renderOBJCreate.createBounds(min, max);\r\n    }\r\n\r\n    protected _getUpdateFlag(type: number): boolean {\r\n        return this._imp._getUpdateFlag(type);\r\n    }\r\n\r\n\r\n    protected _setUpdateFlag(type: number, value: boolean): void {\r\n        this._imp._setUpdateFlag(type, value);\r\n    }\r\n\r\n\r\n    protected _getCenter(min: Vector3, max: Vector3, out: Vector3): void {\r\n        Vector3.add(min, max, out);\r\n        Vector3.scale(out, 0.5, out);\r\n    }\r\n\r\n\r\n    protected _getExtent(min: Vector3, max: Vector3, out: Vector3): void {\r\n        Vector3.subtract(max, min, out);\r\n        Vector3.scale(out, 0.5, out);\r\n    }\r\n\r\n\r\n    protected _getMin(center: Vector3, extent: Vector3, out: Vector3): void {\r\n        Vector3.subtract(center, extent, out);\r\n    }\r\n\r\n\r\n    protected _getMax(center: Vector3, extent: Vector3, out: Vector3): void {\r\n        Vector3.add(center, extent, out);\r\n    }\r\n\r\n    protected _rotateExtents(extents: Vector3, rotation: Matrix4x4, out: Vector3): void {\r\n        var extentsX: number = extents.x;\r\n        var extentsY: number = extents.y;\r\n        var extentsZ: number = extents.z;\r\n        var matE: Float32Array = rotation.elements;\r\n        out.x = Math.abs(matE[0] * extentsX) + Math.abs(matE[4] * extentsY) + Math.abs(matE[8] * extentsZ);\r\n        out.y = Math.abs(matE[1] * extentsX) + Math.abs(matE[5] * extentsY) + Math.abs(matE[9] * extentsZ);\r\n        out.z = Math.abs(matE[2] * extentsX) + Math.abs(matE[6] * extentsY) + Math.abs(matE[10] * extentsZ);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _tranform(matrix: Matrix4x4, out: Bounds): void {\r\n        this._imp._tranform(matrix, out._imp);\r\n    }\r\n\r\n    getCorners(corners: Vector3[]) {\r\n        this._imp.getCorners(corners);\r\n    }\r\n\r\n    /**\r\n     * TODO\r\n     * @param box \r\n     */\r\n    getBoundBox(box: BoundBox): void {\r\n        this._imp._getBoundBox().cloneTo(box);\r\n    }\r\n\r\n    /**\r\n     * @returns -1为不相交 不为0的时候返回值为相交体积\r\n     */\r\n    calculateBoundsintersection(bounds: Bounds): number {\r\n        return this._imp.calculateBoundsintersection(bounds._imp);\r\n    }\r\n\r\n\r\n    /**\r\n     * 克隆。\r\n     * @param\tdestObject 克隆源。\r\n     */\r\n    cloneTo(destObject: any): void {\r\n        this._imp.cloneTo(destObject._imp);\r\n    }\r\n\r\n    /**\r\n     * 克隆。\r\n     * @return\t 克隆副本。\r\n     */\r\n    clone(): any {\r\n        var dest: Bounds = new Bounds(new Vector3(), new Vector3());\r\n        this.cloneTo(dest);\r\n        return dest;\r\n    }\r\n\r\n}\r\n\r\nconst TEMP_VECTOR3_MAX0 = new Vector3();\r\nconst TEMP_VECTOR3_MAX1 = new Vector3();","import { SingletonList } from \"../../../../utils/SingletonList\";\r\nimport { BaseRender } from \"../../../core/render/BaseRender\";\r\nimport { Bounds } from \"../../../math/Bounds\";\r\nimport { IVolumeManager } from \"../IVolumeManager\";\r\nimport { Volume } from \"../Volume\";\r\nimport { ReflectionProbe } from \"./ReflectionProbe\";\r\n\r\n/**\r\n *<code>ReflectionProbeManager</code> 类用于反射探针管理\r\n */\r\nexport class ReflectionProbeManager implements IVolumeManager {\r\n\r\n    /** @internal 反射探针队列 */\r\n    private _reflectionProbes: SingletonList<ReflectionProbe> = new SingletonList<ReflectionProbe>();\r\n    /** @internal 环境探针 */\r\n    private _sceneReflectionProbe: ReflectionProbe;\r\n    /** @internal */\r\n    _needUpdateAllRender: boolean = false;\r\n\r\n    /**\r\n     * 实例化一个反射探针管理类\r\n     */\r\n    constructor() {\r\n        this._sceneReflectionProbe = new ReflectionProbe();\r\n        this._sceneReflectionProbe.boxProjection = false;\r\n        this._sceneReflectionProbe._isScene = true;\r\n    }\r\n\r\n    /**\r\n     * Scene Reflection\r\n     */\r\n    set sceneReflectionProbe(value: ReflectionProbe) {\r\n        this._sceneReflectionProbe = value;\r\n        this._needUpdateAllRender = true;//update Reflection\r\n    }\r\n\r\n    get sceneReflectionProbe(): ReflectionProbe {\r\n        return this._sceneReflectionProbe;\r\n    }\r\n\r\n    /**\r\n     * 更新baseRender的反射探针\r\n     * @param baseRender \r\n     */\r\n    _updateRenderObject(baseRender: BaseRender): void {\r\n        if (this._reflectionProbes.length == 0) {\r\n            baseRender.probReflection = this._sceneReflectionProbe;\r\n            return;\r\n        }\r\n        var elements: ReflectionProbe[] = this._reflectionProbes.elements;\r\n        var maxOverlap: number = 0;\r\n        var mainProbe: ReflectionProbe;\r\n        var renderBounds: Bounds = baseRender.bounds;\r\n        var overlop;\r\n        for (var i: number = 0, n: number = this._reflectionProbes.length; i < n; i++) {\r\n            var renflectProbe = elements[i];\r\n            if (!mainProbe) {\r\n                overlop = renderBounds.calculateBoundsintersection(renflectProbe.bounds);\r\n                if (overlop < maxOverlap) continue;\r\n            } else {\r\n                if (mainProbe.importance > renflectProbe.importance) continue;//重要性判断\r\n                overlop = renderBounds.calculateBoundsintersection(renflectProbe.bounds);\r\n                if (overlop < maxOverlap && mainProbe.importance == renflectProbe.importance) continue;\r\n            }\r\n            mainProbe = renflectProbe;\r\n            maxOverlap = overlop;\r\n        }\r\n        if (!mainProbe && this._sceneReflectionProbe)//如果没有相交 传场景反射球\r\n            mainProbe = this._sceneReflectionProbe;\r\n        baseRender.probReflection = mainProbe;\r\n    }\r\n\r\n    /**\r\n     * 场景中添加反射探针\r\n     * @internal\r\n     * @param reflectionProbe \r\n     */\r\n    add(volume: ReflectionProbe) {\r\n        this._reflectionProbes.add(volume);\r\n        this._needUpdateAllRender = true;\r\n    }\r\n    /**\r\n     * 场景中删除反射探针\r\n     * @internal\r\n     * @param reflectionProbe \r\n     */\r\n    remove(volume: ReflectionProbe) {\r\n        this._reflectionProbes.remove(volume);\r\n        this._needUpdateAllRender = true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * 更新运动物体的反射探针信息\r\n     */\r\n    handleMotionlist(motionObjects: SingletonList<BaseRender>): void {\r\n        var elements: BaseRender[] = motionObjects.elements;\r\n        let render: BaseRender;\r\n        for (var i: number = 0, n: number = motionObjects.length; i < n; i++) {\r\n            render = elements[i];\r\n            if (render._surportReflectionProbe && render._reflectionMode == 1) {\r\n                this._updateRenderObject(elements[i]);\r\n            }\r\n        }\r\n        //this.clearMotionObjects();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * 更新传入所有渲染器反射探针\r\n     * @param 渲染器列表\r\n     */\r\n    reCaculateAllRenderObjects(baseRenders: SingletonList<BaseRender>) {\r\n        var elements = baseRenders.elements;\r\n        let render: BaseRender;\r\n        for (var i: number = 0, n: number = baseRenders.length; i < n; i++) {\r\n            render = elements[i];\r\n            if (render._surportReflectionProbe && render._reflectionMode == 1) {\r\n                this._updateRenderObject(render);\r\n            }\r\n            this._needUpdateAllRender = false;\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * @internal\r\n     * destroy\r\n     */\r\n    destroy() {\r\n        for (let index = 0; index < this._reflectionProbes.length; index++) {\r\n            let probe = this._reflectionProbes.elements[index];\r\n            probe.destroy();\r\n        }\r\n        this._reflectionProbes.length = 0;\r\n        this._sceneReflectionProbe.destroy();\r\n        this._sceneReflectionProbe = null;\r\n    }\r\n}\r\n\r\n\r\n","import { ShaderDefine } from \"../../../RenderEngine/RenderShader/ShaderDefine\";\r\n\r\nexport class Sprite3DRenderDeclaration{\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_GI_LEGACYIBL: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_GI_IBL: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_IBL_RGBD: ShaderDefine;\r\n    /**盒子反射宏 */\r\n\tstatic SHADERDEFINE_SPECCUBE_BOX_PROJECTION: ShaderDefine;\r\n\r\n\t/// Volumetric GI\r\n\tstatic SHADERDEFINE_VOLUMETRICGI: ShaderDefine;\r\n\r\n}","import { SingletonList } from \"../../../../utils/SingletonList\";\r\nimport { BaseRender } from \"../../../core/render/BaseRender\";\r\nimport { Sprite3DRenderDeclaration } from \"../../../core/render/Sprite3DRenderDeclaration\";\r\nimport { IVolumeManager } from \"../IVolumeManager\";\r\nimport { VolumetricGI } from \"./VolumetricGI\";\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class VolumetricGIManager implements IVolumeManager {\r\n    _needUpdateAllRender: boolean;\r\n\r\n    private _GIVolumes: SingletonList<VolumetricGI> = new SingletonList<VolumetricGI>();\r\n\r\n    constructor() {\r\n        this._needUpdateAllRender = true;\r\n    }\r\n\r\n    removeVolumetricGI(renderer: BaseRender) {\r\n        let shaderData = renderer._shaderValues;\r\n        shaderData.removeDefine(Sprite3DRenderDeclaration.SHADERDEFINE_VOLUMETRICGI);\r\n    }\r\n\r\n    add(volume: VolumetricGI): void {\r\n        this._GIVolumes.add(volume);\r\n        this._needUpdateAllRender = true;\r\n    }\r\n\r\n    remove(volume: VolumetricGI): void {\r\n        this._GIVolumes.remove(volume);\r\n        this._needUpdateAllRender = true;\r\n    }\r\n\r\n    _updateRenderObject(renderer: BaseRender): void {\r\n        if (this._GIVolumes.length == 0) {\r\n            this.removeVolumetricGI(renderer);\r\n            return;\r\n        }\r\n\r\n        let renderBounds = renderer.bounds;\r\n        let maxOverlap = 0, overlap = 0;\r\n        let currentVolume: VolumetricGI;\r\n\r\n        let volumes = this._GIVolumes.elements;\r\n        for (let index = 0; index < this._GIVolumes.length; index++) {\r\n            let volume = volumes[index];\r\n            if (!currentVolume) {\r\n                overlap = renderBounds.calculateBoundsintersection(volume.bounds);\r\n                if (overlap < maxOverlap)\r\n                    continue;\r\n            }\r\n            else {\r\n                if (currentVolume.importance > volume.importance)\r\n                    continue;\r\n                overlap = renderBounds.calculateBoundsintersection(volume.bounds);\r\n                if (overlap < maxOverlap && currentVolume.importance == volume.importance)\r\n                    continue;\r\n            }\r\n            currentVolume = volume;\r\n            maxOverlap = overlap;\r\n        }\r\n\r\n        if (currentVolume) {\r\n            currentVolume.applyVolumetricGI(renderer._shaderValues);\r\n        }\r\n        else {\r\n            this.removeVolumetricGI(renderer);\r\n        }\r\n\r\n    }\r\n    handleMotionlist(motionObjects: SingletonList<BaseRender>): void {\r\n        for (let index = 0; index < motionObjects.length; index++) {\r\n            let render = motionObjects.elements[index];\r\n            // todo 判断render 是否使用 VolumetricGI\r\n            if (true) {\r\n                this._updateRenderObject(render);\r\n            }\r\n        }\r\n        this._needUpdateAllRender = false;\r\n    }\r\n\r\n    reCaculateAllRenderObjects(renders: SingletonList<BaseRender>): void {\r\n        for (let index = 0; index < renders.length; index++) {\r\n            let render = renders.elements[index];\r\n            // todo 判断是否使用 VolumetricGI \r\n            if (true) {\r\n                this._updateRenderObject(render);\r\n            }\r\n        }\r\n        this._needUpdateAllRender = false;\r\n    }\r\n\r\n    destroy(): void {\r\n        // throw new Error(\"Method not implemented.\");\r\n    }\r\n}","import { SingletonList } from \"../../../utils/SingletonList\";\r\nimport { BaseRender } from \"../../core/render/BaseRender\";\r\nimport { Bounds } from \"../../math/Bounds\";\r\nimport { IVolumeManager } from \"./IVolumeManager\";\r\nimport { ReflectionProbeManager } from \"./reflectionProbe/ReflectionProbeManager\";\r\nimport { Volume} from \"./Volume\";\r\nimport { VolumetricGIManager } from \"./VolumetricGI/VolumetricGIManager\";\r\n\r\n\r\n\r\n\r\n/**\r\n * <code>VolumeManager</code> 类用于管理体积组件\r\n */\r\nexport class VolumeManager implements IVolumeManager {\r\n    static ReflectionProbeVolumeType: number = 1;\r\n\r\n    static VolumetricGIType: number = 2;\r\n\r\n    //注册特殊的Volume管理类\r\n    //static regVolumeManager: { [key: number]: any } = {};\r\n    /** @internal 需要跟新反射探针的渲染队列 */\r\n    private _motionObjects: SingletonList<BaseRender> = new SingletonList<BaseRender>();\r\n    /** @internal volume list */\r\n    private _volumeList: SingletonList<Volume> = new SingletonList<Volume>();\r\n\r\n    /** @internal */\r\n    _needUpdateAllRender: boolean = false;\r\n    /** 有些Volume需要特殊的管理能力 */\r\n    private _regVolumeManager: { [key: number]: IVolumeManager } = {};\r\n\r\n    /**@internal 反射探针管理*/\r\n    _reflectionProbeManager: ReflectionProbeManager;\r\n\r\n    _volumetricGIManager: VolumetricGIManager;\r\n\r\n    constructor() {\r\n        this._reflectionProbeManager = new ReflectionProbeManager();\r\n        this._regVolumeManager[VolumeManager.ReflectionProbeVolumeType] = this._reflectionProbeManager;\r\n\r\n        this._volumetricGIManager = new VolumetricGIManager();\r\n        this._regVolumeManager[VolumeManager.VolumetricGIType] = this._volumetricGIManager;\r\n\r\n    }\r\n\r\n    /**\r\n     * get reflection manager\r\n     */\r\n    get reflectionProbeManager(): ReflectionProbeManager {\r\n        return this._reflectionProbeManager;\r\n    }\r\n\r\n    get volumetricGIManager(): VolumetricGIManager {\r\n        return this._volumetricGIManager;\r\n    }\r\n\r\n    /**\r\n     * add volume\r\n     * @param volume \r\n     */\r\n    add(volume: Volume) {\r\n        let reManager = this._regVolumeManager[volume.type];\r\n        if (reManager) {\r\n            reManager.add(volume);\r\n        } else {\r\n            this._volumeList.add(volume);\r\n            this._needUpdateAllRender = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * remove volume\r\n     * @param volume \r\n     */\r\n    remove(volume: Volume) {\r\n        let reManager = this._regVolumeManager[volume.type];\r\n        if (reManager) {\r\n            reManager.remove(volume);\r\n        } else {\r\n            this._volumeList.remove(volume);\r\n            this._needUpdateAllRender = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * add motion obj to handle list\r\n     * @param renderObj \r\n     */\r\n    addMotionObject(renderObj: BaseRender) {\r\n        this._motionObjects.add(renderObj);\r\n    }\r\n\r\n    removeMotionObject(renderObj: BaseRender) {\r\n        this._motionObjects.remove(renderObj);\r\n    }\r\n\r\n    /**\r\n     * update one RenderNode Volume info\r\n     * @param baseRender \r\n     */\r\n    _updateRenderObject(baseRender: BaseRender): void {\r\n        let elements: Volume[] = this._volumeList.elements;\r\n\r\n        let renderBounds: Bounds = baseRender.bounds;\r\n        let center = renderBounds.getCenter();\r\n        let mainVolume: Volume;\r\n        for (var i: number = 0, n: number = this._volumeList.length; i < n; i++) {\r\n            let volume = elements[i];\r\n            let bounds = volume.bounds;\r\n            if (Bounds.containPoint(bounds, center)) {\r\n                mainVolume = volume;\r\n                continue;\r\n            }\r\n        }\r\n        baseRender.volume = mainVolume;\r\n    }\r\n    /**\r\n     * @internal\r\n     * handle motion list\r\n     */\r\n    handleMotionlist(): void {\r\n        var elements: BaseRender[] = this._motionObjects.elements;\r\n        for (var i: number = 0, n: number = this._motionObjects.length; i < n; i++) {\r\n            this._updateRenderObject(elements[i]);\r\n        }\r\n        //miner特殊管理TODO 更新所有动态物体\r\n        this.reflectionProbeManager.handleMotionlist(this._motionObjects);\r\n\r\n        this.volumetricGIManager.handleMotionlist(this._motionObjects);\r\n\r\n        this.clearMotionObjects();\r\n    }\r\n\r\n    /**\r\n     * 重新更新所有Volume的信息\r\n     */\r\n    reCaculateAllRenderObjects(baseRenders: SingletonList<BaseRender>) {\r\n        if (this._needUpdateAllRender) {\r\n            var elements = baseRenders.elements;\r\n            for (var i: number = 0, n: number = baseRenders.length; i < n; i++) {\r\n                this._updateRenderObject(elements[i]);\r\n            }\r\n            this._needUpdateAllRender = false;\r\n        } else {\r\n            this.handleMotionlist();\r\n        }\r\n\r\n        //miner特殊管理TODO 更新所有渲染物体\r\n        if (this.reflectionProbeManager._needUpdateAllRender) {\r\n            this.reflectionProbeManager.reCaculateAllRenderObjects(baseRenders);\r\n        } else {\r\n            this.reflectionProbeManager.handleMotionlist(this._motionObjects);\r\n        }\r\n\r\n        if (this.volumetricGIManager._needUpdateAllRender) {\r\n            this.volumetricGIManager.reCaculateAllRenderObjects(baseRenders);\r\n        }\r\n        else {\r\n            this.volumetricGIManager.handleMotionlist(this._motionObjects);\r\n        }\r\n\r\n    }\r\n\r\n    needreCaculateAllRenderObjects(): boolean {\r\n        return this._needUpdateAllRender || this.reflectionProbeManager._needUpdateAllRender || this.volumetricGIManager._needUpdateAllRender;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * 清理变动队列\r\n     */\r\n    clearMotionObjects() {\r\n        this._motionObjects.length = 0;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * destroy\r\n     */\r\n    destroy() {\r\n\r\n    }\r\n}","\r\nimport { Color } from \"../../maths/Color\";\r\nimport { Vector3 } from \"../../maths/Vector3\";\r\nimport { TextureCubeFace } from \"../../resource/TextureCube\";\r\n\r\n/**\r\n * 二阶球谐函数。\r\n */\r\nexport class SphericalHarmonicsL2 {\r\n    /** @internal */\r\n    static _default: SphericalHarmonicsL2 = new SphericalHarmonicsL2();\r\n\r\n    /** @internal */\r\n    private _coefficients: Float32Array = new Float32Array(27);\r\n\r\n    /**\r\n     * 获取颜色通道的系数。\r\n     * @param i 通道索引，范围0到2。\r\n     * @param j 系数索引，范围0到8。\r\n     */\r\n    getCoefficient(i: number, j: number): number {\r\n        return this._coefficients[i * 9 + j];\r\n    }\r\n\r\n    /**\r\n     * 设置颜色通道的系数。\r\n     * @param i 通道索引，范围0到2。\r\n     * @param j 系数索引，范围0到8。\r\n     */\r\n    setCoefficient(i: number, j: number, coefficient: number): void {\r\n        this._coefficients[i * 9 + j] = coefficient;\r\n    }\r\n\r\n    /**\r\n     * 设置颜色通道的系数。\r\n     * @param i 通道索引，范围0到2。\r\n     * @param coefficient0 系数0\r\n     * @param coefficient1 系数1\r\n     * @param coefficient2 系数2\r\n     * @param coefficient3 系数3\r\n     * @param coefficient4 系数4\r\n     * @param coefficient5 系数5\r\n     * @param coefficient6 系数6\r\n     * @param coefficient7 系数7\r\n     * @param coefficient8 系数8\r\n     */\r\n    setCoefficients(i: number, coefficient0: number, coefficient1: number, coefficient2: number, coefficient3: number, coefficient4: number, coefficient5: number, coefficient6: number, coefficient7: number, coefficient8: number): void {\r\n        var offset: number = i * 9;\r\n        this._coefficients[offset] = coefficient0;\r\n        this._coefficients[++offset] = coefficient1;\r\n        this._coefficients[++offset] = coefficient2;\r\n        this._coefficients[++offset] = coefficient3;\r\n        this._coefficients[++offset] = coefficient4;\r\n        this._coefficients[++offset] = coefficient5;\r\n        this._coefficients[++offset] = coefficient6;\r\n        this._coefficients[++offset] = coefficient7;\r\n        this._coefficients[++offset] = coefficient8;\r\n    }\r\n\r\n    /**\r\n     * 克隆\r\n     * @param dest \r\n     */\r\n    cloneTo(dest: SphericalHarmonicsL2): void {\r\n        if (this === dest)\r\n            return;\r\n        var coes: Float32Array = this._coefficients;\r\n        var destCoes: Float32Array = dest._coefficients;\r\n        for (var i: number = 0; i < 27; i++)\r\n            destCoes[i] = coes[i];\r\n    }\r\n}\r\n\r\n/**\r\n * @internal\r\n * 生成二阶球谐系数\r\n */\r\nexport class SphericalHarmonicsL2Generater {\r\n\r\n    private static _tempSHR: Float32Array = new Float32Array(9);\r\n    private static _tempSHG: Float32Array = new Float32Array(9);\r\n    private static _tempSHB: Float32Array = new Float32Array(9);\r\n\r\n    /**\r\n     * k0: 1/2  * sqrt(1/Pi)\r\n     * k1: 1/3  * sqrt(3/Pi)\r\n     * k2: 1/8  * sqrt(15/Pi)\r\n     * k3: 1/16 * sqrt(5/Pi)\r\n     * k4: 1/16 * sqrt(15/Pi)\r\n     * [\r\n     *  k0,\r\n     * -k1, k1, k1\r\n     * k2, -k2, k3, -k2, k4\r\n     * ]\r\n     */\r\n    private static readonly k = [\r\n        0.28209479177387814347,\r\n        -0.32573500793527994772, 0.32573500793527994772, -0.32573500793527994772,\r\n        0.27313710764801976764, -0.27313710764801976764, 0.07884789131313000151, -0.27313710764801976764, 0.13656855382400988382\r\n    ]\r\n\r\n    /** @internal */\r\n    static readonly GradientSimulateSize: number = 3;\r\n    /** @internal */\r\n    static readonly SH_Count: number = 9;\r\n\r\n    private static _tempSkyPixels: Float32Array = new Float32Array(SphericalHarmonicsL2Generater.GradientSimulateSize * SphericalHarmonicsL2Generater.GradientSimulateSize * 3);\r\n    private static _tempEquatorPixels: Float32Array = new Float32Array(SphericalHarmonicsL2Generater.GradientSimulateSize * SphericalHarmonicsL2Generater.GradientSimulateSize * 3);\r\n    private static _tempGroundPixels: Float32Array = new Float32Array(SphericalHarmonicsL2Generater.GradientSimulateSize * SphericalHarmonicsL2Generater.GradientSimulateSize * 3);\r\n    /**\r\n     * @internal\r\n     * uv 坐标对应 纹素 球面面积\r\n     * @param u \r\n     * @param v \r\n     */\r\n    static surfaceArea(u: number, v: number) {\r\n        return Math.atan2(u * v, Math.sqrt(u * u + v * v + 1.0));\r\n    }\r\n\r\n    /**\r\n     * uv 与 法线(方向) 对应关系\r\n     * @param u \r\n     * @param v \r\n     * @param face \r\n     * @param out_dir \r\n     */\r\n    static uv2Dir(u: number, v: number, face: TextureCubeFace, out_dir: Vector3) {\r\n        switch (face) {\r\n            case TextureCubeFace.PositiveX:\r\n                out_dir.x = 1.0;\r\n                out_dir.y = -v;\r\n                out_dir.z = -u;\r\n                break;\r\n            case TextureCubeFace.NegativeX:\r\n                out_dir.x = -1.0;\r\n                out_dir.y = -v;\r\n                out_dir.z = u;\r\n                break;\r\n            case TextureCubeFace.PositiveY:\r\n                out_dir.x = u;\r\n                out_dir.y = 1.0;\r\n                out_dir.z = v;\r\n                break;\r\n            case TextureCubeFace.NegativeY:\r\n                out_dir.x = u;\r\n                out_dir.y = -1.0;\r\n                out_dir.z = -v;\r\n                break;\r\n            case TextureCubeFace.PositiveZ:\r\n                out_dir.x = u;\r\n                out_dir.y = -v;\r\n                out_dir.z = 1.0;\r\n                break;\r\n            case TextureCubeFace.NegativeZ:\r\n                out_dir.x = -u;\r\n                out_dir.y = -v;\r\n                out_dir.z = -1.0;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * 计算 球谐系数\r\n     * @param i \r\n     * @param x \r\n     * @param y \r\n     * @param z \r\n     * @returns \r\n     */\r\n    static sh_eval_9(i: number, x: number, y: number, z: number) {\r\n        const sqrt = Math.sqrt;\r\n        const M_PI = Math.PI;\r\n        switch (i) {\r\n            case 0:\r\n                return 0.5 * sqrt(1.0 / M_PI);\r\n            case 1:\r\n                return -y * 0.5 * sqrt(3.0 / M_PI);\r\n            case 2:\r\n                return z * 0.5 * sqrt(3.0 / M_PI);\r\n            case 3:\r\n                return -x * 0.5 * sqrt(3.0 / M_PI);\r\n            case 4:\r\n                return x * y * 0.5 * sqrt(15.0 / M_PI);\r\n            case 5:\r\n                return -y * z * 0.5 * sqrt(15.0 / M_PI);\r\n            case 6:\r\n                return (3.0 * z * z - 1.0) * 0.25 * sqrt(5.0 / M_PI);\r\n            case 7:\r\n                return -x * z * 0.5 * sqrt(15.0 / M_PI);\r\n            case 8:\r\n                return (x * x - y * y) * 0.25 * sqrt(15.0 / M_PI);\r\n            default:\r\n                return 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * 通过 cubemap 像素值 计算环境光照系数\r\n     * @param cubemapPixels cubemap 像素数据\r\n     * @param pixelComponentSize 每像素数据量 (RGB 3, RGBA 4)\r\n     * @param cubemapSize cubemap 大小\r\n     * @param isGamma 像素数据颜色空间\r\n     */\r\n    static CalCubemapSH(cubemapPixels: Float32Array[], pixelComponentSize: number, cubemapSize: number, isGamma: boolean = true): SphericalHarmonicsL2 {\r\n\r\n        let width = cubemapSize;\r\n        let height = cubemapSize;\r\n\r\n        let shr = this._tempSHR.fill(0);\r\n        let shg = this._tempSHG.fill(0);\r\n        let shb = this._tempSHB.fill(0);\r\n\r\n        let dir = new Vector3();\r\n        for (let face = 0; face < 6; face++) {\r\n\r\n            let facePixels = cubemapPixels[face];\r\n\r\n            for (let y = 0; y < height; y++) {\r\n                for (let x = 0; x < width; x++) {\r\n\r\n                    let px = x + 0.5;\r\n                    let py = y + 0.5;\r\n\r\n                    let u = 2.0 * (px / width) - 1.0;\r\n                    let v = 2.0 * (py / height) - 1.0;\r\n\r\n                    let dx = 1.0 / width;\r\n                    let dy = 1.0 / height;\r\n                    // 4个点 uv 分布\r\n                    let x0 = u - dx;\r\n                    let y0 = v - dy;\r\n                    let x1 = u + dx;\r\n                    let y1 = v + dy;\r\n\r\n                    // 当前纹素立体角\r\n                    let da = this.surfaceArea(x0, y0) - this.surfaceArea(x0, y1) - this.surfaceArea(x1, y0) + this.surfaceArea(x1, y1);\r\n\r\n                    this.uv2Dir(u, v, face, dir);\r\n                    Vector3.normalize(dir, dir);\r\n\r\n                    let pixelOffset = (x + y * width) * pixelComponentSize;\r\n                    let r = facePixels[pixelOffset];\r\n                    let g = facePixels[pixelOffset + 1];\r\n                    let b = facePixels[pixelOffset + 2];\r\n                    if (isGamma) {\r\n                        r = Color.gammaToLinearSpace(r);\r\n                        g = Color.gammaToLinearSpace(g);\r\n                        b = Color.gammaToLinearSpace(b);\r\n                    }\r\n\r\n                    for (let s = 0; s < this.SH_Count; s++) {\r\n                        let sh_val = this.sh_eval_9(s, dir.x, dir.y, dir.z);\r\n                        shr[s] += r * sh_val * da;\r\n                        shg[s] += g * sh_val * da;\r\n                        shb[s] += b * sh_val * da;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        let sh = new SphericalHarmonicsL2();\r\n\r\n        for (let index = 0; index < this.SH_Count; index++) {\r\n            let scale = this.k[index];\r\n\r\n            let r = shr[index];\r\n            sh.setCoefficient(0, index, r * scale);\r\n\r\n            let g = shg[index];\r\n            sh.setCoefficient(1, index, g * scale);\r\n\r\n            let b = shb[index];\r\n            sh.setCoefficient(2, index, b * scale);\r\n        }\r\n\r\n        return sh;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * 通过 天空颜色, 地平线颜色, 地面颜色计算环境光照系数\r\n     * @param skyColor \r\n     * @param equatorColor \r\n     * @param groundColor \r\n     * @param isGamma 颜色空间\r\n     */\r\n    static CalGradientSH(skyColor: Vector3, equatorColor: Vector3, groundColor: Vector3, isGamma: boolean = true): SphericalHarmonicsL2 {\r\n\r\n        console.time(\"Gradient SH\");\r\n\r\n        let skyPixels = this._tempSkyPixels;\r\n        let equatorPixels = this._tempEquatorPixels;\r\n        let groundPixels = this._tempGroundPixels;\r\n\r\n        const fillPixelBuffer = (float32: Float32Array, color: Vector3, isGamma: boolean) => {\r\n            let fillColor = new Color(color.x, color.y, color.z, 1.0);\r\n            if (isGamma) {\r\n                fillColor.toLinear(fillColor);\r\n            }\r\n            let r = Math.min(fillColor.r, 1.0);\r\n            let g = Math.min(fillColor.g, 1.0);\r\n            let b = Math.min(fillColor.b, 1.0);\r\n            for (let index = 0; index < float32.length; index += 3) {\r\n                float32[index] = r;\r\n                float32[index + 1] = g;\r\n                float32[index + 2] = b;\r\n            }\r\n        }\r\n\r\n        fillPixelBuffer(skyPixels, skyColor, isGamma);\r\n        fillPixelBuffer(equatorPixels, equatorColor, isGamma);\r\n        fillPixelBuffer(groundPixels, groundColor, isGamma);\r\n\r\n        let gradientPixles = [];\r\n        gradientPixles[TextureCubeFace.PositiveY] = skyPixels;\r\n        gradientPixles[TextureCubeFace.NegativeY] = groundPixels;\r\n        gradientPixles[TextureCubeFace.PositiveX] = equatorPixels;\r\n        gradientPixles[TextureCubeFace.NegativeX] = equatorPixels;\r\n        gradientPixles[TextureCubeFace.PositiveZ] = equatorPixels;\r\n        gradientPixles[TextureCubeFace.NegativeZ] = equatorPixels;\r\n\r\n        let sh = SphericalHarmonicsL2Generater.CalCubemapSH(gradientPixles, 3, this.GradientSimulateSize, false);\r\n\r\n        console.timeEnd(\"Gradient SH\");\r\n        return sh;\r\n    }\r\n}","import { BaseRender } from \"./BaseRender\"\r\nimport { RenderContext3D } from \"./RenderContext3D\"\r\nimport { Camera } from \"../Camera\"\r\nimport { GeometryElement } from \"../GeometryElement\"\r\nimport { Transform3D } from \"../Transform3D\"\r\nimport { Material } from \"../material/Material\"\r\nimport { IRenderElement } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/IRenderElement\"\r\nimport { Shader3D } from \"../../../RenderEngine/RenderShader/Shader3D\"\r\nimport { DefineDatas } from \"../../../RenderEngine/RenderShader/DefineDatas\"\r\nimport { LayaGL } from \"../../../layagl/LayaGL\"\r\nimport { IRenderContext3D } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/IRenderContext3D\"\r\nimport { ILaya3D } from \"../../../../ILaya3D\"\r\nimport { ShaderInstance } from \"../../../RenderEngine/RenderShader/ShaderInstance\"\r\nimport { ShaderPass } from \"../../../RenderEngine/RenderShader/ShaderPass\"\r\nimport { SubShader } from \"../../../RenderEngine/RenderShader/SubShader\"\r\n\r\n/**\r\n * <code>RenderElement</code> 类用于实现渲染元素。\r\n */\r\nexport class RenderElement {\r\n    /** @internal */\r\n    static RENDERTYPE_NORMAL: number = 0;\r\n    /** @internal */\r\n    static RENDERTYPE_STATICBATCH: number = 1;\r\n    /** @internal */\r\n    static RENDERTYPE_INSTANCEBATCH: number = 2;\r\n    /** @internal */\r\n    static RENDERTYPE_VERTEXBATCH: number = 3;\r\n\r\n    /** @internal */\r\n    static _compileDefine: DefineDatas = new DefineDatas();\r\n\r\n    /**\r\n     * 可提交底层的渲染节点\r\n     */\r\n    _renderElementOBJ: IRenderElement;\r\n    /** @internal */\r\n    _geometry: GeometryElement;\r\n    /**@internal */\r\n    _canBatch: boolean = false;\r\n    /** @internal */\r\n    _material: Material;//可能为空\r\n    /** @internal */\r\n    _baseRender: BaseRender;\r\n    /**@internal */\r\n    _subShader: SubShader;\r\n    /**@internal */\r\n    _subShaderIndex: number = 0;\r\n    _batchElement: RenderElement;\r\n    _transform: Transform3D;\r\n\r\n    /** @internal */\r\n    set transform(value: Transform3D) {\r\n        this._transform = value;\r\n        this._renderElementOBJ._transform = value;\r\n    }\r\n\r\n    /**@internal */\r\n    get transform(): Transform3D {\r\n        return this._renderElementOBJ._transform;\r\n    }\r\n\r\n    /**@internal */\r\n    set material(value: Material) {\r\n        // todo debug 临时\r\n        if (value) {\r\n            this._material = value;\r\n            this._renderElementOBJ._materialShaderData = value.shaderData;\r\n        }\r\n\r\n    }\r\n\r\n    /**@internal */\r\n    get material(): Material {\r\n        return this._material;\r\n    }\r\n\r\n    /**@internal */\r\n    set renderSubShader(value: SubShader) {\r\n        this._subShader = value;\r\n    }\r\n\r\n    /**@internal */\r\n    get renderSubShader(): SubShader {\r\n        return this._subShader;\r\n    }\r\n    /**@internal */\r\n    set render(value: BaseRender) {\r\n        this._baseRender = value;\r\n        this._renderElementOBJ._renderShaderData = value._shaderValues;\r\n    }\r\n\r\n    get render(): BaseRender {\r\n        return this._baseRender;\r\n    }\r\n\r\n\r\n\r\n    /** @internal */\r\n    staticBatch: GeometryElement;\r\n    /** @internal */\r\n    renderType: number = RenderElement.RENDERTYPE_NORMAL;\r\n    /**\r\n     * 创建一个 <code>RenderElement</code> 实例。\r\n     */\r\n    constructor() {\r\n        this._createRenderElementOBJ();\r\n    }\r\n\r\n    protected _createRenderElementOBJ() {\r\n        this._renderElementOBJ = LayaGL.renderOBJCreate.createRenderElement();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    getInvertFront(): boolean {\r\n        return this.transform ? this.transform._isFrontFaceInvert : false;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    setTransform(transform: Transform3D): void {\r\n        this.transform = transform;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    setGeometry(geometry: GeometryElement): void {\r\n        this._geometry = geometry;\r\n        this._renderElementOBJ._geometry = geometry._geometryElementOBj;\r\n    }\r\n\r\n    /**\r\n     * 编译shader\r\n     * @param context \r\n     */\r\n    compileShader(context: IRenderContext3D) {\r\n        var passes: ShaderPass[] = this._subShader._passes;\r\n        this._renderElementOBJ._clearShaderInstance();\r\n        for (var j: number = 0, m: number = passes.length; j < m; j++) {\r\n            var pass: ShaderPass = passes[j];\r\n            //NOTE:this will cause maybe a shader not render but do prepare before，but the developer can avoide this manual,for example shaderCaster=false.\r\n            if (pass._pipelineMode !== context.pipelineMode)\r\n                continue;\r\n\r\n            var comDef: DefineDatas = RenderElement._compileDefine;\r\n\r\n            // context.configShaderData._defineDatas.cloneTo(comDef);\r\n\r\n            if (context.sceneShaderData) {\r\n                context.sceneShaderData._defineDatas.cloneTo(comDef);\r\n            } else {\r\n                Shader3D._configDefineValues.cloneTo(comDef);\r\n            }\r\n\r\n            comDef.addDefineDatas(context.configShaderData._defineDatas);\r\n\r\n            context.cameraShaderData && comDef.addDefineDatas(context.cameraShaderData._defineDatas);\r\n            this.render && comDef.addDefineDatas(this.render._shaderValues._defineDatas);\r\n\r\n            comDef.addDefineDatas(this._renderElementOBJ._materialShaderData._defineDatas);\r\n            var shaderIns: ShaderInstance = pass.withCompile(comDef);\r\n            this._renderElementOBJ._addShaderInstance(shaderIns);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 切换Shader\r\n     * @param customShader \r\n     * @param replacementTag \r\n     * @param subshaderIndex \r\n     * @returns \r\n     */\r\n    _convertSubShader(customShader: Shader3D, replacementTag: string, subshaderIndex: number = 0) {\r\n        var subShader: SubShader = this.material._shader.getSubShaderAt(this._subShaderIndex);//TODO:\r\n        this.renderSubShader = null;\r\n        if (customShader) {\r\n            if (replacementTag) {\r\n                var oriTag: string = subShader.getFlag(replacementTag);\r\n                if (oriTag) {\r\n                    var customSubShaders: SubShader[] = customShader._subShaders;\r\n                    for (var k: number = 0, p: number = customSubShaders.length; k < p; k++) {\r\n                        var customSubShader: SubShader = customSubShaders[k];\r\n                        if (oriTag === customSubShader.getFlag(replacementTag)) {\r\n                            this.renderSubShader = customSubShader;\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (!this.renderSubShader)\r\n                        return;\r\n                } else {\r\n                    return;\r\n                }\r\n            } else {\r\n                this.renderSubShader = customShader.getSubShaderAt(subshaderIndex);//TODO:\r\n            }\r\n        } else {\r\n            this.renderSubShader = subShader;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _update(scene: any, context: RenderContext3D, customShader: Shader3D, replacementTag: string, subshaderIndex: number = 0): void {\r\n        if (this.material) {//材质可能为空\r\n            this._convertSubShader(customShader, replacementTag, subshaderIndex);\r\n            if (!this.renderSubShader)\r\n                return;\r\n            var renderQueue = scene._getRenderQueue(this.material.renderQueue);\r\n            if (renderQueue._isTransparent)\r\n                renderQueue.addRenderElement(this);\r\n            else\r\n                renderQueue.addRenderElement(this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * pre update data\r\n     * @param context \r\n     */\r\n    _renderUpdatePre(context: RenderContext3D) {\r\n\r\n        var sceneMark: number = ILaya3D.Scene3D._updateMark;\r\n        var transform: Transform3D = this.transform;\r\n        context.renderElement = this;\r\n        //model local\r\n        var modelDataRender: boolean = (!!this._baseRender) ? (sceneMark !== this._baseRender._sceneUpdateMark || this.renderType !== this._baseRender._updateRenderType) : false;\r\n        if (modelDataRender) {\r\n            this._baseRender._renderUpdate(context, transform);\r\n            this._baseRender._sceneUpdateMark = sceneMark;\r\n        }\r\n        //camera\r\n        var updateMark: number = Camera._updateMark;\r\n        var updateRender: boolean = (!!this._baseRender) ? (updateMark !== this._baseRender._updateMark || this.renderType !== this._baseRender._updateRenderType) : false;\r\n        if (updateRender) {//此处处理更新为裁剪和合并后的，可避免浪费\r\n            this._baseRender._renderUpdateWithCamera(context, transform);\r\n            this._baseRender._updateMark = updateMark;\r\n            this._baseRender._updateRenderType = this.renderType;\r\n        }\r\n\r\n        const subUbo = (!!this._baseRender) ? this._baseRender._subUniformBufferData : false;\r\n        if (subUbo) {\r\n            subUbo._needUpdate && BaseRender._transLargeUbO.updateSubData(subUbo);\r\n        }\r\n        //context.shader = this._renderElementOBJ._subShader;\r\n        this._renderElementOBJ._isRender = this._geometry._prepareRender(context);\r\n        this._geometry._updateRenderParams(context);\r\n        this.compileShader(context._contextOBJ);\r\n        this._renderElementOBJ._invertFront = this.getInvertFront();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _render(context: IRenderContext3D): void {\r\n        this._renderElementOBJ._render(context);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    destroy(): void {\r\n        this._renderElementOBJ._destroy();\r\n        this._renderElementOBJ = null;\r\n        this._geometry = null;\r\n        this._baseRender = null;\r\n        this._material = null\r\n        this._baseRender = null;\r\n        this._subShader = null;\r\n    }\r\n}\r\n\r\n","import { RenderContext3D } from \"./render/RenderContext3D\"\r\nimport { IRenderGeometryElement } from \"../../RenderEngine/RenderInterface/RenderPipelineInterface/IRenderGeometryElement\";\r\nimport { MeshTopology } from \"../../RenderEngine/RenderEnum/RenderPologyMode\";\r\nimport { IndexFormat } from \"../../RenderEngine/RenderEnum/IndexFormat\";\r\nimport { LayaGL } from \"../../layagl/LayaGL\";\r\nimport { DrawType } from \"../../RenderEngine/RenderEnum/DrawType\";\r\nimport { BufferState } from \"../../webgl/utils/BufferState\";\r\n\r\n/**\r\n * <code>GeometryElement</code> 类用于实现几何体元素,该类为抽象类。\r\n */\r\nexport class GeometryElement {\r\n\t/** @internal */\r\n\tprivate static _uniqueIDCounter: number = 0;\r\n\tprotected _owner: any;\r\n\t/**@internal */\r\n\tprotected static _typeCounter: number = 0;\r\n\t/**@internal */\r\n\tprotected _destroyed: boolean;\r\n\t_geometryElementOBj: IRenderGeometryElement;\r\n\t/** @internal */\r\n\t_id: number;\r\n\t/**\r\n\t * VAO OBJ\r\n\t */\r\n\tset bufferState(value: BufferState) {\r\n\t\tthis._geometryElementOBj.bufferState = value;\r\n\t}\r\n\r\n\tget bufferState(): BufferState {\r\n\t\treturn this._geometryElementOBj.bufferState;\r\n\t}\r\n\r\n\t/**\r\n\t * mesh topology type\r\n\t */\r\n\tset mode(value: MeshTopology) {\r\n\t\tthis._geometryElementOBj.mode = value;\r\n\t}\r\n\r\n\tget mode(): MeshTopology {\r\n\t\treturn this._geometryElementOBj.mode;\r\n\t}\r\n\r\n\t/**\r\n\t * draw Type\r\n\t */\r\n\tset drawType(value: number) {\r\n\t\tthis._geometryElementOBj.drawType = value;\r\n\t}\r\n\r\n\tget drawType(): number {\r\n\t\treturn this._geometryElementOBj.drawType;\r\n\t}\r\n\r\n\tsetDrawArrayParams(first: number, count: number): void {\r\n\t\tthis._geometryElementOBj.setDrawArrayParams(first, count);\r\n\r\n\t}\r\n\r\n\tsetDrawElemenParams(count: number, offset: number): void {\r\n\t\tthis._geometryElementOBj.setDrawElemenParams(count, offset);\r\n\t}\r\n\r\n\tset instanceCount(value: number) {\r\n\t\tthis._geometryElementOBj.instanceCount = value;\r\n\t}\r\n\r\n\tget instanceCount(): number {\r\n\t\treturn this._geometryElementOBj.instanceCount;\r\n\t}\r\n\r\n\tset indexFormat(value: IndexFormat) {\r\n\t\tthis._geometryElementOBj.indexFormat = value;\r\n\t}\r\n\r\n\tget indexFormat(): IndexFormat {\r\n\t\treturn this._geometryElementOBj.indexFormat;\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * 获取是否销毁。\r\n\t * @return 是否销毁。\r\n\t */\r\n\tget destroyed(): boolean {\r\n\t\treturn this._destroyed;\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>GeometryElement</code> 实例。\r\n\t */\r\n\tconstructor(mode: MeshTopology, drawType: DrawType) {\r\n\t\tthis._destroyed = false;\r\n\t\tthis._geometryElementOBj = LayaGL.renderOBJCreate.createRenderGeometry(mode, drawType);\r\n\t\tthis._id = ++GeometryElement._uniqueIDCounter;\r\n\t}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\t/**\r\n\t * 获取几何体类型。\r\n\t */\r\n\t_getType(): number {\r\n\t\tthrow \"GeometryElement:must override it.\";\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * @return  是否需要渲染。\r\n\t */\r\n\t_prepareRender(state: RenderContext3D): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_render(state: RenderContext3D): void {\r\n\t\t// throw \"GeometryElement:must override it.\";\r\n\t\tLayaGL.renderDrawContext.drawGeometryElement(this._geometryElementOBj);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * UpdateGeometry Data\r\n\t */\r\n\t_updateRenderParams(state: RenderContext3D): void {\r\n\t\tthrow \"GeometryElement:must override it.\";\r\n\t}\r\n\r\n\t/**\r\n\t * 销毁。\r\n\t */\r\n\tdestroy(): void {\r\n\t\tif (this._destroyed)\r\n\t\t\treturn;\r\n\t\tthis._destroyed = true;\r\n\t\tthis._geometryElementOBj.destroy();\r\n\t}\r\n\r\n\tclearRenderParams() {\r\n\t\tthis._geometryElementOBj.clearRenderParams();\r\n\t}\r\n}\r\n\r\n","import { LayaGL } from \"../../../layagl/LayaGL\";\r\nimport { BufferUsage } from \"../../../RenderEngine/RenderEnum/BufferTargetType\";\r\nimport { DrawType } from \"../../../RenderEngine/RenderEnum/DrawType\";\r\nimport { IndexFormat } from \"../../../RenderEngine/RenderEnum/IndexFormat\";\r\nimport { MeshTopology } from \"../../../RenderEngine/RenderEnum/RenderPologyMode\";\r\nimport { VertexMesh } from \"../../../RenderEngine/RenderShader/VertexMesh\";\r\nimport { VertexDeclaration } from \"../../../RenderEngine/VertexDeclaration\";\r\nimport { BufferState } from \"../../../webgl/utils/BufferState\";\r\nimport { GeometryElement } from \"../../core/GeometryElement\";\r\nimport { RenderContext3D } from \"../../core/render/RenderContext3D\";\r\n\r\n\r\n/**\r\n * <code>SkyBox</code> 类用于创建天空盒。\r\n */\r\nexport class SkyBox extends GeometryElement {\r\n\tstatic instance: SkyBox;\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic __init__(): void {\r\n\t\tSkyBox.instance = new SkyBox();//TODO:移植为标准Mesh后需要加锁\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>SkyBox</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper(MeshTopology.Triangles, DrawType.DrawElement);\r\n\t\tvar halfHeight: number = 1.0;\r\n\t\tvar halfWidth: number = 1.0;\r\n\t\tvar halfDepth: number = 1.0;\r\n\t\tvar vertices: Float32Array = new Float32Array([-halfDepth, halfHeight, -halfWidth, halfDepth, halfHeight, -halfWidth, halfDepth, halfHeight, halfWidth, -halfDepth, halfHeight, halfWidth,//上\r\n\t\t-halfDepth, -halfHeight, -halfWidth, halfDepth, -halfHeight, -halfWidth, halfDepth, -halfHeight, halfWidth, -halfDepth, -halfHeight, halfWidth]);//下\r\n\t\tvar indices: Uint8Array = new Uint8Array([\r\n\t\t\t0, 2, 1, 2, 0, 3, //上\r\n\t\t\t4, 6, 7, 6, 4, 5, //下\r\n\t\t\t0, 7, 3, 7, 0, 4, //左\r\n\t\t\t1, 6, 5, 6, 1, 2,//右\r\n\t\t\t3, 6, 2, 6, 3, 7, //前\r\n\t\t\t0, 5, 4, 5, 0, 1]);//后\r\n\t\tvar verDec: VertexDeclaration = VertexMesh.getVertexDeclaration(\"POSITION\");\r\n\t\tlet vertexBuffer = LayaGL.renderOBJCreate.createVertexBuffer3D(verDec.vertexStride * 8, BufferUsage.Static, false);\r\n\t\tvertexBuffer.vertexDeclaration = verDec;\r\n\t\tlet indexBuffer = LayaGL.renderOBJCreate.createIndexBuffer3D(IndexFormat.UInt8, 36, BufferUsage.Static, false);\r\n\t\tvertexBuffer.setData(vertices);\r\n\t\tindexBuffer.setData(indices);\r\n\t\tthis.bufferState = new BufferState();\r\n\t\tthis.bufferState.applyState([vertexBuffer], indexBuffer);\r\n\t\tthis._geometryElementOBj.setDrawElemenParams(36, 0);\r\n\t\tthis.indexFormat = IndexFormat.UInt8;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * UpdateGeometry Data\r\n\t */\r\n\t_updateRenderParams(state: RenderContext3D): void {\r\n\r\n\t}\r\n}\r\n\r\n","import { IVertex } from \"../IVertex\"\r\nimport { VertexDeclaration } from \"../../../RenderEngine/VertexDeclaration\";\r\nimport { Vector2 } from \"../../../maths/Vector2\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\nimport { VertexElementFormat } from \"../../../renders/VertexElementFormat\";\r\nimport { VertexElement } from \"../../../renders/VertexElement\";\r\nimport { VertexMesh } from \"../../../RenderEngine/RenderShader/VertexMesh\";\r\n\r\n/**\r\n * @internal\r\n * <code>VertexPositionNormalTexture</code> 类用于创建位置、纹理顶点结构。\r\n */\r\nexport class VertexPositionTexture0 implements IVertex {\r\n\r\n\tprivate static _vertexDeclaration: VertexDeclaration;\r\n\r\n\tstatic get vertexDeclaration(): VertexDeclaration {\r\n\t\treturn VertexPositionTexture0._vertexDeclaration;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic __init__(): void {\r\n\t\tVertexPositionTexture0._vertexDeclaration = new VertexDeclaration(20, [new VertexElement(0, VertexElementFormat.Vector3, VertexMesh.MESH_POSITION0),\r\n\t\tnew VertexElement(12, VertexElementFormat.Vector2, VertexMesh.MESH_TEXTURECOORDINATE0)]);\r\n\t}\r\n\r\n\tprivate _position: Vector3;\r\n\tprivate _textureCoordinate0: Vector2;\r\n\r\n\tget position(): Vector3 {\r\n\t\treturn this._position;\r\n\t}\r\n\r\n\tget textureCoordinate0(): Vector2 {\r\n\t\treturn this._textureCoordinate0;\r\n\t}\r\n\r\n\tget vertexDeclaration(): VertexDeclaration {\r\n\t\treturn VertexPositionTexture0._vertexDeclaration;\r\n\t}\r\n\r\n\tconstructor(position: Vector3, textureCoordinate0: Vector2) {\r\n\t\tthis._position = position;\r\n\t\tthis._textureCoordinate0 = textureCoordinate0;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { VertexPositionTexture0 } from \"../../graphics/Vertex/VertexPositionTexture0\"\r\nimport { LayaGL } from \"../../../layagl/LayaGL\"\r\nimport { BufferUsage } from \"../../../RenderEngine/RenderEnum/BufferTargetType\";\r\nimport { MeshTopology } from \"../../../RenderEngine/RenderEnum/RenderPologyMode\";\r\nimport { VertexDeclaration } from \"../../../RenderEngine/VertexDeclaration\";\r\nimport { GeometryElement } from \"../../core/GeometryElement\";\r\nimport { DrawType } from \"../../../RenderEngine/RenderEnum/DrawType\";\r\nimport { RenderContext3D } from \"../../core/render/RenderContext3D\";\r\nimport { IndexFormat } from \"../../../RenderEngine/RenderEnum/IndexFormat\";\r\nimport { BufferState } from \"../../../webgl/utils/BufferState\";\r\n\r\n/**\r\n * <code>SkyDome</code> 类用于创建天空盒。\r\n */\r\nexport class SkyDome extends GeometryElement {\r\n\t/**@internal */\r\n\tprivate static _radius: number = 1;\r\n\r\n\tstatic instance: SkyDome;\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic __init__(): void {\r\n\t\tSkyDome.instance = new SkyDome();//TODO:移植为标准Mesh后需要加锁\r\n\t}\r\n\r\n\t/**@internal */\r\n\tprivate _stacks: number;\r\n\t/**@internal */\r\n\tprivate _slices: number;\r\n\r\n\t/**\r\n\t * 获取堆数。\r\n\t */\r\n\tget stacks(): number {\r\n\t\treturn this._stacks;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取层数。\r\n\t */\r\n\tget slices(): number {\r\n\t\treturn this._slices;\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>SkyDome</code> 实例。\r\n\t * @param stacks 堆数。\r\n\t * @param slices 层数。\r\n\t */\r\n\tconstructor(stacks: number = 48, slices: number = 48) {\r\n\t\tsuper(MeshTopology.Triangles,DrawType.DrawElement);\r\n\t\tthis._stacks = stacks;\r\n\t\tthis._slices = slices;\r\n\t\tvar vertexDeclaration: VertexDeclaration = VertexPositionTexture0.vertexDeclaration;\r\n\t\tvar vertexFloatCount: number = vertexDeclaration.vertexStride / 4;\r\n\t\tvar numberVertices: number = (this._stacks + 1) * (this._slices + 1);\r\n\t\tvar numberIndices: number = (3 * this._stacks * (this._slices + 1)) * 2;\r\n\r\n\t\tvar vertices: Float32Array = new Float32Array(numberVertices * vertexFloatCount);\r\n\t\tvar indices: Uint16Array = new Uint16Array(numberIndices);\r\n\r\n\t\tvar stackAngle: number = Math.PI / this._stacks;\r\n\t\tvar sliceAngle: number = (Math.PI * 2.0) / this._slices;\r\n\r\n\t\t// Generate the group of Stacks for the sphere  \r\n\t\tvar vertexIndex: number = 0;\r\n\t\tvar vertexCount: number = 0;\r\n\t\tvar indexCount: number = 0;\r\n\r\n\t\tfor (var stack: number = 0; stack < (this._stacks + 1); stack++) {\r\n\t\t\tvar r: number = Math.sin(stack * stackAngle);\r\n\t\t\tvar y: number = Math.cos(stack * stackAngle);\r\n\r\n\t\t\t// Generate the group of segments for the current Stack  \r\n\t\t\tfor (var slice: number = 0; slice < (this._slices + 1); slice++) {\r\n\t\t\t\tvar x: number = r * Math.sin(slice * sliceAngle);\r\n\t\t\t\tvar z: number = r * Math.cos(slice * sliceAngle);\r\n\t\t\t\tvertices[vertexCount + 0] = x * SkyDome._radius;\r\n\t\t\t\tvertices[vertexCount + 1] = y * SkyDome._radius;\r\n\t\t\t\tvertices[vertexCount + 2] = z * SkyDome._radius;\r\n\t\t\t\tvertices[vertexCount + 3] = -(slice / this._slices) + 0.75;//gzk 改成我喜欢的坐标系 原来是 slice/_slices\r\n\t\t\t\tvertices[vertexCount + 4] = stack / this._stacks;\r\n\t\t\t\tvertexCount += vertexFloatCount;\r\n\t\t\t\tif (stack != (this._stacks - 1)) {\r\n\t\t\t\t\t// First Face\r\n\t\t\t\t\tindices[indexCount++] = vertexIndex + 1;\r\n\t\t\t\t\tindices[indexCount++] = vertexIndex;\r\n\t\t\t\t\tindices[indexCount++] = vertexIndex + (this._slices + 1);\r\n\t\t\t\t\t// Second \r\n\t\t\t\t\tindices[indexCount++] = vertexIndex + (this._slices + 1);\r\n\t\t\t\t\tindices[indexCount++] = vertexIndex;\r\n\t\t\t\t\tindices[indexCount++] = vertexIndex + (this._slices);\r\n\t\t\t\t\tvertexIndex++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet vertexBuffer = LayaGL.renderOBJCreate.createVertexBuffer3D(vertices.length * 4, BufferUsage.Static, false);\r\n\t\tvertexBuffer.vertexDeclaration = vertexDeclaration;\r\n\t\tlet indexBuffer = LayaGL.renderOBJCreate.createIndexBuffer3D(IndexFormat.UInt16, indices.length, BufferUsage.Static, false);\r\n\t\tvertexBuffer.setData(vertices.buffer);\r\n\t\tindexBuffer.setData(indices);\r\n\r\n\t\tvar bufferState: BufferState = new BufferState();\r\n\t\tbufferState.applyState([vertexBuffer],indexBuffer);\r\n\t\tthis.bufferState = bufferState;\r\n\t\tthis.indexFormat = IndexFormat.UInt16;\r\n\t\tthis._geometryElementOBj.setDrawElemenParams(indexBuffer.indexCount,0);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * UpdateGeometry Data\r\n\t */\r\n\t _updateRenderParams(state: RenderContext3D): void {\r\n\t\t\r\n\t}\r\n}\r\n\r\n","import { ILaya3D } from \"../../../../ILaya3D\";\r\nimport { LayaGL } from \"../../../layagl/LayaGL\";\r\nimport { Matrix4x4 } from \"../../../maths/Matrix4x4\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\nimport { CompareFunction } from \"../../../RenderEngine/RenderEnum/CompareFunction\";\r\nimport { CullMode } from \"../../../RenderEngine/RenderEnum/CullMode\";\r\nimport { Shader3D } from \"../../../RenderEngine/RenderShader/Shader3D\";\r\nimport { ShaderDataType } from \"../../../RenderEngine/RenderShader/ShaderData\";\r\nimport { Camera } from \"../../core/Camera\";\r\nimport { GeometryElement } from \"../../core/GeometryElement\";\r\nimport { Material } from \"../../core/material/Material\";\r\nimport { BaseRender } from \"../../core/render/BaseRender\";\r\nimport { RenderContext3D } from \"../../core/render/RenderContext3D\";\r\nimport { RenderElement } from \"../../core/render/RenderElement\";\r\nimport { Scene3D } from \"../../core/scene/Scene3D\";\r\nimport { SkyBox } from \"./SkyBox\";\r\nimport { SkyDome } from \"./SkyDome\";\r\n\r\n/**\r\n * <code>SkyRenderer</code> 类用于实现天空渲染器。\r\n */\r\nexport class SkyRenderer {\r\n    /** @internal */\r\n    private static _tempMatrix0: Matrix4x4 = new Matrix4x4();\r\n    /** @internal */\r\n    private static _tempMatrix1: Matrix4x4 = new Matrix4x4();\r\n\r\n    /** @internal */\r\n    private _material: Material;\r\n    /** @internal */\r\n    private _mesh: GeometryElement;\r\n    /**@internal */\r\n    private _renderElement: RenderElement;\r\n\r\n    private _renderData: BaseRender;\r\n    static SUNLIGHTDIRECTION: number;\r\n    static SUNLIGHTDIRCOLOR: number;\r\n    static __init__() {\r\n        SkyRenderer.SUNLIGHTDIRECTION = Shader3D.propertyNameToID(\"u_SunLight_direction\");\r\n        SkyRenderer.SUNLIGHTDIRCOLOR = Shader3D.propertyNameToID(\"u_SunLight_color\");\r\n        const commandUniform = LayaGL.renderOBJCreate.createGlobalUniformMap(\"Sprite3D\");\r\n        commandUniform.addShaderUniform(SkyRenderer.SUNLIGHTDIRECTION, \"u_SunLight_direction\");\r\n        commandUniform.addShaderUniform(SkyRenderer.SUNLIGHTDIRCOLOR, \"u_SunLight_color\");\r\n    }\r\n\r\n    /**\r\n     * 材质。\r\n     */\r\n    get material(): Material {\r\n        return this._material;\r\n    }\r\n\r\n    set material(value: Material) {\r\n        if (this._material !== value) {\r\n            (this._material) && (this._material._removeReference());\r\n            this._material = value;\r\n            this._renderElement.material = value;\r\n            if (value) {\r\n                value._addReference();\r\n                value.depthTest = CompareFunction.LessEqual;\r\n                value.depthWrite = false;\r\n                value.stencilWrite = false;\r\n                this._renderElement.renderSubShader = this._material._shader.getSubShaderAt(0);\r\n            }\r\n            else\r\n                this._renderElement.renderSubShader = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 网格。\r\n     */\r\n    get mesh(): GeometryElement {\r\n        return this._mesh;\r\n    }\r\n\r\n    set mesh(value: GeometryElement) {\r\n\r\n        if (this._mesh !== value) {\r\n            this._mesh = value;\r\n            this._renderElement.setGeometry(this._mesh);\r\n        }\r\n    }\r\n\r\n    //@internal\r\n    private get meshType(): \"box\" | \"dome\" | \"\" {\r\n        return this.mesh == SkyBox.instance ? \"box\" : (this.mesh == SkyDome.instance ? \"dome\" : \"\");\r\n    }\r\n\r\n    //@internal\r\n    private set meshType(value: \"box\" | \"dome\" | \"\") {\r\n        if (value == \"dome\")\r\n            this.mesh = SkyDome.instance;\r\n        else\r\n            this.mesh = SkyBox.instance;\r\n    }\r\n\r\n    /**\r\n     * 创建一个新的 <code>SkyRenderer</code> 实例。\r\n     */\r\n    constructor() {\r\n        this._renderElement = new RenderElement();\r\n        this.mesh = SkyDome.instance;\r\n        this._renderData = new BaseRender();\r\n        this._renderElement.render = this._renderData;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * 是否可用。\r\n     */\r\n    _isAvailable(): boolean {\r\n        return this._material && this._mesh ? true : false;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _render(context: RenderContext3D): void {\r\n        if (this._material && this._mesh) {\r\n            var camera = context.camera;\r\n            var scene: Scene3D = context.scene;\r\n            var projectionMatrix: Matrix4x4 = SkyRenderer._tempMatrix1;\r\n            this._renderData._shaderValues.setColor(SkyRenderer.SUNLIGHTDIRCOLOR, scene._sunColor);\r\n            this._renderData._shaderValues.setVector3(SkyRenderer.SUNLIGHTDIRECTION, scene._sundir);\r\n            //无穷投影矩阵算法,DirectX右手坐标系推导\r\n            //http://terathon.com/gdc07_lengyel.pdf\r\n\r\n            //xScale  0     0                          0\r\n            //0     yScale  0                          0\r\n            //0       0    \t-zfar /(zfar-znear)        -1.0\r\n            //0       0     -znear*zfar /(zfar-znear)  0\r\n\r\n            //xScale  0     0       0        mul   [x,y,z,0] =[xScale*x,yScale*y,-z,-z]\r\n            //0     yScale  0       0\t\t\r\n            //0       0    \t-1      -1.0\t\r\n            //0       0     -0      0\r\n\r\n            //[xScale*x,yScale*y,-z,-z]=>[-xScale*x/z,-yScale*y/z,1]\r\n\r\n            //xScale  0     0       0      \r\n            //0     yScale  0       0\t\t\r\n            //0       0    \t-1+e    -1.0\t\r\n            //0       0     -0  0\r\n            var viewMatrix: Matrix4x4 = SkyRenderer._tempMatrix0;\r\n\r\n            camera.viewMatrix.cloneTo(viewMatrix);//视图矩阵逆矩阵的转置矩阵，移除平移和缩放\r\n            viewMatrix.setTranslationVector(Vector3.ZERO);\r\n            if (!camera.orthographic) {\r\n                camera.projectionMatrix.cloneTo(projectionMatrix);\r\n\r\n                var epsilon: number = 1e-6;\r\n                var yScale: number = 1.0 / Math.tan(3.1416 * camera.fieldOfView / 180 * 0.5);\r\n                projectionMatrix.elements[0] = yScale / camera.aspectRatio;\r\n                projectionMatrix.elements[5] = yScale;\r\n                projectionMatrix.elements[10] = epsilon - 1.0;\r\n                projectionMatrix.elements[11] = -1.0;\r\n                projectionMatrix.elements[14] = -0;//znear无穷小\r\n\r\n            } else {\r\n                \r\n                var halfWidth: number = 0.2;\r\n                var halfHeight: number = halfWidth;\r\n                Matrix4x4.createOrthoOffCenter(-halfWidth, halfWidth, -halfHeight, halfHeight, camera.nearPlane, camera.farPlane, projectionMatrix);\r\n            }\r\n            if ((camera as any).isWebXR) {\r\n                camera._applyViewProject(context, viewMatrix, camera.projectionMatrix);//TODO:优化 不应设置给Camera直接提交\r\n            } else {\r\n                camera._applyViewProject(context, viewMatrix, projectionMatrix);//TODO:优化 不应设置给Camera直接提交\r\n            }\r\n\r\n\r\n            context._contextOBJ.applyContext(Camera._updateMark);\r\n            context.drawRenderElement(this._renderElement);\r\n            camera._applyViewProject(context, camera.viewMatrix, camera.projectionMatrix);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    destroy(): void {\r\n\r\n        if (this._material) {\r\n            this._material._removeReference();\r\n            this._material = null;\r\n        }\r\n        this._renderData.destroy();\r\n        this._renderElement.destroy();\r\n\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n","import { Node } from \"../../display/Node\";\r\nimport { Event } from \"../../events/Event\";\r\nimport { Loader } from \"../../net/Loader\";\r\nimport { Config3D } from \"../../../Config3D\";\r\nimport { IRenderEngine } from \"../../RenderEngine/RenderInterface/IRenderEngine\";\r\nimport { LayaGL } from \"../../layagl/LayaGL\";\r\nimport { Shader3D } from \"../../RenderEngine/RenderShader/Shader3D\";\r\nimport { ShaderData } from \"../../RenderEngine/RenderShader/ShaderData\";\r\nimport { ShaderDefine } from \"../../RenderEngine/RenderShader/ShaderDefine\";\r\nimport { UniformBufferParamsType, UnifromBufferData } from \"../../RenderEngine/UniformBufferData\";\r\nimport { Scene3D } from \"./scene/Scene3D\";\r\nimport { Sprite3D, StaticFlag } from \"./Sprite3D\";\r\nimport { UniformBufferObject } from \"../../RenderEngine/UniformBufferObject\";\r\nimport { BufferUsage } from \"../../RenderEngine/RenderEnum/BufferTargetType\";\r\nimport { CommandUniformMap } from \"../../RenderEngine/CommandUniformMap\";\r\nimport { ILaya } from \"../../../ILaya\";\r\nimport { Color } from \"../../maths/Color\";\r\nimport { Matrix4x4 } from \"../../maths/Matrix4x4\";\r\nimport { Vector3 } from \"../../maths/Vector3\";\r\nimport { SkyRenderer } from \"../resource/models/SkyRenderer\";\r\n\r\n/**\r\n * <code>BaseCamera</code> 类用于创建摄像机的父类。\r\n */\r\nexport class BaseCamera extends Sprite3D {\r\n    /** @internal CameraUniformBlock Map */\r\n    static cameraUniformMap: CommandUniformMap;\r\n    /**Camera Uniform PropertyID */\r\n    /**@internal */\r\n    static CAMERAPOS: number;\r\n    /**@internal */\r\n    static VIEWMATRIX: number;\r\n    /**@internal */\r\n    static PROJECTMATRIX: number;\r\n    /**@internal */\r\n    static VIEWPROJECTMATRIX: number;\r\n    /**@internal */\r\n    static CAMERADIRECTION: number;\r\n    /**@internal */\r\n    static CAMERAUP: number;\r\n    /**@internal */\r\n    static VIEWPORT: number;\r\n    /**@internal */\r\n    static PROJECTION_PARAMS: number;\r\n    /**@internal */\r\n    static OPAQUETEXTURE: number\r\n    /**@internal */\r\n    static DEPTHTEXTURE: number;\r\n    /**@internal */\r\n    static DEPTHNORMALSTEXTURE: number;\r\n    /**@internal */\r\n    static DEPTHZBUFFERPARAMS: number;\r\n    /**@internal */\r\n    static CAMERAUNIFORMBLOCK: number;\r\n    /**Camera Define*/\r\n    /**@internal */\r\n    static SHADERDEFINE_DEPTH: ShaderDefine;\r\n    /**@internal */\r\n    static SHADERDEFINE_DEPTHNORMALS: ShaderDefine;\r\n    /**@internal */\r\n    static SHADERDEFINE_ORTHOGRAPHIC: ShaderDefine;\r\n    /**@internal */\r\n    static SHADERDEFINE_FXAA: ShaderDefine;\r\n    /**@internal */\r\n    static RENDERINGTYPE_SHADERDEFINE_FXAA: string = \"FXAA\";\r\n    /**渲染模式,延迟光照渲染，暂未开放。*/\r\n    static RENDERINGTYPE_DEFERREDLIGHTING: string = \"DEFERREDLIGHTING\";\r\n    /**渲染模式,前向渲染。*/\r\n    static RENDERINGTYPE_FORWARDRENDERING: string = \"FORWARDRENDERING\";\r\n    /**@internal */\r\n    protected static _invertYScaleMatrix: Matrix4x4 = new Matrix4x4(1, 0, 0, 0, 0, -1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);//Matrix4x4.createScaling(new Vector3(1, -1, 1), _invertYScaleMatrix);\r\n    /**@internal */\r\n    protected static _invertYProjectionMatrix: Matrix4x4 = new Matrix4x4();\r\n    /**@internal */\r\n    protected static _invertYProjectionViewMatrix: Matrix4x4 = new Matrix4x4();\r\n    /**@internal */\r\n    static _tempMatrix4x40: Matrix4x4 = new Matrix4x4();\r\n    /**@internal */\r\n    static CameraUBOData: UnifromBufferData;\r\n    /**\r\n     * @internal\r\n     * shaderInfo init\r\n     */\r\n    static shaderValueInit() {\r\n        BaseCamera.SHADERDEFINE_DEPTH = Shader3D.getDefineByName(\"DEPTHMAP\");\r\n        BaseCamera.SHADERDEFINE_DEPTHNORMALS = Shader3D.getDefineByName(\"DEPTHNORMALSMAP\");\r\n        BaseCamera.SHADERDEFINE_ORTHOGRAPHIC = Shader3D.getDefineByName(\"CAMERAORTHOGRAPHIC\");\r\n        BaseCamera.SHADERDEFINE_FXAA = Shader3D.getDefineByName(\"FXAA\");\r\n        let camerauniformMap = BaseCamera.cameraUniformMap = LayaGL.renderOBJCreate.createGlobalUniformMap(\"BaseCamera\");\r\n\r\n        BaseCamera.CAMERAPOS = Shader3D.propertyNameToID(\"u_CameraPos\");\r\n        BaseCamera.VIEWMATRIX = Shader3D.propertyNameToID(\"u_View\");\r\n        BaseCamera.VIEWPROJECTMATRIX = Shader3D.propertyNameToID(\"u_ViewProjection\");\r\n        BaseCamera.PROJECTMATRIX = Shader3D.propertyNameToID(\"u_Projection\");\r\n        BaseCamera.CAMERADIRECTION = Shader3D.propertyNameToID(\"u_CameraDirection\");\r\n        BaseCamera.CAMERAUP = Shader3D.propertyNameToID(\"u_CameraUp\");\r\n        BaseCamera.VIEWPORT = Shader3D.propertyNameToID(\"u_Viewport\");\r\n        BaseCamera.PROJECTION_PARAMS = Shader3D.propertyNameToID(\"u_ProjectionParams\");\r\n        BaseCamera.DEPTHTEXTURE = Shader3D.propertyNameToID(\"u_CameraDepthTexture\");\r\n        BaseCamera.DEPTHNORMALSTEXTURE = Shader3D.propertyNameToID(\"u_CameraDepthNormalsTexture\");\r\n        BaseCamera.OPAQUETEXTURE = Shader3D.propertyNameToID(\"u_CameraOpaqueTexture\");\r\n        BaseCamera.DEPTHZBUFFERPARAMS = Shader3D.propertyNameToID(\"u_ZBufferParams\");\r\n        BaseCamera.CAMERAUNIFORMBLOCK = Shader3D.propertyNameToID(UniformBufferObject.UBONAME_CAMERA);\r\n\r\n        camerauniformMap.addShaderUniform(BaseCamera.CAMERAPOS, \"u_CameraPos\");\r\n        camerauniformMap.addShaderUniform(BaseCamera.VIEWMATRIX, \"u_View\");\r\n        camerauniformMap.addShaderUniform(BaseCamera.PROJECTMATRIX, \"u_Projection\");\r\n        camerauniformMap.addShaderUniform(BaseCamera.VIEWPROJECTMATRIX, \"u_ViewProjection\");\r\n        camerauniformMap.addShaderUniform(BaseCamera.CAMERADIRECTION, \"u_CameraDirection\");\r\n        camerauniformMap.addShaderUniform(BaseCamera.CAMERAUP, \"u_CameraUp\");\r\n        camerauniformMap.addShaderUniform(BaseCamera.VIEWPORT, \"u_Viewport\");\r\n        camerauniformMap.addShaderUniform(BaseCamera.PROJECTION_PARAMS, \"u_ProjectionParams\");\r\n        camerauniformMap.addShaderUniform(BaseCamera.DEPTHTEXTURE, \"u_CameraDepthTexture\");\r\n        camerauniformMap.addShaderUniform(BaseCamera.DEPTHNORMALSTEXTURE, \"u_CameraDepthNormalsTexture\");\r\n        camerauniformMap.addShaderUniform(BaseCamera.OPAQUETEXTURE, \"u_CameraOpaqueTexture\");\r\n        camerauniformMap.addShaderUniform(BaseCamera.DEPTHZBUFFERPARAMS, \"u_ZBufferParams\");\r\n        camerauniformMap.addShaderUniform(BaseCamera.CAMERAUNIFORMBLOCK, UniformBufferObject.UBONAME_CAMERA);\r\n    }\r\n\r\n    /**\r\n     * create BaseCamera UniformBuffer\r\n     * @internal\r\n     * @returns \r\n     */\r\n    static createCameraUniformBlock() {\r\n        if (!BaseCamera.CameraUBOData) {\r\n            let uniformPara: Map<string, UniformBufferParamsType> = new Map<string, UniformBufferParamsType>();\r\n            uniformPara.set(\"u_View\", UniformBufferParamsType.Matrix4x4);\r\n            uniformPara.set(\"u_Projection\", UniformBufferParamsType.Matrix4x4);\r\n            uniformPara.set(\"u_ViewProjection\", UniformBufferParamsType.Matrix4x4);\r\n            uniformPara.set(\"u_ProjectionParams\", UniformBufferParamsType.Vector4);\r\n            uniformPara.set(\"u_Viewport\", UniformBufferParamsType.Vector4);\r\n            uniformPara.set(\"u_CameraDirection\", UniformBufferParamsType.Vector3);\r\n            uniformPara.set(\"u_CameraUp\", UniformBufferParamsType.Vector3);\r\n            uniformPara.set(\"u_CameraPos\", UniformBufferParamsType.Vector3);\r\n\r\n            let uniformMap = new Map<number, UniformBufferParamsType>();\r\n            uniformPara.forEach((value, key) => {\r\n                uniformMap.set(Shader3D.propertyNameToID(key), value);\r\n            })\r\n            BaseCamera.CameraUBOData = new UnifromBufferData(uniformMap);\r\n        }\r\n\r\n        return BaseCamera.CameraUBOData;\r\n    }\r\n    /**\r\n     * Camera Init\r\n     */\r\n    static __init__() {\r\n        BaseCamera.shaderValueInit();\r\n    }\r\n\r\n    /** @internal 渲染顺序。*/\r\n    _renderingOrder: number\r\n    /** @internal */\r\n    _cameraUniformData: UnifromBufferData;\r\n    /** @internal */\r\n    _cameraUniformUBO: UniformBufferObject;\r\n    /** 近裁剪面。*/\r\n    protected _nearPlane: number;\r\n    /** 远裁剪面。*/\r\n    protected _farPlane: number;\r\n    /**渲染引擎 */\r\n    protected _renderEngine: IRenderEngine;\r\n    /**@internal 相机最远处的开合高度*/\r\n    private _yrange: number;\r\n    /** 视野。*/\r\n    private _fieldOfView: number;\r\n    /** 正交投影的垂直尺寸。*/\r\n    private _orthographicVerticalSize: number;\r\n    /** skyRender */\r\n    private _skyRenderer: SkyRenderer = new SkyRenderer();\r\n    /** 前向量*/\r\n    _forward: Vector3 = new Vector3();\r\n    /** up向量 */\r\n    _up: Vector3 = new Vector3();\r\n    /** 是否正交 */\r\n    protected _orthographic: boolean;\r\n    /**@internal 是否使用用户自定义投影矩阵，如果使用了用户投影矩阵，摄像机投影矩阵相关的参数改变则不改变投影矩阵的值，需调用ResetProjectionMatrix方法。*/\r\n    protected _useUserProjectionMatrix: boolean;\r\n\r\n    /** @internal 着色器数据*/\r\n    _shaderValues: ShaderData;\r\n\r\n    /** @internal */\r\n    _linearClearColor: Color;\r\n    /**摄像机的清除颜色,默认颜色为CornflowerBlue。*/\r\n    private _clearColor: Color;\r\n    public get clearColor(): Color {\r\n        return this._clearColor;\r\n    }\r\n    public set clearColor(value: Color) {\r\n        this._clearColor = value;\r\n        value.toLinear(this._linearClearColor);\r\n    }\r\n    /** 可视层位标记遮罩值,支持混合 例:cullingMask=Math.pow(2,0)|Math.pow(2,1)为第0层和第1层可见。*/\r\n    private _cullingMask: number;\r\n\r\n    /**\r\n     * @internal\r\n     * 静态遮罩\r\n     */\r\n    staticMask: number;\r\n\r\n    /** 渲染时是否用遮挡剔除。 */\r\n    useOcclusionCulling: boolean;\r\n\r\n    /**\r\n     * 天空渲染器。\r\n     */\r\n    get skyRenderer(): SkyRenderer {\r\n        return this._skyRenderer;\r\n    }\r\n\r\n    /**\r\n     * 视野。\r\n     */\r\n    get fieldOfView(): number {\r\n        return this._fieldOfView;\r\n    }\r\n\r\n    set fieldOfView(value: number) {\r\n        this._fieldOfView = value;\r\n        this._calculateProjectionMatrix();\r\n        this._caculateMaxLocalYRange();\r\n    }\r\n\r\n    /**\r\n   * 最大本地距离\r\n   */\r\n    get maxlocalYDistance(): number {\r\n        return this._yrange;\r\n    }\r\n\r\n    /**\r\n     * 近裁面。\r\n     */\r\n    get nearPlane(): number {\r\n        return this._nearPlane;\r\n    }\r\n\r\n    set nearPlane(value: number) {\r\n        this._nearPlane = value;\r\n        this._calculateProjectionMatrix();\r\n\r\n    }\r\n\r\n    /**\r\n     * 远裁面。\r\n     */\r\n    get farPlane(): number {\r\n        return this._farPlane;\r\n    }\r\n\r\n    set farPlane(vaule: number) {\r\n        this._farPlane = vaule;\r\n        this._calculateProjectionMatrix();\r\n        this._caculateMaxLocalYRange();\r\n    }\r\n\r\n    /**\r\n     * 是否正交投影矩阵。\r\n     */\r\n    get orthographic(): boolean {\r\n        return this._orthographic;\r\n    }\r\n\r\n    set orthographic(vaule: boolean) {\r\n        this._orthographic = vaule;\r\n        this._calculateProjectionMatrix();\r\n        if (vaule) {\r\n            this._shaderValues.addDefine(BaseCamera.SHADERDEFINE_ORTHOGRAPHIC);\r\n        } else\r\n            this._shaderValues.removeDefine(BaseCamera.SHADERDEFINE_ORTHOGRAPHIC);\r\n    }\r\n\r\n    /**\r\n     * 正交投影垂直矩阵尺寸。\r\n     */\r\n    get orthographicVerticalSize(): number {\r\n        return this._orthographicVerticalSize;\r\n    }\r\n\r\n    set orthographicVerticalSize(vaule: number) {\r\n        this._orthographicVerticalSize = vaule;\r\n        this._calculateProjectionMatrix();\r\n    }\r\n\r\n    get cullingMask(){\r\n        return this._cullingMask;\r\n    }\r\n\r\n    set cullingMask(value:number){\r\n        this._cullingMask = value;\r\n    }\r\n\r\n    /**\r\n     * 渲染顺序\r\n     */\r\n    get renderingOrder(): number {\r\n        return this._renderingOrder;\r\n    }\r\n\r\n    set renderingOrder(value: number) {\r\n        this._renderingOrder = value;\r\n        this._sortCamerasByRenderingOrder();\r\n    }\r\n\r\n    /**\r\n     * 创建一个 <code>BaseCamera</code> 实例。\r\n     * @param\tfieldOfView 视野。\r\n     * @param\tnearPlane 近裁面。\r\n     * @param\tfarPlane 远裁面。\r\n     */\r\n    constructor(nearPlane: number = 0.3, farPlane: number = 1000) {\r\n        super();\r\n        this._shaderValues = LayaGL.renderOBJCreate.createShaderData(null);\r\n\r\n        this._linearClearColor = new Color();\r\n        this.clearColor = new Color(100 / 255, 149 / 255, 237 / 255, 255 / 255);\r\n\r\n        this._fieldOfView = 60;\r\n        this._useUserProjectionMatrix = false;\r\n\r\n\r\n        this._orthographicVerticalSize = 10;\r\n        this.renderingOrder = 0;\r\n\r\n        this._nearPlane = nearPlane;\r\n        this._farPlane = farPlane;\r\n\r\n        this.cullingMask = 2147483647/*int.MAX_VALUE*/;\r\n        this.staticMask = 0xffffffff;\r\n        this.useOcclusionCulling = true;\r\n        this._renderEngine = LayaGL.renderEngine;\r\n        this._orthographic = false;\r\n        if (Config3D._uniformBlock) {\r\n            this._cameraUniformUBO = UniformBufferObject.getBuffer(UniformBufferObject.UBONAME_CAMERA, 0);\r\n            this._cameraUniformData = BaseCamera.createCameraUniformBlock();\r\n            if (!this._cameraUniformUBO) {\r\n                this._cameraUniformUBO = UniformBufferObject.create(UniformBufferObject.UBONAME_CAMERA, BufferUsage.Dynamic, this._cameraUniformData.getbyteLength(), false);\r\n            }\r\n            this._shaderValues._addCheckUBO(UniformBufferObject.UBONAME_CAMERA, this._cameraUniformUBO, this._cameraUniformData);\r\n            this._shaderValues.setUniformBuffer(BaseCamera.CAMERAUNIFORMBLOCK, this._cameraUniformUBO);\r\n        }\r\n    }\r\n\r\n    private _caculateMaxLocalYRange() {\r\n        let halffield = 3.1416 * this.fieldOfView / 180.0 / 2;\r\n        let dist = this.farPlane;\r\n        this._yrange = Math.tan(halffield) * dist * 2;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _calculateProjectionMatrix(): void {\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _onScreenSizeChanged(): void {\r\n        this._calculateProjectionMatrix();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _create(): Node {\r\n        return new BaseCamera();\r\n    }\r\n\r\n    /**\r\n     * 通过RenderingOrder属性对摄像机机型排序。\r\n     * @internal\r\n     */\r\n    _sortCamerasByRenderingOrder(): void {\r\n        if (this.displayedInStage) {\r\n            var cameraPool: BaseCamera[] = this.scene._cameraPool;//TODO:可优化，从队列中移除再加入\r\n            var n: number = cameraPool.length - 1;\r\n            for (var i: number = 0; i < n; i++) {\r\n                if (cameraPool[i].renderingOrder > cameraPool[n].renderingOrder) {\r\n                    var tempCamera: BaseCamera = cameraPool[i];\r\n                    cameraPool[i] = cameraPool[n];\r\n                    cameraPool[n] = tempCamera;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _prepareCameraToRender(): void {\r\n        //var cameraSV: ShaderData = this._shaderValues;\r\n        this.transform.getForward(this._forward);\r\n        this.transform.getUp(this._up);\r\n        this._shaderValues.setVector3(BaseCamera.CAMERAPOS, this.transform.position);\r\n        this._shaderValues.setVector3(BaseCamera.CAMERADIRECTION, this._forward);\r\n        this._shaderValues.setVector3(BaseCamera.CAMERAUP, this._up);\r\n    }\r\n\r\n    // /**\r\n    //  * @internal\r\n    //  */\r\n    // _setShaderValue(index: number, value: any) {\r\n    // \tif (this._cameraUniformData && this._cameraUniformData._has(index))\r\n    // \t\tthis._cameraUniformData._setData(index, value);\r\n    // \tthis._shaderValues.setValueData(index, value);\r\n    // }\r\n\r\n    // /**\r\n    //  * @internal\r\n    //  */\r\n    // _getShaderValue(index: number): any {\r\n    // \treturn this._shaderValues.getValueData(index);\r\n    // }\r\n\r\n\r\n    /**\r\n     * 相机渲染。\r\n     * @param\tshader 着色器。\r\n     * @param   replacementTag 着色器替换标记。\r\n     */\r\n    render(shader: Shader3D = null, replacementTag: string = null): void {\r\n    }\r\n\r\n    /**\r\n     * 增加可视图层,layer值为0到31层。\r\n     * @param layer 图层。\r\n     */\r\n    addLayer(layer: number): void {\r\n        this.cullingMask |= Math.pow(2, layer);\r\n    }\r\n\r\n    /**\r\n     * 移除可视图层,layer值为0到31层。\r\n     * @param layer 图层。\r\n     */\r\n    removeLayer(layer: number): void {\r\n        this.cullingMask &= ~Math.pow(2, layer);\r\n    }\r\n\r\n    /**\r\n     * 增加所有图层。\r\n     */\r\n    addAllLayers(): void {\r\n        this.cullingMask = 2147483647/*int.MAX_VALUE*/;\r\n    }\r\n\r\n    /**\r\n     * 移除所有图层。\r\n     */\r\n    removeAllLayers(): void {\r\n        this.cullingMask = 0;\r\n    }\r\n\r\n    /**\r\n     * 重算计算投影矩阵\r\n     */\r\n    resetProjectionMatrix(): void {\r\n        this._useUserProjectionMatrix = false;\r\n        this._calculateProjectionMatrix();\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     */\r\n    protected _onActive(): void {\r\n        ((<Scene3D>this._scene))._addCamera(this);\r\n        super._onActive();\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     */\r\n    protected _onInActive(): void {\r\n        ((<Scene3D>this._scene))._removeCamera(this);\r\n        super._onInActive();\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     * @internal\r\n     */\r\n    _parse(data: any, spriteMap: any): void {\r\n        super._parse(data, spriteMap);\r\n\r\n        this.orthographic = data.orthographic;\r\n        (data.orthographicVerticalSize !== undefined) && (this.orthographicVerticalSize = data.orthographicVerticalSize);\r\n        (data.fieldOfView !== undefined) && (this.fieldOfView = data.fieldOfView);\r\n        this.nearPlane = data.nearPlane;\r\n        this.farPlane = data.farPlane;\r\n\r\n        var color: any[] = data.clearColor;\r\n        this.clearColor = new Color(color[0], color[1], color[2], color[3]);\r\n        var skyboxMaterial: any = data.skyboxMaterial;\r\n        if (skyboxMaterial) {\r\n            this._skyRenderer.material = Loader.getRes(skyboxMaterial.path);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 删除相机\r\n     * @inheritDoc\r\n     * @override\r\n     * @param 是否删除节点\r\n     */\r\n    destroy(destroyChild: boolean = true): void {\r\n        //postProcess = null;\r\n        //AmbientLight = null;\r\n        this._skyRenderer.destroy();\r\n        this._skyRenderer = null;\r\n\r\n        ILaya.stage.off(Event.RESIZE, this, this._onScreenSizeChanged);\r\n        super.destroy(destroyChild);\r\n    }\r\n}\r\n\r\n","import { RenderElement } from \"./RenderElement\";\r\nimport { Scene3D } from \"../scene/Scene3D\"\r\nimport { Viewport } from \"../../math/Viewport\"\r\nimport { ShaderData } from \"../../../RenderEngine/RenderShader/ShaderData\";\r\nimport { Camera } from \"../Camera\";\r\nimport { Shader3D } from \"../../../RenderEngine/RenderShader/Shader3D\";\r\nimport { IRenderContext3D, PipelineMode } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/IRenderContext3D\";\r\nimport { LayaGL } from \"../../../layagl/LayaGL\";\r\nimport { IRenderTarget } from \"../../../RenderEngine/RenderInterface/IRenderTarget\";\r\nimport { Matrix4x4 } from \"../../../maths/Matrix4x4\";\r\nimport { Vector4 } from \"../../../maths/Vector4\";\r\nimport { ShaderInstance } from \"../../../RenderEngine/RenderShader/ShaderInstance\";\r\nimport { ShaderDefine } from \"../../../RenderEngine/RenderShader/ShaderDefine\";\r\n\r\n/**\r\n * <code>RenderContext3D</code> 类用于实现渲染状态。\r\n */\r\nexport class RenderContext3D {\r\n    /** @internal */\r\n    static _instance: RenderContext3D;\r\n\r\n    /**渲染区宽度。*/\r\n    static clientWidth: number;\r\n    /**渲染区高度。*/\r\n    static clientHeight: number;\r\n\r\n    /** @internal */\r\n    static GammaCorrect: ShaderDefine;\r\n\r\n    /**@internal */\r\n    static __init__() {\r\n        RenderContext3D._instance = new RenderContext3D();\r\n\r\n        this.GammaCorrect = Shader3D.getDefineByName(\"GAMMACORRECT\");\r\n    }\r\n\r\n    /** @internal */\r\n    viewMatrix: Matrix4x4;\r\n    /**@internal */\r\n    customShader: Shader3D;\r\n    /**@internal */\r\n    replaceTag: string;\r\n\r\n    /** @internal */\r\n    projectionMatrix: Matrix4x4;\r\n    /** @internal */\r\n    projectionViewMatrix: Matrix4x4;\r\n    /** @internal */\r\n    renderElement: RenderElement;\r\n    /** @internal */\r\n    camera: Camera;\r\n    /**@internal */\r\n    _scene: Scene3D;\r\n    /** @internal */\r\n    shader: ShaderInstance;\r\n    /**设置渲染管线 */\r\n    configPipeLineMode: PipelineMode = \"Forward\";\r\n    /**@internal contextOBJ*/\r\n    _contextOBJ: IRenderContext3D;\r\n    /**@internal */\r\n    get destTarget(): IRenderTarget {\r\n        return this._contextOBJ.destTarget;\r\n    }\r\n\r\n    /**@internal */\r\n    set destTarget(value: IRenderTarget) {\r\n        this._contextOBJ.destTarget = value;\r\n\r\n        // todo ohter color gamut\r\n        // let sRGBGammaOut = false;\r\n        // if (value) {\r\n        //     // todo \r\n        //     if (value._renderTarget._textures[0].gammaCorrection == 2.2) {\r\n        //         sRGBGammaOut = true;\r\n        //     }\r\n        // }\r\n        // else {\r\n        //     // 直接输出到屏幕, 默认srgb gamma 2.2\r\n        //     sRGBGammaOut = true;\r\n        // }\r\n\r\n        // if (sRGBGammaOut) {\r\n        //     this._contextOBJ.configShaderData.addDefine(RenderContext3D.GammaCorrect);\r\n        // }\r\n        // else {\r\n        //     this._contextOBJ.configShaderData.removeDefine(RenderContext3D.GammaCorrect);\r\n        // }\r\n    }\r\n\r\n    /** @internal */\r\n    get viewport(): Viewport {\r\n        return this._contextOBJ.viewPort;\r\n    }\r\n\r\n    set viewport(value: Viewport) {\r\n        value.cloneTo(this._contextOBJ.viewPort);\r\n    }\r\n    /** @internal */\r\n    get scissor(): Vector4 {\r\n        return this._contextOBJ.scissor;\r\n    }\r\n\r\n    set scissor(value: Vector4) {\r\n        value.cloneTo(this._contextOBJ.scissor);\r\n    }\r\n\r\n    /** @internal */\r\n    get invertY(): boolean {\r\n        return this._contextOBJ.invertY;\r\n    }\r\n\r\n    set invertY(value: boolean) {\r\n        this._contextOBJ.invertY = value;\r\n    }\r\n\r\n    /** @internal */\r\n    get pipelineMode(): PipelineMode {\r\n        return this._contextOBJ.pipelineMode;\r\n    }\r\n\r\n    set pipelineMode(value: PipelineMode) {\r\n        this._contextOBJ.pipelineMode = value;\r\n    }\r\n    //Camera Shader Data\r\n    get cameraShaderValue(): ShaderData {\r\n        return this._contextOBJ.cameraShaderData;\r\n    }\r\n\r\n    set cameraShaderValue(value: ShaderData) {\r\n        this._contextOBJ.cameraShaderData = value;\r\n    }\r\n\r\n    /** @internal */\r\n    set scene(value: Scene3D) {\r\n        if (value) {\r\n            this._contextOBJ.sceneID = value._id;\r\n            this._contextOBJ.sceneShaderData = value._shaderValues;\r\n            this._scene = value;\r\n        } else {\r\n            this._contextOBJ.sceneID = -1;\r\n            this._contextOBJ.sceneShaderData = null;\r\n            this._scene = null;\r\n        }\r\n\r\n    }\r\n\r\n    get scene(): Scene3D {\r\n        return this._scene;\r\n    }\r\n\r\n    changeViewport(x: number, y: number, width: number, height: number) {\r\n        Viewport._tempViewport.set(x, y, width, height);\r\n        this.viewport = Viewport._tempViewport;\r\n    }\r\n\r\n    changeScissor(x: number, y: number, width: number, height: number) {\r\n        Vector4.tempVec4.setValue(x, y, width, height);\r\n        this.scissor = Vector4.tempVec4;\r\n    }\r\n\r\n    /**\r\n     * 渲染一个\r\n     * @param renderelemt \r\n     */\r\n    drawRenderElement(renderelemt: RenderElement): void {\r\n        renderelemt.material && renderelemt._convertSubShader(this.customShader, this.replaceTag);\r\n        if (!renderelemt.renderSubShader)\r\n            return;\r\n        renderelemt._renderUpdatePre(this);\r\n        this._contextOBJ.drawRenderElement(renderelemt._renderElementOBJ);\r\n    }\r\n    /**\r\n     * 创建一个 <code>RenderContext3D</code> 实例。\r\n     */\r\n    constructor() {\r\n        this._contextOBJ = LayaGL.renderOBJCreate.createRenderContext3D();\r\n    }\r\n\r\n}\r\n\r\n\r\n","import { LayaGL } from \"../../../layagl/LayaGL\"\r\nimport { BufferUsage } from \"../../../RenderEngine/RenderEnum/BufferTargetType\"\r\nimport { DrawType } from \"../../../RenderEngine/RenderEnum/DrawType\"\r\nimport { MeshTopology } from \"../../../RenderEngine/RenderEnum/RenderPologyMode\"\r\nimport { VertexDeclaration } from \"../../../RenderEngine/VertexDeclaration\"\r\nimport { VertexElement } from \"../../../renders/VertexElement\"\r\nimport { VertexElementFormat } from \"../../../renders/VertexElementFormat\"\r\nimport { BufferState } from \"../../../webgl/utils/BufferState\"\r\nimport { VertexBuffer3D } from \"../../graphics/VertexBuffer3D\"\r\nimport { GeometryElement } from \"../GeometryElement\"\r\nimport { RenderContext3D } from \"./RenderContext3D\"\r\n\r\n/**\r\n * <code>ScreenQuad</code> 类用于创建全屏四边形。\r\n */\r\nexport class ScreenQuad extends GeometryElement {\r\n\t/** @internal */\r\n\tstatic SCREENQUAD_POSITION_UV: number = 0;\r\n\t/** @internal */\r\n\tprivate static _vertexDeclaration: VertexDeclaration;\r\n\t/** @internal */\r\n\tprivate static _vertices: Float32Array = new Float32Array([1, 1, 1, 1, 1, -1, 1, 0, -1, 1, 0, 1, -1, -1, 0, 0]);//the rule of OpenGL\r\n\t/** @internal */\r\n\tprivate static _verticesInvertUV: Float32Array = new Float32Array([1, 1, 1, 0, 1, -1, 1, 1, -1, 1, 0, 0, -1, -1, 0, 1]);\r\n\t/**@internal */\r\n\tstatic instance: ScreenQuad;\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic __init__(): void {\r\n\t\tScreenQuad._vertexDeclaration = new VertexDeclaration(16, [new VertexElement(0, VertexElementFormat.Vector4, ScreenQuad.SCREENQUAD_POSITION_UV)]);\r\n\t\tScreenQuad.instance = new ScreenQuad();\r\n\t}\r\n\r\n\t/** @internal */\r\n\tprivate _vertexBuffer: VertexBuffer3D;\r\n\t/** @internal */\r\n\tprivate _bufferState: BufferState = new BufferState();\r\n\t/** @internal */\r\n\tprivate _vertexBufferInvertUV: VertexBuffer3D;\r\n\t/** @internal */\r\n\tprivate _bufferStateInvertUV: BufferState = new BufferState();\r\n\r\n\t/**\r\n\t * 创建一个 <code>ScreenQuad</code> 实例,禁止使用。\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper(MeshTopology.TriangleStrip, DrawType.DrawArray);\r\n\t\tthis.setDrawArrayParams(0, 4);\r\n\t\t//顶点buffer\r\n\t\tthis._vertexBuffer = LayaGL.renderOBJCreate.createVertexBuffer3D(16 * 4, BufferUsage.Static, false);\r\n\t\tthis._vertexBuffer.vertexDeclaration = ScreenQuad._vertexDeclaration;\r\n\t\tthis._vertexBuffer.setData(ScreenQuad._vertices.buffer);\r\n\t\tthis._bufferState.applyState([this._vertexBuffer], null);\r\n\r\n\t\tthis._vertexBufferInvertUV = LayaGL.renderOBJCreate.createVertexBuffer3D(16 * 4, BufferUsage.Static, false);\r\n\t\tthis._vertexBufferInvertUV.vertexDeclaration = ScreenQuad._vertexDeclaration;\r\n\t\tthis._vertexBufferInvertUV.setData(ScreenQuad._verticesInvertUV.buffer);\r\n\t\tthis._bufferStateInvertUV.applyState([this._vertexBufferInvertUV], null);\r\n\t}\r\n\r\n\t/**\r\n\t * set BufferState\r\n\t */\r\n\tset invertY(value: boolean) {\r\n\t\tthis.bufferState = value ? this._bufferStateInvertUV : this._bufferState;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * UpdateGeometry Data\r\n\t */\r\n\t_updateRenderParams(state: RenderContext3D): void {\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tdestroy(): void {\r\n\t\tsuper.destroy();\r\n\t\tthis._bufferState.destroy();\r\n\t\tthis._vertexBuffer.destroy();\r\n\t\tthis._bufferStateInvertUV.destroy();\r\n\t\tthis._vertexBufferInvertUV.destroy();\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\n","\r\nimport { LayaGL } from \"../../../../layagl/LayaGL\";\r\nimport { Shader3D } from \"../../../../RenderEngine/RenderShader/Shader3D\";\r\nimport { ShaderData } from \"../../../../RenderEngine/RenderShader/ShaderData\";\r\nimport { RenderContext3D } from \"../RenderContext3D\";\r\nimport { CommandBuffer } from \"./CommandBuffer\";\r\n\r\n/**\r\n * <code>Command</code> 类用于创建指令。\r\n */\r\nexport class Command {\r\n\t/**@internal */\r\n\tstatic _screenShaderData: ShaderData;\r\n\t/** @internal */\r\n\tstatic _screenShader: Shader3D;\r\n\r\n\t/** @internal */\r\n\tstatic SCREENTEXTURE_NAME: string = \"u_MainTex\";\r\n\t/** @internal */\r\n\tstatic SCREENTEXTUREOFFSETSCALE_NAME: string = \"u_OffsetScale\";\r\n\t/** @internal */\r\n\tstatic MAINTEXTURE_TEXELSIZE_NAME: string = \"u_MainTex_TexelSize\";//todo：\r\n\t/** @internal */\r\n\tstatic SCREENTEXTURE_ID: number ;//todo：\r\n\t/** @internal */\r\n\tstatic SCREENTEXTUREOFFSETSCALE_ID: number;//todo：\r\n\t/** @internal */\r\n\tstatic MAINTEXTURE_TEXELSIZE_ID: number ;//todo：\r\n\r\n\t/**@internal */\r\n\t_commandBuffer: CommandBuffer = null;\r\n\t/**@internal */\r\n\t_context: RenderContext3D;\r\n\t/**\r\n\t* @internal\r\n\t*/\r\n\tstatic __init__(): void {\r\n\t\tCommand._screenShaderData = LayaGL.renderOBJCreate.createShaderData(null);\r\n\t\tCommand._screenShader = Shader3D.find(\"BlitScreen\");\r\n\t\tCommand.SCREENTEXTURE_ID = Shader3D.propertyNameToID(Command.SCREENTEXTURE_NAME);//todo：\r\n\t\tCommand.SCREENTEXTUREOFFSETSCALE_ID = Shader3D.propertyNameToID(Command.SCREENTEXTUREOFFSETSCALE_NAME);//todo：\r\n\t\tCommand.MAINTEXTURE_TEXELSIZE_ID = Shader3D.propertyNameToID(Command.MAINTEXTURE_TEXELSIZE_NAME);//todo：\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>Command</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * 运行渲染指令\r\n\t */\r\n\trun(): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * 回收渲染指令\r\n\t */\r\n\trecover(): void {\r\n\t\tthis._commandBuffer = null;\r\n\t}\r\n\r\n\t/**\r\n\t * 设置渲染上下文\r\n\t * @param context 渲染上下文 \r\n\t */\r\n\tsetContext(context: RenderContext3D) {\r\n\t\tthis._context = context;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * @destroy\r\n\t */\r\n\tdestroy(){\r\n\t\tthis._commandBuffer = null;\r\n\t\tthis._context = null;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { LayaGL } from \"../../../../layagl/LayaGL\";\r\nimport { Shader3D } from \"../../../../RenderEngine/RenderShader/Shader3D\";\r\nimport { ShaderData } from \"../../../../RenderEngine/RenderShader/ShaderData\";\r\nimport { BaseTexture } from \"../../../../resource/BaseTexture\";\r\nimport { Stat } from \"../../../../utils/Stat\";\r\nimport { Viewport } from \"../../../math/Viewport\";\r\nimport { Transform3D } from \"../../Transform3D\";\r\nimport { RenderContext3D } from \"../RenderContext3D\";\r\nimport { RenderElement } from \"../RenderElement\";\r\nimport { ScreenQuad } from \"../ScreenQuad\";\r\nimport { Command } from \"./Command\";\r\nimport { CommandBuffer } from \"./CommandBuffer\";\r\nimport { Camera } from \"../../Camera\";\r\nimport { Vector4 } from \"../../../../maths/Vector4\";\r\nimport { RenderTexture } from \"../../../../resource/RenderTexture\";\r\n\r\nexport class BlitScreenQuadCMD extends Command {\r\n\t/**@internal */\r\n\tstatic _SCREENTYPE_QUAD: number = 0;\r\n\t/**@internal */\r\n\tstatic _SCREENTYPE_TRIANGLE: number = 1;\r\n\t/**@internal */\r\n\tprivate static _pool: any[] = [];\r\n\t/** @internal */\r\n\tprivate static _defaultOffsetScale: Vector4 = new Vector4(0, 0, 1, 1);\r\n\t/**\r\n\t* 创建命令流\r\n\t* @param source 原始贴图 如果设置为null  将会使用默认的Camera流程中的原RenderTexture\r\n\t* @param dest 目标贴图 如果设置为null，将会使用默认的camera渲染目标\r\n\t* @param offsetScale 偏移缩放\r\n\t* @param shader 渲染shader\r\n\t* @param shaderData 渲染数据\r\n\t* @param subShader subshader的节点\r\n\t* @param screenType \r\n\t*/\r\n\tstatic create(source: BaseTexture, dest: RenderTexture, offsetScale: Vector4 = null, shader: Shader3D = null, shaderData: ShaderData = null, subShader: number = 0, screenType: number = BlitScreenQuadCMD._SCREENTYPE_QUAD, commandbuffer: CommandBuffer = null): BlitScreenQuadCMD {\r\n\t\tvar cmd: BlitScreenQuadCMD;\r\n\t\tcmd = BlitScreenQuadCMD._pool.length > 0 ? BlitScreenQuadCMD._pool.pop() : new BlitScreenQuadCMD();\r\n\t\tcmd._source = source;\r\n\t\tcmd._dest = dest;\r\n\t\tcmd._offsetScale = offsetScale;\r\n\t\tcmd.setshader(shader, subShader, shaderData);\r\n\t\t// cmd._shader = shader;\r\n\t\t// cmd.shaderData = shaderData;\r\n\t\t// cmd._subShader = subShader;\r\n\t\tcmd._commandBuffer = commandbuffer;\r\n\t\treturn cmd;\r\n\t}\r\n\r\n\t/**@internal */\r\n\tprivate _source: BaseTexture = null;\r\n\t/**@internal */\r\n\tprivate _dest: RenderTexture = null;\r\n\t/**@internal */\r\n\tprivate _offsetScale: Vector4 = null;\r\n\t/**@internal */\r\n\tprivate _shader: Shader3D = null;\r\n\t/**@internal */\r\n\tprivate _shaderData: ShaderData = null;\r\n\t/**@internal */\r\n\tprivate _subShader: number = 0;\r\n\t/**@internal */\r\n\tprivate _sourceTexelSize: Vector4 = new Vector4();\r\n\t/**@internal */\r\n\tprivate _renderElement: RenderElement\r\n\t/**@internal */\r\n\tprivate _transform3D: Transform3D;\r\n\r\n\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis._transform3D = LayaGL.renderOBJCreate.createTransform(null);\r\n\t\tthis._renderElement = new RenderElement();\r\n\t\tthis._renderElement.setTransform(this._transform3D);\r\n\t\tthis._renderElement.setGeometry(ScreenQuad.instance);\r\n\t}\r\n\r\n\tset shaderData(value: ShaderData) {\r\n\t\tthis._shaderData = value || Command._screenShaderData;\r\n\t\tthis._renderElement._renderElementOBJ._materialShaderData = this._shaderData;\r\n\t}\r\n\r\n\tsetshader(shader: Shader3D, subShader: number, shaderData: ShaderData) {\r\n\t\tthis._shader = shader || Command._screenShader;\r\n\t\tthis._subShader = subShader || 0;\r\n\t\tthis.shaderData = shaderData;\r\n\t\tthis._renderElement.renderSubShader = this._shader.getSubShaderAt(this._subShader);\r\n\t\tthis._renderElement._subShaderIndex = subShader;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\trun(): void {//TODO:相机的UV\r\n\t\tthis._commandBuffer && (this.setContext(this._commandBuffer._context));\r\n\t\tvar context = this._context;\r\n\t\tvar source;\r\n\t\tif (!this._source) {\r\n\t\t\tif (!this._commandBuffer._camera._internalRenderTexture)//source null, Bind define FrameBuffer\r\n\t\t\t\tthrow \"camera internalRenderTexture is null,please set camera enableBuiltInRenderTexture\";\r\n\t\t\tsource = this._commandBuffer._camera._internalRenderTexture;\r\n\t\t} else\r\n\t\t\tsource = this._source;\r\n\t\tvar shaderData: ShaderData = this._shaderData;\r\n\t\tvar dest: RenderTexture = this._dest ? this._dest : this._commandBuffer._camera._internalRenderTexture;//set dest\r\n\t\tif (dest) {//set viewport\r\n\t\t\tcontext.changeViewport(0, 0, dest.width, dest.height);\r\n\t\t\tcontext.changeScissor(0, 0, dest.width, dest.height);\r\n\t\t} else {\r\n\t\t\tlet camera = this._commandBuffer._camera;\r\n\t\t\tlet viewport: Viewport = camera.viewport;\r\n\t\t\tlet vpH = viewport.height;\r\n\t\t\tlet vpY = RenderContext3D.clientHeight - viewport.y - vpH;\r\n\t\t\tcontext.changeViewport(viewport.x, vpY, viewport.width, vpH);\r\n\t\t\tcontext.changeScissor(viewport.x, vpY, viewport.width, vpH);\r\n\t\t}\r\n\t\tshaderData.setTexture(Command.SCREENTEXTURE_ID, source);\r\n\t\tshaderData.setVector(Command.SCREENTEXTUREOFFSETSCALE_ID, this._offsetScale || BlitScreenQuadCMD._defaultOffsetScale);\r\n\t\tthis._sourceTexelSize.setValue(1.0 / source.width, 1.0 / source.height, source.width, source.height);\r\n\t\tshaderData.setVector(Command.MAINTEXTURE_TEXELSIZE_ID, this._sourceTexelSize);\r\n\t\tcontext.destTarget = dest;\r\n\t\tcontext._contextOBJ.applyContext(Camera._updateMark);\r\n\t\t// ScreenQuad.instance.invertY = dest ? dest._isCameraTarget : false;\r\n\t\tScreenQuad.instance.invertY = context.invertY;\r\n\t\tcontext.drawRenderElement(this._renderElement);\r\n\t\tStat.blitDrawCall++;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\trecover(): void {\r\n\t\tBlitScreenQuadCMD._pool.push(this);\r\n\t\tthis._source = null;\r\n\t\tthis._dest = null;\r\n\t\tthis._offsetScale = null;\r\n\t\tthis._shader = null;\r\n\t\tthis._shaderData = null;\r\n\t\tsuper.recover();\r\n\t}\r\n\r\n\tdestroy(): void {\r\n\t\tthis._source = null;\r\n\t\tthis._dest = null;\r\n\t\tthis._offsetScale = null;\r\n\t\tthis._shader = null;\r\n\t\tthis._shaderData = null;\r\n\t\tthis._renderElement.destroy();\r\n\t}\r\n}","import { Command } from \"./Command\";\r\nimport { RenderContext3D } from \"../RenderContext3D\";\r\nimport { Camera } from \"../../Camera\";\r\nimport { RenderTexture } from \"../../../../resource/RenderTexture\";\r\n\r\n/**\r\n * @internal\r\n * <code>SetRenderTargetCMD</code> 类用于创建设置渲染目标指令。\r\n */\r\nexport class SetRenderTargetCMD extends Command {\r\n\t/**@internal */\r\n\tprivate static _pool: any[] = [];\r\n\r\n\t/**@internal */\r\n\tprivate _renderTexture: RenderTexture = null;\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic create(renderTexture: RenderTexture): SetRenderTargetCMD {\r\n\t\tvar cmd: SetRenderTargetCMD;\r\n\t\tcmd = SetRenderTargetCMD._pool.length > 0 ? SetRenderTargetCMD._pool.pop() : new SetRenderTargetCMD();\r\n\t\tcmd._renderTexture = renderTexture;\r\n\t\treturn cmd;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\trun(): void {\r\n\t\t//如果已经有绑定的帧buffer  需要先解绑\r\n\t\t(RenderTexture.currentActive) && (RenderTexture.currentActive._end());\r\n\t\tRenderContext3D._instance.destTarget = this._renderTexture;\r\n\t\tRenderContext3D._instance.changeScissor(0, 0, this._renderTexture.width, this._renderTexture.height);\r\n\t\tRenderContext3D._instance.changeViewport(0, 0, this._renderTexture.width, this._renderTexture.height);\r\n\t\tRenderContext3D._instance._contextOBJ.applyContext(Camera._updateMark);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\trecover(): void {\r\n\t\tSetRenderTargetCMD._pool.push(this);\r\n\t\tthis._renderTexture = null;\r\n\t}\r\n}\r\n\r\n\r\n","import { Command } from \"./Command\";\r\nimport { BaseTexture } from \"../../../../resource/BaseTexture\";\r\nimport { CommandBuffer } from \"./CommandBuffer\";\r\nimport { ShaderData, ShaderDataItem, ShaderDataType } from \"../../../../RenderEngine/RenderShader/ShaderData\";\r\nimport { ShaderDefine } from \"../../../../RenderEngine/RenderShader/ShaderDefine\";\r\nimport { Shader3D } from \"../../../../RenderEngine/RenderShader/Shader3D\";\r\nimport { Color } from \"../../../../maths/Color\";\r\nimport { Matrix4x4 } from \"../../../../maths/Matrix4x4\";\r\nimport { Vector2 } from \"../../../../maths/Vector2\";\r\nimport { Vector3 } from \"../../../../maths/Vector3\";\r\nimport { Vector4 } from \"../../../../maths/Vector4\";\r\n\r\n/**\r\n * @internal\r\n * <code>SetShaderDataTextureCMD</code> 类用于创建设置渲染目标指令。\r\n */\r\nexport class SetShaderDataCMD extends Command {\r\n\tstatic ShaderDataType_define:number = -2;\r\n\t/**@internal */\r\n\tprivate static _pool: any[] = [];\r\n\r\n\t/**@internal */\r\n\tprivate _shaderData: ShaderData = null;\r\n\t/**@internal */\r\n\tprivate _nameID: number|string = 0;\r\n\t/**@internal */\r\n\tprivate _value: ShaderDataItem = null;\r\n\t/**@internal */\r\n\tprivate _dataType:number = -1;\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic create(shaderData: ShaderData, nameID: number|string, value:ShaderDataItem,shaderDataType:ShaderDataType|number,commandBuffer:CommandBuffer): SetShaderDataCMD {\r\n\t\tvar cmd: SetShaderDataCMD;\r\n\t\tcmd = SetShaderDataCMD._pool.length > 0 ? SetShaderDataCMD._pool.pop() : new SetShaderDataCMD();\r\n\t\tcmd._shaderData = shaderData;\r\n\t\tcmd._nameID = nameID;\r\n\t\tcmd._value = (value as any).clone?(value as any).clone():value;\r\n\t\tcmd._dataType = shaderDataType;\r\n\t\tcmd._commandBuffer = commandBuffer;\r\n\t\treturn cmd;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\trun(): void {\r\n\t\tswitch(this._dataType){\r\n\t\t\tcase ShaderDataType.Int:\r\n\t\t\t\tthis._shaderData.setInt(this._nameID as number,this._value as number);\r\n\t\t\t\tbreak;\r\n\t\t\tcase ShaderDataType.Float:\r\n\t\t\t\tthis._shaderData.setNumber(this._nameID as number,this._value as number);\r\n\t\t\t\tbreak;\r\n\t\t\tcase ShaderDataType.Bool:\r\n\t\t\t\tthis._shaderData.setBool(this._nameID as number,this._value as boolean);\r\n\t\t\t\tbreak;\r\n\t\t\tcase ShaderDataType.Matrix4x4:\r\n\t\t\t\tthis._shaderData.setMatrix4x4(this._nameID as number,this._value as Matrix4x4);\r\n\t\t\t\tbreak;\r\n\t\t\tcase ShaderDataType.Color:\r\n\t\t\t\tthis._shaderData.setColor(this._nameID as number,this._value as Color);\r\n\t\t\t\tbreak;\r\n\t\t\tcase ShaderDataType.Texture2D:\r\n\t\t\t\tthis._shaderData.setTexture(this._nameID as number,this._value as BaseTexture);\r\n\t\t\t\tbreak;\r\n\t\t\tcase ShaderDataType.Vector4:\r\n\t\t\t\tthis._shaderData.setVector(this._nameID as number,this._value as Vector4);\r\n\t\t\t\tbreak;\r\n\t\t\tcase ShaderDataType.Vector2:\r\n\t\t\t\tthis._shaderData.setVector2(this._nameID as number,this._value as Vector2);\r\n\t\t\t\tbreak;\r\n\t\t\tcase ShaderDataType.Vector3:\r\n\t\t\t\tthis._shaderData.setVector3(this._nameID as number,this._value as Vector3);\r\n\t\t\t\tbreak;\r\n\t\t\tcase ShaderDataType.Buffer:\r\n\t\t\t\tthis._shaderData.setBuffer( this._nameID as number,this._value as Float32Array);\r\n\t\t\t\tbreak;\r\n\t\t\t// case ShaderDataType.ShaderDefine:\r\n\t\t\t// \tlet defineData :ShaderDefine = Shader3D.getDefineByName(this._nameID as string);\r\n\t\t\t// \tif(this._value)\r\n\t\t\t// \tthis._shaderData.addDefine(defineData);\r\n\t\t\t// \telse\r\n\t\t\t// \tthis._shaderData.removeDefine(defineData);\r\n\t\t\t// \tbreak;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\tif(this._dataType==SetShaderDataCMD.ShaderDataType_define){\r\n\t\t\t\t\tlet defineData :ShaderDefine = Shader3D.getDefineByName(this._nameID as string);\r\n\t\t\t\t\t\tif(this._value)\r\n\t\t\t\t\t\tthis._shaderData.addDefine(defineData);\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\tthis._shaderData.removeDefine(defineData);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}else\r\n\t\t\t\t\tthrow \"no type shaderValue on this CommendBuffer\";\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\trecover(): void {\r\n\t\tSetShaderDataCMD._pool.push(this);\r\n\t\tthis._shaderData = null;\r\n\t\tthis._nameID = 0;\r\n\t\tthis._value = null;\r\n\t\tthis._dataType = -1;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { Color } from \"../../../maths/Color\";\r\nimport { Vector4 } from \"../../../maths/Vector4\";\r\nimport { RenderState } from \"../../../RenderEngine/RenderShader/RenderState\";\r\nimport { Shader3D } from \"../../../RenderEngine/RenderShader/Shader3D\";\r\nimport { ShaderDefine } from \"../../../RenderEngine/RenderShader/ShaderDefine\";\r\nimport { BaseTexture } from \"../../../resource/BaseTexture\";\r\nimport { Material } from \"./Material\";\r\n\r\n\r\n/**\r\n * <code>BlinnPhongMaterial</code> 类用于实现Blinn-Phong材质。\r\n */\r\nexport class BlinnPhongMaterial extends Material {\r\n\t/**高光强度数据源_漫反射贴图的Alpha通道。*/\r\n\tstatic SPECULARSOURCE_DIFFUSEMAPALPHA: number;\r\n\t/**高光强度数据源_高光贴图的RGB通道。*/\r\n\tstatic SPECULARSOURCE_SPECULARMAP: number;\r\n\r\n\t/**渲染状态_不透明。*/\r\n\tstatic RENDERMODE_OPAQUE: number = 0;\r\n\t/**渲染状态_阿尔法测试。*/\r\n\tstatic RENDERMODE_CUTOUT: number = 1;\r\n\t/**渲染状态_透明混合。*/\r\n\tstatic RENDERMODE_TRANSPARENT: number = 2;\r\n\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_DIFFUSEMAP: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_NORMALMAP: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_SPECULARMAP: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_ENABLEVERTEXCOLOR: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_ENABLETRANSMISSION: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_THICKNESSMAP: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic ALBEDOTEXTURE: number;\r\n\t/**@internal */\r\n\tstatic NORMALTEXTURE: number;\r\n\t/**@internal */\r\n\tstatic SPECULARTEXTURE: number;\r\n\t/**@internal */\r\n\tstatic ALBEDOCOLOR: number;\r\n\t/**@internal */\r\n\tstatic MATERIALSPECULAR: number;\r\n\t/**@internal */\r\n\tstatic SHININESS: number;\r\n\t/**@internal */\r\n\tstatic TILINGOFFSET: number;\r\n\t/**@internal */\r\n\tstatic TRANSMISSIONRATE: number;\r\n\t/**@internal */\r\n\tstatic IBACKDIFFUSE: number;\r\n\t/**@internal */\r\n\tstatic IBACKSCALE: number;\r\n\t/**@internal */\r\n\tstatic THINKNESSTEXTURE: number;\r\n\t/**@internal */\r\n\tstatic TRANSMISSIONCOLOR: number;\r\n\t/**@internal */\r\n\tstatic AlbedoIntensity: number;\r\n\r\n\t/** 默认材质，禁止修改*/\r\n\tstatic defaultMaterial: BlinnPhongMaterial;\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic __initDefine__(): void {\r\n\t\tBlinnPhongMaterial.SHADERDEFINE_DIFFUSEMAP = Shader3D.getDefineByName(\"DIFFUSEMAP\");\r\n\t\tBlinnPhongMaterial.SHADERDEFINE_NORMALMAP = Shader3D.getDefineByName(\"NORMALMAP\");\r\n\t\tBlinnPhongMaterial.SHADERDEFINE_SPECULARMAP = Shader3D.getDefineByName(\"SPECULARMAP\");\r\n\t\tBlinnPhongMaterial.SHADERDEFINE_ENABLEVERTEXCOLOR = Shader3D.getDefineByName(\"ENABLEVERTEXCOLOR\");\r\n\t\tBlinnPhongMaterial.SHADERDEFINE_ENABLETRANSMISSION = Shader3D.getDefineByName(\"ENABLETRANSMISSION\");\r\n\t\tBlinnPhongMaterial.SHADERDEFINE_THICKNESSMAP = Shader3D.getDefineByName(\"THICKNESSMAP\");\r\n\r\n\t\tBlinnPhongMaterial.ALBEDOTEXTURE = Shader3D.propertyNameToID(\"u_DiffuseTexture\");\r\n\t\tBlinnPhongMaterial.NORMALTEXTURE = Shader3D.propertyNameToID(\"u_NormalTexture\");\r\n\t\tBlinnPhongMaterial.SPECULARTEXTURE = Shader3D.propertyNameToID(\"u_SpecularTexture\");\r\n\t\tBlinnPhongMaterial.ALBEDOCOLOR = Shader3D.propertyNameToID(\"u_DiffuseColor\");\r\n\t\tBlinnPhongMaterial.MATERIALSPECULAR = Shader3D.propertyNameToID(\"u_MaterialSpecular\");\r\n\t\tBlinnPhongMaterial.SHININESS = Shader3D.propertyNameToID(\"u_Shininess\");\r\n\t\tBlinnPhongMaterial.TILINGOFFSET = Shader3D.propertyNameToID(\"u_TilingOffset\");\r\n\t\tBlinnPhongMaterial.TRANSMISSIONRATE = Shader3D.propertyNameToID(\"u_TransmissionRate\");\r\n\t\tBlinnPhongMaterial.IBACKDIFFUSE = Shader3D.propertyNameToID(\"u_BackDiffuse\");\r\n\t\tBlinnPhongMaterial.IBACKSCALE = Shader3D.propertyNameToID(\"u_BackScale\");\r\n\t\tBlinnPhongMaterial.THINKNESSTEXTURE = Shader3D.propertyNameToID(\"u_ThinknessTexture\");\r\n\t\tBlinnPhongMaterial.TRANSMISSIONCOLOR = Shader3D.propertyNameToID(\"u_TransmissionColor\");\r\n\t\tBlinnPhongMaterial.AlbedoIntensity = Shader3D.propertyNameToID(\"u_AlbedoIntensity\");\r\n\t}\r\n\r\n\t/**\r\n\t * 设置渲染模式。\r\n\t * @param 渲染模式\r\n\t */\r\n\tset renderMode(value: number) {\r\n\t\tswitch (value) {\r\n\t\t\tcase BlinnPhongMaterial.RENDERMODE_OPAQUE:\r\n\t\t\t\tthis.alphaTest = false;\r\n\t\t\t\tthis.renderQueue = Material.RENDERQUEUE_OPAQUE;\r\n\t\t\t\tthis.depthWrite = true;\r\n\t\t\t\tthis.cull = RenderState.CULL_BACK;\r\n\t\t\t\tthis.blend = RenderState.BLEND_DISABLE;\r\n\t\t\t\tthis.depthTest = RenderState.DEPTHTEST_LESS;\r\n\t\t\t\tbreak;\r\n\t\t\tcase BlinnPhongMaterial.RENDERMODE_CUTOUT:\r\n\t\t\t\tthis.renderQueue = Material.RENDERQUEUE_ALPHATEST;\r\n\t\t\t\tthis.alphaTest = true;\r\n\t\t\t\tthis.depthWrite = true;\r\n\t\t\t\tthis.cull = RenderState.CULL_BACK;\r\n\t\t\t\tthis.blend = RenderState.BLEND_DISABLE;\r\n\t\t\t\tthis.depthTest = RenderState.DEPTHTEST_LESS;\r\n\t\t\t\tbreak;\r\n\t\t\tcase BlinnPhongMaterial.RENDERMODE_TRANSPARENT:\r\n\t\t\t\tthis.renderQueue = Material.RENDERQUEUE_TRANSPARENT;\r\n\t\t\t\tthis.alphaTest = false;\r\n\t\t\t\tthis.depthWrite = false;\r\n\t\t\t\tthis.cull = RenderState.CULL_BACK;\r\n\t\t\t\tthis.blend = RenderState.BLEND_ENABLE_ALL;\r\n\t\t\t\tthis.blendSrc = RenderState.BLENDPARAM_SRC_ALPHA;\r\n\t\t\t\tthis.blendDst = RenderState.BLENDPARAM_ONE_MINUS_SRC_ALPHA;\r\n\t\t\t\tthis.depthTest = RenderState.DEPTHTEST_LESS;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(\"Material:renderMode value error.\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 是否支持顶点色。\r\n\t */\r\n\tget enableVertexColor(): boolean {\r\n\t\treturn this.hasDefine(BlinnPhongMaterial.SHADERDEFINE_ENABLEVERTEXCOLOR);\r\n\t}\r\n\r\n\tset enableVertexColor(value: boolean) {\r\n\t\tif (value)\r\n\t\t\tthis.addDefine(BlinnPhongMaterial.SHADERDEFINE_ENABLEVERTEXCOLOR);\r\n\t\telse\r\n\t\t\tthis.removeDefine(BlinnPhongMaterial.SHADERDEFINE_ENABLEVERTEXCOLOR);\r\n\t}\r\n\r\n\t/**\r\n\t * 纹理平铺和偏移。\r\n\t */\r\n\tget tilingOffset(): Vector4 {\r\n\t\treturn (<Vector4>this.getVector4ByIndex(BlinnPhongMaterial.TILINGOFFSET));\r\n\t}\r\n\r\n\tset tilingOffset(value: Vector4) {\r\n\t\tif (value) {\r\n\t\t\tthis.setVector4ByIndex(BlinnPhongMaterial.TILINGOFFSET, value);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.getVector4ByIndex(BlinnPhongMaterial.TILINGOFFSET).setValue(1.0, 1.0, 0.0, 0.0);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 反照率颜色。\r\n\t */\r\n\tget albedoColor(): Color {\r\n\t\treturn this.getColorByIndex(BlinnPhongMaterial.ALBEDOCOLOR);\r\n\t}\r\n\r\n\tset albedoColor(value: Color) {\r\n\t\tthis.setColorByIndex(BlinnPhongMaterial.ALBEDOCOLOR, value);//修改值后必须调用此接口,否则NATIVE不生效\r\n\t}\r\n\r\n\t/**\r\n\t * 反照率强度。\r\n\t */\r\n\tget albedoIntensity(): number {\r\n\t\treturn this.getFloatByIndex(BlinnPhongMaterial.AlbedoIntensity);\r\n\t}\r\n\r\n\tset albedoIntensity(value: number) {\r\n\t\tthis.setFloatByIndex(BlinnPhongMaterial.AlbedoIntensity, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 高光颜色。\r\n\t */\r\n\tget specularColor(): Color {\r\n\t\treturn this.getColorByIndex(BlinnPhongMaterial.MATERIALSPECULAR);\r\n\t}\r\n\r\n\tset specularColor(value: Color) {\r\n\t\tthis.setColorByIndex(BlinnPhongMaterial.MATERIALSPECULAR, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 高光强度,范围为0到1。\r\n\t */\r\n\tget shininess(): number {\r\n\t\treturn this.getFloatByIndex(BlinnPhongMaterial.SHININESS);\r\n\t}\r\n\r\n\tset shininess(value: number) {\r\n\t\tvalue = Math.max(0.0, Math.min(1.0, value));\r\n\t\tthis.setFloatByIndex(BlinnPhongMaterial.SHININESS, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 反照率贴图。\r\n\t */\r\n\tget albedoTexture(): BaseTexture {\r\n\t\treturn this.getTextureByIndex(BlinnPhongMaterial.ALBEDOTEXTURE);\r\n\t}\r\n\r\n\tset albedoTexture(value: BaseTexture) {\r\n\t\tif (value)\r\n\t\t\tthis.addDefine(BlinnPhongMaterial.SHADERDEFINE_DIFFUSEMAP);\r\n\t\telse\r\n\t\t\tthis.removeDefine(BlinnPhongMaterial.SHADERDEFINE_DIFFUSEMAP);\r\n\t\tthis.setTextureByIndex(BlinnPhongMaterial.ALBEDOTEXTURE, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 法线贴图。\r\n\t */\r\n\tget normalTexture(): BaseTexture {\r\n\t\treturn this.getTextureByIndex(BlinnPhongMaterial.NORMALTEXTURE);\r\n\t}\r\n\r\n\tset normalTexture(value: BaseTexture) {\r\n\t\tif (value) {\r\n\t\t\tthis.addDefine(BlinnPhongMaterial.SHADERDEFINE_NORMALMAP);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.removeDefine(BlinnPhongMaterial.SHADERDEFINE_NORMALMAP);\r\n\t\t}\r\n\t\tthis.setTextureByIndex(BlinnPhongMaterial.NORMALTEXTURE, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 高光贴图。\r\n\t */\r\n\tget specularTexture(): BaseTexture {\r\n\t\treturn this.getTextureByIndex(BlinnPhongMaterial.SPECULARTEXTURE);\r\n\t}\r\n\r\n\tset specularTexture(value: BaseTexture) {\r\n\t\tif (value)\r\n\t\t\tthis.addDefine(BlinnPhongMaterial.SHADERDEFINE_SPECULARMAP);\r\n\t\telse\r\n\t\t\tthis.removeDefine(BlinnPhongMaterial.SHADERDEFINE_SPECULARMAP);\r\n\r\n\t\tthis.setTextureByIndex(BlinnPhongMaterial.SPECULARTEXTURE, value);\r\n\t}\r\n\t/**\r\n\t * 是否支持透光色。\r\n\t */\r\n\tget enableTransmission(): boolean {\r\n\t\treturn this.hasDefine(BlinnPhongMaterial.SHADERDEFINE_ENABLETRANSMISSION);\r\n\t}\r\n\r\n\tset enableTransmission(value: boolean) {\r\n\t\tif (value)\r\n\t\t\tthis.addDefine(BlinnPhongMaterial.SHADERDEFINE_ENABLETRANSMISSION);\r\n\t\telse\r\n\t\t\tthis.removeDefine(BlinnPhongMaterial.SHADERDEFINE_ENABLETRANSMISSION);\r\n\t}\r\n\r\n\t/**\r\n\t * 透光率，会影响漫反射以及透光强度\r\n\t */\r\n\tget transmissionRata(): number {\r\n\t\treturn this.getFloatByIndex(BlinnPhongMaterial.TRANSMISSIONRATE);\r\n\t}\r\n\r\n\tset transmissionRata(value: number) {\r\n\t\tthis.setFloatByIndex(BlinnPhongMaterial.TRANSMISSIONRATE, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 透射影响范围指数\r\n\t */\r\n\tget backDiffuse(): number {\r\n\t\treturn this.getFloatByIndex(BlinnPhongMaterial.IBACKDIFFUSE);\r\n\t}\r\n\tset backDiffuse(value: number) {\r\n\t\tthis.setFloatByIndex(BlinnPhongMaterial.IBACKDIFFUSE, Math.max(value, 1.0));\r\n\t}\r\n\t/**\r\n\t * 透射光强度\r\n\t */\r\n\tget backScale(): number {\r\n\t\treturn this.getFloatByIndex(BlinnPhongMaterial.IBACKSCALE);\r\n\t}\r\n\tset backScale(value: number) {\r\n\t\tthis.setFloatByIndex(BlinnPhongMaterial.IBACKSCALE, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 厚度贴图，会影响透视光，越厚，透射光越弱\r\n\t */\r\n\tget thinknessTexture(): BaseTexture {\r\n\t\treturn this.getTextureByIndex(BlinnPhongMaterial.THINKNESSTEXTURE);\r\n\t}\r\n\tset thinknessTexture(value: BaseTexture) {\r\n\t\tif (value)\r\n\t\t\tthis.addDefine(BlinnPhongMaterial.SHADERDEFINE_THICKNESSMAP);\r\n\t\telse\r\n\t\t\tthis.removeDefine(BlinnPhongMaterial.SHADERDEFINE_THICKNESSMAP);\r\n\r\n\t\tthis.setTextureByIndex(BlinnPhongMaterial.THINKNESSTEXTURE, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 透光颜色。模拟透光物质内部颜色吸收率\r\n\t */\r\n\tget transmissionColor(): Color {\r\n\t\treturn this.getColorByIndex(BlinnPhongMaterial.TRANSMISSIONCOLOR);\r\n\t}\r\n\tset transmissionColor(value: Color) {\r\n\t\tthis.setColorByIndex(BlinnPhongMaterial.TRANSMISSIONCOLOR, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 请使用transmissionRata\r\n\t * @deprecated\r\n\t */\r\n\tget transmissionRate(): number {\r\n\t\treturn this.getFloatByIndex(BlinnPhongMaterial.TRANSMISSIONRATE);\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>BlinnPhongMaterial</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.setShaderName(\"BLINNPHONG\");\r\n\t\tthis.renderMode = BlinnPhongMaterial.RENDERMODE_OPAQUE;\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @return\t 克隆副本。\r\n\t * @override\r\n\t */\r\n\tclone(): any {\r\n\t\tvar dest: BlinnPhongMaterial = new BlinnPhongMaterial();\r\n\t\tthis.cloneTo(dest);\r\n\t\treturn dest;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tsuper.cloneTo(destObject);\r\n\t\tvar destMaterial: BlinnPhongMaterial = (<BlinnPhongMaterial>destObject);\r\n\t\tdestMaterial.albedoIntensity = this.albedoIntensity;\r\n\t\tdestMaterial.enableVertexColor = this.enableVertexColor;\r\n\t\tthis.albedoColor.cloneTo(destMaterial.albedoColor);\r\n\t}\r\n\r\n\r\n}\r\n\r\n\r\n","\r\nimport { Component } from \"../../components/Component\";\r\nimport { ShaderDefine } from \"../../RenderEngine/RenderShader/ShaderDefine\";\r\nimport { Mesh } from \"../resource/models/Mesh\";\r\nimport { MeshRenderer } from \"./MeshRenderer\";\r\n\r\n/**\r\n * <code>MeshFilter</code> 类用于创建网格过滤器。\r\n */\r\nexport class MeshFilter extends Component {\r\n    /** @internal */\r\n    static _meshVerticeDefine: Array<ShaderDefine> = [];\r\n\r\n    /** @internal */\r\n    private _sharedMesh: Mesh;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.runInEditor = true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _onEnable(): void {\r\n        const render = this.owner.getComponent(MeshRenderer) as MeshRenderer;\r\n        render && render._enabled && render._onMeshChange(this._sharedMesh);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _onDisable(): void {\r\n        const render = this.owner.getComponent(MeshRenderer) as MeshRenderer;\r\n       // render && render._enabled && render._onMeshChange(null);\r\n    }\r\n\r\n    /**\r\n     * 共享网格。\r\n     */\r\n    get sharedMesh(): Mesh {\r\n        return this._sharedMesh;\r\n    }\r\n\r\n    set sharedMesh(value: Mesh) {\r\n        if (this._sharedMesh !== value) {\r\n            //meshReference\r\n            var lastValue: Mesh = this._sharedMesh;\r\n            if (lastValue) {\r\n                lastValue._removeReference();\r\n            }\r\n            if (value) {\r\n                value._addReference();\r\n            }\r\n            this._sharedMesh = value;\r\n\r\n            const render = this.owner.getComponent(MeshRenderer);\r\n            if (!render) {\r\n                return;\r\n            }\r\n            render._onMeshChange(value);\r\n            this._sharedMesh = value;\r\n        }\r\n    }\r\n\r\n    protected _onDestroy() {\r\n        (this._sharedMesh) && (this._sharedMesh._removeReference(), this._sharedMesh = null);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @param dest \r\n     */\r\n    _cloneTo(dest: Component): void {\r\n        let meshfilter = dest as MeshFilter;\r\n        meshfilter.sharedMesh = this.sharedMesh;\r\n        super._cloneTo(dest);\r\n    }\r\n\r\n}\r\n\r\n\r\n","import { RenderElement } from \"./RenderElement\";\r\nimport { Event } from \"../../../events/Event\";\r\nimport { SubMesh } from \"../../resource/models/SubMesh\";\r\nimport { GeometryElement } from \"../GeometryElement\";\r\nimport { Transform3D } from \"../Transform3D\";\r\nimport { SingletonList } from \"../../../utils/SingletonList\";\r\nimport { VertexDeclaration } from \"../../../RenderEngine/VertexDeclaration\";\r\n\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class SubMeshRenderElement extends RenderElement {\r\n\r\n\t/** @internal */\r\n\tprivate _dynamicWorldPositionNormalNeedUpdate: boolean;\r\n\r\n\t/** @internal */\r\n\tstaticBatchIndexStart: number;\r\n\t/** @internal */\r\n\tstaticBatchIndexEnd: number;\r\n\t/** @internal */\r\n\tstaticBatchElementList: SingletonList<SubMeshRenderElement>;\r\n\r\n\t/** @internal */\r\n\tinstanceSubMesh: SubMesh;\r\n\t/** @internal */\r\n\tinstanceBatchElementList: SingletonList<SubMeshRenderElement>;\r\n\r\n\t/** @internal */\r\n\tvertexBatchElementList: SingletonList<SubMeshRenderElement>;\r\n\t/** @internal */\r\n\tvertexBatchVertexDeclaration: VertexDeclaration;\r\n\r\n\r\n\t/**\r\n\t * 创建一个 <code>SubMeshRenderElement</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis._dynamicWorldPositionNormalNeedUpdate = true;\r\n\t\tthis._canBatch = true;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _onWorldMatrixChanged(): void {\r\n\t\tthis._dynamicWorldPositionNormalNeedUpdate = true;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tsetTransform(transform: Transform3D): void {\r\n\t\tif (this.transform !== transform) {\r\n\t\t\t(this.transform) && (this.transform.off(Event.TRANSFORM_CHANGED, this, this._onWorldMatrixChanged));\r\n\t\t\t(transform) && (transform.on(Event.TRANSFORM_CHANGED, this, this._onWorldMatrixChanged));\r\n\t\t\tthis._dynamicWorldPositionNormalNeedUpdate = true;\r\n\t\t\tthis.transform = transform;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tsetGeometry(geometry: GeometryElement): void {\r\n\t\tif (this._geometry !== geometry) {\r\n\t\t\tthis._geometry = geometry;\r\n\t\t\tthis._renderElementOBJ._geometry = geometry._geometryElementOBj;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tdestroy(): void {\r\n\t\tif(!this._renderElementOBJ)return;\r\n\t\t(this.transform) && this.transform.off(Event.TRANSFORM_CHANGED, this, this._onWorldMatrixChanged);\r\n\t\tsuper.destroy();\r\n\t\tthis.staticBatch = null;\r\n\t\tthis.instanceSubMesh = null;\r\n\t\tthis.staticBatchElementList && this.staticBatchElementList.destroy();\r\n\t\tthis.instanceBatchElementList && this.instanceBatchElementList.destroy();\r\n\t\tthis.vertexBatchElementList && this.vertexBatchElementList.destroy();\r\n\t\tthis.vertexBatchVertexDeclaration = null;\r\n\t}\r\n}\r\n\r\n\r\n","import { ShaderDefine } from \"../../../RenderEngine/RenderShader/ShaderDefine\";\r\nimport { VertexMesh } from \"../../../RenderEngine/RenderShader/VertexMesh\";\r\nimport { MeshSprite3DShaderDeclaration } from \"../../core/MeshSprite3DShaderDeclaration\";\r\nimport { Mesh } from \"./Mesh\";\r\n\r\n/**\r\n * <code>Mesh</code> 类用于创建文件网格数据模板。\r\n */\r\nexport class MeshUtil {\r\n    /**\r\n     * 获得mesh的宏\r\n     * @param mesh Mesh\r\n     * @param out define\r\n     */\r\n    static getMeshDefine(mesh: Mesh, out: Array<ShaderDefine>) {\r\n        out.length = 0;\r\n        let vertexElements = mesh._vertexBuffer.vertexDeclaration._vertexElements;\r\n        for (const element of vertexElements) {\r\n            switch (element.elementUsage) {\r\n                case VertexMesh.MESH_COLOR0:\r\n                    out.push(MeshSprite3DShaderDeclaration.SHADERDEFINE_COLOR);\r\n                    break;\r\n                case VertexMesh.MESH_TEXTURECOORDINATE0:\r\n                    out.push(MeshSprite3DShaderDeclaration.SHADERDEFINE_UV0);\r\n                    break;\r\n                case VertexMesh.MESH_TEXTURECOORDINATE1:\r\n                    out.push(MeshSprite3DShaderDeclaration.SHADERDEFINE_UV1);\r\n                    break;\r\n                case VertexMesh.MESH_TANGENT0:\r\n                    out.push(MeshSprite3DShaderDeclaration.SHADERDEFINE_TANGENT);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n","import { Config3D } from \"../../../Config3D\"\r\nimport { Component } from \"../../components/Component\"\r\nimport { LayaGL } from \"../../layagl/LayaGL\"\r\nimport { Matrix4x4 } from \"../../maths/Matrix4x4\"\r\nimport { RenderCapable } from \"../../RenderEngine/RenderEnum/RenderCapable\"\r\nimport { Shader3D } from \"../../RenderEngine/RenderShader/Shader3D\"\r\nimport { ShaderData, ShaderDataType } from \"../../RenderEngine/RenderShader/ShaderData\"\r\nimport { ShaderDefine } from \"../../RenderEngine/RenderShader/ShaderDefine\"\r\nimport { VertexMesh } from \"../../RenderEngine/RenderShader/VertexMesh\"\r\nimport { Mesh } from \"../resource/models/Mesh\"\r\nimport { MorphTargetChannel } from \"../resource/models/MorphTarget\"\r\nimport { BlinnPhongMaterial } from \"./material/BlinnPhongMaterial\"\r\nimport { Material } from \"./material/Material\"\r\nimport { MeshFilter } from \"./MeshFilter\"\r\nimport { MeshSprite3DShaderDeclaration } from \"./MeshSprite3DShaderDeclaration\"\r\nimport { BaseRender } from \"./render/BaseRender\"\r\nimport { RenderContext3D } from \"./render/RenderContext3D\"\r\nimport { RenderElement } from \"./render/RenderElement\"\r\nimport { SubMeshRenderElement } from \"./render/SubMeshRenderElement\"\r\nimport { RenderableSprite3D } from \"./RenderableSprite3D\"\r\nimport { Sprite3D } from \"./Sprite3D\"\r\nimport { Transform3D } from \"./Transform3D\"\r\nimport { MeshUtil } from \"../resource/models/MeshUtil\"\r\n\r\n/**\r\n * <code>MeshRenderer</code> 类用于网格渲染器。\r\n */\r\nexport class MeshRenderer extends BaseRender {\r\n    /** @internal */\r\n    protected _revertStaticBatchDefineUV1: boolean = false;\r\n    /** @internal */\r\n    protected _projectionViewWorldMatrix: Matrix4x4;\r\n    /** @internal */\r\n    protected _mesh: Mesh;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    static __init__(): void {\r\n        MeshSprite3DShaderDeclaration.SHADERDEFINE_UV0 = Shader3D.getDefineByName(\"UV\");\r\n        MeshSprite3DShaderDeclaration.SHADERDEFINE_COLOR = Shader3D.getDefineByName(\"COLOR\");\r\n        MeshSprite3DShaderDeclaration.SHADERDEFINE_UV1 = Shader3D.getDefineByName(\"UV1\");\r\n        MeshSprite3DShaderDeclaration.SHADERDEFINE_TANGENT = Shader3D.getDefineByName(\"TANGENT\");\r\n        MeshSprite3DShaderDeclaration.SHADERDEFINE_GPU_INSTANCE = Shader3D.getDefineByName(\"GPU_INSTANCE\");\r\n    }\r\n\r\n    private morphTargetActiveCount: number = 0;\r\n    private morphTargetActiveWeight: Float32Array;\r\n    private morphTargetActiveIndex: Float32Array;\r\n\r\n    /**@internal */\r\n    morphTargetWeight: Float32Array;\r\n    private morphtargetChannels: MorphTargetChannel[];\r\n\r\n    private _morphWeightChange: boolean = true;\r\n\r\n    /**\r\n     * 创建一个新的 <code>MeshRender</code> 实例。\r\n     */\r\n    constructor() {\r\n        super();\r\n        this._projectionViewWorldMatrix = new Matrix4x4();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _createRenderElement(): RenderElement {\r\n        return new SubMeshRenderElement();\r\n    }\r\n\r\n    /**@intermal */\r\n    getMesh() {\r\n        return this._mesh;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _onEnable(): void {\r\n        super._onEnable();\r\n        const filter = this.owner.getComponent(MeshFilter) as MeshFilter;\r\n        if (filter) filter._enabled && this._onMeshChange(filter.sharedMesh);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @param mesh \r\n     * @param out \r\n     */\r\n    protected _getMeshDefine(mesh: Mesh, out: Array<ShaderDefine>): number {\r\n        let define;\r\n        out.length = 0;\r\n        MeshUtil.getMeshDefine(mesh, out);\r\n        return define;\r\n    }\r\n\r\n    protected _changeVertexDefine(mesh: Mesh) {\r\n        var defineDatas: ShaderData = this._shaderValues;\r\n        var lastValue: Mesh = this._mesh;\r\n        if (lastValue) {\r\n            this._getMeshDefine(lastValue, MeshFilter._meshVerticeDefine);\r\n            for (var i: number = 0, n: number = MeshFilter._meshVerticeDefine.length; i < n; i++)\r\n                defineDatas.removeDefine(MeshFilter._meshVerticeDefine[i]);\r\n        }\r\n        if (mesh) {\r\n            this._getMeshDefine(mesh, MeshFilter._meshVerticeDefine);\r\n            for (var i: number = 0, n: number = MeshFilter._meshVerticeDefine.length; i < n; i++)\r\n                defineDatas.addDefine(MeshFilter._meshVerticeDefine[i]);\r\n        }\r\n\r\n    }\r\n\r\n    private _morphTargetValues: Record<string, number> = {}\r\n    /**\r\n     * @internal\r\n     */\r\n    public get morphTargetValues(): Record<string, number> {\r\n        return this._morphTargetValues;\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    public set morphTargetValues(value: Record<string, number>) {\r\n        this._morphTargetValues = value;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @param key \r\n     */\r\n    _changeMorphTargetValue(key: string) {\r\n        this._morphWeightChange = true;\r\n    }\r\n\r\n    setMorphChannelWeight(channelName: string, weight: number) {\r\n        // todo\r\n        let mesh = this._mesh;\r\n        if (mesh && mesh.morphTargetData) {\r\n            let morphData = mesh.morphTargetData;\r\n            let channel = morphData.getMorphChannel(channelName);\r\n            this.morphTargetValues[channel.name] = weight;\r\n            this._morphWeightChange = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 更新 morph target 数据\r\n     */\r\n    protected _applyMorphdata() {\r\n        let mesh = this._mesh;\r\n        if (this._morphWeightChange && mesh) {\r\n\r\n            let morphData = mesh.morphTargetData;\r\n            let channelCount = morphData.channelCount;\r\n\r\n            for (let channelIndex = 0; channelIndex < channelCount; channelIndex++) {\r\n                let channel = morphData.getMorphChannelbyIndex(channelIndex);\r\n                // channel.targetCount;\r\n                let weight = this.morphTargetValues[channel.name];\r\n\r\n                // update target weight\r\n                let lastFullWeight = 0;\r\n                channel.targets.forEach(target => {\r\n                    if (weight <= target.fullWeight) {\r\n                        this.morphTargetWeight[target._index] = (weight - lastFullWeight) / (target.fullWeight - lastFullWeight);\r\n                    }\r\n                    else {\r\n                        this.morphTargetWeight[target._index] = 1;\r\n                    }\r\n                    lastFullWeight = target.fullWeight;\r\n                });\r\n            }\r\n\r\n            let activeIndex = 0;\r\n            // todo top k\r\n            this.morphTargetWeight.forEach((weight, index) => {\r\n                if (weight > 0) {\r\n                    this.morphTargetActiveIndex[activeIndex] = index;\r\n                    this.morphTargetActiveWeight[activeIndex] = weight;\r\n                    activeIndex++;\r\n                }\r\n            });\r\n\r\n            this.morphTargetActiveCount = Math.min(activeIndex, Config3D.maxMorphTargetCount);\r\n\r\n            if (LayaGL.renderEngine.getCapable(RenderCapable.Texture3D)) {\r\n                this._shaderValues.setInt(RenderableSprite3D.MorphActiveCount, this.morphTargetActiveCount);\r\n\r\n                this._shaderValues.setBuffer(RenderableSprite3D.MorphActiceTargets, this.morphTargetActiveIndex);\r\n                this._shaderValues.setBuffer(RenderableSprite3D.MorphActiveWeights, this.morphTargetActiveWeight);\r\n            }\r\n            else {\r\n                // todo\r\n            }\r\n            this._morphWeightChange = false;\r\n            // todo \r\n            // active count == 0 disable morph ?\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * 更新 mesh 时 更新 morph target data (shader define)\r\n     * @param mesh \r\n     */\r\n    protected _changeMorphData(mesh: Mesh) {\r\n        let shaderData = this._shaderValues;\r\n        let oldMesh = this._mesh;\r\n\r\n        // todo\r\n        // config max count\r\n        const maxMorphTargetCount = Config3D.maxMorphTargetCount;\r\n        let maxCount = maxMorphTargetCount;\r\n\r\n        this.morphTargetActiveIndex = new Float32Array(maxCount);\r\n        this.morphTargetActiveWeight = new Float32Array(maxCount);\r\n\r\n        if (LayaGL.renderEngine.getCapable(RenderCapable.Texture3D)) {\r\n            if (oldMesh && oldMesh.morphTargetData) {\r\n                let morphData = oldMesh.morphTargetData;\r\n                shaderData.removeDefine(RenderableSprite3D.SHADERDEFINE_MORPHTARGET);\r\n\r\n                let morphVertexDec = morphData.vertexDec;\r\n\r\n                morphVertexDec._vertexElements.forEach(element => {\r\n                    switch (element.elementUsage) {\r\n                        case VertexMesh.MESH_POSITION0:\r\n                            shaderData.removeDefine(RenderableSprite3D.SHADERDEFINE_MORPHTARGET_POSITION);\r\n                            break;\r\n                        case VertexMesh.MESH_NORMAL0:\r\n                            shaderData.removeDefine(RenderableSprite3D.SHADERDEFINE_MORPHTARGET_NORMAL);\r\n                            break;\r\n                        case VertexMesh.MESH_TANGENT0:\r\n                            shaderData.removeDefine(RenderableSprite3D.SHADERDEFINE_MORPHTARGET_TANGENT);\r\n                            break;\r\n                        default:\r\n                            break;\r\n                    }\r\n                })\r\n            }\r\n\r\n            if (mesh && mesh.morphTargetData) {\r\n\r\n                let morphData = mesh.morphTargetData;\r\n\r\n                shaderData.addDefine(RenderableSprite3D.SHADERDEFINE_MORPHTARGET);\r\n                let morphVertexDec = morphData.vertexDec;\r\n                morphVertexDec._vertexElements.forEach(element => {\r\n                    switch (element.elementUsage) {\r\n                        case VertexMesh.MESH_POSITION0:\r\n                            shaderData.addDefine(RenderableSprite3D.SHADERDEFINE_MORPHTARGET_POSITION);\r\n                            break;\r\n                        case VertexMesh.MESH_NORMAL0:\r\n                            shaderData.addDefine(RenderableSprite3D.SHADERDEFINE_MORPHTARGET_NORMAL);\r\n                            break;\r\n                        case VertexMesh.MESH_TANGENT0:\r\n                            shaderData.addDefine(RenderableSprite3D.SHADERDEFINE_MORPHTARGET_TANGENT);\r\n                            break;\r\n                        default:\r\n                            break;\r\n                    }\r\n                })\r\n\r\n                shaderData.setVector(RenderableSprite3D.MorphAttriOffset, mesh.morphTargetData.attributeOffset);\r\n\r\n                shaderData.setTexture(RenderableSprite3D.MorphTex, mesh.morphTargetData.targetTexture);\r\n\r\n                shaderData.setVector(RenderableSprite3D.MorphParams, morphData.params);\r\n\r\n                shaderData.setBuffer(RenderableSprite3D.MorphActiceTargets, this.morphTargetActiveIndex);\r\n                shaderData.setBuffer(RenderableSprite3D.MorphActiveWeights, this.morphTargetActiveWeight);\r\n            }\r\n        }\r\n\r\n        if (oldMesh && oldMesh.morphTargetData) {\r\n            this.morphTargetWeight = null;\r\n\r\n            this.morphtargetChannels = null;\r\n            this._morphTargetValues = {};\r\n        }\r\n\r\n        if (mesh && mesh.morphTargetData) {\r\n\r\n            let morphData = mesh.morphTargetData;\r\n\r\n            let channelCount = morphData.channelCount;\r\n\r\n            this.morphTargetWeight = new Float32Array(morphData.targetCount);\r\n\r\n            this.morphtargetChannels = new Array<MorphTargetChannel>(channelCount);\r\n            for (let index = 0; index < channelCount; index++) {\r\n                let channel = morphData.getMorphChannelbyIndex(index);\r\n                this.morphtargetChannels[index] = channel;\r\n                this._morphTargetValues[channel.name] = 0;\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _onMeshChange(mesh: Mesh): void {\r\n        if (mesh && this._mesh != mesh) {\r\n            this._changeVertexDefine(mesh);\r\n            this._changeMorphData(mesh);\r\n            this._mesh = mesh;\r\n            this.geometryBounds = mesh.bounds;\r\n            var count: number = mesh.subMeshCount;\r\n            this._renderElements.length = count;\r\n            for (var i: number = 0; i < count; i++) {\r\n                var renderElement: RenderElement = this._renderElements[i];\r\n                if (!renderElement) {\r\n                    var material: Material = this.sharedMaterials[i];\r\n                    renderElement = this._renderElements[i] = this._renderElements[i] ? this._renderElements[i] : this._createRenderElement();\r\n                    this.owner && renderElement.setTransform((this.owner as Sprite3D)._transform);\r\n                    renderElement.render = this;\r\n                    renderElement.material = material ? material : BlinnPhongMaterial.defaultMaterial;//确保有材质,由默认材质代替。\r\n                }\r\n                renderElement.setGeometry(mesh.getSubMesh(i));\r\n            }\r\n\r\n        } else if (!mesh) {\r\n            this._renderElements.forEach\r\n            this._renderElements.forEach(element => {\r\n                element.destroy();\r\n            });\r\n            this._renderElements.length = 0;\r\n            this._mesh = null;\r\n            this._changeVertexDefine(null);\r\n            this._changeMorphData(null);\r\n        }\r\n        this.boundsChange = true;\r\n        // if (this._octreeNode && this._indexInOctreeMotionList === -1) {\r\n        // \tthis._octreeNode.getManagerNode().addMotionObject(this);\r\n        // }\r\n    }\r\n\r\n\r\n    /**\r\n     * @internal\r\n     * 开启多材质 多element模式\r\n     */\r\n    updateMulPassRender(): void {\r\n        const filter = this.owner.getComponent(MeshFilter);\r\n        if (!filter)\r\n            return;\r\n        const mesh = filter.sharedMesh;\r\n        if (mesh) {\r\n            var subCount: number = mesh.subMeshCount;\r\n            var matCount = this._sharedMaterials.length;\r\n            if (subCount > matCount) {\r\n                let count = subCount\r\n                this._renderElements.length = count;\r\n                for (var i: number = 0; i < count; i++) {\r\n                    var renderElement: RenderElement = this._renderElements[i];\r\n                    if (!renderElement) {\r\n                        var material: Material = this.sharedMaterials[i];\r\n                        renderElement = this._renderElements[i] = this._renderElements[i] ? this._renderElements[i] : this._createRenderElement();\r\n                        renderElement.setTransform((this.owner as Sprite3D)._transform);\r\n                        renderElement.render = this;\r\n                        renderElement.material = material ? material : BlinnPhongMaterial.defaultMaterial;//确保有材质,由默认材质代替。\r\n                    }\r\n                    renderElement.setGeometry(mesh.getSubMesh(i));\r\n                }\r\n            } else {\r\n                let count = matCount;\r\n                this._renderElements.length = count;\r\n                for (var i: number = 0; i < count; i++) {\r\n                    var renderElement: RenderElement = this._renderElements[i];\r\n                    if (!renderElement) {\r\n                        var material: Material = this.sharedMaterials[i];\r\n                        renderElement = this._renderElements[i] = this._renderElements[i] ? this._renderElements[i] : this._createRenderElement();\r\n                        renderElement.setTransform((this.owner as Sprite3D)._transform);\r\n                        renderElement.render = this;\r\n                        renderElement.material = material ? material : BlinnPhongMaterial.defaultMaterial;//确保有材质,由默认材质代替。\r\n                    }\r\n                }\r\n                renderElement.setGeometry(mesh.getSubMesh(count % subCount));\r\n            }\r\n\r\n        } else {\r\n            this._renderElements.length = 0;\r\n        }\r\n        this.boundsChange = true;\r\n        // if (this._octreeNode && this._indexInOctreeMotionList === -1) {\r\n        // \tthis._octreeNode.getManagerNode().addMotionObject(this);\r\n        // }\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     * @internal\r\n     */\r\n    protected _calculateBoundingBox(): void {\r\n        var sharedMesh: Mesh = this._mesh;\r\n        if (sharedMesh) {\r\n            var worldMat: Matrix4x4 = this._transform.worldMatrix;\r\n            if (sharedMesh.morphTargetData) {\r\n                sharedMesh.morphTargetData.bounds._tranform(worldMat, this._bounds);\r\n            }\r\n            else {\r\n                sharedMesh.bounds._tranform(worldMat, this._bounds);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     * @internal\r\n     */\r\n    _renderUpdate(context: RenderContext3D, transform: Transform3D): void {\r\n        this._applyReflection();\r\n        this._mesh.morphTargetData && this._applyMorphdata();\r\n        var element: SubMeshRenderElement = <SubMeshRenderElement>context.renderElement;\r\n        let trans = transform ? transform : this._transform;\r\n        this._setShaderValue(Sprite3D.WORLDMATRIX, ShaderDataType.Matrix4x4, trans.worldMatrix);\r\n        this._worldParams.x = trans.getFrontFaceValue();\r\n        this._setShaderValue(Sprite3D.WORLDINVERTFRONT, ShaderDataType.Vector4, this._worldParams);\r\n        return;\r\n    }\r\n    /**\r\n     * @internal\r\n     * @override\r\n     */\r\n    _revertBatchRenderUpdate(context: RenderContext3D): void {\r\n        var element: SubMeshRenderElement = (<SubMeshRenderElement>context.renderElement);\r\n        switch (element.renderType) {\r\n            case RenderElement.RENDERTYPE_STATICBATCH:\r\n                if (this._revertStaticBatchDefineUV1)\r\n                    this._shaderValues.removeDefine(MeshSprite3DShaderDeclaration.SHADERDEFINE_UV1);\r\n                this._shaderValues.setVector(RenderableSprite3D.LIGHTMAPSCALEOFFSET, this.lightmapScaleOffset);\r\n                break;\r\n            case RenderElement.RENDERTYPE_INSTANCEBATCH:\r\n                this._shaderValues.removeDefine(MeshSprite3DShaderDeclaration.SHADERDEFINE_GPU_INSTANCE);\r\n                break;\r\n        }\r\n    }\r\n\r\n    protected _onDestroy() {\r\n        super._onDestroy();\r\n        this._morphTargetValues = null;\r\n    }\r\n\r\n    /**\r\n     * @override\r\n     * @param dest \r\n     */\r\n    _cloneTo(dest: Component): void {\r\n        super._cloneTo(dest);\r\n        // todo clone morphtarget weight\r\n        // onMeshChange in onEnable\r\n        if (this.morphTargetWeight) {\r\n            (<MeshRenderer>dest).morphTargetWeight = new Float32Array(this.morphTargetWeight);\r\n        }\r\n        for (const key in this._morphTargetValues) {\r\n            (<MeshRenderer>dest)._morphTargetValues[key] = this._morphTargetValues[key];\r\n        }\r\n    }\r\n}","import { Mesh } from \"../../../resource/models/Mesh\";\r\nimport { Material } from \"../../material/Material\";\r\nimport { Command } from \"./Command\";\r\nimport { CommandBuffer } from \"./CommandBuffer\";\r\nimport { MeshRenderer } from \"../../../core/MeshRenderer\";\r\nimport { RenderElement } from \"../RenderElement\";\r\nimport { Transform3D } from \"../../Transform3D\";\r\nimport { LayaGL } from \"../../../../layagl/LayaGL\";\r\nimport { RenderContext3D } from \"../RenderContext3D\";\r\nimport { Camera } from \"../../Camera\";\r\nimport { Matrix4x4 } from \"../../../../maths/Matrix4x4\";\r\n/**\r\n * @internal\r\n * <code>SetShaderDataTextureCMD</code> 类用于创建设置渲染目标指令。\r\n */\r\nexport class DrawMeshCMD extends Command {\r\n\r\n    /**@internal */\r\n    private static _pool: DrawMeshCMD[] = [];\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    static create(mesh: Mesh, matrix: Matrix4x4, material: Material, subMeshIndex: number, subShaderIndex: number, commandBuffer: CommandBuffer): DrawMeshCMD {\r\n        var cmd: DrawMeshCMD;\r\n        cmd = DrawMeshCMD._pool.length > 0 ? DrawMeshCMD._pool.pop() : new DrawMeshCMD();\r\n\r\n        cmd._matrix = matrix;\r\n        cmd._transform.worldMatrix = cmd._matrix;\r\n        cmd.material = material;\r\n        cmd._subMeshIndex = subMeshIndex;\r\n        cmd._subShaderIndex = subShaderIndex;\r\n        cmd.mesh = mesh;\r\n        cmd._commandBuffer = commandBuffer;\r\n        return cmd;\r\n    }\r\n\r\n    /**@internal */\r\n    private _material: Material;\r\n\r\n    /**@internal */\r\n    private _matrix: Matrix4x4;\r\n\r\n    /**@internal */\r\n    private _subMeshIndex: number;\r\n\r\n    /**@internal */\r\n    private _subShaderIndex: number;\r\n\r\n    /**@internal */\r\n    private _mesh: Mesh;\r\n\r\n    /**@internal */\r\n    _renderElemnts: RenderElement[];\r\n\r\n    /**@internal */\r\n    _meshRender: MeshRenderer;\r\n\r\n    /**@internal */\r\n    _transform: Transform3D;\r\n\r\n    /**\r\n     * \r\n     */\r\n    constructor() {\r\n        super();\r\n        this._transform = LayaGL.renderOBJCreate.createTransform(null);\r\n        this._meshRender = new MeshRenderer();\r\n    }\r\n\r\n    set material(value: Material) {\r\n        this._material && this._material._removeReference(1);\r\n        this._material = value;\r\n        this._material && this._material._addReference(1);\r\n    }\r\n\r\n    set mesh(value: Mesh) {\r\n        if (this._mesh == value)\r\n            return;\r\n        this._mesh = value;\r\n        this._meshRender._onMeshChange(this._mesh);\r\n        this._renderElemnts = this._meshRender._renderElements;\r\n        this._renderElemnts.forEach(element => {\r\n            element.material = this._material;\r\n            element.setTransform(this._transform);\r\n            element.renderSubShader = this._material._shader.getSubShaderAt(this._subShaderIndex);\r\n            element._subShaderIndex = this._subShaderIndex;\r\n        });\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     */\r\n    run(): void {\r\n        var context = RenderContext3D._instance;\r\n        this._meshRender.probReflection = context.scene.sceneReflectionProb;\r\n        context._contextOBJ.applyContext(Camera._updateMark);\r\n        let submeshs = this._mesh._subMeshes\r\n        if (this._subMeshIndex == -1) {\r\n            for (let i = 0, n = submeshs.length; i < n; i++) {\r\n                let element = this._renderElemnts[i];\r\n                context.drawRenderElement(element);\r\n            }\r\n        } else {\r\n            let element = this._renderElemnts[this._subMeshIndex];\r\n            context.drawRenderElement(element);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     */\r\n    recover(): void {\r\n        DrawMeshCMD._pool.push(this);\r\n        super.recover();\r\n        this._material && (this.material = null);\r\n        this._mesh && (this.mesh = null);\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     */\r\n    destroy() {\r\n        super.destroy();\r\n        this._renderElemnts.forEach(element => {\r\n            element.destroy();\r\n        });\r\n        this._material && this._material._removeReference(1);\r\n        this._material = null;\r\n        this._renderElemnts = null;\r\n        this._transform = null;\r\n        this._material = null;\r\n        this._matrix = null\r\n    }\r\n}","import { LayaGL } from \"../../../../layagl/LayaGL\";\r\nimport { Color } from \"../../../../maths/Color\";\r\nimport { RenderClearFlag } from \"../../../../RenderEngine/RenderEnum/RenderClearFlag\";\r\nimport { Command } from \"./Command\";\r\nimport { CommandBuffer } from \"./CommandBuffer\";\r\n\r\n\r\n/**\r\n * @internal\r\n * <code>SetShaderDataTextureCMD</code> 类用于创建设置渲染目标指令。\r\n */\r\nexport class ClearRenderTextureCMD extends Command {\r\n\t/**@internal */\r\n\tprivate static _pool: any[] = [];\r\n\t/**@internal */\r\n\tprivate _clearColor: boolean = false;\r\n\t/**@internal */\r\n\tprivate _clearDepth: boolean = false;\r\n\t/**@internal */\r\n\tprivate _backgroundColor: Color = new Color();\r\n\t/**@internal */\r\n\tprivate _linearbackgroundColor: Color = new Color();\r\n\t/**@internal */\r\n\tprivate _depth: number = 1;\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic create(clearColor: boolean, clearDepth: boolean, backgroundColor: Color, depth: number = 1, commandBuffer: CommandBuffer): ClearRenderTextureCMD {\r\n\t\tvar cmd: ClearRenderTextureCMD;\r\n\t\tcmd = ClearRenderTextureCMD._pool.length > 0 ? ClearRenderTextureCMD._pool.pop() : new ClearRenderTextureCMD();\r\n\t\tcmd._clearColor = clearColor;\r\n\t\tcmd._clearDepth = clearDepth;\r\n\t\tbackgroundColor.cloneTo(cmd._backgroundColor);\r\n\t\tbackgroundColor.toLinear(cmd._linearbackgroundColor);\r\n\t\tcmd._depth = depth;\r\n\t\tcmd._commandBuffer = commandBuffer;\r\n\t\treturn cmd;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\trun(): void {\r\n\t\tvar flag: number;\r\n\t\t// var backgroundColor: Color = this._backgroundColor;\r\n\t\tlet linearBgColor = this._linearbackgroundColor;\r\n\t\tif (this._clearDepth && this._clearColor) {\r\n\t\t\tLayaGL.renderEngine.clearRenderTexture(RenderClearFlag.Color | RenderClearFlag.Depth, linearBgColor, this._depth);\r\n\t\t} else if (this._clearDepth) {\r\n\t\t\tLayaGL.renderEngine.clearRenderTexture(RenderClearFlag.Depth, linearBgColor, this._depth);\r\n\t\t} else if (this._clearColor) {\r\n\t\t\tLayaGL.renderEngine.clearRenderTexture(RenderClearFlag.Color, linearBgColor, this._depth);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\trecover(): void {\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { ILaya3D } from \"../../../../../ILaya3D\";\r\nimport { Camera } from \"../../Camera\";\r\nimport { Material } from \"../../material/Material\";\r\nimport { BaseRender } from \"../BaseRender\";\r\nimport { RenderContext3D } from \"../RenderContext3D\";\r\nimport { RenderElement } from \"../RenderElement\";\r\nimport { Command } from \"./Command\";\r\nimport { CommandBuffer } from \"./CommandBuffer\";\r\n\r\nexport class DrawRenderCMD extends Command {\r\n    /**@internal */\r\n    private static _pool: any[] = [];\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    static create(render: BaseRender, material: Material, subShaderIndex: number, commandBuffer: CommandBuffer): DrawRenderCMD {\r\n        var cmd: DrawRenderCMD;\r\n        cmd = DrawRenderCMD._pool.length > 0 ? DrawRenderCMD._pool.pop() : new DrawRenderCMD();\r\n        cmd._render = render;\r\n        cmd.material = material;\r\n        cmd._subShaderIndex = subShaderIndex;\r\n        cmd._commandBuffer = commandBuffer;\r\n        return cmd;\r\n    }\r\n\r\n\r\n\r\n    /**@internal */\r\n    private _material: Material;\r\n    /**@internal */\r\n    private _render: BaseRender;\r\n    /**@internal */\r\n    private _subShaderIndex: number;\r\n\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _elementRender(renderElement: RenderElement, context: RenderContext3D): void {\r\n        renderElement.renderSubShader = this._material._shader.getSubShaderAt(this._subShaderIndex);//TODO\r\n        renderElement.material = this._material;\r\n        context.drawRenderElement(renderElement);\r\n    }\r\n\r\n    set material(value: Material) {\r\n        this._material && this._material._removeReference(1);\r\n        this._material = value;\r\n        this._material && this._material._addReference(1);\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     */\r\n    run(): void {\r\n        if (!this._material)\r\n            throw \"This render command material cannot be empty\";\r\n        this.setContext(this._commandBuffer._context);\r\n        var context = this._context;\r\n        context._contextOBJ.applyContext(Camera._updateMark);\r\n        var renderElements = this._render._renderElements;\r\n        for (var i: number = 0, n = renderElements.length; i < n; i++) {\r\n            var renderelement = renderElements[i];\r\n            //change Material\r\n            let mat = renderelement.material;\r\n            this._elementRender(renderelement, context);\r\n            //Recover Material\r\n            renderelement.material = mat;\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     */\r\n    recover(): void {\r\n        DrawRenderCMD._pool.push(this);\r\n        super.recover();\r\n        this._material && this._material._removeReference(1);\r\n        this._material = null;\r\n    }\r\n\r\n    destroy(): void {\r\n        super.destroy();\r\n        this._material && this._material._removeReference(1);\r\n        this._material = null;\r\n    }\r\n\r\n}","import { Command } from \"./Command\";\r\nimport { BaseTexture } from \"../../../../resource/BaseTexture\";\r\nimport { CommandBuffer } from \"./CommandBuffer\";\r\nimport { RenderContext3D } from \"../RenderContext3D\";\r\nimport { LayaGL } from \"../../../../layagl/LayaGL\";\r\nimport { ShaderDataItem, ShaderDataType } from \"../../../../RenderEngine/RenderShader/ShaderData\";\r\nimport { Color } from \"../../../../maths/Color\";\r\nimport { Matrix4x4 } from \"../../../../maths/Matrix4x4\";\r\nimport { Vector2 } from \"../../../../maths/Vector2\";\r\nimport { Vector3 } from \"../../../../maths/Vector3\";\r\nimport { Vector4 } from \"../../../../maths/Vector4\";\r\n\r\n/**\r\n * @internal\r\n * <code>SetShaderDataTextureCMD</code> 类用于创建设置渲染目标指令。\r\n */\r\nexport class SetGlobalShaderDataCMD extends Command {\r\n\t/**@internal */\r\n\tprivate static _pool: any[] = [];\r\n\t/**@internal */\r\n\tprivate _nameID: number = 0;\r\n\t/**@internal */\r\n\tprivate _value: ShaderDataItem = null;\r\n\t/**@internal */\r\n\tprivate _dataType:number = -1;\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic create(nameID: number, value:any,shaderDataType:ShaderDataType,commandBuffer:CommandBuffer): SetGlobalShaderDataCMD {\r\n\t\tvar cmd: SetGlobalShaderDataCMD;\r\n\t\tcmd = SetGlobalShaderDataCMD._pool.length > 0 ? SetGlobalShaderDataCMD._pool.pop() : new SetGlobalShaderDataCMD();\r\n\t\tcmd._nameID = nameID;\r\n\t\tcmd._value = value;\r\n\t\tcmd._dataType = shaderDataType;\r\n\t\tcmd._commandBuffer = commandBuffer;\r\n\t\treturn cmd;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\trun(): void {\r\n\t\t//var shaderData:ShaderData = (this._commandBuffer._camera.scene as Scene3D)._shaderValues;\r\n\t\tlet context = RenderContext3D._instance;\r\n\t\tlet shaderData = context._contextOBJ.globalShaderData;\r\n\t\tif(!shaderData)\r\n\t\tshaderData = context._contextOBJ.globalShaderData = LayaGL.renderOBJCreate.createShaderData(null);\r\n\t\tswitch(this._dataType){\r\n\t\t\tcase ShaderDataType.Int:\r\n\t\t\t\tshaderData.setInt(this._nameID,this._value as number);\r\n\t\t\t\tbreak;\r\n\t\t\tcase ShaderDataType.Float:\r\n\t\t\t\tshaderData.setNumber(this._nameID,this._value as number);\r\n\t\t\t\tbreak;\r\n\t\t\tcase ShaderDataType.Bool:\r\n\t\t\t\tshaderData.setBool(this._nameID,this._value as boolean);\r\n\t\t\t\tbreak;\r\n\t\t\tcase ShaderDataType.Matrix4x4:\r\n\t\t\t\tshaderData.setMatrix4x4(this._nameID,this._value as Matrix4x4);\r\n\t\t\t\tbreak;\r\n\t\t\tcase ShaderDataType.Texture2D:\r\n\t\t\t\tshaderData.setTexture(this._nameID,this._value as BaseTexture);\r\n\t\t\t\tbreak;\r\n\t\t\tcase ShaderDataType.Vector4:\r\n\t\t\t\tshaderData.setVector(this._nameID,this._value as Vector4);\r\n\t\t\t\tbreak;\r\n\t\t\tcase ShaderDataType.Vector2:\r\n\t\t\t\tshaderData.setVector2(this._nameID,this._value as Vector2);\r\n\t\t\t\tbreak;\r\n\t\t\tcase ShaderDataType.Vector3:\r\n\t\t\t\tshaderData.setVector3(this._nameID,this._value as Vector3);\r\n\t\t\t\tbreak;\r\n\t\t\tcase ShaderDataType.Buffer:\r\n\t\t\t\tshaderData.setBuffer(this._nameID,this._value as Float32Array);\r\n\t\t\t\tbreak;\r\n\t\t\tcase ShaderDataType.Color:\r\n\t\t\t\tshaderData.setColor(this._nameID,this._value as Color);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow \"no type shaderValue on this CommendBuffer\";\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\trecover(): void {\r\n\t\tSetGlobalShaderDataCMD._pool.push(this);\r\n\t\tthis._nameID = 0;\r\n\t\tthis._value = null;\r\n\t\tthis._dataType = -1;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { DrawType } from \"../../RenderEngine/RenderEnum/DrawType\";\r\nimport { MeshTopology } from \"../../RenderEngine/RenderEnum/RenderPologyMode\";\r\nimport { GeometryElement } from \"../core/GeometryElement\";\r\nimport { RenderContext3D } from \"../core/render/RenderContext3D\";\r\nimport { SubMesh } from \"../resource/models/SubMesh\";\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class MeshInstanceGeometry extends GeometryElement {\r\n    private _subMesh:SubMesh;\r\n    constructor(subMesh: SubMesh) {\r\n        super(subMesh?subMesh._geometryElementOBj.mode:MeshTopology.Triangles, DrawType.DrawElementInstance);\r\n        this._subMesh = subMesh;\r\n        if(subMesh)\r\n        this.indexFormat = subMesh._mesh.indexFormat;\r\n    }\r\n\r\n    set subMesh(value:SubMesh){\r\n        this._subMesh = value;\r\n        if(value)\r\n        this.indexFormat = value._mesh.indexFormat;\r\n        this.mode = value._geometryElementOBj.mode;\r\n    }\r\n\r\n    get subMesh():SubMesh{\r\n        return this._subMesh\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * UpdateGeometry Data\r\n     */\r\n    _updateRenderParams(state: RenderContext3D): void {\r\n        this.clearRenderParams();\r\n\t\tthis.setDrawElemenParams(this._subMesh.indexCount, this._subMesh._indexStart * 2);\r\n    }\r\n\r\n}","import { LayaGL } from \"../../../../layagl/LayaGL\";\r\nimport { BufferUsage } from \"../../../../RenderEngine/RenderEnum/BufferTargetType\";\r\nimport { VertexBuffer } from \"../../../../RenderEngine/VertexBuffer\";\r\nimport { VertexBuffer3D } from \"../../../graphics/VertexBuffer3D\";\r\nimport { Mesh } from \"../../../resource/models/Mesh\";\r\nimport { Material } from \"../../material/Material\";\r\nimport { Transform3D } from \"../../Transform3D\";\r\nimport { Command } from \"./Command\";\r\nimport { CommandBuffer } from \"./CommandBuffer\";\r\nimport { MaterialInstancePropertyBlock } from \"./MaterialInstancePropertyBlock\";\r\nimport { RenderElement } from \"../RenderElement\";\r\nimport { MeshInstanceGeometry } from \"../../../graphics/MeshInstanceGeometry\";\r\nimport { RenderContext3D } from \"../RenderContext3D\";\r\nimport { BaseRender } from \"../../../core/render/BaseRender\";\r\nimport { MeshSprite3DShaderDeclaration } from \"../../MeshSprite3DShaderDeclaration\";\r\nimport { Camera } from \"../../Camera\";\r\nimport { Matrix4x4 } from \"../../../../maths/Matrix4x4\";\r\nimport { BufferState } from \"../../../../webgl/utils/BufferState\";\r\nimport { VertexMesh } from \"../../../../RenderEngine/RenderShader/VertexMesh\";\r\n\r\n\r\nexport class DrawMeshInstancedCMD extends Command {\r\n    /**@internal */\r\n    private static _pool: DrawMeshInstancedCMD[] = [];\r\n    /**设置最大DrawInstance数 */\r\n    static maxInstanceCount = 1024;\r\n\r\n    /**\r\n     * 创建一个命令流\r\n     * @internal\r\n     */\r\n    static create(mesh: Mesh, subMeshIndex: number, matrixs: Matrix4x4[], material: Material, subShaderIndex: number, instanceProperty: MaterialInstancePropertyBlock, drawnums: number, commandBuffer: CommandBuffer): DrawMeshInstancedCMD {\r\n        var cmd: DrawMeshInstancedCMD;\r\n        if ((matrixs && matrixs.length > DrawMeshInstancedCMD.maxInstanceCount) || drawnums > DrawMeshInstancedCMD.maxInstanceCount) {\r\n            throw \"the number of renderings exceeds the maximum number of merges\";\r\n        }\r\n        cmd = DrawMeshInstancedCMD._pool.length > 0 ? DrawMeshInstancedCMD._pool.pop() : new DrawMeshInstancedCMD();\r\n\r\n\r\n        cmd._matrixs = matrixs;\r\n        cmd.material = material;\r\n        cmd._subMeshIndex = subMeshIndex;\r\n        cmd._subShaderIndex = subShaderIndex;\r\n        cmd._commandBuffer = commandBuffer;\r\n        cmd._instanceProperty = instanceProperty;\r\n        cmd._drawnums = drawnums;\r\n        cmd.mesh = mesh;\r\n        matrixs && cmd._updateWorldMatrixBuffer();\r\n        cmd._setInstanceBuffer();\r\n        cmd.setContext(RenderContext3D._instance);\r\n        return cmd;\r\n    }\r\n\r\n    /**@internal */\r\n    private _material: Material;\r\n    /**@internal */\r\n    private _matrixs: Matrix4x4[];\r\n    /**@internal */\r\n    private _subMeshIndex: number;\r\n    /**@internal */\r\n    private _subShaderIndex: number = 0;\r\n    /**@internal */\r\n    private _mesh: Mesh;\r\n    /**@internal */\r\n    private _instanceProperty: MaterialInstancePropertyBlock;\r\n    /** @internal */\r\n    private _instanceBufferState: BufferState;\r\n    /** @internal */\r\n    private _drawnums: number;\r\n    /**@internal 世界矩阵数据*/\r\n    private _instanceWorldMatrixData: Float32Array;\r\n    /**@internal 世界矩阵buffer*/\r\n    private _instanceWorldMatrixBuffer: VertexBuffer3D;\r\n    /**@internal */\r\n    private _instanceGeometryArray: MeshInstanceGeometry[];\r\n    /**@internal */\r\n    private _instanceRenderElementArray: RenderElement[];\r\n    /**@internal */\r\n    _byteCount: number;\r\n    /**@internal */\r\n    _transform: Transform3D;\r\n    /**@internal */\r\n    _instanceRenderElement: RenderElement;\r\n    /**@internal */\r\n    _render: BaseRender;\r\n\r\n\r\n    constructor() {\r\n        super();\r\n        this._transform = LayaGL.renderOBJCreate.createTransform(null);\r\n        this._instanceRenderElementArray = [];\r\n        this._instanceGeometryArray = [];\r\n        this._instanceWorldMatrixData = new Float32Array(DrawMeshInstancedCMD.maxInstanceCount * 16);\r\n        this._instanceWorldMatrixBuffer = LayaGL.renderOBJCreate.createVertexBuffer3D(this._instanceWorldMatrixData.length * 4, BufferUsage.Dynamic, false);\r\n        this._instanceWorldMatrixBuffer.vertexDeclaration = VertexMesh.instanceWorldMatrixDeclaration;\r\n        this._instanceWorldMatrixBuffer.instanceBuffer = true;\r\n        this._render = new BaseRender();\r\n        this._render._shaderValues.addDefine(MeshSprite3DShaderDeclaration.SHADERDEFINE_GPU_INSTANCE);\r\n\r\n    }\r\n\r\n    set material(value: Material) {\r\n        this._material && this._material._removeReference(1);\r\n        this._material = value;\r\n        this._material && this._material._addReference(1);\r\n    }\r\n\r\n    get bufferState() {\r\n        return this._instanceWorldMatrixBuffer;\r\n    }\r\n\r\n    set mesh(value: Mesh) {\r\n\r\n        if (this._mesh == value)\r\n            return;\r\n        BaseRender.changeVertexDefine(this._mesh, value, this._render._shaderValues);\r\n        this._mesh = value;\r\n        if (!this._mesh)\r\n            return;\r\n        let submeshs = this._mesh._subMeshes;\r\n        if (this._subMeshIndex == -1) {\r\n            for (let i = 0, n = submeshs.length; i < n; i++) {\r\n                let element = this._instanceRenderElementArray[i] = this._instanceRenderElementArray[i] ? this._instanceRenderElementArray[i] : new RenderElement();\r\n                let geometry = this._instanceGeometryArray[i] = this._instanceGeometryArray[i] ? this._instanceGeometryArray[i] : new MeshInstanceGeometry(submeshs[i]);\r\n                element.setGeometry(geometry);\r\n                element.transform = this._transform;\r\n                element.material = this._material;\r\n                element.renderSubShader = this._material._shader.getSubShaderAt(this._subShaderIndex);\r\n                element._subShaderIndex = this._subShaderIndex;\r\n                element.render = this._render;\r\n\r\n                geometry.bufferState = this._instanceBufferState;\r\n                geometry.instanceCount = this._drawnums;\r\n            }\r\n        } else {\r\n            let element = this._instanceRenderElementArray[0] = this._instanceRenderElementArray[0] ? this._instanceRenderElementArray[0] : new RenderElement();\r\n            let geometry = this._instanceGeometryArray[0] = this._instanceGeometryArray[0] ? this._instanceGeometryArray[0] : new MeshInstanceGeometry(submeshs[this._subMeshIndex]);\r\n            element.setGeometry(geometry);\r\n            element.transform = this._transform;\r\n            element.material = this._material;\r\n            element.render = this._render;\r\n            element.renderSubShader = this._material._shader.getSubShaderAt(this._subShaderIndex);\r\n            geometry.bufferState = this._instanceBufferState;\r\n            geometry.instanceCount = this._drawnums;\r\n        }\r\n\r\n    }\r\n\r\n    get mesh(): Mesh {\r\n        return this._mesh;\r\n    }\r\n\r\n    /**\r\n * @internal\r\n     */\r\n    private _setInstanceBuffer(): void {\r\n        if (!this._instanceBufferState) {\r\n            this._instanceBufferState = new BufferState();\r\n        }\r\n        let instanceBufferState = this._instanceBufferState;\r\n\r\n        let vertexArray: Array<VertexBuffer> = [];\r\n        let meshVertexBuffer = this._mesh._bufferState._vertexBuffers;\r\n        meshVertexBuffer.forEach(element => {\r\n            vertexArray.push(element);\r\n        });\r\n        vertexArray.push(this._instanceWorldMatrixBuffer);\r\n        let propertyMap = this._instanceProperty._propertyMap;\r\n        for (let i in propertyMap) {\r\n            vertexArray.push(propertyMap[i]._vertexBuffer);\r\n        }\r\n        instanceBufferState.applyState(vertexArray, this._mesh._indexBuffer);\r\n        this._instanceGeometryArray.forEach(element => {\r\n            element.bufferState = instanceBufferState;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 更新世界矩阵buffer\r\n     * @internal\r\n     */\r\n    private _updateWorldMatrixBuffer() {\r\n        let worldMatrixData: Float32Array = this._instanceWorldMatrixData;\r\n        let count: number = this._drawnums;\r\n        for (let i = 0; i < count; i++) {\r\n            worldMatrixData.set(this._matrixs[i].elements, i * 16);\r\n        }\r\n        let worldBuffer: VertexBuffer3D = this._instanceWorldMatrixBuffer;\r\n        worldBuffer.orphanStorage();\r\n        worldBuffer.setData(worldMatrixData.buffer, 0, 0, count * 64);\r\n    }\r\n\r\n    /**\r\n     * 重置DrawInstance的世界矩阵数组\r\n     * @param worldMatrixArray \r\n     */\r\n    setWorldMatrix(worldMatrixArray: Matrix4x4[]): void {\r\n        if (worldMatrixArray.length < this._drawnums)\r\n            throw \"worldMatrixArray length is less then drawnums\";\r\n        this._matrixs = worldMatrixArray;\r\n        this._matrixs && this._updateWorldMatrixBuffer();\r\n    }\r\n\r\n    /**\r\n     * 重置渲染个数\r\n     * @param drawNums \r\n     */\r\n    setDrawNums(drawNums: number): void {\r\n        if (this._matrixs && this._matrixs.length < drawNums)\r\n            throw \"worldMatrixArray length is less then drawnums\";\r\n        this._drawnums = drawNums;\r\n        let submeshs = this._mesh._subMeshes;\r\n        if (this._subMeshIndex == -1) {\r\n            for (let i = 0, n = submeshs.length; i < n; i++) {\r\n                let geometry = this._instanceGeometryArray[i] ? this._instanceGeometryArray[i] : new MeshInstanceGeometry(submeshs[i]);\r\n                geometry.instanceCount = this._drawnums;\r\n            }\r\n        } else {\r\n            let geometry = this._instanceGeometryArray[0] ? this._instanceGeometryArray[0] : new MeshInstanceGeometry(submeshs[0]);\r\n            geometry.instanceCount = this._drawnums;\r\n        }\r\n        this._matrixs && this._updateWorldMatrixBuffer();\r\n    }\r\n\r\n    run(): void {\r\n        //update blockData\r\n        let context = RenderContext3D._instance;\r\n        context._contextOBJ.applyContext(Camera._updateMark);\r\n        let propertyMap = this._instanceProperty._propertyMap;\r\n        for (let i in propertyMap) {\r\n            //更新自定义Instancebuffer\r\n            propertyMap[i].updateVertexBufferData(this._drawnums);\r\n        }\r\n\r\n        let submeshs = this.mesh._subMeshes\r\n        if (this._subMeshIndex == -1) {\r\n            for (let i = 0, n = submeshs.length; i < n; i++) {\r\n                let element = this._instanceRenderElementArray[i];\r\n                context.drawRenderElement(element);\r\n            }\r\n        } else {\r\n            let element = this._instanceRenderElementArray[0];\r\n            context.drawRenderElement(element);\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     */\r\n    recover(): void {\r\n        DrawMeshInstancedCMD._pool.push(this);\r\n        super.recover();\r\n        this._material && this._material._removeReference(1);\r\n        this._material = null;\r\n        this._instanceBufferState.destroy();\r\n        this._instanceBufferState = null;\r\n        delete this._instanceRenderElementArray;\r\n        this._instanceRenderElementArray = [];\r\n        delete this._instanceGeometryArray;\r\n        this._instanceGeometryArray = [];\r\n        this.mesh = null;\r\n\r\n    }\r\n\r\n    destroy(): void {\r\n        super.destroy();\r\n        this._material && this._material._removeReference(1);\r\n        this._material = null;\r\n        this._instanceBufferState.destroy();\r\n        this._instanceBufferState = null;\r\n        delete this._instanceRenderElementArray;\r\n        this._instanceRenderElementArray = [];\r\n        delete this._instanceGeometryArray;\r\n        this._instanceGeometryArray = [];\r\n        this.mesh = null;\r\n    }\r\n\r\n}","\r\nimport { Camera } from \"../../Camera\";\r\nimport { BlitScreenQuadCMD } from \"./BlitScreenQuadCMD\";\r\nimport { SetRenderTargetCMD } from \"./SetRenderTargetCMD\";\r\nimport { Command } from \"./Command\";\r\nimport { BaseTexture } from \"../../../../resource/BaseTexture\";\r\nimport { Mesh } from \"../../../resource/models/Mesh\";\r\nimport { Material } from \"../../material/Material\";\r\nimport { SetShaderDataCMD } from \"./SetShaderDataCMD\";\r\nimport { DrawMeshCMD } from \"./DrawMeshCMD\";\r\nimport { RenderContext3D } from \"../RenderContext3D\";\r\nimport { ClearRenderTextureCMD } from \"./ClearRenderTextureCMD\";\r\nimport { BaseRender } from \"../BaseRender\";\r\nimport { DrawRenderCMD } from \"./DrawRenderCMD\";\r\nimport { SetGlobalShaderDataCMD } from \"./SetGlobalShaderDataCMD\";\r\nimport { DrawMeshInstancedCMD } from \"./DrawMeshInstancedCMD\";\r\nimport { MaterialInstancePropertyBlock } from \"./MaterialInstancePropertyBlock\";\r\nimport { LayaGL } from \"../../../../layagl/LayaGL\";\r\nimport { RenderCapable } from \"../../../../RenderEngine/RenderEnum/RenderCapable\";\r\nimport { Shader3D } from \"../../../../RenderEngine/RenderShader/Shader3D\";\r\nimport { ShaderData, ShaderDataType } from \"../../../../RenderEngine/RenderShader/ShaderData\";\r\nimport { Stat } from \"../../../../utils/Stat\";\r\nimport { Color } from \"../../../../maths/Color\";\r\nimport { Matrix4x4 } from \"../../../../maths/Matrix4x4\";\r\nimport { Vector2 } from \"../../../../maths/Vector2\";\r\nimport { Vector3 } from \"../../../../maths/Vector3\";\r\nimport { Vector4 } from \"../../../../maths/Vector4\";\r\nimport { RenderTexture } from \"../../../../resource/RenderTexture\";\r\n\r\n/**\r\n * <code>CommandBuffer</code> 类用于创建命令流。\r\n */\r\nexport class CommandBuffer {\r\n\t/**@internal */\r\n\t_name: string\r\n\t/**@internal */\r\n\tprivate _shadow:boolean = false;\r\n\t/**@internal */\r\n\t_camera: Camera = null;\r\n\t/**@internal */\r\n\t_context: RenderContext3D;\r\n\t/**@internal */\r\n\tprivate _commands: Command[] = [];\r\n\r\n\r\n\t/**\r\n\t * 创建一个 <code>CommandBuffer</code> 实例。\r\n\t */\r\n\tconstructor(name: string = null,shadowCaster:boolean = false) {\r\n\t\tthis._name = name;\r\n\t\tthis._shadow = shadowCaster;\r\n\t}\r\n\r\n\tget name(): string {\r\n\t\treturn this._name;\r\n\t}\r\n\r\n\tget casterShadow(){\r\n\t\treturn this._shadow;\r\n\t}\r\n\t\r\n\tset context(value:RenderContext3D){\r\n\t\tthis._context = value;\r\n\t}\r\n\r\n\tget context(){\r\n\t\treturn this._context;\r\n\t}\r\n\r\n\t/**\r\n\t * 调用所有渲染指令\r\n\t */\r\n\t_apply(): void {\r\n\t\tfor (var i: number = 0, n: number = this._commands.length; i < n; i++)\r\n\t\t\tthis._commands[i].run();\r\n\t\tStat.cmdDrawCall+=this._commands.length;\r\n\t}\r\n\r\n\t_applyOne(): boolean {\r\n\t\tif (this._commands.length) {\r\n\t\t\tvar cmd = this._commands.shift();\r\n\t\t\tcmd.run();\r\n\t\t\tcmd.recover();\r\n\t\t}\r\n\t\treturn this._commands.length > 0;\r\n\t}\r\n\r\n\tgetCommandsSize(): number {\r\n\t\treturn this._commands.length;\r\n\t}\r\n\r\n\t/**\r\n\t * 设置shader图片数据\r\n\t * @param shaderData shader数据集合\r\n\t * @param nameID 图片UniformID\r\n\t * @param source 图片源\r\n\t */\r\n\tsetShaderDataTexture(shaderData: ShaderData, nameID: number, source: BaseTexture): void {\r\n\t\tthis._commands.push(SetShaderDataCMD.create(shaderData, nameID, source, ShaderDataType.Texture2D, this));\r\n\t}\r\n\r\n\t/**\r\n\t * 设置全局纹理数据\r\n\t * @param nameID 图片uniformID\r\n\t * @param source 图片源\r\n\t */\r\n\tsetGlobalTexture(nameID: number, source: BaseTexture) {\r\n\t\tthis._commands.push(SetGlobalShaderDataCMD.create(nameID, source, ShaderDataType.Texture2D, this));\r\n\t}\r\n\r\n\t/**\r\n\t * 设置shader Vector4数据\r\n\t * @param shaderData shader数据集合\r\n\t * @param nameID 数据ID\r\n\t * @param value 数据\r\n\t */\r\n\tsetShaderDataColor(shaderData: ShaderData, nameID: number, value: Color): void {\r\n\t\tthis._commands.push(SetShaderDataCMD.create(shaderData, nameID, value, ShaderDataType.Color, this));\r\n\t}\r\n\r\n\t/**\r\n\t * 设置全局Vector4数据\r\n\t * @param nameID Vector4数据ID\r\n\t * @param source 数据\r\n\t */\r\n\tsetGlobalColor(nameID: number, source: Color) {\r\n\r\n\t\tthis._commands.push(SetGlobalShaderDataCMD.create(nameID, source, ShaderDataType.Color, this));\r\n\t}\r\n\r\n\t/**\r\n\t * 设置shader Vector4数据\r\n\t * @param shaderData shader数据集合\r\n\t * @param nameID 数据ID\r\n\t * @param value 数据\r\n\t */\r\n\tsetShaderDataVector(shaderData: ShaderData, nameID: number, value: Vector4): void {\r\n\t\tthis._commands.push(SetShaderDataCMD.create(shaderData, nameID, value, ShaderDataType.Vector4, this));\r\n\t}\r\n\r\n\t/**\r\n\t * 设置全局Vector4数据\r\n\t * @param nameID Vector4数据ID\r\n\t * @param source 数据\r\n\t */\r\n\tsetGlobalVector(nameID: number, source: Vector4) {\r\n\r\n\t\tthis._commands.push(SetGlobalShaderDataCMD.create(nameID, source, ShaderDataType.Vector4, this));\r\n\t}\r\n\r\n\t/**\r\n\t * 设置shader Vector3数据\r\n\t * @param shaderData shader数据集合\r\n\t * @param nameID 数据ID\r\n\t * @param value 数据\r\n\t */\r\n\tsetShaderDataVector3(shaderData: ShaderData, nameID: number, value: Vector3): void {\r\n\t\tthis._commands.push(SetShaderDataCMD.create(shaderData, nameID, value, ShaderDataType.Vector3, this));\r\n\t}\r\n\r\n\t/**\r\n\t * 设置全局Vector3数据\r\n\t * @param nameID 数据ID\r\n\t * @param source 数据\r\n\t */\r\n\tsetGlobalVector3(nameID: number, source: Vector3) {\r\n\r\n\t\tthis._commands.push(SetGlobalShaderDataCMD.create(nameID, source, ShaderDataType.Vector3, this));\r\n\t}\r\n\r\n\t/**\r\n\t * 设置shader Vector2数据\r\n\t * @param shaderData shader数据集合\r\n\t * @param nameID 数据ID\r\n\t * @param value 数据\r\n\t */\r\n\tsetShaderDataVector2(shaderData: ShaderData, nameID: number, value: Vector2): void {\r\n\t\tthis._commands.push(SetShaderDataCMD.create(shaderData, nameID, value, ShaderDataType.Vector2, this));\r\n\t}\r\n\r\n\t/**\r\n\t * 设置全局Vector2数据\r\n\t * @param nameID 数据ID\r\n\t * @param source 数据\r\n\t */\r\n\tsetGlobalVector2(nameID: number, source: Vector2) {\r\n\r\n\t\tthis._commands.push(SetGlobalShaderDataCMD.create(nameID, source, ShaderDataType.Vector2, this));\r\n\t}\r\n\r\n\t/**\r\n\t * 设置shader Number属性\r\n\t * @param shaderData shader数据集合\r\n\t * @param nameID 数据ID\r\n\t * @param value 数据\r\n\t */\r\n\tsetShaderDataNumber(shaderData: ShaderData, nameID: number, value: number): void {\r\n\t\tthis._commands.push(SetShaderDataCMD.create(shaderData, nameID, value, ShaderDataType.Float, this));\r\n\t}\r\n\r\n\t/**\r\n\t * 设置全局number属性\r\n\t * @param nameID 数据ID\r\n\t * @param source 数据\r\n\t */\r\n\tsetGlobalNumber(nameID: number, source: number) {\r\n\r\n\t\tthis._commands.push(SetGlobalShaderDataCMD.create(nameID, source, ShaderDataType.Float, this));\r\n\t}\r\n\r\n\t/**\r\n\t * 设置shader Int属性\r\n\t * @param shaderData shader数据集合\r\n\t * @param nameID 数据ID\r\n\t * @param value 数据\r\n\t */\r\n\tsetShaderDataInt(shaderData: ShaderData, nameID: number, value: number): void {\r\n\t\tthis._commands.push(SetShaderDataCMD.create(shaderData, nameID, value, ShaderDataType.Int, this));\r\n\t}\r\n\r\n\t/**\r\n\t * 设置全局int属性\r\n\t * @param nameID 数据ID\r\n\t * @param source 数据\r\n\t */\r\n\tsetGlobalInt(nameID: number, source: number) {\r\n\r\n\t\tthis._commands.push(SetGlobalShaderDataCMD.create(nameID, source, ShaderDataType.Int, this));\r\n\t}\r\n\r\n\t/**\r\n\t * 设置shader Matrix属性\r\n\t * @param shaderData shader数据集合\r\n\t * @param nameID 数据ID\r\n\t * @param value 数据\r\n\t */\r\n\tsetShaderDataMatrix(shaderData: ShaderData, nameID: number, value: Matrix4x4): void {\r\n\t\tthis._commands.push(SetShaderDataCMD.create(shaderData, nameID, value, ShaderDataType.Matrix4x4, this));\r\n\t}\r\n\r\n\tsetShaderDefine(shaderData: ShaderData, define: string, value: boolean): void {\r\n\t\tthis._commands.push(SetShaderDataCMD.create(shaderData, define, value, SetShaderDataCMD.ShaderDataType_define, this));\r\n\t}\r\n\r\n\t/**\r\n\t * 设置全局Matrix属性\r\n\t * @param nameID 数据ID\r\n\t * @param source 数据\r\n\t */\r\n\tsetGlobalMatrix(nameID: number, source: number) {\r\n\r\n\t\tthis._commands.push(SetGlobalShaderDataCMD.create(nameID, source, ShaderDataType.Matrix4x4, this));\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * 添加一条通过全屏四边形将源纹理渲染到目标渲染纹理指令。\r\n\t * @param\tsource 源纹理. 如果为null,前渲染结果为原纹理\r\n\t * @param\tdest  目标纹理. 如果为null，直接渲染到最终画布\r\n\t * @param\toffsetScale 偏移缩放。\r\n\t * @param\tshader 着色器,如果为null使用内部拷贝着色器,不做任何处理。\r\n\t * @param\tshaderData 着色器数据,如果为null只接收sourceTexture。\r\n\t * @param\tsubShader subShader索引,默认值为0。\r\n\t */\r\n\tblitScreenQuad(source: BaseTexture, dest: RenderTexture, offsetScale: Vector4 = null, shader: Shader3D = null, shaderData: ShaderData = null, subShader: number = 0): void {\r\n\t\tthis._commands.push(BlitScreenQuadCMD.create(source, dest, offsetScale, shader, shaderData, subShader, BlitScreenQuadCMD._SCREENTYPE_QUAD, this));\r\n\t}\r\n\r\n\t/**\r\n\t * 添加一条通过全屏四边形将源纹理渲染到目标渲染纹理指令。\r\n\t * @param source 源纹理 如果为null,前渲染结果为原纹理\r\n\t * @param dest 目标纹理 如果为null，直接渲染到最终画布\r\n\t * @param offsetScale 偏移缩放\r\n\t * @param material 材质\r\n\t * @param subShader shader索引\r\n\t */\r\n\tblitScreenQuadByMaterial(source: BaseTexture, dest: RenderTexture, offsetScale: Vector4 = null, material: Material = null, subShader: number = 0): void {\r\n\t\tvar shader: Shader3D;\r\n\t\tvar shaderData: ShaderData;\r\n\t\tif (material) {\r\n\t\t\tshader = material._shader;\r\n\t\t\tshaderData = material.shaderData\r\n\t\t}\r\n\t\tthis._commands.push(BlitScreenQuadCMD.create(source, dest, offsetScale, shader, shaderData, subShader, BlitScreenQuadCMD._SCREENTYPE_QUAD, this));\r\n\t}\r\n\r\n\t/**\r\n\t * 添加一条通过全屏三角形将源纹理渲染到目标渲染纹理指令。\r\n\t * @param\tsource 源纹理。\r\n\t * @param\tdest  目标纹理。\r\n\t * @param\toffsetScale 偏移缩放。\r\n\t * @param\tshader 着色器,如果为null使用内部拷贝着色器,不做任何处理。\r\n\t * @param\tshaderData 着色器数据,如果为null只接收sourceTexture。\r\n\t * @param\tsubShader subShader索引,默认值为0。\r\n\t */\r\n\tblitScreenTriangle(source: BaseTexture, dest: RenderTexture, offsetScale: Vector4 = null, shader: Shader3D = null, shaderData: ShaderData = null, subShader: number = 0): void {\r\n\t\tthis._commands.push(BlitScreenQuadCMD.create(source, dest, offsetScale, shader, shaderData, subShader, BlitScreenQuadCMD._SCREENTYPE_TRIANGLE, this));\r\n\t}\r\n\r\n\t/**\r\n\t * 设置指令渲染目标\r\n\t * @param renderTexture RT渲染目标\r\n\t */\r\n\tsetRenderTarget(renderTexture: RenderTexture): void {\r\n\t\tthis._commands.push(SetRenderTargetCMD.create(renderTexture));\r\n\t}\r\n\r\n\t/**\r\n\t * clear渲染纹理\r\n\t * @param clearColor \r\n\t * @param clearDepth \r\n\t * @param backgroundColor \r\n\t * @param depth \r\n\t */\r\n\tclearRenderTarget(clearColor: boolean, clearDepth: boolean, backgroundColor: Color, depth: number = 1): void {\r\n\t\tthis._commands.push(ClearRenderTextureCMD.create(clearColor, clearDepth, backgroundColor, depth, this));\r\n\t}\r\n\r\n\t/**\r\n\t * 渲染一个Mesh\r\n\t * @param mesh 原始网格信息\r\n\t * @param matrix 网格世界矩阵\r\n\t * @param material 材质\r\n\t * @param submeshIndex 子网格索引 如果索引为\r\n\t * @param subShaderIndex 子shader索引 一般为0\r\n\t */\r\n\tdrawMesh(mesh: Mesh, matrix: Matrix4x4, material: Material, submeshIndex: number, subShaderIndex: number): void {\r\n\t\tthis._commands.push(DrawMeshCMD.create(mesh, matrix, material, submeshIndex, subShaderIndex, this));\r\n\t}\r\n\r\n\t/**\r\n\t * 渲染一个Render\r\n\t * @param render 渲染器\r\n\t * @param material 材质\r\n\t * @param subShaderIndex 子shader索引 一般为0\r\n\t */\r\n\tdrawRender(render: BaseRender, material: Material, subShaderIndex: number): void {\r\n\t\tthis._commands.push(DrawRenderCMD.create(render, material, subShaderIndex, this));\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * 使用instance动态合批的方式渲染一个Mesh\r\n\t * @param mesh 原始网格信息\r\n\t * @param subMeshIndex mesh索引\r\n\t * @param matrixs 渲染的世界矩阵数组，用来描述每个Mesh需要渲染的位置,如果为null，将不创建更新世界矩阵Buffer\r\n\t * @param material 渲染材质\r\n\t * @param subShaderIndex 渲染材质shader索引\r\n\t * @param instanceProperty Instance自定义属性\r\n\t * @param drawnums 渲染个数\r\n\t */\r\n\tdrawMeshInstance(mesh: Mesh, subMeshIndex: number = 0, matrixs: Matrix4x4[], material: Material, subShaderIndex: number = 0, instanceProperty: MaterialInstancePropertyBlock, drawnums: number): any {\r\n\t\tif (!LayaGL.renderEngine.getCapable(RenderCapable.DrawElement_Instance))\r\n\t\t\treturn null;\r\n\t\tvar drawMeshInstancedCMD = DrawMeshInstancedCMD.create(mesh, subMeshIndex, matrixs, material, subShaderIndex, instanceProperty, drawnums, this);\r\n\t\tthis._commands.push(drawMeshInstancedCMD);\r\n\t\treturn drawMeshInstancedCMD;\r\n\t}\r\n\r\n\t/**\r\n\t * add 自定义的渲染命令\r\n\t * @param command \r\n\t */\r\n\taddCustomCMD(command:Command){\r\n\t\tcommand._commandBuffer = this;\r\n\t\tthis._commands.push(command);\r\n\t}\r\n\r\n\t/**\r\n\t *@internal\r\n\t */\r\n\tclear(): void {\r\n\t\tfor (var i: number = 0, n: number = this._commands.length; i < n; i++)\r\n\t\t\tthis._commands[i].recover();\r\n\t\tthis._commands.length = 0;\r\n\t}\r\n\r\n}","/**\r\n * <code>PhysicsSettings</code> 类用于创建物理配置信息。\r\n */\r\nexport class PhysicsSettings {\r\n    /**标志集合。*/\r\n    flags: number = 0;\r\n\r\n    /**物理引擎在一帧中用于补偿减速的最大次数。*/\r\n    maxSubSteps: number = 1;\r\n\r\n    /**物理模拟器帧的间隔时间。*/\r\n    fixedTimeStep: number = 1.0 / 60.0;\r\n}\r\n\r\n\r\n","import { Light } from \"./Light\";\r\n\r\n\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class LightQueue<T extends Light> {\r\n    _length: number = 0;\r\n    _elements: T[] = [];\r\n\r\n    add(light: T): void {\r\n        let index = this._elements.indexOf(light);\r\n        if (index !=-1 && index < this._length) {\r\n            return;\r\n        }\r\n        if (this._length === this._elements.length)\r\n            this._elements.push(light);\r\n        else\r\n            this._elements[this._length] = light;\r\n        this._length++;\r\n    }\r\n\r\n    remove(light: T): void {\r\n        var index: number = this._elements.indexOf(light);\r\n        if(index == -1)\r\n            return;\r\n        this._length--;\r\n        if (index !== this._length) {\r\n            var end: T = this._elements[this._length];\r\n            this._elements[index] = end;\r\n        }\r\n    }\r\n\r\n    shift(): T | undefined {\r\n        this._length--;\r\n        return this._elements.shift();\r\n    }\r\n\r\n    getBrightestLight(): number | undefined {\r\n        var maxIntIndex;\r\n        var maxIntensity: number = -1;\r\n        var elements: T[] = this._elements;\r\n        for (var i: number = 0; i < this._length; i++) {\r\n            var intensity: number = elements[i]._intensity;\r\n            if (maxIntensity < intensity) {\r\n                maxIntensity = intensity;\r\n                maxIntIndex = i;\r\n            }\r\n        }\r\n        return maxIntIndex;\r\n    }\r\n    normalLightOrdering(brightestIndex: number) {\r\n        var firstLight: T = this._elements[0];\r\n        this._elements[0] = this._elements[brightestIndex];\r\n        this._elements[brightestIndex] = firstLight;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class AlternateLightQueue extends LightQueue<Light>{\r\n\r\n    remove(light: Light): void {\r\n        //sort must base added time\r\n        var index: number = this._elements.indexOf(light);\r\n        this._elements.splice(index, 1);\r\n        this._length--;\r\n    }\r\n}\r\n","import { ShaderDefine } from \"../../../RenderEngine/RenderShader/ShaderDefine\";\r\n\r\n/**\r\n * @internal\r\n * 场景宏集合\r\n */\r\nexport class Scene3DShaderDeclaration {\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_FOG: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_FOG_LINEAR: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_FOG_EXP: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_FOG_EXP2: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_DIRECTIONLIGHT: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_POINTLIGHT: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_SPOTLIGHT: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_SHADOW: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_SHADOW_CASCADE: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_SHADOW_SOFT_SHADOW_LOW: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_SHADOW_SOFT_SHADOW_HIGH: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_SHADOW_SPOT: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_SHADOW_SPOT_SOFT_SHADOW_LOW: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_SHADOW_SPOT_SOFT_SHADOW_HIGH: ShaderDefine;\r\n\r\n}","import { Ray } from \"./Ray\";\r\nimport { CollisionUtils } from \"./CollisionUtils\";\r\nimport { IClone } from \"../../utils/IClone\"\r\nimport { Vector3 } from \"../../maths/Vector3\";\r\n\r\n/**\r\n * <code>BoundSphere</code> 类用于创建包围球。\r\n */\r\nexport class BoundSphere implements IClone {\r\n\tprivate static _tempVector3: Vector3 = new Vector3();\r\n\r\n\t/**包围球的中心。*/\r\n\t_center: Vector3;\r\n\t/**包围球的半径。*/\r\n\t_radius: number;\r\n\tset center(value: Vector3) {\r\n\t\tvalue.cloneTo(this._center);\r\n\t}\r\n\r\n\tget center() {\r\n\t\treturn this._center;\r\n\t}\r\n\r\n\tset radius(value: number) {\r\n\t\tthis._radius = value;\r\n\t}\r\n\r\n\tget radius(): number {\r\n\t\treturn this._radius\r\n\t}\r\n\t/**\r\n\t * 创建一个 <code>BoundSphere</code> 实例。\r\n\t * @param\tcenter 包围球的中心。\r\n\t * @param\tradius 包围球的半径。\r\n\t */\r\n\tconstructor(center: Vector3 = new Vector3, radius: number = 0) {\r\n\t\tthis._center = center;\r\n\t\tthis._radius = radius;\r\n\t}\r\n\r\n\ttoDefault(): void {\r\n\t\tthis._center.toDefault();\r\n\t\tthis._radius = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * 从顶点的子队列生成包围球。\r\n\t * @param\tpoints 顶点的队列。\r\n\t * @param\tstart 顶点子队列的起始偏移。\r\n\t * @param\tcount 顶点子队列的顶点数。\r\n\t * @param\tresult 生成的包围球。\r\n\t */\r\n\tstatic createFromSubPoints(points: Vector3[], start: number, count: number, out: BoundSphere): void {\r\n\t\tif (points == null) {\r\n\t\t\tthrow new Error(\"points\");\r\n\t\t}\r\n\r\n\t\t// Check that start is in the correct range \r\n\t\tif (start < 0 || start >= points.length) {\r\n\t\t\tthrow new Error(\"start\" + start + \"Must be in the range [0, \" + (points.length - 1) + \"]\");\r\n\t\t}\r\n\r\n\t\t// Check that count is in the correct range \r\n\t\tif (count < 0 || (start + count) > points.length) {\r\n\t\t\tthrow new Error(\"count\" + count + \"Must be in the range <= \" + points.length + \"}\");\r\n\t\t}\r\n\r\n\t\tvar upperEnd: number = start + count;\r\n\r\n\t\t//Find the center of all points. \r\n\t\tvar center: Vector3 = BoundSphere._tempVector3;\r\n\t\tcenter.x = 0;\r\n\t\tcenter.y = 0;\r\n\t\tcenter.z = 0;\r\n\t\tfor (var i: number = start; i < upperEnd; ++i) {\r\n\t\t\tVector3.add(points[i], center, center);\r\n\t\t}\r\n\r\n\t\tvar outCenter: Vector3 = out.center;\r\n\t\t//This is the center of our sphere. \r\n\t\tVector3.scale(center, 1 / count, outCenter);\r\n\r\n\t\t//Find the radius of the sphere \r\n\t\tvar radius: number = 0.0;\r\n\t\tfor (i = start; i < upperEnd; ++i) {\r\n\t\t\t//We are doing a relative distance comparison to find the maximum distance \r\n\t\t\t//from the center of our sphere. \r\n\t\t\tvar distance: number = Vector3.distanceSquared(outCenter, points[i]);\r\n\r\n\t\t\tif (distance > radius)\r\n\t\t\t\tradius = distance;\r\n\t\t}\r\n\r\n\t\t//Find the real distance from the DistanceSquared. \r\n\t\tout.radius = Math.sqrt(radius);\r\n\t}\r\n\r\n\t/**\r\n\t * 从顶点队列生成包围球。\r\n\t * @param\tpoints 顶点的队列。\r\n\t * @param\tresult 生成的包围球。\r\n\t */\r\n\tstatic createfromPoints(points: Vector3[], out: BoundSphere): void {\r\n\t\tif (points == null) {\r\n\t\t\tthrow new Error(\"points\");\r\n\t\t}\r\n\r\n\t\tBoundSphere.createFromSubPoints(points, 0, points.length, out);\r\n\t}\r\n\r\n\t/**\r\n\t * 判断射线是否与碰撞球交叉，并返回交叉距离。\r\n\t * @param\tray 射线。\r\n\t * @return 距离交叉点的距离，-1表示不交叉。\r\n\t */\r\n\tintersectsRayDistance(ray: Ray): number {\r\n\t\treturn CollisionUtils.intersectsRayAndSphereRD(ray, this);\r\n\t}\r\n\r\n\t/**\r\n\t * 判断射线是否与碰撞球交叉，并返回交叉点。\r\n\t * @param\tray  射线。\r\n\t * @param\toutPoint 交叉点。\r\n\t * @return  距离交叉点的距离，-1表示不交叉。\r\n\t */\r\n\tintersectsRayPoint(ray: Ray, outPoint: Vector3): number {\r\n\t\treturn CollisionUtils.intersectsRayAndSphereRP(ray, this, outPoint);\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @param\tdestObject 克隆源。\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tvar dest: BoundSphere = (<BoundSphere>destObject);\r\n\t\tthis._center.cloneTo(dest._center);\r\n\t\tdest._radius = this._radius;\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @return\t 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar dest: BoundSphere = new BoundSphere(new Vector3(), 0);\r\n\t\tthis.cloneTo(dest);\r\n\t\treturn dest;\r\n\t}\r\n\r\n}\r\n\r\n","import { Plane } from \"../math/Plane\";\r\nimport { ShaderData } from \"../../RenderEngine/RenderShader/ShaderData\";\r\nimport { LayaGL } from \"../../layagl/LayaGL\";\r\nimport { ICameraCullInfo } from \"../../RenderEngine/RenderInterface/RenderPipelineInterface/ICameraCullInfo\";\r\nimport { BoundSphere } from \"../math/BoundSphere\";\r\nimport { Matrix4x4 } from \"../../maths/Matrix4x4\";\r\nimport { Vector3 } from \"../../maths/Vector3\";\r\n\r\n/**\r\n * @internal\r\n * 阴影分割数据。\r\n */\r\nexport class ShadowSliceData {\r\n    cameraShaderValue: ShaderData = LayaGL.renderOBJCreate.createShaderData(null);\r\n    position: Vector3 = new Vector3();\r\n    offsetX: number;\r\n    offsetY: number;\r\n    resolution: number;\r\n    viewMatrix: Matrix4x4 = new Matrix4x4();\r\n    projectionMatrix: Matrix4x4 = new Matrix4x4();\r\n    viewProjectMatrix: Matrix4x4 = new Matrix4x4();\r\n    cullPlanes: Array<Plane> = [new Plane(new Vector3(), 0), new Plane(new Vector3(), 0), new Plane(new Vector3(), 0), new Plane(new Vector3(), 0), new Plane(new Vector3(), 0), new Plane(new Vector3(), 0), new Plane(new Vector3(), 0), new Plane(new Vector3(), 0), new Plane(new Vector3(), 0), new Plane(new Vector3(), 0)];\r\n    cullPlaneCount: number;\r\n    splitBoundSphere: BoundSphere = new BoundSphere(new Vector3(), 0.0);\r\n    sphereCenterZ: number;\r\n}\r\n\r\n/**\r\n * @internal\r\n * 聚光灯阴影数据。\r\n */\r\nexport class ShadowSpotData {\r\n    cameraShaderValue: ShaderData = LayaGL.renderOBJCreate.createShaderData(null);\r\n    position: Vector3 = new Vector3;\r\n    offsetX: number;\r\n    offsetY: number;\r\n    resolution: number;\r\n    viewMatrix: Matrix4x4 = new Matrix4x4();\r\n    projectionMatrix: Matrix4x4 = new Matrix4x4();\r\n    viewProjectMatrix: Matrix4x4 = new Matrix4x4();\r\n    cameraCullInfo: ICameraCullInfo = LayaGL.renderOBJCreate.createCameraCullInfo();\r\n\r\n}\r\n","import { Plane } from \"../math/Plane\";\r\nimport { LayaGL } from \"../../layagl/LayaGL\";\r\nimport { ICameraCullInfo } from \"../../RenderEngine/RenderInterface/RenderPipelineInterface/ICameraCullInfo\";\r\nimport { IShadowCullInfo } from \"../../RenderEngine/RenderInterface/RenderPipelineInterface/IShadowCullInfo\";\r\nimport { Bounds } from \"../math/Bounds\";\r\nimport { ContainmentType } from \"../math/ContainmentType\";\r\nimport { CollisionUtils } from \"../math/CollisionUtils\";\r\nimport { Vector3 } from \"../../maths/Vector3\";\r\n\r\n/**\r\n * @internal\r\n * <code>FrustumCulling</code> 类用于裁剪。\r\n */\r\nexport class FrustumCulling {\r\n\t/**@internal */\r\n\tstatic _cameraCullInfo: ICameraCullInfo;\r\n\t/**@internal */\r\n\tstatic _shadowCullInfo: IShadowCullInfo;\r\n\t/**@internal */\r\n\tprivate static _tempV30: Vector3 = new Vector3();\r\n\t/**@internal */\r\n\tprivate static _tempV31: Vector3 = new Vector3();\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic __init__(): void {\r\n\t\tFrustumCulling._cameraCullInfo = LayaGL.renderOBJCreate.createCameraCullInfo();\r\n\t\tFrustumCulling._shadowCullInfo = LayaGL.renderOBJCreate.createShadowCullInfo();\r\n\t}\r\n\r\n\t// /**\r\n\t//  * @internal\r\n\t//  */\r\n\t// private static _drawTraversalCullingBound(renderList: SingletonList<ISingletonElement>, debugTool: PixelLineSprite3D): void {\r\n\t// \tvar renders: ISingletonElement[] = renderList.elements;\r\n\t// \tfor (var i: number = 0, n: number = renderList.length; i < n; i++) {\r\n\t// \t\tvar color: Color = FrustumCulling._tempColor0;\r\n\t// \t\tcolor.r = 0;\r\n\t// \t\tcolor.g = 1;\r\n\t// \t\tcolor.b = 0;\r\n\t// \t\tcolor.a = 1;\r\n\t// \t\tUtils3D._drawBound(debugTool, ((<BaseRender>renders[i])).bounds._getBoundBox(), color);\r\n\t// \t}\r\n\t// }\r\n\r\n\r\n\t/**\r\n\t * caculate Bounds by ShadowCullInfo\r\n\t * @param bounds \r\n\t * @param cullInfo \r\n\t * @returns \r\n\t */\r\n\tstatic cullingRenderBounds(bounds: Bounds, cullInfo: IShadowCullInfo): boolean {\r\n\t\tvar cullPlaneCount: number = cullInfo.cullPlaneCount;\r\n\t\tvar cullPlanes: Plane[] = cullInfo.cullPlanes;\r\n\r\n\t\tvar min: Vector3 = bounds.getMin();\r\n\t\tvar max: Vector3 = bounds.getMax();\r\n\t\tvar minX: number = min.x;\r\n\t\tvar minY: number = min.y;\r\n\t\tvar minZ: number = min.z;\r\n\t\tvar maxX: number = max.x;\r\n\t\tvar maxY: number = max.y;\r\n\t\tvar maxZ: number = max.z;\r\n\t\t//TODO:通过相机裁剪直接pass\r\n\r\n\t\tvar pass: boolean = true;\r\n\t\t// cull by planes\r\n\t\t// Improve:Maybe use sphre and direction cull can savle the far plane cull\r\n\t\tfor (var j: number = 0; j < cullPlaneCount; j++) {\r\n\t\t\tvar plane: Plane = cullPlanes[j];\r\n\t\t\tvar normal: Vector3 = plane.normal;\r\n\t\t\tif (plane.distance + (normal.x * (normal.x < 0.0 ? minX : maxX)) + (normal.y * (normal.y < 0.0 ? minY : maxY)) + (normal.z * (normal.z < 0.0 ? minZ : maxZ)) < 0.0) {\r\n\t\t\t\tpass = false;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn pass;\r\n\t}\r\n\r\n\t/**\r\n\t * caculate Bounds by ShadowCullInfo\r\n\t * @param bounds \r\n\t * @param cullInfo \r\n\t * @returns \r\n\t */\r\n\tstatic cullingRenderBoundsState(bounds: Bounds, cullInfo: IShadowCullInfo): ContainmentType {\r\n\t\tvar p: Vector3 = FrustumCulling._tempV30, n: Vector3 = FrustumCulling._tempV31;\r\n\t\tvar boxMin: Vector3 = bounds.min;\r\n\t\tvar boxMax: Vector3 = bounds.max;\r\n\t\tvar result: number = ContainmentType.Contains;\r\n\t\tfor (var i = 0, nn = cullInfo.cullPlaneCount; i < nn; i++) {\r\n\t\t\tvar plane: Plane = cullInfo.cullPlanes[i];\r\n\t\t\tvar planeNor: Vector3 = plane.normal;\r\n\r\n\t\t\tif (planeNor.x >= 0) {\r\n\t\t\t\tp.x = boxMax.x;\r\n\t\t\t\tn.x = boxMin.x;\r\n\t\t\t} else {\r\n\t\t\t\tp.x = boxMin.x;\r\n\t\t\t\tn.x = boxMax.x;\r\n\t\t\t}\r\n\t\t\tif (planeNor.y >= 0) {\r\n\t\t\t\tp.y = boxMax.y;\r\n\t\t\t\tn.y = boxMin.y;\r\n\t\t\t} else {\r\n\t\t\t\tp.y = boxMin.y;\r\n\t\t\t\tn.y = boxMax.y;\r\n\t\t\t}\r\n\t\t\tif (planeNor.z >= 0) {\r\n\t\t\t\tp.z = boxMax.z;\r\n\t\t\t\tn.z = boxMin.z;\r\n\t\t\t} else {\r\n\t\t\t\tp.z = boxMin.z;\r\n\t\t\t\tn.z = boxMax.z;\r\n\t\t\t}\r\n\r\n\t\t\tif (CollisionUtils.intersectsPlaneAndPoint(plane, p) === Plane.PlaneIntersectionType_Back)\r\n\t\t\t\treturn ContainmentType.Disjoint;\r\n\r\n\t\t\tif (CollisionUtils.intersectsPlaneAndPoint(plane, n) === Plane.PlaneIntersectionType_Back)\r\n\t\t\t\tresult = ContainmentType.Intersects;\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\r\n}\r\n\r\n","import { LayaGL } from \"../../layagl/LayaGL\";\r\nimport { BaseCamera } from \"../core/BaseCamera\";\r\nimport { Camera } from \"../core/Camera\";\r\nimport { ShadowCascadesMode } from \"../core/light/ShadowCascadesMode\";\r\nimport { ShadowMode } from \"../core/light/ShadowMode\";\r\nimport { ShadowMapFormat, ShadowUtils } from \"../core/light/ShadowUtils\";\r\nimport { RenderContext3D } from \"../core/render/RenderContext3D\";\r\nimport { Scene3D } from \"../core/scene/Scene3D\";\r\nimport { Scene3DShaderDeclaration } from \"../core/scene/Scene3DShaderDeclaration\";\r\nimport { Plane } from \"../math/Plane\";\r\nimport { Light, LightType } from \"../core/light/Light\";\r\nimport { DirectionLightCom } from \"../core/light/DirectionLightCom\";\r\nimport { Sprite3D } from \"../core/Sprite3D\";\r\nimport { SpotLightCom } from \"../core/light/SpotLightCom\";\r\nimport { Config3D } from \"../../../Config3D\";\r\nimport { Shader3D } from \"../../RenderEngine/RenderShader/Shader3D\";\r\nimport { ShaderData } from \"../../RenderEngine/RenderShader/ShaderData\";\r\nimport { UnifromBufferData } from \"../../RenderEngine/UniformBufferData\";\r\nimport { UniformBufferObject } from \"../../RenderEngine/UniformBufferObject\";\r\nimport { BoundFrustum } from \"../math/BoundFrustum\";\r\nimport { ShadowSliceData, ShadowSpotData } from \"./ShadowSliceData\";\r\nimport { RenderClearFlag } from \"../../RenderEngine/RenderEnum/RenderClearFlag\";\r\nimport { Viewport } from \"../math/Viewport\";\r\nimport { IShadowCullInfo } from \"../../RenderEngine/RenderInterface/RenderPipelineInterface/IShadowCullInfo\";\r\nimport { FrustumCulling } from \"../graphics/FrustumCulling\";\r\nimport { BufferUsage } from \"../../RenderEngine/RenderEnum/BufferTargetType\";\r\nimport { Stat } from \"../../utils/Stat\";\r\nimport { ShadowLightType } from \"./ShadowLightType\";\r\nimport { DepthCasterData } from \"../depthMap/DepthCasterData\";\r\nimport { MathUtils3D } from \"../../maths/MathUtils3D\";\r\nimport { Matrix4x4 } from \"../../maths/Matrix4x4\";\r\nimport { Vector3 } from \"../../maths/Vector3\";\r\nimport { Vector4 } from \"../../maths/Vector4\";\r\nimport { RenderTexture } from \"../../resource/RenderTexture\";\r\n\r\n/**\r\n * @internal\r\n * <code>ShadowCasterPass</code> 类用于实现阴影渲染管线\r\n */\r\nexport class ShadowCasterPass {\r\n    /**@internal */\r\n    private static _tempVector30: Vector3 = new Vector3();\r\n    /**@internal */\r\n    private static _tempVector4: Vector4 = new Vector4();\r\n    /**@internal */\r\n    private static _tempMatrix0: Matrix4x4 = new Matrix4x4();\r\n    /** @internal */\r\n    static SHADOW_BIAS: number;\r\n    /** @internal */\r\n    static SHADOW_LIGHT_DIRECTION: number;\r\n    /** @internal */\r\n    static SHADOW_SPLIT_SPHERES: number;\r\n    /** @internal */\r\n    static SHADOW_MATRICES: number;\r\n    /** @internal */\r\n    static SHADOW_MAP_SIZE: number;\r\n    /** @internal */\r\n    static SHADOW_MAP: number;\r\n    /** @internal */\r\n    static SHADOW_PARAMS: number;\r\n    /** @internal */\r\n    static SHADOW_SPOTMAP_SIZE: number;\r\n    /** @internal */\r\n    static SHADOW_SPOTMAP: number;\r\n    /** @internal */\r\n    static SHADOW_SPOTMATRICES: number;\r\n    /** @internal */\r\n    private static _maxCascades: number = 4;\r\n    /**@internal */\r\n    private static _cascadesSplitDistance: number[] = new Array(ShadowCasterPass._maxCascades + 1);\r\n    /** @internal */\r\n    private static _frustumPlanes: Plane[] = new Array();\r\n\r\n    /**\r\n     * @internal\r\n     * init Scene UniformMap\r\n     */\r\n    static __init__() {\r\n        ShadowCasterPass._frustumPlanes = new Array(new Plane(new Vector3(), 0), new Plane(new Vector3(), 0), new Plane(new Vector3(), 0), new Plane(new Vector3(), 0), new Plane(new Vector3(), 0), new Plane(new Vector3(), 0));\r\n        ShadowCasterPass.SHADOW_BIAS = Shader3D.propertyNameToID(\"u_ShadowBias\");\r\n        ShadowCasterPass.SHADOW_LIGHT_DIRECTION = Shader3D.propertyNameToID(\"u_ShadowLightDirection\");\r\n        ShadowCasterPass.SHADOW_SPLIT_SPHERES = Shader3D.propertyNameToID(\"u_ShadowSplitSpheres\");\r\n        ShadowCasterPass.SHADOW_MATRICES = Shader3D.propertyNameToID(\"u_ShadowMatrices\");\r\n        ShadowCasterPass.SHADOW_MAP_SIZE = Shader3D.propertyNameToID(\"u_ShadowMapSize\");\r\n        ShadowCasterPass.SHADOW_MAP = Shader3D.propertyNameToID(\"u_ShadowMap\");\r\n        ShadowCasterPass.SHADOW_PARAMS = Shader3D.propertyNameToID(\"u_ShadowParams\");\r\n        ShadowCasterPass.SHADOW_SPOTMAP_SIZE = Shader3D.propertyNameToID(\"u_SpotShadowMapSize\");\r\n        ShadowCasterPass.SHADOW_SPOTMAP = Shader3D.propertyNameToID(\"u_SpotShadowMap\");\r\n        ShadowCasterPass.SHADOW_SPOTMATRICES = Shader3D.propertyNameToID(\"u_SpotViewProjectMatrix\");\r\n\r\n        const sceneUniformMap = LayaGL.renderOBJCreate.createGlobalUniformMap(\"Scene3D\");\r\n        sceneUniformMap.addShaderUniform(ShadowCasterPass.SHADOW_BIAS, \"u_ShadowBias\");\r\n        sceneUniformMap.addShaderUniform(ShadowCasterPass.SHADOW_LIGHT_DIRECTION, \"u_ShadowLightDirection\");\r\n        sceneUniformMap.addShaderUniform(ShadowCasterPass.SHADOW_SPLIT_SPHERES, \"u_ShadowSplitSpheres\");\r\n        sceneUniformMap.addShaderUniform(ShadowCasterPass.SHADOW_MATRICES, \"u_ShadowMatrices\");\r\n        sceneUniformMap.addShaderUniform(ShadowCasterPass.SHADOW_MAP_SIZE, \"u_ShadowMapSize\");\r\n        sceneUniformMap.addShaderUniform(ShadowCasterPass.SHADOW_MAP, \"u_ShadowMap\");\r\n        sceneUniformMap.addShaderUniform(ShadowCasterPass.SHADOW_PARAMS, \"u_ShadowParams\");\r\n        sceneUniformMap.addShaderUniform(ShadowCasterPass.SHADOW_SPOTMAP_SIZE, \"u_SpotShadowMapSize\");\r\n        sceneUniformMap.addShaderUniform(ShadowCasterPass.SHADOW_SPOTMAP, \"u_SpotShadowMap\");\r\n        sceneUniformMap.addShaderUniform(ShadowCasterPass.SHADOW_SPOTMATRICES, \"u_SpotViewProjectMatrix\");\r\n        sceneUniformMap.addShaderUniform(Shader3D.propertyNameToID(UniformBufferObject.UBONAME_SHADOW), UniformBufferObject.UBONAME_SHADOW);\r\n    }\r\n\r\n  \r\n\r\n    /** @internal */\r\n    private _shadowBias: Vector4 = new Vector4();\r\n    /** @internal */\r\n    private _shadowParams: Vector4 = new Vector4();\r\n    /** @internal */\r\n    private _shadowMapSize: Vector4 = new Vector4();\r\n    /** @internal */\r\n    private _shadowSpotMapSize: Vector4 = new Vector4();\r\n    /** @internal */\r\n    private _shadowMatrices: Float32Array = new Float32Array(16 * (ShadowCasterPass._maxCascades));\r\n    /** @internal */\r\n    private _shadowSpotMatrices: Matrix4x4 = new Matrix4x4();\r\n    /**@internal */\r\n    private _splitBoundSpheres: Float32Array = new Float32Array(ShadowCasterPass._maxCascades * 4);\r\n    /** @internal */\r\n    private _cascadeCount: number = 0;\r\n    /** @internal */\r\n    private _shadowMapWidth: number = 0;\r\n    /** @internal */\r\n    private _shadowMapHeight: number = 0;\r\n    /** @internal */\r\n    private _shadowDirectLightMap: RenderTexture;\r\n    /** @internal */\r\n    private _shadowSpotLightMap: RenderTexture;\r\n    /** @internal */\r\n    private _shadowSliceDatas: ShadowSliceData[] = [new ShadowSliceData(), new ShadowSliceData(), new ShadowSliceData(), new ShadowSliceData()];\r\n    /** @internal */\r\n    private _shadowSpotData: ShadowSpotData = new ShadowSpotData();\r\n    /**@internal */\r\n    private _light: Light;\r\n    /** @internal */\r\n    private _lightUp: Vector3 = new Vector3();\r\n    /** @internal */\r\n    private _lightSide: Vector3 = new Vector3();\r\n    /** @internal */\r\n    private _lightForward: Vector3 = new Vector3();\r\n    /** @internal */\r\n    _castDepthBufferData: UnifromBufferData;\r\n    _castDepthBufferOBJ: UniformBufferObject;\r\n\r\n    _castDepthCameraBufferData: UnifromBufferData;\r\n    _castDepthCameraBufferOBJ: UniformBufferObject;\r\n\r\n    constructor() {\r\n        this._shadowSpotData.cameraCullInfo.boundFrustum = new BoundFrustum(new Matrix4x4());\r\n        if (Config3D._uniformBlock) {\r\n            this._castDepthBufferData = DepthCasterData.createDepthCasterUniformBlock();\r\n            this._castDepthBufferOBJ = UniformBufferObject.getBuffer(UniformBufferObject.UBONAME_SHADOW, 0);\r\n            if (!this._castDepthBufferOBJ) {\r\n                this._castDepthBufferOBJ = UniformBufferObject.create(UniformBufferObject.UBONAME_SHADOW, BufferUsage.Dynamic, this._castDepthBufferData.getbyteLength(), true);\r\n            }\r\n            BaseCamera.createCameraUniformBlock();\r\n            this._castDepthCameraBufferData = BaseCamera.CameraUBOData.clone();\r\n            this._castDepthCameraBufferOBJ = UniformBufferObject.getBuffer(UniformBufferObject.UBONAME_CAMERA, 1);\r\n            if (!this._castDepthCameraBufferOBJ) {\r\n                this._castDepthCameraBufferOBJ = UniformBufferObject.create(UniformBufferObject.UBONAME_CAMERA, BufferUsage.Dynamic, this._castDepthCameraBufferData.getbyteLength(), false);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * 设置阴影级联数据模式\r\n     * @internal\r\n     * @param context 渲染上下文\r\n     * @param shaderValues 渲染数据\r\n     * @param shadowSliceData 分级数据\r\n     * @param LightParam 灯光属性\r\n     * @param shadowparams 阴影属性\r\n     * @param shadowBias 阴影偏移\r\n     * @param lightType 灯光类型\r\n     */\r\n    private _setupShadowCasterShaderValues(context: RenderContext3D, shaderValues: ShaderData, shadowSliceData: any, LightParam: Vector3, shadowparams: Vector4, shadowBias: Vector4, lightType: LightType): void {\r\n        //shaderValues.setVector(ShadowCasterPass.SHADOW_BIAS, shadowBias);\r\n        shaderValues.setVector(ShadowCasterPass.SHADOW_BIAS, shadowBias);\r\n        switch (lightType) {\r\n            case LightType.Directional:\r\n                shaderValues.setVector3(ShadowCasterPass.SHADOW_LIGHT_DIRECTION, LightParam);\r\n                //this._setcommandBlockData(ShadowCasterPass.SHADOW_LIGHT_DIRECTION, LightParam);\r\n                break;\r\n            case LightType.Spot:\r\n                shaderValues.setVector(ShadowCasterPass.SHADOW_PARAMS, shadowparams);\r\n                break;\r\n            case LightType.Point:\r\n                break;\r\n        }\r\n        var cameraSV: ShaderData = shadowSliceData.cameraShaderValue;//TODO:should optimization with shader upload.\r\n        if (this._castDepthCameraBufferOBJ) {\r\n            cameraSV._addCheckUBO(UniformBufferObject.UBONAME_CAMERA, this._castDepthCameraBufferOBJ, this._castDepthCameraBufferData);\r\n            cameraSV.setUniformBuffer(BaseCamera.CAMERAUNIFORMBLOCK, this._castDepthCameraBufferOBJ);\r\n        }\r\n\r\n        cameraSV.setMatrix4x4(BaseCamera.VIEWMATRIX, shadowSliceData.viewMatrix);\r\n        cameraSV.setMatrix4x4(BaseCamera.PROJECTMATRIX, shadowSliceData.projectionMatrix);\r\n        cameraSV.setMatrix4x4(BaseCamera.VIEWPROJECTMATRIX, shadowSliceData.viewProjectMatrix);\r\n        shaderValues.setMatrix4x4(BaseCamera.VIEWPROJECTMATRIX, shadowSliceData.viewProjectMatrix);\r\n        context.viewMatrix = shadowSliceData.viewMatrix;\r\n        context.projectionMatrix = shadowSliceData.projectionMatrix;\r\n        context.projectionViewMatrix = shadowSliceData.viewProjectMatrix;\r\n        //this._castDepthBufferOBJ && shaderValues.setUniformBuffer(Shader3D.propertyNameToID(UniformBufferObject.UBONAME_SHADOW), this._castDepthBufferOBJ);\r\n    }\r\n\r\n\r\n    /**\r\n     *设置直射光接受阴影的模式\r\n     * @internal\r\n     * @param shaderValues 渲染数据\r\n     */\r\n    private _setupShadowReceiverShaderValues(shaderValues: ShaderData): void {\r\n        var light: DirectionLightCom = <DirectionLightCom>this._light;\r\n        if (light.shadowCascadesMode !== ShadowCascadesMode.NoCascades)\r\n            shaderValues.addDefine(Scene3DShaderDeclaration.SHADERDEFINE_SHADOW_CASCADE);\r\n        else\r\n            shaderValues.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_SHADOW_CASCADE);\r\n        switch (light.shadowMode) {\r\n            case ShadowMode.Hard:\r\n                shaderValues.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_SHADOW_SOFT_SHADOW_LOW);\r\n                shaderValues.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_SHADOW_SOFT_SHADOW_HIGH);\r\n                break;\r\n            case ShadowMode.SoftLow:\r\n                shaderValues.addDefine(Scene3DShaderDeclaration.SHADERDEFINE_SHADOW_SOFT_SHADOW_LOW);\r\n                shaderValues.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_SHADOW_SOFT_SHADOW_HIGH);\r\n                break;\r\n            case ShadowMode.SoftHigh:\r\n                shaderValues.addDefine(Scene3DShaderDeclaration.SHADERDEFINE_SHADOW_SOFT_SHADOW_HIGH);\r\n                shaderValues.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_SHADOW_SOFT_SHADOW_LOW);\r\n                break;\r\n        }\r\n        shaderValues.setTexture(ShadowCasterPass.SHADOW_MAP, this._shadowDirectLightMap);\r\n        shaderValues.setBuffer(ShadowCasterPass.SHADOW_MATRICES, this._shadowMatrices);\r\n        shaderValues.setVector(ShadowCasterPass.SHADOW_MAP_SIZE, this._shadowMapSize);\r\n        shaderValues.setVector(ShadowCasterPass.SHADOW_PARAMS, this._shadowParams);\r\n        shaderValues.setBuffer(ShadowCasterPass.SHADOW_SPLIT_SPHERES, this._splitBoundSpheres);\r\n    }\r\n\r\n    /**\r\n     * 设置聚光接受阴影的模式\r\n     * @internal\r\n     * @param shaderValues 渲染数据\r\n     */\r\n    private _setupSpotShadowReceiverShaderValues(shaderValues: ShaderData): void {\r\n        var spotLight: SpotLightCom = <SpotLightCom>this._light;\r\n        switch (spotLight.shadowMode) {\r\n            case ShadowMode.Hard:\r\n                shaderValues.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_SHADOW_SPOT_SOFT_SHADOW_HIGH);\r\n                shaderValues.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_SHADOW_SPOT_SOFT_SHADOW_LOW);\r\n                break;\r\n            case ShadowMode.SoftLow:\r\n                shaderValues.addDefine(Scene3DShaderDeclaration.SHADERDEFINE_SHADOW_SPOT_SOFT_SHADOW_LOW);\r\n                shaderValues.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_SHADOW_SPOT_SOFT_SHADOW_HIGH);\r\n                break;\r\n            case ShadowMode.SoftHigh:\r\n                shaderValues.addDefine(Scene3DShaderDeclaration.SHADERDEFINE_SHADOW_SPOT_SOFT_SHADOW_HIGH);\r\n                shaderValues.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_SHADOW_SPOT_SOFT_SHADOW_LOW);\r\n                break;\r\n        }\r\n        shaderValues.setTexture(ShadowCasterPass.SHADOW_SPOTMAP, this._shadowSpotLightMap);\r\n        shaderValues.setMatrix4x4(ShadowCasterPass.SHADOW_SPOTMATRICES, this._shadowSpotMatrices)\r\n        shaderValues.setVector(ShadowCasterPass.SHADOW_SPOTMAP_SIZE, this._shadowSpotMapSize);\r\n        shaderValues.setVector(ShadowCasterPass.SHADOW_PARAMS, this._shadowParams);\r\n    }\r\n\r\n    // /**\r\n    //  * set castDepthBuffer data\r\n    //  */\r\n    // private _setcommandBlockData(index: number, value: any) {\r\n    // \tif (this._castDepthBufferData && this._castDepthBufferData._has(index))\r\n    // \t\tthis._castDepthBufferData._setData(index, value);\r\n    // }\r\n\r\n\r\n    /**\r\n     * 更新阴影数据\r\n     * @internal\r\n     * @param camera 渲染相机\r\n     * @param light 灯光\r\n     * @param lightType 灯光类型\r\n     */\r\n    update(camera: Camera, light: Light, lightType: ShadowLightType): void {\r\n        this.cleanUp();\r\n        switch (lightType) {\r\n            case ShadowLightType.DirectionLight:\r\n                this._light = light;\r\n                var lightWorld: Matrix4x4 = ShadowCasterPass._tempMatrix0;\r\n                var lightWorldE: Float32Array = lightWorld.elements;\r\n                var lightUp: Vector3 = this._lightUp;\r\n                var lightSide: Vector3 = this._lightSide;\r\n                var lightForward: Vector3 = this._lightForward;\r\n                //光的的空间矩阵，旁边 上面 前面\r\n                Matrix4x4.createFromQuaternion((light.owner as Sprite3D)._transform.rotation, lightWorld);//to remove scale problem\r\n                lightSide.setValue(lightWorldE[0], lightWorldE[1], lightWorldE[2]);\r\n                lightUp.setValue(lightWorldE[4], lightWorldE[5], lightWorldE[6]);\r\n                lightForward.setValue(-lightWorldE[8], -lightWorldE[9], -lightWorldE[10]);\r\n                //设置分辨率\r\n                var atlasResolution: number = light._shadowResolution;\r\n                var cascadesMode: ShadowCascadesMode = (<DirectionLightCom>light)._shadowCascadesMode;\r\n                var cascadesCount: number;\r\n                var shadowTileResolution: number;\r\n                var shadowMapWidth: number, shadowMapHeight: number;\r\n                if (cascadesMode == ShadowCascadesMode.NoCascades) {\r\n                    cascadesCount = 1;\r\n                    shadowTileResolution = atlasResolution;\r\n                    shadowMapWidth = atlasResolution;\r\n                    shadowMapHeight = atlasResolution;\r\n                }\r\n                else {\r\n                    cascadesCount = cascadesMode == ShadowCascadesMode.TwoCascades ? 2 : 4;\r\n                    shadowTileResolution = ShadowUtils.getMaxTileResolutionInAtlas(atlasResolution, atlasResolution, cascadesCount);\r\n                    shadowMapWidth = shadowTileResolution * 2;\r\n                    shadowMapHeight = cascadesMode == ShadowCascadesMode.TwoCascades ? shadowTileResolution : shadowTileResolution * 2;\r\n                }\r\n                this._cascadeCount = cascadesCount;\r\n                this._shadowMapWidth = shadowMapWidth;\r\n                this._shadowMapHeight = shadowMapHeight;\r\n\r\n                var splitDistance: number[] = ShadowCasterPass._cascadesSplitDistance;\r\n                var frustumPlanes: Plane[] = ShadowCasterPass._frustumPlanes;\r\n                var cameraNear: number = camera.nearPlane;\r\n                var shadowFar: number = Math.min(camera.farPlane, light._shadowDistance);\r\n                var shadowMatrices: Float32Array = this._shadowMatrices;\r\n                var boundSpheres: Float32Array = this._splitBoundSpheres;\r\n                ShadowUtils.getCascadesSplitDistance((<DirectionLightCom>light)._shadowTwoCascadeSplits, (<DirectionLightCom>light)._shadowFourCascadeSplits, cameraNear, shadowFar, camera.fieldOfView * MathUtils3D.Deg2Rad, camera.aspectRatio, cascadesMode, splitDistance);\r\n                ShadowUtils.getCameraFrustumPlanes(camera.projectionViewMatrix, frustumPlanes);\r\n                var forward: Vector3 = ShadowCasterPass._tempVector30;\r\n                camera._transform.getForward(forward);\r\n                Vector3.normalize(forward, forward);\r\n                for (var i: number = 0; i < cascadesCount; i++) {\r\n                    var sliceData: ShadowSliceData = this._shadowSliceDatas[i];\r\n                    sliceData.sphereCenterZ = ShadowUtils.getBoundSphereByFrustum(splitDistance[i], splitDistance[i + 1], camera.fieldOfView * MathUtils3D.Deg2Rad, camera.aspectRatio, camera._transform.position, forward, sliceData.splitBoundSphere);\r\n                    ShadowUtils.getDirectionLightShadowCullPlanes(frustumPlanes, i, splitDistance, cameraNear, lightForward, sliceData);\r\n                    ShadowUtils.getDirectionalLightMatrices(lightUp, lightSide, lightForward, i, light._shadowNearPlane, shadowTileResolution, sliceData, shadowMatrices);\r\n                    if (cascadesCount > 1)\r\n                        ShadowUtils.applySliceTransform(sliceData, shadowMapWidth, shadowMapHeight, i, shadowMatrices);\r\n                }\r\n                ShadowUtils.prepareShadowReceiverShaderValues((<DirectionLightCom>light), shadowMapWidth, shadowMapHeight, this._shadowSliceDatas, cascadesCount, this._shadowMapSize, this._shadowParams, shadowMatrices, boundSpheres);\r\n                break;\r\n            case ShadowLightType.SpotLight:\r\n                this._light = light;\r\n                var lightWorld: Matrix4x4 = ShadowCasterPass._tempMatrix0;\r\n                var lightForward: Vector3 = this._lightForward;\r\n                var shadowResolution: number = this._light._shadowResolution;\r\n                this._shadowMapWidth = shadowResolution;\r\n                this._shadowMapHeight = shadowResolution;\r\n                var shadowSpotData: ShadowSpotData = this._shadowSpotData;\r\n                ShadowUtils.getSpotLightShadowData(shadowSpotData, <SpotLightCom>this._light, shadowResolution, this._shadowParams, this._shadowSpotMatrices, this._shadowSpotMapSize);\r\n                break;\r\n            case ShadowLightType.PointLight:\r\n                //TODO:\r\n                break;\r\n            default:\r\n                throw (\"There is no shadow of this type\")\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 渲染阴影帧缓存\r\n     * @internal\r\n     * @param context 渲染上下文\r\n     * @param scene 3DScene场景\r\n     * @param lightType 阴影类型\r\n     */\r\n    render(context: RenderContext3D, scene: Scene3D, lightType: ShadowLightType, camera: Camera): void {\r\n        switch (lightType) {\r\n            case ShadowLightType.DirectionLight:\r\n                var shaderValues: ShaderData = scene._shaderValues;\r\n                context.pipelineMode = \"ShadowCaster\";\r\n                var shadowMap: RenderTexture = this._shadowDirectLightMap = ShadowUtils.getTemporaryShadowTexture(this._shadowMapWidth, this._shadowMapHeight, ShadowMapFormat.bit16);\r\n                shadowMap._start();\r\n                context.destTarget = shadowMap;\r\n                var light: DirectionLightCom = <DirectionLightCom>this._light;\r\n                for (var i: number = 0, n: number = this._cascadeCount; i < n; i++) {\r\n                    var sliceData: ShadowSliceData = this._shadowSliceDatas[i];\r\n                    ShadowUtils.getShadowBias(light, sliceData.projectionMatrix, sliceData.resolution, this._shadowBias);\r\n                    this._setupShadowCasterShaderValues(context, shaderValues, sliceData, this._lightForward, this._shadowParams, this._shadowBias, LightType.Directional);\r\n                    var shadowCullInfo: IShadowCullInfo = FrustumCulling._shadowCullInfo;\r\n                    shadowCullInfo.position = sliceData.position;\r\n                    shadowCullInfo.cullPlanes = sliceData.cullPlanes;\r\n                    shadowCullInfo.cullPlaneCount = sliceData.cullPlaneCount;\r\n                    shadowCullInfo.cullSphere = sliceData.splitBoundSphere;\r\n                    shadowCullInfo.direction = this._lightForward;\r\n                    //cull\r\n                    scene._directLightShadowCull(shadowCullInfo, context);\r\n                    context.cameraShaderValue = sliceData.cameraShaderValue;\r\n                    Camera._updateMark++;\r\n\r\n                    var resolution: number = sliceData.resolution;\r\n                    var offsetX: number = sliceData.offsetX;\r\n                    var offsetY: number = sliceData.offsetY;\r\n\r\n                    LayaGL.renderEngine.viewport(offsetX, offsetY, resolution, resolution);\r\n                    LayaGL.renderEngine.scissor(offsetX, offsetY, resolution, resolution);\r\n\r\n                    LayaGL.renderEngine.clearRenderTexture(RenderClearFlag.Depth, null, 1);\r\n                    if (scene._opaqueQueue.elements.length > 0) {// if one cascade have anything to render.\r\n                        Viewport._tempViewport.set(offsetX, offsetY, resolution, resolution);\r\n                        ShadowCasterPass._tempVector4.setValue(offsetX + 1, offsetY + 1, resolution - 2, resolution - 2);\r\n                        context.viewport = Viewport._tempViewport;\r\n                        context.scissor = ShadowCasterPass._tempVector4;\r\n                        Stat.depthCastDrawCall += scene._opaqueQueue.renderQueue(context);//阴影均为非透明队列\r\n                    }\r\n                    camera._applyCasterPassCommandBuffer(context);\r\n                }\r\n                shadowMap._end();\r\n                this._setupShadowReceiverShaderValues(shaderValues);\r\n                context.pipelineMode = context.configPipeLineMode;\r\n                break;\r\n            case ShadowLightType.SpotLight:\r\n                var shaderValues: ShaderData = scene._shaderValues;\r\n                context.pipelineMode = \"ShadowCaster\";\r\n                var spotlight: SpotLightCom = <SpotLightCom>this._light;\r\n                var shadowMap: RenderTexture = this._shadowSpotLightMap = ShadowUtils.getTemporaryShadowTexture(this._shadowMapWidth, this._shadowMapHeight, ShadowMapFormat.bit16);\r\n                shadowMap._start();\r\n                context.destTarget = shadowMap;\r\n                var shadowSpotData: ShadowSpotData = this._shadowSpotData;\r\n                ShadowUtils.getShadowBias(spotlight, shadowSpotData.projectionMatrix, shadowSpotData.resolution, this._shadowBias);\r\n                this._setupShadowCasterShaderValues(context, shaderValues, shadowSpotData, (this._light.owner as Sprite3D).transform.position, this._shadowParams, this._shadowBias, LightType.Spot);\r\n                scene._sportLightShadowCull(shadowSpotData.cameraCullInfo, context);\r\n                context.cameraShaderValue = shadowSpotData.cameraShaderValue;\r\n                Camera._updateMark++;\r\n\r\n                LayaGL.renderEngine.viewport(shadowSpotData.offsetX, shadowSpotData.offsetY, shadowSpotData.resolution, shadowSpotData.resolution);\r\n                LayaGL.renderEngine.scissor(shadowSpotData.offsetX, shadowSpotData.offsetY, shadowSpotData.resolution, shadowSpotData.resolution);\r\n                LayaGL.renderEngine.clearRenderTexture(RenderClearFlag.Depth, null, 1);\r\n\r\n                if (scene._opaqueQueue.elements.length > 0) {\r\n                    context.changeViewport(shadowSpotData.offsetX, shadowSpotData.offsetY, shadowSpotData.resolution, shadowSpotData.resolution);\r\n                    context.changeScissor(shadowSpotData.offsetX, shadowSpotData.offsetY, shadowSpotData.resolution, shadowSpotData.resolution);\r\n                    Stat.depthCastDrawCall += scene._opaqueQueue.renderQueue(context);//阴影均为非透明队列\r\n                }\r\n                camera._applyCasterPassCommandBuffer(context);\r\n                shadowMap._end();\r\n                this._setupSpotShadowReceiverShaderValues(shaderValues);\r\n                context.pipelineMode = context.configPipeLineMode;\r\n                break;\r\n            case ShadowLightType.PointLight:\r\n                //TODO:\r\n                break;\r\n            default:\r\n                throw (\"There is no shadow of this type\");\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * 清理阴影数据\r\n     * @internal\r\n     */\r\n    cleanUp(): void {\r\n        this._shadowDirectLightMap && RenderTexture.recoverToPool(this._shadowDirectLightMap);\r\n        this._shadowSpotLightMap && RenderTexture.recoverToPool(this._shadowSpotLightMap);\r\n        this._shadowDirectLightMap = null;\r\n        this._shadowSpotLightMap = null;\r\n        this._light = null;\r\n    }\r\n}\r\n\r\n","import { LayaGL } from \"../../../../layagl/LayaGL\";\r\nimport { BaseTexture } from \"../../../../resource/BaseTexture\";\r\nimport { Viewport } from \"../../../math/Viewport\";\r\nimport { RenderContext3D } from \"../RenderContext3D\";\r\nimport { ScreenQuad } from \"../ScreenQuad\";\r\nimport { Command } from \"./Command\";\r\nimport { Shader3D } from \"../../../../RenderEngine/RenderShader/Shader3D\";\r\nimport { ShaderData } from \"../../../../RenderEngine/RenderShader/ShaderData\";\r\nimport { RenderElement } from \"../RenderElement\";\r\nimport { Transform3D } from \"../../Transform3D\";\r\nimport { ShaderDefine } from \"../../../../RenderEngine/RenderShader/ShaderDefine\";\r\nimport { Camera } from \"../../Camera\";\r\nimport { Vector4 } from \"../../../../maths/Vector4\";\r\nimport { RenderTexture } from \"../../../../resource/RenderTexture\";\r\nimport { ShaderPass } from \"../../../../RenderEngine/RenderShader/ShaderPass\";\r\nimport { SubShader } from \"../../../../RenderEngine/RenderShader/SubShader\";\r\n\r\n\r\n/**\r\n * 类用于创建从渲染源输出到渲染目标的指令\r\n */\r\nexport class BlitFrameBufferCMD {\r\n\t/**@internal */\r\n\tprivate static _pool: any[] = [];\r\n\t/** @internal */\r\n\tprivate static _defaultOffsetScale: Vector4 = new Vector4(0, 0, 1, 1);\r\n\t/** @internal */\r\n\tstatic shaderdata: ShaderData;\r\n\r\n\t/** @internal */\r\n\tstatic __init__(): void {\r\n\t\tBlitFrameBufferCMD.shaderdata = LayaGL.renderOBJCreate.createShaderData(null);\r\n\t}\r\n\r\n\t/**\r\n   * 渲染命令集\r\n   * @param source \r\n   * @param dest \r\n   * @param viewport \r\n   * @param offsetScale \r\n   * @param shader \r\n   * @param shaderData \r\n   * @param subShader \r\n   */\r\n\tstatic create(source: BaseTexture, dest: RenderTexture, viewport: Viewport, offsetScale: Vector4 = null, shader: Shader3D = null, shaderData: ShaderData = null, subShader: number = 0) {\r\n\t\tvar cmd: BlitFrameBufferCMD;\r\n\t\tcmd = BlitFrameBufferCMD._pool.length > 0 ? BlitFrameBufferCMD._pool.pop() : new BlitFrameBufferCMD();\r\n\t\tcmd._source = source;\r\n\t\tcmd._dest = dest;\r\n\t\tcmd._offsetScale = offsetScale;\r\n\t\tcmd.setshader(shader, subShader, shaderData);\r\n\t\tcmd._source && cmd._texture_size.setValue(source.width, source.height, 1.0 / source.width, 1.0 / source.height);\r\n\t\t//cmd._shader = shader;\r\n\t\t//cmd._shaderData = shaderData;\r\n\t\t//cmd._subShader = subShader;\r\n\t\tcmd._viewPort = viewport;\r\n\t\treturn cmd;\r\n\t}\r\n\t/**@internal source 原始贴图*/\r\n\tprivate _source: BaseTexture = null;\r\n\t/**@internal dest 目标 如果为null，将会默认为主画布*/\r\n\tprivate _dest: RenderTexture = null;\r\n\t/**@internal 偏移缩放*/\r\n\tprivate _offsetScale: Vector4 = null;\r\n\t/**@internal */\r\n\t_texture_size: Vector4 = null;\r\n\t/**@internal 渲染shader*/\r\n\tprivate _shader: Shader3D = null;\r\n\t/**@internal 渲染数据*/\r\n\tprivate _shaderData: ShaderData = null;\r\n\t/**@internal subshader的节点*/\r\n\tprivate _subShader: number = 0;\r\n\t/**@internal 渲染设置*/\r\n\tprivate _viewPort: Viewport = null;\r\n\t// /**@internal */\r\n\t// private _sourceTexelSize: Vector4 = new Vector4();\r\n\t/**@internal */\r\n\tprivate _renderElement: RenderElement;\r\n\t/**@internal */\r\n\tprivate _transform3D: Transform3D;\r\n\tconstructor() {\r\n\t\tthis._transform3D = LayaGL.renderOBJCreate.createTransform(null);\r\n\t\tthis._renderElement = new RenderElement();\r\n\t\tthis._renderElement.setTransform(this._transform3D);\r\n\t\tthis._renderElement.setGeometry(ScreenQuad.instance);\r\n\t\tthis._texture_size = new Vector4();\r\n\t}\r\n\r\n\tset shaderData(value: ShaderData) {\r\n\t\tthis._shaderData = value || BlitFrameBufferCMD.shaderdata;\r\n\t\tthis._renderElement._renderElementOBJ._materialShaderData = this._shaderData;\r\n\t}\r\n\r\n\tsetshader(shader: Shader3D, subShader: number, shaderData: ShaderData) {\r\n\t\tthis._shader = shader || Command._screenShader;\r\n\t\tthis._subShader = subShader || 0;\r\n\t\tthis.shaderData = shaderData;\r\n\t\tthis._renderElement.renderSubShader = this._shader.getSubShaderAt(this._subShader);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\trun(): void {\r\n\t\tif (!this._source || !this._viewPort)\r\n\t\t\treturn;\r\n\t\tvar source = this._source;\r\n\t\tvar dest = this._dest;\r\n\t\tvar shader: Shader3D = this._shader;\r\n\t\tvar shaderData: ShaderData = this._shaderData;\r\n\t\tvar viewport = this._viewPort;\r\n\r\n\t\tlet vph = RenderContext3D.clientHeight - viewport.y - viewport.height;\r\n\r\n\t\t// LayaGL.renderEngine.viewport(viewport.x, vph, viewport.width, viewport.height);\r\n\t\t// LayaGL.renderEngine.scissor(viewport.x, vph, viewport.width, viewport.height);\r\n\t\tlet context = RenderContext3D._instance;\r\n\t\tcontext.changeViewport(viewport.x, vph, viewport.width, viewport.height);\r\n\t\tcontext.changeScissor(viewport.x, vph, viewport.width, viewport.height);\r\n\r\n\t\tshaderData.setTexture(Command.SCREENTEXTURE_ID, source);\r\n\t\tshaderData.setVector(Command.SCREENTEXTUREOFFSETSCALE_ID, this._offsetScale || BlitFrameBufferCMD._defaultOffsetScale);\r\n\t\tsource && (shaderData.setVector(Command.MAINTEXTURE_TEXELSIZE_ID, this._texture_size));\r\n\t\t//this._sourceTexelSize.setValue(1.0 / source.width, 1.0 / source.height, source.width, source.height);\r\n\t\t(RenderTexture.currentActive) && (RenderTexture.currentActive._end());\r\n\r\n\t\tif (dest) {\r\n\t\t\tdest._start();\r\n\t\t\tshaderData.removeDefine(RenderContext3D.GammaCorrect);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tshaderData.addDefine(RenderContext3D.GammaCorrect);\r\n\t\t}\r\n\t\tvar subShader: SubShader = shader.getSubShaderAt(this._subShader);\r\n\t\tvar passes: ShaderPass[] = subShader._passes;\r\n\t\tScreenQuad.instance.invertY = false;\r\n\r\n\t\tcontext.destTarget = dest;\r\n\t\tcontext._contextOBJ.applyContext(Camera._updateMark);\r\n\t\tcontext.drawRenderElement(this._renderElement);\r\n\t\t//RenderContext3D._instance.invertY ? ScreenQuad.instance.renderInvertUV() : ScreenQuad.instance.render();\r\n\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\trecover(): void {\r\n\t\tBlitFrameBufferCMD._pool.push(this);\r\n\t\tthis._source = null;\r\n\t\tthis._dest = null;\r\n\t\tthis._offsetScale = null;\r\n\t\tthis._shader = null;\r\n\t\tthis._shaderData = null;\r\n\t\tthis._viewPort = null;\r\n\t}\r\n}","import { LayaGL } from \"../../../layagl/LayaGL\";\r\nimport { ISceneRenderManager } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/ISceneRenderManager\";\r\nimport { SingletonList } from \"../../../utils/SingletonList\";\r\nimport { BaseRender } from \"../render/BaseRender\";\r\n\r\n/**\r\n * <code>类用来实现场景渲染节点管理<code/>\r\n */\r\nexport class SceneRenderManager {\r\n    /**@internal */\r\n    protected _sceneManagerOBJ: ISceneRenderManager;\r\n    \r\n    /**\r\n     * 实例化一个场景管理节点\r\n     */\r\n    constructor() {\r\n        this._sceneManagerOBJ = LayaGL.renderOBJCreate.createSceneRenderManager();\r\n    }\r\n\r\n    /**\r\n     * get RenderList\r\n     */\r\n    get list(): SingletonList<BaseRender> {\r\n        return this._sceneManagerOBJ.list;\r\n    }\r\n\r\n    set list(value: SingletonList<BaseRender>) {\r\n        this._sceneManagerOBJ.list = value;\r\n    }\r\n\r\n    /**\r\n     * add Render Node\r\n     * @param object \r\n     */\r\n    addRenderObject(object: BaseRender): void {\r\n        this._sceneManagerOBJ.addRenderObject(object);\r\n    }\r\n\r\n    /**\r\n     * remove Render Node\r\n     * @param object \r\n     */\r\n    removeRenderObject(object: BaseRender): void {\r\n        this._sceneManagerOBJ.removeRenderObject(object);\r\n    }\r\n\r\n    /**\r\n     * remove motion Object\r\n     * @param object \r\n     */\r\n    removeMotionObject(object: BaseRender): void {\r\n        this._sceneManagerOBJ.removeMotionObject(object);\r\n    }\r\n\r\n    /**\r\n     * update All Motion Render Data\r\n     */\r\n    updateMotionObjects(): void {\r\n        this._sceneManagerOBJ.updateMotionObjects();\r\n    }\r\n\r\n    /**\r\n     * add motion Render Data\r\n     * @param object \r\n     */\r\n    addMotionObject(object: BaseRender): void {\r\n        this._sceneManagerOBJ.addMotionObject(object);\r\n    }\r\n\r\n    /**\r\n     * destroy\r\n     */\r\n    destroy(): void {\r\n        this._sceneManagerOBJ.destroy();\r\n    }\r\n\r\n}","import { SingletonList } from \"../../../utils/SingletonList\";\r\nimport { Ray } from \"../../math/Ray\";\r\nimport { UI3D } from \"./UI3D\";\r\n\r\nexport class UI3DManager {\r\n\r\n    _UI3Dlist: SingletonList<UI3D> = new SingletonList<UI3D>();\r\n\r\n    constructor() {\r\n    }\r\n\r\n    add(value: UI3D) {\r\n        this._UI3Dlist.add(value);\r\n    }\r\n\r\n    remove(value: UI3D) {\r\n        this._UI3Dlist.remove(value);\r\n    }\r\n\r\n    //需要在\r\n    update() {\r\n        let elements = this._UI3Dlist.elements;\r\n        for (var i = 0, n = this._UI3Dlist.length; i < n; i++) {\r\n            elements[i]._submitRT();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 判断是否碰撞\r\n     */\r\n    rayCast(ray: Ray): any {\r\n        let rayOri = ray.origin;\r\n        this._UI3Dlist.clean();\r\n        //sort\r\n        this._UI3Dlist.elements.sort(\r\n            (a: UI3D, b: UI3D) => {\r\n                return a._getCameraDistance(rayOri) - b._getCameraDistance(rayOri);\r\n            }\r\n        );\r\n        let elements = this._UI3Dlist.elements;\r\n        for (var i = 0, n = this._UI3Dlist.length; i < n; i++) {\r\n            let hit = elements[i]._checkUIPos(ray);\r\n            if (hit) {//遮挡\r\n                return hit;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Destroy\r\n     */\r\n    destory() {\r\n        this._UI3Dlist.destroy();\r\n    }\r\n}","import { SingletonList } from \"../../../../utils/SingletonList\";\r\nimport { IBoundsCell } from \"../../../math/IBoundsCell\";\r\nimport { BVHSpatialBox } from \"./BVHSpatialBox\";\r\n\r\n/**\r\n * 接受空间分割管理的逻辑对象   容器\r\n */\r\nexport class BVHSpatialManager {\r\n    /**@internal */\r\n    bvhManager: Map<number, BVHSpatialBox<IBoundsCell>>;\r\n\r\n    /**@internal */\r\n    cellCount: number = 0;\r\n\r\n    /**@internal */\r\n    updateBVHBoxList: SingletonList<BVHSpatialBox<IBoundsCell>>;\r\n\r\n    /**\r\n     * 实例化BVHSpatialManager\r\n     */\r\n    constructor() {\r\n        this.bvhManager = new Map();\r\n        this.updateBVHBoxList = new SingletonList<BVHSpatialBox<IBoundsCell>>();\r\n    }\r\n\r\n    /**\r\n     * clear\r\n     */\r\n    clear() {\r\n        this.cellCount = 0;\r\n        this.updateBVHBoxList.clear();\r\n    }\r\n\r\n    /**\r\n     * destroy\r\n     */\r\n    destroy() {\r\n        this.bvhManager = null;\r\n        this.updateBVHBoxList.destroy();\r\n    }\r\n}\r\n\r\n/**\r\n * BVHConfig\r\n */\r\nexport class BVHSpatialConfig {\r\n    /**@internal 一个BVH节点最大的cell数，超过这个数会分离*/\r\n    public max_SpatialCount = 7;\r\n    /**@internal 最大BVH节点的大小*/\r\n    public limit_size = 32;\r\n    /**@internal 最小cellbuild数，如果小于这个数，不会BVH构建*/\r\n    public Min_BVH_Build_Nums = 10;\r\n}","import { Vector3 } from \"../../../../maths/Vector3\";\r\nimport { ICameraCullInfo } from \"../../../../RenderEngine/RenderInterface/RenderPipelineInterface/ICameraCullInfo\";\r\nimport { IShadowCullInfo } from \"../../../../RenderEngine/RenderInterface/RenderPipelineInterface/IShadowCullInfo\";\r\nimport { SingletonList } from \"../../../../utils/SingletonList\";\r\nimport { BoundFrustum } from \"../../../math/BoundFrustum\";\r\nimport { Bounds } from \"../../../math/Bounds\";\r\nimport { CollisionUtils } from \"../../../math/CollisionUtils\";\r\nimport { ContainmentType } from \"../../../math/ContainmentType\";\r\nimport { IBoundsCell } from \"../../../math/IBoundsCell\";\r\nimport { Plane } from \"../../../math/Plane\";\r\nimport { BVHSpatialConfig, BVHSpatialManager } from \"./SpatialManager\";\r\n\r\n/**\r\n * BVH子空间\r\n */\r\nexport class BVHSpatialBox<T> {\r\n    private static _tempV3: Vector3 = new Vector3();\r\n    private static _tempV3_2: Vector3 = new Vector3();\r\n\r\n    /**\r\n     * 包围盒和阴影相机的关系\r\n     * @param box\r\n     * @param cullInfo \r\n     * @returns 0: 不相交，1：包含， 2：相交\r\n     */\r\n    static sciContainsBox(box: Bounds, cullInfo: IShadowCullInfo) {\r\n        const p = BVHSpatialBox._tempV3;\r\n        const n = BVHSpatialBox._tempV3_2;\r\n        const boxMin = box.min;\r\n        const boxMax = box.max;\r\n        let result = ContainmentType.Contains;\r\n        for (let i = 0, nn = cullInfo.cullPlaneCount; i < nn; i++) {\r\n            const plane = cullInfo.cullPlanes[i];\r\n            const planeNor = plane.normal;\r\n\r\n            if (planeNor.x >= 0) {\r\n                p.x = boxMax.x;\r\n                n.x = boxMin.x;\r\n            } else {\r\n                p.x = boxMin.x;\r\n                n.x = boxMax.x;\r\n            }\r\n            if (planeNor.y >= 0) {\r\n                p.y = boxMax.y;\r\n                n.y = boxMin.y;\r\n            } else {\r\n                p.y = boxMin.y;\r\n                n.y = boxMax.y;\r\n            }\r\n            if (planeNor.z >= 0) {\r\n                p.z = boxMax.z;\r\n                n.z = boxMin.z;\r\n            } else {\r\n                p.z = boxMin.z;\r\n                n.z = boxMax.z;\r\n            }\r\n\r\n            if (CollisionUtils.intersectsPlaneAndPoint(plane, p) === Plane.PlaneIntersectionType_Back)\r\n                return ContainmentType.Disjoint;\r\n            if (CollisionUtils.intersectsPlaneAndPoint(plane, n) === Plane.PlaneIntersectionType_Back)\r\n                result = ContainmentType.Intersects;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 包围盒是否和阴影相机相交\r\n     * @param box \r\n     * @param cullInfo \r\n    */\r\n    static sciIntersectsBox(box: Bounds, cullInfo: IShadowCullInfo) {\r\n        const cullPlaneCount = cullInfo.cullPlaneCount;\r\n        const cullPlanes = cullInfo.cullPlanes;\r\n\r\n        const min: Vector3 = box.min;\r\n        const max: Vector3 = box.max;\r\n        const minX: number = min.x;\r\n        const minY: number = min.y;\r\n        const minZ: number = min.z;\r\n        const maxX: number = max.x;\r\n        const maxY: number = max.y;\r\n        const maxZ: number = max.z;\r\n\r\n        let pass: boolean = true;\r\n        for (let j = 0; j < cullPlaneCount; j++) {\r\n            const plane = cullPlanes[j];\r\n            const normal = plane.normal;\r\n            if (plane.distance + (normal.x * (normal.x < 0.0 ? minX : maxX)) + (normal.y * (normal.y < 0.0 ? minY : maxY)) + (normal.z * (normal.z < 0.0 ? minZ : maxZ)) < 0.0) {\r\n                pass = false;\r\n                break;\r\n            }\r\n        }\r\n        return pass;\r\n    }\r\n    /**@internal */\r\n    protected _bounds: Bounds;\r\n    /**@internal BVH实例数组 */\r\n    protected _cellList: Array<IBoundsCell>;\r\n    /**@internal 实例数量 */\r\n    protected _cellCount: number; //本空间分支下的逻辑对象总数量（包括子空间）\r\n    /**@internal 父节点 */\r\n    protected _parent: BVHSpatialBox<T>; //父空间（只有根节点无父空间）\r\n    /**@internal 子节点 */\r\n    protected _children0: BVHSpatialBox<T>;\r\n    protected _children1: BVHSpatialBox<T>;\r\n    /**此BVH设置 */\r\n    protected _config: BVHSpatialConfig;\r\n    /**BVH管理 */\r\n    protected _bvhmanager: BVHSpatialManager;\r\n    /**@internal 包围盒标记 */\r\n    _boundchanged: boolean;\r\n\r\n    /**\r\n     * 创建BVHSpaticalBox实例\r\n     * @param bvhmanager \r\n     * @param config \r\n     */\r\n    constructor(bvhmanager: BVHSpatialManager, config: BVHSpatialConfig) {\r\n        this._bounds = new Bounds(new Vector3(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE), new Vector3(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE));\r\n        this._cellList = [];\r\n        this._cellCount = 0;\r\n        this._bvhmanager = bvhmanager;\r\n        this._config = config;\r\n    }\r\n\r\n    /**\r\n     * 父节点\r\n     */\r\n    set parent(value: BVHSpatialBox<IBoundsCell>) {\r\n        this._parent = value;\r\n    }\r\n\r\n    get parent() {\r\n        return this._parent;\r\n    }\r\n\r\n    /**\r\n     * 去重\r\n     * @param cell \r\n     * @returns \r\n     */\r\n    private _isRepeat(cell: IBoundsCell): boolean {\r\n        return (this._cellList.indexOf(cell) != -1);\r\n    }\r\n\r\n    /**\r\n     * add one cell to list\r\n     * @param cell \r\n     */\r\n    private _addOneCell(cell: IBoundsCell) {\r\n        this._cellList.push(cell);\r\n        this._cellCount++;\r\n        this._bvhmanager.bvhManager.set(cell.id, this);\r\n        this._bvhmanager.cellCount++;\r\n        // this._addBounds(cell);\r\n    }\r\n\r\n    /**\r\n     * remove one cell to list\r\n     * @param cell \r\n     * @returns \r\n     */\r\n    private _removeOneCell(cell: IBoundsCell) {\r\n        let index = this._cellList.indexOf(cell);\r\n        if (index == -1)\r\n            return false;\r\n        this._cellCount--;\r\n        this._cellList.splice(index, 1);\r\n        this._bvhmanager.bvhManager.delete(cell.id);\r\n        this._bvhmanager.cellCount--;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 清除队列\r\n     * TODO 是否要清理bvhmanager\r\n     */\r\n    private _clearList() {\r\n        this._bvhmanager.cellCount -= this._cellCount;\r\n        this._cellCount = 0;\r\n        this._cellList = null;\r\n    }\r\n\r\n    /**\r\n     * 判断Float是否接近\r\n     * @param x \r\n     * @param y \r\n     * @returns \r\n     */\r\n    private _isFloatMax(x: number, y: number) {\r\n        return x - y > 0.0001;//x>y 切\r\n    }\r\n\r\n    /**\r\n     * 这个包围盒是否影响Box的包围盒大小\r\n     */\r\n    private _isBoundsContainedBySpatialBox(cell: IBoundsCell) {\r\n        let cellMin = cell.bounds.getMin();\r\n        let cellMax = cell.bounds.getMax();\r\n        let boxMin = this._bounds.getMin();\r\n        let boxMax = this._bounds.getMax();\r\n        //如果cell 包围盒在box包围盒中间,则不影响包围盒改变\r\n        if (this._isFloatMax(cellMin.x, boxMin.x) && this._isFloatMax(cellMin.y, boxMin.y) && this._isFloatMax(cellMin.z, boxMin.z) &&\r\n            this._isFloatMax(boxMax.x, cellMax.x) && this._isFloatMax(boxMax.y, cellMax.y) && this._isFloatMax(boxMax.z, cellMax.z)) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 给box增加一个Bounds\r\n     * @param cell \r\n     */\r\n    private _addBounds(cell: IBoundsCell) {\r\n        this._boundchanged = this._isBoundsContainedBySpatialBox(cell);\r\n    }\r\n\r\n    /**\r\n     * 给box减少一个bounds\r\n     * @param cell \r\n     */\r\n    private _removeBounds(cell: IBoundsCell) {\r\n        this._boundchanged = this._isBoundsContainedBySpatialBox(cell);\r\n    }\r\n\r\n    /**\r\n     * 获得渲染list\r\n     * @returns \r\n     */\r\n    getList(){\r\n        return this._cellList;\r\n    }\r\n\r\n    /**\r\n     * 获得child0\r\n     * @returns \r\n     */\r\n    getchild0(){\r\n        return this._children0;\r\n    }\r\n    /**\r\n     * 获得child1\r\n     * @returns \r\n     */\r\n    getchild1(){\r\n        return this._children1;\r\n    }\r\n\r\n    /**\r\n     * fill one Cell\r\n     * add but dont Split immediately\r\n     */\r\n    fillCell(cell: IBoundsCell) {\r\n        if (this._isRepeat(cell)) {\r\n            return;\r\n        }\r\n        this._addOneCell(cell);\r\n        this._boundchanged = true;\r\n        this._bvhmanager.updateBVHBoxList.add(this);\r\n    }\r\n\r\n    /**\r\n     * fill remove one cell\r\n     * remove but dont split imediately\r\n     * @param cell \r\n     */\r\n    fillRemove(cell: IBoundsCell) {\r\n        if (!this._isRepeat(cell)) {\r\n            return;\r\n        }\r\n        this._removeOneCell(cell);\r\n        this._boundchanged = true;\r\n        this._bvhmanager.updateBVHBoxList.add(this);\r\n    }\r\n\r\n    /**\r\n     * add one Cell\r\n     * @param cell \r\n     * @returns \r\n     */\r\n    addCell(cell: IBoundsCell) {\r\n        if (this._isRepeat(cell)) {\r\n            return;\r\n        }\r\n        this._addOneCell(cell);\r\n        this._addBounds(cell);\r\n    }\r\n\r\n    /**\r\n     * remove one Cell\r\n     * @param cell \r\n     */\r\n    removeCell(cell: IBoundsCell) {\r\n        if (this._removeOneCell(cell)) {\r\n            this._removeBounds(cell);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 构建BVHBox\r\n     * @returns \r\n     */\r\n    splitBox() {\r\n        if (!this.isContentBox()) {\r\n            this._children0 && this._children0.splitBox();\r\n            this._children1 && this._children1.splitBox();\r\n            return;\r\n        }\r\n\r\n        let v1 = this._bounds.getExtent(); //获取包围盒轮廓\r\n\r\n        if ((this._config.max_SpatialCount > this._cellCount && this._config.limit_size >= 2 * Math.max(v1.x, v1.y, v1.z)) || this._cellCount <= 1)\r\n            return;\r\n\r\n        //sort方向尺寸大为分割方向\r\n        if (v1.x > v1.y && v1.x > v1.z)\r\n            this._cellList.sort((a: IBoundsCell, b: IBoundsCell) => {\r\n                if (a && b)\r\n                    return a.bounds.getCenter().x - b.bounds.getCenter().x;\r\n                else return 0;\r\n            }); //按照X轴方向分割\r\n        else if (v1.y > v1.x && v1.y > v1.z) //排序使分割位置更加合理\r\n            this._cellList.sort((a: IBoundsCell, b: IBoundsCell) => {\r\n                if (a && b) return a.bounds.getCenter().y - b.bounds.getCenter().y;\r\n                else return 0;\r\n            }); //按照Y轴方向分割\r\n        else if (v1.z > v1.x && v1.z > v1.y) //排序使分割位置更加合理\r\n            this._cellList.sort((a: IBoundsCell, b: IBoundsCell) => {\r\n                if (a && b) return a.bounds.getCenter().z - b.bounds.getCenter().z;\r\n                else return 0;\r\n            }); //按照Y轴方向分割\r\n        const mid = this._cellCount / 2 | 0; //找中间位置\r\n\r\n        this._children0 = this._creatChildNode();\r\n        this._children0.parent = this;\r\n        for (let i = 0; i < mid; i++) { //前一半逻辑对象放入第一个子空间中\r\n            const cell = this._cellList[i];\r\n            this._children0.fillCell(cell);\r\n            Bounds.merge(this._children0._bounds, cell.bounds, this._children0._bounds);\r\n        }\r\n        this._children0._boundchanged = false;\r\n        this._children0.splitBox();\r\n\r\n        this._children1 = this._creatChildNode();\r\n        this._children1.parent = this;\r\n\r\n        for (let i = mid; i < this._cellCount; i++) { //后一半逻辑对象放入第二个子空间中\r\n            const cell = this._cellList[i];\r\n            this._children1.fillCell(cell);\r\n            Bounds.merge(this._children1._bounds, cell.bounds, this._children1._bounds);\r\n        }\r\n        this._children1._boundchanged = false;\r\n        this._children1.splitBox();\r\n\r\n        this._clearList();\r\n    }\r\n\r\n    /**\r\n     * 获得最近的Content BVHBox\r\n     * @param checkPos \r\n     * @returns \r\n     */\r\n    getNearlist(checkPos: Vector3): BVHSpatialBox<T> {\r\n        if (this.isContentBox())\r\n            return this;\r\n        else {\r\n            let v1 = this._children0._bounds.getCenter();\r\n            let v2 = this._children1._bounds.getCenter();\r\n            return Vector3.distanceSquared(v1, checkPos) < Vector3.distanceSquared(v2, checkPos) ? this._children0.getNearlist(checkPos) : this._children1.getNearlist(checkPos);\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * 获得这个节点包含的所有content\r\n     * @param out \r\n     */\r\n    traverseBoundsCell(out: SingletonList<IBoundsCell>) {\r\n        if (this.isContentBox()) {\r\n            for (var i = 0; i < this._cellCount; i++) {\r\n                out.add(this._cellList[i]);\r\n            }\r\n        } else {\r\n            this._children0 && this._children0.traverseBoundsCell(out);\r\n            this._children1 && this._children1.traverseBoundsCell(out);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Override it\r\n     * @returns \r\n     */\r\n    protected _creatChildNode(): BVHSpatialBox<T> {\r\n        return new BVHSpatialBox<T>(this._bvhmanager, this._config);\r\n    }\r\n\r\n    /**\r\n     * 通过CameraCull查找逻辑对象\r\n     * @override\r\n     * @param frustum 视锥\r\n     * @param out 输出逻辑对象组\r\n     */\r\n    getItemByCameraCullInfo(cameraCullInfo: ICameraCullInfo, out: SingletonList<IBoundsCell>) {\r\n        var frustum: BoundFrustum = cameraCullInfo.boundFrustum;\r\n        const result = frustum.containsBoundBox(this._bounds);\r\n        if (result == 1) //完全包含\r\n            this.traverseBoundsCell(out); //遍历分支，添加所有逻辑对象\r\n        else if (result == 2) { //部分包含\r\n            if (this.isContentBox()) {\r\n                for (let i = 0; i < this._cellList.length; i++) { //逐个判断逻辑对象包围盒是否和视锥有交集\r\n                    if (frustum.intersects(this._cellList[i].bounds))\r\n                        out.add(this._cellList[i]);\r\n                }\r\n            } else {\r\n                this._children0.getItemByCameraCullInfo(cameraCullInfo, out); //处理子空间\r\n                this._children1.getItemByCameraCullInfo(cameraCullInfo, out); //处理子空间\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 通过视锥查找逻辑对象\r\n     * @override\r\n     * @param frustum 视锥\r\n     * @param out 输出逻辑对象组\r\n     */\r\n    getItemByFrustum(frustum: BoundFrustum, out: SingletonList<IBoundsCell>) {\r\n        const result = frustum.containsBoundBox(this._bounds);\r\n        if (result == 1) //完全包含\r\n            this.traverseBoundsCell(out); //遍历分支，添加所有逻辑对象\r\n        else if (result == 2) { //部分包含\r\n            if (this.isContentBox()) {\r\n                for (let i = 0; i < this._cellList.length; i++) { //逐个判断逻辑对象包围盒是否和视锥有交集\r\n                    if (frustum.intersects(this._cellList[i].bounds))\r\n                        out.add(this._cellList[i]);\r\n                }\r\n            } else {\r\n                this._children0.getItemByFrustum(frustum, out); //处理子空间\r\n                this._children1.getItemByFrustum(frustum, out); //处理子空间\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 通过阴影裁剪信息查找逻辑对象\r\n     * @override \r\n     * @param sci\r\n     * @param out \r\n     */\r\n    getItemBySCI(sci: IShadowCullInfo, out: SingletonList<IBoundsCell>) {\r\n        const result = BVHSpatialBox.sciContainsBox(this._bounds, sci);\r\n        if (result == 1) //完全包含\r\n            this.traverseBoundsCell(out); //遍历分支，添加所有逻辑对象\r\n        else if (result == 2) { //部分包含\r\n            if (this.isContentBox()) {\r\n                for (let i = 0; i < this._cellList.length; i++) { //逐个判断逻辑对象包围盒是否和视锥有交集\r\n                    if (BVHSpatialBox.sciIntersectsBox(this._cellList[i].bounds, sci))\r\n                        out.add(this._cellList[i]);\r\n                }\r\n            } else {\r\n                this._children0.getItemBySCI(sci, out); //处理子空间\r\n                this._children1.getItemBySCI(sci, out); //处理子空间\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 重算包围盒\r\n     * null need Update by child\r\n     * contents need Update by List\r\n     */\r\n    recaculateBox() {\r\n        if (!!this._children0 && !!this._children1) {\r\n            Bounds.merge(this._children0._bounds, this._children1._bounds, this._bounds);\r\n        }\r\n        else if (this._cellList && this._cellList.length >= 1) {\r\n            this._cellList[0].bounds.cloneTo(this._bounds);\r\n            for (var i = 0, n = this._cellList.length; i < n; i++) {\r\n                Bounds.merge(this._cellList[i].bounds, this._bounds, this._bounds);\r\n            }\r\n        } else {\r\n            console.error(\"BVHSpatialBox is illegal\");\r\n        }\r\n        this.parent && this.parent.recaculateBox();\r\n        this._boundchanged = false;\r\n    }\r\n\r\n    /**\r\n     * 是否是根节点\r\n     * @returns \r\n     */\r\n    isRoot(): boolean {\r\n        return !this._parent;\r\n    }\r\n\r\n    /**\r\n     * 是否是叶节点\r\n     * @returns \r\n     */\r\n    isContentBox(): boolean {\r\n        return this._cellCount != 0;\r\n    }\r\n\r\n    /**\r\n     * 删除box\r\n     */\r\n    destroy() {\r\n        if (this.isContentBox()) {\r\n            this._cellList = null;\r\n        } else {\r\n            this._children0 && this._children0.destroy();\r\n            this._children1 && this._children1.destroy();\r\n            this._children0 = null;\r\n            this._children1 = null;\r\n        }\r\n        this._bounds = null;\r\n        this._config = null;\r\n        this._bvhmanager = null;\r\n    }\r\n\r\n}","import { ICameraCullInfo } from \"../../../../RenderEngine/RenderInterface/RenderPipelineInterface/ICameraCullInfo\";\r\nimport { IShadowCullInfo } from \"../../../../RenderEngine/RenderInterface/RenderPipelineInterface/IShadowCullInfo\";\r\nimport { SingletonList } from \"../../../../utils/SingletonList\";\r\nimport { BoundFrustum } from \"../../../math/BoundFrustum\";\r\nimport { IBoundsCell } from \"../../../math/IBoundsCell\";\r\nimport { BVHSpatialBox } from \"./BVHSpatialBox\";\r\nimport { BVHSpatialConfig, BVHSpatialManager } from \"./SpatialManager\";\r\n\r\n/**\r\n * BVH系统\r\n */\r\nexport class BVHSpatial {\r\n\r\n    /**@internal */\r\n    protected _BVHConfig: BVHSpatialConfig;\r\n\r\n    /**@internal */\r\n    protected _BVHManager: BVHSpatialManager;\r\n\r\n    /**@internal */\r\n    protected _BVHSpatialBox: BVHSpatialBox<IBoundsCell>;\r\n\r\n    /**@internal */\r\n    protected _isBuild: boolean = false;\r\n\r\n    /**\r\n     * Override it\r\n     * @returns \r\n     */\r\n    protected _creatChildNode(): BVHSpatialBox<IBoundsCell> {\r\n        return new BVHSpatialBox<IBoundsCell>(this._BVHManager, this._BVHConfig);\r\n    }\r\n\r\n    /**\r\n     * 创建BVH系统实例\r\n     */\r\n    constructor(bvhConfig: BVHSpatialConfig = null, bvhManager: BVHSpatialManager = null) {\r\n        this._BVHConfig = bvhConfig ? bvhConfig : new BVHSpatialConfig();\r\n        this._BVHManager = bvhManager ? bvhManager : new BVHSpatialManager();\r\n        this._BVHSpatialBox = this._creatChildNode();\r\n    }\r\n\r\n    /**\r\n     * 获得空间节点\r\n     */\r\n    get bvhSpatialBox(){\r\n        return this._BVHSpatialBox;\r\n    }\r\n\r\n    /**\r\n     * 是否合法\r\n     * @param cell \r\n     * @returns \r\n     */\r\n    cellLegal(cell: IBoundsCell): boolean {\r\n        let extend = cell.bounds.getExtent();\r\n        return this._BVHConfig.limit_size > (Math.max(extend.x, extend.y, extend.z) * 2);// too large is cant \r\n    }\r\n\r\n    /**\r\n     * add one\r\n     * @param cell \r\n     */\r\n    addOne(cell: IBoundsCell) {\r\n        if (!this.cellLegal(cell)) {\r\n            return false\r\n        }\r\n        if (this._isBuild) {\r\n            let spatial = this._BVHSpatialBox.getNearlist(cell.bounds.getCenter());\r\n            spatial.addCell(cell);\r\n            this._BVHManager.updateBVHBoxList.add(spatial);\r\n        } else {\r\n            this._BVHSpatialBox.fillCell(cell);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * remove one\r\n     * @param cell \r\n     * @returns \r\n     */\r\n    removeOne(cell: IBoundsCell) {\r\n        if (!this._BVHManager.bvhManager.has(cell.id)) {\r\n            return false;\r\n        }\r\n        if (this._isBuild) {\r\n            let spatial = this._BVHManager.bvhManager.get(cell.id);\r\n            spatial.removeCell(cell);\r\n            this._BVHManager.updateBVHBoxList.add(spatial);\r\n        } else {\r\n            this._BVHSpatialBox.fillRemove(cell);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * remove\r\n     * @param cell \r\n     */\r\n    motionOne(cell: IBoundsCell) {\r\n        if (this._BVHSpatialBox.getNearlist(cell.bounds.getCenter()) == this._BVHManager.bvhManager.get(cell.id)) {\r\n            return;\r\n        } else {\r\n            this.removeOne(cell);\r\n            this.addOne(cell);\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n    * 通过CameraCull查找逻辑对象\r\n    * @override\r\n    * @param frustum 视锥\r\n    * @param out 输出逻辑对象组\r\n    */\r\n    getItemByCameraCullInfo(cameraCullInfo: ICameraCullInfo, out: SingletonList<IBoundsCell>) {\r\n        if (this._BVHManager.updateBVHBoxList.length > 0) {\r\n            this.update();\r\n        }\r\n        if (this._isBuild) {\r\n            this._BVHSpatialBox.getItemByCameraCullInfo(cameraCullInfo, out);\r\n        } else {\r\n            this._BVHSpatialBox.traverseBoundsCell(out);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 通过视锥查找逻辑对象\r\n     * @override\r\n     * @param frustum 视锥\r\n     * @param out 输出逻辑对象组\r\n     */\r\n    getItemByFrustum(frustum: BoundFrustum, out: SingletonList<IBoundsCell>) {\r\n        if (this._BVHManager.updateBVHBoxList.length > 0) {\r\n            this.update();\r\n        }\r\n        if (this._isBuild) {\r\n            this._BVHSpatialBox.getItemByFrustum(frustum, out);\r\n        } else {\r\n            this._BVHSpatialBox.traverseBoundsCell(out);\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * 通过阴影裁剪信息查找逻辑对象\r\n     * @override \r\n     * @param sci\r\n     * @param out \r\n     */\r\n    getItemBySCI(sci: IShadowCullInfo, out: SingletonList<IBoundsCell>) {\r\n        if (this._BVHManager.updateBVHBoxList.length > 0) {\r\n            this.update();\r\n        }\r\n        if (this._isBuild) {\r\n            this._BVHSpatialBox.getItemBySCI(sci, out);\r\n        } else {\r\n            this._BVHSpatialBox.traverseBoundsCell(out);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 帧循环，根据具体需求，选适合频率调用\r\n     */\r\n    update() {\r\n        if (!this._isBuild) {//first build\r\n            if (this._BVHManager.cellCount > this._BVHConfig.Min_BVH_Build_Nums) {\r\n                this._BVHSpatialBox.recaculateBox();\r\n                this._BVHSpatialBox.splitBox();//build\r\n                this._BVHManager.updateBVHBoxList.remove(this._BVHSpatialBox);\r\n                this._isBuild = true;\r\n            }\r\n            this._BVHManager.updateBVHBoxList.length = 0;\r\n        } else {\r\n            let list = this._BVHManager.updateBVHBoxList;\r\n            for (let i = 0, n = list.length; i < n; i++) {\r\n                let spatial = list.elements[i];\r\n                spatial._boundchanged && spatial.recaculateBox();\r\n                spatial.splitBox();\r\n            }\r\n            list.length = 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * rebuild\r\n     */\r\n    rebuild() {\r\n        if (this._isBuild) {//reBuild\r\n            let out = new SingletonList<IBoundsCell>();\r\n            this._BVHSpatialBox.traverseBoundsCell(out);\r\n            this._BVHSpatialBox.destroy();\r\n            this._BVHManager.clear();\r\n            this._isBuild = false;\r\n            this._BVHSpatialBox = this._creatChildNode();\r\n            for (let i = 0, n = out.length; i < n; i++) {\r\n                this.addOne(out.elements[i]);\r\n            }\r\n            this._BVHSpatialBox.recaculateBox();\r\n            this._BVHSpatialBox.splitBox();//build\r\n        }\r\n    }\r\n\r\n    /**\r\n     * destroy\r\n     */\r\n    destroy() {\r\n        this._BVHSpatialBox.destroy();\r\n        this._BVHManager.destroy();\r\n    }\r\n}","import { ICameraCullInfo } from \"../../../../RenderEngine/RenderInterface/RenderPipelineInterface/ICameraCullInfo\";\r\nimport { IShadowCullInfo } from \"../../../../RenderEngine/RenderInterface/RenderPipelineInterface/IShadowCullInfo\";\r\nimport { SingletonList } from \"../../../../utils/SingletonList\";\r\nimport { Stat } from \"../../../../utils/Stat\";\r\nimport { FrustumCulling } from \"../../../graphics/FrustumCulling\";\r\nimport { BoundFrustum } from \"../../../math/BoundFrustum\";\r\nimport { BaseRender } from \"../../render/BaseRender\";\r\nimport { RenderContext3D } from \"../../render/RenderContext3D\";\r\nimport { BVHSpatialBox } from \"../bvh/BVHSpatialBox\";\r\n\r\nexport class BVHRenderBox<T> extends BVHSpatialBox<T>{\r\n\r\n    /**@internal BVH实例数组 */\r\n    protected _cellList: Array<BaseRender>;\r\n\r\n    /**\r\n     * Override it\r\n     * @returns \r\n     */\r\n    protected _creatChildNode(): BVHSpatialBox<T> {\r\n        return new BVHRenderBox<BaseRender>(this._bvhmanager, this._config);\r\n    }\r\n\r\n    /**\r\n     * 通过CameraCull查找逻辑对象\r\n     * @override\r\n     * @param frustum 视锥\r\n     * @param out 输出逻辑对象组\r\n     */\r\n    getItemByCameraCullInfo(cameraCullInfo: ICameraCullInfo, out: SingletonList<BaseRender>) {\r\n        var frustum: BoundFrustum = cameraCullInfo.boundFrustum;\r\n        const result = frustum.containsBoundBox(this._bounds);\r\n        if (result == 1) {\r\n            this.traverseBoundsCell(out); //遍历分支，添加所有逻辑对象\r\n            Stat.frustumCulling++;\r\n        } //完全包含\r\n        else if (result == 2) { //部分包含\r\n            if (this.isContentBox()) {\r\n                var cullMask: number = cameraCullInfo.cullingMask;\r\n                let staticMask = cameraCullInfo.staticMask;\r\n                let context = RenderContext3D._instance;\r\n                for (let i = 0; i < this._cellList.length; i++) { //逐个判断逻辑对象包围盒是否和视锥有交集\r\n                    var canPass: boolean;\r\n                    let render = this._cellList[i]\r\n                    canPass = (Math.pow(2, render.renderNode.layer) & cullMask) != 0 && render._enabled && (render.renderbitFlag == 0);\r\n                    canPass = canPass && ((render.renderNode.staticMask & staticMask) != 0);\r\n                    if (canPass) {\r\n                        Stat.frustumCulling++;\r\n                        if (!cameraCullInfo.useOcclusionCulling || render._needRender(frustum, context)) {\r\n                            out.add(render);\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                this._children0.getItemByCameraCullInfo(cameraCullInfo, out); //处理子空间\r\n                this._children1.getItemByCameraCullInfo(cameraCullInfo, out); //处理子空间\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n    * 通过阴影裁剪信息查找逻辑对象\r\n    * @override\r\n    * @param sci\r\n    * @param out \r\n    */\r\n    getItemBySCI(sci: IShadowCullInfo, out: SingletonList<BaseRender>) {\r\n        const result = BVHSpatialBox.sciContainsBox(this._bounds, sci);\r\n        if (result == 1) //完全包含\r\n            this.traverseBoundsCell(out); //遍历分支，添加所有逻辑对象\r\n        else if (result == 2) { //部分包含\r\n            if (this.isContentBox()) {\r\n                for (let i = 0; i < this._cellList.length; i++) { //逐个判断逻辑对象包围盒是否和视锥有交集\r\n                    var render = this._cellList[i];\r\n                    var canPass: boolean = render.castShadow && render._enabled && (render.renderbitFlag == 0);\r\n                    if (canPass) {\r\n                        Stat.frustumCulling++;\r\n                        let pass = FrustumCulling.cullingRenderBounds(render.bounds, sci);\r\n                        pass && out.add(render);\r\n                    }\r\n                    // if (BVHSpatialBox.sciIntersectsBox(this._cellList[i].bounds, sci))\r\n                    //     out.add(this._cellList[i]);\r\n                }\r\n            } else {\r\n                this._children0.getItemBySCI(sci, out); //处理子空间\r\n                this._children1.getItemBySCI(sci, out); //处理子空间\r\n            }\r\n        }\r\n    }\r\n\r\n}","import { BaseRender } from \"../../render/BaseRender\";\r\nimport { StaticFlag } from \"../../Sprite3D\";\r\nimport { BVHSpatial } from \"../bvh/BVHSpatial\";\r\nimport { BVHRenderBox } from \"./BVHRenderSpatialBox\";\r\n\r\nexport class BVHRenderSpatial extends BVHSpatial {\r\n    /**\r\n     * Override it\r\n     * @returns \r\n     */\r\n    protected _creatChildNode(): BVHRenderBox<BaseRender> {\r\n        return new BVHRenderBox<BaseRender>(this._BVHManager, this._BVHConfig);\r\n    }\r\n    \r\n    /**\r\n     * 是否合法\r\n     * @param cell \r\n     * @returns \r\n     */\r\n    cellLegal(cell: BaseRender): boolean {\r\n        if (cell.renderNode.staticMask == StaticFlag.StaticBatch&&super.cellLegal(cell))\r\n            return true;\r\n        return false;\r\n    }\r\n}","import { ISceneRenderManager } from \"../../../../RenderEngine/RenderInterface/RenderPipelineInterface/ISceneRenderManager\";\r\nimport { SingletonList } from \"../../../../utils/SingletonList\";\r\nimport { BaseRender } from \"../../render/BaseRender\";\r\nimport { BVHSpatialConfig } from \"../bvh/SpatialManager\";\r\nimport { SceneRenderManager } from \"../SceneRenderManager\";\r\nimport { BVHRenderSpatial } from \"./BVHRenderSpatial\";\r\n\r\nexport class BVHSceneRenderManager extends SceneRenderManager {\r\n    /**@internal */\r\n    protected _sceneManagerOBJ: ISceneRenderManager;\r\n    /**@internal */\r\n    private _bvhRenderSpatial: BVHRenderSpatial;\r\n\r\n    private _allRenderList:SingletonList<BaseRender>;\r\n\r\n    /**\r\n     * 实例化\r\n     */\r\n    constructor(bvhConfig:BVHSpatialConfig = null) {\r\n        super();\r\n        this._bvhRenderSpatial = new BVHRenderSpatial(bvhConfig);\r\n        this._allRenderList = new SingletonList<BaseRender>();\r\n    }\r\n\r\n    /**\r\n    * get RenderList\r\n    */\r\n    get list(): SingletonList<BaseRender> {\r\n        return this._allRenderList;\r\n    }\r\n\r\n    set list(value: SingletonList<BaseRender>) {\r\n        for(let i = 0,n = value.length;i<n;i++){\r\n            let render = value.elements[i];\r\n            this.addRenderObject(render);\r\n        }\r\n    }\r\n\r\n    get bvhSpatial(){\r\n        return this._bvhRenderSpatial;\r\n    }\r\n\r\n    get otherList(){\r\n        return this._sceneManagerOBJ.list;\r\n    }\r\n\r\n    /**\r\n     * add Render Node\r\n     * @param object \r\n     */\r\n    addRenderObject(object: BaseRender): void {\r\n        if (!this._bvhRenderSpatial.addOne(object)) {\r\n            this._sceneManagerOBJ.addRenderObject(object);\r\n        }\r\n        this._allRenderList.add(object);\r\n    }\r\n\r\n    /**\r\n     * remove Render Node\r\n     * @param object \r\n     */\r\n    removeRenderObject(object: BaseRender): void {\r\n        if (!this._bvhRenderSpatial.removeOne(object))\r\n            this._sceneManagerOBJ.removeRenderObject(object);\r\n        this._allRenderList.remove(object);\r\n    }\r\n\r\n    /**\r\n     * remove motion Object\r\n     * @param object \r\n     */\r\n    removeMotionObject(object: BaseRender): void {\r\n        this._sceneManagerOBJ.removeMotionObject(object);\r\n    }\r\n\r\n    /**\r\n     * update All Motion Render Data\r\n     */\r\n    updateMotionObjects(): void {\r\n        this._bvhRenderSpatial.update();\r\n        this._sceneManagerOBJ.updateMotionObjects();\r\n\r\n    }\r\n\r\n    /**\r\n     * add motion Render Data\r\n     * @param object \r\n     */\r\n    addMotionObject(object: BaseRender): void {\r\n        if (this._bvhRenderSpatial.cellLegal(object)) {\r\n            this._bvhRenderSpatial.motionOne(object);\r\n        } else {\r\n            this._sceneManagerOBJ.addMotionObject(object);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * destroy\r\n     */\r\n    destroy(): void {\r\n        this._sceneManagerOBJ.destroy();\r\n        this._bvhRenderSpatial.destroy();\r\n        this._allRenderList .destroy();\r\n    }\r\n}","import { Vector3 } from \"../../../maths/Vector3\";\r\nimport { ICameraCullInfo } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/ICameraCullInfo\";\r\nimport { ICullPass } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/ICullPass\";\r\nimport { ISceneRenderManager } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/ISceneRenderManager\";\r\nimport { IShadowCullInfo } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/IShadowCullInfo\";\r\nimport { SingletonList } from \"../../../utils/SingletonList\";\r\nimport { Stat } from \"../../../utils/Stat\";\r\nimport { BaseRender } from \"../../core/render/BaseRender\";\r\nimport { RenderContext3D } from \"../../core/render/RenderContext3D\";\r\nimport { FrustumCulling } from \"../../graphics/FrustumCulling\";\r\nimport { BoundFrustum } from \"../../math/BoundFrustum\";\r\n\r\n\r\nexport class CullPassBase implements ICullPass {\r\n    protected _cullList: SingletonList<BaseRender> = new SingletonList();\r\n\r\n    get cullList(): SingletonList<BaseRender> {\r\n        return this._cullList;\r\n    }\r\n\r\n    /**\r\n     * TODO\r\n\t * 视距与包围提裁剪\r\n\t * @param context \r\n\t * @param render \r\n\t * @returns \r\n\t */\r\n\tstatic cullDistanceVolume(context:RenderContext3D,render:BaseRender):boolean{\r\n\t\tlet camera = context.camera;\r\n\t\tif(!camera||!camera.transform) return false;\r\n\t\tlet bound = render.bounds;\r\n\t\tlet center = bound.getCenter();\r\n\t\tlet exten = bound.getExtent();\r\n\t\tlet dis:number = Vector3.distance(camera.transform.position,center);\r\n\t\tlet volum:number = Math.max(exten.x,exten.y,exten.z);\r\n\t\tif(volum/dis<render._ratioIgnor){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n    cullByCameraCullInfo(cameraCullInfo: ICameraCullInfo, renderManager: ISceneRenderManager): void {\r\n        this._cullList.length = 0;\r\n        var renders = renderManager.list.elements;\r\n        var boundFrustum: BoundFrustum = cameraCullInfo.boundFrustum;\r\n        var cullMask: number = cameraCullInfo.cullingMask;\r\n        let staticMask = cameraCullInfo.staticMask;\r\n        let context = RenderContext3D._instance;\r\n        for (var i: number = 0, n: number = renderManager.list.length; i < n; i++) {\r\n            var render = renders[i];\r\n            var canPass: boolean;\r\n            canPass = (Math.pow(2, render.renderNode.layer) & cullMask) != 0 && render._enabled && (render.renderbitFlag == 0);\r\n            canPass = canPass && (( render.renderNode.staticMask & staticMask) != 0);\r\n            if (canPass) {\r\n                Stat.frustumCulling++;\r\n                if (!cameraCullInfo.useOcclusionCulling || render._needRender(boundFrustum, context)) {\r\n                    this.cullList.add(render);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    cullByShadowCullInfo(cullInfo: IShadowCullInfo, renderManager: ISceneRenderManager): void {\r\n        this._cullList.length = 0;\r\n        var renderList = renderManager.list;\r\n        var renders = renderList.elements;\r\n        for (var i: number = 0, n: number = renderList.length; i < n; i++) {\r\n            var render = renders[i];\r\n            var canPass: boolean = render.castShadow && render._enabled && (render.renderbitFlag == 0);\r\n            if (canPass) {\r\n                Stat.frustumCulling++;\r\n                let pass = FrustumCulling.cullingRenderBounds(render.bounds, cullInfo);\r\n                pass && this._cullList.add(render);\r\n                // if (pass) {\r\n                // \trender.distanceForSort = Vector3.distance(render.bounds.getCenter(), position);//TODO:合并计算浪费,或者合并后取平均值\r\n                // \tvar elements: RenderElement[] = render._renderElements;\r\n                // \tfor (var j: number = 0, m: number = elements.length; j < m; j++)\r\n                // \t\telements[j]._update(scene, context, null, null);\r\n                // }\r\n            }\r\n        }\r\n    }\r\n    cullingSpotShadow(cameraCullInfo: ICameraCullInfo, renderManager: ISceneRenderManager): void {\r\n        this._cullList.length = 0;\r\n        let renders = renderManager.list.elements;\r\n        let boundFrustum: BoundFrustum = cameraCullInfo.boundFrustum;\r\n        let context = RenderContext3D._instance;\r\n        for (let i = 0, n = renderManager.list.length; i < n; i++) {\r\n            let render = renders[i];\r\n            let canPass: boolean = render.castShadow && render._enabled && (render.renderbitFlag == 0);\r\n            if (canPass) {\r\n                Stat.frustumCulling++;\r\n                if (render._needRender(boundFrustum, context))\r\n                    this._cullList.add(render);\r\n            }\r\n        }\r\n    }\r\n\r\n}","import { ICameraCullInfo } from \"../../../../RenderEngine/RenderInterface/RenderPipelineInterface/ICameraCullInfo\";\r\nimport { ISceneRenderManager } from \"../../../../RenderEngine/RenderInterface/RenderPipelineInterface/ISceneRenderManager\";\r\nimport { IShadowCullInfo } from \"../../../../RenderEngine/RenderInterface/RenderPipelineInterface/IShadowCullInfo\";\r\nimport { SingletonList } from \"../../../../utils/SingletonList\";\r\nimport { Stat } from \"../../../../utils/Stat\";\r\nimport { FrustumCulling } from \"../../../graphics/FrustumCulling\";\r\nimport { BoundFrustum } from \"../../../math/BoundFrustum\";\r\nimport { CullPassBase } from \"../../../RenderObjs/RenderObj/CullPass\";\r\nimport { BaseRender } from \"../../render/BaseRender\";\r\nimport { RenderContext3D } from \"../../render/RenderContext3D\";\r\nimport { BVHSceneRenderManager } from \"./BVHSceneRenderManager\";\r\n\r\n/**\r\n * 类实现BVH架构的裁剪Pass\r\n */\r\nexport class BVHCullPass extends CullPassBase {\r\n    protected _cullList: SingletonList<BaseRender> = new SingletonList();\r\n    /**\r\n     * 获得裁剪队列\r\n     */\r\n    get cullList(): SingletonList<BaseRender> {\r\n        return this._cullList;\r\n    }\r\n\r\n    /**\r\n     * 基于相机视锥裁剪\r\n     * @param cameraCullInfo \r\n     * @param renderManager \r\n     */\r\n    cullByCameraCullInfo(cameraCullInfo: ICameraCullInfo, renderManager: BVHSceneRenderManager): void {\r\n        this._cullList.length = 0;\r\n        //BVH\r\n        renderManager.bvhSpatial.getItemByCameraCullInfo(cameraCullInfo,this._cullList);\r\n        //Dynamic\r\n        var renderList = renderManager.otherList;\r\n        var renders = renderList.elements;\r\n        var boundFrustum: BoundFrustum = cameraCullInfo.boundFrustum;\r\n        var cullMask: number = cameraCullInfo.cullingMask;\r\n        let staticMask = cameraCullInfo.staticMask;\r\n        let context = RenderContext3D._instance;\r\n        for (var i: number = 0, n: number = renderList.length; i < n; i++) {\r\n            var render = renders[i];\r\n            var canPass: boolean;\r\n            canPass = (Math.pow(2, render.renderNode.layer) & cullMask) != 0 && render._enabled && (render.renderbitFlag == 0);\r\n            canPass = canPass && ((render.renderNode.staticMask & staticMask) != 0);\r\n            if (canPass) {\r\n                Stat.frustumCulling++;\r\n                if (!cameraCullInfo.useOcclusionCulling || render._needRender(boundFrustum, context)) {\r\n                    this.cullList.add(render);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 基于阴影视锥裁剪\r\n     * @param cullInfo \r\n     * @param renderManager \r\n     */\r\n    cullByShadowCullInfo(cullInfo: IShadowCullInfo, renderManager: BVHSceneRenderManager): void {\r\n        this._cullList.length = 0;\r\n        //BVH\r\n        renderManager.bvhSpatial.getItemBySCI(cullInfo,this._cullList);\r\n        //Dynamic\r\n        var renderList = renderManager.otherList;\r\n        var renders = renderList.elements;\r\n        for (var i: number = 0, n: number = renderList.length; i < n; i++) {\r\n            var render = renders[i];\r\n            var canPass: boolean = render.castShadow && render._enabled && (render.renderbitFlag == 0);\r\n            if (canPass) {\r\n                Stat.frustumCulling++;\r\n                let pass = FrustumCulling.cullingRenderBounds(render.bounds, cullInfo);\r\n                pass && this._cullList.add(render);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 基于Spot视锥的裁剪\r\n     * @param cameraCullInfo \r\n     * @param renderManager \r\n     */\r\n    cullingSpotShadow(cameraCullInfo: ICameraCullInfo, renderManager: ISceneRenderManager): void {\r\n        //TODO\r\n    }\r\n} ","/**\r\n\t * ...\r\n\t * @author ...\r\n\t */\r\nexport class GradientMode {\r\n\t/**\r\n\t * 找到与请求的评估时间相邻的两个键,并线性插值在他们之间,以获得一种混合的颜色。\r\n\t */\r\n\tstatic Blend: number = 0;\r\n\r\n\t/**\r\n\t * 返回一个固定的颜色，通过查找第一个键的时间值大于所请求的评估时间。\r\n\t */\r\n\tstatic Fixed: number = 1;\r\n}\r\n\r\n","import { GradientMode } from \"./GradientMode\";\r\nimport { IClone } from \"../../utils/IClone\";\r\nimport { Color } from \"../../maths/Color\";\r\nimport { Vector4 } from \"../../maths/Vector4\";\r\n\r\n\r\n/**\r\n * <code>Gradient</code> 类用于创建颜色渐变。\r\n */\r\nexport class Gradient implements IClone {\r\n\tprivate _mode: number = 0;\r\n\tprivate _maxColorRGBKeysCount: number = 0;\r\n\tprivate _maxColorAlphaKeysCount: number = 0;\r\n\tprivate _colorRGBKeysCount: number = 0;\r\n\tprivate _colorAlphaKeysCount: number = 0;\r\n\r\n\t/**\r\n\t * @internal \r\n\t * element key range\r\n\t * x: colorkey min\r\n\t * y: colorkey max\r\n\t * z: alphakey min\r\n\t * w: alphakey max\r\n\t*/\r\n\t_keyRanges: Vector4 = new Vector4(1, 0, 1, 0);\r\n\r\n\t/**@internal */\r\n\t_alphaElements: Float32Array = null;\r\n\t/**@internal */\r\n\t_rgbElements: Float32Array = null;\r\n\r\n\t/**\r\n\t * 获取梯度模式。\r\n\t * @return  梯度模式。\r\n\t */\r\n\tget mode(): number {\r\n\t\treturn this._mode;\r\n\t}\r\n\r\n\t/**\r\n\t * 设置梯度模式。\r\n\t * @param value 梯度模式。\r\n\t */\r\n\tset mode(value: number) {\r\n\t\tthis._mode = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取颜色RGB数量。\r\n\t * @return 颜色RGB数量。\r\n\t */\r\n\tget colorRGBKeysCount(): number {\r\n\t\treturn this._colorRGBKeysCount;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取颜色Alpha数量。\r\n\t * @return 颜色Alpha数量。\r\n\t */\r\n\tget colorAlphaKeysCount(): number {\r\n\t\treturn this._colorAlphaKeysCount;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取最大颜色RGB帧数量。\r\n\t * @return 最大RGB帧数量。\r\n\t */\r\n\tget maxColorRGBKeysCount(): number {\r\n\t\treturn this._maxColorRGBKeysCount;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取最大颜色Alpha帧数量。\r\n\t * @return 最大Alpha帧数量。\r\n\t */\r\n\tget maxColorAlphaKeysCount(): number {\r\n\t\treturn this._maxColorAlphaKeysCount;\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>Gradient</code> 实例。\r\n\t * @param maxColorRGBKeyCount 最大RGB帧个数。\r\n\t * @param maxColorAlphaKeyCount 最大Alpha帧个数。\r\n\t */\r\n\tconstructor(maxColorRGBKeyCount: number, maxColorAlphaKeyCount: number) {\r\n\t\tthis._maxColorRGBKeysCount = maxColorRGBKeyCount;\r\n\t\tthis._maxColorAlphaKeysCount = maxColorAlphaKeyCount;\r\n\t\tthis._rgbElements = new Float32Array(maxColorRGBKeyCount * 4);\r\n\t\tthis._alphaElements = new Float32Array(maxColorAlphaKeyCount * 2);\r\n\t}\r\n\r\n\t/**\r\n\t * 增加颜色RGB帧。\r\n\t * @param\tkey 生命周期，范围为0到1。\r\n\t * @param\tvalue RGB值。\r\n\t */\r\n\taddColorRGB(key: number, value: Color): void {\r\n\t\tif (this._colorRGBKeysCount < this._maxColorRGBKeysCount) {\r\n\t\t\tvar offset: number = this._colorRGBKeysCount * 4;\r\n\t\t\tthis._rgbElements[offset] = key;\r\n\t\t\tthis._rgbElements[offset + 1] = value.r;\r\n\t\t\tthis._rgbElements[offset + 2] = value.g;\r\n\t\t\tthis._rgbElements[offset + 3] = value.b;\r\n\t\t\tthis._colorRGBKeysCount++;\r\n\t\t} else {\r\n\t\t\tconsole.warn(\"Gradient:warning:data count must lessEqual than \" + this._maxColorRGBKeysCount);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 增加颜色Alpha帧。\r\n\t * @param\tkey 生命周期，范围为0到1。\r\n\t * @param\tvalue Alpha值。\r\n\t */\r\n\taddColorAlpha(key: number, value: number): void {\r\n\t\tif (this._colorAlphaKeysCount < this._maxColorAlphaKeysCount) {\r\n\t\t\tvar offset: number = this._colorAlphaKeysCount * 2;\r\n\t\t\tthis._alphaElements[offset] = key;\r\n\t\t\tthis._alphaElements[offset + 1] = value;\r\n\t\t\tthis._colorAlphaKeysCount++;\r\n\t\t} else {\r\n\t\t\tconsole.warn(\"Gradient:warning:data count must lessEqual than \" + this._maxColorAlphaKeysCount);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 更新颜色RGB帧。\r\n\t * @param   index 索引。\r\n\t * @param\tkey 生命周期，范围为0到1。\r\n\t * @param\tvalue RGB值。\r\n\t */\r\n\tupdateColorRGB(index: number, key: number, value: Color): void {//TODO:以key为键自动排序\r\n\t\tif (index < this._colorRGBKeysCount) {\r\n\t\t\tvar offset: number = index * 4;\r\n\t\t\tthis._rgbElements[offset] = key;\r\n\t\t\tthis._rgbElements[offset + 1] = value.r;\r\n\t\t\tthis._rgbElements[offset + 2] = value.g;\r\n\t\t\tthis._rgbElements[offset + 3] = value.b;\r\n\t\t} else {\r\n\t\t\tconsole.warn(\"Gradient:warning:index must lessEqual than colorRGBKeysCount:\" + this._colorRGBKeysCount);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 更新颜色Alpha帧。\r\n\t * @param   index 索引。\r\n\t * @param\tkey 生命周期，范围为0到1。\r\n\t * @param\tvalue Alpha值。\r\n\t */\r\n\tupdateColorAlpha(index: number, key: number, value: number): void {\r\n\t\tif (index < this._colorAlphaKeysCount) {\r\n\t\t\tvar offset: number = index * 2;\r\n\t\t\tthis._alphaElements[offset] = key;\r\n\t\t\tthis._alphaElements[offset + 1] = value;\r\n\t\t} else {\r\n\t\t\tconsole.warn(\"Gradient:warning:index must lessEqual than colorAlphaKeysCount:\" + this._colorAlphaKeysCount);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 通过插值获取RGB颜色。\r\n\t * @param  lerpFactor 插值因子。\r\n\t * @param  out 颜色结果。\r\n\t * @param  开始查找索引。\r\n\t * @return 结果索引。\r\n\t */\r\n\tevaluateColorRGB(lerpFactor: number, out: Color, startSearchIndex: number = 0, reverseSearch: boolean = false): number {\r\n\t\tlerpFactor = Math.min(Math.max(lerpFactor, 0.0), 1.0);\r\n\r\n\t\tvar rgbElements: Float32Array = this._rgbElements;\r\n\t\tvar curIndex: number = startSearchIndex;\r\n\r\n\t\tif (reverseSearch) {\r\n\t\t\tfor (var i: number = curIndex; i >= 0; i--) {\r\n\t\t\t\tvar offset: number = i * 4;\r\n\t\t\t\tvar left: number = rgbElements[offset];\r\n\t\t\t\tif (lerpFactor === left) {\r\n\t\t\t\t\tout.r = rgbElements[offset + 1];\r\n\t\t\t\t\tout.g = rgbElements[offset + 2];\r\n\t\t\t\t\tout.b = rgbElements[offset + 3];\r\n\t\t\t\t\treturn curIndex;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tswitch (this._mode) {\r\n\t\t\t\t\tcase GradientMode.Blend:\r\n\t\t\t\t\t\tif (lerpFactor > left) {\r\n\t\t\t\t\t\t\tvar right: number = rgbElements[offset + 4];\r\n\t\t\t\t\t\t\tif (lerpFactor > right)\r\n\t\t\t\t\t\t\t\tthrow \"Gradient:wrong startSearchIndex.\";\r\n\t\t\t\t\t\t\tvar diff: number = right - left;\r\n\t\t\t\t\t\t\tvar y1: number = right - lerpFactor;\r\n\t\t\t\t\t\t\tvar y2: number = lerpFactor - left;\r\n\t\t\t\t\t\t\tout.r = (y1 * rgbElements[offset + 1] + y2 * rgbElements[offset + 5]) / diff;\r\n\t\t\t\t\t\t\tout.g = (y1 * rgbElements[offset + 2] + y2 * rgbElements[offset + 6]) / diff;\r\n\t\t\t\t\t\t\tout.b = (y1 * rgbElements[offset + 3] + y2 * rgbElements[offset + 7]) / diff;\r\n\t\t\t\t\t\t\treturn curIndex;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tcurIndex--;\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\tcase GradientMode.Fixed:\r\n\t\t\t\t\t\tif (lerpFactor > left) {\r\n\t\t\t\t\t\t\tif (lerpFactor > rgbElements[offset + 4])\r\n\t\t\t\t\t\t\t\tthrow \"Gradient:wrong startSearchIndex.\";\r\n\t\t\t\t\t\t\tout.r = rgbElements[offset + 5];\r\n\t\t\t\t\t\t\tout.g = rgbElements[offset + 6];\r\n\t\t\t\t\t\t\tout.b = rgbElements[offset + 7];\r\n\t\t\t\t\t\t\treturn curIndex;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tcurIndex--;\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tthrow \"Gradient:unknown mode.\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tfor (var i: number = 0, n: number = this._rgbElements.length; i < n; i++) {\r\n\t\t\t\toffset = i * 4;\r\n\t\t\t\tvar right: number = rgbElements[offset];\r\n\t\t\t\tif (lerpFactor === right) {\r\n\t\t\t\t\tout.r = rgbElements[offset + 1];\r\n\t\t\t\t\tout.g = rgbElements[offset + 2];\r\n\t\t\t\t\tout.b = rgbElements[offset + 3];\r\n\t\t\t\t\treturn curIndex;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tswitch (this._mode) {\r\n\t\t\t\t\tcase GradientMode.Blend:\r\n\t\t\t\t\t\tif (lerpFactor < right) {\r\n\t\t\t\t\t\t\tvar left: number = rgbElements[offset - 4];\r\n\t\t\t\t\t\t\tif (lerpFactor < left)\r\n\t\t\t\t\t\t\t\tthrow \"Gradient:wrong startSearchIndex.\";\r\n\t\t\t\t\t\t\tvar diff: number = right - left;\r\n\t\t\t\t\t\t\tvar y1: number = right - lerpFactor;\r\n\t\t\t\t\t\t\tvar y2: number = lerpFactor - left;\r\n\t\t\t\t\t\t\tout.r = (y1 * rgbElements[offset - 3] + y2 * rgbElements[offset + 1]) / diff;\r\n\t\t\t\t\t\t\tout.g = (y1 * rgbElements[offset - 2] + y2 * rgbElements[offset + 2]) / diff;\r\n\t\t\t\t\t\t\tout.b = (y1 * rgbElements[offset - 1] + y2 * rgbElements[offset + 3]) / diff;\r\n\t\t\t\t\t\t\treturn curIndex;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tcurIndex++;\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\tcase GradientMode.Fixed:\r\n\t\t\t\t\t\tif (lerpFactor < right) {\r\n\t\t\t\t\t\t\tif (lerpFactor < rgbElements[offset - 4])\r\n\t\t\t\t\t\t\t\tthrow \"Gradient:wrong startSearchIndex.\";\r\n\t\t\t\t\t\t\tout.r = rgbElements[offset + 1];\r\n\t\t\t\t\t\t\tout.g = rgbElements[offset + 2];\r\n\t\t\t\t\t\t\tout.b = rgbElements[offset + 3];\r\n\t\t\t\t\t\t\treturn curIndex;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tcurIndex++;\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tthrow \"Gradient:unknown mode.\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn curIndex;\r\n\t}\r\n\r\n\t/**\r\n\t * 通过插值获取透明值。\r\n\t * @param  lerpFactor 插值因子。\r\n\t * @param  out 颜色结果。\r\n\t * @param  开始查找索引。\r\n\t * @return 结果索引 。\r\n\t */\r\n\tevaluateColorAlpha(lerpFactor: number, outColor: Color, startSearchIndex: number = 0, reverseSearch: boolean = false): number {\r\n\t\tlerpFactor = Math.min(Math.max(lerpFactor, 0.0), 1.0);\r\n\t\tvar alphaElements: Float32Array = this._alphaElements;\r\n\t\tvar curIndex: number = startSearchIndex;\r\n\r\n\t\tif (reverseSearch) {\r\n\t\t\tfor (var i: number = curIndex; i >= 0; i--) {\r\n\t\t\t\tvar offset: number = i * 2;\r\n\t\t\t\tvar left: number = alphaElements[offset];\r\n\t\t\t\tif (lerpFactor === left) {\r\n\t\t\t\t\toutColor.a = alphaElements[offset + 1];\r\n\t\t\t\t\treturn curIndex;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tswitch (this._mode) {\r\n\t\t\t\t\tcase GradientMode.Blend:\r\n\t\t\t\t\t\tif (lerpFactor > left) {\r\n\t\t\t\t\t\t\tvar right: number = alphaElements[offset + 2];\r\n\t\t\t\t\t\t\tif (lerpFactor > right)\r\n\t\t\t\t\t\t\t\tthrow \"Gradient:wrong startSearchIndex.\";\r\n\r\n\t\t\t\t\t\t\tvar diff: number = right - left;\r\n\t\t\t\t\t\t\tvar x1: number = right - lerpFactor;\r\n\t\t\t\t\t\t\tvar x2: number = lerpFactor - left;\r\n\t\t\t\t\t\t\toutColor.a = (x1 * alphaElements[offset + 1] + x2 * alphaElements[offset + 3]) / diff;\r\n\t\t\t\t\t\t\treturn curIndex;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tcurIndex--;\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\tcase GradientMode.Fixed:\r\n\t\t\t\t\t\tif (lerpFactor > left) {\r\n\t\t\t\t\t\t\tif (lerpFactor > alphaElements[offset + 2])\r\n\t\t\t\t\t\t\t\tthrow \"Gradient:wrong startSearchIndex.\";\r\n\t\t\t\t\t\t\toutColor.a = alphaElements[offset + 3];\r\n\t\t\t\t\t\t\treturn curIndex;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tcurIndex--;\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tthrow \"Gradient:unknown mode.\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tfor (var i: number = curIndex, n: number = this._alphaElements.length; i < n; i++) {\r\n\t\t\t\tvar offset: number = i * 2;\r\n\t\t\t\tvar right: number = alphaElements[offset];\r\n\t\t\t\tif (lerpFactor === right) {\r\n\t\t\t\t\toutColor.a = alphaElements[offset + 1];\r\n\t\t\t\t\treturn curIndex;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tswitch (this._mode) {\r\n\t\t\t\t\tcase GradientMode.Blend:\r\n\t\t\t\t\t\tif (lerpFactor < right) {\r\n\t\t\t\t\t\t\tvar left: number = alphaElements[offset - 2];\r\n\t\t\t\t\t\t\tif (lerpFactor < left)\r\n\t\t\t\t\t\t\t\tthrow \"Gradient:wrong startSearchIndex.\";\r\n\t\t\t\t\t\t\tvar diff: number = right - left;\r\n\t\t\t\t\t\t\tvar x1: number = right - lerpFactor;\r\n\t\t\t\t\t\t\tvar x2: number = lerpFactor - left;\r\n\t\t\t\t\t\t\toutColor.a = (x1 * alphaElements[offset - 1] + x2 * alphaElements[offset + 1]) / diff;\r\n\t\t\t\t\t\t\treturn curIndex;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tcurIndex++;\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\tcase GradientMode.Fixed:\r\n\t\t\t\t\t\tif (lerpFactor < right) {\r\n\t\t\t\t\t\t\tif (lerpFactor < alphaElements[offset - 2])\r\n\t\t\t\t\t\t\t\tthrow \"Gradient:wrong startSearchIndex.\";\r\n\t\t\t\t\t\t\toutColor.a = alphaElements[offset + 1];\r\n\t\t\t\t\t\t\treturn curIndex;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tcurIndex++;\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tthrow \"Gradient:unknown mode.\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn curIndex;\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @param\tdestObject 克隆源。\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tvar destGradientDataColor: Gradient = (<Gradient>destObject);\r\n\t\tvar i: number, n: number;\r\n\t\tdestGradientDataColor._colorAlphaKeysCount = this._colorAlphaKeysCount;\r\n\t\tlet destAlphaElements = destGradientDataColor._alphaElements = new Float32Array(this._alphaElements.length);\r\n\t\t\r\n\t\tfor (i = 0, n = this._alphaElements.length; i < n; i++)\r\n\t\t\tdestAlphaElements[i] = this._alphaElements[i];\r\n\r\n\t\tdestGradientDataColor._colorRGBKeysCount = this._colorRGBKeysCount;\r\n\t\tvar destRGBElements: Float32Array = destGradientDataColor._rgbElements = new Float32Array(this._rgbElements.length);\r\n\t\tfor (i = 0, n = this._rgbElements.length; i < n; i++)\r\n\t\t\tdestRGBElements[i] = this._rgbElements[i];\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @return\t 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar destGradientDataColor: Gradient = new Gradient(this._maxColorRGBKeysCount, this._maxColorAlphaKeysCount);\r\n\t\tthis.cloneTo(destGradientDataColor);\r\n\t\treturn destGradientDataColor;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { Scene3D } from \"../scene/Scene3D\";\r\nimport { ShadowCascadesMode } from \"./ShadowCascadesMode\";\r\nimport { Light, LightType } from \"./Light\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\n\r\n\r\n/**\r\n * <code>DirectionLight</code> 类用于创建平行光。\r\n */\r\nexport class DirectionLightCom extends Light {\r\n\t/** @internal */\r\n\t_direction: Vector3 = new Vector3();\r\n\t/** @internal */\r\n\t_shadowCascadesMode: ShadowCascadesMode = ShadowCascadesMode.NoCascades;\r\n\t/** @internal */\r\n\t_shadowTwoCascadeSplits: number = 1.0 / 3.0;\r\n\t/** @internal */\r\n\t_shadowFourCascadeSplits: Vector3 = new Vector3(1.0 / 15, 3.0 / 15.0, 7.0 / 15.0);\r\n\r\n\t/**\r\n\t * 阴影级联数量。\r\n\t */\r\n\tget shadowCascadesMode(): ShadowCascadesMode {\r\n\t\treturn this._shadowCascadesMode;\r\n\t}\r\n\r\n\tset shadowCascadesMode(value: ShadowCascadesMode) {\r\n\t\tthis._shadowCascadesMode = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 二级级联阴影分割比例。\r\n\t */\r\n\tget shadowTwoCascadeSplits(): number {\r\n\t\treturn this._shadowTwoCascadeSplits;\r\n\t}\r\n\r\n\tset shadowTwoCascadeSplits(value: number) {\r\n\t\tthis._shadowTwoCascadeSplits = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 四级级联阴影分割比例,X、Y、Z依次为其分割比例,Z必须大于Y,Y必须大于X。\r\n\t */\r\n\tget shadowFourCascadeSplits(): Vector3 {\r\n\t\treturn this._shadowFourCascadeSplits;\r\n\t}\r\n\r\n\tset shadowFourCascadeSplits(value: Vector3) {\r\n\t\tif (value.x > value.y || value.y > value.z || value.z > 1.0)\r\n\t\t\tthrow \"DiretionLight:Invalid value.\";\r\n\t\tvalue.cloneTo(this._shadowFourCascadeSplits);\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>DirectionLight</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis._lightType = LightType.Directional;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * @override\r\n\t */\r\n\tprotected _addToLightQueue(): void {\r\n\t\t(<Scene3D>this.owner.scene)._directionLights.add(this);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * @override\r\n\t */\r\n\tprotected _removeFromLightQueue(): void {\r\n\t\t(<Scene3D>this.owner.scene)._directionLights.remove(this);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprotected _create(): DirectionLightCom {\r\n\t\treturn new DirectionLightCom();\r\n\t}\r\n}\r\n\r\n","import { Node } from \"../../../display/Node\";\r\nimport { Sprite3D } from \"../Sprite3D\";\r\nimport { ShadowMode } from \"./ShadowMode\";\r\nimport { Light, LightMode } from \"./Light\";\r\nimport { Color } from \"../../../maths/Color\";\r\nimport { Matrix4x4 } from \"../../../maths/Matrix4x4\";\r\n\r\n/**\r\n * @deprecated\r\n * <code>LightSprite</code> 类用于创建灯光的父类。\r\n */\r\nexport class LightSprite extends Sprite3D {\r\n\t/** @internal */\r\n\t_light: Light;\r\n\t/**\r\n\t * 灯光颜色。\r\n\t */\r\n\tget color(): Color {\r\n\t\treturn this._light.color;\r\n\t}\r\n\r\n\tset color(value: Color) {\r\n\t\tthis._light.color = value;\r\n\t}\r\n\r\n\tget mode(): LightMode {\r\n\t\treturn this._light.lightmapBakedType;\r\n\t}\r\n\r\n\tset mode(value: LightMode) {\r\n\t\tthis._light.lightmapBakedType = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 灯光强度。\r\n\t */\r\n\tget intensity(): number {\r\n\t\treturn this._light.intensity;\r\n\t}\r\n\r\n\tset intensity(value: number) {\r\n\t\tthis._light.intensity = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 阴影模式。\r\n\t */\r\n\tget shadowMode(): ShadowMode {\r\n\t\treturn this._light.shadowMode;\r\n\t}\r\n\r\n\tset shadowMode(value: ShadowMode) {\r\n\t\tthis._light.shadowMode = value\r\n\t}\r\n\r\n\t/**\r\n\t * 最大阴影距离。\r\n\t */\r\n\tget shadowDistance(): number {\r\n\t\treturn this._light.shadowDistance;\r\n\t}\r\n\r\n\tset shadowDistance(value: number) {\r\n\t\tthis._light.shadowDistance = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 阴影贴图分辨率。\r\n\t */\r\n\tget shadowResolution(): number {\r\n\t\treturn this._light.shadowResolution;\r\n\t}\r\n\r\n\tset shadowResolution(value: number) {\r\n\t\tthis._light.shadowResolution = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 阴影深度偏差。\r\n\t */\r\n\tget shadowDepthBias(): number {\r\n\t\treturn this._light.shadowDepthBias;\r\n\t}\r\n\r\n\tset shadowDepthBias(value: number) {\r\n\t\tthis._light.shadowDepthBias = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 阴影法线偏差。\r\n\t */\r\n\tget shadowNormalBias(): number {\r\n\t\treturn this._light.shadowNormalBias;\r\n\t}\r\n\r\n\tset shadowNormalBias(value: number) {\r\n\t\tthis._light.shadowNormalBias = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 阴影强度。\r\n\t */\r\n\tget shadowStrength(): number {\r\n\t\treturn this._light.shadowStrength;\r\n\t}\r\n\r\n\tset shadowStrength(value: number) {\r\n\t\tthis._light.shadowStrength = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 阴影视锥的近裁面。\r\n\t */\r\n\tget shadowNearPlane(): number {\r\n\t\treturn this._light.shadowNearPlane;\r\n\t}\r\n\r\n\tset shadowNearPlane(value: number) {\r\n\t\tthis._light.shadowNearPlane = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 灯光烘培类型。\r\n\t */\r\n\tget lightmapBakedType(): number {\r\n\t\treturn this._light.lightmapBakedType;\r\n\t}\r\n\r\n\tset lightmapBakedType(value: number) {\r\n\t\tthis._light.lightmapBakedType = value;\r\n\t}\r\n\r\n\tget lightWorldMatrix(): Matrix4x4 {\r\n\t\treturn this._light.lightWorldMatrix;\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>LightSprite</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\t_parse(data: any, spriteMap: any): void {\r\n\t\tsuper._parse(data, spriteMap);\r\n\t\tvar colorData: any[] = data.color;\r\n\t\tthis.color.r = colorData[0];\r\n\t\tthis.color.g = colorData[1];\r\n\t\tthis.color.b = colorData[2];\r\n\t\tthis.intensity = data.intensity;\r\n\t\tthis.lightmapBakedType = data.lightmapBakedType;\r\n\t}\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\t_cloneTo(destObject: any, rootSprite: Node, dstSprite: Node) {\r\n\t\tsuper._cloneTo(destObject, rootSprite, dstSprite);\r\n\t\tvar spriteLight = <LightSprite>destObject;\r\n\t\tspriteLight.color = this.color.clone();\r\n\t\tspriteLight.intensity = this.intensity;\r\n\t\tspriteLight.lightmapBakedType = this.lightmapBakedType;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprotected _addToLightQueue(): void {\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprotected _removeFromLightQueue(): void {\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprotected _create(): Node {\r\n\t\treturn new Sprite3D();\r\n\t}\r\n}\r\n\r\n","import { ShadowCascadesMode } from \"./ShadowCascadesMode\";\r\nimport { Node } from \"../../../display/Node\";\r\nimport { DirectionLightCom } from \"./DirectionLightCom\";\r\nimport { LightSprite } from \"./LightSprite\";\r\nimport { Sprite3D } from \"../Sprite3D\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\n\r\n/**\r\n * @deprecated\r\n * <code>DirectionLight</code> 类用于创建平行光。\r\n */\r\nexport class DirectionLight extends LightSprite {\r\n\r\n\t/** @internal */\r\n\t_light: DirectionLightCom;\r\n\r\n\t/**\r\n\t * 阴影级联数量。\r\n\t */\r\n\tget shadowCascadesMode(): ShadowCascadesMode {\r\n\t\treturn this._light._shadowCascadesMode;\r\n\t}\r\n\r\n\tset shadowCascadesMode(value: ShadowCascadesMode) {\r\n\t\tthis._light._shadowCascadesMode = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 二级级联阴影分割比例。\r\n\t */\r\n\tget shadowTwoCascadeSplits(): number {\r\n\t\treturn this._light._shadowTwoCascadeSplits;\r\n\t}\r\n\r\n\tset shadowTwoCascadeSplits(value: number) {\r\n\t\tthis._light._shadowTwoCascadeSplits = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 四级级联阴影分割比例,X、Y、Z依次为其分割比例,Z必须大于Y,Y必须大于X。\r\n\t */\r\n\tget shadowFourCascadeSplits(): Vector3 {\r\n\t\treturn this._light._shadowFourCascadeSplits;\r\n\t}\r\n\r\n\tset shadowFourCascadeSplits(value: Vector3) {\r\n\t\tif (value.x > value.y || value.y > value.z || value.z > 1.0)\r\n\t\t\tthrow \"DiretionLight:Invalid value.\";\r\n\t\tvalue.cloneTo(this._light._shadowFourCascadeSplits);\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>DirectionLight</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis._light = this.addComponent(DirectionLightCom);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprotected _create(): Node {\r\n\t\treturn new Sprite3D();\r\n\t}\r\n}\r\n\r\n","import { Component } from \"../../../components/Component\";\r\nimport { Light, LightType } from \"./Light\";\r\n\r\n\r\nexport class PointLightCom extends Light {\r\n    /** @internal */\r\n    private _range: number;\r\n\r\n    /**\r\n     * 点光的范围。\r\n     * @return 点光的范围。\r\n     */\r\n    get range(): number {\r\n        return this._range;\r\n    }\r\n\r\n    set range(value: number) {\r\n        this._range = value;\r\n    }\r\n\r\n    /**\r\n     * 创建一个 <code>PointLight</code> 实例。\r\n     */\r\n    constructor() {\r\n        super();\r\n        this._range = 6.0;\r\n        this._lightType = LightType.Point;\r\n    }\r\n\r\n\r\n    /**\r\n     * @internal\r\n     * @override\r\n     */\r\n    protected _addToLightQueue(): void {\r\n        this.owner.scene._pointLights.add(this);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @override\r\n     */\r\n    protected _removeFromLightQueue(): void {\r\n        this.owner.scene._pointLights.remove(this);\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     * @internal\r\n     */\r\n    _parse(data: any, spriteMap: any): void {\r\n        super._parse(data, spriteMap);\r\n        this.range = data.range;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     * @internal\r\n     */\r\n    _cloneTo(dest: PointLightCom): void {\r\n        super._cloneTo(dest);\r\n        var pointlight = dest as PointLightCom;\r\n        pointlight.range = this.range;\r\n        pointlight._lightType = LightType.Point;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _create(): Component {\r\n        return new PointLightCom();\r\n    }\r\n\r\n}","import { Node } from \"../../../display/Node\"\r\nimport { PointLightCom } from \"./PointLightCom\";\r\nimport { LightSprite } from \"./LightSprite\";\r\nimport { Sprite3D } from \"../Sprite3D\";\r\n/**\r\n * @deprecated\r\n * <code>PointLight</code> 类用于创建点光。\r\n */\r\nexport class PointLight extends LightSprite {\r\n\r\n\t/**@internal */\r\n\t_light: PointLightCom;\r\n\r\n\t/**\r\n\t * 点光的范围。\r\n\t * @return 点光的范围。\r\n\t */\r\n\tget range(): number {\r\n\t\treturn this._light.range;\r\n\t}\r\n\r\n\tset range(value: number) {\r\n\t\tthis._light.range = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>PointLight</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis._light = this.addComponent(PointLightCom);\r\n\t\tthis._light.range = 6.0;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\t_parse(data: any, spriteMap: any): void {\r\n\t\tsuper._parse(data, spriteMap);\r\n\t\tthis.range = data.range;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\t_cloneTo(destObject: any, rootSprite: Node, dstSprite: Node) {\r\n\t\tsuper._cloneTo(destObject, rootSprite, dstSprite);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprotected _create(): Node {\r\n\t\treturn new Sprite3D();\r\n\t}\r\n}\r\n\r\n","import { Scene3D } from \"../scene/Scene3D\";\r\nimport { Light, LightType } from \"./Light\";\r\nimport { Component } from \"../../../components/Component\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\n\r\n/**\r\n * <code>SpotLight</code> 类用于创建聚光。\r\n */\r\nexport class SpotLightCom extends Light {\r\n\t/** @internal */\r\n\tprivate _spotAngle: number;\r\n\t/** @internal */\r\n\tprivate _range: number;\r\n\r\n\t/** @internal */\r\n\tpublic _direction: Vector3;\r\n\r\n\t/**\r\n\t  * 聚光灯的锥形角度。\r\n\t  */\r\n\tget spotAngle(): number {\r\n\t\treturn this._spotAngle;\r\n\t}\r\n\r\n\tset spotAngle(value: number) {\r\n\t\tthis._spotAngle = Math.max(Math.min(value, 179), 0);\r\n\t}\r\n\r\n\t/**\r\n\t * 聚光的范围。\r\n\t */\r\n\tget range(): number {\r\n\t\treturn this._range;\r\n\t}\r\n\r\n\tset range(value: number) {\r\n\t\tthis._range = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>SpotLight</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis._spotAngle = 30.0;\r\n\t\tthis._range = 10.0;\r\n\t\tthis._direction = new Vector3();\r\n\t\tthis._lightType = LightType.Spot;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * @override\r\n\t */\r\n\tprotected _addToLightQueue(): void {\r\n\t\t(<Scene3D>this.owner.scene)._spotLights.add(this);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * @override\r\n\t */\r\n\tprotected _removeFromLightQueue(): void {\r\n\t\t(<Scene3D>this.owner.scene)._spotLights.remove(this);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\t_parse(data: any, spriteMap: any): void {\r\n\t\tsuper._parse(data, spriteMap);\r\n\t\tthis.range = data.range;\r\n\t\tthis.spotAngle = data.spotAngle;\r\n\t}\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\t_cloneTo(dest: Component): void {\r\n\t\tsuper._cloneTo(dest);\r\n\t\tvar spotLight = <SpotLightCom>dest;\r\n\t\tspotLight.range = this.range;\r\n\t\tspotLight.spotAngle = this.spotAngle;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprotected _create(): Component {\r\n\t\treturn new SpotLightCom();\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { Node } from \"../../../display/Node\";\r\nimport { Sprite3D } from \"../Sprite3D\";\r\nimport { LightSprite } from \"./LightSprite\";\r\nimport { SpotLightCom } from \"./SpotLightCom\";\r\n\r\n/**\r\n * @deprecated\r\n * <code>SpotLight</code> 类用于创建聚光。\r\n */\r\nexport class SpotLight extends LightSprite {\r\n\t/**@internal */\r\n\t_light: SpotLightCom;\r\n\r\n\t/**\r\n\t  * 聚光灯的锥形角度。\r\n\t  */\r\n\tget spotAngle(): number {\r\n\t\treturn this._light.spotAngle;\r\n\t}\r\n\r\n\tset spotAngle(value: number) {\r\n\t\tthis._light.spotAngle = Math.max(Math.min(value, 179), 0);\r\n\t}\r\n\r\n\t/**\r\n\t * 聚光的范围。\r\n\t */\r\n\tget range(): number {\r\n\t\treturn this._light.range;\r\n\t}\r\n\r\n\tset range(value: number) {\r\n\t\tthis._light.range = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>SpotLight</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis._light = this.addComponent(SpotLightCom);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\t_parse(data: any, spriteMap: any): void {\r\n\t\tsuper._parse(data, spriteMap);\r\n\t\tthis.range = data.range;\r\n\t\tthis.spotAngle = data.spotAngle;\r\n\t}\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\t_cloneTo(destObject: any, rootSprite: Node, dstSprite: Node) {\r\n\t\tsuper._cloneTo(destObject, rootSprite, dstSprite);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprotected _create(): Node {\r\n\t\treturn new Sprite3D();\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { Color } from \"../../../maths/Color\";\r\nimport { Vector4 } from \"../../../maths/Vector4\";\r\nimport { RenderState } from \"../../../RenderEngine/RenderShader/RenderState\";\r\nimport { Shader3D } from \"../../../RenderEngine/RenderShader/Shader3D\";\r\nimport { ShaderDefine } from \"../../../RenderEngine/RenderShader/ShaderDefine\";\r\nimport { BaseTexture } from \"../../../resource/BaseTexture\";\r\nimport { Material } from \"./Material\";\r\n\r\n/**\r\n * <code>UnlitMaterial</code> 类用于实现不受光照影响的材质。\r\n */\r\nexport class UnlitMaterial extends Material {\r\n\r\n\tstatic SHADERDEFINE_ALBEDOTEXTURE: ShaderDefine;\r\n\r\n\tstatic SHADERDEFINE_ENABLEVERTEXCOLOR: ShaderDefine;\r\n\r\n\tstatic ALBEDOTEXTURE: number;\r\n\r\n\tstatic ALBEDOCOLOR: number;\r\n\r\n\tstatic TILINGOFFSET: number;\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic __initDefine__(): void {\r\n\t\tUnlitMaterial.SHADERDEFINE_ALBEDOTEXTURE = Shader3D.getDefineByName(\"ALBEDOTEXTURE\");\r\n\t\tUnlitMaterial.SHADERDEFINE_ENABLEVERTEXCOLOR = Shader3D.getDefineByName(\"ENABLEVERTEXCOLOR\");\r\n\r\n\t\tUnlitMaterial.ALBEDOTEXTURE = Shader3D.propertyNameToID(\"u_AlbedoTexture\");\r\n\t\tUnlitMaterial.ALBEDOCOLOR = Shader3D.propertyNameToID(\"u_AlbedoColor\");\r\n\t\tUnlitMaterial.TILINGOFFSET = Shader3D.propertyNameToID(\"u_TilingOffset\");\r\n\t}\r\n\r\n\tprivate _albedoIntensity: number;\r\n\r\n\t/**\r\n\t * 反照率颜色。\r\n\t */\r\n\tget albedoColor(): Color {\r\n\t\treturn this.getColorByIndex(UnlitMaterial.ALBEDOCOLOR);\r\n\t}\r\n\r\n\tset albedoColor(value: Color) {\r\n\t\tthis.setColorByIndex(UnlitMaterial.ALBEDOCOLOR, value.scale(this._albedoIntensity));\r\n\t}\r\n\r\n\t/**\r\n\t * 反照率强度。\r\n\t */\r\n\tget albedoIntensity(): number {\r\n\t\treturn this._albedoIntensity;\r\n\t}\r\n\r\n\tset albedoIntensity(value: number) {\r\n\t\tthis._albedoIntensity = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 反照率贴图。\r\n\t */\r\n\tget albedoTexture(): BaseTexture {\r\n\t\treturn this.getTextureByIndex(UnlitMaterial.ALBEDOTEXTURE);\r\n\t}\r\n\r\n\tset albedoTexture(value: BaseTexture) {\r\n\t\tif (value)\r\n\t\t\tthis.addDefine(UnlitMaterial.SHADERDEFINE_ALBEDOTEXTURE);\r\n\t\telse\r\n\t\t\tthis.removeDefine(UnlitMaterial.SHADERDEFINE_ALBEDOTEXTURE);\r\n\t\tthis.setTextureByIndex(UnlitMaterial.ALBEDOTEXTURE, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 纹理平铺和偏移。\r\n\t */\r\n\tget tilingOffset(): Vector4 {\r\n\t\treturn (<Vector4>this.getVector4ByIndex(UnlitMaterial.TILINGOFFSET));\r\n\t}\r\n\r\n\tset tilingOffset(value: Vector4) {\r\n\t\tif (value) {\r\n\t\t\tthis.setVector4ByIndex(UnlitMaterial.TILINGOFFSET, value);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.setVector4ByIndex(UnlitMaterial.TILINGOFFSET, new Vector4(1.0, 1.0, 0.0, 0.0));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 是否支持顶点色。\r\n\t */\r\n\tget enableVertexColor(): boolean {\r\n\t\treturn this.hasDefine(UnlitMaterial.SHADERDEFINE_ENABLEVERTEXCOLOR);\r\n\t}\r\n\r\n\tset enableVertexColor(value: boolean) {\r\n\t\tif (value)\r\n\t\t\tthis.addDefine(UnlitMaterial.SHADERDEFINE_ENABLEVERTEXCOLOR);\r\n\t\telse\r\n\t\t\tthis.removeDefine(UnlitMaterial.SHADERDEFINE_ENABLEVERTEXCOLOR);\r\n\t}\r\n\r\n\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.setShaderName(\"Unlit\");\r\n\t\tthis.renderMode = UnlitMaterial.RENDERMODE_OPAQUE;\r\n\t\tthis.albedoIntensity = 1.0;\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @return\t 克隆副本。\r\n\t * @override\r\n\t */\r\n\tclone(): any {\r\n\t\tvar dest: UnlitMaterial = new UnlitMaterial();\r\n\t\tthis.cloneTo(dest);\r\n\t\treturn dest;\r\n\t}\r\n\r\n\r\n\r\n\t//----------------deprecated----------------\r\n\t/**\r\n\t * @deprecated\r\n\t * 渲染状态_不透明。\r\n\t */\r\n\tstatic RENDERMODE_OPAQUE: number = 0;\r\n\t/**\r\n\t * @deprecated\r\n\t * 渲染状态_阿尔法测试。\r\n\t*/\r\n\tstatic RENDERMODE_CUTOUT: number = 1;\r\n\t/**\r\n\t * @deprecated\r\n\t * 渲染状态__透明混合。 \r\n\t */\r\n\tstatic RENDERMODE_TRANSPARENT: number = 2;\r\n\t/**\r\n\t * @deprecated\r\n\t * 渲染状态__加色法混合。 \r\n\t */\r\n\tstatic RENDERMODE_ADDTIVE: number = 3;\r\n\t/**\r\n\t * @deprecated\r\n\t * 渲染模式。\r\n\t */\r\n\tset renderMode(value: number) {\r\n\t\tswitch (value) {\r\n\t\t\tcase UnlitMaterial.RENDERMODE_OPAQUE:\r\n\t\t\t\tthis.alphaTest = false;\r\n\t\t\t\tthis.renderQueue = Material.RENDERQUEUE_OPAQUE;\r\n\t\t\t\tthis.depthWrite = true;\r\n\t\t\t\tthis.cull = RenderState.CULL_BACK;\r\n\t\t\t\tthis.blend = RenderState.BLEND_DISABLE;\r\n\t\t\t\tthis.depthTest = RenderState.DEPTHTEST_LESS;\r\n\t\t\t\tbreak;\r\n\t\t\tcase UnlitMaterial.RENDERMODE_CUTOUT:\r\n\t\t\t\tthis.renderQueue = Material.RENDERQUEUE_ALPHATEST;\r\n\t\t\t\tthis.alphaTest = true;\r\n\t\t\t\tthis.depthWrite = true;\r\n\t\t\t\tthis.cull = RenderState.CULL_BACK;\r\n\t\t\t\tthis.blend = RenderState.BLEND_DISABLE;\r\n\t\t\t\tthis.depthTest = RenderState.DEPTHTEST_LESS;\r\n\t\t\t\tbreak;\r\n\t\t\tcase UnlitMaterial.RENDERMODE_TRANSPARENT:\r\n\t\t\t\tthis.renderQueue = Material.RENDERQUEUE_TRANSPARENT;\r\n\t\t\t\tthis.alphaTest = false;\r\n\t\t\t\tthis.depthWrite = false;\r\n\t\t\t\tthis.cull = RenderState.CULL_BACK;\r\n\t\t\t\tthis.blend = RenderState.BLEND_ENABLE_ALL;\r\n\t\t\t\tthis.blendSrc = RenderState.BLENDPARAM_SRC_ALPHA;\r\n\t\t\t\tthis.blendDst = RenderState.BLENDPARAM_ONE_MINUS_SRC_ALPHA;\r\n\t\t\t\tthis.depthTest = RenderState.DEPTHTEST_LESS;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(\"UnlitMaterial : renderMode value error.\");\r\n\t\t}\r\n\t}\r\n}\r\n\r\n","import { Color } from \"../../../maths/Color\";\r\nimport { Vector4 } from \"../../../maths/Vector4\";\r\nimport { RenderState } from \"../../../RenderEngine/RenderShader/RenderState\";\r\nimport { BaseTexture } from \"../../../resource/BaseTexture\";\r\nimport { Material } from \"./Material\";\r\nimport { UnlitMaterial } from \"./UnlitMaterial\";\r\n\r\n/**\r\n * <code>EffectMaterial</code> 类用于实现Mesh特效材质。\r\n */\r\nexport class EffectMaterial extends Material {\r\n\t/** 默认材质，禁止修改*/\r\n\tstatic defaultMaterial: EffectMaterial;\r\n\r\n\t\r\n\r\n\t/**\r\n\t * 获取颜色。\r\n\t */\r\n\tget color(): Color {\r\n\t\treturn (<Color>this.getColorByIndex(UnlitMaterial.ALBEDOCOLOR));\r\n\t}\r\n\r\n\tset color(value: Color) {\r\n\t\tthis.setColorByIndex(UnlitMaterial.ALBEDOCOLOR, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 贴图。\r\n\t */\r\n\tget texture(): BaseTexture {\r\n\t\treturn this.getTextureByIndex(UnlitMaterial.ALBEDOTEXTURE);\r\n\t}\r\n\r\n\tset texture(value: BaseTexture) {\r\n\t\tif (value)\r\n\t\t\tthis.addDefine(UnlitMaterial.SHADERDEFINE_ALBEDOTEXTURE);\r\n\t\telse\r\n\t\t\tthis.removeDefine(UnlitMaterial.SHADERDEFINE_ALBEDOTEXTURE);\r\n\t\tthis.setTextureByIndex(UnlitMaterial.ALBEDOTEXTURE, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 纹理平铺和偏移。\r\n\t */\r\n\tget tilingOffset(): Vector4 {\r\n\t\treturn (<Vector4>this.getVector4ByIndex(UnlitMaterial.TILINGOFFSET));\r\n\t}\r\n\r\n\tset tilingOffset(value: Vector4) {\r\n\t\tif (value) {\r\n\t\t\tthis.setVector4ByIndex(UnlitMaterial.TILINGOFFSET, value);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.getVector4ByIndex(UnlitMaterial.TILINGOFFSET).setValue(1.0, 1.0, 0.0, 0.0);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * 创建一个 <code>EffectMaterial</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.setShaderName(\"Unlit\");\r\n\t\tthis.setVector4ByIndex(UnlitMaterial.TILINGOFFSET, new Vector4(1.0, 1.0, 0.0, 0.0));\r\n\t\tthis.setColorByIndex(UnlitMaterial.ALBEDOCOLOR, new Color(1.0, 1.0, 1.0, 1.0));\r\n\t\tthis.renderMode = EffectMaterial.RENDERMODE_ADDTIVE;\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @return\t 克隆副本。\r\n\t * @override\r\n\t */\r\n\tclone(): any {\r\n\t\tvar dest: EffectMaterial = new EffectMaterial();\r\n\t\tthis.cloneTo(dest);\r\n\t\treturn dest;\r\n\t}\r\n\r\n\t//----------------deprecated----------------\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * 渲染状态_加色法混合。\r\n\t */\r\n\tstatic RENDERMODE_ADDTIVE: number = 0;\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * 渲染状态_透明混合。*/\r\n\tstatic RENDERMODE_ALPHABLENDED: number = 1;\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * 设置渲染模式。\r\n\t * 可以使用新的渲染状态\r\n\t */\r\n\t set renderMode(value: number) {\r\n\t\tswitch (value) {\r\n\t\t\tcase EffectMaterial.RENDERMODE_ADDTIVE:\r\n\t\t\t\tthis.renderQueue = Material.RENDERQUEUE_TRANSPARENT;\r\n\t\t\t\tthis.alphaTest = false;\r\n\t\t\t\tthis.depthWrite = false;\r\n\t\t\t\tthis.cull = RenderState.CULL_NONE;\r\n\t\t\t\tthis.blend = RenderState.BLEND_ENABLE_ALL;\r\n\t\t\t\tthis.blendSrc = RenderState.BLENDPARAM_SRC_ALPHA;\r\n\t\t\t\tthis.blendDst = RenderState.BLENDPARAM_ONE;\r\n\t\t\t\tthis.depthTest = RenderState.DEPTHTEST_LEQUAL;\r\n\t\t\t\tthis.addDefine(Material.SHADERDEFINE_ADDTIVEFOG);\r\n\t\t\t\tbreak;\r\n\t\t\tcase EffectMaterial.RENDERMODE_ALPHABLENDED:\r\n\t\t\t\tthis.renderQueue = Material.RENDERQUEUE_TRANSPARENT;\r\n\t\t\t\tthis.alphaTest = false;\r\n\t\t\t\tthis.depthWrite = false;\r\n\t\t\t\tthis.cull = RenderState.CULL_NONE;\r\n\t\t\t\tthis.blend = RenderState.BLEND_ENABLE_ALL;\r\n\t\t\t\tthis.blendSrc = RenderState.BLENDPARAM_SRC_ALPHA;\r\n\t\t\t\tthis.blendDst = RenderState.BLENDPARAM_ONE_MINUS_SRC_ALPHA;\r\n\t\t\t\tthis.depthTest = RenderState.DEPTHTEST_LEQUAL;\r\n\t\t\t\tthis.removeDefine(Material.SHADERDEFINE_ADDTIVEFOG);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(\"MeshEffectMaterial : renderMode value error.\");\r\n\t\t}\r\n\t}\r\n}\r\n\r\n","import { Vector4 } from \"../../../maths/Vector4\";\r\nimport { RenderState } from \"../../../RenderEngine/RenderShader/RenderState\";\r\nimport { Shader3D } from \"../../../RenderEngine/RenderShader/Shader3D\";\r\nimport { ShaderDefine } from \"../../../RenderEngine/RenderShader/ShaderDefine\";\r\nimport { BaseTexture } from \"../../../resource/BaseTexture\";\r\nimport { Material } from \"./Material\";\r\n\r\n/**\r\n * ...\r\n * @author ...\r\n */\r\nexport class ExtendTerrainMaterial extends Material {\r\n\t/**渲染状态_不透明。*/\r\n\tstatic RENDERMODE_OPAQUE: number = 1;\r\n\t/**渲染状态_透明混合。*/\r\n\tstatic RENDERMODE_TRANSPARENT: number = 2;\r\n\r\n\t/**@internal */\r\n\tstatic SPLATALPHATEXTURE: number;\r\n\t/**@internal */\r\n\tstatic DIFFUSETEXTURE1: number;\r\n\t/**@internal */\r\n\tstatic DIFFUSETEXTURE2: number;\r\n\t/**@internal */\r\n\tstatic DIFFUSETEXTURE3: number;\r\n\t/**@internal */\r\n\tstatic DIFFUSETEXTURE4: number;\r\n\t/**@internal */\r\n\tstatic DIFFUSETEXTURE5: number;\r\n\t/**@internal */\r\n\tstatic DIFFUSESCALEOFFSET1: number;\r\n\t/**@internal */\r\n\tstatic DIFFUSESCALEOFFSET2: number;\r\n\t/**@internal */\r\n\tstatic DIFFUSESCALEOFFSET3: number;\r\n\t/**@internal */\r\n\tstatic DIFFUSESCALEOFFSET4: number;\r\n\t/**@internal */\r\n\tstatic DIFFUSESCALEOFFSET5: number;\r\n\r\n\t/**地形细节宏定义。*/\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_DETAIL_NUM1: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_DETAIL_NUM2: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_DETAIL_NUM3: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_DETAIL_NUM4: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_DETAIL_NUM5: ShaderDefine;\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic __initDefine__(): void {\r\n\t\tExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM1 = Shader3D.getDefineByName(\"ExtendTerrain_DETAIL_NUM1\");\r\n\t\tExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM2 = Shader3D.getDefineByName(\"ExtendTerrain_DETAIL_NUM2\");\r\n\t\tExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM3 = Shader3D.getDefineByName(\"ExtendTerrain_DETAIL_NUM3\");\r\n\t\tExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM4 = Shader3D.getDefineByName(\"ExtendTerrain_DETAIL_NUM4\");\r\n\t\tExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM5 = Shader3D.getDefineByName(\"ExtendTerrain_DETAIL_NUM5\");\r\n\r\n\t\tExtendTerrainMaterial.SPLATALPHATEXTURE = Shader3D.propertyNameToID(\"u_SplatAlphaTexture\");\r\n\t\tExtendTerrainMaterial.DIFFUSETEXTURE1 = Shader3D.propertyNameToID(\"u_DiffuseTexture1\");\r\n\t\tExtendTerrainMaterial.DIFFUSETEXTURE2 = Shader3D.propertyNameToID(\"u_DiffuseTexture2\");\r\n\t\tExtendTerrainMaterial.DIFFUSETEXTURE3 = Shader3D.propertyNameToID(\"u_DiffuseTexture3\");\r\n\t\tExtendTerrainMaterial.DIFFUSETEXTURE4 = Shader3D.propertyNameToID(\"u_DiffuseTexture4\");\r\n\t\tExtendTerrainMaterial.DIFFUSETEXTURE5 = Shader3D.propertyNameToID(\"u_DiffuseTexture5\");\r\n\t\tExtendTerrainMaterial.DIFFUSESCALEOFFSET1 = Shader3D.propertyNameToID(\"u_DiffuseScaleOffset1\");\r\n\t\tExtendTerrainMaterial.DIFFUSESCALEOFFSET2 = Shader3D.propertyNameToID(\"u_DiffuseScaleOffset2\");\r\n\t\tExtendTerrainMaterial.DIFFUSESCALEOFFSET3 = Shader3D.propertyNameToID(\"u_DiffuseScaleOffset3\");\r\n\t\tExtendTerrainMaterial.DIFFUSESCALEOFFSET4 = Shader3D.propertyNameToID(\"u_DiffuseScaleOffset4\");\r\n\t\tExtendTerrainMaterial.DIFFUSESCALEOFFSET5 = Shader3D.propertyNameToID(\"u_DiffuseScaleOffset5\");\r\n\t}\r\n\t/**\r\n\t * splatAlpha贴图。\r\n\t */\r\n\tget splatAlphaTexture(): BaseTexture {\r\n\t\treturn this._shaderValues.getTexture(ExtendTerrainMaterial.SPLATALPHATEXTURE);\r\n\t}\r\n\r\n\tset splatAlphaTexture(value: BaseTexture) {\r\n\t\tthis._shaderValues.setTexture(ExtendTerrainMaterial.SPLATALPHATEXTURE, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 第一层贴图。\r\n\t */\r\n\tget diffuseTexture1(): BaseTexture {\r\n\t\treturn this._shaderValues.getTexture(ExtendTerrainMaterial.DIFFUSETEXTURE1);\r\n\t}\r\n\r\n\tset diffuseTexture1(value: BaseTexture) {\r\n\t\tthis._shaderValues.setTexture(ExtendTerrainMaterial.DIFFUSETEXTURE1, value);\r\n\t\tthis._setDetailNum(1);\r\n\t}\r\n\r\n\t/**\r\n\t * 第二层贴图。\r\n\t */\r\n\tget diffuseTexture2(): BaseTexture {\r\n\t\treturn this._shaderValues.getTexture(ExtendTerrainMaterial.DIFFUSETEXTURE2);\r\n\t}\r\n\r\n\tset diffuseTexture2(value: BaseTexture) {\r\n\t\tthis._shaderValues.setTexture(ExtendTerrainMaterial.DIFFUSETEXTURE2, value);\r\n\t\tthis._setDetailNum(2);\r\n\t}\r\n\r\n\t/**\r\n\t * 第三层贴图。\r\n\t */\r\n\tget diffuseTexture3(): BaseTexture {\r\n\t\treturn this._shaderValues.getTexture(ExtendTerrainMaterial.DIFFUSETEXTURE3);\r\n\t}\r\n\r\n\tset diffuseTexture3(value: BaseTexture) {\r\n\t\tthis._shaderValues.setTexture(ExtendTerrainMaterial.DIFFUSETEXTURE3, value);\r\n\t\tthis._setDetailNum(3);\r\n\t}\r\n\r\n\t/**\r\n\t * 第四层贴图。\r\n\t */\r\n\tget diffuseTexture4(): BaseTexture {\r\n\t\treturn this._shaderValues.getTexture(ExtendTerrainMaterial.DIFFUSETEXTURE4);\r\n\t}\r\n\r\n\tset diffuseTexture4(value: BaseTexture) {\r\n\t\tthis._shaderValues.setTexture(ExtendTerrainMaterial.DIFFUSETEXTURE4, value);\r\n\t\tthis._setDetailNum(4);\r\n\t}\r\n\r\n\t/**\r\n\t * 第五层贴图。\r\n\t */\r\n\tget diffuseTexture5(): BaseTexture {\r\n\t\treturn this._shaderValues.getTexture(ExtendTerrainMaterial.DIFFUSETEXTURE5);\r\n\t}\r\n\r\n\tset diffuseTexture5(value: BaseTexture) {\r\n\t\tthis._shaderValues.setTexture(ExtendTerrainMaterial.DIFFUSETEXTURE5, value);\r\n\t\tthis._setDetailNum(5);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * 第一层贴图缩放偏移。\r\n\t */\r\n\tset diffuseScaleOffset1(scaleOffset1: Vector4) {\r\n\t\tthis._shaderValues.setVector(ExtendTerrainMaterial.DIFFUSESCALEOFFSET1, scaleOffset1);\r\n\t}\r\n\r\n\t/**\r\n\t * 第二层贴图缩放偏移。\r\n\t */\r\n\tset diffuseScaleOffset2(scaleOffset2: Vector4) {\r\n\t\tthis._shaderValues.setVector(ExtendTerrainMaterial.DIFFUSESCALEOFFSET2, scaleOffset2);\r\n\t}\r\n\r\n\t/**\r\n\t * 第三层贴图缩放偏移。\r\n\t */\r\n\tset diffuseScaleOffset3(scaleOffset3: Vector4) {\r\n\t\tthis._shaderValues.setVector(ExtendTerrainMaterial.DIFFUSESCALEOFFSET3, scaleOffset3);\r\n\t}\r\n\r\n\t/**\r\n\t * 第四层贴图缩放偏移。\r\n\t */\r\n\tset diffuseScaleOffset4(scaleOffset4: Vector4) {\r\n\t\tthis._shaderValues.setVector(ExtendTerrainMaterial.DIFFUSESCALEOFFSET4, scaleOffset4);\r\n\t}\r\n\r\n\t/**\r\n\t * 第五层贴图缩放偏移。\r\n\t */\r\n\tset diffuseScaleOffset5(scaleOffset5: Vector4) {\r\n\t\tthis._shaderValues.setVector(ExtendTerrainMaterial.DIFFUSESCALEOFFSET5, scaleOffset5);\r\n\t}\r\n\r\n\t/**\r\n\t * 设置渲染模式。\r\n\t */\r\n\tset renderMode(value: number) {\r\n\t\tswitch (value) {\r\n\t\t\tcase ExtendTerrainMaterial.RENDERMODE_OPAQUE:\r\n\t\t\t\tthis.renderQueue = Material.RENDERQUEUE_OPAQUE;\r\n\t\t\t\tthis.depthWrite = true;\r\n\t\t\t\tthis.cull = RenderState.CULL_BACK;\r\n\t\t\t\tthis.blend = RenderState.BLEND_DISABLE;\r\n\t\t\t\tthis.depthTest = RenderState.DEPTHTEST_LESS;\r\n\t\t\t\tbreak;\r\n\t\t\tcase ExtendTerrainMaterial.RENDERMODE_TRANSPARENT:\r\n\t\t\t\tthis.renderQueue = Material.RENDERQUEUE_OPAQUE;\r\n\t\t\t\tthis.depthWrite = false;\r\n\t\t\t\tthis.cull = RenderState.CULL_BACK;\r\n\t\t\t\tthis.blend = RenderState.BLEND_ENABLE_ALL;\r\n\t\t\t\tthis.blendSrc = RenderState.BLENDPARAM_SRC_ALPHA;\r\n\t\t\t\tthis.blendDst = RenderState.BLENDPARAM_ONE_MINUS_SRC_ALPHA;\r\n\t\t\t\tthis.depthTest = RenderState.DEPTHTEST_LEQUAL;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(\"ExtendTerrainMaterial:renderMode value error.\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>ExtendTerrainMaterial</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.setShaderName(\"ExtendTerrain\");\r\n\t\tthis.renderMode = ExtendTerrainMaterial.RENDERMODE_OPAQUE;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _setDetailNum(value: number): void {\r\n\t\tswitch (value) {\r\n\t\t\tcase 1:\r\n\t\t\t\tthis._shaderValues.addDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM1);\r\n\t\t\t\tthis._shaderValues.removeDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM2);\r\n\t\t\t\tthis._shaderValues.removeDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM3);\r\n\t\t\t\tthis._shaderValues.removeDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM4);\r\n\t\t\t\tthis._shaderValues.removeDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM5);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2:\r\n\t\t\t\tthis._shaderValues.addDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM2);\r\n\t\t\t\tthis._shaderValues.removeDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM1);\r\n\t\t\t\tthis._shaderValues.removeDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM3);\r\n\t\t\t\tthis._shaderValues.removeDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM4);\r\n\t\t\t\tthis._shaderValues.removeDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM5);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 3:\r\n\t\t\t\tthis._shaderValues.addDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM3);\r\n\t\t\t\tthis._shaderValues.removeDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM1);\r\n\t\t\t\tthis._shaderValues.removeDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM2);\r\n\t\t\t\tthis._shaderValues.removeDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM4);\r\n\t\t\t\tthis._shaderValues.removeDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM5);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 4:\r\n\t\t\t\tthis._shaderValues.addDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM4);\r\n\t\t\t\tthis._shaderValues.removeDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM1);\r\n\t\t\t\tthis._shaderValues.removeDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM2);\r\n\t\t\t\tthis._shaderValues.removeDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM3);\r\n\t\t\t\tthis._shaderValues.removeDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM5);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 5:\r\n\t\t\t\tthis._shaderValues.addDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM5);\r\n\t\t\t\tthis._shaderValues.removeDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM1);\r\n\t\t\t\tthis._shaderValues.removeDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM2);\r\n\t\t\t\tthis._shaderValues.removeDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM3);\r\n\t\t\t\tthis._shaderValues.removeDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM4);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t* 克隆。\r\n\t* @return\t 克隆副本。\r\n\t* @override\r\n\t*/\r\n\tclone(): any {\r\n\t\tvar dest: ExtendTerrainMaterial = new ExtendTerrainMaterial();\r\n\t\tthis.cloneTo(dest);\r\n\t\treturn dest;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { HDRTextureInfo } from \"../../../RenderEngine/HDRTextureInfo\";\r\nimport { RenderCapable } from \"../../../RenderEngine/RenderEnum/RenderCapable\";\r\nimport { TextureFormat } from \"../../../RenderEngine/RenderEnum/TextureFormat\";\r\nimport { WrapMode } from \"../../../RenderEngine/RenderEnum/WrapMode\";\r\nimport { LayaGL } from \"../../../layagl/LayaGL\";\r\nimport { Texture2D } from \"../../../resource/Texture2D\";\r\nimport { Base64Tool } from \"../../../utils/Base64Tool\";\r\n\r\n\r\nconst dfg_128 = \"\"\r\n\r\nconst RGBDMaxRange = 255;\r\n/**\r\n * @internal\r\n */\r\nexport class PBRDefaultDFG {\r\n\r\n    // todo 销毁\r\n    private static _defaultDFG: Texture2D;\r\n    public static get defaultDFG(): Texture2D {\r\n        return PBRDefaultDFG._defaultDFG;\r\n    }\r\n    public static set defaultDFG(value: Texture2D) {\r\n        PBRDefaultDFG._defaultDFG = value;\r\n    }\r\n\r\n    static DefaultDfgTexture() {\r\n        let hdrBuffer = Base64Tool.decode(dfg_128);\r\n        let hdrInfo = HDRTextureInfo.getHDRInfo(hdrBuffer);\r\n\r\n        let supportFloatTex = LayaGL.renderEngine.getCapable(RenderCapable.TextureFormat_R32G32B32A32);\r\n        let supportFloatLinearFiltering = LayaGL.renderEngine.getCapable(RenderCapable.Texture_FloatLinearFiltering);\r\n\r\n        let tex: Texture2D;\r\n\r\n        if (supportFloatTex && supportFloatLinearFiltering) {\r\n            tex = new Texture2D(hdrInfo.width, hdrInfo.height, hdrInfo.format, false, false, false);\r\n            tex.setHDRData(hdrInfo);\r\n        }\r\n        else {\r\n            tex = new Texture2D(hdrInfo.width, hdrInfo.height, TextureFormat.R8G8B8A8, false, false, false);\r\n\r\n            let pixelCount = hdrInfo.width * hdrInfo.height;\r\n            let hdrPixelData = <Float32Array>hdrInfo.readScanLine();\r\n            let rgbdPixelData = new Uint8Array(pixelCount * 4);\r\n\r\n            for (let index = 0; index < pixelCount; index++) {\r\n\r\n                let r = hdrPixelData[index * 3];\r\n                let g = hdrPixelData[index * 3 + 1];\r\n                let b = hdrPixelData[index * 3 + 2];\r\n\r\n                let maxRGB = Math.max(r, g, b, 1e-5);\r\n                let d = Math.max(1.0, RGBDMaxRange / maxRGB);\r\n                d = Math.min(1, Math.max(0, (d / 255)));\r\n\r\n                rgbdPixelData[index * 4] = Math.min(1, Math.max(0, (r * d))) * 255;\r\n                rgbdPixelData[index * 4 + 1] = Math.min(1, Math.max(0, (g * d))) * 255;\r\n                rgbdPixelData[index * 4 + 2] = Math.min(1, Math.max(0, (b * d))) * 255;\r\n                rgbdPixelData[index * 4 + 3] = d * 255;\r\n            }\r\n\r\n            tex.setPixelsData(rgbdPixelData, false, false);\r\n        }\r\n\r\n        tex.lock = true;\r\n        tex.wrapModeU = WrapMode.Clamp;\r\n        tex.wrapModeV = WrapMode.Clamp;\r\n        tex.anisoLevel = 1;\r\n\r\n        this._defaultDFG = tex;\r\n    }\r\n\r\n}","import { Shader3D } from \"../../../RenderEngine/RenderShader/Shader3D\";\r\n\r\nimport BRDFGLSL from \"./BRDF.glsl\";\r\nimport PBRGIGLSL from \"./pbrGI.glsl\";\r\n\r\nimport PBRCommonGLSL from \"./pbrCommon.glsl\";\r\nimport PBRVertexGLSL from \"./pbrVertex.glsl\";\r\nimport PBRFragGLSL from \"./pbrFrag.glsl\";\r\nimport PBRMetallicGLSL from \"./pbrMetallicFrag.glsl\";\r\nimport { PBRDefaultDFG } from \"./PBRDefaultDFG\";\r\nimport { ShaderDataType } from \"../../../RenderEngine/RenderShader/ShaderData\";\r\nimport { SubShader } from \"../../../RenderEngine/RenderShader/SubShader\";\r\nimport { ShaderDefine } from \"../../../RenderEngine/RenderShader/ShaderDefine\";\r\n\r\nexport class PBRShaderLib {\r\n\r\n    /**\r\n     * emission\r\n     */\r\n    static DEFINE_EMISSION: ShaderDefine;\r\n\r\n    /**\r\n     * clear coat\r\n     */\r\n    static DEFINE_CLEARCOAT: ShaderDefine;\r\n    static DEFINE_CLEARCOAT_NORMAL: ShaderDefine;\r\n\r\n    /**\r\n     * anisotropy\r\n     */\r\n    static DEFINE_ANISOTROPY: ShaderDefine;\r\n\r\n    static init() {\r\n\r\n        PBRShaderLib.DEFINE_EMISSION = Shader3D.getDefineByName(\"EMISSION\");\r\n\r\n        PBRShaderLib.DEFINE_CLEARCOAT = Shader3D.getDefineByName(\"CLEARCOAT\");\r\n        PBRShaderLib.DEFINE_CLEARCOAT_NORMAL = Shader3D.getDefineByName(\"CLEARCOAT_NORMAL\");\r\n\r\n        PBRShaderLib.DEFINE_ANISOTROPY = Shader3D.getDefineByName(\"ANISOTROPIC\");\r\n\r\n        // pbr lib\r\n        Shader3D.addInclude(\"BRDF.glsl\", BRDFGLSL);\r\n        Shader3D.addInclude(\"PBRGI.glsl\", PBRGIGLSL);\r\n\r\n        Shader3D.addInclude(\"PBRCommon.glsl\", PBRCommonGLSL);\r\n        Shader3D.addInclude(\"PBRVertex.glsl\", PBRVertexGLSL);\r\n        Shader3D.addInclude(\"PBRFrag.glsl\", PBRFragGLSL);\r\n\r\n        PBRDefaultDFG.DefaultDfgTexture();\r\n        SubShader.regIncludeBindUnifrom(\"PBRGI.glsl\", { \"u_IBLDFG\": ShaderDataType.Texture2D }, { \"u_IBLDFG\": PBRDefaultDFG.defaultDFG });\r\n\r\n        Shader3D.addInclude(\"PBRMetallicFrag.glsl\", PBRMetallicGLSL);\r\n    }\r\n}","#if !defined(BRDF)\r\n    #define BRDF\r\n\r\n// Specular implementations\r\nfloat D_GGX(float roughness, float NoH, vec3 h, vec3 n)\r\n{\r\n    // todo 精度\r\n    #if !defined(GL_FRAGMENT_PRECISION_HIGH)\r\n    vec3 NxH = cross(n, h);\r\n    float oneMinusNoHSquared = dot(NxH, NxH);\r\n    #else\r\n    float oneMinusNoHSquared = 1.0 - NoH * NoH;\r\n    #endif\r\n\r\n    float a = NoH * roughness;\r\n    float k = roughness / (oneMinusNoHSquared + a * a);\r\n    float d = k * k * INVERT_PI;\r\n\r\n    return saturateMediump(d);\r\n}\r\n\r\nfloat D_GGX_Anisotropic(float NoH, const vec3 h, const vec3 t, const vec3 b, float at, float ab)\r\n{\r\n    float ToH = dot(t, h);\r\n    float BoH = dot(b, h);\r\n    float a2 = at * ab;\r\n    highp vec3 v = vec3(ab * ToH, at * BoH, a2 * NoH);\r\n    highp float v2 = dot(v, v);\r\n    float w2 = a2 / v2;\r\n    return a2 * w2 * w2 * INVERT_PI;\r\n}\r\n\r\nfloat V_SmithGGXCorrelated(float roughness, float NoV, float NoL)\r\n{\r\n    float a2 = roughness * roughness;\r\n    float lambdaV = NoL * sqrt((NoV - a2 * NoV) * NoV + a2);\r\n    float lambdaL = NoV * sqrt((NoL - a2 * NoL) * NoL + a2);\r\n    float v = 0.5 / (lambdaV + lambdaL);\r\n\r\n    return saturateMediump(v);\r\n}\r\n\r\nfloat V_kelemen(float LoH)\r\n{\r\n    // Kelemen 2001, \"A Microfacet Based Coupled Specular-Matte BRDF Model with Importance Sampling\"\r\n    return saturateMediump(0.25 / (LoH * LoH));\r\n}\r\n\r\nfloat V_SmithGGXCorrelated_Anisotropic(float at, float ab, float ToV, float BoV, float ToL, float BoL, float NoV, float NoL)\r\n{\r\n    float lambdaV = NoL * length(vec3(at * ToV, ab * BoV, NoV));\r\n    float lambdaL = NoV * length(vec3(at * ToL, ab * BoL, NoL));\r\n    float v = 0.5 / (lambdaV + lambdaL);\r\n    return saturateMediump(v);\r\n}\r\n\r\nvec3 F_Schlick(vec3 f0, float f90, float VoH)\r\n{\r\n    return f0 + (f90 - f0) * pow5(1.0 - VoH);\r\n}\r\n\r\nvec3 F_Schlick(vec3 f0, float VoH)\r\n{\r\n    return f0 + (1.0 - f0) * pow5(1.0 - VoH);\r\n}\r\n\r\nfloat F_Schlick(float f0, float f90, float VoH)\r\n{\r\n    return f0 + (f90 - f0) * pow5(1.0 - VoH);\r\n}\r\n\r\nvec3 F_Schlick(vec3 f0, vec3 f90, float VoH)\r\n{\r\n    return f0 + (f90 - f0) * pow5(1.0 - VoH);\r\n}\r\n\r\n// Specular dispatch\r\n\r\n// D\r\nfloat distribution(float roughness, float NoH, vec3 h, vec3 n)\r\n{\r\n    return D_GGX(roughness, NoH, h, n);\r\n}\r\n\r\n// V\r\nfloat visibility(float roughness, float NoV, float NoL)\r\n{\r\n    return V_SmithGGXCorrelated(roughness, NoV, NoL);\r\n}\r\n\r\n// F\r\nvec3 fresnel(vec3 f0, float LoH)\r\n{\r\n    float f90 = saturate(dot(f0, vec3(50.0 * 0.33)));\r\n    return F_Schlick(f0, f90, LoH);\r\n\r\n    // return F_Schlick(f0, LoH);\r\n}\r\n\r\n// diffuse BRDF implementations\r\n\r\nfloat Fd_Lambert()\r\n{\r\n    // https://seblagarde.wordpress.com/2012/01/08/pi-or-not-to-pi-in-game-lighting-equation/\r\n    // return INVERT_PI;\r\n    return 1.0;\r\n}\r\n\r\nfloat Fd_Burley(float roughness, float NoV, float NoL, float LoH)\r\n{\r\n    float f90 = 0.5 + 2.0 * roughness * LoH * LoH;\r\n    float lightScatter = F_Schlick(1.0, f90, NoL);\r\n    float veiwScatter = F_Schlick(1.0, f90, NoV);\r\n    return lightScatter * veiwScatter * INVERT_PI;\r\n}\r\n\r\n// diffuse dispatch\r\nfloat diffuse()\r\n{\r\n    return Fd_Lambert();\r\n}\r\n\r\n#endif // BRDF","#if !defined(pbrGI_lib)\r\n    #define pbrGI_lib\r\n\r\n    #include \"globalIllumination.glsl\";\r\n\r\n    #ifdef ANISOTROPIC\r\nvec3 anisotropyBentNormal(const in Surface surface, const in PixelInfo info)\r\n{\r\n    float anisotropy = surface.anisotropy;\r\n    vec3 anisotropyDirection = info.anisotropicB;\r\n\r\n    vec3 n = info.normalWS;\r\n    vec3 v = info.viewDir;\r\n\r\n    // float tangentRoughness = mix(roughness, 1.0, anisotropy * anisotropy);\r\n    float roughness = surface.perceptualRoughness;\r\n    vec3 anisotropicTangent = cross(anisotropyDirection, v);\r\n    vec3 anisotropicNormal = cross(anisotropicTangent, anisotropyDirection);\r\n    float bendFactor = 1.0 - anisotropy * (1.0 - roughness);\r\n    float bendFactorPow4 = pow2(bendFactor) * pow2(bendFactor);\r\n    vec3 bentNormal = normalize(mix(anisotropicNormal, n, bendFactorPow4));\r\n\r\n    return bentNormal;\r\n}\r\n    #endif // ANISOTROPIC\r\n\r\n// 获取反射向量\r\nvec3 getReflectedVector(const in vec3 n, const in vec3 v, const in vec3 positionWS)\r\n{\r\n    vec3 r;\r\n    r = reflect(-v, n);\r\n\r\n    #ifdef SPECCUBE_BOX_PROJECTION\r\n    r = getBoxProjectionReflectedVector(r, positionWS);\r\n    #endif // SPECCUBE_BOX_PROJECTION\r\n\r\n    return r;\r\n}\r\n\r\n    #ifdef CLEARCOAT\r\nvoid clearCoatIBL(const in Surface surface, const in PixelInfo info, inout vec3 Fd, inout vec3 Fr)\r\n{\r\n    vec3 v = info.viewDir;\r\n    vec3 n = info.clearCoatNormal;\r\n    float NoV = info.clearCoatNoV;\r\n    vec3 positionWS = info.positionWS;\r\n\r\n    float clearCoat = surface.clearCoat;\r\n    float roughness = surface.clearCoatPerceptualRoughness;\r\n    float occlusion = surface.occlusion;\r\n\r\n    float Fc = F_Schlick(0.04, 1.0, NoV) * clearCoat;\r\n    float attenuation = 1.0 - Fc;\r\n    Fd *= attenuation;\r\n    Fr *= attenuation;\r\n\r\n    vec3 r = getReflectedVector(n, v, positionWS);\r\n    vec3 indirectSpecular = specularRadiance(r, roughness);\r\n\r\n    Fr += indirectSpecular * Fc * occlusion;\r\n}\r\n    #endif // CLEARCOAT\r\n\r\nvoid baseIBL(const in Surface surface, const in PixelInfo info, in vec3 E, inout vec3 Fd, inout vec3 Fr)\r\n{\r\n    vec3 dfg = info.dfg;\r\n    float NoV = info.NoV;\r\n    vec3 n = info.normalWS;\r\n    vec3 v = info.viewDir;\r\n    vec3 positionWS = info.positionWS;\r\n\r\n    vec3 diffuseColor = surface.diffuseColor;\r\n    float roughness = surface.perceptualRoughness;\r\n    vec3 f0 = surface.f0;\r\n    float occlusion = surface.occlusion;\r\n\r\n    #ifdef ANISOTROPIC\r\n    vec3 bentNormal = anisotropyBentNormal(surface, info);\r\n    vec3 r = getReflectedVector(bentNormal, v, positionWS);\r\n    #else // ANISOTROPIC\r\n    vec3 r = getReflectedVector(n, v, positionWS);\r\n    #endif // ANISOTROPIC\r\n\r\n    vec3 indirectSpecular = specularRadiance(r, roughness);\r\n\r\n    Fr += E * indirectSpecular * occlusion * info.energyCompensation;\r\n\r\n    #if defined(USELIGHTMAP)\r\n\r\n    vec2 lightmapUV = info.lightmapUV;\r\n    vec3 bakedlight = getBakedLightmapColor(lightmapUV, n);\r\n    Fd += bakedlight * diffuseColor;\r\n\r\n    #else // USELIGHTMAP\r\n\r\n    vec3 irradiance = diffuseIrradiance(n, positionWS, info.viewDir);\r\n    Fd += diffuseColor * irradiance * (1.0 - E) * occlusion;\r\n\r\n    #endif // USELIGHTMAP\r\n}\r\n\r\nvec3 getE(const in Surface surface, const in PixelInfo info)\r\n{\r\n    vec3 dfg = info.dfg;\r\n    vec3 f0 = surface.f0;\r\n    vec3 E = mix(dfg.xxx, dfg.yyy, f0);\r\n\r\n    return E;\r\n}\r\n\r\nvec3 PBRGI(const in Surface surface, const in PixelInfo info)\r\n{\r\n    vec3 Fd = vec3(0.0);\r\n    vec3 Fr = vec3(0.0);\r\n\r\n    vec3 E = getE(surface, info);\r\n\r\n    baseIBL(surface, info, E, Fd, Fr);\r\n\r\n    // clear coat\r\n    #ifdef CLEARCOAT\r\n    clearCoatIBL(surface, info, Fd, Fr);\r\n    #endif // CLEARCOAT\r\n\r\n    vec3 gi = Fd + Fr;\r\n\r\n    return gi;\r\n}\r\n\r\n#endif // pbrGI_lib","#if !defined(pbrCommon_lib)\r\n    #define pbrCommon_lib\r\n\r\n// varying\r\nvarying vec3 v_PositionWS;\r\n\r\n// todo\r\nvarying vec3 v_NormalWS;\r\nvarying vec3 v_TangentWS;\r\nvarying vec3 v_BiNormalWS;\r\n\r\n    #ifdef UV\r\nvarying vec2 v_Texcoord0;\r\n    #endif // UV\r\n\r\n    #ifdef UV1\r\n\t#ifdef LIGHTMAP\r\nvarying vec2 v_Texcoord1;\r\n\t#endif // LIGHTMAP\r\n    #endif // UV1\r\n\r\n    #ifdef COLOR\r\nvarying vec4 v_VertexColor;\r\n    #endif // COLOR\r\n\r\n// 记录顶点信息, 用于由vs向fs传递数据\r\nstruct PixelParams {\r\n\r\n    vec3 positionWS;\r\n\r\n    vec3 normalWS;\r\n    vec3 tangentWS;\r\n    vec3 biNormalWS;\r\n    mat3 TBN;\r\n\r\n    #ifdef UV\r\n    vec2 uv0;\r\n    #endif // UV\r\n\r\n    #ifdef UV1\r\n\t#ifdef LIGHTMAP\r\n    vec2 uv1;\r\n\t#endif // LIGHTMAP\r\n    #endif // UV1\r\n\r\n    #ifdef COLOR\r\n    vec4 vertexColor;\r\n    #endif // COLOR\r\n};\r\n\r\n#endif // pbrCommon_lib","#if !defined(pbrVertex_lib)\r\n    #define pbrVertex_lib\r\n\r\n    #include \"ShadingVertex.glsl\";\r\n\r\nvoid initPixelParams(inout PixelParams params, in Vertex vertex)\r\n{\r\n    shadingPixelParams(params, vertex);\r\n    sharePixelParams(params);\r\n}\r\n\r\n#endif // pbrVertex_lib","#if !defined(pbrFrag_lib)\r\n    #define pbrFrag_lib\r\n\r\n    #include \"PBRLighting.glsl\";\r\n\r\nvoid getPixelInfo(inout PixelInfo info, const in PixelParams pixel, const in Surface surface)\r\n{\r\n    info.positionWS = pixel.positionWS;\r\n    info.vertexNormalWS = pixel.normalWS;\r\n\r\n    #ifdef TANGENT\r\n    info.normalWS = normalize(pixel.TBN * surface.normalTS);\r\n    #else // TANGENT\r\n    info.normalWS = pixel.normalWS;\r\n    #endif // TANGENT\r\n\r\n    info.tangentWS = pixel.tangentWS;\r\n    info.biNormalWS = pixel.biNormalWS;\r\n\r\n    info.viewDir = normalize(u_CameraPos - info.positionWS);\r\n    info.NoV = min(max(dot(info.normalWS, info.viewDir), MIN_N_DOT_V), 1.0);\r\n\r\n    info.dfg = prefilteredDFG_LUT(surface.perceptualRoughness, info.NoV);\r\n\r\n    info.energyCompensation = (1.0 + surface.f0 * (1.0 / info.dfg.y - 1.0));\r\n\r\n    #ifdef CLEARCOAT\r\n\t#ifdef CLEARCOAT_NORMAL\r\n    info.clearCoatNormal = normalize(pixel.TBN * surface.clearCoatNormalTS);\r\n\t#else // CLEARCOAT_NORMAL\r\n    info.clearCoatNormal = info.vertexNormalWS;\r\n\t#endif // CLEARCOAT_NORMAL\r\n    info.clearCoatNoV = min(max(dot(info.clearCoatNormal, info.viewDir), MIN_N_DOT_V), 1.0);\r\n    #endif // CLEARCOAT\r\n\r\n    #ifdef ANISOTROPIC\r\n    mat3 anisotripyTBN = mat3(info.tangentWS, info.biNormalWS * -1.0, info.normalWS);\r\n    info.anisotropicT = anisotripyTBN * normalize(vec3(surface.anisotropyDirection, 0.0));\r\n    info.anisotropicB = cross(info.vertexNormalWS, info.anisotropicT);\r\n    info.ToV = dot(info.anisotropicT, info.viewDir);\r\n    info.BoV = dot(info.anisotropicB, info.viewDir);\r\n    info.at = mix(surface.roughness, 1.0, pow2(surface.anisotropy));\r\n    info.ab = surface.roughness;\r\n    #endif // ANISOTROPIC\r\n\r\n    #ifdef LIGHTMAP\r\n\t#ifdef UV1\r\n    info.lightmapUV = pixel.uv1;\r\n\t#endif // UV1\r\n    #endif // LIGHTMAP\r\n}\r\n\r\nvec3 PBRLighting(const in Surface surface, const in PixelInfo info)\r\n{\r\n    vec3 lightColor = vec3(0.0);\r\n    #ifdef DIRECTIONLIGHT\r\n    for (int i = 0; i < CalculateLightCount; i++)\r\n\t{\r\n\t    if (i >= DirectionCount)\r\n\t\tbreak;\r\n\t    DirectionLight directionLight = getDirectionLight(i, info.positionWS);\r\n\t    if (directionLight.lightMode == LightMode_Mix)\r\n\t\t{\r\n\t\t    continue;\r\n\t\t}\r\n\t    Light light = getLight(directionLight);\r\n\t    lightColor += PBRLighting(surface, info, light) * light.attenuation;\r\n\t}\r\n    #endif // DIRECTIONLIGHT\r\n\r\n    #if defined(POINTLIGHT) || defined(SPOTLIGHT)\r\n    ivec4 clusterInfo = getClusterInfo(u_View, u_Viewport, info.positionWS, gl_FragCoord, u_ProjectionParams);\r\n    #endif // POINTLIGHT || SPOTLIGHT\r\n\r\n    #ifdef POINTLIGHT\r\n    for (int i = 0; i < CalculateLightCount; i++)\r\n\t{\r\n\t    if (i >= clusterInfo.x)\r\n\t\tbreak;\r\n\t    PointLight pointLight = getPointLight(i, clusterInfo, info.positionWS);\r\n\t    if (pointLight.lightMode == LightMode_Mix)\r\n\t\t{\r\n\t\t    continue;\r\n\t\t}\r\n\t    Light light = getLight(pointLight, info.normalWS, info.positionWS);\r\n\t    lightColor += PBRLighting(surface, info, light) * light.attenuation;\r\n\t}\r\n    #endif // POINTLIGHT\r\n\r\n    #ifdef SPOTLIGHT\r\n    for (int i = 0; i < CalculateLightCount; i++)\r\n\t{\r\n\t    if (i >= clusterInfo.y)\r\n\t\tbreak;\r\n\t    SpotLight spotLight = getSpotLight(i, clusterInfo, info.positionWS);\r\n\t    if (spotLight.lightMode == LightMode_Mix)\r\n\t\t{\r\n\t\t    continue;\r\n\t\t}\r\n\t    Light light = getLight(spotLight, info.normalWS, info.positionWS);\r\n\t    lightColor += PBRLighting(surface, info, light) * light.attenuation;\r\n\t}\r\n    #endif // SPOTLIGHT\r\n\r\n    vec3 giColor = PBRGI(surface, info);\r\n\r\n    return lightColor + giColor;\r\n}\r\n\r\n#endif // pbrFrag_lib","#if !defined(PBRMetallic_lib)\r\n    #define PBRMetallic_lib\r\n\r\n    #include \"ShadingFrag.glsl\";\r\n\r\n    #include \"PBRFrag.glsl\";\r\n\r\nstruct SurfaceInputs {\r\n    vec3 diffuseColor;\r\n    float alpha;\r\n    float alphaTest;\r\n    float metallic;\r\n    float smoothness;\r\n    float occlusion;\r\n    vec3 emissionColor;\r\n    vec3 normalTS;\r\n\r\n    #ifdef CLEARCOAT\r\n    float clearCoat;\r\n    float clearCoatRoughness;\r\n\t#ifdef CLEARCOAT_NORMAL\r\n    vec3 clearCoatNormalTS;\r\n\t#endif // CLEARCOAT_NORMAL\r\n    #endif // CLEARCOAT\r\n\r\n    #ifdef ANISOTROPIC\r\n    float anisotropy;\r\n    vec2 anisotropyDirection;\r\n    #endif // ANISOTROPIC\r\n};\r\n\r\nvoid initSurface(inout Surface surface, const in SurfaceInputs inputs, const in PixelParams pixel)\r\n{\r\n    surface.alpha = inputs.alpha;\r\n\r\n    surface.normalTS = inputs.normalTS;\r\n\r\n    vec3 baseColor = inputs.diffuseColor;\r\n    float metallic = inputs.metallic;\r\n    float perceptualRoughness = 1.0 - inputs.smoothness;\r\n\r\n    float ior = 1.5;\r\n    vec3 f0 = vec3(pow2((ior - 1.0) / (ior + 1.0)));\r\n\r\n    surface.perceptualRoughness = clamp(perceptualRoughness, MIN_PERCEPTUAL_ROUGHNESS, 1.0);\r\n    surface.roughness = surface.perceptualRoughness * surface.perceptualRoughness;\r\n    surface.diffuseColor = (1.0 - metallic) * baseColor;\r\n    surface.f0 = mix(f0, baseColor, metallic);\r\n\r\n    surface.occlusion = inputs.occlusion;\r\n\r\n    #ifdef CLEARCOAT\r\n    surface.clearCoat = inputs.clearCoat;\r\n    surface.clearCoatPerceptualRoughness = clamp(inputs.clearCoatRoughness, MIN_PERCEPTUAL_ROUGHNESS, 1.0);\r\n    surface.clearCoatRoughness = surface.clearCoatPerceptualRoughness * surface.clearCoatPerceptualRoughness;\r\n\t#ifdef CLEARCOAT_NORMAL\r\n    surface.clearCoatNormalTS = inputs.clearCoatNormalTS;\r\n\t#endif // CLEARCOAT_NORMAL\r\n    #endif // CLEARCOAT\r\n\r\n    #ifdef ANISOTROPIC\r\n    surface.anisotropy = inputs.anisotropy;\r\n    surface.anisotropyDirection = inputs.anisotropyDirection;\r\n    #endif // ANISOTROPIC\r\n}\r\n\r\nvec4 PBR_Metallic_Flow(const in SurfaceInputs inputs, in PixelParams pixel)\r\n{\r\n    #ifdef ALPHATEST\r\n    if (inputs.alpha < inputs.alphaTest)\r\n\t{\r\n\t    discard;\r\n\t}\r\n    #endif // ALPHATEST\r\n\r\n    Surface surface;\r\n    initSurface(surface, inputs, pixel);\r\n\r\n    PixelInfo info;\r\n    getPixelInfo(info, pixel, surface);\r\n\r\n    vec3 surfaceColor = vec3(0.0);\r\n    surfaceColor += PBRLighting(surface, info);\r\n\r\n    // todo emission calculate\r\n    #ifdef EMISSION\r\n    surfaceColor += inputs.emissionColor;\r\n    #endif // EMISSION\r\n\r\n    return vec4(surfaceColor, surface.alpha);\r\n}\r\n\r\n#endif // PBRMetallic_lib\r\n","import { BaseTexture } from \"../../../resource/BaseTexture\";\r\nimport { Material } from \"./Material\";\r\nimport { PBRRenderQuality } from \"./PBRRenderQuality\";\r\nimport { Shader3D } from \"../../../RenderEngine/RenderShader/Shader3D\";\r\nimport { ShaderDefine } from \"../../../RenderEngine/RenderShader/ShaderDefine\";\r\nimport { Texture2D } from \"../../../resource/Texture2D\";\r\nimport { Color } from \"../../../maths/Color\";\r\nimport { Vector4 } from \"../../../maths/Vector4\";\r\nimport { RenderState } from \"../../../RenderEngine/RenderShader/RenderState\";\r\nimport { PBRShaderLib } from \"../../shader/pbr/PBRShaderLib\";\r\n\r\n/**\r\n * 渲染模式。\r\n */\r\nexport enum PBRRenderMode {\r\n    /**不透明。*/\r\n    Opaque,\r\n    /**透明裁剪。*/\r\n    Cutout,\r\n    /**透明混合_游戏中经常使用的透明。*/\r\n    Fade,\r\n    /**透明混合_物理上看似合理的透明。*/\r\n    Transparent\r\n}\r\n\r\n/**\r\n * PBR材质的父类,该类为抽象类。\r\n */\r\nexport class PBRMaterial extends Material {\r\n    /** @internal */\r\n    static SHADERDEFINE_ALBEDOTEXTURE: ShaderDefine;\r\n    /** @internal */\r\n    static SHADERDEFINE_NORMALTEXTURE: ShaderDefine;\r\n    /** @internal */\r\n    static SHADERDEFINE_OCCLUSIONTEXTURE: ShaderDefine;\r\n    /** @internal */\r\n    static SHADERDEFINE_PARALLAXTEXTURE: ShaderDefine;\r\n    /** @internal */\r\n    static SHADERDEFINE_EMISSIONTEXTURE: ShaderDefine;\r\n\r\n    /**@internal */\r\n    static SHADERDEFINE_DETAILALBEDO: ShaderDefine;\r\n    /**@internal */\r\n    static SHADERDEFINE_DETAILNORMAL: ShaderDefine;\r\n\r\n    /** @internal */\r\n    static SHADERDEFINE_ENABLEVERTEXCOLOR: ShaderDefine;\r\n\r\n    /**@internal */\r\n    static SHADERDEFINE_ANISOTROPYTEXTURE: ShaderDefine;\r\n\r\n    /** @internal */\r\n    static SHADERDEFINE_TRANSPARENTBLEND: ShaderDefine;\r\n    /**@internal */\r\n    static SHADERDEFINE_LAYA_PBR_BRDF_HIGH: ShaderDefine;\r\n    /**@internal */\r\n    static SHADERDEFINE_LAYA_PBR_BRDF_LOW: ShaderDefine;\r\n\r\n    /** @internal */\r\n    static ALBEDOTEXTURE: number;\r\n    /** @internal */\r\n    static ALBEDOCOLOR: number;\r\n    /** @internal */\r\n    static TILINGOFFSET: number;\r\n    /** @internal */\r\n    static NORMALTEXTURE: number;\r\n    /** @internal */\r\n    static NORMALSCALE: number;\r\n    /** @internal */\r\n    static SMOOTHNESS: number;\r\n    /** @internal */\r\n    static SMOOTHNESSSCALE: number;\r\n    /** @internal */\r\n    static OCCLUSIONTEXTURE: number;\r\n    /** @internal */\r\n    static OCCLUSIONSTRENGTH: number;\r\n    /** @internal */\r\n    static PARALLAXTEXTURE: number;\r\n    /** @internal */\r\n    static PARALLAXSCALE: number;\r\n    /** @internal */\r\n    static EMISSIONTEXTURE: number;\r\n    /** @internal */\r\n    static EMISSIONCOLOR: number;\r\n    /**@internal */\r\n    static EMISSIONIntensity: number\r\n\r\n    //Detail\r\n    /** @internal */\r\n    static DETAILALBEDOTEXTURE: number;\r\n    /**@internal */\r\n    static DETAILNORMALTEXTURE: number;\r\n    /**@internal */\r\n    static DETAILTILLINGOFFSET: number;\r\n    /**@internal */\r\n    static DETAILNORMALSCALE: number;\r\n\r\n    // clear coat\r\n    /**@internal */\r\n    static CLEARCOAT: number;\r\n    /**@internal */\r\n    static SHADERDEFINE_CLEARCOATTEXTURE: ShaderDefine;\r\n    /**@internal */\r\n    static CLEARCOATTEXTURE: number;\r\n    /**@internal */\r\n    static CLEARCOATROUGHNESS: number;\r\n    /**@internal */\r\n    static SHADERDEFINE_CLEARCOATROUGHNESSTEXTURE: ShaderDefine;\r\n    /**@internal */\r\n    static CLEARCOATROUGHNESSTEXTURE: number;\r\n    /** @internal */\r\n    static CLEARCOATNORMALTEXTURE: number;\r\n\r\n    // anisotropy\r\n    /** @internal */\r\n    static ANISOTROPY: number;\r\n    /** @internal */\r\n    static ANISOTROPYTEXTURE: number;\r\n    /** @internal */\r\n    static ANISOTROPYROTATION: number;\r\n\r\n    /** 渲染质量。*/\r\n    static renderQuality: PBRRenderQuality = PBRRenderQuality.High;\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    static __init__(): void {\r\n        PBRMaterial.SHADERDEFINE_ALBEDOTEXTURE = Shader3D.getDefineByName(\"ALBEDOTEXTURE\");\r\n        PBRMaterial.SHADERDEFINE_NORMALTEXTURE = Shader3D.getDefineByName(\"NORMALTEXTURE\");\r\n        PBRMaterial.SHADERDEFINE_PARALLAXTEXTURE = Shader3D.getDefineByName(\"PARALLAXTEXTURE\");\r\n        PBRMaterial.SHADERDEFINE_OCCLUSIONTEXTURE = Shader3D.getDefineByName(\"OCCLUSIONTEXTURE\");\r\n        PBRMaterial.SHADERDEFINE_EMISSIONTEXTURE = Shader3D.getDefineByName(\"EMISSIONTEXTURE\");\r\n        PBRMaterial.SHADERDEFINE_TRANSPARENTBLEND = Shader3D.getDefineByName(\"TRANSPARENTBLEND\");\r\n        PBRMaterial.SHADERDEFINE_LAYA_PBR_BRDF_HIGH = Shader3D.getDefineByName(\"LAYA_PBR_BRDF_HIGH\");\r\n        PBRMaterial.SHADERDEFINE_LAYA_PBR_BRDF_LOW = Shader3D.getDefineByName(\"LAYA_PBR_BRDF_LOW\");\r\n        //Detail\r\n        PBRMaterial.SHADERDEFINE_DETAILALBEDO = Shader3D.getDefineByName(\"DETAILTEXTURE\");\r\n        PBRMaterial.SHADERDEFINE_DETAILNORMAL = Shader3D.getDefineByName(\"DETAILNORMAL\");\r\n\r\n        PBRMaterial.SHADERDEFINE_ENABLEVERTEXCOLOR = Shader3D.getDefineByName(\"ENABLEVERTEXCOLOR\");\r\n\r\n\r\n\r\n        PBRMaterial.ALBEDOTEXTURE = Shader3D.propertyNameToID(\"u_AlbedoTexture\");\r\n        PBRMaterial.ALBEDOCOLOR = Shader3D.propertyNameToID(\"u_AlbedoColor\");\r\n        PBRMaterial.TILINGOFFSET = Shader3D.propertyNameToID(\"u_TilingOffset\");\r\n        PBRMaterial.NORMALTEXTURE = Shader3D.propertyNameToID(\"u_NormalTexture\");\r\n        PBRMaterial.NORMALSCALE = Shader3D.propertyNameToID(\"u_NormalScale\");\r\n        PBRMaterial.SMOOTHNESS = Shader3D.propertyNameToID(\"u_Smoothness\");\r\n        PBRMaterial.OCCLUSIONTEXTURE = Shader3D.propertyNameToID(\"u_OcclusionTexture\");\r\n        PBRMaterial.OCCLUSIONSTRENGTH = Shader3D.propertyNameToID(\"u_OcclusionStrength\");\r\n        PBRMaterial.PARALLAXTEXTURE = Shader3D.propertyNameToID(\"u_ParallaxTexture\");\r\n        PBRMaterial.PARALLAXSCALE = Shader3D.propertyNameToID(\"u_ParallaxScale\");\r\n        PBRMaterial.EMISSIONTEXTURE = Shader3D.propertyNameToID(\"u_EmissionTexture\");\r\n        PBRMaterial.EMISSIONCOLOR = Shader3D.propertyNameToID(\"u_EmissionColor\");\r\n        PBRMaterial.EMISSIONIntensity = Shader3D.propertyNameToID(\"u_EmissionIntensity\");\r\n\r\n        //Detail\r\n        PBRMaterial.DETAILALBEDOTEXTURE = Shader3D.propertyNameToID(\"u_DetailAlbedoTexture\");\r\n        PBRMaterial.DETAILNORMALTEXTURE = Shader3D.propertyNameToID(\"u_DetailNormalTexture\");\r\n        PBRMaterial.DETAILTILLINGOFFSET = Shader3D.propertyNameToID(\"u_DetailTillingOffset\");\r\n        PBRMaterial.DETAILNORMALSCALE = Shader3D.propertyNameToID(\"u_DetailNormalScale\");\r\n\r\n        // clear coat\r\n        PBRMaterial.CLEARCOAT = Shader3D.propertyNameToID(\"u_ClearCoatFactor\");\r\n        PBRMaterial.SHADERDEFINE_CLEARCOATTEXTURE = Shader3D.getDefineByName(\"CLEARCOATMAP\");\r\n        PBRMaterial.CLEARCOATTEXTURE = Shader3D.propertyNameToID(\"u_ClearCoatTexture\");\r\n\r\n        PBRMaterial.CLEARCOATROUGHNESS = Shader3D.propertyNameToID(\"u_ClearCoatRoughness\");\r\n        PBRMaterial.SHADERDEFINE_CLEARCOATROUGHNESSTEXTURE = Shader3D.getDefineByName(\"CLEARCOAT_ROUGHNESSMAP\");\r\n        PBRMaterial.CLEARCOATROUGHNESSTEXTURE = Shader3D.propertyNameToID(\"u_ClearCoatRoughnessTexture\");\r\n        PBRMaterial.CLEARCOATNORMALTEXTURE = Shader3D.propertyNameToID(\"u_ClearCoatNormalTexture\");\r\n\r\n        // anisotropy\r\n        PBRMaterial.ANISOTROPY = Shader3D.propertyNameToID(\"u_AnisotropyStrength\");\r\n        PBRMaterial.SHADERDEFINE_ANISOTROPYTEXTURE = Shader3D.getDefineByName(\"ANISOTROPYMAP\");\r\n        PBRMaterial.ANISOTROPYTEXTURE = Shader3D.propertyNameToID(\"u_AnisotropyTexture\");\r\n        PBRMaterial.ANISOTROPYROTATION = Shader3D.propertyNameToID(\"u_AnisotropyRotation\");\r\n    }\r\n\r\n\r\n    /**\r\n     * 漫反射颜色。\r\n     */\r\n    get albedoColor(): Color {\r\n        return this._shaderValues.getColor(PBRMaterial.ALBEDOCOLOR);\r\n    }\r\n\r\n    set albedoColor(value: Color) {\r\n        this._shaderValues.setColor(PBRMaterial.ALBEDOCOLOR, value);\r\n    }\r\n\r\n    /**\r\n     * 漫反射贴图。\r\n     */\r\n    get albedoTexture(): BaseTexture {\r\n        if (this.hasDefine(PBRMaterial.SHADERDEFINE_ALBEDOTEXTURE)) {\r\n            return this._shaderValues.getTexture(PBRMaterial.ALBEDOTEXTURE);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    set albedoTexture(value: BaseTexture) {\r\n        if (value)\r\n            this._shaderValues.addDefine(PBRMaterial.SHADERDEFINE_ALBEDOTEXTURE);\r\n        else\r\n            this._shaderValues.removeDefine(PBRMaterial.SHADERDEFINE_ALBEDOTEXTURE);\r\n\r\n        this._shaderValues.setTexture(PBRMaterial.ALBEDOTEXTURE, value);\r\n    }\r\n\r\n    /**\r\n     * 法线贴图。\r\n     */\r\n    get normalTexture(): BaseTexture {\r\n        if (this.hasDefine(PBRMaterial.SHADERDEFINE_NORMALTEXTURE)) {\r\n            return this._shaderValues.getTexture(PBRMaterial.NORMALTEXTURE);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    set normalTexture(value: BaseTexture) {\r\n        if (value) {\r\n            this._shaderValues.addDefine(PBRMaterial.SHADERDEFINE_NORMALTEXTURE);\r\n        } else {\r\n            this._shaderValues.removeDefine(PBRMaterial.SHADERDEFINE_NORMALTEXTURE);\r\n        }\r\n        this._shaderValues.setTexture(PBRMaterial.NORMALTEXTURE, value);\r\n    }\r\n\r\n    /**\r\n     * 法线贴图缩放系数。\r\n     */\r\n    get normalTextureScale(): number {\r\n        return this._shaderValues.getNumber(PBRMaterial.NORMALSCALE);\r\n    }\r\n\r\n    set normalTextureScale(value: number) {\r\n        this._shaderValues.setNumber(PBRMaterial.NORMALSCALE, value);\r\n    }\r\n\r\n    /**\r\n     * 视差贴图。\r\n     */\r\n    get parallaxTexture(): BaseTexture {\r\n        return this._shaderValues.getTexture(PBRMaterial.PARALLAXTEXTURE);\r\n    }\r\n\r\n    set parallaxTexture(value: BaseTexture) {\r\n        if (value)\r\n            this._shaderValues.addDefine(PBRMaterial.SHADERDEFINE_PARALLAXTEXTURE);\r\n        else\r\n            this._shaderValues.removeDefine(PBRMaterial.SHADERDEFINE_PARALLAXTEXTURE);\r\n        this._shaderValues.setTexture(PBRMaterial.PARALLAXTEXTURE, value);\r\n    }\r\n\r\n    /**\r\n     * 视差贴图缩放系数。\r\n     */\r\n    get parallaxTextureScale(): number {\r\n        return this._shaderValues.getNumber(PBRMaterial.PARALLAXSCALE);\r\n    }\r\n\r\n    set parallaxTextureScale(value: number) {\r\n        this._shaderValues.setNumber(PBRMaterial.PARALLAXSCALE, Math.max(0.005, Math.min(0.08, value)));\r\n    }\r\n\r\n    /**\r\n     * 遮挡贴图。\r\n     */\r\n    get occlusionTexture(): BaseTexture {\r\n        return this._shaderValues.getTexture(PBRMaterial.OCCLUSIONTEXTURE);\r\n    }\r\n\r\n    set occlusionTexture(value: BaseTexture) {\r\n        if (value)\r\n            this._shaderValues.addDefine(PBRMaterial.SHADERDEFINE_OCCLUSIONTEXTURE);\r\n        else\r\n            this._shaderValues.removeDefine(PBRMaterial.SHADERDEFINE_OCCLUSIONTEXTURE);\r\n\r\n        this._shaderValues.setTexture(PBRMaterial.OCCLUSIONTEXTURE, value);\r\n    }\r\n\r\n    /**\r\n     * 遮挡贴图强度,范围为0到1。\r\n     */\r\n    get occlusionTextureStrength(): number {\r\n        return this._shaderValues.getNumber(PBRMaterial.OCCLUSIONSTRENGTH);\r\n    }\r\n\r\n    set occlusionTextureStrength(value: number) {\r\n        this._shaderValues.setNumber(PBRMaterial.OCCLUSIONSTRENGTH, Math.max(0.0, Math.min(1.0, value)));\r\n    }\r\n\r\n    /**\r\n     * 光滑度,范围为0到1。\r\n     */\r\n    get smoothness(): number {\r\n        return this._shaderValues.getNumber(PBRMaterial.SMOOTHNESS);\r\n    }\r\n\r\n    set smoothness(value: number) {\r\n        this._shaderValues.setNumber(PBRMaterial.SMOOTHNESS, Math.max(0.0, Math.min(1.0, value)));\r\n    }\r\n\r\n    /**\r\n      * 是否支持顶点色。\r\n      */\r\n    get enableVertexColor(): boolean {\r\n        return this.hasDefine(PBRMaterial.SHADERDEFINE_ENABLEVERTEXCOLOR);\r\n    }\r\n\r\n    set enableVertexColor(value: boolean) {\r\n        if (value)\r\n            this.addDefine(PBRMaterial.SHADERDEFINE_ENABLEVERTEXCOLOR);\r\n        else\r\n            this.removeDefine(PBRMaterial.SHADERDEFINE_ENABLEVERTEXCOLOR);\r\n    }\r\n\r\n    /**\r\n     * 是否开启自发光。\r\n     */\r\n    get enableEmission(): boolean {\r\n        return this._shaderValues.hasDefine(PBRShaderLib.DEFINE_EMISSION);\r\n    }\r\n\r\n    set enableEmission(value: boolean) {\r\n        if (value)\r\n            this._shaderValues.addDefine(PBRShaderLib.DEFINE_EMISSION);\r\n        else\r\n            this._shaderValues.removeDefine(PBRShaderLib.DEFINE_EMISSION);\r\n    }\r\n\r\n    /**\r\n     * 自发光颜色。\r\n     */\r\n    get emissionColor(): Color {\r\n        return this._shaderValues.getColor(PBRMaterial.EMISSIONCOLOR);\r\n    }\r\n\r\n    set emissionColor(value: Color) {\r\n        this._shaderValues.setColor(PBRMaterial.EMISSIONCOLOR, value);\r\n    }\r\n\r\n    set emissionIntensity(value: number) {\r\n        //u_EmissionIntensity\r\n        this._shaderValues.setNumber(PBRMaterial.EMISSIONIntensity, value);\r\n    }\r\n\r\n    get emissionIntensity() {\r\n        return this._shaderValues.getNumber(PBRMaterial.EMISSIONIntensity);\r\n    }\r\n\r\n    /**\r\n     * 自发光贴图。\r\n     */\r\n    get emissionTexture(): BaseTexture {\r\n        return this._shaderValues.getTexture(PBRMaterial.EMISSIONTEXTURE);\r\n    }\r\n\r\n    set emissionTexture(value: BaseTexture) {\r\n        if (value)\r\n            this._shaderValues.addDefine(PBRMaterial.SHADERDEFINE_EMISSIONTEXTURE);\r\n        else\r\n            this._shaderValues.removeDefine(PBRMaterial.SHADERDEFINE_EMISSIONTEXTURE);\r\n\r\n        this._shaderValues.setTexture(PBRMaterial.EMISSIONTEXTURE, value);\r\n    }\r\n\r\n    /**\r\n     * 纹理平铺和偏移。\r\n     */\r\n    get tilingOffset(): Vector4 {\r\n        return (<Vector4>this._shaderValues.getVector(PBRMaterial.TILINGOFFSET));\r\n    }\r\n\r\n    set tilingOffset(value: Vector4) {\r\n        if (value) {\r\n            this._shaderValues.setVector(PBRMaterial.TILINGOFFSET, value);\r\n        }\r\n        else {\r\n            this._shaderValues.getVector(PBRMaterial.TILINGOFFSET).setValue(1.0, 1.0, 0.0, 0.0);\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * 细节贴图。\r\n     */\r\n    get detailAlbedoTexture(): BaseTexture {\r\n        return this._shaderValues.getTexture(PBRMaterial.DETAILALBEDOTEXTURE);\r\n    }\r\n\r\n    set detailAlbedoTexture(value: BaseTexture) {\r\n        if (value)\r\n            this._shaderValues.addDefine(PBRMaterial.SHADERDEFINE_DETAILALBEDO);\r\n        else\r\n            this._shaderValues.removeDefine(PBRMaterial.SHADERDEFINE_DETAILALBEDO);\r\n\r\n        this._shaderValues.setTexture(PBRMaterial.DETAILALBEDOTEXTURE, value);\r\n    }\r\n\r\n\r\n    /**\r\n     * 细节法线贴图。\r\n     */\r\n    get detailNormalTexture(): BaseTexture {\r\n        return this._shaderValues.getTexture(PBRMaterial.DETAILNORMALTEXTURE);\r\n    }\r\n\r\n    set detailNormalTexture(value: BaseTexture) {\r\n        if (value)\r\n            this._shaderValues.addDefine(PBRMaterial.SHADERDEFINE_DETAILNORMAL);\r\n        else\r\n            this._shaderValues.removeDefine(PBRMaterial.SHADERDEFINE_DETAILNORMAL);\r\n        this._shaderValues.setTexture(PBRMaterial.DETAILNORMALTEXTURE, value);\r\n    }\r\n\r\n    /**\r\n    * 细节图纹理平铺和偏移。\r\n    */\r\n    get detailTilingOffset(): Vector4 {\r\n        return (<Vector4>this._shaderValues.getVector(PBRMaterial.DETAILTILLINGOFFSET));\r\n    }\r\n\r\n    set detailTilingOffset(value: Vector4) {\r\n        if (value) {\r\n            this._shaderValues.setVector(PBRMaterial.DETAILTILLINGOFFSET, value);\r\n        }\r\n        else {\r\n            this._shaderValues.getVector(PBRMaterial.DETAILTILLINGOFFSET).setValue(1.0, 1.0, 0.0, 0.0);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * 细节法线贴图缩放系数。\r\n    */\r\n    get detailNormalScale(): number {\r\n        return this._shaderValues.getNumber(PBRMaterial.DETAILNORMALSCALE);\r\n    }\r\n\r\n    set detailNormalScale(value: number) {\r\n        this._shaderValues.setNumber(PBRMaterial.DETAILNORMALSCALE, value);\r\n    }\r\n\r\n\r\n\r\n\r\n    /**\r\n     * 渲染模式。\r\n     */\r\n    set renderMode(value: number) {\r\n        switch (value) {\r\n            case PBRRenderMode.Opaque:\r\n                this.alphaTest = false;\r\n                this.renderQueue = Material.RENDERQUEUE_OPAQUE;\r\n                this.depthWrite = true;\r\n                this.cull = RenderState.CULL_BACK;\r\n                this.blend = RenderState.BLEND_DISABLE;\r\n                this.depthTest = RenderState.DEPTHTEST_LESS;\r\n                this._shaderValues.removeDefine(PBRMaterial.SHADERDEFINE_TRANSPARENTBLEND);\r\n                break;\r\n            case PBRRenderMode.Cutout:\r\n                this.renderQueue = Material.RENDERQUEUE_ALPHATEST;\r\n                this.alphaTest = true;\r\n                this.depthWrite = true;\r\n                this.cull = RenderState.CULL_BACK;\r\n                this.blend = RenderState.BLEND_DISABLE;\r\n                this.depthTest = RenderState.DEPTHTEST_LESS;\r\n                this._shaderValues.removeDefine(PBRMaterial.SHADERDEFINE_TRANSPARENTBLEND);\r\n                break;\r\n            case PBRRenderMode.Fade:\r\n                this.renderQueue = Material.RENDERQUEUE_TRANSPARENT;\r\n                this.alphaTest = false;\r\n                this.depthWrite = false;\r\n                this.cull = RenderState.CULL_BACK;\r\n                this.blend = RenderState.BLEND_ENABLE_ALL;\r\n                this.blendSrc = RenderState.BLENDPARAM_SRC_ALPHA;\r\n                this.blendDst = RenderState.BLENDPARAM_ONE_MINUS_SRC_ALPHA;\r\n                this.depthTest = RenderState.DEPTHTEST_LESS;\r\n                this._shaderValues.removeDefine(PBRMaterial.SHADERDEFINE_TRANSPARENTBLEND);\r\n                break;\r\n            case PBRRenderMode.Transparent:\r\n                this.renderQueue = Material.RENDERQUEUE_TRANSPARENT;\r\n                this.alphaTest = false;\r\n                this.depthWrite = false;\r\n                this.cull = RenderState.CULL_BACK;\r\n                this.blend = RenderState.BLEND_ENABLE_ALL;\r\n                this.blendSrc = RenderState.BLENDPARAM_ONE;\r\n                this.blendDst = RenderState.BLENDPARAM_ONE_MINUS_SRC_ALPHA;\r\n                this.depthTest = RenderState.DEPTHTEST_LESS;\r\n                this._shaderValues.addDefine(PBRMaterial.SHADERDEFINE_TRANSPARENTBLEND);\r\n                break;\r\n            default:\r\n                throw new Error(\"PBRMaterial:unknown renderMode value.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 是否开启 anisotropy\r\n     */\r\n    public get anisotropyEnable(): boolean {\r\n        return this.shaderData.hasDefine(PBRShaderLib.DEFINE_ANISOTROPY);\r\n    }\r\n    public set anisotropyEnable(value: boolean) {\r\n        if (value) {\r\n            this.shaderData.addDefine(PBRShaderLib.DEFINE_ANISOTROPY);\r\n        }\r\n        else {\r\n            this.shaderData.removeDefine(PBRShaderLib.DEFINE_ANISOTROPY);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * anisotropy 强度\r\n     */\r\n    public get anisotropy(): number {\r\n        return this.getFloatByIndex(PBRMaterial.ANISOTROPY);\r\n    }\r\n    public set anisotropy(value: number) {\r\n        this.setFloatByIndex(PBRMaterial.ANISOTROPY, Math.min(1, Math.max(-1, value)));\r\n    }\r\n\r\n    /**\r\n     * anisotropy 强度贴图\r\n     */\r\n    public get anisotropyTexture(): Texture2D {\r\n        return <Texture2D>this.getTextureByIndex(PBRMaterial.ANISOTROPYTEXTURE);\r\n    }\r\n\r\n    public set anisotropyTexture(value: Texture2D) {\r\n        this.setTextureByIndex(PBRMaterial.ANISOTROPYTEXTURE, value);\r\n        if (value) {\r\n            this.addDefine(PBRMaterial.SHADERDEFINE_ANISOTROPYTEXTURE);\r\n        }\r\n        else {\r\n            this.removeDefine(PBRMaterial.SHADERDEFINE_ANISOTROPYTEXTURE);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * anisotropy 在 切线空间 中的旋转\r\n     */\r\n    public get anisotropyRotation(): number {\r\n        return this.getFloatByIndex(PBRMaterial.ANISOTROPYROTATION);\r\n    }\r\n    public set anisotropyRotation(value: number) {\r\n        value = Math.max(Math.min(value, 1.0), 0.0);\r\n        this.setFloatByIndex(PBRMaterial.ANISOTROPYROTATION, value);\r\n    }\r\n\r\n    /**\r\n     * 是否开启 clear coat\r\n     */\r\n    public get clearCoatEnable(): boolean {\r\n        return this.shaderData.hasDefine(PBRShaderLib.DEFINE_CLEARCOAT);\r\n    }\r\n    public set clearCoatEnable(value: boolean) {\r\n        if (value) {\r\n            this.shaderData.addDefine(PBRShaderLib.DEFINE_CLEARCOAT);\r\n        }\r\n        else {\r\n            this.shaderData.removeDefine(PBRShaderLib.DEFINE_CLEARCOAT);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * clear coat 层 强度\r\n     */\r\n    public get clearCoat(): number {\r\n        return this.shaderData.getNumber(PBRMaterial.CLEARCOAT);\r\n    }\r\n    public set clearCoat(value: number) {\r\n        this.shaderData.setNumber(PBRMaterial.CLEARCOAT, value);\r\n    }\r\n\r\n    /**\r\n     * clear coat 强度贴图\r\n     */\r\n    public get clearCoatTexture(): BaseTexture {\r\n        return this.shaderData.getTexture(PBRMaterial.CLEARCOATTEXTURE);\r\n    }\r\n    public set clearCoatTexture(value: BaseTexture) {\r\n        if (value) {\r\n            this.shaderData.addDefine(PBRMaterial.SHADERDEFINE_CLEARCOATTEXTURE);\r\n        }\r\n        else {\r\n            this.shaderData.removeDefine(PBRMaterial.SHADERDEFINE_CLEARCOATTEXTURE);\r\n        }\r\n        this.shaderData.setTexture(PBRMaterial.CLEARCOATTEXTURE, value);\r\n    }\r\n\r\n    /**\r\n     * clear coat 层 粗糙度\r\n     */\r\n    public get clearCoatRoughness(): number {\r\n        return this.shaderData.getNumber(PBRMaterial.CLEARCOATROUGHNESS);\r\n    }\r\n    public set clearCoatRoughness(value: number) {\r\n        this.shaderData.setNumber(PBRMaterial.CLEARCOATROUGHNESS, value);\r\n    }\r\n\r\n    /**\r\n     * clear coat 层 粗糙度贴图\r\n     */\r\n    public get clearCoatRoughnessTexture(): BaseTexture {\r\n        return this.shaderData.getTexture(PBRMaterial.CLEARCOATROUGHNESSTEXTURE);\r\n    }\r\n    public set clearCoatRoughnessTexture(value: BaseTexture) {\r\n        if (value) {\r\n            this.shaderData.addDefine(PBRMaterial.SHADERDEFINE_CLEARCOATROUGHNESSTEXTURE);\r\n        }\r\n        else {\r\n            this.shaderData.removeDefine(PBRMaterial.SHADERDEFINE_CLEARCOATROUGHNESSTEXTURE);\r\n        }\r\n        this.shaderData.setTexture(PBRMaterial.CLEARCOATROUGHNESSTEXTURE, value);\r\n    }\r\n\r\n    /**\r\n     * clear coat 法线贴图\r\n     */\r\n    public get clearCoatNormalTexture(): BaseTexture {\r\n        return this.shaderData.getTexture(PBRMaterial.CLEARCOATNORMALTEXTURE);\r\n    }\r\n    public set clearCoatNormalTexture(value: BaseTexture) {\r\n        if (value) {\r\n            this.shaderData.addDefine(PBRShaderLib.DEFINE_CLEARCOAT_NORMAL);\r\n        }\r\n        else {\r\n            this.shaderData.removeDefine(PBRShaderLib.DEFINE_CLEARCOAT_NORMAL);\r\n        }\r\n        this.shaderData.setTexture(PBRMaterial.CLEARCOATNORMALTEXTURE, value);\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this._shaderValues.setColor(PBRMaterial.ALBEDOCOLOR, new Color(1.0, 1.0, 1.0, 1.0));\r\n        this._shaderValues.setColor(PBRMaterial.EMISSIONCOLOR, new Color(1.0, 1.0, 1.0, 1.0));\r\n        this._shaderValues.setVector(PBRMaterial.TILINGOFFSET, new Vector4(1.0, 1.0, 0.0, 0.0));\r\n        this._shaderValues.setNumber(PBRMaterial.SMOOTHNESS, 0.5);\r\n        this._shaderValues.setNumber(PBRMaterial.OCCLUSIONSTRENGTH, 1.0);\r\n        this._shaderValues.setNumber(PBRMaterial.NORMALSCALE, 1.0);\r\n        this._shaderValues.setNumber(PBRMaterial.PARALLAXSCALE, 0.001);\r\n        this._shaderValues.setNumber(Material.ALPHATESTVALUE, 0.5);\r\n        this.renderMode = PBRRenderMode.Opaque;\r\n    }\r\n\r\n\r\n    //deprecated\r\n    /**\r\n     * @deprecated\r\n     * 光滑度缩放系数,范围为0到1。\r\n     */\r\n    get smoothnessTextureScale(): number {\r\n        return this._shaderValues.getNumber(PBRMaterial.SMOOTHNESS);\r\n    }\r\n\r\n    set smoothnessTextureScale(value: number) {\r\n        this._shaderValues.setNumber(PBRMaterial.SMOOTHNESS, Math.max(0.0, Math.min(1.0, value)));\r\n    }\r\n}","import { BaseTexture } from \"../../../resource/BaseTexture\";\r\nimport { PBRMaterial } from \"./PBRMaterial\";\r\nimport { Shader3D } from \"../../../RenderEngine/RenderShader/Shader3D\";\r\nimport { ShaderDefine } from \"../../../RenderEngine/RenderShader/ShaderDefine\";\r\n\r\n/**\r\n * 金属度PBR材质光滑度数据源。\r\n */\r\nexport enum PBRMetallicSmoothnessSource {\r\n\t/**金属度贴图的Alpha通道。*/\r\n\tMetallicGlossTextureAlpha,\r\n\t/**反射率贴图的Alpha通道。*/\r\n\tAlbedoTextureAlpha\r\n}\r\n\r\n/**\r\n * <code>PBRStandardMaterial</code> 类用于实现PBR材质。\r\n */\r\nexport class PBRStandardMaterial extends PBRMaterial {\r\n\t/** @internal */\r\n\tstatic SHADERDEFINE_SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA: ShaderDefine;\r\n\t/** @internal */\r\n\tstatic SHADERDEFINE_METALLICGLOSSTEXTURE: ShaderDefine;\r\n\t/** @internal */\r\n\tstatic METALLICGLOSSTEXTURE: number;\r\n\t/** @internal */\r\n\tstatic METALLIC: number;\r\n\t/** 默认材质，禁止修改*/\r\n\tstatic defaultMaterial: PBRStandardMaterial;\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic __init__(): void {\r\n\t\tPBRStandardMaterial.SHADERDEFINE_METALLICGLOSSTEXTURE = Shader3D.getDefineByName(\"METALLICGLOSSTEXTURE\");\r\n\t\tPBRStandardMaterial.SHADERDEFINE_SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA = Shader3D.getDefineByName(\"SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA\");\r\n\t\tPBRStandardMaterial.METALLICGLOSSTEXTURE = Shader3D.propertyNameToID(\"u_MetallicGlossTexture\");\r\n\t\tPBRStandardMaterial.METALLIC = Shader3D.propertyNameToID(\"u_Metallic\");\r\n\t\t// var shader: Shader3D = Shader3D.add(\"PBR\", true, true);\r\n\t\t// var subShader: SubShader = new SubShader();\r\n\t\t// shader.addSubShader(subShader);\r\n\t\t// subShader.addShaderPass(PBRVS, PBRPS, \"Forward\");\r\n\t\t// subShader.addShaderPass(PBRShadowCasterVS, PBRShadowCasterPS, \"ShadowCaster\");\r\n\t\t// subShader.addShaderPass(DepthNormalsTextureVS, DepthNormalsTextureFS, \"DepthNormal\");\r\n\t}\r\n\r\n\t/** @internal */\r\n\tprivate _smoothnessSource: PBRMetallicSmoothnessSource = 0;\r\n\r\n\t/**\r\n\t * 金属光滑度贴图。\r\n\t */\r\n\tget metallicGlossTexture(): BaseTexture {\r\n\t\treturn this._shaderValues.getTexture(PBRStandardMaterial.METALLICGLOSSTEXTURE);\r\n\t}\r\n\r\n\tset metallicGlossTexture(value: BaseTexture) {\r\n\t\tif (value)\r\n\t\t\tthis._shaderValues.addDefine(PBRStandardMaterial.SHADERDEFINE_METALLICGLOSSTEXTURE);\r\n\t\telse\r\n\t\t\tthis._shaderValues.removeDefine(PBRStandardMaterial.SHADERDEFINE_METALLICGLOSSTEXTURE);\r\n\r\n\t\tthis._shaderValues.setTexture(PBRStandardMaterial.METALLICGLOSSTEXTURE, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 获取金属度,范围为0到1。\r\n\t */\r\n\tget metallic(): number {\r\n\t\treturn this._shaderValues.getNumber(PBRStandardMaterial.METALLIC);\r\n\t}\r\n\r\n\tset metallic(value: number) {\r\n\t\tthis._shaderValues.setNumber(PBRStandardMaterial.METALLIC, Math.max(0.0, Math.min(1.0, value)));\r\n\t}\r\n\r\n\t/**\r\n\t * 光滑度数据源,0或1。\r\n\t */\r\n\tget smoothnessSource(): PBRMetallicSmoothnessSource {\r\n\t\treturn this._smoothnessSource;\r\n\t}\r\n\r\n\tset smoothnessSource(value: PBRMetallicSmoothnessSource) {\r\n\t\tif (value)\r\n\t\t\tthis._shaderValues.addDefine(PBRStandardMaterial.SHADERDEFINE_SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA);\r\n\t\telse\r\n\t\t\tthis._shaderValues.removeDefine(PBRStandardMaterial.SHADERDEFINE_SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA);\r\n\t\tthis._smoothnessSource = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>PBRStandardMaterial</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.setShaderName(\"PBR\");\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @return\t 克隆副本。\r\n\t * @override\r\n\t */\r\n\tclone(): any {\r\n\t\tvar dest: PBRStandardMaterial = new PBRStandardMaterial();\r\n\t\tthis.cloneTo(dest);\r\n\t\treturn dest;\r\n\t}\r\n}\r\n\r\n\r\n","import { Vector2 } from \"../../../../../maths/Vector2\";\r\nimport { Vector3 } from \"../../../../../maths/Vector3\";\r\nimport { IClone } from \"../../../../../utils/IClone\"\r\nimport { BoundBox } from \"../../../../math/BoundBox\"\r\nimport { Rand } from \"../../../../math/Rand\"\r\n\r\nexport enum ParticleSystemShapeType {\r\n\t/**盒体 */\r\n\tBox = 0,\r\n\t/**环形 */\r\n\tCircle = 1,\r\n\t/**锥体 */\r\n\tCone = 2,\r\n\t/**半球体 */\r\n\tHemisphere = 3,\r\n\t/**球体 */\r\n\tSphere = 4\r\n}\r\n\r\n\r\n/**\r\n * <code>BaseShape</code> 类用于粒子形状。\r\n */\r\nexport class BaseShape implements IClone {\r\n\t/**是否启用。*/\r\n\tenable: boolean = true;\r\n\t/**随机方向。*/\r\n\trandomDirection: number = 0;\r\n\r\n\t/**粒子类型 */\r\n\tshapeType: ParticleSystemShapeType;\r\n\r\n\t/**\r\n\t * 创建一个 <code>BaseShape</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t}\r\n\r\n\t/**@internal */\r\n\tprotected _getShapeBoundBox(boundBox: BoundBox): void {\r\n\t\tthrow new Error(\"BaseShape: must override it.\");\r\n\t}\r\n\r\n\t/**@internal */\r\n\tprotected _getSpeedBoundBox(boundBox: BoundBox): void {\r\n\t\tthrow new Error(\"BaseShape: must override it.\");\r\n\t}\r\n\r\n\t/**\r\n\t * 用于生成粒子初始位置和方向。\r\n\t * @param\tposition 粒子位置。\r\n\t * @param\tdirection 粒子方向。\r\n\t */\r\n\tgeneratePositionAndDirection(position: Vector3, direction: Vector3, rand: Rand = null, randomSeeds: Uint32Array = null): void {\r\n\t\tthrow new Error(\"BaseShape: must override it.\");\r\n\t}\r\n\r\n\t/** \r\n\t * @internal \r\n\t */\r\n\t_calculateProceduralBounds(boundBox: BoundBox, emitterPosScale: Vector3, minMaxBounds: Vector2): void {\r\n\t\tthis._getShapeBoundBox(boundBox);\r\n\r\n\t\tvar min: Vector3 = boundBox.min;\r\n\t\tvar max: Vector3 = boundBox.max;\r\n\t\tVector3.multiply(min, emitterPosScale, min);\r\n\t\tVector3.multiply(max, emitterPosScale, max);\r\n\r\n\t\tvar speedBounds: BoundBox = new BoundBox(new Vector3(), new Vector3());\r\n\t\tif (this.randomDirection/* && (m_Type != kCone) && (m_Type != kConeShell)*/)//TODO:randomDirection应换成0到1\r\n\t\t{\r\n\t\t\tspeedBounds.min = new Vector3(-1, -1, -1);\r\n\t\t\tspeedBounds.max = new Vector3(1, 1, 1);\r\n\t\t\t//minMaxBounds = Abs(minMaxBounds);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis._getSpeedBoundBox(speedBounds);\r\n\t\t}\r\n\r\n\r\n\t\tvar maxSpeedBound: BoundBox = new BoundBox(new Vector3(), new Vector3());\r\n\t\tvar maxSpeedMin: Vector3 = maxSpeedBound.min;\r\n\t\tvar maxSpeedMax: Vector3 = maxSpeedBound.max;\r\n\t\tVector3.scale(speedBounds.min, minMaxBounds.y, maxSpeedMin);\r\n\t\tVector3.scale(speedBounds.max, minMaxBounds.y, maxSpeedMax);\r\n\t\tVector3.add(boundBox.min, maxSpeedMin, maxSpeedMin);\r\n\t\tVector3.add(boundBox.max, maxSpeedMax, maxSpeedMax);\r\n\r\n\t\tVector3.min(boundBox.min, maxSpeedMin, boundBox.min);\r\n\t\tVector3.max(boundBox.max, maxSpeedMin, boundBox.max);\r\n\r\n\r\n\t\tvar minSpeedBound: BoundBox = new BoundBox(new Vector3(), new Vector3());\r\n\t\tvar minSpeedMin: Vector3 = minSpeedBound.min;\r\n\t\tvar minSpeedMax: Vector3 = minSpeedBound.max;\r\n\t\tVector3.scale(speedBounds.min, minMaxBounds.x, minSpeedMin);\r\n\t\tVector3.scale(speedBounds.max, minMaxBounds.x, minSpeedMax);\r\n\r\n\t\tVector3.min(minSpeedBound.min, minSpeedMax, maxSpeedMin);\r\n\t\tVector3.max(minSpeedBound.min, minSpeedMax, maxSpeedMax);\r\n\r\n\t\tVector3.min(boundBox.min, maxSpeedMin, boundBox.min);\r\n\t\tVector3.max(boundBox.max, maxSpeedMin, boundBox.max);\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @param\tdestObject 克隆源。\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tvar destShape: BaseShape = (<BaseShape>destObject);\r\n\t\tdestShape.enable = this.enable;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @return\t 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar destShape: BaseShape = new BaseShape();\r\n\t\tthis.cloneTo(destShape);\r\n\t\treturn destShape;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","export enum TrailAlignment {\r\n    /** 使拖尾面向摄像机。*/\r\n    View,\r\n    /** 使拖尾的与组件的方向对齐*/\r\n    TransformZ\r\n}\r\n","import { Component } from \"../../../components/Component\";\r\nimport { Vector2 } from \"../../../maths/Vector2\";\r\nimport { Light, LightMode, LightType } from \"./Light\";\r\nexport enum AreaShape {\r\n    rectangle,\r\n    ellipse,\r\n}\r\n/**\r\n * <code>LightSprite</code> 类用于创建灯光的父类。\r\n */\r\nexport class AreaLightCom extends Light {\r\n    /**@internal */\r\n    private _areaShape: AreaShape;\r\n\r\n    /**@internal */\r\n    private _power: number;\r\n\r\n    /**@internal */\r\n    private _size: Vector2;\r\n\r\n    /**@internal */\r\n    private _spread: number;\r\n\r\n    /**@internal */\r\n    private _maxBounces: number;\r\n    /**\r\n     * 创建一个 <code>AreaLightCoponent</code> 实例。\r\n     */\r\n    constructor() {\r\n        super();\r\n        this._lightType = LightType.Area;\r\n        this._lightmapBakedType = LightMode.bakeOnly;\r\n        this._spread = 90;\r\n        this._maxBounces = 1024;\r\n        this._size = new Vector2(1, 1);\r\n        this._areaShape = AreaShape.rectangle;\r\n        this._power = 100;\r\n    }\r\n\r\n    /**\r\n      * 灯光烘培类型。\r\n      */\r\n    get lightmapBakedType(): LightMode {\r\n        return LightMode.bakeOnly;\r\n    }\r\n\r\n    set lightmapBakedType(value: LightMode) {\r\n        this._lightmapBakedType = LightMode.bakeOnly;\r\n    }\r\n\r\n\r\n    /**\r\n     * 面光类型\r\n     */\r\n    get shape(): AreaShape {\r\n        return this._areaShape;\r\n    }\r\n\r\n    set shape(value: AreaShape) {\r\n        this._areaShape = value;\r\n    }\r\n\r\n    /**\r\n     * 光照强度\r\n     */\r\n    set power(value: number) {\r\n        this._power = value;\r\n    }\r\n\r\n    get power() {\r\n        return this._power;\r\n    }\r\n\r\n    /**\r\n     * 面光大小\r\n     */\r\n    set size(value: Vector2) {\r\n        value && value.cloneTo(this._size);\r\n    }\r\n\r\n    get size() {\r\n        return this._size;\r\n    }\r\n\r\n    /**\r\n     * 面光辐射角度\r\n     */\r\n    set spread(value: number) {\r\n        this._spread = Math.min((Math.max(0, value)), 180);\r\n    }\r\n\r\n    get spread(): number {\r\n        return this._spread;\r\n    }\r\n\r\n    /**\r\n     * 最大反弹数\r\n     */\r\n    set maxBounces(value: number) {\r\n        this._maxBounces = value;\r\n    }\r\n\r\n    get maxBounces() {\r\n        return this._maxBounces;\r\n    }\r\n\r\n\r\n    /**\r\n     * @internal\r\n     * @override\r\n     */\r\n    protected _addToLightQueue(): void {\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @override\r\n     */\r\n    protected _removeFromLightQueue(): void {\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     * @internal\r\n     */\r\n    _parse(data: any, spriteMap: any): void {\r\n        super._parse(data, spriteMap);\r\n        //this.range = data.range;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     * @internal\r\n     */\r\n    _cloneTo(dest: AreaLightCom): void {\r\n        super._cloneTo(dest);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _create(): Component {\r\n        return new AreaLightCom();\r\n    }\r\n}\r\n\r\n","import { Color } from \"../../../maths/Color\";\r\nimport { Shader3D } from \"../../../RenderEngine/RenderShader/Shader3D\";\r\nimport { TextureCube } from \"../../../resource/TextureCube\";\r\nimport { Material } from \"./Material\";\r\n\r\n/**\r\n * <code>SkyBoxMaterial</code> 类用于实现SkyBoxMaterial材质。\r\n */\r\nexport class SkyBoxMaterial extends Material {\r\n\tstatic TINTCOLOR: number;\r\n\tstatic EXPOSURE: number;\r\n\tstatic ROTATION: number;\r\n\tstatic TEXTURECUBE: number;\r\n\r\n\t/** 默认材质，禁止修改*/\r\n\tstatic defaultMaterial: SkyBoxMaterial;\r\n\r\n\t/**\r\n\t* @internal\r\n\t*/\r\n\tstatic __initDefine__(): void {\r\n\t\tSkyBoxMaterial.TINTCOLOR = Shader3D.propertyNameToID(\"u_TintColor\");\r\n\t\tSkyBoxMaterial.EXPOSURE = Shader3D.propertyNameToID(\"u_Exposure\");\r\n\t\tSkyBoxMaterial.ROTATION = Shader3D.propertyNameToID(\"u_Rotation\");\r\n\t\tSkyBoxMaterial.TEXTURECUBE = Shader3D.propertyNameToID(\"u_CubeTexture\");\r\n\t}\r\n\r\n\t/**\r\n\t * 颜色。\r\n\t */\r\n\tget tintColor(): Color {\r\n\t\treturn this._shaderValues.getColor(SkyBoxMaterial.TINTCOLOR);\r\n\t}\r\n\r\n\tset tintColor(value: Color) {\r\n\t\tthis._shaderValues.setColor(SkyBoxMaterial.TINTCOLOR, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 曝光强度。\r\n\t */\r\n\tget exposure(): number {\r\n\t\treturn this._shaderValues.getNumber(SkyBoxMaterial.EXPOSURE);\r\n\t}\r\n\r\n\tset exposure(value: number) {\r\n\t\tthis._shaderValues.setNumber(SkyBoxMaterial.EXPOSURE, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 旋转角度。\r\n\t */\r\n\tget rotation(): number {\r\n\t\treturn this._shaderValues.getNumber(SkyBoxMaterial.ROTATION);\r\n\t}\r\n\r\n\tset rotation(value: number) {\r\n\t\tthis._shaderValues.setNumber(SkyBoxMaterial.ROTATION, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 天空盒纹理。\r\n\t */\r\n\tget textureCube(): TextureCube {\r\n\t\treturn (<TextureCube>this._shaderValues.getTexture(SkyBoxMaterial.TEXTURECUBE));\r\n\t}\r\n\r\n\tset textureCube(value: TextureCube) {\r\n\t\tthis._shaderValues.setTexture(SkyBoxMaterial.TEXTURECUBE, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @return\t 克隆副本。\r\n\t * @override\r\n\t */\r\n\tclone(): any {\r\n\t\tvar dest: SkyBoxMaterial = new SkyBoxMaterial();\r\n\t\tthis.cloneTo(dest);\r\n\t\treturn dest;\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>SkyBoxMaterial</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.setShaderName(\"SkyBox\");\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { Texture2D } from \"../../../resource/Texture2D\";\r\nimport { Material } from \"./Material\";\r\nimport { Shader3D } from \"../../../RenderEngine/RenderShader/Shader3D\";\r\nimport { Color } from \"../../../maths/Color\";\r\nimport { Vector4 } from \"../../../maths/Vector4\";\r\n\r\n/**\r\n * <code>SkyPanoramicMaterial</code> 类用于实现SkyPanoramicMaterial材质。\r\n */\r\nexport class SkyPanoramicMaterial extends Material {\r\n    static TINTCOLOR: number;\r\n    static EXPOSURE: number;\r\n    static ROTATION: number;\r\n    static TEXTURE: number;\r\n    static TEXTURE_HDR_PARAMS: number;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    static __init__(): void {\r\n\r\n        SkyPanoramicMaterial.TINTCOLOR = Shader3D.propertyNameToID(\"u_TintColor\");\r\n        SkyPanoramicMaterial.EXPOSURE = Shader3D.propertyNameToID(\"u_Exposure\");\r\n        SkyPanoramicMaterial.ROTATION = Shader3D.propertyNameToID(\"u_Rotation\");\r\n        SkyPanoramicMaterial.TEXTURE = Shader3D.propertyNameToID(\"u_Texture\");\r\n        SkyPanoramicMaterial.TEXTURE_HDR_PARAMS = Shader3D.propertyNameToID(\"u_Texture_HDR_params\");\r\n    }\r\n    /** @internal */\r\n    private _textureHDRParams: Vector4 = new Vector4(1.0, 0.0, 0.0, 1.0);\r\n\r\n    /**\r\n     * 颜色。\r\n     */\r\n    get tintColor(): Color {\r\n        return this.getColorByIndex(SkyPanoramicMaterial.TINTCOLOR);\r\n    }\r\n\r\n    set tintColor(value: Color) {\r\n        this.setColorByIndex(SkyPanoramicMaterial.TINTCOLOR, value);\r\n    }\r\n\r\n    /**\r\n     * 曝光强度。\r\n     */\r\n    get exposure(): number {\r\n        return this.getFloatByIndex(SkyPanoramicMaterial.EXPOSURE);\r\n    }\r\n\r\n    set exposure(value: number) {\r\n        this.setFloatByIndex(SkyPanoramicMaterial.EXPOSURE, value);\r\n    }\r\n\r\n    /**\r\n     * 旋转角度。\r\n     */\r\n    get rotation(): number {\r\n        return this.getFloatByIndex(SkyPanoramicMaterial.ROTATION);\r\n    }\r\n\r\n    set rotation(value: number) {\r\n        this.setFloatByIndex(SkyPanoramicMaterial.ROTATION, value);\r\n    }\r\n\r\n    /**\r\n     * 全景天空纹理。\r\n     */\r\n    get panoramicTexture(): Texture2D {\r\n        return <Texture2D>this.getTextureByIndex(SkyPanoramicMaterial.TEXTURE);\r\n    }\r\n\r\n    set panoramicTexture(value: Texture2D) {\r\n        this.setTextureByIndex(SkyPanoramicMaterial.TEXTURE, value);\r\n    }\r\n\r\n    /**\r\n     * 创建一个 <code>SkyPanoramicMaterial</code> 实例。\r\n     */\r\n    constructor() {\r\n        super();\r\n        this.setShaderName(\"SkyPanoramic\");\r\n        this.setColorByIndex(SkyPanoramicMaterial.TINTCOLOR, new Color(0.5, 0.5, 0.5, 0.5));\r\n        this.setFloatByIndex(SkyPanoramicMaterial.ROTATION, 0.0);\r\n        this.setVector4ByIndex(SkyPanoramicMaterial.TEXTURE_HDR_PARAMS, this._textureHDRParams);\r\n        this.exposure = 1.3;\r\n    }\r\n}","import { Color } from \"../../../maths/Color\";\r\nimport { Shader3D } from \"../../../RenderEngine/RenderShader/Shader3D\";\r\nimport { ShaderDefine } from \"../../../RenderEngine/RenderShader/ShaderDefine\";\r\n\r\nimport { Material } from \"./Material\";\r\n\r\n/**\r\n * <code>SkyProceduralMaterial</code> 类用于实现SkyProceduralMaterial材质。\r\n */\r\nexport class SkyProceduralMaterial extends Material {\r\n\t/** 太阳_无*/\r\n\tstatic SUN_NODE: number = 0;\r\n\t/** 太阳_精简*/\r\n\tstatic SUN_SIMPLE: number = 1;\r\n\t/** 太阳_高质量*/\r\n\tstatic SUN_HIGH_QUALITY: number = 2;\r\n\r\n\t/**@internal */\r\n\tstatic SUNSIZE: number;\r\n\t/**@internal */\r\n\tstatic SUNSIZECONVERGENCE: number;\r\n\t/**@internal */\r\n\tstatic ATMOSPHERETHICKNESS: number;\r\n\t/**@internal */\r\n\tstatic SKYTINT: number;\r\n\t/**@internal */\r\n\tstatic GROUNDTINT: number;\r\n\t/**@internal */\r\n\tstatic EXPOSURE: number;\r\n\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_SUN_HIGH_QUALITY: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_SUN_SIMPLE: ShaderDefine;\r\n\r\n\t/** 默认材质，禁止修改*/\r\n\tstatic defaultMaterial: SkyProceduralMaterial;\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic __initDefine__(): void {\r\n\t\tSkyProceduralMaterial.SHADERDEFINE_SUN_HIGH_QUALITY = Shader3D.getDefineByName(\"SUN_HIGH_QUALITY\");\r\n\t\tSkyProceduralMaterial.SHADERDEFINE_SUN_SIMPLE = Shader3D.getDefineByName(\"SUN_SIMPLE\");\r\n\t\tSkyProceduralMaterial.SUNSIZE = Shader3D.propertyNameToID(\"u_SunSize\");\r\n\t\tSkyProceduralMaterial.SUNSIZECONVERGENCE = Shader3D.propertyNameToID(\"u_SunSizeConvergence\");\r\n\t\tSkyProceduralMaterial.ATMOSPHERETHICKNESS = Shader3D.propertyNameToID(\"u_AtmosphereThickness\");\r\n\t\tSkyProceduralMaterial.SKYTINT = Shader3D.propertyNameToID(\"u_SkyTint\");\r\n\t\tSkyProceduralMaterial.GROUNDTINT = Shader3D.propertyNameToID(\"u_GroundTint\");\r\n\t\tSkyProceduralMaterial.EXPOSURE = Shader3D.propertyNameToID(\"u_Exposure\");\r\n\t}\r\n\r\n\t/**@internal */\r\n\tprivate _sunDisk: number;\r\n\r\n\t/**\r\n\t * 太阳状态。\r\n\t */\r\n\tget sunDisk(): number {\r\n\t\treturn this._sunDisk;\r\n\t}\r\n\r\n\tset sunDisk(value: number) {\r\n\t\tswitch (value) {\r\n\t\t\tcase SkyProceduralMaterial.SUN_HIGH_QUALITY:\r\n\t\t\t\tthis._shaderValues.removeDefine(SkyProceduralMaterial.SHADERDEFINE_SUN_SIMPLE);\r\n\t\t\t\tthis._shaderValues.addDefine(SkyProceduralMaterial.SHADERDEFINE_SUN_HIGH_QUALITY);\r\n\t\t\t\tbreak;\r\n\t\t\tcase SkyProceduralMaterial.SUN_SIMPLE:\r\n\t\t\t\tthis._shaderValues.removeDefine(SkyProceduralMaterial.SHADERDEFINE_SUN_HIGH_QUALITY);\r\n\t\t\t\tthis._shaderValues.addDefine(SkyProceduralMaterial.SHADERDEFINE_SUN_SIMPLE);\r\n\t\t\t\tbreak;\r\n\t\t\tcase SkyProceduralMaterial.SUN_NODE:\r\n\t\t\t\tthis._shaderValues.removeDefine(SkyProceduralMaterial.SHADERDEFINE_SUN_HIGH_QUALITY);\r\n\t\t\t\tthis._shaderValues.removeDefine(SkyProceduralMaterial.SHADERDEFINE_SUN_SIMPLE);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow \"SkyBoxProceduralMaterial: unknown sun value.\";\r\n\t\t}\r\n\t\tthis._sunDisk = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 太阳尺寸,范围是0到1。\r\n\t */\r\n\tget sunSize(): number {\r\n\t\treturn this._shaderValues.getNumber(SkyProceduralMaterial.SUNSIZE);\r\n\t}\r\n\r\n\tset sunSize(value: number) {\r\n\t\tvalue = Math.min(Math.max(0.0, value), 1.0);\r\n\t\tthis._shaderValues.setNumber(SkyProceduralMaterial.SUNSIZE, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 太阳尺寸收缩,范围是0到20。\r\n\t */\r\n\tget sunSizeConvergence(): number {\r\n\t\treturn this._shaderValues.getNumber(SkyProceduralMaterial.SUNSIZECONVERGENCE);\r\n\t}\r\n\r\n\tset sunSizeConvergence(value: number) {\r\n\t\tvalue = Math.min(Math.max(0.0, value), 20.0);\r\n\t\tthis._shaderValues.setNumber(SkyProceduralMaterial.SUNSIZECONVERGENCE, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 大气厚度,范围是0到5。\r\n\t */\r\n\tget atmosphereThickness(): number {\r\n\t\treturn this._shaderValues.getNumber(SkyProceduralMaterial.ATMOSPHERETHICKNESS);\r\n\t}\r\n\r\n\tset atmosphereThickness(value: number) {\r\n\t\tvalue = Math.min(Math.max(0.0, value), 5.0);\r\n\t\tthis._shaderValues.setNumber(SkyProceduralMaterial.ATMOSPHERETHICKNESS, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 天空颜色。\r\n\t */\r\n\tget skyTint(): Color {\r\n\t\treturn (<Color>this._shaderValues.getColor(SkyProceduralMaterial.SKYTINT));\r\n\t}\r\n\r\n\tset skyTint(value: Color) {\r\n\t\tthis._shaderValues.setColor(SkyProceduralMaterial.SKYTINT, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 地面颜色。\r\n\t */\r\n\tget groundTint(): Color {\r\n\t\treturn this._shaderValues.getColor(SkyProceduralMaterial.GROUNDTINT);\r\n\t}\r\n\r\n\tset groundTint(value: Color) {\r\n\t\tthis._shaderValues.setColor(SkyProceduralMaterial.GROUNDTINT, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 曝光强度,范围是0到8。\r\n\t */\r\n\tget exposure(): number {\r\n\t\treturn this._shaderValues.getNumber(SkyProceduralMaterial.EXPOSURE);\r\n\t}\r\n\r\n\tset exposure(value: number) {\r\n\t\tvalue = Math.min(Math.max(0.0, value), 8.0);\r\n\t\tthis._shaderValues.setNumber(SkyProceduralMaterial.EXPOSURE, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>SkyProceduralMaterial</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.setShaderName(\"SkyProcedural\");\r\n\t\tthis.sunDisk = SkyProceduralMaterial.SUN_HIGH_QUALITY;\r\n\t\tthis.sunSize = 0.04;\r\n\t\tthis.sunSizeConvergence = 5;\r\n\t\tthis.atmosphereThickness = 1.0;\r\n\t\tthis.skyTint = new Color(0.5, 0.5, 0.5, 1.0);\r\n\t\tthis.groundTint = new Color(0.369, 0.349, 0.341, 1.0);\r\n\t\tthis.exposure = 1.3;\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @return\t 克隆副本。\r\n\t * @override\r\n\t */\r\n\tclone(): any {\r\n\t\tvar dest: SkyProceduralMaterial = new SkyProceduralMaterial();\r\n\t\tthis.cloneTo(dest);\r\n\t\treturn dest;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { Vector4 } from \"../../../maths/Vector4\";\r\nimport { Shader3D } from \"../../../RenderEngine/RenderShader/Shader3D\";\r\nimport { ShaderDefine } from \"../../../RenderEngine/RenderShader/ShaderDefine\";\r\nimport { BaseTexture } from \"../../../resource/BaseTexture\";\r\nimport { Material } from \"./Material\";\r\n\r\n/**\r\n * <code>WaterPrimaryMaterial</code> 类用于实现水材质。\r\n */\r\nexport class WaterPrimaryMaterial extends Material {\r\n\r\n\tstatic HORIZONCOLOR: number;\r\n\tstatic MAINTEXTURE: number;\r\n\tstatic NORMALTEXTURE: number;\r\n\tstatic WAVESCALE: number;\r\n\tstatic WAVESPEED: number;\r\n\r\n\tstatic SHADERDEFINE_MAINTEXTURE: ShaderDefine;\r\n\tstatic SHADERDEFINE_NORMALTEXTURE: ShaderDefine;\r\n\r\n\t/** 默认材质，禁止修改*/\r\n\tstatic defaultMaterial: WaterPrimaryMaterial;\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic __initDefine__(): void {\r\n\t\tWaterPrimaryMaterial.SHADERDEFINE_MAINTEXTURE = Shader3D.getDefineByName(\"MAINTEXTURE\");\r\n\t\tWaterPrimaryMaterial.SHADERDEFINE_NORMALTEXTURE = Shader3D.getDefineByName(\"NORMALTEXTURE\");\r\n\t\tWaterPrimaryMaterial.HORIZONCOLOR = Shader3D.propertyNameToID(\"u_HorizonColor\");\r\n\t\tWaterPrimaryMaterial.MAINTEXTURE = Shader3D.propertyNameToID(\"u_MainTexture\");\r\n\t\tWaterPrimaryMaterial.NORMALTEXTURE = Shader3D.propertyNameToID(\"u_NormalTexture\");\r\n\t\tWaterPrimaryMaterial.WAVESCALE = Shader3D.propertyNameToID(\"u_WaveScale\");\r\n\t\tWaterPrimaryMaterial.WAVESPEED = Shader3D.propertyNameToID(\"u_WaveSpeed\");\r\n\t}\r\n\r\n\t/**\r\n\t * 地平线颜色。\r\n\t */\r\n\tget horizonColor(): Vector4 {\r\n\t\treturn (<Vector4>this._shaderValues.getVector(WaterPrimaryMaterial.HORIZONCOLOR));\r\n\t}\r\n\r\n\tset horizonColor(value: Vector4) {\r\n\t\tthis._shaderValues.setVector(WaterPrimaryMaterial.HORIZONCOLOR, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 主贴图。\r\n\t */\r\n\tget mainTexture(): BaseTexture {\r\n\t\treturn this._shaderValues.getTexture(WaterPrimaryMaterial.MAINTEXTURE);\r\n\t}\r\n\r\n\tset mainTexture(value: BaseTexture) {\r\n\t\tif (value)\r\n\t\t\tthis._shaderValues.addDefine(WaterPrimaryMaterial.SHADERDEFINE_MAINTEXTURE);\r\n\t\telse\r\n\t\t\tthis._shaderValues.removeDefine(WaterPrimaryMaterial.SHADERDEFINE_MAINTEXTURE);\r\n\t\tthis._shaderValues.setTexture(WaterPrimaryMaterial.MAINTEXTURE, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 法线贴图。\r\n\t */\r\n\tget normalTexture(): BaseTexture {\r\n\t\treturn this._shaderValues.getTexture(WaterPrimaryMaterial.NORMALTEXTURE);\r\n\t}\r\n\r\n\tset normalTexture(value: BaseTexture) {\r\n\t\tif (value)\r\n\t\t\tthis._shaderValues.addDefine(WaterPrimaryMaterial.SHADERDEFINE_NORMALTEXTURE);\r\n\t\telse\r\n\t\t\tthis._shaderValues.removeDefine(WaterPrimaryMaterial.SHADERDEFINE_NORMALTEXTURE);\r\n\t\tthis._shaderValues.setTexture(WaterPrimaryMaterial.NORMALTEXTURE, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 波动缩放系数。\r\n\t */\r\n\tget waveScale(): number {\r\n\t\treturn this._shaderValues.getNumber(WaterPrimaryMaterial.WAVESCALE);\r\n\t}\r\n\r\n\tset waveScale(value: number) {\r\n\t\tthis._shaderValues.setNumber(WaterPrimaryMaterial.WAVESCALE, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 波动速率。\r\n\t */\r\n\tget waveSpeed(): Vector4 {\r\n\t\treturn (<Vector4>this._shaderValues.getVector(WaterPrimaryMaterial.WAVESPEED));\r\n\t}\r\n\r\n\tset waveSpeed(value: Vector4) {\r\n\t\tthis._shaderValues.setVector(WaterPrimaryMaterial.WAVESPEED, value);\r\n\t}\r\n\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.setShaderName(\"WaterPrimary\");\r\n\t\tthis._shaderValues.setVector(WaterPrimaryMaterial.HORIZONCOLOR, new Vector4(0.172, 0.463, 0.435, 0));\r\n\t\tthis._shaderValues.setNumber(WaterPrimaryMaterial.WAVESCALE, 0.15);\r\n\t\tthis._shaderValues.setVector(WaterPrimaryMaterial.WAVESPEED, new Vector4(19, 9, -16, -7));\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @return\t 克隆副本。\r\n\t * @override\r\n\t */\r\n\tclone(): any {\r\n\t\tvar dest: WaterPrimaryMaterial = new WaterPrimaryMaterial();\r\n\t\tthis.cloneTo(dest);\r\n\t\treturn dest;\r\n\t}\r\n}\r\n\r\n\r\n","import { RenderableSprite3D } from \"./RenderableSprite3D\";\r\nimport { MeshFilter } from \"./MeshFilter\";\r\nimport { MeshRenderer } from \"./MeshRenderer\";\r\nimport { Material } from \"./material/Material\";\r\nimport { Mesh } from \"../resource/models/Mesh\"\r\nimport { Node } from \"../../display/Node\"\r\nimport { Loader } from \"../../net/Loader\";\r\nimport { Sprite3D } from \"./Sprite3D\";\r\nimport { Vector4 } from \"../../maths/Vector4\";\r\n\r\n/**\r\n * <code>MeshSprite3D</code> 类用于创建网格。\r\n */\r\nexport class MeshSprite3D extends RenderableSprite3D {\r\n    private _meshFilter: MeshFilter;\r\n\r\n    /**\r\n     * 网格过滤器。\r\n     */\r\n    get meshFilter(): MeshFilter {\r\n        return (<MeshFilter>this._meshFilter);\r\n    }\r\n\r\n    /**\r\n     * 网格渲染器。\r\n     */\r\n    get meshRenderer(): MeshRenderer {\r\n        return (<MeshRenderer>this._render);\r\n    }\r\n\r\n    /**\r\n     * 创建一个 <code>MeshSprite3D</code> 实例。\r\n     * @param mesh 网格,同时会加载网格所用默认材质。\r\n     * @param name 名字。\r\n     */\r\n    constructor(mesh: Mesh = null, name: string = null) {\r\n        super(name);\r\n        this._meshFilter = this.addComponent(MeshFilter);\r\n        this._render = this.addComponent(MeshRenderer);\r\n        (mesh) && (this._meshFilter.sharedMesh = mesh);\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     * @internal\r\n     */\r\n    _parse(data: any, spriteMap: any): void {\r\n        super._parse(data, spriteMap);\r\n        var render: MeshRenderer = this.meshRenderer;\r\n        var lightmapIndex: any = data.lightmapIndex;\r\n        (lightmapIndex != null) && (render.lightmapIndex = lightmapIndex);\r\n        var lightmapScaleOffsetArray: any[] = data.lightmapScaleOffset;\r\n        (lightmapScaleOffsetArray) && (render.lightmapScaleOffset = new Vector4(lightmapScaleOffsetArray[0], lightmapScaleOffsetArray[1], lightmapScaleOffsetArray[2], lightmapScaleOffsetArray[3]));\r\n        (data.meshPath != undefined) && (this.meshFilter.sharedMesh = Loader.getRes(data.meshPath));\r\n        (data.enableRender != undefined) && (render._enabled = data.enableRender);\r\n        (data.receiveShadows != undefined) && (render.receiveShadow = data.receiveShadows);\r\n        (data.castShadow != undefined) && (render.castShadow = data.castShadow);\r\n        var materials: any[] = data.materials;\r\n        if (materials) {\r\n            var sharedMaterials: Material[] = render.sharedMaterials;\r\n            var materialCount: number = materials.length;\r\n            sharedMaterials.length = materialCount;\r\n            for (var i: number = 0; i < materialCount; i++) {\r\n                sharedMaterials[i] = Loader.getRes(materials[i].path);\r\n            }\r\n\r\n            render.sharedMaterials = sharedMaterials;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     * @internal\r\n     */\r\n    _cloneTo(destObject: any, rootSprite: Node, dstSprite: Node): void {\r\n        super._cloneTo(destObject, rootSprite, dstSprite);//父类函数在最后,组件应该最后赋值，否则获取材质默认值等相关函数会有问题\r\n    }\r\n\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _create(): Node {\r\n        return new Sprite3D();\r\n    }\r\n\r\n}\r\n\r\n","import { IClone } from \"../../../../utils/IClone\"\r\n\r\n/**\r\n * <code>Burst</code> 类用于粒子的爆裂描述。\r\n */\r\nexport class Burst implements IClone {\r\n\t/** 爆裂时间,单位为秒。*/\r\n\tprivate _time: number;\r\n\t/** 爆裂的最小数量。*/\r\n\tprivate _minCount: number;\r\n\t/** 爆裂的最大数量。*/\r\n\tprivate _maxCount: number;\r\n\r\n\t/**\r\n\t * 获取爆裂时间,单位为秒。\r\n\t * @return 爆裂时间,单位为秒。\r\n\t */\r\n\tget time(): number {\r\n\t\treturn this._time;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取爆裂的最小数量。\r\n\t * @return 爆裂的最小数量。\r\n\t */\r\n\tget minCount(): number {\r\n\t\treturn this._minCount;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取爆裂的最大数量。\r\n\t * @return 爆裂的最大数量。\r\n\t */\r\n\tget maxCount(): number {\r\n\t\treturn this._maxCount;\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>Burst</code> 实例。\r\n\t * @param time 爆裂时间,单位为秒。\r\n\t * @param minCount 爆裂的最小数量。\r\n\t * @param time 爆裂的最大数量。\r\n\t */\r\n\tconstructor(time: number = 0, minCount: number = 0, maxCount: number = 0) {\r\n\t\tthis._time = time;\r\n\t\tthis._minCount = minCount;\r\n\t\tthis._maxCount = maxCount;\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @param\tdestObject 克隆源。\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tvar destBurst: Burst = (<Burst>destObject);\r\n\t\tdestBurst._time = this._time;\r\n\t\tdestBurst._minCount = this._minCount;\r\n\t\tdestBurst._maxCount = this._maxCount;\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @return\t 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar destBurst: Burst = new Burst(this._time, this._minCount, this._maxCount);\r\n\t\tthis.cloneTo(destBurst);\r\n\t\treturn destBurst;\r\n\t}\r\n}\r\n\r\n","import { Gradient } from \"../../Gradient\"\r\nimport { IClone } from \"../../../../utils/IClone\"\r\nimport { Vector4 } from \"../../../../maths/Vector4\";\r\n\r\n/**\r\n * <code>GradientColor</code> 类用于创建渐变颜色。\r\n */\r\nexport class GradientColor implements IClone {\r\n\t/**\r\n\t * 通过固定颜色创建一个 <code>GradientColor</code> 实例。\r\n\t * @param constant 固定颜色。\r\n\t */\r\n\tstatic createByConstant(constant: Vector4): GradientColor {\r\n\t\tvar gradientColor: GradientColor = new GradientColor();\r\n\t\tgradientColor._type = 0;\r\n\t\tgradientColor._constant = constant;\r\n\t\treturn gradientColor;\r\n\t}\r\n\r\n\t/**\r\n\t * 通过渐变颜色创建一个 <code>GradientColor</code> 实例。\r\n\t * @param gradient 渐变色。\r\n\t */\r\n\tstatic createByGradient(gradient: Gradient): GradientColor {\r\n\t\tvar gradientColor: GradientColor = new GradientColor();\r\n\t\tgradientColor._type = 1;\r\n\t\tgradientColor._gradient = gradient;\r\n\t\treturn gradientColor;\r\n\t}\r\n\r\n\t/**\r\n\t * 通过随机双固定颜色创建一个 <code>GradientColor</code> 实例。\r\n\t * @param minConstant 最小固定颜色。\r\n\t * @param maxConstant 最大固定颜色。\r\n\t */\r\n\tstatic createByRandomTwoConstant(minConstant: Vector4, maxConstant: Vector4): GradientColor {\r\n\t\tvar gradientColor: GradientColor = new GradientColor();\r\n\t\tgradientColor._type = 2;\r\n\t\tgradientColor._constantMin = minConstant;\r\n\t\tgradientColor._constantMax = maxConstant;\r\n\t\treturn gradientColor;\r\n\t}\r\n\r\n\t/**\r\n\t * 通过随机双渐变颜色创建一个 <code>GradientColor</code> 实例。\r\n\t * @param minGradient 最小渐变颜色。\r\n\t * @param maxGradient 最大渐变颜色。\r\n\t */\r\n\tstatic createByRandomTwoGradient(minGradient: Gradient, maxGradient: Gradient): GradientColor {\r\n\t\tvar gradientColor: GradientColor = new GradientColor();\r\n\t\tgradientColor._type = 3;\r\n\t\tgradientColor._gradientMin = minGradient;\r\n\t\tgradientColor._gradientMax = maxGradient;\r\n\t\treturn gradientColor;\r\n\t}\r\n\r\n\tprivate _type: number = 0;\r\n\r\n\tprivate _constant: Vector4 = null;\r\n\tprivate _constantMin: Vector4 = null;\r\n\tprivate _constantMax: Vector4 = null;\r\n\tprivate _gradient: Gradient = null;\r\n\tprivate _gradientMin: Gradient = null;\r\n\tprivate _gradientMax: Gradient = null;\r\n\r\n\t/**\r\n\t *生命周期颜色类型,0为固定颜色模式,1渐变模式,2为随机双固定颜色模式,3随机双渐变模式。\r\n\t */\r\n\tget type(): number {\r\n\t\treturn this._type;\r\n\t}\r\n\r\n\t/**\r\n\t * 固定颜色。\r\n\t */\r\n\tget constant(): Vector4 {\r\n\t\treturn this._constant;\r\n\t}\r\n\r\n\t/**\r\n\t * 最小固定颜色。\r\n\t */\r\n\tget constantMin(): Vector4 {\r\n\t\treturn this._constantMin;\r\n\t}\r\n\r\n\t/**\r\n\t * 最大固定颜色。\r\n\t */\r\n\tget constantMax(): Vector4 {\r\n\t\treturn this._constantMax;\r\n\t}\r\n\r\n\t/**\r\n\t * 渐变颜色。\r\n\t */\r\n\tget gradient(): Gradient {\r\n\t\treturn this._gradient;\r\n\t}\r\n\r\n\t/**\r\n\t * 最小渐变颜色。\r\n\t */\r\n\tget gradientMin(): Gradient {\r\n\t\treturn this._gradientMin;\r\n\t}\r\n\r\n\t/**\r\n\t * 最大渐变颜色。\r\n\t */\r\n\tget gradientMax(): Gradient {\r\n\t\treturn this._gradientMax;\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>GradientColor,不允许new，请使用静态创建函数。</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @param\tdestObject 克隆源。\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tvar destGradientColor: GradientColor = (<GradientColor>destObject);\r\n\t\tdestGradientColor._type = this._type;\r\n\t\tthis._constant.cloneTo(destGradientColor._constant);\r\n\t\tthis._constantMin.cloneTo(destGradientColor._constantMin);\r\n\t\tthis._constantMax.cloneTo(destGradientColor._constantMax);\r\n\t\tthis._gradient.cloneTo(destGradientColor._gradient);\r\n\t\tthis._gradientMin.cloneTo(destGradientColor._gradientMin);\r\n\t\tthis._gradientMax.cloneTo(destGradientColor._gradientMax);\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @return\t 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar destGradientColor: GradientColor = new GradientColor();\r\n\t\tthis.cloneTo(destGradientColor);\r\n\t\treturn destGradientColor;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { GradientColor } from \"./GradientColor\";\r\n/**\r\n * <code>ColorOverLifetime</code> 类用于粒子的生命周期颜色。\r\n */\r\nexport class ColorOverLifetime {\r\n\tprivate _color: GradientColor;\r\n\r\n\t/**是否启用。*/\r\n\tenable: boolean;\r\n\r\n\t/**\r\n\t *获取颜色。\r\n\t */\r\n\tget color(): GradientColor {\r\n\t\treturn this._color;\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>ColorOverLifetime</code> 实例。\r\n\t */\r\n\tconstructor(color: GradientColor) {\r\n\t\tthis._color = color;\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @param\tdestObject 克隆源。\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tvar destColorOverLifetime: ColorOverLifetime = (<ColorOverLifetime>destObject);\r\n\t\tthis._color.cloneTo(destColorOverLifetime._color);\r\n\t\tdestColorOverLifetime.enable = this.enable;\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @return\t 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar destColor: GradientColor;\r\n\t\tswitch (this._color.type) {\r\n\t\t\tcase 0:\r\n\t\t\t\tdestColor = GradientColor.createByConstant(this._color.constant.clone());\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1:\r\n\t\t\t\tdestColor = GradientColor.createByGradient(this._color.gradient.clone());\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2:\r\n\t\t\t\tdestColor = GradientColor.createByRandomTwoConstant(this._color.constantMin.clone(), this._color.constantMax.clone());\r\n\t\t\t\tbreak;\r\n\t\t\tcase 3:\r\n\t\t\t\tdestColor = GradientColor.createByRandomTwoGradient(this._color.gradientMin.clone(), this._color.gradientMax.clone());\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\tvar destColorOverLifetime: ColorOverLifetime = new ColorOverLifetime(destColor);\r\n\t\tdestColorOverLifetime.enable = this.enable;\r\n\t\treturn destColorOverLifetime;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { IClone } from \"../../../../utils/IClone\";\r\nimport { Burst } from \"./Burst\";\r\n\r\n/**\r\n * <code>Emission</code> 类用于粒子发射器。\r\n */\r\nexport class Emission implements IClone {\r\n\t/** @internal */\r\n\tprivate _destroyed: boolean;\r\n\t/** @internal */\r\n\tprivate _emissionRate: number = 10;\r\n\r\n\tprivate _emissionRateOverDistance: number = 0;\r\n\r\n\t/**@internal 粒子的爆裂,不允许修改。*/\r\n\t_bursts: Burst[];\r\n\r\n\t/**是否启用。*/\r\n\tenable: boolean;\r\n\r\n\t/**\r\n\t * 设置粒子发射速率。\r\n\t * @param emissionRate 粒子发射速率 (个/秒)。\r\n\t */\r\n\tset emissionRate(value: number) {\r\n\t\tif (value < 0)\r\n\t\t\tthrow new Error(\"ParticleBaseShape:emissionRate value must large or equal than 0.\");\r\n\t\tthis._emissionRate = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取粒子发射速率。\r\n\t * @return 粒子发射速率 (个/秒)。\r\n\t */\r\n\tget emissionRate(): number {\r\n\t\treturn this._emissionRate;\r\n\t}\r\n\r\n\tget emissionRateOverDistance(): number {\r\n\t\treturn this._emissionRateOverDistance;\r\n\t}\r\n\r\n\tset emissionRateOverDistance(value: number) {\r\n\t\tvalue = Math.max(0, value);\r\n\t\tthis._emissionRateOverDistance = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取是否已销毁。\r\n\t * @return 是否已销毁。\r\n\t */\r\n\tget destroyed(): boolean {\r\n\t\treturn this._destroyed;\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>Emission</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tthis._destroyed = false;\r\n\t\tthis._bursts = [];\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t */\r\n\tdestroy(): void {\r\n\t\tthis._bursts = null;\r\n\t\tthis._destroyed = true;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取粒子爆裂个数。\r\n\t * @return 粒子爆裂个数。\r\n\t */\r\n\tgetBurstsCount(): number {\r\n\t\treturn this._bursts.length;\r\n\t}\r\n\r\n\t/**\r\n\t * 通过索引获取粒子爆裂。\r\n\t * @param index 爆裂索引。\r\n\t * @return 粒子爆裂。\r\n\t */\r\n\tgetBurstByIndex(index: number): Burst {\r\n\t\treturn this._bursts[index];\r\n\t}\r\n\r\n\t/**\r\n\t * 增加粒子爆裂。\r\n\t * @param burst 爆裂。\r\n\t */\r\n\taddBurst(burst: Burst): void {\r\n\t\tvar burstsCount: number = this._bursts.length;\r\n\t\tif (burstsCount > 0)\r\n\t\t\tfor (var i: number = 0; i < burstsCount; i++) {\r\n\t\t\t\tif (this._bursts[i].time > burst.time)\r\n\t\t\t\t\tthis._bursts.splice(i, 0, burst);\r\n\t\t\t}\r\n\t\tthis._bursts.push(burst);\r\n\t}\r\n\r\n\t/**\r\n\t * 移除粒子爆裂。\r\n\t * @param burst 爆裂。\r\n\t */\r\n\tremoveBurst(burst: Burst): void {\r\n\t\tvar index: number = this._bursts.indexOf(burst);\r\n\t\tif (index !== -1) {\r\n\t\t\tthis._bursts.splice(index, 1);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 通过索引移除粒子爆裂。\r\n\t * @param index 爆裂索引。\r\n\t */\r\n\tremoveBurstByIndex(index: number): void {\r\n\t\tthis._bursts.splice(index, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * 清空粒子爆裂。\r\n\t */\r\n\tclearBurst(): void {\r\n\t\tthis._bursts.length = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @param\tdestObject 克隆源。\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tvar destEmission: Emission = (<Emission>destObject);\r\n\r\n\t\tvar destBursts: Burst[] = destEmission._bursts;\r\n\t\tdestBursts.length = this._bursts.length;\r\n\t\tfor (var i: number = 0, n: number = this._bursts.length; i < n; i++) {\r\n\t\t\tvar destBurst: Burst = destBursts[i];\r\n\t\t\tif (destBurst)\r\n\t\t\t\tthis._bursts[i].cloneTo(destBurst);\r\n\t\t\telse\r\n\t\t\t\tdestBursts[i] = this._bursts[i].clone();\r\n\t\t}\r\n\r\n\t\tdestEmission._emissionRate = this._emissionRate;\r\n\t\tdestEmission._emissionRateOverDistance = this._emissionRateOverDistance;\r\n\t\tdestEmission.enable = this.enable;\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @return\t 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar destEmission: Emission = new Emission();\r\n\t\tthis.cloneTo(destEmission);\r\n\t\treturn destEmission;\r\n\t}\r\n}\r\n\r\n\r\n","import { GradientDataInt } from \"./GradientDataInt\";\r\nimport { IClone } from \"../../../../utils/IClone\"\r\n\r\n\r\n/**\r\n * <code>FrameOverTime</code> 类用于创建时间帧。\r\n */\r\nexport class FrameOverTime implements IClone {\r\n\t/**\r\n\t * 通过固定帧创建一个 <code>FrameOverTime</code> 实例。\r\n\t * @param\tconstant 固定帧。\r\n\t * @return 时间帧。\r\n\t */\r\n\tstatic createByConstant(constant: number = 0): FrameOverTime {\r\n\t\tvar rotationOverLifetime: FrameOverTime = new FrameOverTime();\r\n\t\trotationOverLifetime._type = 0;\r\n\t\trotationOverLifetime._constant = constant;\r\n\t\treturn rotationOverLifetime;\r\n\t}\r\n\r\n\t/**\r\n\t * 通过时间帧创建一个 <code>FrameOverTime</code> 实例。\r\n\t * @param\toverTime 时间帧。\r\n\t * @return 时间帧。\r\n\t */\r\n\tstatic createByOverTime(overTime: GradientDataInt): FrameOverTime {\r\n\t\tvar rotationOverLifetime: FrameOverTime = new FrameOverTime();\r\n\t\trotationOverLifetime._type = 1;\r\n\t\trotationOverLifetime._overTime = overTime;\r\n\t\treturn rotationOverLifetime;\r\n\t}\r\n\r\n\t/**\r\n\t * 通过随机双固定帧创建一个 <code>FrameOverTime</code> 实例。\r\n\t * @param\tconstantMin 最小固定帧。\r\n\t * @param\tconstantMax 最大固定帧。\r\n\t * @return 时间帧。\r\n\t */\r\n\tstatic createByRandomTwoConstant(constantMin: number = 0, constantMax: number = 0): FrameOverTime {\r\n\t\tvar rotationOverLifetime: FrameOverTime = new FrameOverTime();\r\n\t\trotationOverLifetime._type = 2;\r\n\t\trotationOverLifetime._constantMin = constantMin;\r\n\t\trotationOverLifetime._constantMax = constantMax;\r\n\t\treturn rotationOverLifetime;\r\n\t}\r\n\r\n\t/**\r\n\t * 通过随机双时间帧创建一个 <code>FrameOverTime</code> 实例。\r\n\t * @param\tgradientFrameMin 最小时间帧。\r\n\t * @param\tgradientFrameMax 最大时间帧。\r\n\t * @return 时间帧。\r\n\t */\r\n\tstatic createByRandomTwoOverTime(gradientFrameMin: GradientDataInt, gradientFrameMax: GradientDataInt): FrameOverTime {\r\n\t\tvar rotationOverLifetime: FrameOverTime = new FrameOverTime();\r\n\t\trotationOverLifetime._type = 3;\r\n\t\trotationOverLifetime._overTimeMin = gradientFrameMin;\r\n\t\trotationOverLifetime._overTimeMax = gradientFrameMax;\r\n\t\treturn rotationOverLifetime;\r\n\t}\r\n\r\n\tprivate _type: number = 0;\r\n\r\n\tprivate _constant: number = 0;\r\n\r\n\tprivate _overTime: GradientDataInt = null;\r\n\r\n\tprivate _constantMin: number = 0;\r\n\tprivate _constantMax: number = 0;\r\n\r\n\tprivate _overTimeMin: GradientDataInt = null;\r\n\tprivate _overTimeMax: GradientDataInt = null;\r\n\r\n\t/**\r\n\t *生命周期旋转类型,0常量模式，1曲线模式，2随机双常量模式，3随机双曲线模式。\r\n\t */\r\n\tget type(): number {\r\n\t\treturn this._type;\r\n\t}\r\n\r\n\t/**\r\n\t * 固定帧。\r\n\t */\r\n\tget constant(): number {\r\n\t\treturn this._constant;\r\n\t}\r\n\r\n\t/**\r\n\t * 时间帧。\r\n\t */\r\n\tget frameOverTimeData(): GradientDataInt {\r\n\t\treturn this._overTime;\r\n\t}\r\n\r\n\t/**\r\n\t * 最小固定帧。\r\n\t */\r\n\tget constantMin(): number {\r\n\t\treturn this._constantMin;\r\n\t}\r\n\r\n\t/**\r\n\t * 最大固定帧。\r\n\t */\r\n\tget constantMax(): number {\r\n\t\treturn this._constantMax;\r\n\t}\r\n\r\n\t/**\r\n\t * 最小时间帧。\r\n\t */\r\n\tget frameOverTimeDataMin(): GradientDataInt {\r\n\t\treturn this._overTimeMin;\r\n\t}\r\n\r\n\t/**\r\n\t * 最大时间帧。\r\n\t */\r\n\tget frameOverTimeDataMax(): GradientDataInt {\r\n\t\treturn this._overTimeMax;\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>FrameOverTime,不允许new，请使用静态创建函数。</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @param\tdestObject 克隆源。\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tvar destFrameOverTime: FrameOverTime = (<FrameOverTime>destObject);\r\n\t\tdestFrameOverTime._type = this._type;\r\n\t\tdestFrameOverTime._constant = this._constant;\r\n\t\t(this._overTime) && (this._overTime.cloneTo(destFrameOverTime._overTime));\r\n\t\tdestFrameOverTime._constantMin = this._constantMin;\r\n\t\tdestFrameOverTime._constantMax = this._constantMax;\r\n\t\t(this._overTimeMin) && (this._overTimeMin.cloneTo(destFrameOverTime._overTimeMin));\r\n\t\t(this._overTimeMax) && (this._overTimeMax.cloneTo(destFrameOverTime._overTimeMax));\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @return\t 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar destFrameOverTime: FrameOverTime = new FrameOverTime();\r\n\t\tthis.cloneTo(destFrameOverTime);\r\n\t\treturn destFrameOverTime;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { GradientDataNumber } from \"./GradientDataNumber\";\r\nimport { IClone } from \"../../../../utils/IClone\"\r\nimport { Vector3 } from \"../../../../maths/Vector3\";\r\n\r\n\r\n/**\r\n * <code>GradientRotation</code> 类用于创建渐变角速度。\r\n */\r\nexport class GradientAngularVelocity implements IClone {\r\n\t/**\r\n\t * 通过固定角速度创建一个 <code>GradientAngularVelocity</code> 实例。\r\n\t * @param\tconstant 固定角速度。\r\n\t * @return 渐变角速度。\r\n\t */\r\n\tstatic createByConstant(constant: number): GradientAngularVelocity {\r\n\t\tvar gradientAngularVelocity: GradientAngularVelocity = new GradientAngularVelocity();\r\n\t\tgradientAngularVelocity._type = 0;\r\n\t\tgradientAngularVelocity._separateAxes = false;\r\n\t\tgradientAngularVelocity._constant = constant;\r\n\t\treturn gradientAngularVelocity;\r\n\t}\r\n\r\n\t/**\r\n\t * 通过分轴固定角速度创建一个 <code>GradientAngularVelocity</code> 实例。\r\n\t * @param\tseparateConstant 分轴固定角速度。\r\n\t * @return 渐变角速度。\r\n\t */\r\n\tstatic createByConstantSeparate(separateConstant: Vector3): GradientAngularVelocity {\r\n\t\tvar gradientAngularVelocity: GradientAngularVelocity = new GradientAngularVelocity();\r\n\t\tgradientAngularVelocity._type = 0;\r\n\t\tgradientAngularVelocity._separateAxes = true;\r\n\t\tgradientAngularVelocity._constantSeparate = separateConstant;\r\n\t\treturn gradientAngularVelocity;\r\n\t}\r\n\r\n\t/**\r\n\t * 通过渐变角速度创建一个 <code>GradientAngularVelocity</code> 实例。\r\n\t * @param\tgradient 渐变角速度。\r\n\t * @return 渐变角速度。\r\n\t */\r\n\tstatic createByGradient(gradient: GradientDataNumber): GradientAngularVelocity {\r\n\t\tvar gradientAngularVelocity: GradientAngularVelocity = new GradientAngularVelocity();\r\n\t\tgradientAngularVelocity._type = 1;\r\n\t\tgradientAngularVelocity._separateAxes = false;\r\n\t\tgradientAngularVelocity._gradient = gradient;\r\n\t\treturn gradientAngularVelocity;\r\n\t}\r\n\r\n\t/**\r\n\t * 通过分轴渐变角速度创建一个 <code>GradientAngularVelocity</code> 实例。\r\n\t * @param\tgradientX X轴渐变角速度。\r\n\t * @param\tgradientY Y轴渐变角速度。\r\n\t * @param\tgradientZ Z轴渐变角速度。\r\n\t * @return  渐变角速度。\r\n\t */\r\n\tstatic createByGradientSeparate(gradientX: GradientDataNumber, gradientY: GradientDataNumber, gradientZ: GradientDataNumber): GradientAngularVelocity {\r\n\t\tvar gradientAngularVelocity: GradientAngularVelocity = new GradientAngularVelocity();\r\n\t\tgradientAngularVelocity._type = 1;\r\n\t\tgradientAngularVelocity._separateAxes = true;\r\n\t\tgradientAngularVelocity._gradientX = gradientX;\r\n\t\tgradientAngularVelocity._gradientY = gradientY;\r\n\t\tgradientAngularVelocity._gradientZ = gradientZ;\r\n\t\treturn gradientAngularVelocity;\r\n\t}\r\n\r\n\t/**\r\n\t * 通过随机双固定角速度创建一个 <code>GradientAngularVelocity</code> 实例。\r\n\t * @param\tconstantMin 最小固定角速度。\r\n\t * @param\tconstantMax 最大固定角速度。\r\n\t * @return 渐变角速度。\r\n\t */\r\n\tstatic createByRandomTwoConstant(constantMin: number, constantMax: number): GradientAngularVelocity {\r\n\t\tvar gradientAngularVelocity: GradientAngularVelocity = new GradientAngularVelocity();\r\n\t\tgradientAngularVelocity._type = 2;\r\n\t\tgradientAngularVelocity._separateAxes = false;\r\n\t\tgradientAngularVelocity._constantMin = constantMin;\r\n\t\tgradientAngularVelocity._constantMax = constantMax;\r\n\t\treturn gradientAngularVelocity;\r\n\t}\r\n\r\n\t/**\r\n\t * 通过随机分轴双固定角速度创建一个 <code>GradientAngularVelocity</code> 实例。\r\n\t * @param\tseparateConstantMin  最小分轴固定角速度。\r\n\t * @param\tseparateConstantMax  最大分轴固定角速度。\r\n\t * @return  渐变角速度。\r\n\t */\r\n\tstatic createByRandomTwoConstantSeparate(separateConstantMin: Vector3, separateConstantMax: Vector3): GradientAngularVelocity {\r\n\t\tvar gradientAngularVelocity: GradientAngularVelocity = new GradientAngularVelocity();\r\n\t\tgradientAngularVelocity._type = 2;\r\n\t\tgradientAngularVelocity._separateAxes = true;\r\n\t\tgradientAngularVelocity._constantMinSeparate = separateConstantMin;\r\n\t\tgradientAngularVelocity._constantMaxSeparate = separateConstantMax;\r\n\t\treturn gradientAngularVelocity;\r\n\t}\r\n\r\n\t/**\r\n\t * 通过随机双渐变角速度创建一个 <code>GradientAngularVelocity</code> 实例。\r\n\t * @param\tgradientMin 最小渐变角速度。\r\n\t * @param\tgradientMax 最大渐变角速度。\r\n\t * @return  渐变角速度。\r\n\t */\r\n\tstatic createByRandomTwoGradient(gradientMin: GradientDataNumber, gradientMax: GradientDataNumber): GradientAngularVelocity {\r\n\t\tvar gradientAngularVelocity: GradientAngularVelocity = new GradientAngularVelocity();\r\n\t\tgradientAngularVelocity._type = 3;\r\n\t\tgradientAngularVelocity._separateAxes = false;\r\n\t\tgradientAngularVelocity._gradientMin = gradientMin;\r\n\t\tgradientAngularVelocity._gradientMax = gradientMax;\r\n\t\treturn gradientAngularVelocity;\r\n\t}\r\n\r\n\t/**\r\n\t * 通过分轴随机双渐变角速度创建一个 <code>GradientAngularVelocity</code> 实例。\r\n\t * @param\tgradientXMin  最小X轴渐变角速度。\r\n\t * @param\tgradientXMax  最大X轴渐变角速度。\r\n\t * @param\tgradientYMin  最小Y轴渐变角速度。\r\n\t * @param\tgradientYMax  最大Y轴渐变角速度。\r\n\t * @param\tgradientZMin  最小Z轴渐变角速度。\r\n\t * @param\tgradientZMax  最大Z轴渐变角速度。\r\n\t * @return  渐变角速度。\r\n\t */\r\n\tstatic createByRandomTwoGradientSeparate(gradientXMin: GradientDataNumber, gradientXMax: GradientDataNumber, gradientYMin: GradientDataNumber, gradientYMax: GradientDataNumber, gradientZMin: GradientDataNumber, gradientZMax: GradientDataNumber, gradientWMin: GradientDataNumber, gradientWMax: GradientDataNumber): GradientAngularVelocity {\r\n\t\tvar gradientAngularVelocity: GradientAngularVelocity = new GradientAngularVelocity();\r\n\t\tgradientAngularVelocity._type = 3;\r\n\t\tgradientAngularVelocity._separateAxes = true;\r\n\t\tgradientAngularVelocity._gradientXMin = gradientXMin;\r\n\t\tgradientAngularVelocity._gradientXMax = gradientXMax;\r\n\t\tgradientAngularVelocity._gradientYMin = gradientYMin;\r\n\t\tgradientAngularVelocity._gradientYMax = gradientYMax;\r\n\t\tgradientAngularVelocity._gradientZMin = gradientZMin;\r\n\t\tgradientAngularVelocity._gradientZMax = gradientZMax;\r\n\t\tgradientAngularVelocity._gradientWMin = gradientWMin;\r\n\t\tgradientAngularVelocity._gradientWMax = gradientWMax;\r\n\t\treturn gradientAngularVelocity;\r\n\t}\r\n\r\n\tprivate _type: number = 0;\r\n\tprivate _separateAxes: boolean = false;\r\n\r\n\tprivate _constant: number = 0;\r\n\tprivate _constantSeparate: Vector3 = null;\r\n\r\n\tprivate _gradient: GradientDataNumber = null;\r\n\tprivate _gradientX: GradientDataNumber = null;\r\n\tprivate _gradientY: GradientDataNumber = null;\r\n\tprivate _gradientZ: GradientDataNumber = null;\r\n\tprivate _gradientW: GradientDataNumber = null;\r\n\r\n\tprivate _constantMin: number = 0;\r\n\tprivate _constantMax: number = 0;\r\n\tprivate _constantMinSeparate: Vector3 = null;\r\n\tprivate _constantMaxSeparate: Vector3 = null;\r\n\r\n\tprivate _gradientMin: GradientDataNumber = null;\r\n\tprivate _gradientMax: GradientDataNumber = null;\r\n\tprivate _gradientXMin: GradientDataNumber = null;\r\n\tprivate _gradientXMax: GradientDataNumber = null;\r\n\tprivate _gradientYMin: GradientDataNumber = null;\r\n\tprivate _gradientYMax: GradientDataNumber = null;\r\n\tprivate _gradientZMin: GradientDataNumber = null;\r\n\tprivate _gradientZMax: GradientDataNumber = null;\r\n\tprivate _gradientWMin: GradientDataNumber = null;\r\n\tprivate _gradientWMax: GradientDataNumber = null;\r\n\r\n\t/**\r\n\t *生命周期角速度类型,0常量模式，1曲线模式，2随机双常量模式，3随机双曲线模式。\r\n\t */\r\n\tget type(): number {\r\n\t\treturn this._type;\r\n\t}\r\n\r\n\t/**\r\n\t *是否分轴。\r\n\t */\r\n\tget separateAxes(): boolean {\r\n\t\treturn this._separateAxes;\r\n\t}\r\n\r\n\t/**\r\n\t * 固定角速度。\r\n\t */\r\n\tget constant(): number {\r\n\t\treturn this._constant;\r\n\t}\r\n\r\n\t/**\r\n\t * 分轴固定角速度。\r\n\t */\r\n\tget constantSeparate(): Vector3 {\r\n\t\treturn this._constantSeparate;\r\n\t}\r\n\r\n\t/**\r\n\t * 渐变角速度。\r\n\t */\r\n\tget gradient(): GradientDataNumber {\r\n\t\treturn this._gradient;\r\n\t}\r\n\r\n\t/**\r\n\t * 渐变角角速度X。\r\n\t */\r\n\tget gradientX(): GradientDataNumber {\r\n\t\treturn this._gradientX;\r\n\t}\r\n\r\n\t/**\r\n\t * 渐变角速度Y。\r\n\t */\r\n\tget gradientY(): GradientDataNumber {\r\n\t\treturn this._gradientY;\r\n\t}\r\n\r\n\t/**\r\n\t *渐变角速度Z。\r\n\t */\r\n\tget gradientZ(): GradientDataNumber {\r\n\t\treturn this._gradientZ;\r\n\t}\r\n\r\n\t/**\r\n\t *渐变角速度Z。\r\n\t */\r\n\tget gradientW(): GradientDataNumber {\r\n\t\treturn this._gradientW;\r\n\t}\r\n\r\n\t/**\r\n\t * 最小随机双固定角速度。\r\n\t */\r\n\tget constantMin(): number {\r\n\t\treturn this._constantMin;\r\n\t}\r\n\r\n\t/**\r\n\t * 最大随机双固定角速度。\r\n\t */\r\n\tget constantMax(): number {\r\n\t\treturn this._constantMax;\r\n\t}\r\n\r\n\t/**\r\n\t * 最小分轴随机双固定角速度。\r\n\t */\r\n\tget constantMinSeparate(): Vector3 {\r\n\t\treturn this._constantMinSeparate;\r\n\t}\r\n\r\n\t/**\r\n\t * 最大分轴随机双固定角速度。\r\n\t */\r\n\tget constantMaxSeparate(): Vector3 {\r\n\t\treturn this._constantMaxSeparate;\r\n\t}\r\n\r\n\t/**\r\n\t *最小渐变角速度。\r\n\t */\r\n\tget gradientMin(): GradientDataNumber {\r\n\t\treturn this._gradientMin;\r\n\t}\r\n\r\n\t/**\r\n\t * 最大渐变角速度。\r\n\t */\r\n\tget gradientMax(): GradientDataNumber {\r\n\t\treturn this._gradientMax;\r\n\t}\r\n\r\n\t/**\r\n\t * 最小渐变角速度X。\r\n\t */\r\n\tget gradientXMin(): GradientDataNumber {\r\n\t\treturn this._gradientXMin;\r\n\t}\r\n\r\n\t/**\r\n\t * 最大渐变角速度X。\r\n\t */\r\n\tget gradientXMax(): GradientDataNumber {\r\n\t\treturn this._gradientXMax;\r\n\t}\r\n\r\n\t/**\r\n\t * 最小渐变角速度Y。\r\n\t */\r\n\tget gradientYMin(): GradientDataNumber {\r\n\t\treturn this._gradientYMin;\r\n\t}\r\n\r\n\t/**\r\n\t *最大渐变角速度Y。\r\n\t */\r\n\tget gradientYMax(): GradientDataNumber {\r\n\t\treturn this._gradientYMax;\r\n\t}\r\n\r\n\t/**\r\n\t * 最小渐变角速度Z。\r\n\t */\r\n\tget gradientZMin(): GradientDataNumber {\r\n\t\treturn this._gradientZMin;\r\n\t}\r\n\r\n\t/**\r\n\t * 最大渐变角速度Z。\r\n\t */\r\n\tget gradientZMax(): GradientDataNumber {\r\n\t\treturn this._gradientZMax;\r\n\t}\r\n\r\n\t/**\r\n\t * 最小渐变角速度Z。\r\n\t */\r\n\tget gradientWMin(): GradientDataNumber {\r\n\t\treturn this._gradientWMin;\r\n\t}\r\n\r\n\t/**\r\n\t * 最大渐变角速度Z。\r\n\t */\r\n\tget gradientWMax(): GradientDataNumber {\r\n\t\treturn this._gradientWMax;\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>GradientAngularVelocity,不允许new，请使用静态创建函数。</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @param\tdestObject 克隆源。\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tvar destGradientAngularVelocity: GradientAngularVelocity = (<GradientAngularVelocity>destObject);\r\n\t\tdestGradientAngularVelocity._type = this._type;\r\n\t\tdestGradientAngularVelocity._separateAxes = this._separateAxes;\r\n\t\tdestGradientAngularVelocity._constant = this._constant;\r\n\t\tthis._constantSeparate.cloneTo(destGradientAngularVelocity._constantSeparate);\r\n\t\tthis._gradient.cloneTo(destGradientAngularVelocity._gradient);\r\n\t\tthis._gradientX.cloneTo(destGradientAngularVelocity._gradientX);\r\n\t\tthis._gradientY.cloneTo(destGradientAngularVelocity._gradientY);\r\n\t\tthis._gradientZ.cloneTo(destGradientAngularVelocity._gradientZ);\r\n\t\tdestGradientAngularVelocity._constantMin = this._constantMin;\r\n\t\tdestGradientAngularVelocity._constantMax = this._constantMax;\r\n\t\tthis._constantMinSeparate.cloneTo(destGradientAngularVelocity._constantMinSeparate);\r\n\t\tthis._constantMaxSeparate.cloneTo(destGradientAngularVelocity._constantMaxSeparate);\r\n\t\tthis._gradientMin.cloneTo(destGradientAngularVelocity._gradientMin);\r\n\t\tthis._gradientMax.cloneTo(destGradientAngularVelocity._gradientMax);\r\n\t\tthis._gradientXMin.cloneTo(destGradientAngularVelocity._gradientXMin);\r\n\t\tthis._gradientXMax.cloneTo(destGradientAngularVelocity._gradientXMax);\r\n\t\tthis._gradientYMin.cloneTo(destGradientAngularVelocity._gradientYMin);\r\n\t\tthis._gradientYMax.cloneTo(destGradientAngularVelocity._gradientYMax);\r\n\t\tthis._gradientZMin.cloneTo(destGradientAngularVelocity._gradientZMin);\r\n\t\tthis._gradientZMax.cloneTo(destGradientAngularVelocity._gradientZMax);\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @return\t 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar destGradientAngularVelocity: GradientAngularVelocity = new GradientAngularVelocity();\r\n\t\tthis.cloneTo(destGradientAngularVelocity);\r\n\t\treturn destGradientAngularVelocity;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { IClone } from \"../../../../utils/IClone\"\r\n\r\n/**\r\n * <code>GradientDataInt</code> 类用于创建整形渐变。\r\n */\r\nexport class GradientDataInt implements IClone {\r\n\tprivate _currentLength: number = 0;\r\n\t/**@internal 开发者禁止修改。*/\r\n\t_elements: Float32Array;//TODO:是否用int\r\n\r\n\t/**整形渐变数量。*/\r\n\tget gradientCount(): number {\r\n\t\treturn this._currentLength / 2;\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>GradientDataInt</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tthis._elements = new Float32Array(8);\r\n\t}\r\n\r\n\t/**\r\n\t * 增加整形渐变。\r\n\t * @param\tkey 生命周期，范围为0到1。\r\n\t * @param\tvalue 整形值。\r\n\t */\r\n\tadd(key: number, value: number): void {\r\n\t\tif (this._currentLength < 8) {\r\n\t\t\tif ((this._currentLength === 6) && ((key !== 1))) {\r\n\t\t\t\tkey = 1;\r\n\t\t\t\tconsole.log(\"Warning:the forth key is  be force set to 1.\");\r\n\t\t\t}\r\n\r\n\t\t\tthis._elements[this._currentLength++] = key;\r\n\t\t\tthis._elements[this._currentLength++] = value;\r\n\t\t} else {\r\n\t\t\tconsole.log(\"Warning:data count must lessEqual than 4\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @param\tdestObject 克隆源。\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tvar destGradientDataInt: GradientDataInt = <GradientDataInt>destObject;\r\n\t\tdestGradientDataInt._currentLength = this._currentLength;\r\n\t\tvar destElements: Float32Array = destGradientDataInt._elements;\r\n\t\tfor (var i: number = 0, n: number = this._elements.length; i < n; i++) {\r\n\t\t\tdestElements[i] = this._elements[i];\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @return\t 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar destGradientDataInt: GradientDataInt = new GradientDataInt();\r\n\t\tthis.cloneTo(destGradientDataInt);\r\n\t\treturn destGradientDataInt;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { IClone } from \"../../../../utils/IClone\"\r\n\r\n/**\r\n * <code>GradientDataNumber</code> 类用于创建浮点渐变。\r\n */\r\nexport class GradientDataNumber implements IClone {\r\n\tprivate _currentLength: number = 0;\r\n\t/**@internal 开发者禁止修改。*/\r\n\t_elements: Float32Array;\r\n\r\n\t/**渐变浮点数量。*/\r\n\tget gradientCount(): number {\r\n\t\treturn this._currentLength / 2;\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>GradientDataNumber</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tthis._elements = new Float32Array(8);\r\n\t}\r\n\r\n\t/**\r\n\t * 增加浮点渐变。\r\n\t * @param\tkey 生命周期，范围为0到1。\r\n\t * @param\tvalue 浮点值。\r\n\t */\r\n\tadd(key: number, value: number): void {\r\n\t\tif (this._currentLength < 8) {\r\n\r\n\t\t\tif ((this._currentLength === 6) && ((key !== 1))) {\r\n\t\t\t\tkey = 1;\r\n\t\t\t\tconsole.log(\"GradientDataNumber warning:the forth key is  be force set to 1.\");\r\n\t\t\t}\r\n\r\n\t\t\tthis._elements[this._currentLength++] = key;\r\n\t\t\tthis._elements[this._currentLength++] = value;\r\n\t\t} else {\r\n\t\t\tconsole.log(\"GradientDataNumber warning:data count must lessEqual than 4\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 通过索引获取键。\r\n\t * @param\tindex 索引。\r\n\t * @return\tvalue 键。\r\n\t */\r\n\tgetKeyByIndex(index: number): number {\r\n\t\treturn this._elements[index * 2];\r\n\t}\r\n\r\n\t/**\r\n\t * 通过索引获取值。\r\n\t * @param\tindex 索引。\r\n\t * @return\tvalue 值。\r\n\t */\r\n\tgetValueByIndex(index: number): number {\r\n\t\treturn this._elements[index * 2 + 1];\r\n\t}\r\n\r\n\t/**\r\n\t * 获取平均值。\r\n\t */\r\n\tgetAverageValue(): number {\r\n\t\tvar total: number = 0;\r\n\t\tvar count: number = 0;\r\n\t\tfor (var i: number = 0, n: number = this._currentLength - 2; i < n; i += 2) {\r\n\t\t\tvar subValue: number = this._elements[i + 1];\r\n\t\t\tsubValue += this._elements[i + 3];\r\n\t\t\tsubValue = subValue * (this._elements[i + 2] - this._elements[i]);\r\n\t\t\ttotal += subValue;\r\n\t\t\tcount++;\r\n\t\t}\r\n\t\treturn total / count;\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @param\tdestObject 克隆源。\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tvar destGradientDataNumber: GradientDataNumber = <GradientDataNumber>destObject;\r\n\t\tdestGradientDataNumber._currentLength = this._currentLength;\r\n\t\tvar destElements: Float32Array = destGradientDataNumber._elements;\r\n\t\tfor (var i: number = 0, n: number = this._elements.length; i < n; i++)\r\n\t\t\tdestElements[i] = this._elements[i];\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @return\t 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar destGradientDataNumber: GradientDataNumber = new GradientDataNumber();\r\n\t\tthis.cloneTo(destGradientDataNumber);\r\n\t\treturn destGradientDataNumber;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { GradientDataNumber } from \"./GradientDataNumber\";\r\nimport { IClone } from \"../../../../utils/IClone\"\r\nimport { Vector3 } from \"../../../../maths/Vector3\";\r\n\r\n/**\r\n * <code>GradientSize</code> 类用于创建渐变尺寸。\r\n */\r\nexport class GradientSize implements IClone {\r\n\t/**\r\n\t * 通过渐变尺寸创建一个 <code>GradientSize</code> 实例。\r\n\t * @param\tgradient 渐变尺寸。\r\n\t * @return  渐变尺寸。\r\n\t */\r\n\tstatic createByGradient(gradient: GradientDataNumber): GradientSize {\r\n\t\tvar gradientSize: GradientSize = new GradientSize();\r\n\t\tgradientSize._type = 0;\r\n\t\tgradientSize._separateAxes = false;\r\n\t\tgradientSize._gradient = gradient;\r\n\t\treturn gradientSize;\r\n\t}\r\n\r\n\t/**\r\n\t * 通过分轴渐变尺寸创建一个 <code>GradientSize</code> 实例。\r\n\t * @param\tgradientX 渐变尺寸X。\r\n\t * @param\tgradientY 渐变尺寸Y。\r\n\t * @param\tgradientZ 渐变尺寸Z。\r\n\t * @return  渐变尺寸。\r\n\t */\r\n\tstatic createByGradientSeparate(gradientX: GradientDataNumber, gradientY: GradientDataNumber, gradientZ: GradientDataNumber): GradientSize {\r\n\t\tvar gradientSize: GradientSize = new GradientSize();\r\n\t\tgradientSize._type = 0;\r\n\t\tgradientSize._separateAxes = true;\r\n\t\tgradientSize._gradientX = gradientX;\r\n\t\tgradientSize._gradientY = gradientY;\r\n\t\tgradientSize._gradientZ = gradientZ;\r\n\t\treturn gradientSize;\r\n\t}\r\n\r\n\t/**\r\n\t * 通过随机双固定尺寸创建一个 <code>GradientSize</code> 实例。\r\n\t * @param\tconstantMin 最小固定尺寸。\r\n\t * @param\tconstantMax 最大固定尺寸。\r\n\t * @return 渐变尺寸。\r\n\t */\r\n\tstatic createByRandomTwoConstant(constantMin: number, constantMax: number): GradientSize {\r\n\t\tvar gradientSize: GradientSize = new GradientSize();\r\n\t\tgradientSize._type = 1;\r\n\t\tgradientSize._separateAxes = false;\r\n\t\tgradientSize._constantMin = constantMin;\r\n\t\tgradientSize._constantMax = constantMax;\r\n\t\treturn gradientSize;\r\n\t}\r\n\r\n\t/**\r\n\t * 通过分轴随机双固定尺寸创建一个 <code>GradientSize</code> 实例。\r\n\t * @param\tconstantMinSeparate 分轴最小固定尺寸.\r\n\t * @param\tconstantMaxSeparate 分轴最大固定尺寸。\r\n\t * @return   渐变尺寸。\r\n\t */\r\n\tstatic createByRandomTwoConstantSeparate(constantMinSeparate: Vector3, constantMaxSeparate: Vector3): GradientSize {\r\n\t\tvar gradientSize: GradientSize = new GradientSize();\r\n\t\tgradientSize._type = 1;\r\n\t\tgradientSize._separateAxes = true;\r\n\t\tgradientSize._constantMinSeparate = constantMinSeparate;\r\n\t\tgradientSize._constantMaxSeparate = constantMaxSeparate;\r\n\t\treturn gradientSize;\r\n\t}\r\n\r\n\t/**\r\n\t * 通过随机双渐变尺寸创建一个 <code>GradientSize</code> 实例。\r\n\t * @param\tgradientMin 最小渐变尺寸。\r\n\t * @param\tgradientMax 最大渐变尺寸。\r\n\t * @return 渐变尺寸。\r\n\t */\r\n\tstatic createByRandomTwoGradient(gradientMin: GradientDataNumber, gradientMax: GradientDataNumber): GradientSize {\r\n\t\tvar gradientSize: GradientSize = new GradientSize();\r\n\t\tgradientSize._type = 2;\r\n\t\tgradientSize._separateAxes = false;\r\n\t\tgradientSize._gradientMin = gradientMin;\r\n\t\tgradientSize._gradientMax = gradientMax;\r\n\t\treturn gradientSize;\r\n\t}\r\n\r\n\t/**\r\n\t * 通过分轴随机双渐变尺寸创建一个 <code>GradientSize</code> 实例。\r\n\t * @param\tgradientXMin X轴最小渐变尺寸。\r\n\t * @param\tgradientXMax X轴最大渐变尺寸。\r\n\t * @param\tgradientYMin Y轴最小渐变尺寸。\r\n\t * @param\tgradientYMax Y轴最大渐变尺寸。\r\n\t * @param\tgradientZMin Z轴最小渐变尺寸。\r\n\t * @param\tgradientZMax Z轴最大渐变尺寸。\r\n\t * @return  渐变尺寸。\r\n\t */\r\n\tstatic createByRandomTwoGradientSeparate(gradientXMin: GradientDataNumber, gradientXMax: GradientDataNumber, gradientYMin: GradientDataNumber, gradientYMax: GradientDataNumber, gradientZMin: GradientDataNumber, gradientZMax: GradientDataNumber): GradientSize {\r\n\t\tvar gradientSize: GradientSize = new GradientSize();\r\n\t\tgradientSize._type = 2;\r\n\t\tgradientSize._separateAxes = true;\r\n\t\tgradientSize._gradientXMin = gradientXMin;\r\n\t\tgradientSize._gradientXMax = gradientXMax;\r\n\t\tgradientSize._gradientYMin = gradientYMin;\r\n\t\tgradientSize._gradientYMax = gradientYMax;\r\n\t\tgradientSize._gradientZMin = gradientZMin;\r\n\t\tgradientSize._gradientZMax = gradientZMax;\r\n\t\treturn gradientSize;\r\n\t}\r\n\r\n\tprivate _type: number = 0;\r\n\tprivate _separateAxes: boolean = false;\r\n\r\n\tprivate _gradient: GradientDataNumber = null;\r\n\tprivate _gradientX: GradientDataNumber = null;\r\n\tprivate _gradientY: GradientDataNumber = null;\r\n\tprivate _gradientZ: GradientDataNumber = null;\r\n\r\n\r\n\tprivate _constantMin: number = 0;\r\n\tprivate _constantMax: number = 0;\r\n\tprivate _constantMinSeparate: Vector3 = null;\r\n\tprivate _constantMaxSeparate: Vector3 = null;\r\n\r\n\r\n\tprivate _gradientMin: GradientDataNumber = null;\r\n\tprivate _gradientMax: GradientDataNumber = null;\r\n\tprivate _gradientXMin: GradientDataNumber = null;\r\n\tprivate _gradientXMax: GradientDataNumber = null;\r\n\tprivate _gradientYMin: GradientDataNumber = null;\r\n\tprivate _gradientYMax: GradientDataNumber = null;\r\n\tprivate _gradientZMin: GradientDataNumber = null;\r\n\tprivate _gradientZMax: GradientDataNumber = null;\r\n\r\n\t/**\r\n\t *生命周期尺寸类型，0曲线模式，1随机双常量模式，2随机双曲线模式。\r\n\t */\r\n\tget type(): number {\r\n\t\treturn this._type;\r\n\t}\r\n\r\n\t/**\r\n\t *是否分轴。\r\n\t */\r\n\tget separateAxes(): boolean {\r\n\t\treturn this._separateAxes;\r\n\t}\r\n\r\n\t/**\r\n\t * 渐变尺寸。\r\n\t */\r\n\tget gradient(): GradientDataNumber {\r\n\t\treturn this._gradient;\r\n\t}\r\n\r\n\t/**\r\n\t * 渐变尺寸X。\r\n\t */\r\n\tget gradientX(): GradientDataNumber {\r\n\t\treturn this._gradientX;\r\n\t}\r\n\r\n\t/**\r\n\t * 渐变尺寸Y。\r\n\t */\r\n\tget gradientY(): GradientDataNumber {\r\n\t\treturn this._gradientY;\r\n\t}\r\n\r\n\t/**\r\n\t *渐变尺寸Z。\r\n\t */\r\n\tget gradientZ(): GradientDataNumber {\r\n\t\treturn this._gradientZ;\r\n\t}\r\n\r\n\t/**\r\n\t *最小随机双固定尺寸。\r\n\t */\r\n\tget constantMin(): number {\r\n\t\treturn this._constantMin;\r\n\t}\r\n\r\n\t/**\r\n\t * 最大随机双固定尺寸。\r\n\t */\r\n\tget constantMax(): number {\r\n\t\treturn this._constantMax;\r\n\t}\r\n\r\n\t/**\r\n\t * 最小分轴随机双固定尺寸。\r\n\t */\r\n\tget constantMinSeparate(): Vector3 {\r\n\t\treturn this._constantMinSeparate;\r\n\t}\r\n\r\n\t/**\r\n\t *  最小分轴随机双固定尺寸。\r\n\t */\r\n\tget constantMaxSeparate(): Vector3 {\r\n\t\treturn this._constantMaxSeparate;\r\n\t}\r\n\r\n\t/**\r\n\t *渐变最小尺寸。\r\n\t */\r\n\tget gradientMin(): GradientDataNumber {\r\n\t\treturn this._gradientMin;\r\n\t}\r\n\r\n\t/**\r\n\t * 渐变最大尺寸。\r\n\t */\r\n\tget gradientMax(): GradientDataNumber {\r\n\t\treturn this._gradientMax;\r\n\t}\r\n\r\n\t/**\r\n\t * 渐变最小尺寸X。\r\n\t */\r\n\tget gradientXMin(): GradientDataNumber {\r\n\t\treturn this._gradientXMin;\r\n\t}\r\n\r\n\t/**\r\n\t * 渐变最大尺寸X。\r\n\t */\r\n\tget gradientXMax(): GradientDataNumber {\r\n\t\treturn this._gradientXMax;\r\n\t}\r\n\r\n\t/**\r\n\t * 渐变最小尺寸Y。\r\n\t */\r\n\tget gradientYMin(): GradientDataNumber {\r\n\t\treturn this._gradientYMin;\r\n\t}\r\n\r\n\t/**\r\n\t *渐变最大尺寸Y。\r\n\t */\r\n\tget gradientYMax(): GradientDataNumber {\r\n\t\treturn this._gradientYMax;\r\n\t}\r\n\r\n\t/**\r\n\t * 渐变最小尺寸Z。\r\n\t */\r\n\tget gradientZMin(): GradientDataNumber {\r\n\t\treturn this._gradientZMin;\r\n\t}\r\n\r\n\t/**\r\n\t * 渐变最大尺寸Z。\r\n\t */\r\n\tget gradientZMax(): GradientDataNumber {\r\n\t\treturn this._gradientZMax;\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>GradientSize,不允许new，请使用静态创建函数。</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t}\r\n\r\n\t/**\r\n\t * 获取最大尺寸。\r\n\t */\r\n\tgetMaxSizeInGradient(meshMode: boolean = false): number {\r\n\t\tvar i: number, n: number;\r\n\t\tvar maxSize: number = -Number.MAX_VALUE;\r\n\t\tswitch (this._type) {\r\n\t\t\tcase 0:\r\n\t\t\t\tif (this._separateAxes) {\r\n\t\t\t\t\tfor (i = 0, n = this._gradientX.gradientCount; i < n; i++)\r\n\t\t\t\t\t\tmaxSize = Math.max(maxSize, this._gradientX.getValueByIndex(i));\r\n\t\t\t\t\tfor (i = 0, n = this._gradientY.gradientCount; i < n; i++)\r\n\t\t\t\t\t\tmaxSize = Math.max(maxSize, this._gradientY.getValueByIndex(i));\r\n\t\t\t\t\tif (meshMode) {\r\n\t\t\t\t\t\tfor (i = 0, n = this._gradientZ.gradientCount; i < n; i++) {\r\n\t\t\t\t\t\t\tmaxSize = Math.max(maxSize, this._gradientZ.getValueByIndex(i));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tfor (i = 0, n = this._gradient.gradientCount; i < n; i++)\r\n\t\t\t\t\t\tmaxSize = Math.max(maxSize, this._gradient.getValueByIndex(i));\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1:\r\n\t\t\t\tif (this._separateAxes) {\r\n\t\t\t\t\tmaxSize = Math.max(this._constantMinSeparate.x, this._constantMaxSeparate.x);\r\n\t\t\t\t\tmaxSize = Math.max(maxSize, this._constantMinSeparate.y);\r\n\t\t\t\t\tif (meshMode) {\r\n\t\t\t\t\t\tmaxSize = maxSize = Math.max(maxSize, this._constantMaxSeparate.z);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tmaxSize = Math.max(this._constantMin, this._constantMax);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2:\r\n\t\t\t\tif (this._separateAxes) {\r\n\t\t\t\t\tfor (i = 0, n = this._gradientXMin.gradientCount; i < n; i++)\r\n\t\t\t\t\t\tmaxSize = Math.max(maxSize, this._gradientXMin.getValueByIndex(i));\r\n\t\t\t\t\tfor (i = 0, n = this._gradientXMax.gradientCount; i < n; i++)\r\n\t\t\t\t\t\tmaxSize = Math.max(maxSize, this._gradientXMax.getValueByIndex(i));\r\n\r\n\t\t\t\t\tfor (i = 0, n = this._gradientYMin.gradientCount; i < n; i++)\r\n\t\t\t\t\t\tmaxSize = Math.max(maxSize, this._gradientYMin.getValueByIndex(i));\r\n\t\t\t\t\tfor (i = 0, n = this._gradientZMax.gradientCount; i < n; i++)\r\n\t\t\t\t\t\tmaxSize = Math.max(maxSize, this._gradientZMax.getValueByIndex(i));\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (meshMode) {\r\n\t\t\t\t\t\tfor (i = 0, n = this._gradientZMin.gradientCount; i < n; i++) {\r\n\t\t\t\t\t\t\tmaxSize = Math.max(maxSize, this._gradientZMin.getValueByIndex(i));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tfor (i = 0, n = this._gradientZMax.gradientCount; i < n; i++) {\r\n\t\t\t\t\t\t\tmaxSize = Math.max(maxSize, this._gradientZMax.getValueByIndex(i));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tfor (i = 0, n = this._gradientMin.gradientCount; i < n; i++)\r\n\t\t\t\t\t\tmaxSize = Math.max(maxSize, this._gradientMin.getValueByIndex(i));\r\n\t\t\t\t\tfor (i = 0, n = this._gradientMax.gradientCount; i < n; i++)\r\n\t\t\t\t\t\tmaxSize = Math.max(maxSize, this._gradientMax.getValueByIndex(i));\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\treturn maxSize;\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @param\tdestObject 克隆源。\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tvar destGradientSize: GradientSize = (<GradientSize>destObject);\r\n\t\tdestGradientSize._type = this._type;\r\n\t\tdestGradientSize._separateAxes = this._separateAxes;\r\n\t\tthis._gradient.cloneTo(destGradientSize._gradient);\r\n\t\tthis._gradientX.cloneTo(destGradientSize._gradientX);\r\n\t\tthis._gradientY.cloneTo(destGradientSize._gradientY);\r\n\t\tthis._gradientZ.cloneTo(destGradientSize._gradientZ);\r\n\t\tdestGradientSize._constantMin = this._constantMin;\r\n\t\tdestGradientSize._constantMax = this._constantMax;\r\n\t\tthis._constantMinSeparate.cloneTo(destGradientSize._constantMinSeparate);\r\n\t\tthis._constantMaxSeparate.cloneTo(destGradientSize._constantMaxSeparate);\r\n\t\tthis._gradientMin.cloneTo(destGradientSize._gradientMin);\r\n\t\tthis._gradientMax.cloneTo(destGradientSize._gradientMax);\r\n\t\tthis._gradientXMin.cloneTo(destGradientSize._gradientXMin);\r\n\t\tthis._gradientXMax.cloneTo(destGradientSize._gradientXMax);\r\n\t\tthis._gradientYMin.cloneTo(destGradientSize._gradientYMin);\r\n\t\tthis._gradientYMax.cloneTo(destGradientSize._gradientYMax);\r\n\t\tthis._gradientZMin.cloneTo(destGradientSize._gradientZMin);\r\n\t\tthis._gradientZMax.cloneTo(destGradientSize._gradientZMax);\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @return\t 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar destGradientSize: GradientSize = new GradientSize();\r\n\t\tthis.cloneTo(destGradientSize);\r\n\t\treturn destGradientSize;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { GradientDataNumber } from \"./GradientDataNumber\";\r\nimport { IClone } from \"../../../../utils/IClone\"\r\nimport { Vector3 } from \"../../../../maths/Vector3\";\r\n\r\n/**\r\n * <code>GradientVelocity</code> 类用于创建渐变速度。\r\n */\r\nexport class GradientVelocity implements IClone {\r\n\t/**\r\n\t * 通过固定速度创建一个 <code>GradientVelocity</code> 实例。\r\n\t * @param\tconstant 固定速度。\r\n\t * @return 渐变速度。\r\n\t */\r\n\tstatic createByConstant(constant: Vector3): GradientVelocity {\r\n\t\tvar gradientVelocity: GradientVelocity = new GradientVelocity();\r\n\t\tgradientVelocity._type = 0;\r\n\t\tgradientVelocity._constant = constant;\r\n\t\treturn gradientVelocity;\r\n\t}\r\n\r\n\t/**\r\n\t * 通过渐变速度创建一个 <code>GradientVelocity</code> 实例。\r\n\t * @param\tgradientX 渐变速度X。\r\n\t * @param\tgradientY 渐变速度Y。\r\n\t * @param\tgradientZ 渐变速度Z。\r\n\t * @return  渐变速度。\r\n\t */\r\n\tstatic createByGradient(gradientX: GradientDataNumber, gradientY: GradientDataNumber, gradientZ: GradientDataNumber): GradientVelocity {\r\n\t\tvar gradientVelocity: GradientVelocity = new GradientVelocity();\r\n\t\tgradientVelocity._type = 1;\r\n\t\tgradientVelocity._gradientX = gradientX;\r\n\t\tgradientVelocity._gradientY = gradientY;\r\n\t\tgradientVelocity._gradientZ = gradientZ;\r\n\t\treturn gradientVelocity;\r\n\t}\r\n\r\n\t/**\r\n\t * 通过随机双固定速度创建一个 <code>GradientVelocity</code> 实例。\r\n\t * @param\tconstantMin 最小固定角速度。\r\n\t * @param\tconstantMax 最大固定角速度。\r\n\t * @return 渐变速度。\r\n\t */\r\n\tstatic createByRandomTwoConstant(constantMin: Vector3, constantMax: Vector3): GradientVelocity {\r\n\t\tvar gradientVelocity: GradientVelocity = new GradientVelocity();\r\n\t\tgradientVelocity._type = 2;\r\n\t\tgradientVelocity._constantMin = constantMin;\r\n\t\tgradientVelocity._constantMax = constantMax;\r\n\t\treturn gradientVelocity;\r\n\t}\r\n\r\n\t/**\r\n\t * 通过随机双渐变速度创建一个 <code>GradientVelocity</code> 实例。\r\n\t * @param\tgradientXMin X轴最小渐变速度。\r\n\t * @param\tgradientXMax X轴最大渐变速度。\r\n\t * @param\tgradientYMin Y轴最小渐变速度。\r\n\t * @param\tgradientYMax Y轴最大渐变速度。\r\n\t * @param\tgradientZMin Z轴最小渐变速度。\r\n\t * @param\tgradientZMax Z轴最大渐变速度。\r\n\t * @return  渐变速度。\r\n\t */\r\n\tstatic createByRandomTwoGradient(gradientXMin: GradientDataNumber, gradientXMax: GradientDataNumber, gradientYMin: GradientDataNumber, gradientYMax: GradientDataNumber, gradientZMin: GradientDataNumber, gradientZMax: GradientDataNumber): GradientVelocity {\r\n\t\tvar gradientVelocity: GradientVelocity = new GradientVelocity();\r\n\t\tgradientVelocity._type = 3;\r\n\t\tgradientVelocity._gradientXMin = gradientXMin;\r\n\t\tgradientVelocity._gradientXMax = gradientXMax;\r\n\t\tgradientVelocity._gradientYMin = gradientYMin;\r\n\t\tgradientVelocity._gradientYMax = gradientYMax;\r\n\t\tgradientVelocity._gradientZMin = gradientZMin;\r\n\t\tgradientVelocity._gradientZMax = gradientZMax;\r\n\t\treturn gradientVelocity;\r\n\t}\r\n\r\n\tprivate _type: number = 0;\r\n\tprivate _constant: Vector3 = null;\r\n\r\n\t\r\n\tprivate _gradientX: GradientDataNumber = null;\r\n\tprivate _gradientY: GradientDataNumber = null;\r\n\tprivate _gradientZ: GradientDataNumber = null;\r\n\r\n\t\r\n\tprivate _constantMin: Vector3 = null;\r\n\tprivate _constantMax: Vector3 = null;\r\n\r\n\t\r\n\tprivate _gradientXMin: GradientDataNumber = null;\r\n\tprivate _gradientXMax: GradientDataNumber = null;\r\n\tprivate _gradientYMin: GradientDataNumber = null;\r\n\tprivate _gradientYMax: GradientDataNumber = null;\r\n\tprivate _gradientZMin: GradientDataNumber = null;\r\n\tprivate _gradientZMax: GradientDataNumber = null;\r\n\r\n\t/**\r\n\t *生命周期速度类型，0常量模式，1曲线模式，2随机双常量模式，3随机双曲线模式。\r\n\t */\r\n\tget type(): number {\r\n\t\treturn this._type;\r\n\t}\r\n\r\n\t/**固定速度。*/\r\n\tget constant(): Vector3 {\r\n\t\treturn this._constant;\r\n\t}\r\n\r\n\t/**\r\n\t * 渐变速度X。\r\n\t */\r\n\tget gradientX(): GradientDataNumber {\r\n\t\treturn this._gradientX;\r\n\t}\r\n\r\n\t/**\r\n\t * 渐变速度Y。\r\n\t */\r\n\tget gradientY(): GradientDataNumber {\r\n\t\treturn this._gradientY;\r\n\t}\r\n\r\n\t/**\r\n\t *渐变速度Z。\r\n\t */\r\n\tget gradientZ(): GradientDataNumber {\r\n\t\treturn this._gradientZ;\r\n\t}\r\n\r\n\t/**最小固定速度。*/\r\n\tget constantMin(): Vector3 {\r\n\t\treturn this._constantMin;\r\n\t}\r\n\r\n\t/**最大固定速度。*/\r\n\tget constantMax(): Vector3 {\r\n\t\treturn this._constantMax;\r\n\t}\r\n\r\n\t/**\r\n\t * 渐变最小速度X。\r\n\t */\r\n\tget gradientXMin(): GradientDataNumber {\r\n\t\treturn this._gradientXMin;\r\n\t}\r\n\r\n\t/**\r\n\t * 渐变最大速度X。\r\n\t */\r\n\tget gradientXMax(): GradientDataNumber {\r\n\t\treturn this._gradientXMax;\r\n\t}\r\n\r\n\t/**\r\n\t * 渐变最小速度Y。\r\n\t */\r\n\tget gradientYMin(): GradientDataNumber {\r\n\t\treturn this._gradientYMin;\r\n\t}\r\n\r\n\t/**\r\n\t *渐变最大速度Y。\r\n\t */\r\n\tget gradientYMax(): GradientDataNumber {\r\n\t\treturn this._gradientYMax;\r\n\t}\r\n\r\n\t/**\r\n\t * 渐变最小速度Z。\r\n\t */\r\n\tget gradientZMin(): GradientDataNumber {\r\n\t\treturn this._gradientZMin;\r\n\t}\r\n\r\n\t/**\r\n\t * 渐变最大速度Z。\r\n\t */\r\n\tget gradientZMax(): GradientDataNumber {\r\n\t\treturn this._gradientZMax;\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>GradientVelocity,不允许new，请使用静态创建函数。</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @param\tdestObject 克隆源。\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tvar destGradientVelocity: GradientVelocity = (<GradientVelocity>destObject);\r\n\t\tdestGradientVelocity._type = this._type;\r\n\t\tthis._constant.cloneTo(destGradientVelocity._constant);\r\n\t\tthis._gradientX.cloneTo(destGradientVelocity._gradientX);\r\n\t\tthis._gradientY.cloneTo(destGradientVelocity._gradientY);\r\n\t\tthis._gradientZ.cloneTo(destGradientVelocity._gradientZ);\r\n\t\tthis._constantMin.cloneTo(destGradientVelocity._constantMin);\r\n\t\tthis._constantMax.cloneTo(destGradientVelocity._constantMax);\r\n\t\tthis._gradientXMin.cloneTo(destGradientVelocity._gradientXMin);\r\n\t\tthis._gradientXMax.cloneTo(destGradientVelocity._gradientXMax);\r\n\t\tthis._gradientYMin.cloneTo(destGradientVelocity._gradientYMin);\r\n\t\tthis._gradientYMax.cloneTo(destGradientVelocity._gradientYMax);\r\n\t\tthis._gradientZMin.cloneTo(destGradientVelocity._gradientZMin);\r\n\t\tthis._gradientZMax.cloneTo(destGradientVelocity._gradientZMax);\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @return\t 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar destGradientVelocity: GradientVelocity = new GradientVelocity();\r\n\t\tthis.cloneTo(destGradientVelocity);\r\n\t\treturn destGradientVelocity;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { GradientAngularVelocity } from \"./GradientAngularVelocity\";\r\nimport { IClone } from \"../../../../utils/IClone\"\r\n\r\n/**\r\n * <code>RotationOverLifetime</code> 类用于粒子的生命周期旋转。\r\n */\r\nexport class RotationOverLifetime implements IClone {\r\n\tprivate _angularVelocity: GradientAngularVelocity;\r\n\r\n\t/**是否启用*/\r\n\tenable: boolean;\r\n\r\n\t/**\r\n\t *获取角速度。\r\n\t */\r\n\tget angularVelocity(): GradientAngularVelocity {\r\n\t\treturn this._angularVelocity;\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>RotationOverLifetime,不允许new，请使用静态创建函数。</code> 实例。\r\n\t */\r\n\tconstructor(angularVelocity: GradientAngularVelocity) {\r\n\t\tthis._angularVelocity = angularVelocity;\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @param\tdestObject 克隆源。\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tvar destRotationOverLifetime: RotationOverLifetime = (<RotationOverLifetime>destObject);\r\n\t\tthis._angularVelocity.cloneTo(destRotationOverLifetime._angularVelocity);\r\n\t\tdestRotationOverLifetime.enable = this.enable;\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @return\t 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar destAngularVelocity: GradientAngularVelocity;\r\n\t\tswitch (this._angularVelocity.type) {\r\n\t\t\tcase 0:\r\n\t\t\t\tif (this._angularVelocity.separateAxes)\r\n\t\t\t\t\tdestAngularVelocity = GradientAngularVelocity.createByConstantSeparate(this._angularVelocity.constantSeparate.clone());\r\n\t\t\t\telse\r\n\t\t\t\t\tdestAngularVelocity = GradientAngularVelocity.createByConstant(this._angularVelocity.constant);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1:\r\n\t\t\t\tif (this._angularVelocity.separateAxes)\r\n\t\t\t\t\tdestAngularVelocity = GradientAngularVelocity.createByGradientSeparate(this._angularVelocity.gradientX.clone(), this._angularVelocity.gradientY.clone(), this._angularVelocity.gradientZ.clone());\r\n\t\t\t\telse\r\n\t\t\t\t\tdestAngularVelocity = GradientAngularVelocity.createByGradient(this._angularVelocity.gradient.clone());\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2:\r\n\t\t\t\tif (this._angularVelocity.separateAxes)\r\n\t\t\t\t\tdestAngularVelocity = GradientAngularVelocity.createByRandomTwoConstantSeparate(this._angularVelocity.constantMinSeparate.clone(), this._angularVelocity.constantMaxSeparate.clone());\r\n\t\t\t\telse\r\n\t\t\t\t\tdestAngularVelocity = GradientAngularVelocity.createByRandomTwoConstant(this._angularVelocity.constantMin, this._angularVelocity.constantMax);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 3:\r\n\t\t\t\tif (this._angularVelocity.separateAxes)\r\n\t\t\t\t\tdestAngularVelocity = GradientAngularVelocity.createByRandomTwoGradientSeparate(this._angularVelocity.gradientXMin.clone(), this._angularVelocity.gradientYMin.clone(), this._angularVelocity.gradientZMin.clone(), this._angularVelocity.gradientWMin.clone(), this._angularVelocity.gradientXMax.clone(), this._angularVelocity.gradientYMax.clone(), this._angularVelocity.gradientZMax.clone(), this._angularVelocity.gradientWMax.clone());\r\n\t\t\t\telse\r\n\t\t\t\t\tdestAngularVelocity = GradientAngularVelocity.createByRandomTwoGradient(this._angularVelocity.gradientMin.clone(), this._angularVelocity.gradientMax.clone());\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\tvar destRotationOverLifetime: RotationOverLifetime = new RotationOverLifetime(destAngularVelocity);\r\n\t\tdestRotationOverLifetime.enable = this.enable;\r\n\t\treturn destRotationOverLifetime;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { Matrix4x4 } from \"../../maths/Matrix4x4\";\r\nimport { Vector3 } from \"../../maths/Vector3\";\r\nimport { IClone } from \"../../utils/IClone\"\r\n\r\n/**\r\n * <code>BoundBox</code> 类用于创建包围盒。\r\n */\r\nexport class BoundBox implements IClone {\r\n\t/**@internal */\r\n\tprivate static _tempVector30: Vector3 = new Vector3();\r\n\t/**@internal */\r\n\tprivate static _tempVector31: Vector3 = new Vector3();\r\n\r\n\t/**最小顶点。*/\r\n\tmin: Vector3;\r\n\t/**最大顶点。*/\r\n\tmax: Vector3;\r\n\r\n\t/**\r\n\t * 创建一个 <code>BoundBox</code> 实例。\r\n\t * @param\tmin 包围盒的最小顶点。\r\n\t * @param\tmax 包围盒的最大顶点。\r\n\t */\r\n\tconstructor(min: Vector3, max: Vector3) {\r\n\t\tthis.min = min;\r\n\t\tthis.max = max;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _rotateExtents(extents: Vector3, rotation: Matrix4x4, out: Vector3): void {\r\n\t\tvar extentsX: number = extents.x;\r\n\t\tvar extentsY: number = extents.y;\r\n\t\tvar extentsZ: number = extents.z;\r\n\t\tvar matElements: Float32Array = rotation.elements;\r\n\t\tout.x = Math.abs(matElements[0] * extentsX) + Math.abs(matElements[4] * extentsY) + Math.abs(matElements[8] * extentsZ);\r\n\t\tout.y = Math.abs(matElements[1] * extentsX) + Math.abs(matElements[5] * extentsY) + Math.abs(matElements[9] * extentsZ);\r\n\t\tout.z = Math.abs(matElements[2] * extentsX) + Math.abs(matElements[6] * extentsY) + Math.abs(matElements[10] * extentsZ);\r\n\t}\r\n\r\n\t/**\r\n\t * 获取包围盒的8个角顶点。\r\n\t * @param\tcorners 返回顶点的输出队列。\r\n\t */\r\n\tgetCorners(corners: Vector3[]): void {\r\n\t\tcorners.length = 8;\r\n\t\tvar minX: number = this.min.x;\r\n\t\tvar minY: number = this.min.y;\r\n\t\tvar minZ: number = this.min.z;\r\n\t\tvar maxX: number = this.max.x;\r\n\t\tvar maxY: number = this.max.y;\r\n\t\tvar maxZ: number = this.max.z;\r\n\t\tcorners[0] = new Vector3(minX, maxY, maxZ);\r\n\t\tcorners[1] = new Vector3(maxX, maxY, maxZ);\r\n\t\tcorners[2] = new Vector3(maxX, minY, maxZ);\r\n\t\tcorners[3] = new Vector3(minX, minY, maxZ);\r\n\t\tcorners[4] = new Vector3(minX, maxY, minZ);\r\n\t\tcorners[5] = new Vector3(maxX, maxY, minZ);\r\n\t\tcorners[6] = new Vector3(maxX, minY, minZ);\r\n\t\tcorners[7] = new Vector3(minX, minY, minZ);\r\n\t}\r\n\r\n\t/**\r\n\t * 获取中心点。\r\n\t * @param\tout\r\n\t */\r\n\tgetCenter(out: Vector3): void {\r\n\t\tVector3.add(this.min, this.max, out);\r\n\t\tVector3.scale(out, 0.5, out);\r\n\t}\r\n\r\n\t/**\r\n\t * 获取范围。\r\n\t * @param\tout\r\n\t */\r\n\tgetExtent(out: Vector3): void {\r\n\t\tVector3.subtract(this.max, this.min, out);\r\n\t\tVector3.scale(out, 0.5, out);\r\n\t}\r\n\r\n\t/**\r\n\t * 设置中心点和范围。\r\n\t * @param\tcenter\r\n\t */\r\n\tsetCenterAndExtent(center: Vector3, extent: Vector3): void {\r\n\t\tVector3.subtract(center, extent, this.min);\r\n\t\tVector3.add(center, extent, this.max);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\ttranform(matrix: Matrix4x4, out: BoundBox): void {\r\n\t\tvar center: Vector3 = BoundBox._tempVector30;\r\n\t\tvar extent: Vector3 = BoundBox._tempVector31;\r\n\t\tthis.getCenter(center);\r\n\t\tthis.getExtent(extent);\r\n\t\tVector3.transformCoordinate(center, matrix, center);\r\n\t\tthis._rotateExtents(extent, matrix, extent);\r\n\t\tout.setCenterAndExtent(center, extent);\r\n\t}\r\n\r\n\ttoDefault(): void {\r\n\t\tthis.min.toDefault();\r\n\t\tthis.max.toDefault();\r\n\t}\r\n\r\n\t/**\r\n\t * 从顶点生成包围盒。\r\n\t * @param\tpoints 所需顶点队列。\r\n\t * @param\tout 生成的包围盒。\r\n\t */\r\n\tstatic createfromPoints(points: Vector3[], out: BoundBox): void {\r\n\t\tif (points == null)\r\n\t\t\tthrow new Error(\"points\");\r\n\r\n\t\tvar min: Vector3 = out.min;\r\n\t\tvar max: Vector3 = out.max;\r\n\t\tmin.x = Number.MAX_VALUE;\r\n\t\tmin.y = Number.MAX_VALUE;\r\n\t\tmin.z = Number.MAX_VALUE;\r\n\t\tmax.x = -Number.MAX_VALUE;\r\n\t\tmax.y = -Number.MAX_VALUE;\r\n\t\tmax.z = -Number.MAX_VALUE;\r\n\r\n\t\tfor (var i: number = 0, n: number = points.length; i < n; ++i) {\r\n\t\t\tVector3.min(min, points[i], min);\r\n\t\t\tVector3.max(max, points[i], max);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 合并两个包围盒。\r\n\t * @param\tbox1 包围盒1。\r\n\t * @param\tbox2 包围盒2。\r\n\t * @param\tout 生成的包围盒。\r\n\t */\r\n\tstatic merge(box1: BoundBox, box2: BoundBox, out: BoundBox): void {\r\n\t\tVector3.min(box1.min, box2.min, out.min);\r\n\t\tVector3.max(box1.max, box2.max, out.max);\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @param\tdestObject 克隆源。\r\n\t */\r\n\tcloneTo(destObject: BoundBox): void {\r\n\t\tvar dest: BoundBox = (<BoundBox>destObject);\r\n\t\tthis.min.cloneTo(dest.min);\r\n\t\tthis.max.cloneTo(dest.max);\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @return\t 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar dest: BoundBox = new BoundBox(new Vector3(), new Vector3());\r\n\t\tthis.cloneTo(dest);\r\n\t\treturn dest;\r\n\t}\r\n\r\n}\r\n\r\n\r\n\r\n","import { Vector2 } from \"../../../../../maths/Vector2\";\r\nimport { Vector3 } from \"../../../../../maths/Vector3\";\r\nimport { Rand } from \"../../../../math/Rand\"\r\n\r\n/**\r\n * @internal\r\n * @author ...\r\n */\r\nexport class ShapeUtils {\r\n\tstatic _randomPointUnitArcCircle(arc: number, out: Vector2, rand: Rand = null): void {\r\n\t\tvar angle: number;\r\n\t\tif (rand)\r\n\t\t\tangle = rand.getFloat() * arc;\r\n\t\telse\r\n\t\t\tangle = Math.random() * arc;\r\n\t\tout.x = Math.cos(angle);\r\n\t\tout.y = Math.sin(angle);\r\n\t}\r\n\r\n\tstatic _randomPointInsideUnitArcCircle(arc: number, out: Vector2, rand: Rand = null): void {\r\n\t\tShapeUtils._randomPointUnitArcCircle(arc, out, rand);\r\n\t\tvar range: number;\r\n\t\tif (rand)\r\n\t\t\trange = Math.pow(rand.getFloat(), 1.0 / 2.0);\r\n\t\telse\r\n\t\t\trange = Math.pow(Math.random(), 1.0 / 2.0);\r\n\t\tout.x = out.x * range;\r\n\t\tout.y = out.y * range;\r\n\t}\r\n\r\n\tstatic _randomPointUnitCircle(out: Vector2, rand: Rand = null): void {\r\n\t\tvar angle: number;\r\n\t\tif (rand)\r\n\t\t\tangle = rand.getFloat() * Math.PI * 2;\r\n\t\telse\r\n\t\t\tangle = Math.random() * Math.PI * 2;\r\n\t\tout.x = Math.cos(angle);\r\n\t\tout.y = Math.sin(angle);\r\n\t}\r\n\r\n\tstatic _randomPointInsideUnitCircle(out: Vector2, rand: Rand = null): void {\r\n\t\tShapeUtils._randomPointUnitCircle(out);\r\n\t\tvar range: number;\r\n\t\tif (rand)\r\n\t\t\trange = Math.pow(rand.getFloat(), 1.0 / 2.0);\r\n\t\telse\r\n\t\t\trange = Math.pow(Math.random(), 1.0 / 2.0);\r\n\t\tout.x = out.x * range;\r\n\t\tout.y = out.y * range;\r\n\t}\r\n\r\n\tstatic _randomPointUnitSphere(out: Vector3, rand: Rand = null): void {\r\n\t\tvar z: number;\r\n\t\tvar a: number;\r\n\t\tif (rand) {\r\n\t\t\tz = out.z = rand.getFloat() * 2 - 1.0;\r\n\t\t\ta = rand.getFloat() * Math.PI * 2;\r\n\t\t} else {\r\n\t\t\tz = out.z = Math.random() * 2 - 1.0;\r\n\t\t\ta = Math.random() * Math.PI * 2;\r\n\t\t}\r\n\r\n\t\tvar r: number = Math.sqrt(1.0 - z * z);\r\n\r\n\t\tout.x = r * Math.cos(a);\r\n\t\tout.y = r * Math.sin(a);\r\n\t}\r\n\r\n\tstatic _randomPointInsideUnitSphere(out: Vector3, rand: Rand = null): void {\r\n\t\t;\r\n\t\tShapeUtils._randomPointUnitSphere(out);\r\n\t\tvar range: number;\r\n\t\tif (rand)\r\n\t\t\trange = Math.pow(rand.getFloat(), 1.0 / 3.0);\r\n\t\telse\r\n\t\t\trange = Math.pow(Math.random(), 1.0 / 3.0);\r\n\t\tout.x = out.x * range;\r\n\t\tout.y = out.y * range;\r\n\t\tout.z = out.z * range;\r\n\t}\r\n\r\n\tstatic _randomPointInsideHalfUnitBox(out: Vector3, rand: Rand = null): void {\r\n\t\tif (rand) {\r\n\t\t\tout.x = (rand.getFloat() - 0.5);\r\n\t\t\tout.y = (rand.getFloat() - 0.5);\r\n\t\t\tout.z = (rand.getFloat() - 0.5);\r\n\t\t} else {\r\n\t\t\tout.x = (Math.random() - 0.5);\r\n\t\t\tout.y = (Math.random() - 0.5);\r\n\t\t\tout.z = (Math.random() - 0.5);\r\n\t\t}\r\n\t}\r\n\r\n\tconstructor() {\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { BaseShape, ParticleSystemShapeType } from \"./BaseShape\";\r\nimport { ShapeUtils } from \"./ShapeUtils\";\r\nimport { BoundBox } from \"../../../../math/BoundBox\"\r\nimport { Rand } from \"../../../../math/Rand\"\r\nimport { Vector3 } from \"../../../../../maths/Vector3\";\r\n\r\n/**\r\n * <code>BoxShape</code> 类用于创建球形粒子形状。\r\n */\r\nexport class BoxShape extends BaseShape {\r\n\t/**发射器X轴长度。*/\r\n\tx: number;\r\n\t/**发射器Y轴长度。*/\r\n\ty: number;\r\n\t/**发射器Z轴长度。*/\r\n\tz: number;\r\n\r\n\t/**\r\n\t * 创建一个 <code>BoxShape</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.shapeType = ParticleSystemShapeType.Box;\r\n\t\tthis.x = 1.0;\r\n\t\tthis.y = 1.0;\r\n\t\tthis.z = 1.0;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\tprotected _getShapeBoundBox(boundBox: BoundBox): void {\r\n\t\tvar min: Vector3 = boundBox.min;\r\n\t\tmin.x = -this.x * 0.5;\r\n\t\tmin.y = -this.y * 0.5;\r\n\t\tmin.z = -this.z * 0.5;\r\n\t\tvar max: Vector3 = boundBox.max;\r\n\t\tmax.x = this.x * 0.5;\r\n\t\tmax.y = this.y * 0.5;\r\n\t\tmax.z = this.z * 0.5;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\tprotected _getSpeedBoundBox(boundBox: BoundBox): void {\r\n\t\tvar min: Vector3 = boundBox.min;\r\n\t\tmin.x = 0.0;\r\n\t\tmin.y = 0.0;\r\n\t\tmin.z = 0.0;\r\n\t\tvar max: Vector3 = boundBox.max;\r\n\t\tmax.x = 0.0;\r\n\t\tmax.y = 1.0;\r\n\t\tmax.z = 0.0;\r\n\t}\r\n\r\n\t/**\r\n\t *  用于生成粒子初始位置和方向。\r\n\t * @param\tposition 粒子位置。\r\n\t * @param\tdirection 粒子方向。\r\n\t * @override\r\n\t */\r\n\tgeneratePositionAndDirection(position: Vector3, direction: Vector3, rand: Rand = null, randomSeeds: Uint32Array = null): void {\r\n\t\tif (rand) {\r\n\t\t\trand.seed = randomSeeds[16];\r\n\t\t\tShapeUtils._randomPointInsideHalfUnitBox(position, rand);\r\n\t\t\trandomSeeds[16] = rand.seed;\r\n\t\t} else {\r\n\t\t\tShapeUtils._randomPointInsideHalfUnitBox(position);\r\n\t\t}\r\n\t\tposition.x = this.x * position.x;\r\n\t\tposition.y = this.y * position.y;\r\n\t\tposition.z = this.z * position.z;\r\n\t\tif (this.randomDirection) {\r\n\t\t\tif (rand) {\r\n\t\t\t\trand.seed = randomSeeds[17];\r\n\t\t\t\tShapeUtils._randomPointUnitSphere(direction, rand);\r\n\t\t\t\trandomSeeds[17] = rand.seed;\r\n\t\t\t} else {\r\n\t\t\t\tShapeUtils._randomPointUnitSphere(direction);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tdirection.x = 0.0;\r\n\t\t\tdirection.y = 0.0;\r\n\t\t\tdirection.z = 1.0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @param destObject \r\n\t * @override\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tsuper.cloneTo(destObject);\r\n\t\tvar destShape: BoxShape = (<BoxShape>destObject);\r\n\t\tdestShape.x = this.x;\r\n\t\tdestShape.y = this.y;\r\n\t\tdestShape.z = this.z;\r\n\t\tdestShape.randomDirection = this.randomDirection;\r\n\t}\r\n\r\n\t/**\r\n\t * @override\r\n\t * 克隆。\r\n\t * @return\t 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar destShape: BoxShape = new BoxShape();\r\n\t\tthis.cloneTo(destShape);\r\n\t\treturn destShape;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { BaseShape, ParticleSystemShapeType } from \"./BaseShape\";\r\nimport { ShapeUtils } from \"./ShapeUtils\";\r\nimport { BoundBox } from \"../../../../math/BoundBox\"\r\nimport { Rand } from \"../../../../math/Rand\"\r\nimport { Vector2 } from \"../../../../../maths/Vector2\";\r\nimport { Vector3 } from \"../../../../../maths/Vector3\";\r\n\r\n/**\r\n * <code>CircleShape</code> 类用于创建环形粒子形状。\r\n */\r\nexport class CircleShape extends BaseShape {\r\n\t/** @internal */\r\n\tprotected static _tempPositionPoint: Vector2 = new Vector2();\r\n\r\n\t/**发射器半径。*/\r\n\tradius: number;\r\n\t/**环形弧度。*/\r\n\tarc: number;\r\n\t/**从边缘发射。*/\r\n\temitFromEdge: boolean;\r\n\r\n\t/**\r\n\t * 创建一个 <code>CircleShape</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.shapeType = ParticleSystemShapeType.Circle;\r\n\t\tthis.radius = 1.0;\r\n\t\tthis.arc = 360.0 / 180.0 * Math.PI;\r\n\t\tthis.emitFromEdge = false;\r\n\t}\r\n\r\n\t/**\r\n\t * 发射角度0-360\r\n\t */\r\n\tset arcDEG(deg: number) {\r\n\t\tthis.arc = deg / 180 * Math.PI;\r\n\t}\r\n\r\n\tget arcDEG() {\r\n\t\treturn this.arc * 180 / Math.PI;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\tprotected _getShapeBoundBox(boundBox: BoundBox): void {\r\n\t\tvar min: Vector3 = boundBox.min;\r\n\t\tmin.x = min.z = -this.radius;\r\n\t\tmin.y = 0;\r\n\t\tvar max: Vector3 = boundBox.max;\r\n\t\tmax.x = max.z = this.radius;\r\n\t\tmax.y = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\tprotected _getSpeedBoundBox(boundBox: BoundBox): void {\r\n\t\tvar min: Vector3 = boundBox.min;\r\n\t\tmin.x = min.y = -1;\r\n\t\tmin.z = 0;\r\n\t\tvar max: Vector3 = boundBox.max;\r\n\t\tmax.x = max.y = 1;\r\n\t\tmax.z = 0;\r\n\t}\r\n\r\n\t/**\r\n\t *  用于生成粒子初始位置和方向。\r\n\t * @param\tposition 粒子位置。\r\n\t * @param\tdirection 粒子方向。\r\n\t * @override\r\n\t */\r\n\tgeneratePositionAndDirection(position: Vector3, direction: Vector3, rand: Rand = null, randomSeeds: Uint32Array = null): void {\r\n\t\tvar positionPoint: Vector2 = CircleShape._tempPositionPoint;\r\n\t\tif (rand) {\r\n\t\t\trand.seed = randomSeeds[16];\r\n\t\t\tif (this.emitFromEdge)\r\n\t\t\t\tShapeUtils._randomPointUnitArcCircle(this.arc, CircleShape._tempPositionPoint, rand);\r\n\t\t\telse\r\n\t\t\t\tShapeUtils._randomPointInsideUnitArcCircle(this.arc, CircleShape._tempPositionPoint, rand);\r\n\t\t\trandomSeeds[16] = rand.seed;\r\n\t\t} else {\r\n\t\t\tif (this.emitFromEdge)\r\n\t\t\t\tShapeUtils._randomPointUnitArcCircle(this.arc, CircleShape._tempPositionPoint);\r\n\t\t\telse\r\n\t\t\t\tShapeUtils._randomPointInsideUnitArcCircle(this.arc, CircleShape._tempPositionPoint);\r\n\t\t}\r\n\r\n\t\tposition.x = -positionPoint.x;\r\n\t\tposition.y = positionPoint.y;\r\n\t\tposition.z = 0;\r\n\r\n\t\tVector3.scale(position, this.radius, position);\r\n\r\n\t\tif (this.randomDirection) {\r\n\t\t\tif (rand) {\r\n\t\t\t\trand.seed = randomSeeds[17];\r\n\t\t\t\tShapeUtils._randomPointUnitSphere(direction, rand);\r\n\t\t\t\trandomSeeds[17] = rand.seed;\r\n\t\t\t} else {\r\n\t\t\t\tShapeUtils._randomPointUnitSphere(direction);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tposition.cloneTo(direction);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @param destObject \r\n\t * @override\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tsuper.cloneTo(destObject);\r\n\t\tvar destShape: CircleShape = (<CircleShape>destObject);\r\n\t\tdestShape.radius = this.radius;\r\n\t\tdestShape.arc = this.arc;\r\n\t\tdestShape.emitFromEdge = this.emitFromEdge;\r\n\t\tdestShape.randomDirection = this.randomDirection;\r\n\t}\r\n\r\n\t/**\r\n\t * @override\r\n\t * 克隆。\r\n\t * @return\t 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar destShape: CircleShape = new CircleShape();\r\n\t\tthis.cloneTo(destShape);\r\n\t\treturn destShape;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { BaseShape, ParticleSystemShapeType } from \"./BaseShape\";\r\nimport { ShapeUtils } from \"./ShapeUtils\";\r\nimport { BoundBox } from \"../../../../math/BoundBox\"\r\nimport { Rand } from \"../../../../math/Rand\"\r\nimport { Vector2 } from \"../../../../../maths/Vector2\";\r\nimport { Vector3 } from \"../../../../../maths/Vector3\";\r\n\r\n/**\r\n * <code>ConeShape</code> 类用于创建锥形粒子形状。\r\n */\r\nexport class ConeShape extends BaseShape {\r\n\t/** @internal */\r\n\tprotected static _tempPositionPoint: Vector2 = new Vector2();\r\n\t/** @internal */\r\n\tprotected static _tempDirectionPoint: Vector2 = new Vector2();\r\n\r\n\t/**发射弧度。*/\r\n\tangle: number;\r\n\t/**发射器半径。*/\r\n\tradius: number;\r\n\t/**椎体长度。*/\r\n\tlength: number;\r\n\t/**发射类型,0为Base,1为BaseShell,2为Volume,3为VolumeShell。*/\r\n\temitType: number;\r\n\r\n\t/**\r\n\t * 创建一个 <code>ConeShape</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.shapeType = ParticleSystemShapeType.Cone;\r\n\t\tthis.angle = 25.0 / 180.0 * Math.PI;\r\n\t\tthis.radius = 1.0;\r\n\t\tthis.length = 5.0;\r\n\t\tthis.emitType = 0;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * 发射角度0-360\r\n\t */\r\n\tset angleDEG(deg: number) {\r\n\t\tthis.angle = deg / 180 * Math.PI;\r\n\t}\r\n\r\n\tget angleDEG(){\r\n\t\treturn this.angle*180/Math.PI;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\tprotected _getShapeBoundBox(boundBox: BoundBox): void {\r\n\t\tconst coneRadius2: number = this.radius + this.length * Math.sin(this.angle);\r\n\t\tconst coneLength: number = this.length * Math.cos(this.angle);\r\n\r\n\t\tvar min: Vector3 = boundBox.min;\r\n\t\tmin.x = min.y = -coneRadius2;\r\n\t\tmin.z = 0;\r\n\r\n\t\tvar max: Vector3 = boundBox.max;\r\n\t\tmax.x = max.y = coneRadius2;\r\n\t\tmax.z = coneLength;//TODO:是否为负\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\tprotected _getSpeedBoundBox(boundBox: BoundBox): void {\r\n\t\tconst sinA: number = Math.sin(this.angle);\r\n\t\tvar min: Vector3 = boundBox.min;\r\n\t\tmin.x = min.y = -sinA;\r\n\t\tmin.z = 0;\r\n\t\tvar max: Vector3 = boundBox.max;\r\n\t\tmax.x = max.y = sinA;\r\n\t\tmax.z = 1;\r\n\t}\r\n\r\n\t/**\r\n\t *  用于生成粒子初始位置和方向。\r\n\t * @param\tposition 粒子位置。\r\n\t * @param\tdirection 粒子方向。\r\n\t * @override\r\n\t */\r\n\tgeneratePositionAndDirection(position: Vector3, direction: Vector3, rand: Rand = null, randomSeeds: Uint32Array = null): void {\r\n\t\tvar positionPointE: Vector2 = ConeShape._tempPositionPoint;\r\n\t\tvar positionX: number;\r\n\t\tvar positionY: number;\r\n\t\tvar directionPointE: Vector2;\r\n\r\n\t\tvar dirCosA: number = Math.cos(this.angle);\r\n\t\tvar dirSinA: number = Math.sin(this.angle);\r\n\t\tswitch (this.emitType) {\r\n\t\t\tcase 0:\r\n\t\t\t\tif (rand) {\r\n\t\t\t\t\trand.seed = randomSeeds[16];\r\n\t\t\t\t\tShapeUtils._randomPointInsideUnitCircle(ConeShape._tempPositionPoint, rand);\r\n\t\t\t\t\trandomSeeds[16] = rand.seed;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tShapeUtils._randomPointInsideUnitCircle(ConeShape._tempPositionPoint);\r\n\t\t\t\t}\r\n\t\t\t\tpositionX = positionPointE.x;\r\n\t\t\t\tpositionY = positionPointE.y;\r\n\t\t\t\tposition.x = positionX * this.radius;\r\n\t\t\t\tposition.y = positionY * this.radius;\r\n\t\t\t\tposition.z = 0;\r\n\r\n\t\t\t\tif (this.randomDirection) {\r\n\t\t\t\t\tif (rand) {\r\n\t\t\t\t\t\trand.seed = randomSeeds[17];\r\n\t\t\t\t\t\tShapeUtils._randomPointInsideUnitCircle(ConeShape._tempDirectionPoint, rand);\r\n\t\t\t\t\t\trandomSeeds[17] = rand.seed;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tShapeUtils._randomPointInsideUnitCircle(ConeShape._tempDirectionPoint);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdirectionPointE = ConeShape._tempDirectionPoint;\r\n\t\t\t\t\tdirection.x = directionPointE.x * dirSinA;\r\n\t\t\t\t\tdirection.y = directionPointE.y * dirSinA;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tdirection.x = positionX * dirSinA;\r\n\t\t\t\t\tdirection.y = positionY * dirSinA;\r\n\t\t\t\t}\r\n\t\t\t\tdirection.z = dirCosA;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1:\r\n\t\t\t\tif (rand) {\r\n\t\t\t\t\trand.seed = randomSeeds[16];\r\n\t\t\t\t\tShapeUtils._randomPointUnitCircle(ConeShape._tempPositionPoint, rand);\r\n\t\t\t\t\trandomSeeds[16] = rand.seed;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tShapeUtils._randomPointUnitCircle(ConeShape._tempPositionPoint);\r\n\t\t\t\t}\r\n\t\t\t\tpositionX = positionPointE.x;\r\n\t\t\t\tpositionY = positionPointE.y;\r\n\t\t\t\tposition.x = positionX * this.radius;\r\n\t\t\t\tposition.y = positionY * this.radius;\r\n\t\t\t\tposition.z = 0;\r\n\r\n\t\t\t\tif (this.randomDirection) {\r\n\t\t\t\t\tif (rand) {\r\n\t\t\t\t\t\trand.seed = randomSeeds[17];\r\n\t\t\t\t\t\tShapeUtils._randomPointInsideUnitCircle(ConeShape._tempDirectionPoint, rand);\r\n\t\t\t\t\t\trandomSeeds[17] = rand.seed;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tShapeUtils._randomPointInsideUnitCircle(ConeShape._tempDirectionPoint);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdirectionPointE = ConeShape._tempDirectionPoint;\r\n\t\t\t\t\tdirection.x = directionPointE.x * dirSinA;\r\n\t\t\t\t\tdirection.y = directionPointE.y * dirSinA;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tdirection.x = positionX * dirSinA;\r\n\t\t\t\t\tdirection.y = positionY * dirSinA;\r\n\t\t\t\t}\r\n\t\t\t\tdirection.z = dirCosA;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2:\r\n\t\t\t\tif (rand) {\r\n\t\t\t\t\trand.seed = randomSeeds[16];\r\n\t\t\t\t\tShapeUtils._randomPointInsideUnitCircle(ConeShape._tempPositionPoint, rand);\r\n\r\n\t\t\t\t} else {\r\n\t\t\t\t\tShapeUtils._randomPointInsideUnitCircle(ConeShape._tempPositionPoint);\r\n\t\t\t\t}\r\n\t\t\t\tpositionX = positionPointE.x;\r\n\t\t\t\tpositionY = positionPointE.y;\r\n\t\t\t\tposition.x = positionX * this.radius;\r\n\t\t\t\tposition.y = positionY * this.radius;\r\n\t\t\t\tposition.z = 0;\r\n\r\n\t\t\t\tdirection.x = positionX * dirSinA;\r\n\t\t\t\tdirection.y = positionY * dirSinA;\r\n\t\t\t\tdirection.z = dirCosA;\r\n\r\n\t\t\t\tVector3.normalize(direction, direction);\r\n\t\t\t\tif (rand) {\r\n\t\t\t\t\tVector3.scale(direction, this.length * rand.getFloat(), direction);\r\n\t\t\t\t\trandomSeeds[16] = rand.seed;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tVector3.scale(direction, this.length * Math.random(), direction);\r\n\t\t\t\t}\r\n\t\t\t\tVector3.add(position, direction, position);\r\n\r\n\t\t\t\tif (this.randomDirection) {\r\n\t\t\t\t\tif (rand) {\r\n\t\t\t\t\t\trand.seed = randomSeeds[17];\r\n\t\t\t\t\t\tShapeUtils._randomPointUnitSphere(direction, rand);\r\n\t\t\t\t\t\trandomSeeds[17] = rand.seed;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tShapeUtils._randomPointUnitSphere(direction);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbreak;\r\n\t\t\tcase 3:\r\n\t\t\t\tif (rand) {\r\n\t\t\t\t\trand.seed = randomSeeds[16];\r\n\t\t\t\t\tShapeUtils._randomPointUnitCircle(ConeShape._tempPositionPoint, rand);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tShapeUtils._randomPointUnitCircle(ConeShape._tempPositionPoint);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tpositionX = positionPointE.x;\r\n\t\t\t\tpositionY = positionPointE.y;\r\n\t\t\t\tposition.x = positionX * this.radius;\r\n\t\t\t\tposition.y = positionY * this.radius;\r\n\t\t\t\tposition.z = 0;\r\n\r\n\t\t\t\tdirection.x = positionX * dirSinA;\r\n\t\t\t\tdirection.y = positionY * dirSinA;\r\n\t\t\t\tdirection.z = dirCosA;\r\n\r\n\t\t\t\tVector3.normalize(direction, direction);\r\n\t\t\t\tif (rand) {\r\n\t\t\t\t\tVector3.scale(direction, this.length * rand.getFloat(), direction);\r\n\t\t\t\t\trandomSeeds[16] = rand.seed;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tVector3.scale(direction, this.length * Math.random(), direction);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tVector3.add(position, direction, position);\r\n\r\n\t\t\t\tif (this.randomDirection) {\r\n\t\t\t\t\tif (rand) {\r\n\t\t\t\t\t\trand.seed = randomSeeds[17];\r\n\t\t\t\t\t\tShapeUtils._randomPointUnitSphere(direction, rand);\r\n\t\t\t\t\t\trandomSeeds[17] = rand.seed;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tShapeUtils._randomPointUnitSphere(direction);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(\"ConeShape:emitType is invalid.\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @override\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tsuper.cloneTo(destObject);\r\n\t\tvar destShape: ConeShape = (<ConeShape>destObject);\r\n\t\tdestShape.angle = this.angle;\r\n\t\tdestShape.radius = this.radius;\r\n\t\tdestShape.length = this.length;\r\n\t\tdestShape.emitType = this.emitType;\r\n\t\tdestShape.randomDirection = this.randomDirection;\r\n\t}\r\n\r\n\t/**\r\n\t * @override\r\n\t * 克隆。\r\n\t * @return\t 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar destShape: ConeShape = new ConeShape();\r\n\t\tthis.cloneTo(destShape);\r\n\t\treturn destShape;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { BaseShape, ParticleSystemShapeType } from \"./BaseShape\";\r\nimport { ShapeUtils } from \"./ShapeUtils\";\r\nimport { BoundBox } from \"../../../../math/BoundBox\"\r\nimport { Rand } from \"../../../../math/Rand\"\r\nimport { Vector3 } from \"../../../../../maths/Vector3\";\r\n\r\n\r\n/**\r\n * <code>HemisphereShape</code> 类用于创建半球形粒子形状。\r\n */\r\nexport class HemisphereShape extends BaseShape {\r\n\t/**发射器半径。*/\r\n\tradius: number;\r\n\t/**从外壳发射。*/\r\n\temitFromShell: boolean;\r\n\r\n\t/**\r\n\t * 创建一个 <code>HemisphereShape</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.shapeType = ParticleSystemShapeType.Hemisphere;\r\n\t\tthis.radius = 1.0;\r\n\t\tthis.emitFromShell = false;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\tprotected _getShapeBoundBox(boundBox: BoundBox): void {\r\n\t\tvar min: Vector3 = boundBox.min;\r\n\t\tmin.x = min.y = min.z = -this.radius;\r\n\t\tvar max: Vector3 = boundBox.max;\r\n\t\tmax.x = max.y = this.radius;\r\n\t\tmax.z = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\tprotected _getSpeedBoundBox(boundBox: BoundBox): void {\r\n\t\tvar min: Vector3 = boundBox.min;\r\n\t\tmin.x = min.y = -1;\r\n\t\tmin.z = 0;\r\n\t\tvar max: Vector3 = boundBox.max;\r\n\t\tmax.x = max.y = max.z = 1;\r\n\t}\r\n\r\n\t/**\r\n\t *  用于生成粒子初始位置和方向。\r\n\t * @param\tposition 粒子位置。\r\n\t * @param\tdirection 粒子方向。\r\n\t * @override\r\n\t */\r\n\tgeneratePositionAndDirection(position: Vector3, direction: Vector3, rand: Rand = null, randomSeeds: Uint32Array = null): void {\r\n\t\tif (rand) {\r\n\t\t\trand.seed = randomSeeds[16];\r\n\t\t\tif (this.emitFromShell)\r\n\t\t\t\tShapeUtils._randomPointUnitSphere(position, rand);\r\n\t\t\telse\r\n\t\t\t\tShapeUtils._randomPointInsideUnitSphere(position, rand);\r\n\t\t\trandomSeeds[16] = rand.seed;\r\n\t\t} else {\r\n\t\t\tif (this.emitFromShell)\r\n\t\t\t\tShapeUtils._randomPointUnitSphere(position);\r\n\t\t\telse\r\n\t\t\t\tShapeUtils._randomPointInsideUnitSphere(position);\r\n\t\t}\r\n\r\n\t\tVector3.scale(position, this.radius, position);\r\n\r\n\t\tvar z: number = position.z;\r\n\t\t(z < 0.0) && (position.z = z * -1.0);\r\n\r\n\t\tif (this.randomDirection) {\r\n\t\t\tif (rand) {\r\n\t\t\t\trand.seed = randomSeeds[17];\r\n\t\t\t\tShapeUtils._randomPointUnitSphere(direction, rand);\r\n\t\t\t\trandomSeeds[17] = rand.seed;\r\n\t\t\t} else {\r\n\t\t\t\tShapeUtils._randomPointUnitSphere(direction);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tposition.cloneTo(direction);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @override\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tsuper.cloneTo(destObject);\r\n\t\tvar destShape: HemisphereShape = (<HemisphereShape>destObject);\r\n\t\tdestShape.radius = this.radius;\r\n\t\tdestShape.emitFromShell = this.emitFromShell;\r\n\t\tdestShape.randomDirection = this.randomDirection;\r\n\t}\r\n\r\n\t/**\r\n\t * @override\r\n\t * 克隆。\r\n\t * @return\t 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar destShape: HemisphereShape = new HemisphereShape();\r\n\t\tthis.cloneTo(destShape);\r\n\t\treturn destShape;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { BaseShape, ParticleSystemShapeType } from \"./BaseShape\";\r\nimport { ShapeUtils } from \"./ShapeUtils\";\r\nimport { BoundBox } from \"../../../../math/BoundBox\"\r\nimport { Rand } from \"../../../../math/Rand\"\r\nimport { Vector3 } from \"../../../../../maths/Vector3\";\r\n\r\n/**\r\n * <code>SphereShape</code> 类用于创建球形粒子形状。\r\n */\r\nexport class SphereShape extends BaseShape {\r\n\t/**发射器半径。*/\r\n\tradius: number;\r\n\t/**从外壳发射。*/\r\n\temitFromShell: boolean;\r\n\r\n\t/**\r\n\t * 创建一个 <code>SphereShape</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.shapeType = ParticleSystemShapeType.Sphere;\r\n\t\tthis.radius = 1.0;\r\n\t\tthis.emitFromShell = false;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\tprotected _getShapeBoundBox(boundBox: BoundBox): void {\r\n\t\tvar min: Vector3 = boundBox.min;\r\n\t\tmin.x = min.y = min.z = -this.radius;\r\n\t\tvar max: Vector3 = boundBox.max;\r\n\t\tmax.x = max.y = max.z = this.radius;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\tprotected _getSpeedBoundBox(boundBox: BoundBox): void {\r\n\t\tvar min: Vector3 = boundBox.min;\r\n\t\tmin.x = min.y = min.z = -1;\r\n\t\tvar max: Vector3 = boundBox.max;\r\n\t\tmax.x = max.y = max.z = 1;\r\n\t}\r\n\r\n\t/**\r\n\t *  用于生成粒子初始位置和方向。\r\n\t * @param\tposition 粒子位置。\r\n\t * @param\tdirection 粒子方向。\r\n\t * @override\r\n\t */\r\n\tgeneratePositionAndDirection(position: Vector3, direction: Vector3, rand: Rand = null, randomSeeds: Uint32Array = null): void {\r\n\t\tif (rand) {\r\n\t\t\trand.seed = randomSeeds[16];\r\n\t\t\tif (this.emitFromShell)\r\n\t\t\t\tShapeUtils._randomPointUnitSphere(position, rand);\r\n\t\t\telse\r\n\t\t\t\tShapeUtils._randomPointInsideUnitSphere(position, rand);\r\n\t\t\trandomSeeds[16] = rand.seed;\r\n\t\t} else {\r\n\t\t\tif (this.emitFromShell)\r\n\t\t\t\tShapeUtils._randomPointUnitSphere(position);\r\n\t\t\telse\r\n\t\t\t\tShapeUtils._randomPointInsideUnitSphere(position);\r\n\t\t}\r\n\r\n\t\tVector3.scale(position, this.radius, position);\r\n\r\n\t\tif (this.randomDirection) {\r\n\t\t\tif (rand) {\r\n\t\t\t\trand.seed = randomSeeds[17];\r\n\t\t\t\tShapeUtils._randomPointUnitSphere(direction, rand);\r\n\t\t\t\trandomSeeds[17] = rand.seed;\r\n\t\t\t} else {\r\n\t\t\t\tShapeUtils._randomPointUnitSphere(direction);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tposition.cloneTo(direction);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @override\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tsuper.cloneTo(destObject);\r\n\t\tvar destShape: SphereShape = (<SphereShape>destObject);\r\n\t\tdestShape.radius = this.radius;\r\n\t\tdestShape.emitFromShell = this.emitFromShell;\r\n\t\tdestShape.randomDirection = this.randomDirection;\r\n\t}\r\n\r\n\t/**\r\n\t * @override\r\n\t * 克隆。\r\n\t * @return\t 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar destShape: SphereShape = new SphereShape();\r\n\t\tthis.cloneTo(destShape);\r\n\t\treturn destShape;\r\n\t}\r\n}\r\n\r\n\r\n","import { GradientSize } from \"./GradientSize\";\r\nimport { IClone } from \"../../../../utils/IClone\"\r\n\r\n/**\r\n * <code>SizeOverLifetime</code> 类用于粒子的生命周期尺寸。\r\n */\r\nexport class SizeOverLifetime implements IClone {\r\n\tprivate _size: GradientSize;\r\n\r\n\t/**是否启用*/\r\n\tenable: boolean;\r\n\r\n\t/**\r\n\t *获取尺寸。\r\n\t */\r\n\tget size(): GradientSize {\r\n\t\treturn this._size;\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>SizeOverLifetime</code> 实例。\r\n\t */\r\n\tconstructor(size: GradientSize) {\r\n\t\tthis._size = size;\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @param\tdestObject 克隆源。\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tvar destSizeOverLifetime: SizeOverLifetime = (<SizeOverLifetime>destObject);\r\n\t\tthis._size.cloneTo(destSizeOverLifetime._size);\r\n\t\tdestSizeOverLifetime.enable = this.enable;\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @return\t 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar destSize: GradientSize;\r\n\t\tswitch (this._size.type) {\r\n\t\t\tcase 0:\r\n\t\t\t\tif (this._size.separateAxes)\r\n\t\t\t\t\tdestSize = GradientSize.createByGradientSeparate(this._size.gradientX.clone(), this._size.gradientY.clone(), this._size.gradientZ.clone());\r\n\t\t\t\telse\r\n\t\t\t\t\tdestSize = GradientSize.createByGradient(this._size.gradient.clone());\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1:\r\n\t\t\t\tif (this._size.separateAxes)\r\n\t\t\t\t\tdestSize = GradientSize.createByRandomTwoConstantSeparate(this._size.constantMinSeparate.clone(), this._size.constantMaxSeparate.clone());\r\n\t\t\t\telse\r\n\t\t\t\t\tdestSize = GradientSize.createByRandomTwoConstant(this._size.constantMin, this._size.constantMax);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2:\r\n\t\t\t\tif (this._size.separateAxes)\r\n\t\t\t\t\tdestSize = GradientSize.createByRandomTwoGradientSeparate(this._size.gradientXMin.clone(), this._size.gradientYMin.clone(), this._size.gradientZMin.clone(), this._size.gradientXMax.clone(), this._size.gradientYMax.clone(), this._size.gradientZMax.clone());\r\n\t\t\t\telse\r\n\t\t\t\t\tdestSize = GradientSize.createByRandomTwoGradient(this._size.gradientMin.clone(), this._size.gradientMax.clone());\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\tvar destSizeOverLifetime: SizeOverLifetime = new SizeOverLifetime(destSize);\r\n\t\tdestSizeOverLifetime.enable = this.enable;\r\n\t\treturn destSizeOverLifetime;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { IClone } from \"../../../../utils/IClone\"\r\n\r\n/**\r\n * <code>StartFrame</code> 类用于创建开始帧。\r\n */\r\nexport class StartFrame implements IClone {\r\n\t/**\r\n\t * 通过随机常量旋转创建一个 <code>StartFrame</code> 实例。\r\n\t * @param\tconstant  固定帧。\r\n\t * @return 开始帧。\r\n\t */\r\n\tstatic createByConstant(constant: number = 0): StartFrame {\r\n\t\tvar rotationOverLifetime: StartFrame = new StartFrame();\r\n\t\trotationOverLifetime._type = 0;\r\n\t\trotationOverLifetime._constant = constant;\r\n\t\treturn rotationOverLifetime;\r\n\t}\r\n\r\n\t/**\r\n\t *  通过随机双常量旋转创建一个 <code>StartFrame</code> 实例。\r\n\t * @param\tconstantMin 最小固定帧。\r\n\t * @param\tconstantMax 最大固定帧。\r\n\t * @return 开始帧。\r\n\t */\r\n\tstatic createByRandomTwoConstant(constantMin: number = 0, constantMax: number = 0): StartFrame {\r\n\t\tvar rotationOverLifetime: StartFrame = new StartFrame();\r\n\t\trotationOverLifetime._type = 1;\r\n\t\trotationOverLifetime._constantMin = constantMin;\r\n\t\trotationOverLifetime._constantMax = constantMax;\r\n\t\treturn rotationOverLifetime;\r\n\t}\r\n\r\n\r\n\tprivate _type: number = 0;\r\n\tprivate _constant: number = 0;\r\n\tprivate _constantMin: number = 0;\r\n\tprivate _constantMax: number = 0;\r\n\r\n\t/**\r\n\t *开始帧类型,0常量模式，1随机双常量模式。\r\n\t */\r\n\tget type(): number {\r\n\t\treturn this._type;\r\n\t}\r\n\r\n\t/**\r\n\t * 固定帧。\r\n\t */\r\n\tget constant(): number {\r\n\t\treturn this._constant;\r\n\t}\r\n\r\n\t/**\r\n\t * 最小固定帧。\r\n\t */\r\n\tget constantMin(): number {\r\n\t\treturn this._constantMin;\r\n\t}\r\n\r\n\t/**\r\n\t * 最大固定帧。\r\n\t */\r\n\tget constantMax(): number {\r\n\t\treturn this._constantMax;\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>StartFrame,不允许new，请使用静态创建函数。</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @param\tdestObject 克隆源。\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tvar destStartFrame: StartFrame = (<StartFrame>destObject);\r\n\t\tdestStartFrame._type = this._type;\r\n\t\tdestStartFrame._constant = this._constant;\r\n\t\tdestStartFrame._constantMin = this._constantMin;\r\n\t\tdestStartFrame._constantMax = this._constantMax;\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @return\t 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar destStartFrame: StartFrame = new StartFrame();\r\n\t\tthis.cloneTo(destStartFrame);\r\n\t\treturn destStartFrame;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { FrameOverTime } from \"./FrameOverTime\";\r\nimport { StartFrame } from \"./StartFrame\";\r\nimport { IClone } from \"../../../../utils/IClone\"\r\nimport { Vector2 } from \"../../../../maths/Vector2\";\r\n\r\n/**\r\n * <code>TextureSheetAnimation</code> 类用于创建粒子帧动画。\r\n */\r\nexport class TextureSheetAnimation implements IClone {\r\n\t/**@internal */\r\n\tprivate _frame: FrameOverTime;\r\n\t/**@internal */\r\n\tprivate _startFrame: StartFrame;\r\n\r\n\t/**纹理平铺。*/\r\n\ttiles: Vector2;\r\n\t/**类型,0为whole sheet、1为singal row。*/\r\n\ttype: number = 0;\r\n\t/**是否随机行，type为1时有效。*/\r\n\trandomRow: boolean = false;\r\n\t/**行索引,type为1时有效。*/\r\n\trowIndex: number = 0;\r\n\t/**循环次数。*/\r\n\tcycles: number = 0;\r\n\t/**UV通道类型,0为Noting,1为Everything,待补充,暂不支持。*/\r\n\tenableUVChannels: number = 0;\r\n\t/**是否启用*/\r\n\tenable: boolean = false;\r\n\r\n\t/**获取时间帧率。*/\r\n\tget frame(): FrameOverTime {\r\n\t\treturn this._frame;\r\n\t}\r\n\r\n\t/**获取开始帧率。*/\r\n\tget startFrame(): StartFrame {\r\n\t\treturn this._startFrame;\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>TextureSheetAnimation</code> 实例。\r\n\t * @param frame 动画帧。\r\n\t * @param  startFrame 开始帧。\r\n\t */\r\n\tconstructor(frame: FrameOverTime, startFrame: StartFrame) {\r\n\t\tthis.tiles = new Vector2(1, 1);\r\n\t\tthis.type = 0;\r\n\t\tthis.randomRow = true;\r\n\t\tthis.rowIndex = 0;\r\n\t\tthis.cycles = 1;\r\n\t\tthis.enableUVChannels = 1;//TODO:待补充\r\n\t\tthis._frame = frame;\r\n\t\tthis._startFrame = startFrame;\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @param\tdestObject 克隆源。\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tvar destTextureSheetAnimation: TextureSheetAnimation = (<TextureSheetAnimation>destObject);\r\n\t\tthis.tiles.cloneTo(destTextureSheetAnimation.tiles);\r\n\t\tdestTextureSheetAnimation.type = this.type;\r\n\t\tdestTextureSheetAnimation.randomRow = this.randomRow;\r\n\t\tdestTextureSheetAnimation.rowIndex = this.rowIndex;\r\n\t\tdestTextureSheetAnimation.cycles = this.cycles;\r\n\t\tdestTextureSheetAnimation.enableUVChannels = this.enableUVChannels;\r\n\t\tdestTextureSheetAnimation.enable = this.enable;\r\n\t\tthis._frame.cloneTo(destTextureSheetAnimation._frame);\r\n\t\tthis._startFrame.cloneTo(destTextureSheetAnimation._startFrame);\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @return\t 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar destFrame: FrameOverTime;\r\n\t\tswitch (this._frame.type) {\r\n\t\t\tcase 0:\r\n\t\t\t\tdestFrame = FrameOverTime.createByConstant(this._frame.constant);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1:\r\n\t\t\t\tdestFrame = FrameOverTime.createByOverTime(this._frame.frameOverTimeData.clone());\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2:\r\n\t\t\t\tdestFrame = FrameOverTime.createByRandomTwoConstant(this._frame.constantMin, this._frame.constantMax);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 3:\r\n\t\t\t\tdestFrame = FrameOverTime.createByRandomTwoOverTime(this._frame.frameOverTimeDataMin.clone(), this._frame.frameOverTimeDataMax.clone());\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\tvar destStartFrame: StartFrame;\r\n\t\tswitch (this._startFrame.type) {\r\n\t\t\tcase 0:\r\n\t\t\t\tdestStartFrame = StartFrame.createByConstant(this._startFrame.constant);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1:\r\n\t\t\t\tdestStartFrame = StartFrame.createByRandomTwoConstant(this._startFrame.constantMin, this._startFrame.constantMax);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\tvar destTextureSheetAnimation: TextureSheetAnimation = new TextureSheetAnimation(destFrame, destStartFrame);\r\n\t\tthis.cloneTo(destTextureSheetAnimation);\r\n\t\treturn destTextureSheetAnimation;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { IClone } from \"../../../../utils/IClone\";\r\nimport { GradientVelocity } from \"./GradientVelocity\";\r\n\r\n/**\r\n * <code>VelocityOverLifetime</code> 类用于粒子的生命周期速度。\r\n */\r\nexport class VelocityOverLifetime implements IClone {\r\n\t/**@internal */\r\n\tprivate _velocity: GradientVelocity;\r\n\r\n\t/**是否启用*/\r\n\tenable: boolean = false;\r\n\t/**速度空间,0为local,1为world。*/\r\n\tspace: number = 0;\r\n\r\n\t/**\r\n\t *获取尺寸。\r\n\t */\r\n\tget velocity(): GradientVelocity {\r\n\t\treturn this._velocity;\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>VelocityOverLifetime</code> 实例。\r\n\t */\r\n\tconstructor(velocity: GradientVelocity) {\r\n\t\tthis._velocity = velocity;\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @param\tdestObject 克隆源。\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tvar destVelocityOverLifetime: VelocityOverLifetime = (<VelocityOverLifetime>destObject);\r\n\t\tthis._velocity.cloneTo(destVelocityOverLifetime._velocity);\r\n\t\tdestVelocityOverLifetime.enable = this.enable;\r\n\t\tdestVelocityOverLifetime.space = this.space;\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @return\t 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar destVelocity: GradientVelocity;\r\n\t\tswitch (this._velocity.type) {\r\n\t\t\tcase 0:\r\n\t\t\t\tdestVelocity = GradientVelocity.createByConstant(this._velocity.constant.clone());\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1:\r\n\t\t\t\tdestVelocity = GradientVelocity.createByGradient(this._velocity.gradientX.clone(), this._velocity.gradientY.clone(), this._velocity.gradientZ.clone());\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2:\r\n\t\t\t\tdestVelocity = GradientVelocity.createByRandomTwoConstant(this._velocity.constantMin.clone(), this._velocity.constantMax.clone());\r\n\t\t\t\tbreak;\r\n\t\t\tcase 3:\r\n\t\t\t\tdestVelocity = GradientVelocity.createByRandomTwoGradient(this._velocity.gradientXMin.clone(), this._velocity.gradientXMax.clone(), this._velocity.gradientYMin.clone(), this._velocity.gradientYMax.clone(), this._velocity.gradientZMin.clone(), this._velocity.gradientZMax.clone());\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\tvar destVelocityOverLifetime: VelocityOverLifetime = new VelocityOverLifetime(destVelocity);\r\n\t\tdestVelocityOverLifetime.enable = this.enable;\r\n\t\tdestVelocityOverLifetime.space = this.space;\r\n\t\treturn destVelocityOverLifetime;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","\r\n\r\n/**\r\n * @internal\r\n * @author ...\r\n */\r\nexport class VertexShuriKenParticle {\r\n\t//TODO Attribute\r\n\tstatic PARTICLE_DIRECTIONTIME: number = 0;\r\n\tstatic PARTICLE_POSITION0: number = 1;\r\n\tstatic PARTICLE_COLOR0: number = 2;\r\n\tstatic PARTICLE_TEXTURECOORDINATE0: number = 3;\r\n\tstatic PARTICLE_SHAPEPOSITIONSTARTLIFETIME: number = 4;\r\n\tstatic PARTICLE_CORNERTEXTURECOORDINATE0: number = 5;\r\n\tstatic PARTICLE_STARTCOLOR0: number = 6;\r\n\tstatic PARTICLE_ENDCOLOR0: number = 7;\r\n\tstatic PARTICLE_STARTSIZE: number = 8;\r\n\tstatic PARTICLE_STARTROTATION: number = 9;\r\n\tstatic PARTICLE_STARTSPEED: number = 10;\r\n\tstatic PARTICLE_RANDOM0: number = 11;\r\n\tstatic PARTICLE_RANDOM1: number = 12;\r\n\tstatic PARTICLE_SIMULATIONWORLDPOSTION: number = 13;\r\n\tstatic PARTICLE_SIMULATIONWORLDROTATION: number = 14;\r\n\tstatic PARTICLE_SIMULATIONUV:number = 15;\r\n\r\n\tconstructor() {\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { VertexShuriKenParticle } from \"./VertexShuriKenParticle\";\r\nimport { VertexDeclaration } from \"../../../RenderEngine/VertexDeclaration\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\nimport { Vector4 } from \"../../../maths/Vector4\";\r\nimport { VertexElementFormat } from \"../../../renders/VertexElementFormat\";\r\nimport { VertexElement } from \"../../../renders/VertexElement\";\r\n\r\n/**\r\n * @internal\r\n * <code>VertexShurikenParticle</code> 类用于创建粒子顶点结构。\r\n */\r\nexport class VertexShurikenParticleBillboard extends VertexShuriKenParticle {\r\n\t/**@internal */\r\n\tprivate static _vertexDeclaration: VertexDeclaration;\r\n\r\n\tstatic get vertexDeclaration(): VertexDeclaration {\r\n\t\treturn VertexShurikenParticleBillboard._vertexDeclaration;\r\n\t}\r\n\r\n\tprivate static _vertexInstanceMeshDeclaration: VertexDeclaration;\r\n\r\n\tstatic get vertexInstanceMeshDeclaration(): VertexDeclaration {\r\n\t\treturn VertexShurikenParticleBillboard._vertexInstanceMeshDeclaration;\r\n\t}\r\n\r\n\tprivate static _vertexInstanceParticleDeclaration: VertexDeclaration;\r\n\r\n\tstatic get vertexInstanceParticleDeclaration(): VertexDeclaration {\r\n\t\treturn VertexShurikenParticleBillboard._vertexInstanceParticleDeclaration;\r\n\t}\r\n\r\n\tprivate static _billboardVertexArray: Float32Array;\r\n\tstatic get billboardVertexArray(): Float32Array {\r\n\t\treturn VertexShurikenParticleBillboard._billboardVertexArray;\r\n\t}\r\n\r\n\tprivate static _billboardIndexArray: Uint16Array;\r\n\tstatic get billboardIndexArray(): Uint16Array {\r\n\t\treturn VertexShurikenParticleBillboard._billboardIndexArray;\r\n\t}\r\n\tstatic set billboardIndexArray(value: Uint16Array) {\r\n\t\tVertexShurikenParticleBillboard._billboardIndexArray = value;\r\n\t}\r\n\r\n\t/**\r\n\t  * @internal\r\n\t  */\r\n\tstatic __init__(): void {\r\n\t\tVertexShurikenParticleBillboard._vertexDeclaration = new VertexDeclaration(168, [\r\n\t\t\tnew VertexElement(0, VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_CORNERTEXTURECOORDINATE0),\r\n\t\t\tnew VertexElement(16, VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_SHAPEPOSITIONSTARTLIFETIME),\r\n\t\t\tnew VertexElement(32, VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_DIRECTIONTIME),\r\n\t\t\tnew VertexElement(48, VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_STARTCOLOR0),\r\n\t\t\tnew VertexElement(64, VertexElementFormat.Vector3, VertexShuriKenParticle.PARTICLE_STARTSIZE),\r\n\t\t\tnew VertexElement(76, VertexElementFormat.Vector3, VertexShuriKenParticle.PARTICLE_STARTROTATION),\r\n\t\t\tnew VertexElement(88, VertexElementFormat.Single, VertexShuriKenParticle.PARTICLE_STARTSPEED),\r\n\t\t\tnew VertexElement(92, VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_RANDOM0),\r\n\t\t\tnew VertexElement(108, VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_RANDOM1),\r\n\t\t\tnew VertexElement(124, VertexElementFormat.Vector3, VertexShuriKenParticle.PARTICLE_SIMULATIONWORLDPOSTION),//TODO:local模式下可省去内存\r\n\t\t\tnew VertexElement(136, VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_SIMULATIONWORLDROTATION),\r\n\t\t\tnew VertexElement(152, VertexElementFormat.Vector4,VertexShuriKenParticle.PARTICLE_SIMULATIONUV)\r\n\t\t]);\r\n\r\n\r\n\t\tVertexShurikenParticleBillboard._vertexInstanceMeshDeclaration = new VertexDeclaration(16, [\r\n\t\t\tnew VertexElement(0, VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_CORNERTEXTURECOORDINATE0)\r\n\t\t]);\r\n\r\n\t\tVertexShurikenParticleBillboard._vertexInstanceParticleDeclaration = new VertexDeclaration(152, [\r\n\t\t\tnew VertexElement(0, VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_SHAPEPOSITIONSTARTLIFETIME),\r\n\t\t\tnew VertexElement(16, VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_DIRECTIONTIME),\r\n\t\t\tnew VertexElement(32, VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_STARTCOLOR0),\r\n\t\t\tnew VertexElement(48, VertexElementFormat.Vector3, VertexShuriKenParticle.PARTICLE_STARTSIZE),\r\n\t\t\tnew VertexElement(60, VertexElementFormat.Vector3, VertexShuriKenParticle.PARTICLE_STARTROTATION),\r\n\t\t\tnew VertexElement(72, VertexElementFormat.Single, VertexShuriKenParticle.PARTICLE_STARTSPEED),\r\n\t\t\tnew VertexElement(76, VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_RANDOM0),\r\n\t\t\tnew VertexElement(92, VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_RANDOM1),\r\n\t\t\tnew VertexElement(108, VertexElementFormat.Vector3, VertexShuriKenParticle.PARTICLE_SIMULATIONWORLDPOSTION),//TODO:local模式下可省去内存\r\n\t\t\tnew VertexElement(120, VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_SIMULATIONWORLDROTATION),\r\n\t\t\tnew VertexElement(136, VertexElementFormat.Vector4,VertexShuriKenParticle.PARTICLE_SIMULATIONUV)\r\n\t\t])\r\n\r\n\t\tVertexShurikenParticleBillboard._billboardIndexArray = new Uint16Array([\r\n\t\t\t0, 2, 1, 0, 3, 2\r\n\t\t]);\r\n\r\n\t\tVertexShurikenParticleBillboard._billboardVertexArray = new Float32Array([\r\n\t\t\t-0.5, -0.5, 0, 1,\r\n\t\t\t0.5, -0.5, 1, 1,\r\n\t\t\t0.5, 0.5, 1, 0,\r\n\t\t\t-0.5, 0.5, 0, 0\r\n\t\t]);\r\n\t}\r\n\r\n\t/**@internal */\r\n\tprivate _cornerTextureCoordinate: Vector4;\r\n\t/**@internal */\r\n\tprivate _positionStartLifeTime: Vector4;\r\n\t/**@internal */\r\n\tprivate _velocity: Vector3;\r\n\t/**@internal */\r\n\tprivate _startColor: Vector4;\r\n\t/**@internal */\r\n\tprivate _startSize: Vector3;\r\n\t/**@internal */\r\n\tprivate _startRotation0: Vector3;\r\n\t/**@internal */\r\n\tprivate _startRotation1: Vector3;\r\n\t/**@internal */\r\n\tprivate _startRotation2: Vector3;\r\n\t/**@internal */\r\n\tprivate _startLifeTime: number;\r\n\t/**@internal */\r\n\tprivate _time: number;\r\n\t/**@internal */\r\n\tprivate _startSpeed: number;\r\n\t/**@internal */\r\n\tprivate _randoms0: Vector4;\r\n\t/**@internal */\r\n\tprivate _randoms1: Vector4;\r\n\t/**@internal */\r\n\tprivate _simulationWorldPostion: Vector3;\r\n\r\n\tget cornerTextureCoordinate(): Vector4 {\r\n\t\treturn this._cornerTextureCoordinate;\r\n\t}\r\n\r\n\tget positionStartLifeTime(): Vector4 {\r\n\t\treturn this._positionStartLifeTime;\r\n\t}\r\n\r\n\tget velocity(): Vector3 {\r\n\t\treturn this._velocity;\r\n\t}\r\n\r\n\tget startColor(): Vector4 {\r\n\t\treturn this._startColor;\r\n\t}\r\n\r\n\tget startSize(): Vector3 {\r\n\t\treturn this._startSize;\r\n\t}\r\n\r\n\tget startRotation0(): Vector3 {\r\n\t\treturn this._startRotation0;\r\n\t}\r\n\r\n\tget startRotation1(): Vector3 {\r\n\t\treturn this._startRotation1;\r\n\t}\r\n\r\n\tget startRotation2(): Vector3 {\r\n\t\treturn this._startRotation2;\r\n\t}\r\n\r\n\tget startLifeTime(): number {\r\n\t\treturn this._startLifeTime;\r\n\t}\r\n\r\n\tget time(): number {\r\n\t\treturn this._time;\r\n\t}\r\n\r\n\tget startSpeed(): number {\r\n\t\treturn this._startSpeed;\r\n\t}\r\n\r\n\tget random0(): Vector4 {\r\n\t\treturn this._randoms0;\r\n\t}\r\n\r\n\tget random1(): Vector4 {\r\n\t\treturn this._randoms1;\r\n\t}\r\n\r\n\tget simulationWorldPostion(): Vector3 {\r\n\t\treturn this._simulationWorldPostion;\r\n\t}\r\n\r\n\tconstructor(cornerTextureCoordinate: Vector4, positionStartLifeTime: Vector4, velocity: Vector3, startColor: Vector4, startSize: Vector3, startRotation0: Vector3, startRotation1: Vector3, startRotation2: Vector3, ageAddScale: number, time: number, startSpeed: number, randoms0: Vector4, randoms1: Vector4, simulationWorldPostion: Vector3) {\r\n\t\tsuper();\r\n\t\tthis._cornerTextureCoordinate = cornerTextureCoordinate;\r\n\t\tthis._positionStartLifeTime = positionStartLifeTime;\r\n\t\tthis._velocity = velocity;\r\n\t\tthis._startColor = startColor;\r\n\t\tthis._startSize = startSize;\r\n\t\tthis._startRotation0 = startRotation0;\r\n\t\tthis._startRotation1 = startRotation1;\r\n\t\tthis._startRotation2 = startRotation2;\r\n\t\tthis._startLifeTime = ageAddScale;\r\n\t\tthis._time = time;\r\n\t\tthis._startSpeed = startSpeed;\r\n\t\tthis._randoms0 = randoms0;\r\n\t\tthis._randoms1 = randoms1;\r\n\t\tthis._simulationWorldPostion = simulationWorldPostion;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { VertexShuriKenParticle } from \"./VertexShuriKenParticle\";\r\nimport { VertexDeclaration } from \"../../../RenderEngine/VertexDeclaration\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\nimport { Vector4 } from \"../../../maths/Vector4\";\r\nimport { VertexElementFormat } from \"../../../renders/VertexElementFormat\";\r\nimport { VertexElement } from \"../../../renders/VertexElement\";\r\n\r\n/**\r\n * @internal\r\n * <code>VertexShurikenParticle</code> 类用于创建粒子顶点结构。\r\n */\r\nexport class VertexShurikenParticleMesh extends VertexShuriKenParticle {\r\n\t/**@internal */\r\n\tprivate static _vertexDeclaration: VertexDeclaration;\r\n\r\n\t/**\r\n  * @internal\r\n  */\r\n\tstatic __init__(): void {\r\n\t\tVertexShurikenParticleMesh._vertexDeclaration = new VertexDeclaration(188, [new VertexElement(0, VertexElementFormat.Vector3, VertexShuriKenParticle.PARTICLE_POSITION0),\r\n\t\tnew VertexElement(12, VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_COLOR0),\r\n\t\tnew VertexElement(28, VertexElementFormat.Vector2, VertexShuriKenParticle.PARTICLE_TEXTURECOORDINATE0),\r\n\t\tnew VertexElement(36, VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_SHAPEPOSITIONSTARTLIFETIME),\r\n\t\tnew VertexElement(52, VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_DIRECTIONTIME),\r\n\t\tnew VertexElement(68, VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_STARTCOLOR0),\r\n\t\tnew VertexElement(84, VertexElementFormat.Vector3, VertexShuriKenParticle.PARTICLE_STARTSIZE),\r\n\t\tnew VertexElement(96, VertexElementFormat.Vector3, VertexShuriKenParticle.PARTICLE_STARTROTATION),\r\n\t\tnew VertexElement(108, VertexElementFormat.Single, VertexShuriKenParticle.PARTICLE_STARTSPEED),\r\n\t\tnew VertexElement(112, VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_RANDOM0),\r\n\t\tnew VertexElement(128, VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_RANDOM1),\r\n\t\tnew VertexElement(144, VertexElementFormat.Vector3, VertexShuriKenParticle.PARTICLE_SIMULATIONWORLDPOSTION),//TODO:local模式下可省去内存\r\n\t\tnew VertexElement(156, VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_SIMULATIONWORLDROTATION),\r\n\t\tnew VertexElement(172,VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_SIMULATIONUV)]);\r\n\t\t\r\n\t\t\r\n\t\tVertexShurikenParticleMesh._vertexInstanceMeshDeclaration = new VertexDeclaration(36, [\r\n\t\t\tnew VertexElement(0, VertexElementFormat.Vector3, VertexShuriKenParticle.PARTICLE_POSITION0),\r\n\t\t\tnew VertexElement(12, VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_COLOR0),\r\n\t\t\tnew VertexElement(28, VertexElementFormat.Vector2, VertexShuriKenParticle.PARTICLE_TEXTURECOORDINATE0)\r\n\t\t]);\r\n\r\n\t\tVertexShurikenParticleMesh._vertexInstanceParticleDeclaration = new VertexDeclaration(152, [\r\n\t\t\tnew VertexElement(0, VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_SHAPEPOSITIONSTARTLIFETIME),\r\n\t\t\tnew VertexElement(16, VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_DIRECTIONTIME),\r\n\t\t\tnew VertexElement(32, VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_STARTCOLOR0),\r\n\t\t\tnew VertexElement(48, VertexElementFormat.Vector3, VertexShuriKenParticle.PARTICLE_STARTSIZE),\r\n\t\t\tnew VertexElement(60, VertexElementFormat.Vector3, VertexShuriKenParticle.PARTICLE_STARTROTATION),\r\n\t\t\tnew VertexElement(72, VertexElementFormat.Single, VertexShuriKenParticle.PARTICLE_STARTSPEED),\r\n\t\t\tnew VertexElement(76, VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_RANDOM0),\r\n\t\t\tnew VertexElement(92, VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_RANDOM1),\r\n\t\t\tnew VertexElement(108, VertexElementFormat.Vector3, VertexShuriKenParticle.PARTICLE_SIMULATIONWORLDPOSTION),//TODO:local模式下可省去内存\r\n\t\t\tnew VertexElement(120, VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_SIMULATIONWORLDROTATION),\r\n\t\t\tnew VertexElement(136,VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_SIMULATIONUV)\r\n\t\t]);\r\n\t}\r\n\r\n\tstatic get vertexDeclaration(): VertexDeclaration {\r\n\t\treturn VertexShurikenParticleMesh._vertexDeclaration;\r\n\t}\r\n\r\n\tprivate static _vertexInstanceMeshDeclaration: VertexDeclaration;\r\n\tstatic get vertexInstanceMeshDeclaration(): VertexDeclaration {\r\n\t\treturn VertexShurikenParticleMesh._vertexInstanceMeshDeclaration;\r\n\t}\r\n\r\n\tprivate static _vertexInstanceParticleDeclaration: VertexDeclaration;\r\n\tstatic get vertexInstanceParticleDeclaration(): VertexDeclaration {\r\n\t\treturn VertexShurikenParticleMesh._vertexInstanceParticleDeclaration;\r\n\t}\r\n\r\n\t/**@internal */\r\n\tprivate _cornerTextureCoordinate: Vector4;\r\n\t/**@internal */\r\n\tprivate _positionStartLifeTime: Vector4;\r\n\t/**@internal */\r\n\tprivate _velocity: Vector3;\r\n\t/**@internal */\r\n\tprivate _startColor: Vector4;\r\n\t/**@internal */\r\n\tprivate _startSize: Vector3;\r\n\t/**@internal */\r\n\tprivate _startRotation0: Vector3;\r\n\t/**@internal */\r\n\tprivate _startRotation1: Vector3;\r\n\t/**@internal */\r\n\tprivate _startRotation2: Vector3;\r\n\t/**@internal */\r\n\tprivate _startLifeTime: number;\r\n\t/**@internal */\r\n\tprivate _time: number;\r\n\t/**@internal */\r\n\tprivate _startSpeed: number;\r\n\t/**@internal */\r\n\tprivate _randoms0: Vector4;\r\n\t/**@internal */\r\n\tprivate _randoms1: Vector4;\r\n\t/**@internal */\r\n\tprivate _simulationWorldPostion: Vector3;\r\n\r\n\tget cornerTextureCoordinate(): Vector4 {\r\n\t\treturn this._cornerTextureCoordinate;\r\n\t}\r\n\r\n\tget position(): Vector4 {\r\n\t\treturn this._positionStartLifeTime;\r\n\t}\r\n\r\n\tget velocity(): Vector3 {\r\n\t\treturn this._velocity;\r\n\t}\r\n\r\n\tget startColor(): Vector4 {\r\n\t\treturn this._startColor;\r\n\t}\r\n\r\n\tget startSize(): Vector3 {\r\n\t\treturn this._startSize;\r\n\t}\r\n\r\n\tget startRotation0(): Vector3 {\r\n\t\treturn this._startRotation0;\r\n\t}\r\n\r\n\tget startRotation1(): Vector3 {\r\n\t\treturn this._startRotation1;\r\n\t}\r\n\r\n\tget startRotation2(): Vector3 {\r\n\t\treturn this._startRotation2;\r\n\t}\r\n\r\n\tget startLifeTime(): number {\r\n\t\treturn this._startLifeTime;\r\n\t}\r\n\r\n\tget time(): number {\r\n\t\treturn this._time;\r\n\t}\r\n\r\n\tget startSpeed(): number {\r\n\t\treturn this._startSpeed;\r\n\t}\r\n\r\n\tget random0(): Vector4 {\r\n\t\treturn this._randoms0;\r\n\t}\r\n\r\n\tget random1(): Vector4 {\r\n\t\treturn this._randoms1;\r\n\t}\r\n\r\n\tget simulationWorldPostion(): Vector3 {\r\n\t\treturn this._simulationWorldPostion;\r\n\t}\r\n\r\n\tconstructor(cornerTextureCoordinate: Vector4, positionStartLifeTime: Vector4, velocity: Vector3, startColor: Vector4, startSize: Vector3, startRotation0: Vector3, startRotation1: Vector3, startRotation2: Vector3, ageAddScale: number, time: number, startSpeed: number, randoms0: Vector4, randoms1: Vector4, simulationWorldPostion: Vector3) {\r\n\t\tsuper();\r\n\t\tthis._cornerTextureCoordinate = cornerTextureCoordinate;\r\n\t\tthis._positionStartLifeTime = positionStartLifeTime;\r\n\t\tthis._velocity = velocity;\r\n\t\tthis._startColor = startColor;\r\n\t\tthis._startSize = startSize;\r\n\t\tthis._startRotation0 = startRotation0;\r\n\t\tthis._startRotation1 = startRotation1;\r\n\t\tthis._startRotation2 = startRotation2;\r\n\t\tthis._startLifeTime = ageAddScale;\r\n\t\tthis._time = time;\r\n\t\tthis._startSpeed = startSpeed;\r\n\t\tthis._randoms0 = randoms0;\r\n\t\tthis._randoms1 = randoms1;\r\n\t\tthis._simulationWorldPostion = simulationWorldPostion;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","/**\r\n\t * <code>Rand</code> 类用于通过32位无符号整型随机种子创建随机数。\r\n\t */\r\nexport class Rand {\r\n\t/**\r\n\t * 通过无符号32位整形，获取32位浮点随机数。\r\n\t * @param 无符号32位整形随机数。\r\n\t * @return 32位浮点随机数。\r\n\t */\r\n\tstatic getFloatFromInt(v: number): number {\r\n\t\t// take 23 bits of integer, and divide by 2^23-1\r\n\t\treturn (v & 0x007FFFFF) * (1.0 / 8388607.0)\r\n\t}\r\n\r\n\t/**\r\n\t * 通过无符号32位整形，获取无符号8位字节随机数。\r\n\t * @param 无符号32位整形随机数。\r\n\t * @return 无符号8位字节随机数。\r\n\t */\r\n\tstatic getByteFromInt(v: number): number {//TODO：待验证函数\r\n\t\t// take the most significant byte from the 23-bit value\r\n\t\treturn (v & 0x007FFFFF) >>> 15/*(23-8)*/;\r\n\t}\r\n\r\n\t/**@internal */\r\n\tprivate _temp: Uint32Array = new Uint32Array(1);\r\n\r\n\t/**获取随机种子。*/\r\n\tseeds: Uint32Array = new Uint32Array(4);\r\n\r\n\t/**\r\n\t * 获取随机种子。\r\n\t * @return 随机种子。\r\n\t */\r\n\tget seed(): number {\r\n\t\treturn this.seeds[0];\r\n\t}\r\n\r\n\t/**\r\n\t * 设置随机种子。\r\n\t * @param\tseed 随机种子。\r\n\t */\r\n\tset seed(seed: number) {\r\n\t\tthis.seeds[0] = seed;\r\n\t\tthis.seeds[1] = this.seeds[0] * 0x6C078965/*1812433253U*/ + 1;\r\n\t\tthis.seeds[2] = this.seeds[1] * 0x6C078965/*1812433253U*/ + 1;\r\n\t\tthis.seeds[3] = this.seeds[2] * 0x6C078965/*1812433253U*/ + 1;\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>Rand</code> 实例。\r\n\t * @param\tseed  32位无符号整型随机种子。\r\n\t */\r\n\tconstructor(seed: number) {\r\n\t\tthis.seeds[0] = seed;\r\n\t\tthis.seeds[1] = this.seeds[0] * 0x6C078965/*1812433253U*/ + 1;\r\n\t\tthis.seeds[2] = this.seeds[1] * 0x6C078965/*1812433253U*/ + 1;\r\n\t\tthis.seeds[3] = this.seeds[2] * 0x6C078965/*1812433253U*/ + 1;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取无符号32位整形随机数。\r\n\t * @return 无符号32位整形随机数。\r\n\t */\r\n\tgetUint(): number {\r\n\t\tthis._temp[0] = this.seeds[0] ^ (this.seeds[0] << 11);\r\n\t\tthis.seeds[0] = this.seeds[1];\r\n\t\tthis.seeds[1] = this.seeds[2];\r\n\t\tthis.seeds[2] = this.seeds[3];\r\n\t\tthis.seeds[3] = (this.seeds[3] ^ (this.seeds[3] >>> 19)) ^ (this._temp[0] ^ (this._temp[0] >>> 8));\r\n\t\treturn this.seeds[3];\r\n\t}\r\n\r\n\t/**\r\n\t * 获取0到1之间的浮点随机数。\r\n\t * @return 0到1之间的浮点随机数。\r\n\t */\r\n\tgetFloat(): number {\r\n\t\tthis.getUint();\r\n\t\treturn (this.seeds[3] & 0x007FFFFF) * (1.0 / 8388607.0);\r\n\t}\r\n\r\n\t/**\r\n\t * 获取-1到1之间的浮点随机数。\r\n\t * @return -1到1之间的浮点随机数。\r\n\t */\r\n\tgetSignedFloat(): number {\r\n\t\treturn this.getFloat() * 2.0 - 1.0;\r\n\t}\r\n\r\n}\r\n\r\n","import { LayaGL } from \"../../../layagl/LayaGL\";\r\nimport { CommandUniformMap } from \"../../../RenderEngine/CommandUniformMap\";\r\nimport { Shader3D } from \"../../../RenderEngine/RenderShader/Shader3D\";\r\nimport { ShaderDefine } from \"../../../RenderEngine/RenderShader/ShaderDefine\";\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class ShuriKenParticle3DShaderDeclaration {\r\n\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_RENDERMODE_BILLBOARD: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_RENDERMODE_STRETCHEDBILLBOARD: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_RENDERMODE_HORIZONTALBILLBOARD: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_RENDERMODE_VERTICALBILLBOARD: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_COLORKEYCOUNT_8: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_COLOROVERLIFETIME: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_RANDOMCOLOROVERLIFETIME: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_VELOCITYOVERLIFETIMECONSTANT: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_VELOCITYOVERLIFETIMECURVE: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_VELOCITYOVERLIFETIMERANDOMCONSTANT: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_VELOCITYOVERLIFETIMERANDOMCURVE: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_TEXTURESHEETANIMATIONCURVE: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_TEXTURESHEETANIMATIONRANDOMCURVE: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_ROTATIONOVERLIFETIME: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_ROTATIONOVERLIFETIMESEPERATE: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_ROTATIONOVERLIFETIMECONSTANT: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_ROTATIONOVERLIFETIMECURVE: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_ROTATIONOVERLIFETIMERANDOMCONSTANTS: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_ROTATIONOVERLIFETIMERANDOMCURVES: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_SIZEOVERLIFETIMECURVE: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_SIZEOVERLIFETIMECURVESEPERATE: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_SIZEOVERLIFETIMERANDOMCURVES: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_SIZEOVERLIFETIMERANDOMCURVESSEPERATE: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_RENDERMODE_MESH: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_SHAPE: ShaderDefine;\r\n\r\n\r\n\t//Base\r\n\t/**@internal */\r\n\tstatic WORLDPOSITION: number;\r\n\t/**@internal */\r\n\tstatic WORLDROTATION: number;\r\n\t/**@internal */\r\n\tstatic POSITIONSCALE: number;\r\n\t/**@internal */\r\n\tstatic SIZESCALE: number;\r\n\t/**@internal */\r\n\tstatic SCALINGMODE: number;\r\n\t/**@internal */\r\n\tstatic GRAVITY: number;\r\n\t/**@internal */\r\n\tstatic THREEDSTARTROTATION: number;\r\n\t/**@internal */\r\n\tstatic STRETCHEDBILLBOARDLENGTHSCALE: number;\r\n\t/**@internal */\r\n\tstatic STRETCHEDBILLBOARDSPEEDSCALE: number;\r\n\t/**@internal */\r\n\tstatic SIMULATIONSPACE: number;\r\n\t/**@internal */\r\n\tstatic CURRENTTIME: number;\r\n\t/**@internal */\r\n\tstatic DRAG: number;\r\n\r\n\t//VelocityOverLifetime\r\n\t/**@internal */\r\n\tstatic VOLVELOCITYCONST: number;\r\n\t/**@internal */\r\n\tstatic VOLVELOCITYGRADIENTX: number;\r\n\t/**@internal */\r\n\tstatic VOLVELOCITYGRADIENTY: number;\r\n\t/**@internal */\r\n\tstatic VOLVELOCITYGRADIENTZ: number;\r\n\t/**@internal */\r\n\tstatic VOLVELOCITYCONSTMAX: number;\r\n\t/**@internal */\r\n\tstatic VOLVELOCITYGRADIENTXMAX: number;\r\n\t/**@internal */\r\n\tstatic VOLVELOCITYGRADIENTYMAX: number;\r\n\t/**@internal */\r\n\tstatic VOLVELOCITYGRADIENTZMAX: number;\r\n\t/**@internal */\r\n\tstatic VOLSPACETYPE: number;\r\n\r\n\t//ColorOverLifetime\r\n\t/**@internal */\r\n\tstatic COLOROVERLIFEGRADIENTALPHAS: number;\r\n\t/**@internal */\r\n\tstatic COLOROVERLIFEGRADIENTCOLORS: number;\r\n\t/**@internal */\r\n\tstatic COLOROVERLIFEGRADIENTRANGES: number;\r\n\t/**@internal */\r\n\tstatic MAXCOLOROVERLIFEGRADIENTALPHAS: number;\r\n\t/**@internal */\r\n\tstatic MAXCOLOROVERLIFEGRADIENTCOLORS: number;\r\n\t/**@internal */\r\n\tstatic MAXCOLOROVERLIFEGRADIENTRANGES: number;\r\n\r\n\t//SizeOverLifetime\r\n\t/**@internal */\r\n\tstatic SOLSIZEGRADIENT: number;\r\n\t/**@internal */\r\n\tstatic SOLSIZEGRADIENTX: number;\r\n\t/**@internal */\r\n\tstatic SOLSIZEGRADIENTY: number;\r\n\t/**@internal */\r\n\tstatic SOLSizeGradientZ: number;\r\n\t/**@internal */\r\n\tstatic SOLSizeGradientMax: number;\r\n\t/**@internal */\r\n\tstatic SOLSIZEGRADIENTXMAX: number;\r\n\t/**@internal */\r\n\tstatic SOLSIZEGRADIENTYMAX: number;\r\n\t/**@internal */\r\n\tstatic SOLSizeGradientZMAX: number;\r\n\r\n\t//RotationOverLifetime\r\n\t/**@internal */\r\n\tstatic ROLANGULARVELOCITYCONST: number;\r\n\t/**@internal */\r\n\tstatic ROLANGULARVELOCITYCONSTSEPRARATE: number;\r\n\t/**@internal */\r\n\tstatic ROLANGULARVELOCITYGRADIENT: number;\r\n\t/**@internal */\r\n\tstatic ROLANGULARVELOCITYGRADIENTX: number;\r\n\t/**@internal */\r\n\tstatic ROLANGULARVELOCITYGRADIENTY: number;\r\n\t/**@internal */\r\n\tstatic ROLANGULARVELOCITYGRADIENTZ: number;\r\n\t/**@internal */\r\n\tstatic ROLANGULARVELOCITYCONSTMAX: number;\r\n\t/**@internal */\r\n\tstatic ROLANGULARVELOCITYCONSTMAXSEPRARATE: number;\r\n\t/**@internal */\r\n\tstatic ROLANGULARVELOCITYGRADIENTMAX: number;\r\n\t/**@internal */\r\n\tstatic ROLANGULARVELOCITYGRADIENTXMAX: number;\r\n\t/**@internal */\r\n\tstatic ROLANGULARVELOCITYGRADIENTYMAX: number;\r\n\t/**@internal */\r\n\tstatic ROLANGULARVELOCITYGRADIENTZMAX: number;\r\n\t/**@internal */\r\n\tstatic ROLANGULARVELOCITYGRADIENTWMAX: number;\r\n\r\n\t//TextureSheetAnimation\r\n\t/**@internal */\r\n\tstatic TEXTURESHEETANIMATIONCYCLES: number;\r\n\t/**@internal */\r\n\tstatic TEXTURESHEETANIMATIONSUBUVLENGTH: number;\r\n\t/**@internal */\r\n\tstatic TEXTURESHEETANIMATIONGRADIENTUVS: number;\r\n\t/**@internal */\r\n\tstatic TEXTURESHEETANIMATIONGRADIENTMAXUVS: number;\r\n\r\n\r\n\t/**\r\n\t * init\r\n\t */\r\n\tstatic __init__() {\r\n\r\n\t\tShuriKenParticle3DShaderDeclaration.SHADERDEFINE_RENDERMODE_BILLBOARD = Shader3D.getDefineByName(\"SPHERHBILLBOARD\");\r\n\t\tShuriKenParticle3DShaderDeclaration.SHADERDEFINE_RENDERMODE_STRETCHEDBILLBOARD = Shader3D.getDefineByName(\"STRETCHEDBILLBOARD\");\r\n\t\tShuriKenParticle3DShaderDeclaration.SHADERDEFINE_RENDERMODE_HORIZONTALBILLBOARD = Shader3D.getDefineByName(\"HORIZONTALBILLBOARD\");\r\n\t\tShuriKenParticle3DShaderDeclaration.SHADERDEFINE_RENDERMODE_VERTICALBILLBOARD = Shader3D.getDefineByName(\"VERTICALBILLBOARD\");\r\n\r\n\t\tShuriKenParticle3DShaderDeclaration.SHADERDEFINE_COLORKEYCOUNT_8 = Shader3D.getDefineByName(\"COLORKEYCOUNT_8\");\r\n\t\tShuriKenParticle3DShaderDeclaration.SHADERDEFINE_COLOROVERLIFETIME = Shader3D.getDefineByName(\"COLOROVERLIFETIME\");\r\n\t\tShuriKenParticle3DShaderDeclaration.SHADERDEFINE_RANDOMCOLOROVERLIFETIME = Shader3D.getDefineByName(\"RANDOMCOLOROVERLIFETIME\");\r\n\t\tShuriKenParticle3DShaderDeclaration.SHADERDEFINE_VELOCITYOVERLIFETIMECONSTANT = Shader3D.getDefineByName(\"VELOCITYOVERLIFETIMECONSTANT\");\r\n\t\tShuriKenParticle3DShaderDeclaration.SHADERDEFINE_VELOCITYOVERLIFETIMECURVE = Shader3D.getDefineByName(\"VELOCITYOVERLIFETIMECURVE\");\r\n\t\tShuriKenParticle3DShaderDeclaration.SHADERDEFINE_VELOCITYOVERLIFETIMERANDOMCONSTANT = Shader3D.getDefineByName(\"VELOCITYOVERLIFETIMERANDOMCONSTANT\");\r\n\t\tShuriKenParticle3DShaderDeclaration.SHADERDEFINE_VELOCITYOVERLIFETIMERANDOMCURVE = Shader3D.getDefineByName(\"VELOCITYOVERLIFETIMERANDOMCURVE\");\r\n\r\n\t\tShuriKenParticle3DShaderDeclaration.SHADERDEFINE_TEXTURESHEETANIMATIONCURVE = Shader3D.getDefineByName(\"TEXTURESHEETANIMATIONCURVE\");\r\n\t\tShuriKenParticle3DShaderDeclaration.SHADERDEFINE_TEXTURESHEETANIMATIONRANDOMCURVE = Shader3D.getDefineByName(\"TEXTURESHEETANIMATIONRANDOMCURVE\");\r\n\t\tShuriKenParticle3DShaderDeclaration.SHADERDEFINE_ROTATIONOVERLIFETIME = Shader3D.getDefineByName(\"ROTATIONOVERLIFETIME\");\r\n\t\tShuriKenParticle3DShaderDeclaration.SHADERDEFINE_ROTATIONOVERLIFETIMESEPERATE = Shader3D.getDefineByName(\"ROTATIONOVERLIFETIMESEPERATE\");\r\n\t\tShuriKenParticle3DShaderDeclaration.SHADERDEFINE_ROTATIONOVERLIFETIMECONSTANT = Shader3D.getDefineByName(\"ROTATIONOVERLIFETIMECONSTANT\");\r\n\t\tShuriKenParticle3DShaderDeclaration.SHADERDEFINE_ROTATIONOVERLIFETIMECURVE = Shader3D.getDefineByName(\"ROTATIONOVERLIFETIMECURVE\");\r\n\t\tShuriKenParticle3DShaderDeclaration.SHADERDEFINE_ROTATIONOVERLIFETIMERANDOMCONSTANTS = Shader3D.getDefineByName(\"ROTATIONOVERLIFETIMERANDOMCONSTANTS\");\r\n\t\tShuriKenParticle3DShaderDeclaration.SHADERDEFINE_ROTATIONOVERLIFETIMERANDOMCURVES = Shader3D.getDefineByName(\"ROTATIONOVERLIFETIMERANDOMCURVES\");\r\n\t\tShuriKenParticle3DShaderDeclaration.SHADERDEFINE_SIZEOVERLIFETIMECURVE = Shader3D.getDefineByName(\"SIZEOVERLIFETIMECURVE\");\r\n\t\tShuriKenParticle3DShaderDeclaration.SHADERDEFINE_SIZEOVERLIFETIMECURVESEPERATE = Shader3D.getDefineByName(\"SIZEOVERLIFETIMECURVESEPERATE\");\r\n\t\tShuriKenParticle3DShaderDeclaration.SHADERDEFINE_SIZEOVERLIFETIMERANDOMCURVES = Shader3D.getDefineByName(\"SIZEOVERLIFETIMERANDOMCURVES\");\r\n\t\tShuriKenParticle3DShaderDeclaration.SHADERDEFINE_SIZEOVERLIFETIMERANDOMCURVESSEPERATE = Shader3D.getDefineByName(\"SIZEOVERLIFETIMERANDOMCURVESSEPERATE\");\r\n\t\tShuriKenParticle3DShaderDeclaration.SHADERDEFINE_RENDERMODE_MESH = Shader3D.getDefineByName(\"RENDERMODE_MESH\");\r\n\t\tShuriKenParticle3DShaderDeclaration.SHADERDEFINE_SHAPE = Shader3D.getDefineByName(\"SHAPE\");\r\n\r\n\r\n\r\n\t\t//Base\r\n\t\tShuriKenParticle3DShaderDeclaration.WORLDPOSITION = Shader3D.propertyNameToID(\"u_WorldPosition\");\r\n\t\tShuriKenParticle3DShaderDeclaration.WORLDROTATION = Shader3D.propertyNameToID(\"u_WorldRotation\");\r\n\t\tShuriKenParticle3DShaderDeclaration.POSITIONSCALE = Shader3D.propertyNameToID(\"u_PositionScale\");\r\n\t\tShuriKenParticle3DShaderDeclaration.SIZESCALE = Shader3D.propertyNameToID(\"u_SizeScale\");\r\n\t\tShuriKenParticle3DShaderDeclaration.SCALINGMODE = Shader3D.propertyNameToID(\"u_ScalingMode\");\r\n\t\tShuriKenParticle3DShaderDeclaration.GRAVITY = Shader3D.propertyNameToID(\"u_Gravity\");\r\n\t\tShuriKenParticle3DShaderDeclaration.THREEDSTARTROTATION = Shader3D.propertyNameToID(\"u_ThreeDStartRotation\");\r\n\t\tShuriKenParticle3DShaderDeclaration.STRETCHEDBILLBOARDLENGTHSCALE = Shader3D.propertyNameToID(\"u_StretchedBillboardLengthScale\");\r\n\t\tShuriKenParticle3DShaderDeclaration.STRETCHEDBILLBOARDSPEEDSCALE = Shader3D.propertyNameToID(\"u_StretchedBillboardSpeedScale\");\r\n\t\tShuriKenParticle3DShaderDeclaration.SIMULATIONSPACE = Shader3D.propertyNameToID(\"u_SimulationSpace\");\r\n\t\tShuriKenParticle3DShaderDeclaration.CURRENTTIME = Shader3D.propertyNameToID(\"u_CurrentTime\");\r\n\t\tShuriKenParticle3DShaderDeclaration.DRAG = Shader3D.propertyNameToID(\"u_DragConstanct\");\r\n\r\n\t\t//VelocityOverLifetime\r\n\t\tShuriKenParticle3DShaderDeclaration.VOLVELOCITYCONST = Shader3D.propertyNameToID(\"u_VOLVelocityConst\");\r\n\t\tShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTX = Shader3D.propertyNameToID(\"u_VOLVelocityGradientX\");\r\n\t\tShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTY = Shader3D.propertyNameToID(\"u_VOLVelocityGradientY\");\r\n\t\tShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTZ = Shader3D.propertyNameToID(\"u_VOLVelocityGradientZ\");\r\n\t\tShuriKenParticle3DShaderDeclaration.VOLVELOCITYCONSTMAX = Shader3D.propertyNameToID(\"u_VOLVelocityConstMax\");\r\n\t\tShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTXMAX = Shader3D.propertyNameToID(\"u_VOLVelocityGradientMaxX\");\r\n\t\tShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTYMAX = Shader3D.propertyNameToID(\"u_VOLVelocityGradientMaxY\");\r\n\t\tShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTZMAX = Shader3D.propertyNameToID(\"u_VOLVelocityGradientMaxZ\");\r\n\t\tShuriKenParticle3DShaderDeclaration.VOLSPACETYPE = Shader3D.propertyNameToID(\"u_VOLSpaceType\");\r\n\r\n\t\t//ColorOverLifetime\r\n\t\tShuriKenParticle3DShaderDeclaration.COLOROVERLIFEGRADIENTALPHAS = Shader3D.propertyNameToID(\"u_ColorOverLifeGradientAlphas\");\r\n\t\tShuriKenParticle3DShaderDeclaration.COLOROVERLIFEGRADIENTCOLORS = Shader3D.propertyNameToID(\"u_ColorOverLifeGradientColors\");\r\n\t\tShuriKenParticle3DShaderDeclaration.COLOROVERLIFEGRADIENTRANGES = Shader3D.propertyNameToID(\"u_ColorOverLifeGradientRanges\");\r\n\t\tShuriKenParticle3DShaderDeclaration.MAXCOLOROVERLIFEGRADIENTALPHAS = Shader3D.propertyNameToID(\"u_MaxColorOverLifeGradientAlphas\");\r\n\t\tShuriKenParticle3DShaderDeclaration.MAXCOLOROVERLIFEGRADIENTCOLORS = Shader3D.propertyNameToID(\"u_MaxColorOverLifeGradientColors\");\r\n\t\tShuriKenParticle3DShaderDeclaration.MAXCOLOROVERLIFEGRADIENTRANGES = Shader3D.propertyNameToID(\"u_MaxColorOverLifeGradientRanges\");\r\n\r\n\t\t//SizeOverLifetime\r\n\t\tShuriKenParticle3DShaderDeclaration.SOLSIZEGRADIENT = Shader3D.propertyNameToID(\"u_SOLSizeGradient\");\r\n\t\tShuriKenParticle3DShaderDeclaration.SOLSIZEGRADIENTX = Shader3D.propertyNameToID(\"u_SOLSizeGradientX\");\r\n\t\tShuriKenParticle3DShaderDeclaration.SOLSIZEGRADIENTY = Shader3D.propertyNameToID(\"u_SOLSizeGradientY\");\r\n\t\tShuriKenParticle3DShaderDeclaration.SOLSizeGradientZ = Shader3D.propertyNameToID(\"u_SOLSizeGradientZ\");\r\n\t\tShuriKenParticle3DShaderDeclaration.SOLSizeGradientMax = Shader3D.propertyNameToID(\"u_SOLSizeGradientMax\");\r\n\t\tShuriKenParticle3DShaderDeclaration.SOLSIZEGRADIENTXMAX = Shader3D.propertyNameToID(\"u_SOLSizeGradientMaxX\");\r\n\t\tShuriKenParticle3DShaderDeclaration.SOLSIZEGRADIENTYMAX = Shader3D.propertyNameToID(\"u_SOLSizeGradientMaxY\");\r\n\t\tShuriKenParticle3DShaderDeclaration.SOLSizeGradientZMAX = Shader3D.propertyNameToID(\"u_SOLSizeGradientMaxZ\");\r\n\r\n\t\t//RotationOverLifetime\r\n\t\tShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYCONST = Shader3D.propertyNameToID(\"u_ROLAngularVelocityConst\");\r\n\t\tShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYCONSTSEPRARATE = Shader3D.propertyNameToID(\"u_ROLAngularVelocityConstSeprarate\");\r\n\t\tShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENT = Shader3D.propertyNameToID(\"u_ROLAngularVelocityGradient\");\r\n\t\tShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTX = Shader3D.propertyNameToID(\"u_ROLAngularVelocityGradientX\");\r\n\t\tShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTY = Shader3D.propertyNameToID(\"u_ROLAngularVelocityGradientY\");\r\n\t\tShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTZ = Shader3D.propertyNameToID(\"u_ROLAngularVelocityGradientZ\");\r\n\t\tShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYCONSTMAX = Shader3D.propertyNameToID(\"u_ROLAngularVelocityConstMax\");\r\n\t\tShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYCONSTMAXSEPRARATE = Shader3D.propertyNameToID(\"u_ROLAngularVelocityConstMaxSeprarate\");\r\n\t\tShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTMAX = Shader3D.propertyNameToID(\"u_ROLAngularVelocityGradientMax\");\r\n\t\tShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTXMAX = Shader3D.propertyNameToID(\"u_ROLAngularVelocityGradientMaxX\");\r\n\t\tShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTYMAX = Shader3D.propertyNameToID(\"u_ROLAngularVelocityGradientMaxY\");\r\n\t\tShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTZMAX = Shader3D.propertyNameToID(\"u_ROLAngularVelocityGradientMaxZ\");\r\n\t\tShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTWMAX = Shader3D.propertyNameToID(\"u_ROLAngularVelocityGradientMaxW\");\r\n\r\n\t\t//TextureSheetAnimation\r\n\t\tShuriKenParticle3DShaderDeclaration.TEXTURESHEETANIMATIONCYCLES = Shader3D.propertyNameToID(\"u_TSACycles\");\r\n\t\tShuriKenParticle3DShaderDeclaration.TEXTURESHEETANIMATIONSUBUVLENGTH = Shader3D.propertyNameToID(\"u_TSASubUVLength\");\r\n\t\tShuriKenParticle3DShaderDeclaration.TEXTURESHEETANIMATIONGRADIENTUVS = Shader3D.propertyNameToID(\"u_TSAGradientUVs\");\r\n\t\tShuriKenParticle3DShaderDeclaration.TEXTURESHEETANIMATIONGRADIENTMAXUVS = Shader3D.propertyNameToID(\"u_TSAMaxGradientUVs\");\r\n\r\n\r\n\r\n\r\n\t\tlet uniformMap = LayaGL.renderOBJCreate.createGlobalUniformMap(\"Sprite3D\");\r\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.WORLDPOSITION, 'u_WorldPosition'),\r\n\t\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.WORLDROTATION, 'u_WorldRotation');\r\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.POSITIONSCALE, 'u_PositionScale');\r\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.SIZESCALE, 'u_SizeScale');\r\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.SCALINGMODE, 'u_ScalingMode');\r\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.GRAVITY, 'u_Gravity');\r\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.THREEDSTARTROTATION, 'u_ThreeDStartRotation');\r\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.STRETCHEDBILLBOARDLENGTHSCALE, 'u_StretchedBillboardLengthScale');\r\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.STRETCHEDBILLBOARDSPEEDSCALE, 'u_StretchedBillboardSpeedScale');\r\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.SIMULATIONSPACE, 'u_SimulationSpace');\r\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.CURRENTTIME, 'u_CurrentTime');\r\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.COLOROVERLIFEGRADIENTALPHAS, 'u_ColorOverLifeGradientAlphas');\r\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.COLOROVERLIFEGRADIENTCOLORS, 'u_ColorOverLifeGradientColors');\r\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.COLOROVERLIFEGRADIENTRANGES, 'u_ColorOverLifeGradientRanges');\r\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.MAXCOLOROVERLIFEGRADIENTALPHAS, 'u_MaxColorOverLifeGradientAlphas');\r\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.MAXCOLOROVERLIFEGRADIENTCOLORS, 'u_MaxColorOverLifeGradientColors');\r\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.MAXCOLOROVERLIFEGRADIENTRANGES, 'u_MaxColorOverLifeGradientRanges');\r\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYCONST, 'u_VOLVelocityConst');\r\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTX, 'u_VOLVelocityGradientX');\r\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTY, 'u_VOLVelocityGradientY');\r\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTZ, 'u_VOLVelocityGradientZ');\r\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYCONSTMAX, 'u_VOLVelocityConstMax');\r\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTXMAX, 'u_VOLVelocityGradientMaxX');\r\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTYMAX, 'u_VOLVelocityGradientMaxY');\r\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTZMAX, 'u_VOLVelocityGradientMaxZ');\r\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.VOLSPACETYPE, 'u_VOLSpaceType');\r\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.SOLSIZEGRADIENT, 'u_SOLSizeGradient');\r\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.SOLSIZEGRADIENTX, 'u_SOLSizeGradientX');\r\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.SOLSIZEGRADIENTY, 'u_SOLSizeGradientY');\r\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.SOLSizeGradientZ, 'u_SOLSizeGradientZ');\r\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.SOLSizeGradientMax, 'u_SOLSizeGradientMax');\r\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.SOLSIZEGRADIENTXMAX, 'u_SOLSizeGradientMaxX');\r\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.SOLSIZEGRADIENTYMAX, 'u_SOLSizeGradientMaxY');\r\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.SOLSizeGradientZMAX, 'u_SOLSizeGradientMaxZ');\r\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYCONST, 'u_ROLAngularVelocityConst');\r\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYCONSTSEPRARATE, 'u_ROLAngularVelocityConstSeprarate');\r\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENT, 'u_ROLAngularVelocityGradient');\r\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTX, 'u_ROLAngularVelocityGradientX');\r\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTY, 'u_ROLAngularVelocityGradientY');\r\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTZ, 'u_ROLAngularVelocityGradientZ');\r\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYCONSTMAX, 'u_ROLAngularVelocityConstMax');\r\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYCONSTMAXSEPRARATE, 'u_ROLAngularVelocityConstMaxSeprarate');\r\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTMAX, 'u_ROLAngularVelocityGradientMax');\r\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTXMAX, 'u_ROLAngularVelocityGradientMaxX');\r\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTYMAX, 'u_ROLAngularVelocityGradientMaxY');\r\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTZMAX, 'u_ROLAngularVelocityGradientMaxZ');\r\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTWMAX, 'u_ROLAngularVelocityGradientMaxW');\r\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.TEXTURESHEETANIMATIONCYCLES, 'u_TSACycles');\r\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.TEXTURESHEETANIMATIONSUBUVLENGTH, 'u_TSASubUVLength');\r\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.TEXTURESHEETANIMATIONGRADIENTUVS, 'u_TSAGradientUVs');\r\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.TEXTURESHEETANIMATIONGRADIENTMAXUVS, 'u_TSAMaxGradientUVs');\r\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.DRAG, 'u_DragConstanct');\r\n\t}\r\n}","import { MathUtil } from \"../../../maths/MathUtil\";\r\nimport { Vector2 } from \"../../../maths/Vector2\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\nimport { Vector4 } from \"../../../maths/Vector4\";\r\nimport { Rand } from \"../../math/Rand\";\r\nimport { ColorOverLifetime } from \"./module/ColorOverLifetime\";\r\nimport { FrameOverTime } from \"./module/FrameOverTime\";\r\nimport { GradientColor } from \"./module/GradientColor\";\r\nimport { GradientDataNumber } from \"./module/GradientDataNumber\";\r\nimport { GradientSize } from \"./module/GradientSize\";\r\nimport { SizeOverLifetime } from \"./module/SizeOverLifetime\";\r\nimport { StartFrame } from \"./module/StartFrame\";\r\nimport { TextureSheetAnimation } from \"./module/TextureSheetAnimation\";\r\nimport { ShurikenParticleRenderer } from \"./ShurikenParticleRenderer\";\r\nimport { ShurikenParticleSystem } from \"./ShurikenParticleSystem\";\r\n\r\n/**\r\n *  @internal\r\n */\r\nexport class ShurikenParticleData {\r\n\t/**@internal */\r\n\tprivate static _tempVector30: Vector3 = new Vector3();\r\n\r\n\tstatic startLifeTime: number;\r\n\tstatic startColor: Vector4 = new Vector4();\r\n\tstatic startSize: Float32Array = new Float32Array(3);\r\n\tstatic startRotation: Float32Array = new Float32Array(3);\r\n\tstatic startUVInfo: Float32Array = new Float32Array(4);\r\n\r\n\tconstructor() {\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate static _getStartLifetimeFromGradient(startLifeTimeGradient: GradientDataNumber, emissionTime: number): number {\r\n\t\tfor (var i: number = 1, n: number = startLifeTimeGradient.gradientCount; i < n; i++) {\r\n\t\t\tvar key: number = startLifeTimeGradient.getKeyByIndex(i);\r\n\t\t\tif (key >= emissionTime) {\r\n\t\t\t\tvar lastKey: number = startLifeTimeGradient.getKeyByIndex(i - 1);\r\n\t\t\t\tvar age: number = (emissionTime - lastKey) / (key - lastKey);\r\n\t\t\t\treturn MathUtil.lerp(startLifeTimeGradient.getValueByIndex(i - 1), startLifeTimeGradient.getValueByIndex(i), age)\r\n\t\t\t}\r\n\t\t}\r\n\t\tthrow new Error(\"ShurikenParticleData: can't get value foam startLifeTimeGradient.\");\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate static _randomInvertRoationArray(rotatonE: Vector3, outE: Vector3, randomizeRotationDirection: number, rand: Rand, randomSeeds: Uint32Array): void {\r\n\t\tvar randDic: number;\r\n\t\tif (rand) {\r\n\t\t\trand.seed = randomSeeds[6];\r\n\t\t\trandDic = rand.getFloat();\r\n\t\t\trandomSeeds[6] = rand.seed;\r\n\t\t} else {\r\n\t\t\trandDic = Math.random();\r\n\t\t}\r\n\t\tif (randDic < randomizeRotationDirection) {\r\n\t\t\toutE.x = -rotatonE.x;\r\n\t\t\toutE.y = -rotatonE.y;\r\n\t\t\toutE.z = -rotatonE.z;\r\n\t\t} else {\r\n\t\t\toutE.x = rotatonE.x;\r\n\t\t\toutE.y = rotatonE.y;\r\n\t\t\toutE.z = rotatonE.z;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate static _randomInvertRoation(rotaton: number, randomizeRotationDirection: number, rand: Rand, randomSeeds: Uint32Array): number {\r\n\t\tvar randDic: number;\r\n\t\tif (rand) {\r\n\t\t\trand.seed = randomSeeds[6];\r\n\t\t\trandDic = rand.getFloat();\r\n\t\t\trandomSeeds[6] = rand.seed;\r\n\t\t} else {\r\n\t\t\trandDic = Math.random();\r\n\t\t}\r\n\t\tif (randDic < randomizeRotationDirection)\r\n\t\t\trotaton = -rotaton;\r\n\t\treturn rotaton;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic create(particleSystem: ShurikenParticleSystem, particleRender: ShurikenParticleRenderer): void {\r\n\t\tvar autoRandomSeed: boolean = particleSystem.autoRandomSeed;\r\n\t\tvar rand: Rand = particleSystem._rand;\r\n\t\tvar randomSeeds: Uint32Array = particleSystem._randomSeeds;\r\n\r\n\t\t//StartColor\r\n\t\tswitch (particleSystem.startColorType) {\r\n\t\t\tcase 0:\r\n\t\t\t\tvar constantStartColor: Vector4 = particleSystem.startColorConstant;\r\n\t\t\t\tShurikenParticleData.startColor.x = constantStartColor.x;\r\n\t\t\t\tShurikenParticleData.startColor.y = constantStartColor.y;\r\n\t\t\t\tShurikenParticleData.startColor.z = constantStartColor.z;\r\n\t\t\t\tShurikenParticleData.startColor.w = constantStartColor.w;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2:\r\n\t\t\t\tif (autoRandomSeed) {\r\n\t\t\t\t\tVector4.lerp(particleSystem.startColorConstantMin, particleSystem.startColorConstantMax, Math.random(), ShurikenParticleData.startColor);\r\n\t\t\t\t} else {\r\n\t\t\t\t\trand.seed = randomSeeds[3];\r\n\t\t\t\t\tVector4.lerp(particleSystem.startColorConstantMin, particleSystem.startColorConstantMax, rand.getFloat(), ShurikenParticleData.startColor);\r\n\t\t\t\t\trandomSeeds[3] = rand.seed;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\tvar colorOverLifetime: ColorOverLifetime = particleSystem.colorOverLifetime;\r\n\t\tif (colorOverLifetime && colorOverLifetime.enable) {\r\n\t\t\tvar color: GradientColor = colorOverLifetime.color;\r\n\t\t\tswitch (color.type) {\r\n\t\t\t\tcase 0:\r\n\t\t\t\t\tShurikenParticleData.startColor.x = ShurikenParticleData.startColor.x * color.constant.x;\r\n\t\t\t\t\tShurikenParticleData.startColor.y = ShurikenParticleData.startColor.y * color.constant.y;\r\n\t\t\t\t\tShurikenParticleData.startColor.z = ShurikenParticleData.startColor.z * color.constant.z;\r\n\t\t\t\t\tShurikenParticleData.startColor.w = ShurikenParticleData.startColor.w * color.constant.w;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\tvar colorRandom: number;\r\n\t\t\t\t\tif (autoRandomSeed) {\r\n\t\t\t\t\t\tcolorRandom = Math.random();\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\trand.seed = randomSeeds[10];\r\n\t\t\t\t\t\tcolorRandom = rand.getFloat();\r\n\t\t\t\t\t\trandomSeeds[10] = rand.seed;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvar minConstantColor: Vector4 = color.constantMin;\r\n\t\t\t\t\tvar maxConstantColor: Vector4 = color.constantMax;\r\n\t\t\t\t\tShurikenParticleData.startColor.x = ShurikenParticleData.startColor.x * MathUtil.lerp(minConstantColor.x, maxConstantColor.x, colorRandom);\r\n\t\t\t\t\tShurikenParticleData.startColor.y = ShurikenParticleData.startColor.y * MathUtil.lerp(minConstantColor.y, maxConstantColor.y, colorRandom);\r\n\t\t\t\t\tShurikenParticleData.startColor.z = ShurikenParticleData.startColor.z * MathUtil.lerp(minConstantColor.z, maxConstantColor.z, colorRandom);\r\n\t\t\t\t\tShurikenParticleData.startColor.w = ShurikenParticleData.startColor.w * MathUtil.lerp(minConstantColor.w, maxConstantColor.w, colorRandom);\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//StartSize\r\n\t\tvar particleSize: Float32Array = ShurikenParticleData.startSize;\r\n\t\tswitch (particleSystem.startSizeType) {\r\n\t\t\tcase 0:\r\n\t\t\t\tif (particleSystem.threeDStartSize) {\r\n\t\t\t\t\tvar startSizeConstantSeparate: Vector3 = particleSystem.startSizeConstantSeparate;\r\n\t\t\t\t\tparticleSize[0] = startSizeConstantSeparate.x;\r\n\t\t\t\t\tparticleSize[1] = startSizeConstantSeparate.y;\r\n\t\t\t\t\tparticleSize[2] = startSizeConstantSeparate.z;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tparticleSize[0] = particleSize[1] = particleSize[2] = particleSystem.startSizeConstant;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2:\r\n\t\t\t\tif (particleSystem.threeDStartSize) {\r\n\t\t\t\t\tvar startSizeConstantMinSeparate: Vector3 = particleSystem.startSizeConstantMinSeparate;\r\n\t\t\t\t\tvar startSizeConstantMaxSeparate: Vector3 = particleSystem.startSizeConstantMaxSeparate;\r\n\t\t\t\t\tif (autoRandomSeed) {\r\n\t\t\t\t\t\tparticleSize[0] = MathUtil.lerp(startSizeConstantMinSeparate.x, startSizeConstantMaxSeparate.x, Math.random());\r\n\t\t\t\t\t\tparticleSize[1] = MathUtil.lerp(startSizeConstantMinSeparate.y, startSizeConstantMaxSeparate.y, Math.random());\r\n\t\t\t\t\t\tparticleSize[2] = MathUtil.lerp(startSizeConstantMinSeparate.z, startSizeConstantMaxSeparate.z, Math.random());\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\trand.seed = randomSeeds[4];\r\n\t\t\t\t\t\tparticleSize[0] = MathUtil.lerp(startSizeConstantMinSeparate.x, startSizeConstantMaxSeparate.x, rand.getFloat());\r\n\t\t\t\t\t\tparticleSize[1] = MathUtil.lerp(startSizeConstantMinSeparate.y, startSizeConstantMaxSeparate.y, rand.getFloat());\r\n\t\t\t\t\t\tparticleSize[2] = MathUtil.lerp(startSizeConstantMinSeparate.z, startSizeConstantMaxSeparate.z, rand.getFloat());\r\n\t\t\t\t\t\trandomSeeds[4] = rand.seed;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (autoRandomSeed) {\r\n\t\t\t\t\t\tparticleSize[0] = particleSize[1] = particleSize[2] = MathUtil.lerp(particleSystem.startSizeConstantMin, particleSystem.startSizeConstantMax, Math.random());\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\trand.seed = randomSeeds[4];\r\n\t\t\t\t\t\tparticleSize[0] = particleSize[1] = particleSize[2] = MathUtil.lerp(particleSystem.startSizeConstantMin, particleSystem.startSizeConstantMax, rand.getFloat());\r\n\t\t\t\t\t\trandomSeeds[4] = rand.seed;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\tvar sizeOverLifetime: SizeOverLifetime = particleSystem.sizeOverLifetime;\r\n\t\tif (sizeOverLifetime && sizeOverLifetime.enable && sizeOverLifetime.size.type === 1) {\r\n\t\t\tvar size: GradientSize = sizeOverLifetime.size;\r\n\t\t\tif (size.separateAxes) {\r\n\t\t\t\tif (autoRandomSeed) {\r\n\t\t\t\t\tparticleSize[0] = particleSize[0] * MathUtil.lerp(size.constantMinSeparate.x, size.constantMaxSeparate.x, Math.random());\r\n\t\t\t\t\tparticleSize[1] = particleSize[1] * MathUtil.lerp(size.constantMinSeparate.y, size.constantMaxSeparate.y, Math.random());\r\n\t\t\t\t\tparticleSize[2] = particleSize[2] * MathUtil.lerp(size.constantMinSeparate.z, size.constantMaxSeparate.z, Math.random());\r\n\t\t\t\t} else {\r\n\t\t\t\t\trand.seed = randomSeeds[11];\r\n\t\t\t\t\tparticleSize[0] = particleSize[0] * MathUtil.lerp(size.constantMinSeparate.x, size.constantMaxSeparate.x, rand.getFloat());\r\n\t\t\t\t\tparticleSize[1] = particleSize[1] * MathUtil.lerp(size.constantMinSeparate.y, size.constantMaxSeparate.y, rand.getFloat());\r\n\t\t\t\t\tparticleSize[2] = particleSize[2] * MathUtil.lerp(size.constantMinSeparate.z, size.constantMaxSeparate.z, rand.getFloat());\r\n\t\t\t\t\trandomSeeds[11] = rand.seed;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tvar randomSize: number;\r\n\t\t\t\tif (autoRandomSeed) {\r\n\t\t\t\t\trandomSize = MathUtil.lerp(size.constantMin, size.constantMax, Math.random());\r\n\t\t\t\t} else {\r\n\t\t\t\t\trand.seed = randomSeeds[11];\r\n\t\t\t\t\trandomSize = MathUtil.lerp(size.constantMin, size.constantMax, rand.getFloat());\r\n\t\t\t\t\trandomSeeds[11] = rand.seed;\r\n\t\t\t\t}\r\n\t\t\t\tparticleSize[0] = particleSize[0] * randomSize;\r\n\t\t\t\tparticleSize[1] = particleSize[1] * randomSize;\r\n\t\t\t\tparticleSize[2] = particleSize[2] * randomSize;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//StartRotation//TODO:renderMode2、3模式都不需要旋转，是否移除。\r\n\t\tvar renderMode: number = particleRender.renderMode;\r\n\t\tif (renderMode !== 1) {\r\n\t\t\tswitch (particleSystem.startRotationType) {\r\n\t\t\t\tcase 0:\r\n\t\t\t\t\tif (particleSystem.threeDStartRotation) {\r\n\t\t\t\t\t\tvar startRotationConstantSeparate: Vector3 = particleSystem.startRotationConstantSeparate;\r\n\t\t\t\t\t\tvar randomRotationE: Vector3 = ShurikenParticleData._tempVector30;\r\n\t\t\t\t\t\tShurikenParticleData._randomInvertRoationArray(startRotationConstantSeparate, randomRotationE, particleSystem.randomizeRotationDirection, autoRandomSeed ? null : rand, randomSeeds);\r\n\t\t\t\t\t\tShurikenParticleData.startRotation[0] = randomRotationE.x;\r\n\t\t\t\t\t\tShurikenParticleData.startRotation[1] = randomRotationE.y;\r\n\t\t\t\t\t\tif (renderMode !== 4)\r\n\t\t\t\t\t\t\tShurikenParticleData.startRotation[2] = -randomRotationE.z;\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tShurikenParticleData.startRotation[2] = randomRotationE.z;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tShurikenParticleData.startRotation[0] = ShurikenParticleData._randomInvertRoation(particleSystem.startRotationConstant, particleSystem.randomizeRotationDirection, autoRandomSeed ? null : rand, randomSeeds);\r\n\t\t\t\t\t\tShurikenParticleData.startRotation[1] = 0;\r\n\t\t\t\t\t\tShurikenParticleData.startRotation[2] = 0;//需要置0,否则上次缓存影响数据。TODO:mesh模式下使用Z,但是这里为什么是X\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\tif (particleSystem.threeDStartRotation) {\r\n\t\t\t\t\t\tvar startRotationConstantMinSeparate: Vector3 = particleSystem.startRotationConstantMinSeparate;\r\n\t\t\t\t\t\tvar startRotationConstantMaxSeparate: Vector3 = particleSystem.startRotationConstantMaxSeparate;\r\n\t\t\t\t\t\tvar lerpRoationE: Vector3 = ShurikenParticleData._tempVector30;\r\n\t\t\t\t\t\tif (autoRandomSeed) {\r\n\t\t\t\t\t\t\tlerpRoationE.x = MathUtil.lerp(startRotationConstantMinSeparate.x, startRotationConstantMaxSeparate.x, Math.random());\r\n\t\t\t\t\t\t\tlerpRoationE.y = MathUtil.lerp(startRotationConstantMinSeparate.y, startRotationConstantMaxSeparate.y, Math.random());\r\n\t\t\t\t\t\t\tlerpRoationE.z = MathUtil.lerp(startRotationConstantMinSeparate.z, startRotationConstantMaxSeparate.z, Math.random());\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\trand.seed = randomSeeds[5];\r\n\t\t\t\t\t\t\tlerpRoationE.x = MathUtil.lerp(startRotationConstantMinSeparate.x, startRotationConstantMaxSeparate.x, rand.getFloat());\r\n\t\t\t\t\t\t\tlerpRoationE.y = MathUtil.lerp(startRotationConstantMinSeparate.y, startRotationConstantMaxSeparate.y, rand.getFloat());\r\n\t\t\t\t\t\t\tlerpRoationE.z = MathUtil.lerp(startRotationConstantMinSeparate.z, startRotationConstantMaxSeparate.z, rand.getFloat());\r\n\t\t\t\t\t\t\trandomSeeds[5] = rand.seed;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tShurikenParticleData._randomInvertRoationArray(lerpRoationE, lerpRoationE, particleSystem.randomizeRotationDirection, autoRandomSeed ? null : rand, randomSeeds);\r\n\t\t\t\t\t\tShurikenParticleData.startRotation[0] = lerpRoationE.x;\r\n\t\t\t\t\t\tShurikenParticleData.startRotation[1] = lerpRoationE.y;\r\n\t\t\t\t\t\tif (renderMode !== 4)\r\n\t\t\t\t\t\t\tShurikenParticleData.startRotation[2] = -lerpRoationE.z;\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tShurikenParticleData.startRotation[2] = lerpRoationE.z;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tif (autoRandomSeed) {\r\n\t\t\t\t\t\t\tShurikenParticleData.startRotation[0] = ShurikenParticleData._randomInvertRoation(MathUtil.lerp(particleSystem.startRotationConstantMin, particleSystem.startRotationConstantMax, Math.random()), particleSystem.randomizeRotationDirection, autoRandomSeed ? null : rand, randomSeeds);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\trand.seed = randomSeeds[5];\r\n\t\t\t\t\t\t\tShurikenParticleData.startRotation[0] = ShurikenParticleData._randomInvertRoation(MathUtil.lerp(particleSystem.startRotationConstantMin, particleSystem.startRotationConstantMax, rand.getFloat()), particleSystem.randomizeRotationDirection, autoRandomSeed ? null : rand, randomSeeds);\r\n\t\t\t\t\t\t\trandomSeeds[5] = rand.seed;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//StartLifetime\r\n\t\tswitch (particleSystem.startLifetimeType) {\r\n\t\t\tcase 0:\r\n\t\t\t\tShurikenParticleData.startLifeTime = particleSystem.startLifetimeConstant;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1:\r\n\t\t\t\tShurikenParticleData.startLifeTime = ShurikenParticleData._getStartLifetimeFromGradient(particleSystem.startLifeTimeGradient, particleSystem.emissionTime);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2:\r\n\t\t\t\tif (autoRandomSeed) {\r\n\t\t\t\t\tShurikenParticleData.startLifeTime = MathUtil.lerp(particleSystem.startLifetimeConstantMin, particleSystem.startLifetimeConstantMax, Math.random());\r\n\t\t\t\t} else {\r\n\t\t\t\t\trand.seed = randomSeeds[7];\r\n\t\t\t\t\tShurikenParticleData.startLifeTime = MathUtil.lerp(particleSystem.startLifetimeConstantMin, particleSystem.startLifetimeConstantMax, rand.getFloat());\r\n\t\t\t\t\trandomSeeds[7] = rand.seed;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 3:\r\n\t\t\t\tvar emissionTime: number = particleSystem.emissionTime;\r\n\t\t\t\tif (autoRandomSeed) {\r\n\t\t\t\t\tShurikenParticleData.startLifeTime = MathUtil.lerp(ShurikenParticleData._getStartLifetimeFromGradient(particleSystem.startLifeTimeGradientMin, emissionTime), ShurikenParticleData._getStartLifetimeFromGradient(particleSystem.startLifeTimeGradientMax, emissionTime), Math.random());\r\n\t\t\t\t} else {\r\n\t\t\t\t\trand.seed = randomSeeds[7];\r\n\t\t\t\t\tShurikenParticleData.startLifeTime = MathUtil.lerp(ShurikenParticleData._getStartLifetimeFromGradient(particleSystem.startLifeTimeGradientMin, emissionTime), ShurikenParticleData._getStartLifetimeFromGradient(particleSystem.startLifeTimeGradientMax, emissionTime), rand.getFloat());\r\n\t\t\t\t\trandomSeeds[7] = rand.seed;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\r\n\t\t//StartUV\r\n\t\tvar textureSheetAnimation: TextureSheetAnimation = particleSystem.textureSheetAnimation;\r\n\t\tvar enableSheetAnimation: boolean = textureSheetAnimation && textureSheetAnimation.enable;\r\n\t\tif (enableSheetAnimation) {\r\n\t\t\tvar title: Vector2 = textureSheetAnimation.tiles;\r\n\t\t\tvar titleX: number = title.x, titleY: number = title.y;\r\n\t\t\tvar subU: number = 1.0 / titleX, subV: number = 1.0 / titleY;\r\n\r\n\t\t\tvar startFrameCount: number;\r\n\t\t\tvar startFrame: StartFrame = textureSheetAnimation.startFrame;\r\n\t\t\tswitch (startFrame.type) {\r\n\t\t\t\tcase 0://常量模式\r\n\t\t\t\t\tstartFrameCount = startFrame.constant;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 1://随机双常量模式\r\n\t\t\t\t\tif (autoRandomSeed) {\r\n\t\t\t\t\t\tstartFrameCount = MathUtil.lerp(startFrame.constantMin, startFrame.constantMax, Math.random());\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\trand.seed = randomSeeds[14];\r\n\t\t\t\t\t\tstartFrameCount = MathUtil.lerp(startFrame.constantMin, startFrame.constantMax, rand.getFloat());\r\n\t\t\t\t\t\trandomSeeds[14] = rand.seed;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tvar frame: FrameOverTime = textureSheetAnimation.frame;\r\n\t\t\tvar cycles: number = textureSheetAnimation.cycles;\r\n\t\t\tswitch (frame.type) {\r\n\t\t\t\tcase 0:\r\n\t\t\t\t\tstartFrameCount += frame.constant * cycles;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\tif (autoRandomSeed) {\r\n\t\t\t\t\t\tstartFrameCount += MathUtil.lerp(frame.constantMin, frame.constantMax, Math.random()) * cycles;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\trand.seed = randomSeeds[15];\r\n\t\t\t\t\t\tstartFrameCount += MathUtil.lerp(frame.constantMin, frame.constantMax, rand.getFloat()) * cycles;\r\n\t\t\t\t\t\trandomSeeds[15] = rand.seed;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tvar startRow: number = 0;//TODO:case 2 没处理\r\n\t\t\tswitch (textureSheetAnimation.type) {\r\n\t\t\t\tcase 0://Whole Sheet\r\n\t\t\t\t\tstartRow = Math.floor(startFrameCount / titleX);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 1://Singal Row\r\n\t\t\t\t\tif (textureSheetAnimation.randomRow) {\r\n\t\t\t\t\t\tif (autoRandomSeed) {\r\n\t\t\t\t\t\t\tstartRow = Math.floor(Math.random() * titleY);\r\n\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\trand.seed = randomSeeds[13];\r\n\t\t\t\t\t\t\tstartRow = Math.floor(rand.getFloat() * titleY);\r\n\t\t\t\t\t\t\trandomSeeds[13] = rand.seed;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tstartRow = textureSheetAnimation.rowIndex;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tvar startCol: number = Math.floor(startFrameCount % titleX);\r\n\t\t\tShurikenParticleData.startUVInfo = ShurikenParticleData.startUVInfo;\r\n\t\t\tShurikenParticleData.startUVInfo[0] = subU;\r\n\t\t\tShurikenParticleData.startUVInfo[1] = subV;\r\n\t\t\tShurikenParticleData.startUVInfo[2] = startCol * subU;\r\n\t\t\tShurikenParticleData.startUVInfo[3] = startRow * subV;\r\n\t\t} else {\r\n\t\t\tShurikenParticleData.startUVInfo = ShurikenParticleData.startUVInfo;\r\n\t\t\tShurikenParticleData.startUVInfo[0] = 1.0;\r\n\t\t\tShurikenParticleData.startUVInfo[1] = 1.0;\r\n\t\t\tShurikenParticleData.startUVInfo[2] = 0.0;\r\n\t\t\tShurikenParticleData.startUVInfo[3] = 0.0;\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { MathUtil } from \"../../../maths/MathUtil\";\r\nimport { Resource } from \"../../../resource/Resource\";\r\nimport { Stat } from \"../../../utils/Stat\";\r\nimport { IndexBuffer3D } from \"../../graphics/IndexBuffer3D\";\r\nimport { VertexShurikenParticleBillboard } from \"../../graphics/Vertex/VertexShurikenParticleBillboard\";\r\nimport { VertexShurikenParticleMesh } from \"../../graphics/Vertex/VertexShurikenParticleMesh\";\r\nimport { VertexBuffer3D } from \"../../graphics/VertexBuffer3D\";\r\nimport { Rand } from \"../../math/Rand\";\r\nimport { Mesh } from \"../../resource/models/Mesh\";\r\nimport { GeometryElement } from \"../GeometryElement\";\r\nimport { Gradient } from \"../Gradient\";\r\nimport { IClone } from \"../../../utils/IClone\";\r\nimport { RenderContext3D } from \"../render/RenderContext3D\";\r\nimport { Scene3D } from \"../scene/Scene3D\";\r\nimport { Transform3D } from \"../Transform3D\";\r\nimport { Burst } from \"./module/Burst\";\r\nimport { ColorOverLifetime } from \"./module/ColorOverLifetime\";\r\nimport { Emission } from \"./module/Emission\";\r\nimport { FrameOverTime } from \"./module/FrameOverTime\";\r\nimport { GradientAngularVelocity } from \"./module/GradientAngularVelocity\";\r\nimport { GradientColor } from \"./module/GradientColor\";\r\nimport { GradientDataNumber } from \"./module/GradientDataNumber\";\r\nimport { GradientSize } from \"./module/GradientSize\";\r\nimport { GradientVelocity } from \"./module/GradientVelocity\";\r\nimport { RotationOverLifetime } from \"./module/RotationOverLifetime\";\r\nimport { BaseShape, ParticleSystemShapeType } from \"./module/shape/BaseShape\";\r\nimport { SizeOverLifetime } from \"./module/SizeOverLifetime\";\r\nimport { TextureSheetAnimation } from \"./module/TextureSheetAnimation\";\r\nimport { VelocityOverLifetime } from \"./module/VelocityOverLifetime\";\r\nimport { ShuriKenParticle3DShaderDeclaration } from \"./ShuriKenParticle3DShaderDeclaration\";\r\nimport { ShurikenParticleData } from \"./ShurikenParticleData\";\r\nimport { ShurikenParticleRenderer } from \"./ShurikenParticleRenderer\";\r\nimport { SphereShape } from \"./module/shape/SphereShape\";\r\nimport { HemisphereShape } from \"./module/shape/HemisphereShape\";\r\nimport { ConeShape } from \"./module/shape/ConeShape\";\r\nimport { CircleShape } from \"./module/shape/CircleShape\";\r\nimport { BoxShape } from \"./module/shape/BoxShape\";\r\nimport { VertexShuriKenParticle } from \"../../graphics/Vertex/VertexShuriKenParticle\";\r\nimport { Sprite3D } from \"../Sprite3D\";\r\nimport { BufferUsage } from \"../../../RenderEngine/RenderEnum/BufferTargetType\";\r\nimport { MeshTopology } from \"../../../RenderEngine/RenderEnum/RenderPologyMode\";\r\nimport { ShaderData } from \"../../../RenderEngine/RenderShader/ShaderData\";\r\nimport { VertexDeclaration } from \"../../../RenderEngine/VertexDeclaration\";\r\nimport { DrawType } from \"../../../RenderEngine/RenderEnum/DrawType\";\r\nimport { LayaGL } from \"../../../layagl/LayaGL\";\r\nimport { IndexFormat } from \"../../../RenderEngine/RenderEnum/IndexFormat\";\r\nimport { Bounds } from \"../../math/Bounds\";\r\nimport { Quaternion } from \"../../../maths/Quaternion\";\r\nimport { Vector2 } from \"../../../maths/Vector2\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\nimport { Vector4 } from \"../../../maths/Vector4\";\r\nimport { VertexElement } from \"../../../renders/VertexElement\";\r\nimport { BufferState } from \"../../../webgl/utils/BufferState\";\r\nimport { VertexMesh } from \"../../../RenderEngine/RenderShader/VertexMesh\";\r\n\r\n\r\n/**\r\n * <code>ShurikenParticleSystem</code> 类用于创建3D粒子数据模板。\r\n */\r\nexport class ShurikenParticleSystem extends GeometryElement implements IClone {\r\n    /** @internal 0:Burst,1:预留,2:StartDelay,3:StartColor,4:StartSize,5:StartRotation,6:randomizeRotationDirection,7:StartLifetime,8:StartSpeed,9:VelocityOverLifetime,10:ColorOverLifetime,11:SizeOverLifetime,12:RotationOverLifetime,13-15:TextureSheetAnimation,16-17:Shape*/\r\n    static _RANDOMOFFSET: Uint32Array = new Uint32Array([0x23571a3e, 0xc34f56fe, 0x13371337, 0x12460f3b, 0x6aed452e, 0xdec4aea1, 0x96aa4de3, 0x8d2c8431, 0xf3857f6f, 0xe0fbd834, 0x13740583, 0x591bc05c, 0x40eb95e4, 0xbc524e5f, 0xaf502044, 0xa614b381, 0x1034e524, 0xfc524e5f]);\r\n\r\n    /** @internal */\r\n    protected static halfKSqrtOf2: number = 1.42 * 0.5;\r\n\r\n    /** @internal */\r\n    protected static g: number = 9.8;\r\n\r\n    /** @internal */\r\n    static _maxElapsedTime: number = 1.0 / 3.0;\r\n\r\n    /**@internal */\r\n    protected static _tempVector30: Vector3 = new Vector3();\r\n    /**@internal */\r\n    protected static _tempVector31: Vector3 = new Vector3();\r\n    /**@internal */\r\n    protected static _tempVector32: Vector3 = new Vector3();\r\n    /**@internal */\r\n    protected static _tempVector33: Vector3 = new Vector3();\r\n    /**@internal */\r\n    protected static _tempVector34: Vector3 = new Vector3();\r\n    /**@internal */\r\n    protected static _tempVector35: Vector3 = new Vector3();\r\n    /**@internal */\r\n    protected static _tempVector36: Vector3 = new Vector3();\r\n    /**@internal */\r\n    protected static _tempVector37: Vector3 = new Vector3();\r\n    /** @internal */\r\n    protected static _tempPosition: Vector3 = new Vector3();\r\n    /** @internal */\r\n    protected static _tempDirection: Vector3 = new Vector3();\r\n\r\n    /**@internal */\r\n    protected static _type: number = GeometryElement._typeCounter++;\r\n    /** @internal */\r\n    _bounds: Bounds = null;\r\n    /** @internal 重力影响偏移, 用于计算世界包围盒 */\r\n    _gravityOffset: Vector2 = new Vector2();\r\n\r\n    /** @internal */\r\n    _customBounds: Bounds = null;\r\n\r\n    /** @internal */\r\n    _useCustomBounds: boolean = false;\r\n\r\n    /** @internal */\r\n    protected _owner: Sprite3D = null;\r\n    /** @internal */\r\n    protected _ownerRender: ShurikenParticleRenderer = null;\r\n    /**@internal */\r\n    protected _vertices: Float32Array = null;\r\n    /**@internal */\r\n    protected _floatCountPerVertex: number = 0;\r\n    /**@internal */\r\n    protected _startLifeTimeIndex: number = 0;\r\n    /**@internal */\r\n    protected _timeIndex: number = 0;\r\n    /**@internal */\r\n    protected _simulationUV_Index: number = 0\r\n    /**@internal */\r\n    protected _simulateUpdate: boolean = false;\r\n\r\n\r\n    /**@internal */\r\n    protected _firstActiveElement: number = 0;\r\n    /**@internal */\r\n    protected _firstNewElement: number = 0;\r\n    /**@internal */\r\n    protected _firstFreeElement: number = 0;\r\n    /**@internal */\r\n    protected _firstRetiredElement: number = 0;\r\n    /**@internal */\r\n    protected _drawCounter: number = 0;\r\n    /**@internal 最大粒子数量*/\r\n    protected _bufferMaxParticles: number = 0;\r\n    /**@internal */\r\n    protected _emission: Emission = null;\r\n    /**@internal */\r\n    protected _shape: BaseShape = null;\r\n\r\n    /**@internal */\r\n    protected _isEmitting: boolean = false;\r\n    /**@internal */\r\n    protected _isPlaying: boolean = false;\r\n    /**@internal */\r\n    protected _isPaused: boolean = false;\r\n    /**@internal */\r\n    protected _playStartDelay: number = 0;\r\n    /**@internal 发射的累计时间。*/\r\n    protected _frameRateTime: number = 0;\r\n    /**@internal 一次循环内的累计时间。*/\r\n    protected _emissionTime: number = 0;\r\n    /**@internal 用来计算时间是否超过发射延迟时间*/\r\n    protected _totalDelayTime: number = 0;\r\n    /** @internal 上次发射到当前的移动总距离，每次根据距离发射粒子后清空 */\r\n    protected _emissionDistance: number = 0;\r\n    protected _emissionLastPosition: Vector3 = new Vector3();\r\n    /**@internal */\r\n    protected _burstsIndex: number = 0;\r\n    ///**@internal 发射粒子最小时间间隔。*/\r\n    //protected var _minEmissionTime:Number;\r\n    /**@internal */\r\n    protected _velocityOverLifetime: VelocityOverLifetime = null;\r\n    /**@internal */\r\n    protected _colorOverLifetime: ColorOverLifetime = null;\r\n    /**@internal */\r\n    protected _sizeOverLifetime: SizeOverLifetime = null;\r\n    /**@internal */\r\n    protected _rotationOverLifetime: RotationOverLifetime = null;\r\n    /**@internal */\r\n    protected _textureSheetAnimation: TextureSheetAnimation = null;\r\n    /**@internal */\r\n    protected _startLifetimeType: number = 0;\r\n    /**@internal */\r\n    protected _startLifetimeConstant: number = 0;\r\n    /**@internal */\r\n    protected _startLifeTimeGradient: GradientDataNumber = null;\r\n    /**@internal */\r\n    protected _startLifetimeConstantMin: number = 0;\r\n    /**@internal */\r\n    protected _startLifetimeConstantMax: number = 0;\r\n    /**@internal */\r\n    protected _startLifeTimeGradientMin: GradientDataNumber = null;\r\n    /**@internal */\r\n    protected _startLifeTimeGradientMax: GradientDataNumber = null;\r\n    /**@internal */\r\n    protected _maxStartLifetime: number = 0;\r\n\r\n    /** @internal */\r\n    protected _uvLength: Vector2 = new Vector2();//TODO:\r\n    /** @internal */\r\n    protected _vertexStride: number = 0;\r\n    /** @internal */\r\n    protected _indexStride: number = 0;\r\n    /**@internal */\r\n    protected _vertexBuffer: VertexBuffer3D = null;\r\n    /**@internal */\r\n    protected _indexBuffer: IndexBuffer3D = null;\r\n    /** @internal */\r\n    protected _bufferState: BufferState = new BufferState();\r\n\r\n    /**@internal */\r\n    protected _updateMask: number = 0;\r\n\r\n    /**@internal */\r\n    _currentTime: number = 0;\r\n    /**@internal */\r\n    _startUpdateLoopCount: number = 0;\r\n    /**@internal */\r\n    _rand: Rand = null;\r\n    /**@internal */\r\n    _randomSeeds: Uint32Array = null;\r\n\r\n    /**粒子运行的总时长，单位为秒。*/\r\n    duration: number = 0;\r\n    /**是否循环。*/\r\n    looping: boolean = false;\r\n    /**是否预热。暂不支持*/\r\n    prewarm: boolean = false;\r\n    /**开始延迟类型，0为常量模式,1为随机随机双常量模式，不能和prewarm一起使用。*/\r\n    startDelayType: number = 0;\r\n    /**开始播放延迟，不能和prewarm一起使用。*/\r\n    startDelay: number = 0;\r\n    /**开始播放最小延迟，不能和prewarm一起使用。*/\r\n    startDelayMin: number = 0;\r\n    /**开始播放最大延迟，不能和prewarm一起使用。*/\r\n    startDelayMax: number = 0;\r\n\r\n    /**开始速度模式，0为恒定速度，2为两个恒定速度的随机插值。缺少1、3模式*/\r\n    startSpeedType: number = 0;\r\n    /**开始速度,0模式。*/\r\n    startSpeedConstant: number = 0;\r\n    /**最小开始速度,1模式。*/\r\n    startSpeedConstantMin: number = 0;\r\n    /**最大开始速度,1模式。*/\r\n    startSpeedConstantMax: number = 0;\r\n\r\n    /**阻力模式，0为恒定速度，2为两个恒定速度的随机插值*/\r\n    dragType: number = 0;\r\n    /**开始速度,0模式。*/\r\n    dragConstant: number = 0;\r\n    /**最小开始速度,1模式。*/\r\n    dragSpeedConstantMin: number = 0;\r\n    /**最大开始速度,1模式。*/\r\n    dragSpeedConstantMax: number = 0;\r\n\r\n\r\n\r\n    /**开始尺寸是否为3D模式。*/\r\n    threeDStartSize: boolean = false;\r\n    /**开始尺寸模式,0为恒定尺寸，2为两个恒定尺寸的随机插值。缺少1、3模式和对应的二种3D模式*/\r\n    startSizeType: number = 0;\r\n    /**开始尺寸，0模式。*/\r\n    startSizeConstant: number = 0;\r\n    /**开始三维尺寸，0模式。*/\r\n    startSizeConstantSeparate: Vector3 = null;\r\n    /**最小开始尺寸，2模式。*/\r\n    startSizeConstantMin: number = 0;\r\n    /**最大开始尺寸，2模式。*/\r\n    startSizeConstantMax: number = 0;\r\n    /**最小三维开始尺寸，2模式。*/\r\n    startSizeConstantMinSeparate: Vector3 = null;\r\n    /**最大三维开始尺寸，2模式。*/\r\n    startSizeConstantMaxSeparate: Vector3 = null;\r\n\r\n    /**3D开始旋转。*/\r\n    threeDStartRotation: boolean = false;\r\n    /**开始旋转模式,0为恒定尺寸，2为两个恒定旋转的随机插值,缺少2种模式,和对应的四种3D模式。*/\r\n    startRotationType: number = 0;\r\n    /**开始旋转，0模式。*/\r\n    startRotationConstant: number = 0;\r\n    /**开始三维旋转，0模式。*/\r\n    startRotationConstantSeparate: Vector3 = null;\r\n    /**最小开始旋转，1模式。*/\r\n    startRotationConstantMin: number = 0;\r\n    /**最大开始旋转，1模式。*/\r\n    startRotationConstantMax: number = 0;\r\n    /**最小开始三维旋转，1模式。*/\r\n    startRotationConstantMinSeparate: Vector3 = null;\r\n    /**最大开始三维旋转，1模式。*/\r\n    startRotationConstantMaxSeparate: Vector3 = null;\r\n\r\n    /**随机旋转方向，范围为0.0到1.0*/\r\n    randomizeRotationDirection: number = 0;\r\n\r\n    /**开始颜色模式，0为恒定颜色，2为两个恒定颜色的随机插值,缺少2种模式。*/\r\n    startColorType: number = 0;\r\n    /**开始颜色，0模式。*/\r\n    startColorConstant: Vector4 = new Vector4(1, 1, 1, 1);\r\n    /**最小开始颜色，1模式。*/\r\n    startColorConstantMin: Vector4 = new Vector4(0, 0, 0, 0);\r\n    /**最大开始颜色，1模式。*/\r\n    startColorConstantMax: Vector4 = new Vector4(1, 1, 1, 1);\r\n\r\n    /**重力敏感度。*/\r\n    gravityModifier: number = 0;\r\n    /**模拟器空间,0为World,1为Local。暂不支持Custom。*/\r\n    simulationSpace: number = 0;\r\n    /**粒子的播放速度。 */\r\n    simulationSpeed: number = 1.0;\r\n    /**缩放模式，0为Hiercachy,1为Local,2为World。*/\r\n    scaleMode: number = 1;\r\n    /**激活时是否自动播放。*/\r\n    playOnAwake: boolean = false;\r\n\r\n    /**随机种子,注:play()前设置有效。*/\r\n    randomSeed: Uint32Array = null;\r\n    /**是否使用随机种子。 */\r\n    autoRandomSeed: boolean = false;\r\n\r\n    /**是否为性能模式,性能模式下会延迟粒子释放。*/\r\n    isPerformanceMode: boolean = false;\r\n\r\n    /**最大粒子数。*/\r\n    get maxParticles(): number {\r\n        return this._bufferMaxParticles - 1;\r\n    }\r\n\r\n    set maxParticles(value: number) {//TODO:是否要重置其它参数\r\n        var newMaxParticles: number = value + 1;\r\n        if (newMaxParticles !== this._bufferMaxParticles) {\r\n            this._bufferMaxParticles = newMaxParticles;\r\n            this._initBufferDatas();\r\n        }\r\n\r\n        this._updateParticlesSimulationRestart(0);\r\n    }\r\n\r\n    /**\r\n     * 获取发射器。\r\n     */\r\n    get emission(): Emission {\r\n        return this._emission;\r\n    }\r\n\r\n\r\n    /**\r\n     * 粒子存活个数。\r\n     */\r\n    get aliveParticleCount(): number {\r\n        if (this._firstNewElement >= this._firstRetiredElement)\r\n            return this._firstNewElement - this._firstRetiredElement;\r\n        else\r\n            return this._bufferMaxParticles - this._firstRetiredElement + this._firstNewElement;\r\n    }\r\n\r\n    /**\r\n     * 一次循环内的累计时间。\r\n     */\r\n    get emissionTime(): number {\r\n        return this._emissionTime > this.duration ? this.duration : this._emissionTime;\r\n    }\r\n\r\n    /**\r\n     * 形状。\r\n     */\r\n    get shape(): BaseShape {\r\n        return this._shape;\r\n    }\r\n\r\n    set shape(value: BaseShape) {\r\n        if (this._shape !== value) {\r\n            if (value && value.enable)\r\n                this._ownerRender._shaderValues.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_SHAPE);\r\n            else\r\n                this._ownerRender._shaderValues.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_SHAPE);\r\n            this._shape = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 是否存活。\r\n     */\r\n    get isAlive(): boolean {\r\n        if (this._isPlaying || this.aliveParticleCount > 0)//TODO:暂时忽略retired\r\n            return true;\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * 是否正在发射。\r\n     */\r\n    get isEmitting(): boolean {\r\n        return this._isEmitting;\r\n    }\r\n\r\n    /**\r\n     * 是否正在播放。\r\n     */\r\n    get isPlaying(): boolean {\r\n        return this._isPlaying;\r\n    }\r\n\r\n    /**\r\n     * 是否已暂停。\r\n     */\r\n    get isPaused(): boolean {\r\n        return this._isPaused;\r\n    }\r\n\r\n    /**\r\n     * 开始生命周期模式,0为固定时间，1为渐变时间，2为两个固定之间的随机插值,3为两个渐变时间的随机插值。\r\n     */\r\n    get startLifetimeType(): number {\r\n        return this._startLifetimeType;\r\n    }\r\n\r\n    set startLifetimeType(value: number) {\r\n        //if (value !== _startLifetimeType){\r\n        var i: number, n: number;\r\n        switch (this.startLifetimeType) {\r\n            case 0:\r\n                this._maxStartLifetime = this.startLifetimeConstant;\r\n                break;\r\n            case 1:\r\n                this._maxStartLifetime = -Number.MAX_VALUE;\r\n                var startLifeTimeGradient: GradientDataNumber = startLifeTimeGradient;\r\n                for (i = 0, n = startLifeTimeGradient.gradientCount; i < n; i++)\r\n                    this._maxStartLifetime = Math.max(this._maxStartLifetime, startLifeTimeGradient.getValueByIndex(i));\r\n                break;\r\n            case 2:\r\n                this._maxStartLifetime = Math.max(this.startLifetimeConstantMin, this.startLifetimeConstantMax);\r\n                break;\r\n            case 3:\r\n                this._maxStartLifetime = -Number.MAX_VALUE;\r\n                var startLifeTimeGradientMin: GradientDataNumber = startLifeTimeGradientMin;\r\n                for (i = 0, n = startLifeTimeGradientMin.gradientCount; i < n; i++)\r\n                    this._maxStartLifetime = Math.max(this._maxStartLifetime, startLifeTimeGradientMin.getValueByIndex(i));\r\n                var startLifeTimeGradientMax: GradientDataNumber = startLifeTimeGradientMax;\r\n                for (i = 0, n = startLifeTimeGradientMax.gradientCount; i < n; i++)\r\n                    this._maxStartLifetime = Math.max(this._maxStartLifetime, startLifeTimeGradientMax.getValueByIndex(i));\r\n                break;\r\n        }\r\n        this._startLifetimeType = value;\r\n        //}\r\n    }\r\n\r\n    /**\r\n     * 开始生命周期，0模式,单位为秒。\r\n     */\r\n    get startLifetimeConstant(): number {\r\n        return this._startLifetimeConstant;\r\n    }\r\n\r\n    set startLifetimeConstant(value: number) {\r\n        if (this._startLifetimeType === 0)\r\n            this._maxStartLifetime = value;\r\n        this._startLifetimeConstant = value;\r\n    }\r\n\r\n    /**\r\n     * 开始渐变生命周期，1模式,单位为秒。\r\n     */\r\n    get startLifeTimeGradient(): GradientDataNumber {\r\n        return this._startLifeTimeGradient;\r\n    }\r\n\r\n    set startLifeTimeGradient(value: GradientDataNumber) {//无法使用if (_startLifeTimeGradient !== value)过滤，同一个GradientDataNumber可能修改了值,因此所有startLifeTime属性都统一处理\r\n        if (this._startLifetimeType === 1) {\r\n            this._maxStartLifetime = -Number.MAX_VALUE;\r\n            for (var i: number = 0, n: number = value.gradientCount; i < n; i++)\r\n                this._maxStartLifetime = Math.max(this._maxStartLifetime, value.getValueByIndex(i));\r\n        }\r\n        this._startLifeTimeGradient = value;\r\n    }\r\n\r\n    /**\r\n     * 最小开始生命周期，2模式,单位为秒。\r\n     */\r\n    get startLifetimeConstantMin(): number {\r\n        return this._startLifetimeConstantMin;\r\n    }\r\n\r\n    set startLifetimeConstantMin(value: number) {\r\n        if (this._startLifetimeType === 2)\r\n            this._maxStartLifetime = Math.max(value, this._startLifetimeConstantMax);\r\n        this._startLifetimeConstantMin = value;\r\n    }\r\n\r\n\r\n    /**\r\n     * 最大开始生命周期，2模式,单位为秒。\r\n     */\r\n    get startLifetimeConstantMax(): number {\r\n        return this._startLifetimeConstantMax;\r\n    }\r\n\r\n    set startLifetimeConstantMax(value: number) {\r\n        if (this._startLifetimeType === 2)\r\n            this._maxStartLifetime = Math.max(this._startLifetimeConstantMin, value);\r\n        this._startLifetimeConstantMax = value;\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * 开始渐变最小生命周期，3模式,单位为秒。\r\n     */\r\n    get startLifeTimeGradientMin(): GradientDataNumber {\r\n        return this._startLifeTimeGradientMin;\r\n    }\r\n\r\n    set startLifeTimeGradientMin(value: GradientDataNumber) {\r\n        if (this._startLifetimeType === 3) {\r\n            var i: number, n: number;\r\n            this._maxStartLifetime = -Number.MAX_VALUE;\r\n            for (i = 0, n = value.gradientCount; i < n; i++)\r\n                this._maxStartLifetime = Math.max(this._maxStartLifetime, value.getValueByIndex(i));\r\n            for (i = 0, n = this._startLifeTimeGradientMax.gradientCount; i < n; i++)\r\n                this._maxStartLifetime = Math.max(this._maxStartLifetime, this._startLifeTimeGradientMax.getValueByIndex(i));\r\n        }\r\n        this._startLifeTimeGradientMin = value;\r\n    }\r\n\r\n    /**\r\n     * 开始渐变最大生命周期，3模式,单位为秒。\r\n     */\r\n    get startLifeTimeGradientMax(): GradientDataNumber {\r\n        return this._startLifeTimeGradientMax;\r\n    }\r\n\r\n    set startLifeTimeGradientMax(value: GradientDataNumber) {\r\n        if (this._startLifetimeType === 3) {\r\n            var i: number, n: number;\r\n            this._maxStartLifetime = -Number.MAX_VALUE;\r\n            for (i = 0, n = this._startLifeTimeGradientMin.gradientCount; i < n; i++)\r\n                this._maxStartLifetime = Math.max(this._maxStartLifetime, this._startLifeTimeGradientMin.getValueByIndex(i));\r\n            for (i = 0, n = value.gradientCount; i < n; i++)\r\n                this._maxStartLifetime = Math.max(this._maxStartLifetime, value.getValueByIndex(i));\r\n        }\r\n        this._startLifeTimeGradientMax = value;\r\n    }\r\n\r\n    /**\r\n     * 生命周期速度,注意:如修改该值的某些属性,需重新赋值此属性才可生效。\r\n     */\r\n    get velocityOverLifetime(): VelocityOverLifetime {\r\n        return this._velocityOverLifetime;\r\n    }\r\n\r\n    set velocityOverLifetime(value: VelocityOverLifetime) {\r\n        var shaDat: ShaderData = this._ownerRender._shaderValues;\r\n\r\n        shaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_VELOCITYOVERLIFETIMECONSTANT);\r\n        shaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_VELOCITYOVERLIFETIMECURVE);\r\n        shaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_VELOCITYOVERLIFETIMERANDOMCONSTANT);\r\n        shaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_VELOCITYOVERLIFETIMERANDOMCURVE);\r\n\r\n        this._velocityOverLifetime = value;\r\n\r\n        if (value) {\r\n            var velocity: GradientVelocity = value.velocity;\r\n            var velocityType: number = velocity.type;\r\n\r\n            if (value.enable) {\r\n                switch (velocityType) {\r\n                    case 0:\r\n                        shaDat.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_VELOCITYOVERLIFETIMECONSTANT);\r\n                        shaDat.setVector3(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYCONST, velocity.constant);\r\n                        break;\r\n                    case 1:\r\n                        shaDat.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_VELOCITYOVERLIFETIMECURVE);\r\n                        shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTX, velocity.gradientX._elements);\r\n                        shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTY, velocity.gradientY._elements);\r\n                        shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTZ, velocity.gradientZ._elements);\r\n                        break;\r\n                    case 2:\r\n                        shaDat.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_VELOCITYOVERLIFETIMERANDOMCONSTANT);\r\n                        shaDat.setVector3(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYCONST, velocity.constantMin);\r\n                        shaDat.setVector3(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYCONSTMAX, velocity.constantMax);\r\n                        break;\r\n                    case 3:\r\n                        shaDat.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_VELOCITYOVERLIFETIMERANDOMCURVE);\r\n                        shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTX, velocity.gradientXMin._elements);\r\n                        shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTXMAX, velocity.gradientXMax._elements);\r\n                        shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTY, velocity.gradientYMin._elements);\r\n                        shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTYMAX, velocity.gradientYMax._elements);\r\n                        shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTZ, velocity.gradientZMin._elements);\r\n                        shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTZMAX, velocity.gradientZMax._elements);\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n            shaDat.setInt(ShuriKenParticle3DShaderDeclaration.VOLSPACETYPE, value.space);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 生命周期颜色,注意:如修改该值的某些属性,需重新赋值此属性才可生效。\r\n     */\r\n    get colorOverLifetime(): ColorOverLifetime {\r\n        return this._colorOverLifetime;\r\n    }\r\n\r\n    set colorOverLifetime(value: ColorOverLifetime) {\r\n        var shaDat: ShaderData = this._ownerRender._shaderValues;\r\n\r\n        shaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_COLOROVERLIFETIME);\r\n        shaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_RANDOMCOLOROVERLIFETIME);\r\n\r\n        this._colorOverLifetime = value;\r\n\r\n        if (value) {\r\n            var color: GradientColor = value.color;\r\n            if (value.enable) {\r\n                switch (color.type) {\r\n                    case 1:\r\n                        shaDat.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_COLOROVERLIFETIME);\r\n\r\n                        let gradientColor: Gradient = color.gradient;\r\n                        shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.COLOROVERLIFEGRADIENTALPHAS, gradientColor._alphaElements);\r\n                        shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.COLOROVERLIFEGRADIENTCOLORS, gradientColor._rgbElements);\r\n                        let ranges = gradientColor._keyRanges;\r\n                        ranges.setValue(1, 0, 1, 0);\r\n                        for (let index = 0; index < gradientColor.colorRGBKeysCount; index++) {\r\n                            let colorKey = gradientColor._rgbElements[index * 4];\r\n                            ranges.x = Math.min(ranges.x, colorKey);\r\n                            ranges.y = Math.max(ranges.y, colorKey);\r\n                        }\r\n                        for (let index = 0; index < gradientColor.colorAlphaKeysCount; index++) {\r\n                            let alphaKey = gradientColor._alphaElements[index * 2];\r\n                            ranges.z = Math.min(ranges.z, alphaKey);\r\n                            ranges.w = Math.max(ranges.w, alphaKey);\r\n                        }\r\n                        shaDat.setVector(ShuriKenParticle3DShaderDeclaration.COLOROVERLIFEGRADIENTRANGES, ranges);\r\n\r\n                        if (gradientColor.maxColorAlphaKeysCount == 8) {\r\n                            shaDat.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_COLORKEYCOUNT_8);\r\n                        }\r\n                        else {\r\n                            shaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_COLORKEYCOUNT_8);\r\n                        }\r\n                        break;\r\n                    case 3:\r\n                        shaDat.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_RANDOMCOLOROVERLIFETIME);\r\n\r\n                        let minGradientColor: Gradient = color.gradientMin;\r\n                        let maxGradientColor: Gradient = color.gradientMax;\r\n                        shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.COLOROVERLIFEGRADIENTALPHAS, minGradientColor._alphaElements);\r\n                        shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.COLOROVERLIFEGRADIENTCOLORS, minGradientColor._rgbElements);\r\n                        shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.MAXCOLOROVERLIFEGRADIENTALPHAS, maxGradientColor._alphaElements);\r\n                        shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.MAXCOLOROVERLIFEGRADIENTCOLORS, maxGradientColor._rgbElements);\r\n\r\n                        let minRanges = minGradientColor._keyRanges;\r\n                        minRanges.setValue(1, 0, 1, 0);\r\n                        for (let index = 0; index < minGradientColor.colorRGBKeysCount; index++) {\r\n                            let colorKey = minGradientColor._rgbElements[index * 4];\r\n                            minRanges.x = Math.min(minRanges.x, colorKey);\r\n                            minRanges.y = Math.max(minRanges.y, colorKey);\r\n                        }\r\n                        for (let index = 0; index < minGradientColor.colorAlphaKeysCount; index++) {\r\n                            let alphaKey = minGradientColor._alphaElements[index * 2];\r\n                            minRanges.z = Math.min(minRanges.z, alphaKey);\r\n                            minRanges.w = Math.max(minRanges.w, alphaKey);\r\n                        }\r\n                        shaDat.setVector(ShuriKenParticle3DShaderDeclaration.COLOROVERLIFEGRADIENTRANGES, minRanges);\r\n                        let maxRanges = maxGradientColor._keyRanges;\r\n                        maxRanges.setValue(1, 0, 1, 0);\r\n                        for (let index = 0; index < maxGradientColor.colorRGBKeysCount; index++) {\r\n                            let colorKey = maxGradientColor._rgbElements[index * 4];\r\n                            maxRanges.x = Math.min(maxRanges.x, colorKey);\r\n                            maxRanges.y = Math.max(maxRanges.y, colorKey);\r\n                        }\r\n                        for (let index = 0; index < maxGradientColor.colorAlphaKeysCount; index++) {\r\n                            let alphaKey = maxGradientColor._alphaElements[index * 2];\r\n                            maxRanges.z = Math.min(maxRanges.z, alphaKey);\r\n                            maxRanges.w = Math.max(maxRanges.w, alphaKey);\r\n                        }\r\n                        shaDat.setVector(ShuriKenParticle3DShaderDeclaration.MAXCOLOROVERLIFEGRADIENTRANGES, maxRanges);\r\n\r\n                        let maxkeyCount = Math.max(minGradientColor.maxColorAlphaKeysCount, maxGradientColor.maxColorAlphaKeysCount);\r\n                        if (maxkeyCount == 8) {\r\n                            shaDat.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_COLORKEYCOUNT_8);\r\n                        }\r\n                        else {\r\n                            shaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_COLORKEYCOUNT_8);\r\n                        }\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 生命周期尺寸,注意:如修改该值的某些属性,需重新赋值此属性才可生效。\r\n     */\r\n    get sizeOverLifetime(): SizeOverLifetime {\r\n        return this._sizeOverLifetime;\r\n    }\r\n\r\n    set sizeOverLifetime(value: SizeOverLifetime) {\r\n        var shaDat: ShaderData = this._ownerRender._shaderValues;\r\n\r\n        shaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_SIZEOVERLIFETIMECURVE);\r\n        shaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_SIZEOVERLIFETIMECURVESEPERATE);\r\n        shaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_SIZEOVERLIFETIMERANDOMCURVES);\r\n        shaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_SIZEOVERLIFETIMERANDOMCURVESSEPERATE);\r\n\r\n        this._sizeOverLifetime = value;\r\n\r\n        if (value) {\r\n            var size: GradientSize = value.size;\r\n            var sizeSeparate: boolean = size.separateAxes;\r\n            var sizeType: number = size.type;\r\n            if (value.enable) {\r\n                switch (sizeType) {\r\n                    case 0:\r\n                        if (sizeSeparate) {\r\n                            shaDat.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_SIZEOVERLIFETIMECURVESEPERATE);\r\n\r\n                            shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.SOLSIZEGRADIENTX, size.gradientX._elements);\r\n                            shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.SOLSIZEGRADIENTY, size.gradientY._elements);\r\n                            shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.SOLSizeGradientZ, size.gradientZ._elements);\r\n                        }\r\n                        else {\r\n                            shaDat.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_SIZEOVERLIFETIMECURVE);\r\n\r\n                            shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.SOLSIZEGRADIENT, size.gradient._elements);\r\n                        }\r\n                        break;\r\n                    case 2:\r\n                        if (sizeSeparate) {\r\n                            shaDat.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_SIZEOVERLIFETIMERANDOMCURVESSEPERATE);\r\n\r\n                            shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.SOLSIZEGRADIENTX, size.gradientXMin._elements);\r\n                            shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.SOLSIZEGRADIENTXMAX, size.gradientXMax._elements);\r\n                            shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.SOLSIZEGRADIENTY, size.gradientYMin._elements);\r\n                            shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.SOLSIZEGRADIENTYMAX, size.gradientYMax._elements);\r\n                            shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.SOLSizeGradientZ, size.gradientZMin._elements);\r\n                            shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.SOLSizeGradientZMAX, size.gradientZMax._elements);\r\n                        }\r\n                        else {\r\n                            shaDat.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_SIZEOVERLIFETIMERANDOMCURVES);\r\n\r\n                            shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.SOLSIZEGRADIENT, size.gradientMin._elements);\r\n                            shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.SOLSizeGradientMax, size.gradientMax._elements);\r\n                        }\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 生命周期旋转,注意:如修改该值的某些属性,需重新赋值此属性才可生效。\r\n     */\r\n    get rotationOverLifetime(): RotationOverLifetime {\r\n        return this._rotationOverLifetime;\r\n    }\r\n\r\n    set rotationOverLifetime(value: RotationOverLifetime) {\r\n        var shaDat: ShaderData = this._ownerRender._shaderValues;\r\n\r\n        shaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_ROTATIONOVERLIFETIME);\r\n        shaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_ROTATIONOVERLIFETIMESEPERATE);\r\n        shaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_ROTATIONOVERLIFETIMECONSTANT);\r\n        shaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_ROTATIONOVERLIFETIMECURVE);\r\n        shaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_ROTATIONOVERLIFETIMERANDOMCONSTANTS);\r\n        shaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_ROTATIONOVERLIFETIMERANDOMCURVES);\r\n\r\n        this._rotationOverLifetime = value;\r\n\r\n        if (value) {\r\n            var rotation: GradientAngularVelocity = value.angularVelocity;\r\n\r\n            if (!rotation)//TODO:兼容代码，RotationOverLifetime未支持全可能为空\r\n                return\r\n\r\n            var rotationSeparate: boolean = rotation.separateAxes;\r\n            var rotationType: number = rotation.type;\r\n            if (value.enable) {\r\n                if (rotationSeparate) {\r\n                    shaDat.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_ROTATIONOVERLIFETIMESEPERATE);\r\n                }\r\n                else {\r\n                    shaDat.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_ROTATIONOVERLIFETIME);\r\n                }\r\n                switch (rotationType) {\r\n                    case 0:\r\n                        shaDat.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_ROTATIONOVERLIFETIMECONSTANT);\r\n                        if (rotationSeparate) {\r\n                            shaDat.setVector3(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYCONSTSEPRARATE, rotation.constantSeparate);\r\n                        }\r\n                        else {\r\n                            shaDat.setNumber(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYCONST, rotation.constant);\r\n                        }\r\n                        break;\r\n                    case 1:\r\n                        shaDat.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_ROTATIONOVERLIFETIMECURVE);\r\n                        if (rotationSeparate) {\r\n                            shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTX, rotation.gradientX._elements);\r\n                            shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTY, rotation.gradientY._elements);\r\n                            shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTZ, rotation.gradientZ._elements);\r\n                        }\r\n                        else {\r\n                            shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENT, rotation.gradient._elements);\r\n                        }\r\n                        break;\r\n                    case 2:\r\n                        shaDat.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_ROTATIONOVERLIFETIMERANDOMCONSTANTS);\r\n                        if (rotationSeparate) {\r\n                            shaDat.setVector3(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYCONSTSEPRARATE, rotation.constantMinSeparate);\r\n                            shaDat.setVector3(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYCONSTMAXSEPRARATE, rotation.constantMaxSeparate);\r\n                        }\r\n                        else {\r\n                            shaDat.setNumber(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYCONST, rotation.constantMin);\r\n                            shaDat.setNumber(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYCONSTMAX, rotation.constantMax);\r\n                        }\r\n                        break;\r\n                    case 3:\r\n                        shaDat.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_ROTATIONOVERLIFETIMERANDOMCURVES);\r\n                        if (rotationSeparate) {\r\n                            shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTX, rotation.gradientXMin._elements);\r\n                            shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTXMAX, rotation.gradientXMax._elements);\r\n                            shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTY, rotation.gradientYMin._elements);\r\n                            shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTYMAX, rotation.gradientYMax._elements);\r\n                            shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTZ, rotation.gradientZMin._elements);\r\n                            shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTZMAX, rotation.gradientZMax._elements);\r\n                            //shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTW, rotation.gradientWMin._elements);\r\n                            //shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTWMAX, rotation.gradientWMax._elements);\r\n                        }\r\n                        else {\r\n                            shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENT, rotation.gradientMin._elements);\r\n                            shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTMAX, rotation.gradientMax._elements);\r\n                        }\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 生命周期纹理动画,注意:如修改该值的某些属性,需重新赋值此属性才可生效。\r\n     */\r\n    get textureSheetAnimation(): TextureSheetAnimation {\r\n        return this._textureSheetAnimation;\r\n    }\r\n\r\n    set textureSheetAnimation(value: TextureSheetAnimation) {\r\n        var shaDat: ShaderData = this._ownerRender._shaderValues;\r\n\r\n        shaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_TEXTURESHEETANIMATIONCURVE);\r\n        shaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_TEXTURESHEETANIMATIONRANDOMCURVE);\r\n\r\n        this._textureSheetAnimation = value;\r\n\r\n        if (value) {\r\n            var frameOverTime: FrameOverTime = value.frame;\r\n            var textureAniType: number = frameOverTime.type;\r\n            if (value.enable) {\r\n                switch (textureAniType) {\r\n                    case 1:\r\n                        shaDat.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_TEXTURESHEETANIMATIONCURVE);\r\n\r\n                        shaDat.setNumber(ShuriKenParticle3DShaderDeclaration.TEXTURESHEETANIMATIONCYCLES, value.cycles);\r\n                        var title: Vector2 = value.tiles;\r\n                        var _uvLengthE: Vector2 = this._uvLength;\r\n                        _uvLengthE.x = 1.0 / title.x;\r\n                        _uvLengthE.y = 1.0 / title.y;\r\n                        shaDat.setVector2(ShuriKenParticle3DShaderDeclaration.TEXTURESHEETANIMATIONSUBUVLENGTH, this._uvLength);\r\n\r\n                        shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.TEXTURESHEETANIMATIONGRADIENTUVS, frameOverTime.frameOverTimeData._elements);\r\n                        break;\r\n                    case 3:\r\n                        shaDat.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_TEXTURESHEETANIMATIONRANDOMCURVE);\r\n\r\n                        shaDat.setNumber(ShuriKenParticle3DShaderDeclaration.TEXTURESHEETANIMATIONCYCLES, value.cycles);\r\n                        var title: Vector2 = value.tiles;\r\n                        var _uvLengthE: Vector2 = this._uvLength;\r\n                        _uvLengthE.x = 1.0 / title.x;\r\n                        _uvLengthE.y = 1.0 / title.y;\r\n                        shaDat.setVector2(ShuriKenParticle3DShaderDeclaration.TEXTURESHEETANIMATIONSUBUVLENGTH, this._uvLength);\r\n\r\n                        shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.TEXTURESHEETANIMATIONGRADIENTUVS, frameOverTime.frameOverTimeDataMin._elements);\r\n                        shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.TEXTURESHEETANIMATIONGRADIENTMAXUVS, frameOverTime.frameOverTimeDataMax._elements);\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    constructor(render: ShurikenParticleRenderer, meshTopology: MeshTopology = MeshTopology.Triangles, drawType: DrawType = DrawType.DrawElement) {\r\n        super(meshTopology, drawType);\r\n        this.indexFormat = IndexFormat.UInt16;\r\n\r\n        this._firstActiveElement = 0;\r\n        this._firstNewElement = 0;\r\n        this._firstFreeElement = 0;\r\n        this._firstRetiredElement = 0;\r\n\r\n        this._owner = render.owner as Sprite3D;\r\n        this._ownerRender = render;\r\n        this._useCustomBounds = false;\r\n\r\n        this._currentTime = 0;\r\n        this._bounds = new Bounds(new Vector3(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE), new Vector3(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE));\r\n        this.bufferState = this._bufferState = new BufferState();\r\n        this._isEmitting = false;\r\n        this._isPlaying = false;\r\n        this._isPaused = false;\r\n        this._burstsIndex = 0;\r\n        this._frameRateTime = 0;\r\n        this._emissionTime = 0;\r\n        this._totalDelayTime = 0;\r\n        this._simulateUpdate = false;\r\n\r\n        this._bufferMaxParticles = 1;\r\n        this.duration = 5.0;\r\n        this.looping = true;\r\n        this.prewarm = false;\r\n        this.startDelayType = 0;\r\n        this.startDelay = 0.0;\r\n        this.startDelayMin = 0.0;\r\n        this.startDelayMax = 0.0;\r\n\r\n        this._startLifetimeType = 0;\r\n        this._startLifetimeConstant = 5.0;\r\n        this._startLifeTimeGradient = new GradientDataNumber();\r\n        this._startLifetimeConstantMin = 0.0;\r\n        this._startLifetimeConstantMax = 5.0;\r\n        this._startLifeTimeGradientMin = new GradientDataNumber();\r\n        this._startLifeTimeGradientMax = new GradientDataNumber();\r\n        this._maxStartLifetime = 5.0;//_startLifetimeType默认为0，_startLifetimeConstant为5.0,因此该值为5.0\r\n\r\n        this.startSpeedType = 0;\r\n        this.startSpeedConstant = 5.0;\r\n        this.startSpeedConstantMin = 0.0;\r\n        this.startSpeedConstantMax = 5.0;\r\n\r\n        //drag\r\n        this.dragType = 0;\r\n        this.dragConstant = 0;\r\n        this.dragSpeedConstantMin = 0;\r\n        this.dragSpeedConstantMax = 0;\r\n\r\n        this.threeDStartSize = false;\r\n        this.startSizeType = 0;\r\n        this.startSizeConstant = 1;\r\n        this.startSizeConstantSeparate = new Vector3(1, 1, 1);\r\n        this.startSizeConstantMin = 0;\r\n        this.startSizeConstantMax = 1;\r\n        this.startSizeConstantMinSeparate = new Vector3(0, 0, 0);\r\n        this.startSizeConstantMaxSeparate = new Vector3(1, 1, 1);\r\n\r\n        this.threeDStartRotation = false;\r\n        this.startRotationType = 0;\r\n        this.startRotationConstant = 0;\r\n        this.startRotationConstantSeparate = new Vector3(0, 0, 0);\r\n        this.startRotationConstantMin = 0.0;\r\n        this.startRotationConstantMax = 0.0;\r\n        this.startRotationConstantMinSeparate = new Vector3(0, 0, 0);\r\n        this.startRotationConstantMaxSeparate = new Vector3(0, 0, 0);\r\n\r\n        this.gravityModifier = 0.0;\r\n        this.simulationSpace = 1;\r\n        this.scaleMode = 1;\r\n        this.playOnAwake = true;\r\n        this._rand = new Rand(0);\r\n        this.autoRandomSeed = true;\r\n        this.randomSeed = new Uint32Array(1);\r\n        this._randomSeeds = new Uint32Array(ShurikenParticleSystem._RANDOMOFFSET.length);\r\n        this.isPerformanceMode = true;\r\n\r\n        this._emission = new Emission();\r\n        this._emission.enable = true;\r\n        //set GeometryElement\r\n\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _getVertexBuffer(index: number = 0): VertexBuffer3D {\r\n        if (index === 0)\r\n            return this._vertexBuffer;\r\n        else\r\n            return null;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _getIndexBuffer(): IndexBuffer3D {\r\n        return this._indexBuffer;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _generateBounds(): void {\r\n        var particleRender: ShurikenParticleRenderer = this._ownerRender;\r\n        var boundsMin: Vector3 = this._bounds.getMin();\r\n        var boundsMax: Vector3 = this._bounds.getMax();\r\n\r\n        // lifeTime\r\n        var time: number = 0;\r\n        switch (this.startLifetimeType) {\r\n            case 0: // 固定时间\r\n                time = this._startLifetimeConstant;\r\n                break;\r\n            case 2: // 两个固定时间随机值\r\n                time = this._startLifetimeConstantMax;\r\n                break;\r\n            case 1: // 渐变时间\r\n            case 3: // 两个渐变时间随机值\r\n            default:\r\n                // todo 不支持模式\r\n                break;\r\n        }\r\n\r\n        // speed\r\n        var speedOrigan: number = 0;\r\n        switch (this.startSpeedType) {\r\n            case 0: // 恒定速度\r\n                speedOrigan = this.startSpeedConstant;\r\n                break;\r\n            case 2: // 两个固定值间\r\n                speedOrigan = this.startSpeedConstantMax;\r\n                break;\r\n            case 1:\r\n            case 3:\r\n            default:\r\n                // todo 不支持模式\r\n                break;\r\n        }\r\n\r\n        // size\r\n        var maxSizeScale = 0;\r\n        if (this.threeDStartSize) {\r\n            switch (this.startSizeType) {\r\n                case 0: // 恒定尺寸\r\n                    maxSizeScale = Math.max(this.startSizeConstantSeparate.x, this.startSizeConstantSeparate.y, this.startSizeConstantSeparate.z);\r\n                    break;\r\n                case 2: // 两个固定尺寸之间\r\n                    maxSizeScale = Math.max(this.startSizeConstantMaxSeparate.x, this.startSizeConstantMaxSeparate.y, this.startSizeConstantMaxSeparate.z);\r\n                    break;\r\n                case 1:\r\n                case 3:\r\n                default:\r\n                    // todo 不支持模式\r\n                    break;\r\n            }\r\n        }\r\n        else {\r\n            switch (this.startSizeType) {\r\n                case 0: // 恒定尺寸\r\n                    maxSizeScale = this.startSizeConstant;\r\n                    break;\r\n                case 2: // 两个固定尺寸之间\r\n                    maxSizeScale = this.startSizeConstantMax;\r\n                    break;\r\n                case 1:\r\n                case 3:\r\n                default:\r\n                    // todo 不支持模式\r\n                    break;\r\n            }\r\n        }\r\n\r\n        // shape\r\n        var zDirectionSpeed: Vector3 = ShurikenParticleSystem._tempVector30;\r\n        var fDirectionSpeed: Vector3 = ShurikenParticleSystem._tempVector31;\r\n        var zEmisionOffsetXYZ: Vector3 = ShurikenParticleSystem._tempVector32;\r\n        var fEmisionOffsetXYZ: Vector3 = ShurikenParticleSystem._tempVector33;\r\n\r\n        zDirectionSpeed.setValue(0, 0, 1);\r\n        fDirectionSpeed.setValue(0, 0, 0);\r\n        zEmisionOffsetXYZ.setValue(0, 0, 0);\r\n        fEmisionOffsetXYZ.setValue(0, 0, 0);\r\n\r\n        if (this.shape && this.shape.enable) {\r\n            switch (this.shape.shapeType) {\r\n                case ParticleSystemShapeType.Sphere:\r\n                    var sphere: SphereShape = <SphereShape>this.shape;\r\n                    zDirectionSpeed.setValue(1, 1, 1);\r\n                    fDirectionSpeed.setValue(1, 1, 1);\r\n                    zEmisionOffsetXYZ.setValue(sphere.radius, sphere.radius, sphere.radius);\r\n                    fEmisionOffsetXYZ.setValue(sphere.radius, sphere.radius, sphere.radius);\r\n                    break;\r\n                case ParticleSystemShapeType.Hemisphere:\r\n                    var hemiShpere: HemisphereShape = <HemisphereShape>this.shape;\r\n                    zDirectionSpeed.setValue(1, 1, 1);\r\n                    fDirectionSpeed.setValue(1, 1, 1);\r\n                    zEmisionOffsetXYZ.setValue(hemiShpere.radius, hemiShpere.radius, hemiShpere.radius);\r\n                    fEmisionOffsetXYZ.setValue(hemiShpere.radius, hemiShpere.radius, 0.0);\r\n                    break;\r\n                case ParticleSystemShapeType.Cone:\r\n                    var cone: ConeShape = <ConeShape>this.shape;\r\n                    // Base || BaseShell\r\n                    if (cone.emitType == 0 || cone.emitType == 1) {\r\n                        // todo angle define\r\n                        // var angle: number = cone.angle * Math.PI / 180;\r\n                        var angle: number = cone.angle;\r\n                        var sinAngle: number = Math.sin(angle);\r\n                        zDirectionSpeed.setValue(sinAngle, sinAngle, 1.0);\r\n                        fDirectionSpeed.setValue(sinAngle, sinAngle, 0.0);\r\n                        zEmisionOffsetXYZ.setValue(cone.radius, cone.radius, 0.0);\r\n                        fEmisionOffsetXYZ.setValue(cone.radius, cone.radius, 0.0);\r\n                        break;\r\n                    }\r\n                    // Volume || VolumeShell\r\n                    else if (cone.emitType == 2 || cone.emitType == 3) {\r\n                        // var angle: number = cone.angle * Math.PI / 180;\r\n                        var angle: number = cone.angle;\r\n                        var sinAngle: number = Math.sin(angle);\r\n                        var coneLength: number = cone.length;\r\n                        zDirectionSpeed.setValue(sinAngle, sinAngle, 1.0);\r\n                        fDirectionSpeed.setValue(sinAngle, sinAngle, 0.0);\r\n                        var tanAngle: number = Math.tan(angle);\r\n                        var rPLCT: number = cone.radius + coneLength * tanAngle;\r\n                        zEmisionOffsetXYZ.setValue(rPLCT, rPLCT, coneLength);\r\n                        fEmisionOffsetXYZ.setValue(rPLCT, rPLCT, 0.0);\r\n                    }\r\n                    break;\r\n                case ParticleSystemShapeType.Box:\r\n                    var box: BoxShape = <BoxShape>this.shape;\r\n                    if (this.shape.randomDirection != 0) {\r\n                        zDirectionSpeed.setValue(1, 1, 1);\r\n                        fDirectionSpeed.setValue(1, 1, 1);\r\n                    }\r\n                    zEmisionOffsetXYZ.setValue(box.x / 2, box.y / 2, box.z / 2);\r\n                    fEmisionOffsetXYZ.setValue(box.x / 2, box.y / 2, box.z / 2);\r\n                    break;\r\n                case ParticleSystemShapeType.Circle:\r\n                    var circle: CircleShape = <CircleShape>this.shape;\r\n                    zDirectionSpeed.setValue(1, 1, 1);\r\n                    fDirectionSpeed.setValue(1, 1, 1);\r\n                    zEmisionOffsetXYZ.setValue(circle.radius, circle.radius, 0);\r\n                    fEmisionOffsetXYZ.setValue(circle.radius, circle.radius, 0);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n\r\n        // size\r\n        var meshSize: number = 0;\r\n        // 是否是 mesh 模式\r\n        var meshMode: boolean = particleRender.renderMode == 4;\r\n        switch (particleRender.renderMode) {\r\n            case 0: // billboard\r\n            case 1:\r\n            case 2:\r\n            case 3:\r\n                meshSize = ShurikenParticleSystem.halfKSqrtOf2;// Math.sqrt(2) / 2.0;\r\n                break;\r\n            case 4: // mesh\r\n                var meshBounds: Bounds = particleRender.mesh.bounds;\r\n                meshSize = Math.sqrt(Math.pow(meshBounds.getExtent().x, 2.0) + Math.pow(meshBounds.getExtent().y, 2.0) + Math.pow(meshBounds.getExtent().z, 2.0));\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        var endSizeOffset: Vector3 = ShurikenParticleSystem._tempVector36;\r\n        endSizeOffset.setValue(1, 1, 1);\r\n        if (this.sizeOverLifetime && this.sizeOverLifetime.enable) {\r\n            var gradientSize: GradientSize = this.sizeOverLifetime.size;\r\n            var maxSize: number = gradientSize.getMaxSizeInGradient(meshMode);\r\n\r\n            endSizeOffset.setValue(maxSize, maxSize, maxSize);\r\n        }\r\n\r\n        var offsetSize: number = meshSize * maxSizeScale;\r\n        Vector3.scale(endSizeOffset, offsetSize, endSizeOffset);\r\n\r\n        // var distance: number = speedOrigan * time;\r\n        var speedZOffset: Vector3 = ShurikenParticleSystem._tempVector34;\r\n        var speedFOffset: Vector3 = ShurikenParticleSystem._tempVector35;\r\n\r\n        if (speedOrigan > 0) {\r\n            Vector3.scale(zDirectionSpeed, speedOrigan, speedZOffset);\r\n            Vector3.scale(fDirectionSpeed, speedOrigan, speedFOffset);\r\n        }\r\n        else {\r\n            Vector3.scale(zDirectionSpeed, -speedOrigan, speedFOffset);\r\n            Vector3.scale(fDirectionSpeed, -speedOrigan, speedZOffset);\r\n        }\r\n\r\n        if (this.velocityOverLifetime && this.velocityOverLifetime.enable) {\r\n            var gradientVelocity: GradientVelocity = this.velocityOverLifetime.velocity;\r\n            var velocitySpeedOffset: Vector3 = ShurikenParticleSystem._tempVector37;\r\n            velocitySpeedOffset.setValue(0, 0, 0);\r\n            switch (gradientVelocity.type) {\r\n                case 0: // 常量模式\r\n                    gradientVelocity.constant.cloneTo(velocitySpeedOffset);\r\n                    break;\r\n                case 2: // 随机双常量模式\r\n                    gradientVelocity.constantMax.cloneTo(velocitySpeedOffset);\r\n                    break;\r\n                case 1: // 曲线模式\r\n                    // todo 获取 曲线最大值\r\n                    var curveX: number = gradientVelocity.gradientX.getAverageValue();\r\n                    var curveY: number = gradientVelocity.gradientY.getAverageValue();\r\n                    var curveZ: number = gradientVelocity.gradientZ.getAverageValue();\r\n                    velocitySpeedOffset.setValue(curveX, curveY, curveZ);\r\n                    break;\r\n                case 3: // 随机双曲线模式\r\n                    var xMax: number = gradientVelocity.gradientXMax.getAverageValue();\r\n                    var yMax: number = gradientVelocity.gradientYMax.getAverageValue();\r\n                    var zMax: number = gradientVelocity.gradientZMax.getAverageValue();\r\n                    velocitySpeedOffset.setValue(xMax, yMax, zMax);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n\r\n            // 速度空间 world\r\n            if (this.velocityOverLifetime.space == 1) {\r\n                Vector3.transformV3ToV3(velocitySpeedOffset, this._owner.transform.worldMatrix, velocitySpeedOffset);\r\n            }\r\n\r\n            Vector3.add(speedZOffset, velocitySpeedOffset, speedZOffset);\r\n            Vector3.subtract(speedFOffset, velocitySpeedOffset, speedFOffset);\r\n\r\n            Vector3.max(speedZOffset, Vector3.ZERO, speedZOffset);\r\n            Vector3.max(speedFOffset, Vector3.ZERO, speedFOffset);\r\n        }\r\n\r\n        Vector3.scale(speedZOffset, time, speedZOffset);\r\n        Vector3.scale(speedFOffset, time, speedFOffset);\r\n\r\n        //gravity重力值\r\n        var gravity: number = this.gravityModifier;\r\n        if (gravity != 0) {\r\n            // 记录重力影响偏移\r\n            var gravityOffset: number = 0.5 * ShurikenParticleSystem.g * gravity * time * time;\r\n\r\n            var speedZOffsetY = speedZOffset.y - gravityOffset;\r\n            var speedFOffsetY = speedFOffset.y + gravityOffset;\r\n\r\n            speedZOffsetY = speedZOffsetY > 0 ? speedZOffsetY : 0;\r\n            speedFOffsetY = speedFOffsetY > 0 ? speedFOffsetY : 0;\r\n\r\n            this._gravityOffset.setValue(speedZOffset.y - speedZOffsetY, speedFOffsetY - speedFOffset.y);\r\n        }\r\n\r\n        // speedOrigan * directionSpeed * time + directionoffset + size * maxsizeScale\r\n        Vector3.add(speedZOffset, endSizeOffset, boundsMax);\r\n        Vector3.add(boundsMax, zEmisionOffsetXYZ, boundsMax);\r\n\r\n        Vector3.add(speedFOffset, endSizeOffset, boundsMin);\r\n        Vector3.add(boundsMin, fEmisionOffsetXYZ, boundsMin);\r\n        Vector3.scale(boundsMin, -1, boundsMin);\r\n\r\n        this._bounds.setMin(boundsMin);\r\n        this._bounds.setMax(boundsMax);\r\n    }\r\n\r\n    /**\r\n     * 设置 自定义 包围盒\r\n     */\r\n    get customBounds(): Bounds {\r\n        return this._customBounds;\r\n    }\r\n\r\n    set customBounds(value: Bounds) {\r\n        if (value) {\r\n            this._useCustomBounds = true;\r\n            if (!this._customBounds) {\r\n                this._customBounds = new Bounds(new Vector3(), new Vector3());\r\n                this._ownerRender.geometryBounds = this._customBounds;\r\n            }\r\n            this._customBounds = value;\r\n\r\n        }\r\n        else {\r\n            this._useCustomBounds = false;\r\n            this._customBounds = null;\r\n            this._ownerRender.geometryBounds = null;\r\n        }\r\n\r\n\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _simulationSupported(): boolean {\r\n\r\n        if (this.simulationSpace == 0 && this.emission.emissionRateOverDistance > 0) {\r\n            return false;\r\n        }\r\n\r\n        // todo other propertys break procedural \r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * 计算粒子更新时间\r\n     */\r\n    protected _updateEmission(): void {\r\n        if (!this.isAlive)\r\n            return;\r\n        if (this._simulateUpdate) {\r\n            this._simulateUpdate = false;\r\n        }\r\n        else {\r\n            var elapsedTime: number = ((this._startUpdateLoopCount !== Stat.loopCount && !this._isPaused) && (<Scene3D>this._owner._scene)) ? ((<Scene3D>this._owner._scene)).timer._delta / 1000.0 : 0;\r\n            elapsedTime = Math.min(ShurikenParticleSystem._maxElapsedTime, elapsedTime * this.simulationSpeed);\r\n            this._updateParticles(elapsedTime);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * 传入粒子间隔时间，更新粒子状态\r\n     */\r\n    protected _updateParticles(elapsedTime: number): void {\r\n        if (this._ownerRender.renderMode === 4 && !this._ownerRender.mesh)//renderMode=4且mesh为空时不更新\r\n            return;\r\n\r\n        this._currentTime += elapsedTime;//计算目前粒子播放时间啊\r\n        this._retireActiveParticles();\r\n        this._freeRetiredParticles();\r\n\r\n        //if (_firstActiveElement === _firstFreeElement){\r\n        //_frameRateTime = 0//TODO:是否一起置零\r\n        //_currentTime = 0;\r\n        //}\r\n        //if (_firstRetiredElement === _firstActiveElement)\r\n        //_drawCounter = 0;\r\n\r\n        this._totalDelayTime += elapsedTime;\r\n        if (this._totalDelayTime < this._playStartDelay) {\r\n            return;\r\n        }\r\n\r\n\r\n        if (this._emission.enable && this._isEmitting && !this._isPaused) {\r\n            this._advanceTime(elapsedTime, this._currentTime);\r\n            if (this.emission.emissionRateOverDistance > 0) {\r\n                this._advanceDistance(this._currentTime);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _updateParticlesSimulationRestart(time: number): void {\r\n        this._firstActiveElement = 0;\r\n        this._firstNewElement = 0;\r\n        this._firstFreeElement = 0;\r\n        this._firstRetiredElement = 0;\r\n\r\n        this._burstsIndex = 0;\r\n        this._frameRateTime = time;//TOD0:零还是time待 验证\r\n        this._emissionTime = 0;\r\n        this._emissionDistance = 0;\r\n        this._totalDelayTime = 0;\r\n        this._currentTime = time;\r\n\r\n\r\n        var delayTime: number = time;\r\n        if (delayTime < this._playStartDelay) {\r\n            this._totalDelayTime = delayTime;\r\n            return;\r\n        }\r\n\r\n        if (this._emission.enable) {\r\n            this._advanceTime(time, time);//TODO:如果time，time均为零brust无效\r\n            if (this.emission.emissionRateOverDistance > 0) {\r\n                this._advanceDistance(this._currentTime);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _retireActiveParticles(): void {\r\n        const epsilon: number = 0.0001;\r\n        while (this._firstActiveElement != this._firstNewElement) {\r\n            var index: number = this._firstActiveElement * this._floatCountPerVertex * this._vertexStride;\r\n            var timeIndex: number = index + this._timeIndex;//11为Time\r\n\r\n            var particleAge: number = this._currentTime - this._vertices[timeIndex];\r\n            if (particleAge + epsilon < this._vertices[index + this._startLifeTimeIndex]/*_maxLifeTime*/)//7为真实lifeTime,particleAge>0为生命周期为负时\r\n                break;\r\n\r\n            this._vertices[timeIndex] = this._drawCounter;\r\n            this._firstActiveElement++;\r\n            if (this._firstActiveElement >= this._bufferMaxParticles)\r\n                this._firstActiveElement = 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _freeRetiredParticles(): void {\r\n        while (this._firstRetiredElement != this._firstActiveElement) {\r\n            var age: number = this._drawCounter - this._vertices[this._firstRetiredElement * this._floatCountPerVertex * this._vertexStride + this._timeIndex];//11为Time\r\n            //TODO这里会有什么bug\r\n            if (false)\r\n                if (age < 3)//GPU从不滞后于CPU两帧，出于显卡驱动BUG等安全因素考虑滞后三帧\r\n                    break;\r\n\r\n            this._firstRetiredElement++;\r\n            if (this._firstRetiredElement >= this._bufferMaxParticles)\r\n                this._firstRetiredElement = 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal5\r\n     * 增加爆炸粒子数量\r\n     */\r\n    protected _burst(fromTime: number, toTime: number): number {\r\n        var totalEmitCount: number = 0;\r\n        var bursts: Burst[] = this._emission._bursts;\r\n        for (var n: number = bursts.length; this._burstsIndex < n; this._burstsIndex++) {//TODO:_burstsIndex问题\r\n            var burst: Burst = bursts[this._burstsIndex];\r\n            var burstTime: number = burst.time;\r\n            if (fromTime <= burstTime && burstTime < toTime) {\r\n                var emitCount: number;\r\n                if (this.autoRandomSeed) {\r\n                    emitCount = MathUtil.lerp(burst.minCount, burst.maxCount, Math.random());\r\n                } else {\r\n                    this._rand.seed = this._randomSeeds[0];\r\n                    emitCount = MathUtil.lerp(burst.minCount, burst.maxCount, this._rand.getFloat());\r\n                    this._randomSeeds[0] = this._rand.seed;\r\n                }\r\n                totalEmitCount += emitCount;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        return totalEmitCount;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _advanceTime(elapsedTime: number, emitTime: number): void {\r\n        var i: number;\r\n        var lastEmissionTime: number = this._emissionTime;\r\n        this._emissionTime += elapsedTime;\r\n        var totalEmitCount: number = 0;\r\n        if (this._emissionTime > this.duration) {\r\n            if (this.looping) {//TODO:有while\r\n                totalEmitCount += this._burst(lastEmissionTime, this._emissionTime);//使用_emissionTime代替duration，否则无法触发time等于duration的burst //爆裂剩余未触发的//TODO:是否可以用_playbackTime代替计算，不必结束再爆裂一次。//TODO:待确认是否累计爆裂\r\n                this._emissionTime -= this.duration;\r\n                this._burstsIndex = 0;\r\n                totalEmitCount += this._burst(0, this._emissionTime);\r\n            } else {\r\n                totalEmitCount = Math.min(this.maxParticles - this.aliveParticleCount, totalEmitCount);\r\n                for (i = 0; i < totalEmitCount; i++)\r\n                    this.emit(emitTime);\r\n\r\n                this._isPlaying = false;\r\n                this.stop();\r\n                return;\r\n            }\r\n        } else {\r\n            totalEmitCount += this._burst(lastEmissionTime, this._emissionTime);\r\n        }\r\n        //粒子的增加数量，不能超过maxParticles\r\n        totalEmitCount = Math.min(this.maxParticles - this.aliveParticleCount, totalEmitCount);\r\n        for (i = 0; i < totalEmitCount; i++)\r\n            this.emit(emitTime);\r\n        //粒子发射速率\r\n        var emissionRate: number = this.emission.emissionRate;\r\n        if (emissionRate > 0) {\r\n            //每多少秒发射一个粒子\r\n            var minEmissionTime: number = 1 / emissionRate;\r\n            this._frameRateTime += minEmissionTime;\r\n            this._frameRateTime = this._currentTime - (this._currentTime - this._frameRateTime) % this._maxStartLifetime;//大于最大声明周期的粒子一定会死亡，所以直接略过,TODO:是否更换机制\r\n            while (this._frameRateTime <= emitTime) {\r\n                if (this.emit(this._frameRateTime))\r\n                    this._frameRateTime += minEmissionTime;\r\n                else\r\n                    break;\r\n            }\r\n            this._frameRateTime = Math.floor(emitTime / minEmissionTime) * minEmissionTime;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _advanceDistance(emitTime: number): void {\r\n        let position = this._owner.transform.position;\r\n        let offsetDistance: number = Vector3.distance(position, this._emissionLastPosition);\r\n\r\n        let rateOverDistance = this.emission.emissionRateOverDistance;\r\n\r\n        let distance = this._emissionDistance + offsetDistance;\r\n\r\n        let ed = 1.0 / rateOverDistance;\r\n        if (distance > ed) {\r\n            let emitCount = distance * rateOverDistance;\r\n            emitCount = Math.floor(emitCount);\r\n            emitCount = Math.min(this.maxParticles - this.aliveParticleCount, emitCount);\r\n            for (let index = 0; index < emitCount; index++) {\r\n                this.emit(emitTime);\r\n            }\r\n            // console.log(\"emission distance: \", distance, \", count: \", emitCount);\r\n\r\n            this._emissionDistance = 0;\r\n        }\r\n        else {\r\n            this._emissionDistance = distance;\r\n        }\r\n\r\n        position.cloneTo(this._emissionLastPosition);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _initBufferDatas(): void {\r\n        if (this._vertexBuffer) {//修改了maxCount以及renderMode以及Mesh等需要清空\r\n            var memorySize: number = this._vertexBuffer._byteLength + this._indexBuffer.indexCount * 2;\r\n            this._vertexBuffer.destroy();\r\n            this._indexBuffer.destroy();\r\n            Resource._addMemory(-memorySize, -memorySize);\r\n            //TODO:some time use clone will cause this call twice(from 'maxParticleCount' and 'renderMode'),this should optimization rewrite with special clone fun.\r\n        }\r\n        var render: ShurikenParticleRenderer = this._ownerRender;\r\n        var renderMode: number = render.renderMode;\r\n\r\n        if (renderMode !== -1 && this.maxParticles > 0) {\r\n            var indices: Uint16Array, i: number, j: number, m: number, indexOffset: number, perPartOffset: number, vertexDeclaration: VertexDeclaration;\r\n            var vbMemorySize: number = 0, memorySize: number = 0;\r\n            var mesh: Mesh = render.mesh;\r\n            if (renderMode === 4) {\r\n                if (mesh) {\r\n                    // var vertexBufferCount: number = mesh._vertexBuffers.length;\r\n                    // if (vertexBufferCount > 1) {\r\n                    // \tthrow new Error(\"ShurikenParticleSystem: submesh Count mesh be One or all subMeshes have the same vertexDeclaration.\");\r\n                    // } else {\r\n                    vertexDeclaration = VertexShurikenParticleMesh.vertexDeclaration;\r\n                    this._floatCountPerVertex = vertexDeclaration.vertexStride / 4;\r\n                    this._simulationUV_Index = vertexDeclaration.getVertexElementByUsage(VertexShuriKenParticle.PARTICLE_SIMULATIONUV).offset / 4;\r\n                    this._startLifeTimeIndex = 12;\r\n                    this._timeIndex = 16;\r\n                    this._vertexStride = mesh._vertexCount;\r\n                    var totalVertexCount: number = this._bufferMaxParticles * this._vertexStride;\r\n                    var vbCount: number = Math.floor(totalVertexCount / 65535) + 1;\r\n                    var lastVBVertexCount: number = totalVertexCount % 65535;\r\n                    if (vbCount > 1) {//TODO:随后支持\r\n                        throw new Error(\"ShurikenParticleSystem:the maxParticleCount multiply mesh vertexCount is large than 65535.\");\r\n                    }\r\n\r\n                    vbMemorySize = vertexDeclaration.vertexStride * lastVBVertexCount;\r\n                    this._vertexBuffer = LayaGL.renderOBJCreate.createVertexBuffer3D(vbMemorySize, BufferUsage.Dynamic, false);\r\n                    this._vertexBuffer.vertexDeclaration = vertexDeclaration;\r\n                    this._vertices = new Float32Array(this._floatCountPerVertex * lastVBVertexCount);\r\n\r\n                    // if (render.renderMode == 4) {\r\n                    // \tthis.initVertexWithMesh(this._vertices, mesh);\r\n                    // }\r\n\r\n                    this._indexStride = mesh._indexBuffer.indexCount;\r\n                    var indexDatas: Uint16Array = mesh._indexBuffer.getData();\r\n                    var indexCount: number = this._bufferMaxParticles * this._indexStride;\r\n                    this._indexBuffer = LayaGL.renderOBJCreate.createIndexBuffer3D(IndexFormat.UInt16, indexCount, BufferUsage.Static, false);\r\n                    indices = new Uint16Array(indexCount);\r\n\r\n                    memorySize = vbMemorySize + indexCount * 2;\r\n\r\n                    indexOffset = 0;\r\n                    for (i = 0; i < this._bufferMaxParticles; i++) {\r\n                        var indexValueOffset: number = i * this._vertexStride;\r\n                        for (j = 0, m = indexDatas.length; j < m; j++)\r\n                            indices[indexOffset++] = indexValueOffset + indexDatas[j];\r\n                    }\r\n                    this._indexBuffer.setData(indices);\r\n                    this._bufferState.applyState([this._vertexBuffer], this._indexBuffer);\r\n                    this.bufferState = this._bufferState;\r\n                }\r\n            } else {\r\n                vertexDeclaration = VertexShurikenParticleBillboard.vertexDeclaration;\r\n                this._floatCountPerVertex = vertexDeclaration.vertexStride / 4;\r\n                this._startLifeTimeIndex = 7;\r\n                this._simulationUV_Index = vertexDeclaration.getVertexElementByUsage(VertexShuriKenParticle.PARTICLE_SIMULATIONUV).offset / 4;\r\n                this._timeIndex = 11;\r\n                this._vertexStride = 4;\r\n                vbMemorySize = vertexDeclaration.vertexStride * this._bufferMaxParticles * this._vertexStride;\r\n                this._vertexBuffer = LayaGL.renderOBJCreate.createVertexBuffer3D(vbMemorySize, BufferUsage.Dynamic, false);\r\n                this._vertexBuffer.vertexDeclaration = vertexDeclaration;\r\n                this._vertices = new Float32Array(this._floatCountPerVertex * this._bufferMaxParticles * this._vertexStride);\r\n\r\n\r\n                for (i = 0; i < this._bufferMaxParticles; i++) {\r\n                    perPartOffset = i * this._floatCountPerVertex * this._vertexStride;\r\n                    this._vertices[perPartOffset] = -0.5;\r\n                    this._vertices[perPartOffset + 1] = -0.5;\r\n                    this._vertices[perPartOffset + 2] = 0;\r\n                    this._vertices[perPartOffset + 3] = 1;\r\n\r\n                    perPartOffset += this._floatCountPerVertex;\r\n                    this._vertices[perPartOffset] = 0.5;\r\n                    this._vertices[perPartOffset + 1] = -0.5;\r\n                    this._vertices[perPartOffset + 2] = 1;\r\n                    this._vertices[perPartOffset + 3] = 1;\r\n\r\n                    perPartOffset += this._floatCountPerVertex\r\n                    this._vertices[perPartOffset] = 0.5;\r\n                    this._vertices[perPartOffset + 1] = 0.5;\r\n                    this._vertices[perPartOffset + 2] = 1;\r\n                    this._vertices[perPartOffset + 3] = 0;\r\n\r\n                    perPartOffset += this._floatCountPerVertex\r\n                    this._vertices[perPartOffset] = -0.5;\r\n                    this._vertices[perPartOffset + 1] = 0.5;\r\n                    this._vertices[perPartOffset + 2] = 0;\r\n                    this._vertices[perPartOffset + 3] = 0;\r\n                }\r\n\r\n                this._indexStride = 6;\r\n                this._indexBuffer = LayaGL.renderOBJCreate.createIndexBuffer3D(IndexFormat.UInt16, this._bufferMaxParticles * 6, BufferUsage.Static, false);\r\n                indices = new Uint16Array(this._bufferMaxParticles * 6);\r\n                for (i = 0; i < this._bufferMaxParticles; i++) {\r\n                    indexOffset = i * 6;\r\n                    var firstVertex: number = i * this._vertexStride, secondVertex: number = firstVertex + 2;\r\n                    indices[indexOffset++] = firstVertex;\r\n                    indices[indexOffset++] = secondVertex;\r\n                    indices[indexOffset++] = firstVertex + 1;\r\n                    indices[indexOffset++] = firstVertex;\r\n                    indices[indexOffset++] = firstVertex + 3;\r\n                    indices[indexOffset++] = secondVertex;\r\n                }\r\n                this._indexBuffer.setData(indices);\r\n\r\n                memorySize = vbMemorySize + this._bufferMaxParticles * 6 * 2;\r\n                this._bufferState.applyState([this._vertexBuffer], this._indexBuffer);\r\n                this.bufferState = this._bufferState;\r\n            }\r\n\r\n            Resource._addMemory(memorySize, memorySize);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @override\r\n     */\r\n    destroy(): void {\r\n        super.destroy();\r\n        if (this._vertexBuffer) {\r\n            var memorySize: number = this._vertexBuffer._byteLength;\r\n            Resource._addMemory(-memorySize, -memorySize);\r\n            this._vertexBuffer.destroy();\r\n            this._vertexBuffer = null;\r\n        }\r\n        if (this._indexBuffer) {\r\n            var memorySize: number = this._indexBuffer._byteLength;\r\n            Resource._addMemory(-memorySize, -memorySize);\r\n            this._indexBuffer.destroy();\r\n            this._indexBuffer = null;\r\n        }\r\n        this._emission.destroy();\r\n        this._bounds = null;\r\n        this._customBounds = null;\r\n        this._bufferState = null;\r\n        this._owner = null;\r\n        this._vertices = null;\r\n        this._indexBuffer = null;\r\n        this._emission = null;\r\n        this._shape = null;\r\n        this.startLifeTimeGradient = null;\r\n        this.startLifeTimeGradientMin = null;\r\n        this.startLifeTimeGradientMax = null;\r\n        this.startSizeConstantSeparate = null;\r\n        this.startSizeConstantMinSeparate = null;\r\n        this.startSizeConstantMaxSeparate = null;\r\n        this.startRotationConstantSeparate = null;\r\n        this.startRotationConstantMinSeparate = null;\r\n        this.startRotationConstantMaxSeparate = null;\r\n        this.startColorConstant = null;\r\n        this.startColorConstantMin = null;\r\n        this.startColorConstantMax = null;\r\n        this._velocityOverLifetime = null;\r\n        this._colorOverLifetime = null;\r\n        this._sizeOverLifetime = null;\r\n        this._rotationOverLifetime = null;\r\n        this._textureSheetAnimation = null;\r\n    }\r\n\r\n    /**\r\n     * 发射一个粒子。\r\n     */\r\n    emit(time: number): boolean {\r\n        var position: Vector3 = ShurikenParticleSystem._tempPosition;\r\n        var direction: Vector3 = ShurikenParticleSystem._tempDirection;\r\n        if (this._shape && this._shape.enable) {\r\n            if (this.autoRandomSeed)\r\n                this._shape.generatePositionAndDirection(position, direction);\r\n            else\r\n                this._shape.generatePositionAndDirection(position, direction, this._rand, this._randomSeeds);\r\n        } else {\r\n            position.x = position.y = position.z = 0;\r\n            direction.x = direction.y = 0;\r\n            direction.z = 1;\r\n        }\r\n\r\n        return this.addParticle(position, direction, time);//TODO:提前判断优化\r\n    }\r\n\r\n    //增加一个粒子\r\n    addParticle(position: Vector3, direction: Vector3, time: number): boolean {//TODO:还需优化\r\n        Vector3.normalize(direction, direction);\r\n        //下一个粒子\r\n        var nextFreeParticle: number = this._firstFreeElement + 1;\r\n        if (nextFreeParticle >= this._bufferMaxParticles)\r\n            nextFreeParticle = 0;\r\n\r\n        if (nextFreeParticle === this._firstRetiredElement)\r\n            return false;\r\n\r\n        var transform: Transform3D = this._owner.transform;\r\n        ShurikenParticleData.create(this, this._ownerRender);\r\n\r\n        var particleAge: number = this._currentTime - time;\r\n        if (particleAge >= ShurikenParticleData.startLifeTime)//如果时间已大于声明周期，则直接跳过,TODO:提前优化\r\n            return true;\r\n\r\n        var pos: Vector3, rot: Quaternion;\r\n        if (this.simulationSpace == 0) {\r\n            pos = transform.position;\r\n            rot = transform.rotation;\r\n        }\r\n\r\n        //StartSpeed\r\n        var startSpeed: number;\r\n        switch (this.startSpeedType) {\r\n            case 0:\r\n                startSpeed = this.startSpeedConstant;\r\n                break;\r\n            case 2:\r\n                if (this.autoRandomSeed) {\r\n                    startSpeed = MathUtil.lerp(this.startSpeedConstantMin, this.startSpeedConstantMax, Math.random());\r\n                } else {\r\n                    this._rand.seed = this._randomSeeds[8];\r\n                    startSpeed = MathUtil.lerp(this.startSpeedConstantMin, this.startSpeedConstantMax, this._rand.getFloat());\r\n                    this._randomSeeds[8] = this._rand.seed;\r\n                }\r\n                break;\r\n        }\r\n\r\n\r\n        var randomVelocityX: number, randomVelocityY: number, randomVelocityZ: number, randomColor: number, randomSize: number, randomRotation: number, randomTextureAnimation: number;\r\n        var needRandomVelocity: boolean = this._velocityOverLifetime && this._velocityOverLifetime.enable;\r\n        if (needRandomVelocity) {\r\n            var velocityType: number = this._velocityOverLifetime.velocity.type;\r\n            if (velocityType === 2 || velocityType === 3) {\r\n                if (this.autoRandomSeed) {\r\n                    randomVelocityX = Math.random();\r\n                    randomVelocityY = Math.random();\r\n                    randomVelocityZ = Math.random();\r\n                } else {\r\n                    this._rand.seed = this._randomSeeds[9];\r\n                    randomVelocityX = this._rand.getFloat();\r\n                    randomVelocityY = this._rand.getFloat();\r\n                    randomVelocityZ = this._rand.getFloat();\r\n                    this._randomSeeds[9] = this._rand.seed;\r\n                }\r\n            } else {\r\n                needRandomVelocity = false;\r\n            }\r\n        } else {\r\n            needRandomVelocity = false;\r\n        }\r\n        var needRandomColor: boolean = this._colorOverLifetime && this._colorOverLifetime.enable;\r\n        if (needRandomColor) {\r\n            var colorType: number = this._colorOverLifetime.color.type;\r\n            if (colorType === 3) {\r\n                if (this.autoRandomSeed) {\r\n                    randomColor = Math.random();\r\n                } else {\r\n                    this._rand.seed = this._randomSeeds[10];\r\n                    randomColor = this._rand.getFloat();\r\n                    this._randomSeeds[10] = this._rand.seed;\r\n                }\r\n            } else {\r\n                needRandomColor = false;\r\n            }\r\n        } else {\r\n            needRandomColor = false;\r\n        }\r\n        var needRandomSize: boolean = this._sizeOverLifetime && this._sizeOverLifetime.enable;\r\n        if (needRandomSize) {\r\n            var sizeType: number = this._sizeOverLifetime.size.type;\r\n            if (sizeType === 3) {\r\n                if (this.autoRandomSeed) {\r\n                    randomSize = Math.random();\r\n                } else {\r\n                    this._rand.seed = this._randomSeeds[11];\r\n                    randomSize = this._rand.getFloat();\r\n                    this._randomSeeds[11] = this._rand.seed;\r\n                }\r\n            } else {\r\n                needRandomSize = false;\r\n            }\r\n        } else {\r\n            needRandomSize = false;\r\n        }\r\n        var needRandomRotation: boolean = this._rotationOverLifetime && this._rotationOverLifetime.enable;\r\n        if (needRandomRotation) {\r\n            var rotationType: number = this._rotationOverLifetime.angularVelocity.type;\r\n            if (rotationType === 2 || rotationType === 3) {\r\n                if (this.autoRandomSeed) {\r\n                    randomRotation = Math.random();\r\n                } else {\r\n                    this._rand.seed = this._randomSeeds[12];\r\n                    randomRotation = this._rand.getFloat();\r\n                    this._randomSeeds[12] = this._rand.seed;\r\n                }\r\n            } else {\r\n                needRandomRotation = false;\r\n            }\r\n        } else {\r\n            needRandomRotation = false;\r\n        }\r\n        var needRandomTextureAnimation: boolean = this._textureSheetAnimation && this._textureSheetAnimation.enable;\r\n        if (needRandomTextureAnimation) {\r\n            var textureAnimationType: number = this._textureSheetAnimation.frame.type;\r\n            if (textureAnimationType === 3) {\r\n                if (this.autoRandomSeed) {\r\n                    randomTextureAnimation = Math.random();\r\n                } else {\r\n                    this._rand.seed = this._randomSeeds[15];\r\n                    randomTextureAnimation = this._rand.getFloat();\r\n                    this._randomSeeds[15] = this._rand.seed;\r\n                }\r\n            } else {\r\n                needRandomTextureAnimation = false;\r\n            }\r\n        } else {\r\n            needRandomTextureAnimation = false;\r\n        }\r\n\r\n        var startIndex: number = this._firstFreeElement * this._floatCountPerVertex * this._vertexStride;\r\n        var subU: number = ShurikenParticleData.startUVInfo[0];\r\n        var subV: number = ShurikenParticleData.startUVInfo[1];\r\n        var startU: number = ShurikenParticleData.startUVInfo[2];\r\n        var startV: number = ShurikenParticleData.startUVInfo[3];\r\n\r\n        var meshVertices: Float32Array, meshVertexStride: number, meshPosOffset: number, meshCorOffset: number, meshUVOffset: number, meshVertexIndex: number;\r\n        var render: ShurikenParticleRenderer = this._ownerRender;\r\n        if (render.renderMode === 4) {\r\n            var meshVB: VertexBuffer3D = render.mesh._vertexBuffer;\r\n            meshVertices = meshVB.getFloat32Data();\r\n            var meshVertexDeclaration: VertexDeclaration = meshVB.vertexDeclaration;\r\n            meshPosOffset = meshVertexDeclaration.getVertexElementByUsage(VertexMesh.MESH_POSITION0)._offset / 4;\r\n            var colorElement: VertexElement = meshVertexDeclaration.getVertexElementByUsage(VertexMesh.MESH_COLOR0);\r\n            meshCorOffset = colorElement ? colorElement._offset / 4 : -1;\r\n            var uvElement: VertexElement = meshVertexDeclaration.getVertexElementByUsage(VertexMesh.MESH_TEXTURECOORDINATE0);\r\n            meshUVOffset = uvElement ? uvElement._offset / 4 : -1;\r\n            meshVertexStride = meshVertexDeclaration.vertexStride / 4;\r\n            meshVertexIndex = 0;\r\n        }\r\n\r\n        for (var i: number = startIndex, n: number = startIndex + this._floatCountPerVertex * this._vertexStride; i < n; i += this._floatCountPerVertex) {\r\n            var offset: number;\r\n            if (render.renderMode === 4) {\r\n                offset = i;\r\n                var vertexOffset: number = meshVertexStride * (meshVertexIndex++);\r\n                var meshOffset: number = vertexOffset + meshPosOffset;\r\n                this._vertices[offset++] = meshVertices[meshOffset++];\r\n                this._vertices[offset++] = meshVertices[meshOffset++];\r\n                this._vertices[offset++] = meshVertices[meshOffset];\r\n                if (meshCorOffset === -1) {\r\n                    this._vertices[offset++] = 1.0;\r\n                    this._vertices[offset++] = 1.0;\r\n                    this._vertices[offset++] = 1.0;\r\n                    this._vertices[offset++] = 1.0;\r\n                }\r\n                else {\r\n                    meshOffset = vertexOffset + meshCorOffset;\r\n                    this._vertices[offset++] = meshVertices[meshOffset++];\r\n                    this._vertices[offset++] = meshVertices[meshOffset++];\r\n                    this._vertices[offset++] = meshVertices[meshOffset++];\r\n                    this._vertices[offset++] = meshVertices[meshOffset];\r\n                }\r\n                if (meshUVOffset === -1) {\r\n                    this._vertices[offset++] = 0.0;\r\n                    this._vertices[offset++] = 0.0;\r\n                }\r\n                else {\r\n                    meshOffset = vertexOffset + meshUVOffset;\r\n                    this._vertices[offset++] = meshVertices[meshOffset++];\r\n                    this._vertices[offset++] = meshVertices[meshOffset];\r\n                }\r\n            } else {\r\n                offset = i + 4;\r\n            }\r\n\r\n            this._vertices[offset++] = position.x;\r\n            this._vertices[offset++] = position.y;\r\n            this._vertices[offset++] = position.z;\r\n\r\n            this._vertices[offset++] = ShurikenParticleData.startLifeTime;\r\n\r\n            this._vertices[offset++] = direction.x;\r\n            this._vertices[offset++] = direction.y;\r\n            this._vertices[offset++] = direction.z;\r\n            this._vertices[offset++] = time;\r\n\r\n            this._vertices[offset++] = ShurikenParticleData.startColor.x;\r\n            this._vertices[offset++] = ShurikenParticleData.startColor.y;\r\n            this._vertices[offset++] = ShurikenParticleData.startColor.z;\r\n            this._vertices[offset++] = ShurikenParticleData.startColor.w;\r\n\r\n            this._vertices[offset++] = ShurikenParticleData.startSize[0];\r\n            this._vertices[offset++] = ShurikenParticleData.startSize[1];\r\n            this._vertices[offset++] = ShurikenParticleData.startSize[2];\r\n\r\n            this._vertices[offset++] = ShurikenParticleData.startRotation[0];\r\n            this._vertices[offset++] = ShurikenParticleData.startRotation[1];\r\n            this._vertices[offset++] = ShurikenParticleData.startRotation[2];\r\n\r\n            //StartSpeed\r\n            this._vertices[offset++] = startSpeed;\r\n\r\n            //this._vertices[offset] = Math.random();\r\n\r\n\r\n            needRandomColor && (this._vertices[offset + 1] = randomColor);\r\n            needRandomSize && (this._vertices[offset + 2] = randomSize);\r\n            needRandomRotation && (this._vertices[offset + 3] = randomRotation);\r\n            needRandomTextureAnimation && (this._vertices[offset + 4] = randomTextureAnimation);\r\n            if (needRandomVelocity) {\r\n                this._vertices[offset + 5] = randomVelocityX;\r\n                this._vertices[offset + 6] = randomVelocityY;\r\n                this._vertices[offset + 7] = randomVelocityZ;\r\n            }\r\n\r\n            switch (this.simulationSpace) {\r\n                case 0:\r\n                    offset += 8;\r\n                    this._vertices[offset++] = pos.x;\r\n                    this._vertices[offset++] = pos.y;\r\n                    this._vertices[offset++] = pos.z;\r\n                    this._vertices[offset++] = rot.x;\r\n                    this._vertices[offset++] = rot.y;\r\n                    this._vertices[offset++] = rot.z;\r\n                    this._vertices[offset++] = rot.w;\r\n                    break;\r\n                case 1:\r\n                    break;\r\n                default:\r\n                    throw new Error(\"ShurikenParticleMaterial: SimulationSpace value is invalid.\");\r\n            }\r\n            offset = i + this._simulationUV_Index;\r\n            this._vertices[offset++] = startU;\r\n            this._vertices[offset++] = startV;\r\n            this._vertices[offset++] = subU;\r\n            this._vertices[offset] = subV;\r\n        }\r\n\r\n        this._firstFreeElement = nextFreeParticle;\r\n        return true;\r\n    }\r\n\r\n    addNewParticlesToVertexBuffer(): void {\r\n        var start: number;\r\n        var byteStride: number = this._vertexStride * this._floatCountPerVertex * 4;\r\n        if (this._firstNewElement < this._firstFreeElement) {\r\n            start = this._firstNewElement * byteStride;\r\n            this._vertexBuffer.setData(this._vertices.buffer, start, start, (this._firstFreeElement - this._firstNewElement) * byteStride);\r\n\r\n        } else {\r\n            start = this._firstNewElement * byteStride;\r\n            this._vertexBuffer.setData(this._vertices.buffer, start, start, (this._bufferMaxParticles - this._firstNewElement) * byteStride);\r\n\r\n            if (this._firstFreeElement > 0) {\r\n                this._vertexBuffer.setData(this._vertices.buffer, 0, 0, this._firstFreeElement * byteStride);\r\n\r\n            }\r\n        }\r\n        this._firstNewElement = this._firstFreeElement;\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     */\r\n    _getType(): number {\r\n        return ShurikenParticleSystem._type;\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     * @internal\r\n     */\r\n    _prepareRender(state: RenderContext3D): boolean {\r\n        if (this._updateMask != Stat.loopCount) {\r\n            this._updateMask = Stat.loopCount;\r\n            this._updateEmission();\r\n            //设备丢失时, setData  here\r\n            if (this._firstNewElement != this._firstFreeElement)\r\n                this.addNewParticlesToVertexBuffer();\r\n            this._drawCounter++;\r\n        }\r\n\r\n\r\n        if (this._firstActiveElement != this._firstFreeElement)\r\n            return true;\r\n        else\r\n            return false;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @override\r\n     */\r\n    _updateRenderParams(state: RenderContext3D): void {\r\n        //this._bufferState.bind();\r\n        var indexCount: number;\r\n        this.clearRenderParams();\r\n        if (this._firstActiveElement < this._firstFreeElement) {\r\n            indexCount = (this._firstFreeElement - this._firstActiveElement) * this._indexStride;\r\n            this.setDrawElemenParams(indexCount, 2 * this._firstActiveElement * this._indexStride);\r\n            // LayaGL.renderDrawConatext.drawElements(MeshTopology.Triangles, indexCount, IndexFormat.UInt16, 2 * this._firstActiveElement * this._indexStride);\r\n            // Stat.trianglesFaces += indexCount / 3;\r\n            // Stat.renderBatches++;\r\n        } else {\r\n            indexCount = (this._bufferMaxParticles - this._firstActiveElement) * this._indexStride;\r\n            this.setDrawElemenParams(indexCount, 2 * this._firstActiveElement * this._indexStride);\r\n            // LayaGL.renderDrawConatext.drawElements(MeshTopology.Triangles, indexCount, IndexFormat.UInt16, 2 * this._firstActiveElement * this._indexStride);\r\n            // Stat.trianglesFaces += indexCount / 3;\r\n            // Stat.renderBatches++;\r\n            if (this._firstFreeElement > 0) {\r\n                indexCount = this._firstFreeElement * this._indexStride;\r\n                this.setDrawElemenParams(indexCount, 0);\r\n                // LayaGL.renderDrawConatext.drawElements(MeshTopology.Triangles, indexCount, IndexFormat.UInt16, 0);\r\n                // Stat.trianglesFaces += indexCount / 3;\r\n                // Stat.renderBatches++;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 开始发射粒子。\r\n     */\r\n    play(): void {\r\n        this._burstsIndex = 0;\r\n        this._isEmitting = true;\r\n        this._isPlaying = true;\r\n        this._isPaused = false;\r\n        this._emissionTime = 0;\r\n        this._emissionDistance = 0;\r\n        this._owner.transform.position.cloneTo(this._emissionLastPosition);\r\n        this._totalDelayTime = 0;\r\n\r\n        if (!this.autoRandomSeed) {\r\n            for (var i: number = 0, n: number = this._randomSeeds.length; i < n; i++)\r\n                this._randomSeeds[i] = this.randomSeed[0] + ShurikenParticleSystem._RANDOMOFFSET[i];\r\n        }\r\n\r\n        switch (this.startDelayType) {\r\n            case 0:\r\n                this._playStartDelay = this.startDelay;\r\n                break;\r\n            case 1:\r\n                if (this.autoRandomSeed) {\r\n                    this._playStartDelay = MathUtil.lerp(this.startDelayMin, this.startDelayMax, Math.random());\r\n                } else {\r\n                    this._rand.seed = this._randomSeeds[2];\r\n                    this._playStartDelay = MathUtil.lerp(this.startDelayMin, this.startDelayMax, this._rand.getFloat());\r\n                    this._randomSeeds[2] = this._rand.seed;\r\n                }\r\n                break;\r\n            default:\r\n                throw new Error(\"Utils3D: startDelayType is invalid.\");\r\n        }\r\n        this._frameRateTime = this._currentTime + this._playStartDelay;//同步频率模式发射时间,更新函数中小于延迟时间不会更新此时间。\r\n\r\n        this._startUpdateLoopCount = Stat.loopCount;\r\n    }\r\n\r\n    /**\r\n     * 暂停发射粒子。\r\n     */\r\n    pause(): void {\r\n        this._isPaused = true;\r\n    }\r\n\r\n    /**\r\n     * 通过指定时间增加粒子播放进度，并暂停播放。\r\n     * @param time 进度时间.如果restart为true,粒子播放时间会归零后再更新进度。\r\n     * @param restart 是否重置播放状态。\r\n     */\r\n    simulate(time: number, restart: boolean = true): void {\r\n        this._simulateUpdate = true;\r\n\r\n        if (restart) {\r\n            this._updateParticlesSimulationRestart(time);\r\n        }\r\n        else {\r\n            this._isPaused = false;//如果当前状态为暂停则无法发射粒子\r\n            this._updateParticles(time);\r\n        }\r\n\r\n        this.pause();\r\n    }\r\n\r\n    /**\r\n     * 停止发射粒子。\r\n     */\r\n    stop(): void {\r\n        this._burstsIndex = 0;\r\n        this._isEmitting = false;\r\n        this._emissionTime = 0;\r\n    }\r\n\r\n    /**\r\n     * 克隆。\r\n     * @param\tdestObject 克隆源。\r\n     */\r\n    cloneTo(destObject: any): void {\r\n        var dest: ShurikenParticleSystem = (<ShurikenParticleSystem>destObject);\r\n\r\n        dest._useCustomBounds = this._useCustomBounds;\r\n        (this._customBounds) && (this._customBounds.cloneTo(dest._customBounds));\r\n\r\n        dest.duration = this.duration;\r\n        dest.looping = this.looping;\r\n        dest.prewarm = this.prewarm;\r\n        dest.startDelayType = this.startDelayType;\r\n        dest.startDelay = this.startDelay;\r\n        dest.startDelayMin = this.startDelayMin;\r\n        dest.startDelayMax = this.startDelayMax;\r\n\r\n        dest._maxStartLifetime = this._maxStartLifetime;\r\n        dest.startLifetimeType = this.startLifetimeType;\r\n        dest.startLifetimeConstant = this.startLifetimeConstant;\r\n        this.startLifeTimeGradient.cloneTo(dest.startLifeTimeGradient);\r\n        dest.startLifetimeConstantMin = this.startLifetimeConstantMin;\r\n        dest.startLifetimeConstantMax = this.startLifetimeConstantMax;\r\n        this.startLifeTimeGradientMin.cloneTo(dest.startLifeTimeGradientMin);\r\n        this.startLifeTimeGradientMax.cloneTo(dest.startLifeTimeGradientMax);\r\n\r\n        dest.startSpeedType = this.startSpeedType;\r\n        dest.startSpeedConstant = this.startSpeedConstant;\r\n        dest.startSpeedConstantMin = this.startSpeedConstantMin;\r\n        dest.startSpeedConstantMax = this.startSpeedConstantMax;\r\n\r\n        dest.dragType = this.dragType;\r\n        dest.dragConstant = this.dragConstant;\r\n        dest.dragSpeedConstantMax = this.dragSpeedConstantMax;\r\n        dest.dragSpeedConstantMin = this.dragSpeedConstantMin;\r\n\r\n        dest.threeDStartSize = this.threeDStartSize;\r\n        dest.startSizeType = this.startSizeType;\r\n        dest.startSizeConstant = this.startSizeConstant;\r\n        this.startSizeConstantSeparate.cloneTo(dest.startSizeConstantSeparate);\r\n        dest.startSizeConstantMin = this.startSizeConstantMin;\r\n        dest.startSizeConstantMax = this.startSizeConstantMax;\r\n        this.startSizeConstantMinSeparate.cloneTo(dest.startSizeConstantMinSeparate);\r\n        this.startSizeConstantMaxSeparate.cloneTo(dest.startSizeConstantMaxSeparate);\r\n\r\n        dest.threeDStartRotation = this.threeDStartRotation;\r\n        dest.startRotationType = this.startRotationType;\r\n        dest.startRotationConstant = this.startRotationConstant;\r\n        this.startRotationConstantSeparate.cloneTo(dest.startRotationConstantSeparate);\r\n        dest.startRotationConstantMin = this.startRotationConstantMin;\r\n        dest.startRotationConstantMax = this.startRotationConstantMax;\r\n        this.startRotationConstantMinSeparate.cloneTo(dest.startRotationConstantMinSeparate);\r\n        this.startRotationConstantMaxSeparate.cloneTo(dest.startRotationConstantMaxSeparate);\r\n\r\n        dest.randomizeRotationDirection = this.randomizeRotationDirection;\r\n\r\n        dest.startColorType = this.startColorType;\r\n        this.startColorConstant.cloneTo(dest.startColorConstant);\r\n        this.startColorConstantMin.cloneTo(dest.startColorConstantMin);\r\n        this.startColorConstantMax.cloneTo(dest.startColorConstantMax);\r\n\r\n        dest.gravityModifier = this.gravityModifier;\r\n        dest.simulationSpace = this.simulationSpace;\r\n        dest.simulationSpeed = this.simulationSpeed;\r\n        dest.scaleMode = this.scaleMode;\r\n        dest.playOnAwake = this.playOnAwake;\r\n        dest.autoRandomSeed = this.autoRandomSeed;\r\n        dest.randomSeed[0] = this.randomSeed[0];\r\n\r\n        dest.maxParticles = this.maxParticles;\r\n\r\n        //TODO:可做更优判断\r\n        (this._emission) && (dest._emission = this._emission.clone());\r\n        (this.shape) && (dest.shape = this.shape.clone());\r\n        (this.velocityOverLifetime) && (dest.velocityOverLifetime = this.velocityOverLifetime.clone());\r\n        (this.colorOverLifetime) && (dest.colorOverLifetime = this.colorOverLifetime.clone());\r\n        (this.sizeOverLifetime) && (dest.sizeOverLifetime = this.sizeOverLifetime.clone());\r\n        (this.rotationOverLifetime) && (dest.rotationOverLifetime = this.rotationOverLifetime.clone());\r\n        (this.textureSheetAnimation) && (dest.textureSheetAnimation = this.textureSheetAnimation.clone());\r\n        //\r\n\r\n        dest.isPerformanceMode = this.isPerformanceMode;\r\n\r\n        dest._isEmitting = this._isEmitting;\r\n        dest._isPlaying = this._isPlaying;\r\n        dest._isPaused = this._isPaused;\r\n        dest._playStartDelay = this._playStartDelay;\r\n        dest._frameRateTime = this._frameRateTime;\r\n        dest._emissionTime = this._emissionTime;\r\n        dest._totalDelayTime = this._totalDelayTime;\r\n        dest._burstsIndex = this._burstsIndex;\r\n    }\r\n\r\n    /**\r\n     * 克隆。\r\n     * @return\t 克隆副本。\r\n     */\r\n    clone(): any {\r\n        var dest: ShurikenParticleSystem = new ShurikenParticleSystem(null);\r\n        this.cloneTo(dest);\r\n        return dest;\r\n    }\r\n}\r\n\r\n\r\n","import { LayaGL } from \"../../../layagl/LayaGL\";\r\nimport { MathUtil } from \"../../../maths/MathUtil\";\r\nimport { Quaternion } from \"../../../maths/Quaternion\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\nimport { BufferUsage } from \"../../../RenderEngine/RenderEnum/BufferTargetType\";\r\nimport { DrawType } from \"../../../RenderEngine/RenderEnum/DrawType\";\r\nimport { IndexFormat } from \"../../../RenderEngine/RenderEnum/IndexFormat\";\r\nimport { MeshTopology } from \"../../../RenderEngine/RenderEnum/RenderPologyMode\";\r\nimport { VertexMesh } from \"../../../RenderEngine/RenderShader/VertexMesh\";\r\nimport { VertexElement } from \"../../../renders/VertexElement\";\r\nimport { VertexShuriKenParticle } from \"../../graphics/Vertex/VertexShuriKenParticle\";\r\nimport { VertexShurikenParticleBillboard } from \"../../graphics/Vertex/VertexShurikenParticleBillboard\";\r\nimport { VertexShurikenParticleMesh } from \"../../graphics/Vertex/VertexShurikenParticleMesh\";\r\nimport { VertexBuffer3D } from \"../../graphics/VertexBuffer3D\";\r\nimport { Mesh } from \"../../resource/models/Mesh\";\r\nimport { RenderContext3D } from \"../render/RenderContext3D\";\r\nimport { ShurikenParticleData } from \"./ShurikenParticleData\";\r\nimport { ShurikenParticleRenderer } from \"./ShurikenParticleRenderer\";\r\nimport { ShurikenParticleSystem } from \"./ShurikenParticleSystem\";\r\n\r\nexport class ShurikenParticleInstanceSystem extends ShurikenParticleSystem {\r\n\r\n    private _instanceParticleVertexBuffer: VertexBuffer3D = null;\r\n    private _instanceVertex: Float32Array = null;\r\n\r\n\r\n    private _meshIndexCount: number;\r\n    private _meshFloatCountPreVertex: number;\r\n\r\n    /**\r\n     * 每个粒子数据 float 个数\r\n     */\r\n    private _floatCountPerParticleData: number;\r\n\r\n    constructor(render: ShurikenParticleRenderer) {\r\n        super(render,MeshTopology.Triangles,DrawType.DrawElementInstance);\r\n    }\r\n\r\n    /***\r\n     * 重排 mesh vb\r\n     */\r\n    private _initMeshVertex(vertex: Float32Array, mesh: Mesh) {\r\n        let meshVertexBuffer = mesh._vertexBuffer;\r\n        let meshVertices = meshVertexBuffer.getFloat32Data();\r\n        let meshVertexDeclaration = meshVertexBuffer.vertexDeclaration;\r\n\r\n        let meshPosOffset = meshVertexDeclaration.getVertexElementByUsage(VertexMesh.MESH_POSITION0)._offset / 4;\r\n\r\n        let colorElement: VertexElement = meshVertexDeclaration.getVertexElementByUsage(VertexMesh.MESH_COLOR0);\r\n        let meshColorOffset = colorElement ? colorElement._offset / 4 : -1;\r\n\r\n        let uvElement: VertexElement = meshVertexDeclaration.getVertexElementByUsage(VertexMesh.MESH_TEXTURECOORDINATE0);\r\n        let meshUVOffset = uvElement ? uvElement._offset / 4 : -1;\r\n\r\n        let meshVertexStride = meshVertexDeclaration.vertexStride / 4;\r\n        let meshVertexIndex = 0;\r\n\r\n        let vertexCount = mesh.vertexCount;\r\n\r\n        let perParticleDataCount = this._vertexBuffer.vertexDeclaration.vertexStride / 4;\r\n        for (let index = 0; index < vertexCount; index++) {\r\n            let startIndex = index * perParticleDataCount;\r\n            let indexOffset = startIndex;\r\n            let vertexOffset = meshVertexStride * meshVertexIndex++;\r\n\r\n            // position\r\n            let positionOffset = vertexOffset + meshPosOffset;\r\n            vertex[indexOffset++] = meshVertices[positionOffset++];\r\n            vertex[indexOffset++] = meshVertices[positionOffset++];\r\n            vertex[indexOffset++] = meshVertices[positionOffset++];\r\n\r\n            // color\r\n            if (meshColorOffset == -1) {\r\n                vertex[indexOffset++] = 1;\r\n                vertex[indexOffset++] = 1;\r\n                vertex[indexOffset++] = 1;\r\n                vertex[indexOffset++] = 1;\r\n            }\r\n            else {\r\n                let colorOffset = vertexOffset + meshColorOffset;\r\n                vertex[indexOffset++] = meshVertices[colorOffset++];\r\n                vertex[indexOffset++] = meshVertices[colorOffset++];\r\n                vertex[indexOffset++] = meshVertices[colorOffset++];\r\n                vertex[indexOffset++] = meshVertices[colorOffset++];\r\n            }\r\n\r\n            // uv\r\n            if (meshUVOffset == -1) {\r\n                vertex[indexOffset++] = 0;\r\n                vertex[indexOffset++] = 0;\r\n            }\r\n            else {\r\n                let uvOffset = vertexOffset + meshUVOffset;\r\n                vertex[indexOffset++] = meshVertices[uvOffset++];\r\n                vertex[indexOffset++] = meshVertices[uvOffset++];\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 初始化 buffer\r\n     * @returns \r\n     */\r\n    _initBufferDatas(): void {\r\n        // todo  Resource._addMemory\r\n        if (this._vertexBuffer) {\r\n            // this._instanceBufferState.destroy();\r\n            this._vertexBuffer.destroy();\r\n            this._instanceParticleVertexBuffer.destroy();\r\n            this._indexBuffer.destroy();\r\n        }\r\n        let render: ShurikenParticleRenderer = this._ownerRender;\r\n        let renderMode: number = render.renderMode;\r\n\r\n        if (renderMode == -1 || this.maxParticles <= 0) {\r\n            return;\r\n        }\r\n\r\n        if (renderMode == 4) {\r\n            let mesh = render.mesh;\r\n            if (mesh) {\r\n                let meshDeclaration = VertexShurikenParticleMesh.vertexInstanceMeshDeclaration;\r\n                let particleDeclaration = VertexShurikenParticleMesh.vertexInstanceParticleDeclaration;\r\n\r\n                this._meshIndexCount = mesh.indexCount;\r\n                this._simulationUV_Index = particleDeclaration.getVertexElementByUsage(VertexShuriKenParticle.PARTICLE_SIMULATIONUV).offset / 4;\r\n                this._floatCountPerParticleData = particleDeclaration.vertexStride / 4;\r\n                this._startLifeTimeIndex = particleDeclaration.getVertexElementByUsage(VertexShuriKenParticle.PARTICLE_SHAPEPOSITIONSTARTLIFETIME)._offset / 4 + 3;\r\n                this._timeIndex = particleDeclaration.getVertexElementByUsage(VertexShuriKenParticle.PARTICLE_DIRECTIONTIME)._offset / 4 + 3;\r\n\r\n                let indexCount = mesh.indexCount;\r\n                this._indexBuffer = LayaGL.renderOBJCreate.createIndexBuffer3D(mesh.indexFormat, indexCount, BufferUsage.Static,false);\r\n                this._indexBuffer.setData(mesh._indexBuffer.getData());\r\n\r\n                let meshVertexCount = mesh.vertexCount;\r\n                let vbSize = meshDeclaration.vertexStride * meshVertexCount;\r\n                this._vertexBuffer = LayaGL.renderOBJCreate.createVertexBuffer3D(vbSize, BufferUsage.Static,false);\r\n                this._vertexBuffer.vertexDeclaration = meshDeclaration;\r\n                // 重排 mesh 顶点数据 ?\r\n                // 固定 vertexElement 类型。。。 \r\n                let meshVertex = new Float32Array(vbSize / 4);\r\n                this._initMeshVertex(meshVertex, mesh);\r\n\r\n                this._vertexBuffer.setData(meshVertex.buffer);\r\n\r\n                let particleCount = this._bufferMaxParticles;\r\n                let particleVbSize = particleCount * particleDeclaration.vertexStride;\r\n                this._instanceVertex = new Float32Array(particleVbSize / 4);\r\n                this._instanceParticleVertexBuffer = LayaGL.renderOBJCreate.createVertexBuffer3D(particleVbSize, BufferUsage.Dynamic,false);\r\n                this._instanceParticleVertexBuffer.vertexDeclaration = particleDeclaration;\r\n                this._instanceParticleVertexBuffer.setData(this._instanceVertex.buffer);\r\n                this._instanceParticleVertexBuffer.instanceBuffer = true;\r\n                this._bufferState.applyState([this._vertexBuffer,this._instanceParticleVertexBuffer],this._indexBuffer)\r\n            }\r\n\r\n        }\r\n        else {\r\n            let billboardDeclaration = VertexShurikenParticleBillboard.vertexInstanceMeshDeclaration;\r\n            let particleDeclaration = VertexShurikenParticleBillboard.vertexInstanceParticleDeclaration;\r\n\r\n            this._meshIndexCount = 6;\r\n            this._simulationUV_Index = particleDeclaration.getVertexElementByUsage(VertexShuriKenParticle.PARTICLE_SIMULATIONUV).offset / 4;\r\n            this._floatCountPerParticleData = particleDeclaration.vertexStride / 4;\r\n            this._startLifeTimeIndex = particleDeclaration.getVertexElementByUsage(VertexShuriKenParticle.PARTICLE_SHAPEPOSITIONSTARTLIFETIME)._offset / 4 + 3;\r\n            this._timeIndex = particleDeclaration.getVertexElementByUsage(VertexShuriKenParticle.PARTICLE_DIRECTIONTIME)._offset / 4 + 3;\r\n\r\n            let indexArray = VertexShurikenParticleBillboard.billboardIndexArray;\r\n            let indexCount = indexArray.length;\r\n            this._indexBuffer = LayaGL.renderOBJCreate.createIndexBuffer3D(IndexFormat.UInt16, indexCount, BufferUsage.Static,false);\r\n            this._indexBuffer.setData(indexArray);\r\n\r\n            let meshVBSize = this._meshIndexCount * billboardDeclaration.vertexStride;\r\n            this._vertexBuffer =LayaGL.renderOBJCreate.createVertexBuffer3D(meshVBSize,BufferUsage.Static,false);\r\n            this._vertexBuffer.vertexDeclaration = billboardDeclaration;\r\n            this._vertexBuffer.setData(VertexShurikenParticleBillboard.billboardVertexArray.buffer);\r\n            let particleCount = this._bufferMaxParticles;\r\n            let particleVbSize = particleCount * particleDeclaration.vertexStride;\r\n            this._instanceVertex = new Float32Array(particleVbSize / 4);\r\n            this._instanceParticleVertexBuffer = LayaGL.renderOBJCreate.createVertexBuffer3D(particleVbSize, BufferUsage.Dynamic,false);\r\n            this._instanceParticleVertexBuffer.vertexDeclaration = particleDeclaration;\r\n            this._instanceParticleVertexBuffer.setData(this._instanceVertex.buffer);\r\n            this._instanceParticleVertexBuffer.instanceBuffer = true;\r\n            // this._instanceBufferState.bind();\r\n            // this._instanceBufferState.applyIndexBuffer(this._indexBuffer);\r\n            // this._instanceBufferState.applyVertexBuffer(this._vertexBuffer);\r\n            // this._instanceBufferState.applyInstanceVertexBuffer(this._instanceParticleVertexBuffer);\r\n            // this._instanceBufferState.unBind();\r\n            this._bufferState.applyState([this._vertexBuffer,this._instanceParticleVertexBuffer],this._indexBuffer);\r\n        }\r\n\r\n        // let memorySize = this._instanceParticleVertexBuffer._byteLength + this._indexBuffer._byteLength + this._vertexBuffer._byteLength;\r\n\r\n        // Resource._addMemory(memorySize, memorySize);\r\n    }\r\n\r\n    protected _retireActiveParticles(): void {\r\n        const epsilon: number = 0.0001;\r\n        let firstActive = this._firstActiveElement;\r\n        while (this._firstActiveElement != this._firstNewElement) {\r\n            let index = this._firstActiveElement * this._floatCountPerParticleData;\r\n            let timeIndex = index + this._timeIndex;\r\n\r\n            let particleAge = this._currentTime - this._instanceVertex[timeIndex];\r\n            if (particleAge + epsilon < this._instanceVertex[index + this._startLifeTimeIndex]) {\r\n                break;\r\n            }\r\n\r\n            this._instanceVertex[timeIndex] = this._drawCounter;\r\n            this._firstActiveElement++;\r\n            if (this._firstActiveElement >= this._bufferMaxParticles) {\r\n                this._firstActiveElement = 0;\r\n            }\r\n        }\r\n        \r\n        if (this._firstActiveElement != firstActive) {\r\n            let byteStride = this._floatCountPerParticleData * 4;\r\n            if (this._firstActiveElement < this._firstFreeElement) {\r\n                let activeStart = this._firstActiveElement * byteStride;\r\n                this._instanceParticleVertexBuffer.setData(this._instanceVertex.buffer, 0, activeStart, (this._firstFreeElement - this._firstActiveElement) * byteStride);\r\n            }\r\n            else {\r\n                let start = this._firstActiveElement * byteStride;\r\n                let a = this._bufferMaxParticles - this._firstActiveElement;\r\n                this._instanceParticleVertexBuffer.setData(this._instanceVertex.buffer, 0, start, a * byteStride);\r\n\r\n                if (this._firstFreeElement > 0) {\r\n                    this._instanceParticleVertexBuffer.setData(this._instanceVertex.buffer, a * byteStride, 0, this._firstFreeElement * byteStride);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    protected _freeRetiredParticles(): void {\r\n        while (this._firstRetiredElement != this._firstActiveElement) {\r\n            let age = this._drawCounter - this._instanceVertex[this._firstRetiredElement * this._floatCountPerParticleData + this._timeIndex];\r\n\r\n            //TODO这里会有什么bug\r\n            if (false)\r\n                if (age < 3)//GPU从不滞后于CPU两帧，出于显卡驱动BUG等安全因素考虑滞后三帧\r\n                    break;\r\n            this._firstRetiredElement++;\r\n            if (this._firstRetiredElement >= this._bufferMaxParticles)\r\n                this._firstRetiredElement = 0;\r\n        }\r\n    }\r\n\r\n    addParticle(position: Vector3, direction: Vector3, time: number): boolean {\r\n        Vector3.normalize(direction, direction);\r\n\r\n        //下一个粒子\r\n        let nextFreeParticle = this._firstFreeElement + 1;\r\n        if (nextFreeParticle >= this._bufferMaxParticles) {\r\n            nextFreeParticle = 0;\r\n        }\r\n\r\n        if (nextFreeParticle == this._firstRetiredElement) {\r\n            return false;\r\n        }\r\n\r\n        let transform = this._owner.transform;\r\n        ShurikenParticleData.create(this, this._ownerRender);\r\n\r\n        let particleAge = this._currentTime - time;\r\n\r\n        if (particleAge >= ShurikenParticleData.startLifeTime) {\r\n            return true;\r\n        }\r\n\r\n        let pos: Vector3, rot: Quaternion;\r\n        if (this.simulationSpace == 0) {\r\n            pos = transform.position;\r\n            rot = transform.rotation;\r\n        }\r\n\r\n        //StartSpeed\r\n        let startSpeed = 0;\r\n        switch (this.startSpeedType) {\r\n            case 0:\r\n                startSpeed = this.startSpeedConstant;\r\n                break;\r\n            case 2:\r\n                if (this.autoRandomSeed) {\r\n                    startSpeed = MathUtil.lerp(this.startSpeedConstantMin, this.startSpeedConstantMax, Math.random());\r\n                } else {\r\n                    this._rand.seed = this._randomSeeds[8];\r\n                    startSpeed = MathUtil.lerp(this.startSpeedConstantMin, this.startSpeedConstantMax, this._rand.getFloat());\r\n                    this._randomSeeds[8] = this._rand.seed;\r\n                }\r\n                break;\r\n        }\r\n\r\n        let randomVelocityX: number, randomVelocityY: number, randomVelocityZ: number;\r\n        let needRandomVelocity = this._velocityOverLifetime && this._velocityOverLifetime.enable;\r\n        if (needRandomVelocity) {\r\n            let velocityType = this._velocityOverLifetime.velocity.type;\r\n            if (velocityType == 2 || velocityType == 3) {\r\n                if (this.autoRandomSeed) {\r\n                    randomVelocityX = Math.random();\r\n                    randomVelocityY = Math.random();\r\n                    randomVelocityZ = Math.random();\r\n                }\r\n                else {\r\n                    this._rand.seed = this._randomSeeds[9];\r\n                    randomVelocityX = this._rand.getFloat();\r\n                    randomVelocityY = this._rand.getFloat();\r\n                    randomVelocityZ = this._rand.getFloat();\r\n                    this._randomSeeds[9] = this._rand.seed;\r\n                }\r\n            }\r\n            else {\r\n                needRandomVelocity = false;\r\n            }\r\n        }\r\n        else {\r\n            needRandomVelocity = false;\r\n        }\r\n\r\n        let randomColor: number;\r\n        let needRandomColor = this._colorOverLifetime && this._colorOverLifetime.enable;\r\n        if (needRandomColor) {\r\n            let colorType = this._colorOverLifetime.color.type;\r\n            if (colorType == 3) {\r\n                if (this.autoRandomSeed) {\r\n                    randomColor = Math.random();\r\n                }\r\n                else {\r\n                    this._rand.seed = this._randomSeeds[10];\r\n                    randomColor = this._rand.getFloat();\r\n                    this._randomSeeds[10] = this._rand.seed;\r\n                }\r\n            }\r\n            else {\r\n                needRandomColor = false;\r\n            }\r\n        }\r\n        else {\r\n            needRandomColor = false;\r\n        }\r\n\r\n        let randomSize: number;\r\n        let needRandomSize = this._sizeOverLifetime && this._sizeOverLifetime.enable;\r\n        if (needRandomSize) {\r\n            let sizeType = this._sizeOverLifetime.size.type;\r\n            if (sizeType == 3) {\r\n                if (this.autoRandomSeed) {\r\n                    randomSize = Math.random();\r\n                }\r\n                else {\r\n                    this._rand.seed = this._randomSeeds[11];\r\n                    randomSize = this._rand.getFloat();\r\n                    this.randomSeed[11] = this._rand.seed;\r\n                }\r\n            }\r\n            else {\r\n                needRandomSize = false;\r\n            }\r\n        }\r\n        else {\r\n            needRandomSize = false;\r\n        }\r\n\r\n        let randomRotation: number;\r\n        let needRandomRotation = this._rotationOverLifetime && this._rotationOverLifetime.enable;\r\n        if (needRandomRotation) {\r\n            let rotationType = this._rotationOverLifetime.angularVelocity.type;\r\n            if (rotationType == 2 || rotationType == 3) {\r\n                if (this.autoRandomSeed) {\r\n\r\n                    randomRotation = Math.random();\r\n                }\r\n                else {\r\n                    this._rand.seed = this._randomSeeds[12];\r\n                    randomRotation = this._rand.getFloat();\r\n                    this._randomSeeds[12] = this._rand.seed;\r\n                }\r\n            }\r\n            else {\r\n                needRandomRotation = false;\r\n            }\r\n        }\r\n        else {\r\n            needRandomRotation = false;\r\n        }\r\n\r\n        let randomTextureAnimation: number;\r\n        let needRandomTextureAnimation = this._textureSheetAnimation && this._textureSheetAnimation.enable;\r\n        if (needRandomTextureAnimation) {\r\n            let textureAnimationType = this._textureSheetAnimation.frame.type;\r\n            if (textureAnimationType == 3) {\r\n                if (this.autoRandomSeed) {\r\n                    randomTextureAnimation = Math.random();\r\n                }\r\n                else {\r\n                    this._rand.seed = this._randomSeeds[15];\r\n                    randomTextureAnimation = this._rand.getFloat();\r\n                    this._randomSeeds[15] = this._rand.seed;\r\n                }\r\n            }\r\n            else {\r\n                needRandomTextureAnimation = false;\r\n            }\r\n        }\r\n        else {\r\n            needRandomTextureAnimation = false;\r\n        }\r\n\r\n        // todo uv 动画\r\n        let subU: number = ShurikenParticleData.startUVInfo[0];\r\n        let subV: number = ShurikenParticleData.startUVInfo[1];\r\n        let startU: number = ShurikenParticleData.startUVInfo[2];\r\n        let startV: number = ShurikenParticleData.startUVInfo[3];\r\n\r\n        let render: ShurikenParticleRenderer = this._ownerRender;\r\n        if (render.renderMode == 4) {\r\n\r\n        }\r\n        else {\r\n            // todo, quad 动态添加 uv ?\r\n        }\r\n\r\n        // 每个粒子 就一个数据, 不用循环\r\n        let startIndex = this._firstFreeElement * this._floatCountPerParticleData;\r\n\r\n        let offset = startIndex;\r\n        this._instanceVertex[offset++] = position.x;\r\n        this._instanceVertex[offset++] = position.y;\r\n        this._instanceVertex[offset++] = position.z;\r\n\r\n        this._instanceVertex[offset++] = ShurikenParticleData.startLifeTime;\r\n\r\n        this._instanceVertex[offset++] = direction.x;\r\n        this._instanceVertex[offset++] = direction.y;\r\n        this._instanceVertex[offset++] = direction.z;\r\n        this._instanceVertex[offset++] = time;\r\n\r\n        this._instanceVertex[offset++] = ShurikenParticleData.startColor.x;\r\n        this._instanceVertex[offset++] = ShurikenParticleData.startColor.y;\r\n        this._instanceVertex[offset++] = ShurikenParticleData.startColor.z;\r\n        this._instanceVertex[offset++] = ShurikenParticleData.startColor.w;\r\n\r\n        this._instanceVertex[offset++] = ShurikenParticleData.startSize[0];\r\n        this._instanceVertex[offset++] = ShurikenParticleData.startSize[1];\r\n        this._instanceVertex[offset++] = ShurikenParticleData.startSize[2];\r\n\r\n        this._instanceVertex[offset++] = ShurikenParticleData.startRotation[0];\r\n        this._instanceVertex[offset++] = ShurikenParticleData.startRotation[1];\r\n        this._instanceVertex[offset++] = ShurikenParticleData.startRotation[2];\r\n\r\n        //StartSpeed\r\n        this._instanceVertex[offset++] = startSpeed;\r\n        needRandomColor && (this._instanceVertex[offset + 1] = randomColor);\r\n        needRandomSize && (this._instanceVertex[offset + 2] = randomSize);\r\n        needRandomRotation && (this._instanceVertex[offset + 3] = randomRotation);\r\n        needRandomTextureAnimation && (this._instanceVertex[offset + 4] = randomTextureAnimation);\r\n        if (needRandomVelocity) {\r\n            this._instanceVertex[offset + 5] = randomVelocityX;\r\n            this._instanceVertex[offset + 6] = randomVelocityY;\r\n            this._instanceVertex[offset + 7] = randomVelocityZ;\r\n        }\r\n\r\n        switch (this.simulationSpace) {\r\n            case 0:\r\n                offset += 8;\r\n                this._instanceVertex[offset++] = pos.x;\r\n                this._instanceVertex[offset++] = pos.y;\r\n                this._instanceVertex[offset++] = pos.z;\r\n                this._instanceVertex[offset++] = rot.x;\r\n                this._instanceVertex[offset++] = rot.y;\r\n                this._instanceVertex[offset++] = rot.z;\r\n                this._instanceVertex[offset++] = rot.w;\r\n                break;\r\n            case 1:\r\n                break;\r\n            default:\r\n                throw new Error(\"ShurikenParticleMaterial: SimulationSpace value is invalid.\");\r\n        }\r\n        offset = startIndex + this._simulationUV_Index;\r\n        this._instanceVertex[offset++] = startU;\r\n        this._instanceVertex[offset++] = startV;\r\n        this._instanceVertex[offset++] = subU;\r\n        this._instanceVertex[offset++] = subV;\r\n\r\n        this._firstFreeElement = nextFreeParticle;\r\n        return true;\r\n    }\r\n\r\n    addNewParticlesToVertexBuffer(): void {\r\n        let byteStride = this._floatCountPerParticleData * 4;\r\n        // instance buffer 绘制不能偏移, 每次 从 0 更新整个 buffer\r\n        if (this._firstActiveElement < this._firstFreeElement) {\r\n            let start = this._firstActiveElement * byteStride;\r\n            this._instanceParticleVertexBuffer.setData(this._instanceVertex.buffer, 0, start, (this._firstFreeElement - this._firstActiveElement) * byteStride);\r\n        }\r\n        else {\r\n            let start = this._firstActiveElement * byteStride;\r\n            let a = this._bufferMaxParticles - this._firstActiveElement;\r\n            this._instanceParticleVertexBuffer.setData(this._instanceVertex.buffer, 0, start, a * byteStride);\r\n\r\n            if (this._firstFreeElement > 0) {\r\n                this._instanceParticleVertexBuffer.setData(this._instanceVertex.buffer, a * byteStride, 0, this._firstFreeElement * byteStride);\r\n            }\r\n        }\r\n\r\n        this._firstNewElement = this._firstFreeElement;\r\n    }\r\n\r\n    _updateRenderParams(stage: RenderContext3D) {\r\n        //this._instanceBufferState.bind();\r\n        // instance buffer 每次从 0 更新\r\n        this.clearRenderParams();\r\n        if (this._firstActiveElement < this._firstFreeElement) {\r\n            let indexCount = this._firstFreeElement - this._firstActiveElement;\r\n            this.setDrawElemenParams(this._meshIndexCount,0);\r\n            this.instanceCount = indexCount;\r\n          //  LayaGL.renderDrawConatext.drawElementsInstanced(MeshTopology.Triangles, this._meshIndexCount, IndexFormat.UInt16, 0, indexCount);\r\n          //  Stat.trianglesFaces += this._meshIndexCount / 3 * indexCount;\r\n          //  Stat.renderBatches++;\r\n        }\r\n        else {\r\n            let indexCount = this._bufferMaxParticles - this._firstActiveElement;\r\n            if (this._firstFreeElement > 0) {\r\n                indexCount += this._firstFreeElement;\r\n            }\r\n            this.setDrawElemenParams(this._meshIndexCount,0);\r\n            this.instanceCount = indexCount;\r\n            //LayaGL.renderEngine.getDrawContext().drawElementsInstanced(MeshTopology.Triangles, this._meshIndexCount, IndexFormat.UInt16, 0, indexCount);\r\n            //Stat.trianglesFaces += this._meshIndexCount / 3 * indexCount;\r\n            //Stat.renderBatches++;\r\n        }\r\n    }\r\n\r\n    destroy(): void {\r\n        // todo\r\n        super.destroy();\r\n\r\n        if (this._indexBuffer) {\r\n            this._indexBuffer.destroy();\r\n        }\r\n        if (this._vertexBuffer) {\r\n            this._vertexBuffer.destroy();\r\n        }\r\n        if (this._instanceParticleVertexBuffer) {\r\n            this._instanceParticleVertexBuffer.destroy();\r\n        }\r\n\r\n        this._instanceVertex = null;\r\n        this._meshIndexCount = null;\r\n        this._meshFloatCountPreVertex = null;\r\n    }\r\n}\r\n","import { Material } from \"../material/Material\"\r\nimport { BaseTexture } from \"../../../resource/BaseTexture\"\r\nimport { Shader3D } from \"../../../RenderEngine/RenderShader/Shader3D\";\r\nimport { ShaderDefine } from \"../../../RenderEngine/RenderShader/ShaderDefine\";\r\nimport { Color } from \"../../../maths/Color\";\r\nimport { Vector4 } from \"../../../maths/Vector4\";\r\nimport { RenderState } from \"../../../RenderEngine/RenderShader/RenderState\";\r\n\r\n\r\n/**\r\n * <code>ShurikenParticleMaterial</code> 类用于实现粒子材质。\r\n */\r\nexport class ShurikenParticleMaterial extends Material {\r\n\t/**渲染状态_透明混合。*/\r\n\tstatic RENDERMODE_ALPHABLENDED: number = 0;\r\n\t/**渲染状态_加色法混合。*/\r\n\tstatic RENDERMODE_ADDTIVE: number = 1;\r\n\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_DIFFUSEMAP: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_TINTCOLOR: ShaderDefine;\r\n\t/**@interanl */\r\n\tstatic SHADERDEFINE_ADDTIVEFOG: ShaderDefine;\r\n\r\n\t/**@internal */\r\n\tstatic DIFFUSETEXTURE: number;\r\n\t/**@internal */\r\n\tstatic TINTCOLOR: number;\r\n\t/**@internal */\r\n\tstatic TILINGOFFSET: number;\r\n\r\n\t/** 默认材质，禁止修改*/\r\n\tstatic defaultMaterial: ShurikenParticleMaterial;\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic __initDefine__(): void {\r\n\t\tShurikenParticleMaterial.SHADERDEFINE_DIFFUSEMAP = Shader3D.getDefineByName(\"DIFFUSEMAP\");\r\n\t\tShurikenParticleMaterial.SHADERDEFINE_TINTCOLOR = Shader3D.getDefineByName(\"TINTCOLOR\");\r\n\t\tShurikenParticleMaterial.SHADERDEFINE_ADDTIVEFOG = Shader3D.getDefineByName(\"ADDTIVEFOG\");\r\n\t\tShurikenParticleMaterial.DIFFUSETEXTURE = Shader3D.propertyNameToID(\"u_texture\");\r\n\t\tShurikenParticleMaterial.TINTCOLOR = Shader3D.propertyNameToID(\"u_Tintcolor\");\r\n\t\tShurikenParticleMaterial.TILINGOFFSET = Shader3D.propertyNameToID(\"u_TilingOffset\");\r\n\t}\r\n\r\n\t/**\r\n\t * 颜色。\r\n\t */\r\n\tget color(): Color {\r\n\t\treturn this._shaderValues.getColor(ShurikenParticleMaterial.TINTCOLOR);\r\n\t}\r\n\r\n\tset color(value: Color) {\r\n\t\tif (value)\r\n\t\t\tthis._shaderValues.addDefine(ShurikenParticleMaterial.SHADERDEFINE_TINTCOLOR);\r\n\t\telse\r\n\t\t\tthis._shaderValues.removeDefine(ShurikenParticleMaterial.SHADERDEFINE_TINTCOLOR);\r\n\r\n\t\tthis._shaderValues.setColor(ShurikenParticleMaterial.TINTCOLOR, value);\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * 纹理平铺和偏移。\r\n\t */\r\n\tget tilingOffset(): Vector4 {\r\n\t\treturn (<Vector4>this._shaderValues.getVector(ShurikenParticleMaterial.TILINGOFFSET));\r\n\t}\r\n\r\n\tset tilingOffset(value: Vector4) {\r\n\t\tif (value) {\r\n\t\t\tthis._shaderValues.setVector(ShurikenParticleMaterial.TILINGOFFSET, value);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis._shaderValues.getVector(ShurikenParticleMaterial.TILINGOFFSET).setValue(1.0, 1.0, 0.0, 0.0);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 漫反射贴图。\r\n\t */\r\n\tget texture(): BaseTexture {\r\n\t\treturn this._shaderValues.getTexture(ShurikenParticleMaterial.DIFFUSETEXTURE);\r\n\t}\r\n\r\n\tset texture(value: BaseTexture) {\r\n\t\tif (value)\r\n\t\t\tthis._shaderValues.addDefine(ShurikenParticleMaterial.SHADERDEFINE_DIFFUSEMAP);\r\n\t\telse\r\n\t\t\tthis._shaderValues.removeDefine(ShurikenParticleMaterial.SHADERDEFINE_DIFFUSEMAP);\r\n\r\n\t\tthis._shaderValues.setTexture(ShurikenParticleMaterial.DIFFUSETEXTURE, value);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * 创建一个 <code>ShurikenParticleMaterial</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.setShaderName(\"PARTICLESHURIKEN\");\r\n\t\t// this._shaderValues.setColor(ShurikenParticleMaterial.TINTCOLOR, new Color(0.5, 0.5, 0.5, 0.5));\r\n\t\t// this._shaderValues.setVector(ShurikenParticleMaterial.TILINGOFFSET, new Vector4(1.0, 1.0, 0.0, 0.0));\r\n\t\tthis.renderMode = ShurikenParticleMaterial.RENDERMODE_ALPHABLENDED;//默认加色法会自动加上雾化宏定义，导致非加色法从材质读取完后未移除宏定义。\r\n\t}\r\n\r\n\t/**\r\n\t* 克隆。\r\n\t* @return\t 克隆副本。\r\n\t* @override\r\n\t*/\r\n\tclone(): any {\r\n\t\tvar dest: ShurikenParticleMaterial = new ShurikenParticleMaterial();\r\n\t\tthis.cloneTo(dest);\r\n\t\treturn dest;\r\n\t}\r\n\r\n\r\n\t//----------------deprecated----------------\r\n\t/**\r\n\t * @deprecated\r\n\t * 渲染模式。\r\n\t */\r\n\tset renderMode(value: number) {\r\n\t\tswitch (value) {\r\n\t\t\tcase ShurikenParticleMaterial.RENDERMODE_ADDTIVE:\r\n\t\t\t\tthis.renderQueue = Material.RENDERQUEUE_TRANSPARENT;\r\n\t\t\t\tthis.depthWrite = false;\r\n\t\t\t\tthis.cull = RenderState.CULL_NONE;\r\n\t\t\t\tthis.blend = RenderState.BLEND_ENABLE_ALL;\r\n\t\t\t\tthis.blendSrc = RenderState.BLENDPARAM_SRC_ALPHA;\r\n\t\t\t\tthis.blendDst = RenderState.BLENDPARAM_ONE;\r\n\t\t\t\tthis.alphaTest = false;\r\n\t\t\t\tthis._shaderValues.addDefine(ShurikenParticleMaterial.SHADERDEFINE_ADDTIVEFOG);\r\n\t\t\t\tbreak;\r\n\t\t\tcase ShurikenParticleMaterial.RENDERMODE_ALPHABLENDED:\r\n\t\t\t\tthis.renderQueue = Material.RENDERQUEUE_TRANSPARENT;\r\n\t\t\t\tthis.depthWrite = false;\r\n\t\t\t\tthis.cull = RenderState.CULL_NONE;\r\n\t\t\t\tthis.blend = RenderState.BLEND_ENABLE_ALL;\r\n\t\t\t\tthis.blendSrc = RenderState.BLENDPARAM_SRC_ALPHA;\r\n\t\t\t\tthis.blendDst = RenderState.BLENDPARAM_ONE_MINUS_SRC_ALPHA;\r\n\t\t\t\tthis.alphaTest = false;\r\n\t\t\t\tthis._shaderValues.removeDefine(ShurikenParticleMaterial.SHADERDEFINE_ADDTIVEFOG);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(\"ShurikenParticleMaterial : renderMode value error.\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * 纹理平铺和偏移X分量。\r\n\t */\r\n\tget tilingOffsetX(): number {\r\n\t\treturn this._MainTex_STX;\r\n\t}\r\n\r\n\tset tilingOffsetX(x: number) {\r\n\t\tthis._MainTex_STX = x;\r\n\t}\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * 纹理平铺和偏移Y分量。\r\n\t */\r\n\tget tilingOffsetY(): number {\r\n\t\treturn this._MainTex_STY;\r\n\t}\r\n\r\n\tset tilingOffsetY(y: number) {\r\n\t\tthis._MainTex_STY = y;\r\n\t}\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * 纹理平铺和偏移Z分量。\r\n\t */\r\n\tget tilingOffsetZ(): number {\r\n\t\treturn this._MainTex_STZ;\r\n\t}\r\n\r\n\tset tilingOffsetZ(z: number) {\r\n\t\tthis._MainTex_STZ = z;\r\n\t}\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * 纹理平铺和偏移W分量。\r\n\t */\r\n\tget tilingOffsetW(): number {\r\n\t\treturn this._MainTex_STW;\r\n\t}\r\n\r\n\tset tilingOffsetW(w: number) {\r\n\t\tthis._MainTex_STW = w;\r\n\t}\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * @internal\r\n\t */\r\n\tget _TintColor(): Color {\r\n\t\treturn this.color;\r\n\t}\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * @internal\r\n\t */\r\n\tset _TintColor(value: Color) {\r\n\t\tthis.color = value;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * @internal\r\n\t */\r\n\tget _TintColorR(): number {\r\n\t\treturn this.color.r;\r\n\t}\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * @internal\r\n\t */\r\n\tset _TintColorR(value: number) {\r\n\t\tthis.color.r = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * @internal\r\n\t */\r\n\tget _TintColorG(): number {\r\n\t\treturn this.color.g;\r\n\t}\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * @internal\r\n\t */\r\n\tset _TintColorG(value: number) {\r\n\t\tthis.color.g = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * @internal\r\n\t */\r\n\tget _TintColorB(): number {\r\n\t\treturn this.color.b;\r\n\t}\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * @internal\r\n\t */\r\n\tset _TintColorB(value: number) {\r\n\t\tthis.color.b = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * @internal \r\n\t */\r\n\tget _TintColorA(): number {\r\n\t\treturn this.color.a;\r\n\t}\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * @internal\r\n\t */\r\n\tset _TintColorA(value: number) {\r\n\t\tthis.color.a = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * @internal\r\n\t */\r\n\tget _MainTex_ST(): Vector4 {\r\n\t\treturn this._shaderValues.getVector(ShurikenParticleMaterial.TILINGOFFSET)\r\n\t}\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * @internal\r\n\t */\r\n\tset _MainTex_ST(value: Vector4) {\r\n\t\tvar tilOff: Vector4 = (<Vector4>this._shaderValues.getVector(ShurikenParticleMaterial.TILINGOFFSET));\r\n\t\ttilOff.setValue(value.x, value.y, value.z, value.w);\r\n\t\tthis.tilingOffset = tilOff;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * @internal\r\n\t */\r\n\tget _MainTex_STX(): number {\r\n\t\treturn this._shaderValues.getVector(ShurikenParticleMaterial.TILINGOFFSET).x;\r\n\t}\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * @internal\r\n\t */\r\n\tset _MainTex_STX(x: number) {\r\n\t\tvar tilOff: Vector4 = (<Vector4>this._shaderValues.getVector(ShurikenParticleMaterial.TILINGOFFSET));\r\n\t\ttilOff.x = x;\r\n\t\tthis.tilingOffset = tilOff;\r\n\t}\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * @internal\r\n\t */\r\n\tget _MainTex_STY(): number {\r\n\t\treturn this._shaderValues.getVector(ShurikenParticleMaterial.TILINGOFFSET).y;\r\n\t}\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * @internal\r\n\t */\r\n\tset _MainTex_STY(y: number) {\r\n\t\tvar tilOff: Vector4 = (<Vector4>this._shaderValues.getVector(ShurikenParticleMaterial.TILINGOFFSET));\r\n\t\ttilOff.y = y;\r\n\t\tthis.tilingOffset = tilOff;\r\n\t}\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * @internal\r\n\t */\r\n\tget _MainTex_STZ(): number {\r\n\t\treturn this._shaderValues.getVector(ShurikenParticleMaterial.TILINGOFFSET).z;\r\n\t}\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * @internal\r\n\t */\r\n\tset _MainTex_STZ(z: number) {\r\n\t\tvar tilOff: Vector4 = (<Vector4>this._shaderValues.getVector(ShurikenParticleMaterial.TILINGOFFSET));\r\n\t\ttilOff.z = z;\r\n\t\tthis.tilingOffset = tilOff;\r\n\t}\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * @internal\r\n\t */\r\n\tget _MainTex_STW(): number {\r\n\t\treturn this._shaderValues.getVector(ShurikenParticleMaterial.TILINGOFFSET).w;\r\n\t}\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * @internal\r\n\t */\r\n\tset _MainTex_STW(w: number) {\r\n\t\tvar tilOff: Vector4 = (<Vector4>this._shaderValues.getVector(ShurikenParticleMaterial.TILINGOFFSET));\r\n\t\ttilOff.w = w;\r\n\t\tthis.tilingOffset = tilOff;\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * 颜色R分量。\r\n\t */\r\n\tget colorR(): number {\r\n\t\treturn this._TintColorR;\r\n\t}\r\n\r\n\tset colorR(value: number) {\r\n\t\tthis._TintColorR = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * 颜色G分量。\r\n\t */\r\n\tget colorG(): number {\r\n\t\treturn this._TintColorG;\r\n\t}\r\n\r\n\tset colorG(value: number) {\r\n\t\tthis._TintColorG = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * 颜色B分量。\r\n\t */\r\n\tget colorB(): number {\r\n\t\treturn this._TintColorB;\r\n\t}\r\n\r\n\tset colorB(value: number) {\r\n\t\tthis._TintColorB = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * 颜色Z分量。\r\n\t */\r\n\tget colorA(): number {\r\n\t\treturn this._TintColorA;\r\n\t}\r\n\r\n\tset colorA(value: number) {\r\n\t\tthis._TintColorA = value;\r\n\t}\r\n}\r\n\r\n\r\n","import { BoundFrustum } from \"../../math/BoundFrustum\";\r\nimport { Mesh } from \"../../resource/models/Mesh\";\r\nimport { Physics3DUtils } from \"../../utils/Physics3DUtils\";\r\nimport { BaseRender } from \"../render/BaseRender\";\r\nimport { RenderContext3D } from \"../render/RenderContext3D\";\r\nimport { Transform3D } from \"../Transform3D\";\r\nimport { ShurikenParticleSystem } from \"./ShurikenParticleSystem\";\r\nimport { ShuriKenParticle3DShaderDeclaration } from \"./ShuriKenParticle3DShaderDeclaration\";\r\nimport { LayaGL } from \"../../../layagl/LayaGL\";\r\nimport { ShurikenParticleInstanceSystem } from \"./ShurikenParticleInstanceSystem\";\r\nimport { RenderElement } from \"../render/RenderElement\";\r\nimport { Sprite3D } from \"../Sprite3D\";\r\nimport { ShurikenParticleMaterial } from \"./ShurikenParticleMaterial\";\r\nimport { Component } from \"../../../components/Component\";\r\nimport { RenderCapable } from \"../../../RenderEngine/RenderEnum/RenderCapable\";\r\nimport { ShaderData, ShaderDataType } from \"../../../RenderEngine/RenderShader/ShaderData\";\r\nimport { Stat } from \"../../../utils/Stat\";\r\nimport { Bounds } from \"../../math/Bounds\";\r\nimport { LayaEnv } from \"../../../../LayaEnv\";\r\nimport { Vector2 } from \"../../../maths/Vector2\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\n\r\n\r\n/**\r\n * <code>ShurikenParticleRender</code> 类用于创建3D粒子渲染器。\r\n */\r\nexport class ShurikenParticleRenderer extends BaseRender {\r\n    /** @internal */\r\n    private _finalGravity: Vector3 = new Vector3();\r\n    private _dragConstant: Vector2 = new Vector2();\r\n\r\n\r\n    /**@internal */\r\n    private _renderMode: number;\r\n    /**@internal */\r\n    private _mesh: Mesh = null;\r\n\r\n    /**@interanl */\r\n    _particleSystem: ShurikenParticleSystem;\r\n    /**拉伸广告牌模式摄像机速度缩放,暂不支持。*/\r\n    stretchedBillboardCameraSpeedScale: number = 0;\r\n    /**拉伸广告牌模式速度缩放。*/\r\n    stretchedBillboardSpeedScale: number = 0;\r\n    /**拉伸广告牌模式长度缩放。*/\r\n    stretchedBillboardLengthScale: number = 2;\r\n\r\n    get particleSystem(): ShurikenParticleSystem {\r\n        return this._particleSystem;\r\n    }\r\n\r\n    ///**排序模式。*/\r\n    //public var sortingMode:int;\r\n\r\n    /**\r\n     * 获取渲染模式,0为BILLBOARD、1为STRETCHEDBILLBOARD、2为HORIZONTALBILLBOARD、3为VERTICALBILLBOARD、4为MESH。\r\n     */\r\n    get renderMode(): number {\r\n        return this._renderMode;\r\n    }\r\n\r\n    set renderMode(value: number) {\r\n        if (this._renderMode !== value) {\r\n            var defineDatas: ShaderData = this._shaderValues;\r\n            switch (this._renderMode) {\r\n                case 0:\r\n                    defineDatas.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_RENDERMODE_BILLBOARD);\r\n                    break;\r\n                case 1:\r\n                    defineDatas.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_RENDERMODE_STRETCHEDBILLBOARD);\r\n                    break;\r\n                case 2:\r\n                    defineDatas.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_RENDERMODE_HORIZONTALBILLBOARD);\r\n                    break;\r\n                case 3:\r\n                    defineDatas.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_RENDERMODE_VERTICALBILLBOARD);\r\n                    break;\r\n                case 4:\r\n                    defineDatas.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_RENDERMODE_MESH);\r\n                    break;\r\n            }\r\n            this._renderMode = value;\r\n            switch (value) {\r\n                case 0:\r\n                    defineDatas.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_RENDERMODE_BILLBOARD);\r\n                    break;\r\n                case 1:\r\n                    defineDatas.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_RENDERMODE_STRETCHEDBILLBOARD);\r\n                    break;\r\n                case 2:\r\n                    defineDatas.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_RENDERMODE_HORIZONTALBILLBOARD);\r\n                    break;\r\n                case 3:\r\n                    defineDatas.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_RENDERMODE_VERTICALBILLBOARD);\r\n                    break;\r\n                case 4:\r\n                    defineDatas.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_RENDERMODE_MESH);\r\n                    break;\r\n                default:\r\n                    throw new Error(\"ShurikenParticleRender: unknown renderMode Value.\");\r\n            }\r\n            var parSys: ShurikenParticleSystem = this._particleSystem;\r\n            (parSys) && (parSys._initBufferDatas());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取网格渲染模式所使用的Mesh,rendderMode为4时生效。\r\n     */\r\n    get mesh(): Mesh {\r\n        return this._mesh;\r\n    }\r\n\r\n    set mesh(value: Mesh) {\r\n        if (this._mesh !== value) {\r\n            (this._mesh) && (this._mesh._removeReference());\r\n            this._mesh = value;\r\n            (value) && (value._addReference());\r\n            this._particleSystem._initBufferDatas();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 创建一个 <code>ShurikenParticleRender</code> 实例。\r\n     */\r\n    constructor() {\r\n        super();\r\n        this.renderMode = 0;\r\n        this._supportOctree = false;\r\n    }\r\n\r\n    protected _onAdded(): void {\r\n        super._onAdded();\r\n        if (!LayaGL.renderEngine.getCapable(RenderCapable.DrawElement_Instance)) {\r\n            this._particleSystem = new ShurikenParticleSystem(this);\r\n        } else\r\n            this._particleSystem = new ShurikenParticleInstanceSystem(this);\r\n\r\n        var elements: RenderElement[] = this._renderElements;\r\n        var element: RenderElement = elements[0] = new RenderElement();\r\n        element.setTransform((this.owner as Sprite3D)._transform);\r\n        element.render = this;\r\n        element.setGeometry(this._particleSystem);\r\n        element.material = ShurikenParticleMaterial.defaultMaterial;\r\n    }\r\n\r\n    protected _onEnable(): void {\r\n        super._onEnable();\r\n\r\n        Stat.particleRenderNode++;\r\n        (this._particleSystem.playOnAwake && LayaEnv.isPlaying) && (this._particleSystem.play());\r\n    }\r\n\r\n    protected _onDisable(): void {\r\n        super._onDisable();\r\n\r\n        Stat.particleRenderNode--;\r\n        (this._particleSystem.isAlive) && (this._particleSystem.simulate(0, true));\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @internal\r\n     * @override\r\n     */\r\n    protected _calculateBoundingBox(): void {\r\n        var particleSystem: ShurikenParticleSystem = this._particleSystem;\r\n        var bounds: Bounds;\r\n        if (particleSystem._useCustomBounds) {\r\n            bounds = particleSystem.customBounds;\r\n            bounds._tranform((this.owner as Sprite3D).transform.worldMatrix, this._bounds);\r\n        }\r\n        else if (particleSystem._simulationSupported()) {\r\n            // todo need update Bounds\r\n            particleSystem._generateBounds();\r\n            bounds = particleSystem._bounds;\r\n            bounds._tranform((this.owner as Sprite3D).transform.worldMatrix, this._bounds);\r\n            // 在世界坐标下考虑重力影响\r\n            if (particleSystem.gravityModifier != 0) {\r\n                var max: Vector3 = this._bounds.getMax();\r\n                var min: Vector3 = this._bounds.getMin();\r\n                var gravityOffset: Vector2 = particleSystem._gravityOffset;\r\n                max.y -= gravityOffset.x;\r\n                min.y -= gravityOffset.y;\r\n                this._bounds.setMax(max);\r\n                this._bounds.setMin(min);\r\n            }\r\n        }\r\n        else {\r\n            var min: Vector3 = this._bounds.getMin();\r\n            min.setValue(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\r\n            this._bounds.setMin(min);\r\n            var max: Vector3 = this._bounds.getMax();\r\n            max.setValue(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\r\n            this._bounds.setMax(max);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @internal\r\n     * @override\r\n     */\r\n    _needRender(boundFrustum: BoundFrustum, context: RenderContext3D): boolean {\r\n        if(!Stat.enableParticle)\r\n            return false;\r\n        if (boundFrustum) {\r\n            if (boundFrustum.intersects(this.bounds)) {\r\n                if (this._particleSystem.isAlive)\r\n                    return true;\r\n                else\r\n                    return false;\r\n            } else {\r\n                return false;\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @internal\r\n     * @override\r\n     */\r\n    _renderUpdate(context: RenderContext3D, transfrom: Transform3D): void {\r\n        var particleSystem: ShurikenParticleSystem = this._particleSystem;\r\n        var sv: ShaderData = this._shaderValues;\r\n        var transform: Transform3D = (this.owner as Sprite3D).transform;\r\n        switch (particleSystem.simulationSpace) {\r\n            case 0: //World\r\n                break;\r\n            case 1: //Local\r\n                sv.setVector3(ShuriKenParticle3DShaderDeclaration.WORLDPOSITION, transform.position);\r\n                sv.setShaderData(ShuriKenParticle3DShaderDeclaration.WORLDROTATION, ShaderDataType.Vector4, transform.rotation);\r\n                break;\r\n            default:\r\n                throw new Error(\"ShurikenParticleMaterial: SimulationSpace value is invalid.\");\r\n        }\r\n\r\n        switch (particleSystem.scaleMode) {\r\n            case 0:\r\n                var scale: Vector3 = transform.getWorldLossyScale();\r\n                sv.setVector3(ShuriKenParticle3DShaderDeclaration.POSITIONSCALE, scale);\r\n                sv.setVector3(ShuriKenParticle3DShaderDeclaration.SIZESCALE, scale);\r\n                break;\r\n            case 1:\r\n                var localScale: Vector3 = transform.localScale;\r\n                sv.setVector3(ShuriKenParticle3DShaderDeclaration.POSITIONSCALE, localScale);\r\n                sv.setVector3(ShuriKenParticle3DShaderDeclaration.SIZESCALE, localScale);\r\n                break;\r\n            case 2:\r\n                sv.setVector3(ShuriKenParticle3DShaderDeclaration.POSITIONSCALE, transform.getWorldLossyScale());\r\n                sv.setVector3(ShuriKenParticle3DShaderDeclaration.SIZESCALE, Vector3.ONE);\r\n                break;\r\n        }\r\n\r\n        switch (particleSystem.dragType) {\r\n            case 0:\r\n                this._dragConstant.setValue(particleSystem.dragSpeedConstantMin, particleSystem.dragSpeedConstantMin);\r\n                sv.setVector2(ShuriKenParticle3DShaderDeclaration.DRAG, this._dragConstant);\r\n                break;\r\n            case 2:\r\n                this._dragConstant.setValue(particleSystem.dragSpeedConstantMin, particleSystem.dragSpeedConstantMax);\r\n                sv.setVector2(ShuriKenParticle3DShaderDeclaration.DRAG, this._dragConstant);\r\n                break;\r\n            default:\r\n                this._dragConstant.setValue(0, 0);\r\n                break;\r\n        }\r\n\r\n        Vector3.scale(Physics3DUtils.gravity, particleSystem.gravityModifier, this._finalGravity);\r\n        sv.setVector3(ShuriKenParticle3DShaderDeclaration.GRAVITY, this._finalGravity);\r\n        sv.setInt(ShuriKenParticle3DShaderDeclaration.SIMULATIONSPACE, particleSystem.simulationSpace);\r\n        sv.setBool(ShuriKenParticle3DShaderDeclaration.THREEDSTARTROTATION, particleSystem.threeDStartRotation);\r\n        sv.setInt(ShuriKenParticle3DShaderDeclaration.SCALINGMODE, particleSystem.scaleMode);\r\n        sv.setNumber(ShuriKenParticle3DShaderDeclaration.STRETCHEDBILLBOARDLENGTHSCALE, this.stretchedBillboardLengthScale);\r\n        sv.setNumber(ShuriKenParticle3DShaderDeclaration.STRETCHEDBILLBOARDSPEEDSCALE, this.stretchedBillboardSpeedScale);\r\n        sv.setNumber(ShuriKenParticle3DShaderDeclaration.CURRENTTIME, particleSystem._currentTime);\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     */\r\n    get bounds(): Bounds {\r\n        if (this.boundsChange) {\r\n            this._calculateBoundingBox();\r\n            this.boundsChange = false;\r\n        }\r\n        return this._bounds;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @override\r\n     */\r\n    _cloneTo(dest: Component): void {\r\n        let parRender = dest as ShurikenParticleRenderer;\r\n        this._particleSystem.cloneTo(parRender._particleSystem);\r\n        parRender.sharedMaterial = this.sharedMaterial;\r\n        parRender.renderMode = this.renderMode;\r\n        parRender.mesh = this.mesh;\r\n        parRender.stretchedBillboardCameraSpeedScale = this.stretchedBillboardCameraSpeedScale;\r\n        parRender.stretchedBillboardSpeedScale = this.stretchedBillboardSpeedScale;\r\n        parRender.stretchedBillboardLengthScale = this.stretchedBillboardLengthScale;\r\n        parRender.sortingFudge = this.sortingFudge;\r\n    }\r\n\r\n    protected _onDestroy() {\r\n        (this._mesh) && (this._mesh._removeReference(), this._mesh = null);\r\n        this._particleSystem.destroy();\r\n        this._particleSystem = null;\r\n        super._onDestroy();\r\n    }\r\n\r\n}\r\n\r\n\r\n","import { Node } from \"../../../display/Node\";\r\nimport { Color } from \"../../../maths/Color\";\r\nimport { Vector2 } from \"../../../maths/Vector2\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\nimport { Vector4 } from \"../../../maths/Vector4\";\r\nimport { Loader } from \"../../../net/Loader\";\r\nimport { Texture } from \"../../../resource/Texture\";\r\nimport { Gradient } from \"../Gradient\";\r\nimport { RenderableSprite3D } from \"../RenderableSprite3D\";\r\nimport { Sprite3D } from \"../Sprite3D\";\r\nimport { Burst } from \"./module/Burst\";\r\nimport { ColorOverLifetime } from \"./module/ColorOverLifetime\";\r\nimport { Emission } from \"./module/Emission\";\r\nimport { FrameOverTime } from \"./module/FrameOverTime\";\r\nimport { GradientAngularVelocity } from \"./module/GradientAngularVelocity\";\r\nimport { GradientColor } from \"./module/GradientColor\";\r\nimport { GradientDataInt } from \"./module/GradientDataInt\";\r\nimport { GradientDataNumber } from \"./module/GradientDataNumber\";\r\nimport { GradientSize } from \"./module/GradientSize\";\r\nimport { GradientVelocity } from \"./module/GradientVelocity\";\r\nimport { RotationOverLifetime } from \"./module/RotationOverLifetime\";\r\nimport { BaseShape } from \"./module/shape/BaseShape\";\r\nimport { BoxShape } from \"./module/shape/BoxShape\";\r\nimport { CircleShape } from \"./module/shape/CircleShape\";\r\nimport { ConeShape } from \"./module/shape/ConeShape\";\r\nimport { HemisphereShape } from \"./module/shape/HemisphereShape\";\r\nimport { SphereShape } from \"./module/shape/SphereShape\";\r\nimport { SizeOverLifetime } from \"./module/SizeOverLifetime\";\r\nimport { StartFrame } from \"./module/StartFrame\";\r\nimport { TextureSheetAnimation } from \"./module/TextureSheetAnimation\";\r\nimport { VelocityOverLifetime } from \"./module/VelocityOverLifetime\";\r\nimport { ShurikenParticleMaterial } from \"./ShurikenParticleMaterial\";\r\nimport { ShurikenParticleRenderer } from \"./ShurikenParticleRenderer\";\r\nimport { ShurikenParticleSystem } from \"./ShurikenParticleSystem\";\r\n\r\n/**\r\n * <code>ShuriKenParticle3D</code> 3D粒子。\r\n */\r\nexport class ShuriKenParticle3D extends RenderableSprite3D {\r\n\r\n\t/** @internal */\r\n\tprivate _particleSystem: ShurikenParticleSystem;\r\n\r\n\t/**\r\n\t * 粒子系统。\r\n\t */\r\n\tget particleSystem(): ShurikenParticleSystem {\r\n\t\treturn this._particleSystem;\r\n\t}\r\n\r\n\t/**\r\n\t * 粒子渲染器。\r\n\t */\r\n\tget particleRenderer(): ShurikenParticleRenderer {\r\n\t\treturn <ShurikenParticleRenderer>this._render;\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>Particle3D</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper(null);\r\n\t\tthis._render = this.addComponent(ShurikenParticleRenderer) as ShurikenParticleRenderer;\r\n\t\tthis._particleSystem = (this._render as ShurikenParticleRenderer)._particleSystem;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_parseModule(module: any, moduleData: any): void {\r\n\t\tfor (var t in moduleData) {\r\n\t\t\tswitch (t) {\r\n\t\t\t\tcase \"bases\":\r\n\t\t\t\t\tvar bases = moduleData.bases;\r\n\t\t\t\t\tfor (var k in bases)\r\n\t\t\t\t\t\tmodule[k] = bases[k];\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"vector2s\":\r\n\t\t\t\t\tvar vector2s = moduleData.vector2s;\r\n\t\t\t\t\tfor (var k in vector2s) {\r\n\t\t\t\t\t\tvar vec2: Vector2 = module[k];\r\n\t\t\t\t\t\tvar vec2Data: number[] = vector2s[k];\r\n\t\t\t\t\t\tvec2.setValue(vec2Data[0], vec2Data[1]);\r\n\t\t\t\t\t\tmodule[k] = vec2;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"vector3s\":\r\n\t\t\t\t\tvar vector3s = moduleData.vector3s;\r\n\t\t\t\t\tfor (var k in vector3s) {\r\n\t\t\t\t\t\tvar vec3: Vector3 = module[k];\r\n\t\t\t\t\t\tvar vec3Data: number[] = vector3s[k];\r\n\t\t\t\t\t\tvec3.setValue(vec3Data[0], vec3Data[1], vec3Data[2]);\r\n\t\t\t\t\t\tmodule[k] = vec3;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"vector4s\":\r\n\t\t\t\t\tvar vector4s = moduleData.vector4s;\r\n\t\t\t\t\tfor (var k in vector4s) {\r\n\t\t\t\t\t\tvar vec4: Vector4 = module[k];\r\n\t\t\t\t\t\tvar vec4Data: number[] = vector4s[k];\r\n\t\t\t\t\t\tvec4.setValue(vec4Data[0], vec4Data[1], vec4Data[2], vec4Data[3]);\r\n\t\t\t\t\t\tmodule[k] = vec4;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"gradientDataNumbers\":\r\n\t\t\t\t\tvar gradientDataNumbers: object = moduleData.gradientDataNumbers;\r\n\t\t\t\t\tfor (var k in gradientDataNumbers) {\r\n\t\t\t\t\t\tvar gradientNumber: GradientDataNumber = module[k];\r\n\t\t\t\t\t\tvar gradientNumberData: any[] = moduleData[k];\r\n\t\t\t\t\t\tfor (var i: number = 0, n: number = gradientNumberData.length; i < n; i++) {\r\n\t\t\t\t\t\t\tvar valueData: any = gradientNumberData[i];\r\n\t\t\t\t\t\t\tgradientNumber.add(valueData.key, valueData.value);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tmodule[k] = gradientNumber;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"resources\":\r\n\t\t\t\t\tvar resources: any = moduleData.resources;\r\n\t\t\t\t\tfor (var k in resources) {\r\n\t\t\t\t\t\tlet res = Loader.getRes(resources[k]);\r\n\t\t\t\t\t\tif (res && (res instanceof Texture)) {\r\n\t\t\t\t\t\t\tres = res.bitmap;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tmodule[k] = res;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"bursts\":\r\n\t\t\t\t\tvar burstsData: any[] = moduleData.bursts;\r\n\t\t\t\t\tfor (var i: number = 0, n: number = burstsData.length; i < n; i++) {\r\n\t\t\t\t\t\tvar brust: any = burstsData[i];\r\n\t\t\t\t\t\tmodule.addBurst(new Burst(brust.time, brust.min, brust.max));\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"randomSeed\":\r\n\t\t\t\t\tmodule.randomSeed[0] = moduleData.randomSeed;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"shapeType\"://TODO:remove in the fulther\r\n\t\t\t\tcase \"type\":\r\n\t\t\t\tcase \"color\":\r\n\t\t\t\tcase \"size\":\r\n\t\t\t\tcase \"frame\":\r\n\t\t\t\tcase \"startFrame\":\r\n\t\t\t\tcase \"angularVelocity\":\r\n\t\t\t\tcase \"velocity\":\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow \"ShurikenParticle3D:unknown type.\";\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\t_parse(data: any, spriteMap: any): void {\r\n\t\tsuper._parse(data, spriteMap);\r\n\t\tif (data.main) {\r\n\t\t\tvar particleSystem: ShurikenParticleSystem = this.particleSystem;\r\n\t\t\tvar particleRender: ShurikenParticleRenderer = this.particleRenderer;\r\n\t\t\tthis._parseModule(particleRender, data.renderer);//Renderer\r\n\t\t\tthis._parseModule(particleSystem, data.main);//particleSystem\r\n\t\t\tthis._parseModule(particleSystem.emission, data.emission);//Emission\r\n\r\n\t\t\t//Shape\r\n\t\t\tvar shapeData: any = data.shape;\r\n\t\t\tif (shapeData) {\r\n\t\t\t\tvar shape: BaseShape;\r\n\t\t\t\tswitch (shapeData.shapeType) {\r\n\t\t\t\t\tcase 0:\r\n\t\t\t\t\t\tshape = new SphereShape();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\tshape = new HemisphereShape();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\tshape = new ConeShape();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 3:\r\n\t\t\t\t\t\tshape = new BoxShape();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 7:\r\n\t\t\t\t\t\tshape = new CircleShape();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tthrow \"ShuriKenParticle3D:unknown shape type.\";\r\n\t\t\t\t}\r\n\t\t\t\tthis._parseModule(shape, shapeData);\r\n\t\t\t\tparticleSystem.shape = shape;\r\n\t\t\t}\r\n\r\n\t\t\t//VelocityOverLifetime\r\n\t\t\tvar velocityOverLifetimeData: any = data.velocityOverLifetime;\r\n\t\t\tif (velocityOverLifetimeData) {\r\n\t\t\t\tvar velocityData: any = velocityOverLifetimeData.velocity;\r\n\t\t\t\tvar velocity: GradientVelocity;\r\n\t\t\t\tswitch (velocityData.type) {\r\n\t\t\t\t\tcase 0:\r\n\t\t\t\t\t\tvar constantData: any[] = velocityData.constant;\r\n\t\t\t\t\t\tvelocity = GradientVelocity.createByConstant(constantData ? new Vector3(constantData[0], constantData[1], constantData[2]) : new Vector3(0, 0, 0));\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\tvelocity = GradientVelocity.createByGradient(this._initParticleVelocity(velocityData.gradientX), this._initParticleVelocity(velocityData.gradientY), this._initParticleVelocity(velocityData.gradientZ));\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\tvar constantMinData: any[] = velocityData.constantMin;\r\n\t\t\t\t\t\tvar constantMaxData: any[] = velocityData.constantMax;\r\n\t\t\t\t\t\tvelocity = GradientVelocity.createByRandomTwoConstant(constantMinData ? new Vector3(constantMinData[0], constantMinData[1], constantMinData[2]) : new Vector3(0, 0, 0), constantMaxData ? new Vector3(constantMaxData[0], constantMaxData[1], constantMaxData[2]) : new Vector3(0, 0, 0));\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 3:\r\n\t\t\t\t\t\tvelocity = GradientVelocity.createByRandomTwoGradient(this._initParticleVelocity(velocityData.gradientXMin), this._initParticleVelocity(velocityData.gradientXMax), this._initParticleVelocity(velocityData.gradientYMin), this._initParticleVelocity(velocityData.gradientYMax), this._initParticleVelocity(velocityData.gradientZMin), this._initParticleVelocity(velocityData.gradientZMax));\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tvar velocityOverLifetime: VelocityOverLifetime = new VelocityOverLifetime(velocity);\r\n\t\t\t\tthis._parseModule(velocityOverLifetime, velocityOverLifetimeData);\r\n\t\t\t\tparticleSystem.velocityOverLifetime = velocityOverLifetime;\r\n\t\t\t}\r\n\r\n\t\t\t//ColorOverLifetime\r\n\t\t\tvar colorOverLifetimeData: any = data.colorOverLifetime;\r\n\r\n\t\t\tif (colorOverLifetimeData) {\r\n\t\t\t\tvar colorData: any = colorOverLifetimeData.color;\r\n\t\t\t\tlet maxKeyCount = colorData.maxKeyCount;\r\n\t\t\t\tvar color: GradientColor;\r\n\t\t\t\tswitch (colorData.type) {\r\n\t\t\t\t\tcase 0:\r\n\t\t\t\t\t\tvar constColorData: any[] = colorData.constant;\r\n\t\t\t\t\t\tcolor = GradientColor.createByConstant(constColorData ? new Vector4(constColorData[0], constColorData[1], constColorData[2], constColorData[3]) : new Vector4(0, 0, 0, 0));\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\tcolor = GradientColor.createByGradient(this._initParticleColor(colorData.gradient, maxKeyCount));\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\tvar minConstColorData: any[] = colorData.constantMin;\r\n\t\t\t\t\t\tvar maxConstColorData: any[] = colorData.constantMax;\r\n\t\t\t\t\t\tcolor = GradientColor.createByRandomTwoConstant(minConstColorData ? new Vector4(minConstColorData[0], minConstColorData[1], minConstColorData[2], minConstColorData[3]) : new Vector4(0, 0, 0, 0), minConstColorData ? new Vector4(maxConstColorData[0], maxConstColorData[1], maxConstColorData[2], maxConstColorData[3]) : new Vector4(0, 0, 0, 0));\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 3:\r\n\t\t\t\t\t\tcolor = GradientColor.createByRandomTwoGradient(this._initParticleColor(colorData.gradientMin, maxKeyCount), this._initParticleColor(colorData.gradientMax, maxKeyCount));\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tvar colorOverLifetime: ColorOverLifetime = new ColorOverLifetime(color);\r\n\t\t\t\tthis._parseModule(colorOverLifetime, colorOverLifetimeData);\r\n\t\t\t\tparticleSystem.colorOverLifetime = colorOverLifetime;\r\n\t\t\t}\r\n\r\n\t\t\t//SizeOverLifetime\r\n\t\t\tvar sizeOverLifetimeData: any = data.sizeOverLifetime;\r\n\t\t\tif (sizeOverLifetimeData) {\r\n\t\t\t\tvar sizeData: any = sizeOverLifetimeData.size;\r\n\t\t\t\tvar size: GradientSize;\r\n\t\t\t\tswitch (sizeData.type) {\r\n\t\t\t\t\tcase 0:\r\n\t\t\t\t\t\tif (sizeData.separateAxes) {\r\n\t\t\t\t\t\t\tsize = GradientSize.createByGradientSeparate(this._initParticleSize(sizeData.gradientX), this._initParticleSize(sizeData.gradientY), this._initParticleSize(sizeData.gradientZ));\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tsize = GradientSize.createByGradient(this._initParticleSize(sizeData.gradient));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\tif (sizeData.separateAxes) {\r\n\t\t\t\t\t\t\tvar constantMinSeparateData: any[] = sizeData.constantMinSeparate;\r\n\t\t\t\t\t\t\tvar constantMaxSeparateData: any[] = sizeData.constantMaxSeparate;\r\n\t\t\t\t\t\t\tsize = GradientSize.createByRandomTwoConstantSeparate(constantMinSeparateData ? new Vector3(constantMinSeparateData[0], constantMinSeparateData[1], constantMinSeparateData[2]) : new Vector3(0, 0, 0), constantMaxSeparateData ? new Vector3(constantMaxSeparateData[0], constantMaxSeparateData[1], constantMaxSeparateData[2]) : new Vector3(0, 0, 0));\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tsize = GradientSize.createByRandomTwoConstant(sizeData.constantMin || 0, sizeData.constantMax || 0);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\tif (sizeData.separateAxes) {\r\n\t\t\t\t\t\t\tsize = GradientSize.createByRandomTwoGradientSeparate(this._initParticleSize(sizeData.gradientXMin), this._initParticleSize(sizeData.gradientYMin), this._initParticleSize(sizeData.gradientZMin), this._initParticleSize(sizeData.gradientXMax), this._initParticleSize(sizeData.gradientYMax), this._initParticleSize(sizeData.gradientZMax));\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tsize = GradientSize.createByRandomTwoGradient(this._initParticleSize(sizeData.gradientMin), this._initParticleSize(sizeData.gradientMax));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tvar sizeOverLifetime: SizeOverLifetime = new SizeOverLifetime(size);\r\n\t\t\t\tthis._parseModule(sizeOverLifetime, sizeOverLifetimeData);\r\n\t\t\t\tparticleSystem.sizeOverLifetime = sizeOverLifetime;\r\n\t\t\t}\r\n\r\n\t\t\t//RotationOverLifetime\r\n\t\t\tvar rotationOverLifetimeData: any = data.rotationOverLifetime;\r\n\t\t\tif (rotationOverLifetimeData) {\r\n\t\t\t\tvar angularVelocityData: any = rotationOverLifetimeData.angularVelocity;\r\n\t\t\t\tvar angularVelocity: GradientAngularVelocity;\r\n\t\t\t\tswitch (angularVelocityData.type) {\r\n\t\t\t\t\tcase 0:\r\n\t\t\t\t\t\tif (angularVelocityData.separateAxes) {\r\n\t\t\t\t\t\t\tvar conSep: any[] = angularVelocityData.constantSeparate;\r\n\t\t\t\t\t\t\tangularVelocity = GradientAngularVelocity.createByConstantSeparate(conSep ? new Vector3(conSep[0], conSep[1], conSep[2]) : new Vector3(0, 0, Math.PI / 4));\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tangularVelocity = GradientAngularVelocity.createByConstant(angularVelocityData.constant || Math.PI / 4);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\tif (angularVelocityData.separateAxes) {\r\n\t\t\t\t\t\t\tangularVelocity = GradientAngularVelocity.createByGradientSeparate(this._initParticleRotation(angularVelocityData.gradientX), this._initParticleRotation(angularVelocityData.gradientY), this._initParticleRotation(angularVelocityData.gradientZ));\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tangularVelocity = GradientAngularVelocity.createByGradient(this._initParticleRotation(angularVelocityData.gradient));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\tif (angularVelocityData.separateAxes) {\r\n\t\t\t\t\t\t\tvar minSep: any[] = angularVelocityData.constantMinSeparate;//TODO:Y是否要取负数\r\n\t\t\t\t\t\t\tvar maxSep: any[] = angularVelocityData.constantMaxSeparate;//TODO:Y是否要取负数\r\n\t\t\t\t\t\t\tangularVelocity = GradientAngularVelocity.createByRandomTwoConstantSeparate(minSep ? new Vector3(minSep[0], minSep[1], minSep[2]) : new Vector3(0, 0, 0), maxSep ? new Vector3(maxSep[0], maxSep[1], maxSep[2]) : new Vector3(0, 0, Math.PI / 4));\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tangularVelocity = GradientAngularVelocity.createByRandomTwoConstant(angularVelocityData.constantMin || 0, angularVelocityData.constantMax || Math.PI / 4);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 3:\r\n\t\t\t\t\t\tif (angularVelocityData.separateAxes) {\r\n\t\t\t\t\t\t\t//TODO:待补充\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tangularVelocity = GradientAngularVelocity.createByRandomTwoGradient(this._initParticleRotation(angularVelocityData.gradientMin), this._initParticleRotation(angularVelocityData.gradientMax));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tvar rotationOverLifetime: RotationOverLifetime = new RotationOverLifetime(angularVelocity);\r\n\t\t\t\tthis._parseModule(rotationOverLifetime, rotationOverLifetimeData);\r\n\t\t\t\tparticleSystem.rotationOverLifetime = rotationOverLifetime;\r\n\t\t\t}\r\n\r\n\t\t\t//TextureSheetAnimation\r\n\t\t\tvar textureSheetAnimationData: any = data.textureSheetAnimation;\r\n\t\t\tif (textureSheetAnimationData) {\r\n\t\t\t\tvar frameData: any = textureSheetAnimationData.frame;\r\n\t\t\t\tvar frameOverTime: FrameOverTime;\r\n\t\t\t\tswitch (frameData.type) {\r\n\t\t\t\t\tcase 0:\r\n\t\t\t\t\t\tframeOverTime = FrameOverTime.createByConstant(frameData.constant);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\tframeOverTime = FrameOverTime.createByOverTime(this._initParticleFrame(frameData.overTime));\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\tframeOverTime = FrameOverTime.createByRandomTwoConstant(frameData.constantMin, frameData.constantMax);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 3:\r\n\t\t\t\t\t\tframeOverTime = FrameOverTime.createByRandomTwoOverTime(this._initParticleFrame(frameData.overTimeMin), this._initParticleFrame(frameData.overTimeMax));\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tvar startFrameData: any = textureSheetAnimationData.startFrame;\r\n\t\t\t\tvar startFrame: StartFrame;\r\n\t\t\t\tswitch (startFrameData.type) {\r\n\t\t\t\t\tcase 0:\r\n\t\t\t\t\t\tstartFrame = StartFrame.createByConstant(startFrameData.constant);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\tstartFrame = StartFrame.createByRandomTwoConstant(startFrameData.constantMin, startFrameData.constantMax);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tvar textureSheetAnimation: TextureSheetAnimation = new TextureSheetAnimation(frameOverTime, startFrame);\r\n\t\t\t\tthis._parseModule(textureSheetAnimation, textureSheetAnimationData);\r\n\t\t\t\tparticleSystem.textureSheetAnimation = textureSheetAnimation;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {//legacy\r\n\t\t\tthis._parseOld(data);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * <p>销毁此对象。</p>\r\n\t * @param\tdestroyChild 是否同时销毁子节点，若值为true,则销毁子节点，否则不销毁子节点。\r\n\t * @override\r\n\t */\r\n\tdestroy(destroyChild: boolean = true): void {\r\n\t\tif (this._destroyed)\r\n\t\t\treturn;\r\n\t\tsuper.destroy(destroyChild);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprotected _create(): Node {\r\n\t\treturn new Sprite3D();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * @internal\r\n\t */\r\n\tprivate _parseOld(data: any): void {\r\n\t\tconst anglelToRad: number = Math.PI / 180.0;\r\n\t\tvar i: number, n: number;\r\n\r\n\t\t//Render\r\n\t\tvar particleRender: ShurikenParticleRenderer = this.particleRenderer;\r\n\t\tvar material: ShurikenParticleMaterial;\r\n\r\n\t\tvar materialData: any = data.material;\r\n\t\t(materialData) && (material = Loader.getRes(materialData.path));\r\n\r\n\t\tparticleRender.sharedMaterial = material;\r\n\t\tvar meshPath: string = data.meshPath;\r\n\t\t(meshPath) && (particleRender.mesh = Loader.getRes(meshPath));\r\n\r\n\t\tparticleRender.renderMode = data.renderMode;\r\n\t\tparticleRender.stretchedBillboardCameraSpeedScale = data.stretchedBillboardCameraSpeedScale;\r\n\t\tparticleRender.stretchedBillboardSpeedScale = data.stretchedBillboardSpeedScale;\r\n\t\tparticleRender.stretchedBillboardLengthScale = data.stretchedBillboardLengthScale;\r\n\t\tparticleRender.sortingFudge = data.sortingFudge ? data.sortingFudge : 0.0;\r\n\r\n\t\t//particleSystem\r\n\t\tvar particleSystem: ShurikenParticleSystem = this.particleSystem;\r\n\t\tparticleSystem.isPerformanceMode = data.isPerformanceMode;\r\n\r\n\t\tparticleSystem.duration = data.duration;\r\n\t\tparticleSystem.looping = data.looping;\r\n\t\tparticleSystem.prewarm = data.prewarm;\r\n\r\n\t\tparticleSystem.startDelayType = data.startDelayType;\r\n\t\tparticleSystem.startDelay = data.startDelay;\r\n\t\tparticleSystem.startDelayMin = data.startDelayMin;\r\n\t\tparticleSystem.startDelayMax = data.startDelayMax;\r\n\r\n\t\tparticleSystem.startLifetimeType = data.startLifetimeType;\r\n\t\tparticleSystem.startLifetimeConstant = data.startLifetimeConstant;\r\n\t\tparticleSystem.startLifeTimeGradient = ShuriKenParticle3D._initStartLife(data.startLifetimeGradient);\r\n\t\tparticleSystem.startLifetimeConstantMin = data.startLifetimeConstantMin;\r\n\t\tparticleSystem.startLifetimeConstantMax = data.startLifetimeConstantMax;\r\n\t\tparticleSystem.startLifeTimeGradientMin = ShuriKenParticle3D._initStartLife(data.startLifetimeGradientMin);\r\n\t\tparticleSystem.startLifeTimeGradientMax = ShuriKenParticle3D._initStartLife(data.startLifetimeGradientMax);\r\n\r\n\t\tparticleSystem.startSpeedType = data.startSpeedType;\r\n\t\tparticleSystem.startSpeedConstant = data.startSpeedConstant;\r\n\t\tparticleSystem.startSpeedConstantMin = data.startSpeedConstantMin;\r\n\t\tparticleSystem.startSpeedConstantMax = data.startSpeedConstantMax;\r\n\r\n\t\t//parse Drag TODO:\r\n\r\n\t\tparticleSystem.threeDStartSize = data.threeDStartSize;\r\n\t\tparticleSystem.startSizeType = data.startSizeType;\r\n\t\tparticleSystem.startSizeConstant = data.startSizeConstant;\r\n\t\tvar startSizeConstantSeparateArray: any[] = data.startSizeConstantSeparate;\r\n\t\tvar startSizeConstantSeparateElement: Vector3 = particleSystem.startSizeConstantSeparate;\r\n\t\tstartSizeConstantSeparateElement.x = startSizeConstantSeparateArray[0];\r\n\t\tstartSizeConstantSeparateElement.y = startSizeConstantSeparateArray[1];\r\n\t\tstartSizeConstantSeparateElement.z = startSizeConstantSeparateArray[2];\r\n\t\tparticleSystem.startSizeConstantMin = data.startSizeConstantMin;\r\n\t\tparticleSystem.startSizeConstantMax = data.startSizeConstantMax;\r\n\t\tvar startSizeConstantMinSeparateArray: any[] = data.startSizeConstantMinSeparate;\r\n\t\tvar startSizeConstantMinSeparateElement: Vector3 = particleSystem.startSizeConstantMinSeparate;\r\n\t\tstartSizeConstantMinSeparateElement.x = startSizeConstantMinSeparateArray[0];\r\n\t\tstartSizeConstantMinSeparateElement.y = startSizeConstantMinSeparateArray[1];\r\n\t\tstartSizeConstantMinSeparateElement.z = startSizeConstantMinSeparateArray[2];\r\n\t\tvar startSizeConstantMaxSeparateArray: any[] = data.startSizeConstantMaxSeparate;\r\n\t\tvar startSizeConstantMaxSeparateElement: Vector3 = particleSystem.startSizeConstantMaxSeparate;\r\n\t\tstartSizeConstantMaxSeparateElement.x = startSizeConstantMaxSeparateArray[0];\r\n\t\tstartSizeConstantMaxSeparateElement.y = startSizeConstantMaxSeparateArray[1];\r\n\t\tstartSizeConstantMaxSeparateElement.z = startSizeConstantMaxSeparateArray[2];\r\n\r\n\t\tparticleSystem.threeDStartRotation = data.threeDStartRotation;\r\n\t\tparticleSystem.startRotationType = data.startRotationType;\r\n\t\tparticleSystem.startRotationConstant = data.startRotationConstant * anglelToRad;\r\n\t\tvar startRotationConstantSeparateArray: any[] = data.startRotationConstantSeparate;\r\n\t\tvar startRotationConstantSeparateElement: Vector3 = particleSystem.startRotationConstantSeparate;\r\n\t\tstartRotationConstantSeparateElement.x = startRotationConstantSeparateArray[0] * anglelToRad;\r\n\t\tstartRotationConstantSeparateElement.y = startRotationConstantSeparateArray[1] * anglelToRad;\r\n\t\tstartRotationConstantSeparateElement.z = startRotationConstantSeparateArray[2] * anglelToRad;\r\n\t\tparticleSystem.startRotationConstantMin = data.startRotationConstantMin * anglelToRad;\r\n\t\tparticleSystem.startRotationConstantMax = data.startRotationConstantMax * anglelToRad;\r\n\t\tvar startRotationConstantMinSeparateArray: any[] = data.startRotationConstantMinSeparate;\r\n\t\tvar startRotationConstantMinSeparateElement: Vector3 = particleSystem.startRotationConstantMinSeparate;\r\n\t\tstartRotationConstantMinSeparateElement.x = startRotationConstantMinSeparateArray[0] * anglelToRad;\r\n\t\tstartRotationConstantMinSeparateElement.y = startRotationConstantMinSeparateArray[1] * anglelToRad;\r\n\t\tstartRotationConstantMinSeparateElement.z = startRotationConstantMinSeparateArray[2] * anglelToRad;\r\n\t\tvar startRotationConstantMaxSeparateArray: any[] = data.startRotationConstantMaxSeparate;\r\n\t\tvar startRotationConstantMaxSeparateElement: Vector3 = particleSystem.startRotationConstantMaxSeparate;\r\n\t\tstartRotationConstantMaxSeparateElement.x = startRotationConstantMaxSeparateArray[0] * anglelToRad;\r\n\t\tstartRotationConstantMaxSeparateElement.y = startRotationConstantMaxSeparateArray[1] * anglelToRad;\r\n\t\tstartRotationConstantMaxSeparateElement.z = startRotationConstantMaxSeparateArray[2] * anglelToRad;\r\n\r\n\t\tparticleSystem.randomizeRotationDirection = data.randomizeRotationDirection;\r\n\r\n\t\tparticleSystem.startColorType = data.startColorType;\r\n\t\tvar startColorConstantArray: any[] = data.startColorConstant;\r\n\t\tvar startColorConstantElement: Vector4 = particleSystem.startColorConstant;\r\n\t\tstartColorConstantElement.x = startColorConstantArray[0];\r\n\t\tstartColorConstantElement.y = startColorConstantArray[1];\r\n\t\tstartColorConstantElement.z = startColorConstantArray[2];\r\n\t\tstartColorConstantElement.w = startColorConstantArray[3];\r\n\t\tvar startColorConstantMinArray: any[] = data.startColorConstantMin;\r\n\t\tvar startColorConstantMinElement: Vector4 = particleSystem.startColorConstantMin;\r\n\t\tstartColorConstantMinElement.x = startColorConstantMinArray[0];\r\n\t\tstartColorConstantMinElement.y = startColorConstantMinArray[1];\r\n\t\tstartColorConstantMinElement.z = startColorConstantMinArray[2];\r\n\t\tstartColorConstantMinElement.w = startColorConstantMinArray[3];\r\n\t\tvar startColorConstantMaxArray: any[] = data.startColorConstantMax;\r\n\t\tvar startColorConstantMaxElement: Vector4 = particleSystem.startColorConstantMax;\r\n\t\tstartColorConstantMaxElement.x = startColorConstantMaxArray[0];\r\n\t\tstartColorConstantMaxElement.y = startColorConstantMaxArray[1];\r\n\t\tstartColorConstantMaxElement.z = startColorConstantMaxArray[2];\r\n\t\tstartColorConstantMaxElement.w = startColorConstantMaxArray[3];\r\n\r\n\t\tparticleSystem.gravityModifier = data.gravityModifier;\r\n\r\n\t\tparticleSystem.simulationSpace = data.simulationSpace;\r\n\t\t(data.simulationSpeed !== undefined) && (particleSystem.simulationSpeed = data.simulationSpeed);\r\n\r\n\t\tparticleSystem.scaleMode = data.scaleMode;\r\n\r\n\t\tparticleSystem.playOnAwake = data.playOnAwake;\r\n\t\tparticleSystem.maxParticles = data.maxParticles;\r\n\r\n\t\tvar autoRandomSeed: any = data.autoRandomSeed;\r\n\t\t(autoRandomSeed != null) && (particleSystem.autoRandomSeed = autoRandomSeed);\r\n\t\tvar randomSeed: any = data.randomSeed;\r\n\t\t(randomSeed != null) && (particleSystem.randomSeed[0] = randomSeed);\r\n\r\n\t\t//Emission\r\n\t\tvar emissionData: any = data.emission;\r\n\t\tvar emission: Emission = particleSystem.emission;\r\n\t\tif (emissionData) {\r\n\t\t\temission.emissionRate = emissionData.emissionRate;\r\n\t\t\tvar burstsData: any[] = emissionData.bursts;\r\n\t\t\tif (burstsData)\r\n\t\t\t\tfor (i = 0, n = burstsData.length; i < n; i++) {\r\n\t\t\t\t\tvar brust: any = burstsData[i];\r\n\t\t\t\t\temission.addBurst(new Burst(brust.time, brust.min, brust.max));\r\n\t\t\t\t}\r\n\t\t\temission.enable = emissionData.enable;\r\n\t\t} else {\r\n\t\t\temission.enable = false;\r\n\t\t}\r\n\r\n\t\t//Shape\r\n\t\tvar shapeData: any = data.shape;\r\n\t\tif (shapeData) {\r\n\t\t\tvar shape: BaseShape;\r\n\t\t\tswitch (shapeData.shapeType) {\r\n\t\t\t\tcase 0:\r\n\t\t\t\t\tvar sphereShape: SphereShape;\r\n\t\t\t\t\tshape = sphereShape = new SphereShape();\r\n\t\t\t\t\tsphereShape.radius = shapeData.sphereRadius;\r\n\t\t\t\t\tsphereShape.emitFromShell = shapeData.sphereEmitFromShell;\r\n\t\t\t\t\tsphereShape.randomDirection = shapeData.sphereRandomDirection;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\tvar hemiSphereShape: HemisphereShape;\r\n\t\t\t\t\tshape = hemiSphereShape = new HemisphereShape();\r\n\t\t\t\t\themiSphereShape.radius = shapeData.hemiSphereRadius;\r\n\t\t\t\t\themiSphereShape.emitFromShell = shapeData.hemiSphereEmitFromShell;\r\n\t\t\t\t\themiSphereShape.randomDirection = shapeData.hemiSphereRandomDirection;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\tvar coneShape: ConeShape;\r\n\t\t\t\t\tshape = coneShape = new ConeShape();\r\n\t\t\t\t\tconeShape.angle = shapeData.coneAngle * anglelToRad;\r\n\t\t\t\t\tconeShape.radius = shapeData.coneRadius;\r\n\t\t\t\t\tconeShape.length = shapeData.coneLength;\r\n\t\t\t\t\tconeShape.emitType = shapeData.coneEmitType;\r\n\t\t\t\t\tconeShape.randomDirection = shapeData.coneRandomDirection;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 3:\r\n\t\t\t\t\tvar boxShape: BoxShape;\r\n\t\t\t\t\tshape = boxShape = new BoxShape();\r\n\t\t\t\t\tboxShape.x = shapeData.boxX;\r\n\t\t\t\t\tboxShape.y = shapeData.boxY;\r\n\t\t\t\t\tboxShape.z = shapeData.boxZ;\r\n\t\t\t\t\tboxShape.randomDirection = shapeData.boxRandomDirection;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 7:\r\n\t\t\t\t\tvar circleShape: CircleShape;\r\n\t\t\t\t\tshape = circleShape = new CircleShape();\r\n\t\t\t\t\tcircleShape.radius = shapeData.circleRadius;\r\n\t\t\t\t\tcircleShape.arc = shapeData.circleArc * anglelToRad;\r\n\t\t\t\t\tcircleShape.emitFromEdge = shapeData.circleEmitFromEdge;\r\n\t\t\t\t\tcircleShape.randomDirection = shapeData.circleRandomDirection;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t/**\r\n\t\t\t\t * ------------------------临时调整，待日后完善-------------------------------------\r\n\t\t\t\t */\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tvar tempShape: CircleShape;\r\n\t\t\t\t\tshape = tempShape = new CircleShape();\r\n\t\t\t\t\ttempShape.radius = shapeData.circleRadius;\r\n\t\t\t\t\ttempShape.arc = shapeData.circleArc * anglelToRad;\r\n\t\t\t\t\ttempShape.emitFromEdge = shapeData.circleEmitFromEdge;\r\n\t\t\t\t\ttempShape.randomDirection = shapeData.circleRandomDirection;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tshape.enable = shapeData.enable;\r\n\t\t\tparticleSystem.shape = shape;\r\n\t\t}\r\n\r\n\t\t//VelocityOverLifetime\r\n\t\tvar velocityOverLifetimeData: any = data.velocityOverLifetime;\r\n\t\tif (velocityOverLifetimeData) {\r\n\t\t\tvar velocityData: any = velocityOverLifetimeData.velocity;\r\n\t\t\tvar velocity: GradientVelocity;\r\n\t\t\tswitch (velocityData.type) {\r\n\t\t\t\tcase 0:\r\n\t\t\t\t\tvar constantData: any[] = velocityData.constant;\r\n\t\t\t\t\tvelocity = GradientVelocity.createByConstant(new Vector3(constantData[0], constantData[1], constantData[2]));\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\tvelocity = GradientVelocity.createByGradient(this._initParticleVelocity(velocityData.gradientX), this._initParticleVelocity(velocityData.gradientY), this._initParticleVelocity(velocityData.gradientZ));\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\tvar constantMinData: any[] = velocityData.constantMin;\r\n\t\t\t\t\tvar constantMaxData: any[] = velocityData.constantMax;\r\n\t\t\t\t\tvelocity = GradientVelocity.createByRandomTwoConstant(new Vector3(constantMinData[0], constantMinData[1], constantMinData[2]), new Vector3(constantMaxData[0], constantMaxData[1], constantMaxData[2]));\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 3:\r\n\t\t\t\t\tvelocity = GradientVelocity.createByRandomTwoGradient(this._initParticleVelocity(velocityData.gradientXMin), this._initParticleVelocity(velocityData.gradientXMax), this._initParticleVelocity(velocityData.gradientYMin), this._initParticleVelocity(velocityData.gradientYMax), this._initParticleVelocity(velocityData.gradientZMin), this._initParticleVelocity(velocityData.gradientZMax));\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tvar velocityOverLifetime: VelocityOverLifetime = new VelocityOverLifetime(velocity);\r\n\t\t\tvelocityOverLifetime.space = velocityOverLifetimeData.space;\r\n\t\t\tvelocityOverLifetime.enable = velocityOverLifetimeData.enable;\r\n\t\t\tparticleSystem.velocityOverLifetime = velocityOverLifetime;\r\n\t\t}\r\n\r\n\t\t//ColorOverLifetime\r\n\t\tvar colorOverLifetimeData: any = data.colorOverLifetime;\r\n\t\tif (colorOverLifetimeData) {\r\n\t\t\tvar colorData: any = colorOverLifetimeData.color;\r\n\t\t\tvar color: GradientColor;\r\n\t\t\tswitch (colorData.type) {\r\n\t\t\t\tcase 0:\r\n\t\t\t\t\tvar constColorData: any[] = colorData.constant;\r\n\t\t\t\t\tcolor = GradientColor.createByConstant(new Vector4(constColorData[0], constColorData[1], constColorData[2], constColorData[3]));\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\tcolor = GradientColor.createByGradient(this._initParticleColor(colorData.gradient));\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\tvar minConstColorData: any[] = colorData.constantMin;\r\n\t\t\t\t\tvar maxConstColorData: any[] = colorData.constantMax;\r\n\t\t\t\t\tcolor = GradientColor.createByRandomTwoConstant(new Vector4(minConstColorData[0], minConstColorData[1], minConstColorData[2], minConstColorData[3]), new Vector4(maxConstColorData[0], maxConstColorData[1], maxConstColorData[2], maxConstColorData[3]));\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 3:\r\n\t\t\t\t\tcolor = GradientColor.createByRandomTwoGradient(this._initParticleColor(colorData.gradientMin), this._initParticleColor(colorData.gradientMax));\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tvar colorOverLifetime: ColorOverLifetime = new ColorOverLifetime(color);\r\n\t\t\tcolorOverLifetime.enable = colorOverLifetimeData.enable;\r\n\t\t\tparticleSystem.colorOverLifetime = colorOverLifetime;\r\n\t\t}\r\n\r\n\t\t//SizeOverLifetime\r\n\t\tvar sizeOverLifetimeData: any = data.sizeOverLifetime;\r\n\t\tif (sizeOverLifetimeData) {\r\n\t\t\tvar sizeData: any = sizeOverLifetimeData.size;\r\n\t\t\tvar size: GradientSize;\r\n\t\t\tswitch (sizeData.type) {\r\n\t\t\t\tcase 0:\r\n\t\t\t\t\tif (sizeData.separateAxes) {\r\n\t\t\t\t\t\tsize = GradientSize.createByGradientSeparate(this._initParticleSize(sizeData.gradientX), this._initParticleSize(sizeData.gradientY), this._initParticleSize(sizeData.gradientZ));\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tsize = GradientSize.createByGradient(this._initParticleSize(sizeData.gradient));\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\tif (sizeData.separateAxes) {\r\n\t\t\t\t\t\tvar constantMinSeparateData: any[] = sizeData.constantMinSeparate;\r\n\t\t\t\t\t\tvar constantMaxSeparateData: any[] = sizeData.constantMaxSeparate;\r\n\t\t\t\t\t\tsize = GradientSize.createByRandomTwoConstantSeparate(new Vector3(constantMinSeparateData[0], constantMinSeparateData[1], constantMinSeparateData[2]), new Vector3(constantMaxSeparateData[0], constantMaxSeparateData[1], constantMaxSeparateData[2]));\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tsize = GradientSize.createByRandomTwoConstant(sizeData.constantMin, sizeData.constantMax);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\tif (sizeData.separateAxes) {\r\n\t\t\t\t\t\tsize = GradientSize.createByRandomTwoGradientSeparate(this._initParticleSize(sizeData.gradientXMin), this._initParticleSize(sizeData.gradientYMin), this._initParticleSize(sizeData.gradientZMin), this._initParticleSize(sizeData.gradientXMax), this._initParticleSize(sizeData.gradientYMax), this._initParticleSize(sizeData.gradientZMax));\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tsize = GradientSize.createByRandomTwoGradient(this._initParticleSize(sizeData.gradientMin), this._initParticleSize(sizeData.gradientMax));\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tvar sizeOverLifetime: SizeOverLifetime = new SizeOverLifetime(size);\r\n\t\t\tsizeOverLifetime.enable = sizeOverLifetimeData.enable;\r\n\t\t\tparticleSystem.sizeOverLifetime = sizeOverLifetime;\r\n\t\t}\r\n\r\n\t\t//RotationOverLifetime\r\n\t\tvar rotationOverLifetimeData: any = data.rotationOverLifetime;\r\n\t\tif (rotationOverLifetimeData) {\r\n\t\t\tvar angularVelocityData: any = rotationOverLifetimeData.angularVelocity;\r\n\t\t\tvar angularVelocity: GradientAngularVelocity;\r\n\t\t\tswitch (angularVelocityData.type) {\r\n\t\t\t\tcase 0:\r\n\t\t\t\t\tif (angularVelocityData.separateAxes) {\r\n\t\t\t\t\t\tvar conSep: any[] = angularVelocityData.constantSeparate;\r\n\t\t\t\t\t\tangularVelocity = GradientAngularVelocity.createByConstantSeparate(new Vector3(conSep[0] * anglelToRad, conSep[1] * anglelToRad, conSep[2] * anglelToRad));\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tangularVelocity = GradientAngularVelocity.createByConstant(angularVelocityData.constant * anglelToRad);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\tif (angularVelocityData.separateAxes) {\r\n\t\t\t\t\t\tangularVelocity = GradientAngularVelocity.createByGradientSeparate(this._initParticleRotation(angularVelocityData.gradientX), this._initParticleRotation(angularVelocityData.gradientY), this._initParticleRotation(angularVelocityData.gradientZ));\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tangularVelocity = GradientAngularVelocity.createByGradient(this._initParticleRotation(angularVelocityData.gradient));\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\tif (angularVelocityData.separateAxes) {\r\n\t\t\t\t\t\tvar minSep: any[] = angularVelocityData.constantMinSeparate;//TODO:Y是否要取负数\r\n\t\t\t\t\t\tvar maxSep: any[] = angularVelocityData.constantMaxSeparate;//TODO:Y是否要取负数\r\n\t\t\t\t\t\tangularVelocity = GradientAngularVelocity.createByRandomTwoConstantSeparate(new Vector3(minSep[0] * anglelToRad, minSep[1] * anglelToRad, minSep[2] * anglelToRad), new Vector3(maxSep[0] * anglelToRad, maxSep[1] * anglelToRad, maxSep[2] * anglelToRad));\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tangularVelocity = GradientAngularVelocity.createByRandomTwoConstant(angularVelocityData.constantMin * anglelToRad, angularVelocityData.constantMax * anglelToRad);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 3:\r\n\t\t\t\t\tif (angularVelocityData.separateAxes) {\r\n\t\t\t\t\t\t//TODO:待补充\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tangularVelocity = GradientAngularVelocity.createByRandomTwoGradient(this._initParticleRotation(angularVelocityData.gradientMin), this._initParticleRotation(angularVelocityData.gradientMax));\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tvar rotationOverLifetime: RotationOverLifetime = new RotationOverLifetime(angularVelocity);\r\n\t\t\trotationOverLifetime.enable = rotationOverLifetimeData.enable;\r\n\t\t\tparticleSystem.rotationOverLifetime = rotationOverLifetime;\r\n\t\t}\r\n\r\n\t\t//TextureSheetAnimation\r\n\t\tvar textureSheetAnimationData: any = data.textureSheetAnimation;\r\n\t\tif (textureSheetAnimationData) {\r\n\t\t\tvar frameData: any = textureSheetAnimationData.frame;\r\n\t\t\tvar frameOverTime: FrameOverTime;\r\n\t\t\tswitch (frameData.type) {\r\n\t\t\t\tcase 0:\r\n\t\t\t\t\tframeOverTime = FrameOverTime.createByConstant(frameData.constant);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\tframeOverTime = FrameOverTime.createByOverTime(this._initParticleFrame(frameData.overTime));\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\tframeOverTime = FrameOverTime.createByRandomTwoConstant(frameData.constantMin, frameData.constantMax);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 3:\r\n\t\t\t\t\tframeOverTime = FrameOverTime.createByRandomTwoOverTime(this._initParticleFrame(frameData.overTimeMin), this._initParticleFrame(frameData.overTimeMax));\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tvar startFrameData: any = textureSheetAnimationData.startFrame;\r\n\t\t\tvar startFrame: StartFrame;\r\n\t\t\tswitch (startFrameData.type) {\r\n\t\t\t\tcase 0:\r\n\t\t\t\t\tstartFrame = StartFrame.createByConstant(startFrameData.constant);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\tstartFrame = StartFrame.createByRandomTwoConstant(startFrameData.constantMin, startFrameData.constantMax);\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tvar textureSheetAnimation: TextureSheetAnimation = new TextureSheetAnimation(frameOverTime, startFrame);\r\n\t\t\ttextureSheetAnimation.enable = textureSheetAnimationData.enable;\r\n\t\t\tvar tilesData: any[] = textureSheetAnimationData.tiles;\r\n\t\t\ttextureSheetAnimation.tiles = new Vector2(tilesData[0], tilesData[1]);\r\n\t\t\ttextureSheetAnimation.type = textureSheetAnimationData.type;\r\n\t\t\ttextureSheetAnimation.randomRow = textureSheetAnimationData.randomRow;\r\n\t\t\tvar rowIndex: any = textureSheetAnimationData.rowIndex;\r\n\t\t\t(rowIndex !== undefined) && (textureSheetAnimation.rowIndex = rowIndex);\r\n\t\t\ttextureSheetAnimation.cycles = textureSheetAnimationData.cycles;\r\n\t\t\tparticleSystem.textureSheetAnimation = textureSheetAnimation;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * @internal\r\n\t */\r\n\tprivate _initParticleColor(gradientColorData: any, maxkeyCount: number = 4): Gradient {\r\n\t\tvar gradientColor: Gradient = new Gradient(maxkeyCount, maxkeyCount);\r\n\t\tif (!gradientColorData) {\r\n\t\t\tgradientColor.addColorAlpha(0, 1);\r\n\t\t\tgradientColor.addColorAlpha(1, 1);\r\n\t\t\tgradientColor.addColorRGB(0, new Color(1.0, 1.0, 1.0, 1.0));\r\n\t\t\tgradientColor.addColorRGB(1, new Color(1.0, 1.0, 1.0, 1.0));\r\n\t\t}\r\n\t\telse {\r\n\t\t\tvar alphasData: any[] = gradientColorData.alphas;\r\n\t\t\tvar i: number, n: number;\r\n\t\t\tif (!alphasData) {//兼容默认值\r\n\t\t\t\tgradientColor.addColorAlpha(0, 1);\r\n\t\t\t\tgradientColor.addColorAlpha(1, 1);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tfor (i = 0, n = alphasData.length; i < n; i++) {\r\n\t\t\t\t\tif (i == maxkeyCount - 1 && n > maxkeyCount) {\r\n\t\t\t\t\t\ti = n - 1;\r\n\t\t\t\t\t\tconsole.warn(`GradientDataColor warning:alpha data length is large than ${maxkeyCount}, will ignore the middle data.`);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvar alphaData: any = alphasData[i];\r\n\t\t\t\t\tgradientColor.addColorAlpha(alphaData.key, alphaData.value);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tvar rgbsData: any[] = gradientColorData.rgbs;\r\n\t\t\tif (!rgbsData) {//兼容默认值\r\n\t\t\t\tgradientColor.addColorRGB(0, new Color(1.0, 1.0, 1.0, 1.0));\r\n\t\t\t\tgradientColor.addColorRGB(1, new Color(1.0, 1.0, 1.0, 1.0));\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tfor (i = 0, n = rgbsData.length; i < n; i++) {\r\n\t\t\t\t\tif (i == maxkeyCount - 1 && n > maxkeyCount) {\r\n\t\t\t\t\t\ti = n - 1;\r\n\t\t\t\t\t\tconsole.warn(`GradientDataColor warning:rgb data length is large than ${maxkeyCount}, will ignore the middle data.`);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvar rgbData: any = rgbsData[i];\r\n\t\t\t\t\tvar rgbValue: any[] = rgbData.value;\r\n\t\t\t\t\tgradientColor.addColorRGB(rgbData.key, new Color(rgbValue[0], rgbValue[1], rgbValue[2], 1.0));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn gradientColor;\r\n\t}\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * @internal\r\n\t */\r\n\tprivate _initParticleFrame(overTimeFramesData: any): GradientDataInt {\r\n\t\tvar overTimeFrame: GradientDataInt = new GradientDataInt();\r\n\t\tif (overTimeFramesData) {\r\n\t\t\tvar framesData: any[] = overTimeFramesData.frames;\r\n\t\t\tfor (var i: number = 0, n: number = framesData.length; i < n; i++) {\r\n\t\t\t\tvar frameData: any = framesData[i];\r\n\t\t\t\toverTimeFrame.add(frameData.key, frameData.value);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\toverTimeFrame.add(0, 0);\r\n\t\t\toverTimeFrame.add(1, 1);\r\n\t\t}\r\n\r\n\t\treturn overTimeFrame;\r\n\t}\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * @internal\r\n\t */\r\n\tprivate static _initStartLife(gradientData: any): GradientDataNumber {\r\n\t\tvar gradient: GradientDataNumber = new GradientDataNumber();\r\n\t\tvar startLifetimesData: any[] = gradientData.startLifetimes;\r\n\t\tfor (var i: number = 0, n: number = startLifetimesData.length; i < n; i++) {\r\n\t\t\tvar valueData: any = startLifetimesData[i];\r\n\t\t\tgradient.add(valueData.key, valueData.value);\r\n\t\t}\r\n\t\treturn gradient\r\n\t}\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * @internal\r\n\t */\r\n\tprivate _initParticleVelocity(gradientData: any): GradientDataNumber {\r\n\t\tvar gradient: GradientDataNumber = new GradientDataNumber();\r\n\t\tvar velocitysData: any[] = gradientData.velocitys;\r\n\t\tfor (var i: number = 0, n: number = velocitysData.length; i < n; i++) {\r\n\t\t\tvar valueData: any = velocitysData[i];\r\n\t\t\tgradient.add(valueData.key, valueData.value);\r\n\t\t}\r\n\t\treturn gradient;\r\n\t}\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * @internal\r\n\t */\r\n\tprivate _initParticleSize(gradientSizeData: any): GradientDataNumber {\r\n\t\tvar gradientSize: GradientDataNumber = new GradientDataNumber();\r\n\t\tif (gradientSizeData) {\r\n\t\t\tvar sizesData: any[] = gradientSizeData.sizes;\r\n\t\t\tfor (var i: number = 0, n: number = sizesData.length; i < n; i++) {\r\n\t\t\t\tvar valueData: any = sizesData[i];\r\n\t\t\t\tgradientSize.add(valueData.key, valueData.value);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tgradientSize.add(0, 0);\r\n\t\t\tgradientSize.add(1, 1);\r\n\t\t}\r\n\t\treturn gradientSize;\r\n\t}\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * @internal\r\n\t */\r\n\tprivate _initParticleRotation(gradientData: any): GradientDataNumber {\r\n\t\tvar gradient: GradientDataNumber = new GradientDataNumber();\r\n\t\tvar angularVelocitysData: any[] = gradientData.angularVelocitys;\r\n\t\tfor (var i: number = 0, n: number = angularVelocitysData.length; i < n; i++) {\r\n\t\t\tvar valueData: any = angularVelocitysData[i];\r\n\t\t\tgradient.add(valueData.key, valueData.value / 180.0 * Math.PI);\r\n\t\t}\r\n\t\treturn gradient;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { ShaderDefine } from \"../../RenderEngine/RenderShader/ShaderDefine\";\r\n\r\nexport class SkinnedMeshSprite3DShaderDeclaration {\r\n\t/**精灵级着色器宏定义,蒙皮动画。*/\r\n\tstatic SHADERDEFINE_BONE: ShaderDefine;\r\n\tstatic SHADERDEFINE_SIMPLEBONE:ShaderDefine;\r\n}","import { LayaGL } from \"../../../layagl/LayaGL\";\r\nimport { IRenderContext3D } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/IRenderContext3D\";\r\nimport { SkinRenderElementOBJ } from \"../../RenderObjs/RenderObj/SkinRenderElementOBJ\";\r\nimport { SkinnedMeshRenderer } from \"../SkinnedMeshRenderer\";\r\nimport { RenderElement } from \"./RenderElement\"\r\n/**\r\n * @internal\r\n */\r\nexport class SkinRenderElement extends RenderElement{\r\n\t/**\r\n\t * 可提交底层的渲染节点\r\n\t */\r\n\t_renderElementOBJ:SkinRenderElementOBJ;\r\n\r\n\r\n    /**@internal */\r\n\tset render(value:SkinnedMeshRenderer){\r\n\t\tthis._baseRender = value;\r\n\t\tthis._renderElementOBJ._renderShaderData = value._shaderValues;\r\n\t}\r\n\r\n    get render():SkinnedMeshRenderer{\r\n\t\treturn this._baseRender as SkinnedMeshRenderer;\r\n\t}\r\n\r\n    setSkinData(value:Float32Array[]){\r\n        this._renderElementOBJ.skinnedData = value;\r\n    }\r\n\r\n    constructor(){\r\n        super();\r\n    }\r\n\r\n    protected _createRenderElementOBJ(){\r\n\t\tthis._renderElementOBJ = LayaGL.renderOBJCreate.createSkinRenderElement() as SkinRenderElementOBJ;\r\n\t}\r\n\r\n    _render(context:IRenderContext3D): void {\r\n\t\tthis._renderElementOBJ._render(context);\r\n    }\r\n}","import { Event } from \"../../events/Event\";\r\nimport { Stat } from \"../../utils/Stat\";\r\nimport { Mesh, skinnedMatrixCache } from \"../resource/models/Mesh\";\r\nimport { SubMesh } from \"../resource/models/SubMesh\";\r\nimport { Utils3D } from \"../utils/Utils3D\";\r\nimport { MeshRenderer } from \"./MeshRenderer\";\r\nimport { Sprite3D } from \"./Sprite3D\";\r\nimport { Transform3D } from \"./Transform3D\";\r\nimport { RenderContext3D } from \"./render/RenderContext3D\";\r\nimport { SkinnedMeshSprite3DShaderDeclaration } from \"./SkinnedMeshSprite3DShaderDeclaration\";\r\nimport { Component } from \"../../components/Component\";\r\nimport { SkinRenderElement } from \"./render/SkinRenderElement\";\r\nimport { Material } from \"./material/Material\";\r\nimport { BlinnPhongMaterial } from \"./material/BlinnPhongMaterial\";\r\nimport { Scene3D } from \"./scene/Scene3D\";\r\nimport { Bounds } from \"../math/Bounds\";\r\nimport { Matrix4x4 } from \"../../maths/Matrix4x4\";\r\nimport { Vector3 } from \"../../maths/Vector3\";\r\nimport { BoundFrustum } from \"../math/BoundFrustum\";\r\n/**\r\n * <code>SkinMeshRenderer</code> 类用于蒙皮渲染器。\r\n */\r\nexport class SkinnedMeshRenderer extends MeshRenderer {\r\n\r\n    /**@internal */\r\n    protected _cacheMesh: Mesh;\r\n\r\n    _bones: Sprite3D[] = [];\r\n\r\n    /**@internal */\r\n    _renderElements: SkinRenderElement[];\r\n    /** @internal */\r\n    _skinnedData: any[];\r\n    /** @internal */\r\n    private _skinnedDataLoopMarks: Uint32Array;\r\n    /**@internal */\r\n    protected _localBounds: Bounds;\r\n    // /**@internal */\r\n    // protected _cacheAnimator: Animator;\r\n    /**@internal */\r\n    protected _cacheRootBone: Sprite3D;\r\n\r\n    /**@internal */\r\n    protected _inverseBindPosesBufferForNative: Float32Array = null;\r\n\r\n    /**@internal */\r\n    protected _skinnedMatrixCachesBufferForNative: Int32Array = null;\r\n    /**@internal */\r\n    protected _bonesTransformForNative: Transform3D[] = null;\r\n    /**\r\n     * 局部边界。\r\n     */\r\n    get localBounds(): Bounds {\r\n        return this._localBounds;\r\n    }\r\n\r\n    set localBounds(value: Bounds) {\r\n        this._localBounds = value;\r\n        this.geometryBounds = this._localBounds;\r\n    }\r\n\r\n    /**\r\n     * 根节点。\r\n     */\r\n    get rootBone(): Sprite3D {\r\n        return this._cacheRootBone;\r\n    }\r\n\r\n    set rootBone(value: Sprite3D) {\r\n        if (this._cacheRootBone != value) {\r\n            if (this._cacheRootBone)\r\n                this._cacheRootBone.transform.off(Event.TRANSFORM_CHANGED, this, this._onWorldMatNeedChange);\r\n            else\r\n                (this.owner as Sprite3D).transform.off(Event.TRANSFORM_CHANGED, this, this._onWorldMatNeedChange);\r\n\r\n            if (value)\r\n                value.transform.on(Event.TRANSFORM_CHANGED, this, this._onWorldMatNeedChange);\r\n            else\r\n                (this.owner as Sprite3D).transform.on(Event.TRANSFORM_CHANGED, this, this._onWorldMatNeedChange);\r\n\r\n            this._cacheRootBone = value;\r\n            this._onWorldMatNeedChange(Transform3D.TRANSFORM_WORLDPOSITION | Transform3D.TRANSFORM_WORLDQUATERNION | Transform3D.TRANSFORM_WORLDSCALE);\r\n\r\n            let count = this._renderElements.length;\r\n            for (var i: number = 0; i < count; i++) {\r\n                var renderElement: SkinRenderElement = this._renderElements[i];\r\n                renderElement.setTransform(value.transform);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 用于蒙皮的骨骼。\r\n     */\r\n    get bones(): Sprite3D[] {\r\n        return this._bones;\r\n    }\r\n\r\n    /**\r\n     * 创建一个 <code>SkinnedMeshRender</code> 实例。\r\n     */\r\n    constructor() {\r\n        super();\r\n        this._localBounds = new Bounds(Vector3.ZERO, Vector3.ZERO);\r\n        this._shaderValues.addDefine(SkinnedMeshSprite3DShaderDeclaration.SHADERDEFINE_BONE);\r\n    }\r\n\r\n\r\n\r\n\r\n    protected _computeSkinnedData(): void {\r\n        if (this._cacheMesh) {\r\n            var bindPoses: Matrix4x4[] = this._cacheMesh._inverseBindPoses;\r\n            var pathMarks: skinnedMatrixCache[] = this._cacheMesh._skinnedMatrixCaches;\r\n            for (var i: number = 0, n: number = this._cacheMesh.subMeshCount; i < n; i++) {\r\n                var subMeshBoneIndices: Uint16Array[] = ((<SubMesh>this._cacheMesh.getSubMesh(i)))._boneIndicesList;\r\n                var subData: Float32Array[] = this._skinnedData[i];\r\n                for (var j: number = 0, m: number = subMeshBoneIndices.length; j < m; j++) {\r\n                    var boneIndices: Uint16Array = subMeshBoneIndices[j];\r\n                    this._computeSubSkinnedData(bindPoses, boneIndices, subData[j], pathMarks);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _computeSubSkinnedData(bindPoses: Matrix4x4[], boneIndices: Uint16Array, data: Float32Array, matrixCaches: skinnedMatrixCache[]): void {\r\n        for (let k: number = 0, q: number = boneIndices.length; k < q; k++) {\r\n            let index: number = boneIndices[k];\r\n            if (this._skinnedDataLoopMarks[index] === Stat.loopCount) {\r\n                let c: skinnedMatrixCache = matrixCaches[index];\r\n                let preData: Float32Array = this._skinnedData[c.subMeshIndex][c.batchIndex];\r\n                let srcIndex: number = c.batchBoneIndex * 16;\r\n                let dstIndex: number = k * 16;\r\n                for (let d: number = 0; d < 16; d++)\r\n                    data[dstIndex + d] = preData[srcIndex + d];\r\n            } else {\r\n                let bone = this._bones[index];\r\n                if (bone)\r\n                    Utils3D._mulMatrixArray(bone.transform.worldMatrix.elements, bindPoses[index].elements, 0, data, k * 16);\r\n                this._skinnedDataLoopMarks[index] = Stat.loopCount;\r\n            }\r\n        }\r\n    }\r\n\r\n    protected _computeSkinnedDataForNative(): void {\r\n        if (this._cacheMesh) {\r\n            var bindPoses: Matrix4x4[] = this._cacheMesh._inverseBindPoses;\r\n            var pathMarks: skinnedMatrixCache[] = this._cacheMesh._skinnedMatrixCaches;\r\n            if (this._inverseBindPosesBufferForNative == null) {\r\n                this._inverseBindPosesBufferForNative = new Float32Array(bindPoses.length * 16);\r\n                var offset: number = 0;\r\n                for (var i: number = 0, n: number = bindPoses.length; i < n; i++) {\r\n                    this._inverseBindPosesBufferForNative.set(bindPoses[i].elements, offset);\r\n                    offset += 16;\r\n                }\r\n            }\r\n            if (this._skinnedMatrixCachesBufferForNative == null) {\r\n                this._skinnedMatrixCachesBufferForNative = new Int32Array(pathMarks.length * 3);\r\n                var j: number = 0;\r\n                for (var i: number = 0, n: number = pathMarks.length; i < n; i++) {\r\n                    if (!pathMarks[i]) {\r\n                        break;\r\n                    }\r\n                    this._skinnedMatrixCachesBufferForNative[j] = pathMarks[i].subMeshIndex;\r\n                    this._skinnedMatrixCachesBufferForNative[j + 1] = pathMarks[i].batchIndex;\r\n                    this._skinnedMatrixCachesBufferForNative[j + 2] = pathMarks[i].batchBoneIndex;\r\n                    j += 3;\r\n                }\r\n            }\r\n            if (this._bonesTransformForNative == null) {\r\n                this._bonesTransformForNative = [];\r\n                for (var i: number = 0, n: number = this._bones.length; i < n; i++) {\r\n                    let bone = this._bones[i];\r\n                    if (bone) {\r\n                        this._bonesTransformForNative[i] = (bone.transform as any)._nativeObj;\r\n                    }\r\n                    else {\r\n                        this._bonesTransformForNative[i] = null;\r\n                    }\r\n                }\r\n            }\r\n\r\n            for (var i: number = 0, n: number = this._cacheMesh.subMeshCount; i < n; i++) {\r\n                var subMeshBoneIndices: Uint16Array[] = ((<SubMesh>this._cacheMesh.getSubMesh(i)))._boneIndicesList;\r\n                var subData: Float32Array[] = this._skinnedData[i];\r\n                for (var j: number = 0, m: number = subMeshBoneIndices.length; j < m; j++) {\r\n                    var boneIndices: Uint16Array = subMeshBoneIndices[j];\r\n                    (window as any).conch.computeSubSkinnedDataForNative(this._inverseBindPosesBufferForNative, boneIndices, subData[j], this._skinnedMatrixCachesBufferForNative, this._bonesTransformForNative, this._skinnedDataLoopMarks, this._skinnedData);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @inheritDoc\r\n    * @internal\r\n    * @override\r\n    */\r\n    _needRender(boundFrustum: BoundFrustum, context: RenderContext3D): boolean {\r\n        if (!Stat.enableSkin)\r\n            return false;\r\n        return super._needRender(boundFrustum, context);\r\n    }\r\n\r\n    /**\r\n     *@inheritDoc\r\n     *@override\r\n     *@internal\r\n     */\r\n    _createRenderElement(): SkinRenderElement {\r\n        let renderelement = new SkinRenderElement();\r\n        return renderelement;\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    _onSkinMeshChange(mesh: Mesh): void {\r\n        if (mesh && this._mesh != mesh) {\r\n            this._changeVertexDefine(mesh);\r\n            this._changeMorphData(mesh);\r\n            this._mesh = mesh;\r\n            var count: number = mesh.subMeshCount;\r\n            this._renderElements.length = count;\r\n            for (var i: number = 0; i < count; i++) {\r\n                var renderElement: SkinRenderElement = this._renderElements[i];\r\n                if (!renderElement) {\r\n                    var material: Material = this.sharedMaterials[i];\r\n                    renderElement = this._renderElements[i] = this._renderElements[i] ? this._renderElements[i] : this._createRenderElement();\r\n                    if (this._cacheRootBone) {\r\n                        renderElement.setTransform(this._cacheRootBone._transform);\r\n                    } else {\r\n                        renderElement.setTransform((this.owner as Sprite3D)._transform);\r\n                    }\r\n                    renderElement.render = this;\r\n                    renderElement.material = material ? material : BlinnPhongMaterial.defaultMaterial;//确保有材质,由默认材质代替。\r\n                }\r\n                renderElement.setGeometry(mesh.getSubMesh(i));\r\n            }\r\n        } else if (!mesh) {\r\n            this._renderElements.length = 0;\r\n            this._mesh = null;\r\n            this._changeVertexDefine(null);\r\n            this._changeMorphData(null);\r\n        }\r\n        this.boundsChange = true;\r\n        // if (this._octreeNode && this._indexInOctreeMotionList === -1) {\r\n        // \tthis._octreeNode.getManagerNode().addMotionObject(this);\r\n        // }\r\n    }\r\n    /**\r\n    *@inheritDoc\r\n    *@override\r\n    *@internal\r\n    */\r\n    _onMeshChange(value: Mesh): void {\r\n        this._onSkinMeshChange(value);\r\n        if (!value)\r\n            return;\r\n        this._cacheMesh = (<Mesh>value);\r\n\r\n        var subMeshCount: number = value.subMeshCount;\r\n        this._skinnedData = [];\r\n        this._skinnedDataLoopMarks = new Uint32Array(value._inverseBindPoses.length);\r\n        for (var i: number = 0; i < subMeshCount; i++) {\r\n            var subBoneIndices: Uint16Array[] = ((<SubMesh>value.getSubMesh(i)))._boneIndicesList;\r\n            var subCount: number = subBoneIndices.length;\r\n            var subData: Float32Array[] = this._skinnedData[i] = [];\r\n            for (var j: number = 0; j < subCount; j++)\r\n                subData[j] = new Float32Array(subBoneIndices[j].length * 16);\r\n            this._renderElements[i].setSkinData(subData);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     * @internal\r\n     */\r\n    protected _calculateBoundingBox(): void {//TODO:是否可直接在boundingSphere属性计算优化\r\n        if (this._cacheRootBone)\r\n            this._localBounds._tranform(this._cacheRootBone.transform.worldMatrix, this._bounds);\r\n        else\r\n            this._localBounds._tranform((this.owner as Sprite3D).transform.worldMatrix, this._bounds);\r\n    }\r\n\r\n    _setBelongScene(scene: Scene3D): void {\r\n        super._setBelongScene(scene);\r\n        Stat.skinRenderNode++;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _setUnBelongScene() {\r\n        super._setUnBelongScene();\r\n        Stat.skinRenderNode--;\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     * @internal\r\n     */\r\n    _renderUpdate(context: RenderContext3D, transform: Transform3D): void {\r\n        this._applyReflection();\r\n        if (this.bones.length > 0) {\r\n            this._computeSkinnedData();\r\n            this._shaderValues.setMatrix4x4(Sprite3D.WORLDMATRIX, Matrix4x4.DEFAULT);\r\n            this._worldParams.x = 1;\r\n            this._shaderValues.setVector(Sprite3D.WORLDINVERTFRONT, this._worldParams);\r\n        } else {\r\n            this._shaderValues.setMatrix4x4(Sprite3D.WORLDMATRIX, transform.worldMatrix);\r\n            this._worldParams.x = transform.getFrontFaceValue();\r\n            this._shaderValues.setVector(Sprite3D.WORLDINVERTFRONT, this._worldParams);\r\n        }\r\n\r\n        this._mesh.morphTargetData && this._applyMorphdata();\r\n    }\r\n\r\n    // /**\r\n    //  * @inheritDoc\r\n    //  * @override\r\n    //  * @internal\r\n    //  */\r\n    // _renderUpdateWithCamera(context: RenderContext3D, transform: Transform3D): void {\r\n    // \tvar projectionView: Matrix4x4 = context.projectionViewMatrix;\r\n    // \tthis._shaderValues.setMatrix4x4(Sprite3D.MVPMATRIX, projectionView);\r\n    // }\r\n\r\n    /**\r\n     * @override\r\n     * @param dest \r\n     */\r\n    _cloneTo(dest: Component): void {\r\n        let render = (dest as SkinnedMeshRenderer);\r\n\r\n        render._inverseBindPosesBufferForNative = null;\r\n        render._skinnedMatrixCachesBufferForNative = null;\r\n        render._bonesTransformForNative = null;\r\n\r\n        //get common parent\r\n        let getCommomParent = (rootNode: Sprite3D, rootCheckNode: Sprite3D): Sprite3D => {\r\n            let nodeArray: Sprite3D[] = [];\r\n            let node = rootNode;\r\n            while (!!node) {\r\n                if (node instanceof Sprite3D)\r\n                    nodeArray.push(node);\r\n                node = node.parent as Sprite3D;\r\n            }\r\n            let checkNode: Sprite3D = rootCheckNode;\r\n            while (!!checkNode && nodeArray.indexOf(checkNode) == -1) {\r\n                checkNode = checkNode.parent as Sprite3D;\r\n            }\r\n            return checkNode;\r\n        }\r\n        let cloneHierachFun = (rootNode: Sprite3D, rootCheckNode: Sprite3D, destNode: Sprite3D): Sprite3D => {\r\n            let rootparent: Sprite3D = getCommomParent(rootNode, rootCheckNode);\r\n            if (!rootparent)\r\n                return null;\r\n            let path: number[] = [];\r\n            Utils3D._getHierarchyPath(rootparent, rootNode, path);\r\n            let pathcheck: number[] = [];\r\n            Utils3D._getHierarchyPath(rootparent, rootCheckNode, pathcheck);\r\n            let destParent = Utils3D._getParentNodeByHierarchyPath(destNode, path);\r\n            if (!destParent)\r\n                return null;\r\n            return Utils3D._getNodeByHierarchyPath(destParent, pathcheck) as Sprite3D;\r\n        }\r\n        //rootBone Clone\r\n        var rootBone: Sprite3D = this.rootBone;\r\n        if (rootBone) {\r\n            let node = cloneHierachFun(this.owner as Sprite3D, this.rootBone as Sprite3D, render.owner as Sprite3D);\r\n            if (node)\r\n                render.rootBone = node;\r\n            else\r\n                render.rootBone = rootBone;\r\n        }\r\n        //BonesClone\r\n        var bones: Sprite3D[] = this.bones;\r\n        var destBone: Sprite3D[] = render.bones;\r\n        let n = destBone.length = bones.length;\r\n        for (var i = 0; i < n; i++) {\r\n            let ceckNode = bones[i];\r\n            destBone[i] = cloneHierachFun(this.owner as Sprite3D, ceckNode, render.owner as Sprite3D);\r\n        }\r\n        //bounds\r\n        var lbb: Bounds = this.localBounds;\r\n        (lbb) && (lbb.cloneTo(render.localBounds));\r\n        (render.localBounds) && (render.localBounds = render.localBounds);\r\n        super._cloneTo(dest);\r\n    }\r\n\r\n    protected _onDestroy() {\r\n        if (this._cacheRootBone)\r\n            (!this._cacheRootBone._destroyed) && (this._cacheRootBone.transform.off(Event.TRANSFORM_CHANGED, this, this._onWorldMatNeedChange));\r\n        else\r\n            (this.owner && !this.owner._destroyed) && ((this.owner as Sprite3D).transform.off(Event.TRANSFORM_CHANGED, this, this._onWorldMatNeedChange));\r\n        super._onDestroy();\r\n    }\r\n}\r\n\r\n","import { Event } from \"../../events/Event\";\r\nimport { SkinnedMeshRenderer } from \"./SkinnedMeshRenderer\";\r\nimport { RenderContext3D } from \"./render/RenderContext3D\";\r\nimport { Transform3D } from \"./Transform3D\";\r\nimport { SubMeshRenderElement } from \"./render/SubMeshRenderElement\";\r\nimport { Sprite3D } from \"./Sprite3D\";\r\nimport { RenderElement } from \"./render/RenderElement\";\r\nimport { SkinnedMeshSprite3DShaderDeclaration } from \"./SkinnedMeshSprite3DShaderDeclaration\";\r\nimport { Mesh } from \"../resource/models/Mesh\";\r\nimport { Texture2D } from \"../../resource/Texture2D\";\r\nimport { Component } from \"../../components/Component\";\r\nimport { ShaderDataType } from \"../../RenderEngine/RenderShader/ShaderData\";\r\nimport { Matrix4x4 } from \"../../maths/Matrix4x4\";\r\nimport { Vector2 } from \"../../maths/Vector2\";\r\nimport { Vector4 } from \"../../maths/Vector4\";\r\n\r\nexport class SimpleSkinnedMeshRenderer extends SkinnedMeshRenderer {\r\n    /**@internal 解决循环引用 */\r\n    static SIMPLE_SIMPLEANIMATORTEXTURE: number;\r\n    /**@internal 解决循环引用*/\r\n    static SIMPLE_SIMPLEANIMATORPARAMS: number;\r\n    /**@internal 解决循环引用*/\r\n    static SIMPLE_SIMPLEANIMATORTEXTURESIZE: number;\r\n\r\n    /**@internal */\r\n    private _simpleAnimatorTexture: Texture2D;\r\n    /**@internal */\r\n    _simpleAnimatorParams: Vector4;\r\n    /**@internal */\r\n    private _simpleAnimatorTextureSize: number;\r\n    /**@internal  x simpleAnimation offset,y simpleFrameOffset*/\r\n    private _simpleAnimatorOffset: Vector2;\r\n    /**@internal */\r\n    _bonesNums: number;\r\n\r\n    /**\r\n     * @internal\r\n     * 设置动画帧贴图\r\n     */\r\n    get simpleAnimatorTexture(): Texture2D {\r\n        return this._simpleAnimatorTexture;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    set simpleAnimatorTexture(value: Texture2D) {\r\n        this._simpleAnimatorTexture = value;\r\n        this._simpleAnimatorTextureSize = value.width;\r\n        this._shaderValues.setTexture(SimpleSkinnedMeshRenderer.SIMPLE_SIMPLEANIMATORTEXTURE, value);\r\n        value._addReference();\r\n        this._shaderValues.setNumber(SimpleSkinnedMeshRenderer.SIMPLE_SIMPLEANIMATORTEXTURESIZE, this._simpleAnimatorTextureSize);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * 设置动画帧数参数\r\n     */\r\n    get simpleAnimatorOffset(): Vector2 {\r\n        return this._simpleAnimatorOffset;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    set simpleAnimatorOffset(value: Vector2) {\r\n        value.cloneTo(this._simpleAnimatorOffset);\r\n    }\r\n\r\n\r\n    /**\r\n     * 创建一个 <code>SkinnedMeshRender</code> 实例。\r\n     */\r\n    constructor() {\r\n        super();\r\n        this._simpleAnimatorParams = new Vector4();\r\n        this._simpleAnimatorOffset = new Vector2();\r\n        this._shaderValues.addDefine(SkinnedMeshSprite3DShaderDeclaration.SHADERDEFINE_SIMPLEBONE);\r\n        this._shaderValues.addDefine(SkinnedMeshSprite3DShaderDeclaration.SHADERDEFINE_BONE);\r\n    }\r\n\r\n    /**\r\n     *@inheritDoc\r\n     *@override\r\n     *@internal\r\n     */\r\n    _createRenderElement() {\r\n        let renderelement = new SubMeshRenderElement();\r\n        return renderelement as any;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _computeAnimatorParamsData(): void {\r\n        if (this._cacheMesh) {\r\n            this._simpleAnimatorParams.x = this._simpleAnimatorOffset.x;\r\n            this._simpleAnimatorParams.y = Math.round(this._simpleAnimatorOffset.y) * this._bonesNums * 4;\r\n        }\r\n    }\r\n\r\n    /**\r\n    *@inheritDoc\r\n    *@override\r\n    *@internal\r\n    */\r\n    _onMeshChange(value: Mesh): void {\r\n        this._onSkinMeshChange(value);\r\n        if (!value)\r\n            return;\r\n        this._cacheMesh = (<Mesh>value);\r\n\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     * @internal\r\n     */\r\n    _renderUpdate(context: RenderContext3D, transform: Transform3D): void {\r\n        var element: SubMeshRenderElement = <SubMeshRenderElement>context.renderElement;\r\n        switch (element.renderType) {\r\n            case RenderElement.RENDERTYPE_NORMAL:\r\n                if (this.rootBone) {\r\n                    var worldMat: Matrix4x4 = (this.rootBone as Sprite3D).transform.worldMatrix;\r\n                    if (this._subUniformBufferData) {\r\n                        let oriMat = this._shaderValues.getMatrix4x4(Sprite3D.WORLDMATRIX);\r\n                        this._subUniformBufferData._needUpdate = oriMat ? !oriMat.equalsOtherMatrix(worldMat) : true;\r\n                    }\r\n                    this._setShaderValue(Sprite3D.WORLDMATRIX, ShaderDataType.Matrix4x4, worldMat);\r\n                    this._worldParams.x = (this.rootBone as Sprite3D).transform.getFrontFaceValue();\r\n                    this._setShaderValue(Sprite3D.WORLDINVERTFRONT, ShaderDataType.Vector4, this._worldParams);\r\n                } else {\r\n                    this._setShaderValue(Sprite3D.WORLDMATRIX, ShaderDataType.Matrix4x4, transform.worldMatrix);\r\n                    this._worldParams.x = transform.getFrontFaceValue();\r\n                    this._setShaderValue(Sprite3D.WORLDINVERTFRONT, ShaderDataType.Vector4, this._worldParams);\r\n                }\r\n                this._computeAnimatorParamsData();\r\n                this._shaderValues.setVector(SimpleSkinnedMeshRenderer.SIMPLE_SIMPLEANIMATORPARAMS, this._simpleAnimatorParams);\r\n                break;\r\n        }\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     * @internal\r\n     */\r\n    _renderUpdateWithCamera(context: RenderContext3D, transform: Transform3D): void {\r\n    }\r\n\r\n    _cloneTo(dest: Component): void {\r\n        let render = dest as SimpleSkinnedMeshRenderer;\r\n        render.simpleAnimatorOffset = this.simpleAnimatorOffset;\r\n        render.simpleAnimatorTexture = this.simpleAnimatorTexture;\r\n        render._bonesNums = this._bonesNums;\r\n        super._cloneTo(dest);\r\n    }\r\n\r\n    /**\r\n     * 删除节点\r\n     */\r\n    protected _onDestroy() {\r\n        if (this._cacheRootBone)\r\n            (!this._cacheRootBone._destroyed) && (this._cacheRootBone.transform.off(Event.TRANSFORM_CHANGED, this, this._onWorldMatNeedChange));\r\n        (this._simpleAnimatorTexture) && this._simpleAnimatorTexture._removeReference();\r\n        this._simpleAnimatorTexture = null;\r\n        super._onDestroy();\r\n    }\r\n}","import { Node } from \"../../display/Node\";\r\nimport { Loader } from \"../../net/Loader\";\r\nimport { Mesh } from \"../resource/models/Mesh\";\r\nimport { MeshFilter } from \"./MeshFilter\";\r\nimport { RenderableSprite3D } from \"./RenderableSprite3D\";\r\nimport { Sprite3D } from \"./Sprite3D\";\r\nimport { Material } from \"./material/Material\";\r\nimport { SimpleSkinnedMeshRenderer } from \"./SimpleSkinnedMeshRenderer\";\r\nimport { Texture2D } from \"../../resource/Texture2D\";\r\nimport { Shader3D } from \"../../RenderEngine/RenderShader/Shader3D\";\r\nimport { LayaGL } from \"../../layagl/LayaGL\";\r\nimport { Vector3 } from \"../../maths/Vector3\";\r\nimport { Vector4 } from \"../../maths/Vector4\";\r\n\r\n\r\n\r\n/**\r\n * <code>SkinnedMeshSprite3D</code> 类用于创建网格。\r\n */\r\nexport class SimpleSkinnedMeshSprite3D extends RenderableSprite3D {\r\n    /**@internal */\r\n    static _tempArray0: any[] = [];\r\n\r\n    /** */\r\n    static SIMPLE_SIMPLEANIMATORTEXTURE: number;\r\n    static SIMPLE_SIMPLEANIMATORPARAMS: number;\r\n    static SIMPLE_SIMPLEANIMATORTEXTURESIZE: number;\r\n    /**\r\n     * @internal\r\n     */\r\n    static __init__(): void {\r\n        SimpleSkinnedMeshRenderer.SIMPLE_SIMPLEANIMATORPARAMS = SimpleSkinnedMeshSprite3D.SIMPLE_SIMPLEANIMATORPARAMS;\r\n        SimpleSkinnedMeshRenderer.SIMPLE_SIMPLEANIMATORTEXTURE = SimpleSkinnedMeshSprite3D.SIMPLE_SIMPLEANIMATORTEXTURE;\r\n        SimpleSkinnedMeshRenderer.SIMPLE_SIMPLEANIMATORTEXTURESIZE = SimpleSkinnedMeshSprite3D.SIMPLE_SIMPLEANIMATORTEXTURESIZE;\r\n\r\n        SimpleSkinnedMeshSprite3D.SIMPLE_SIMPLEANIMATORTEXTURE = Shader3D.propertyNameToID(\"u_SimpleAnimatorTexture\");\r\n        SimpleSkinnedMeshSprite3D.SIMPLE_SIMPLEANIMATORPARAMS = Shader3D.propertyNameToID(\"u_SimpleAnimatorParams\");\r\n        SimpleSkinnedMeshSprite3D.SIMPLE_SIMPLEANIMATORTEXTURESIZE = Shader3D.propertyNameToID(\"u_SimpleAnimatorTextureSize\");\r\n\r\n        const commandUniform = LayaGL.renderOBJCreate.createGlobalUniformMap(\"Sprite3D\");\r\n        commandUniform.addShaderUniform(SimpleSkinnedMeshSprite3D.SIMPLE_SIMPLEANIMATORTEXTURE, \"u_SimpleAnimatorTexture\");\r\n        commandUniform.addShaderUniform(SimpleSkinnedMeshSprite3D.SIMPLE_SIMPLEANIMATORPARAMS, \"u_SimpleAnimatorParams\");\r\n        commandUniform.addShaderUniform(SimpleSkinnedMeshSprite3D.SIMPLE_SIMPLEANIMATORTEXTURESIZE, \"u_SimpleAnimatorTextureSize\");\r\n    }\r\n\r\n    /** @internal */\r\n    private _meshFilter: MeshFilter;\r\n\r\n    /**\r\n     * 网格过滤器。\r\n     */\r\n    get meshFilter(): MeshFilter {\r\n        return this._meshFilter;\r\n    }\r\n\r\n    /**\r\n     * 网格渲染器。\r\n     */\r\n    get simpleSkinnedMeshRenderer(): SimpleSkinnedMeshRenderer {\r\n        return (<SimpleSkinnedMeshRenderer>this._render);\r\n    }\r\n\r\n    /**\r\n     * 创建一个 <code>MeshSprite3D</code> 实例。\r\n     * @param mesh 网格,同时会加载网格所用默认材质。\r\n     * @param name 名字。\r\n     */\r\n    constructor(mesh: Mesh = null, name: string = null) {\r\n        super(name);\r\n        this._meshFilter = this.addComponent(MeshFilter);\r\n        this._render = this.addComponent(SimpleSkinnedMeshRenderer);\r\n        (mesh) && (this._meshFilter.sharedMesh = mesh);\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     * @internal\r\n     */\r\n    _parse(data: any, spriteMap: any): void {\r\n        super._parse(data, spriteMap);\r\n        var render: SimpleSkinnedMeshRenderer = this.simpleSkinnedMeshRenderer;\r\n        var lightmapIndex: any = data.lightmapIndex;\r\n        (lightmapIndex != null) && (render.lightmapIndex = lightmapIndex);\r\n        var lightmapScaleOffsetArray: any[] = data.lightmapScaleOffset;\r\n        (lightmapScaleOffsetArray) && (render.lightmapScaleOffset = new Vector4(lightmapScaleOffsetArray[0], lightmapScaleOffsetArray[1], lightmapScaleOffsetArray[2], lightmapScaleOffsetArray[3]));\r\n        (data.enableRender != undefined) && (render.enabled = data.enableRender);\r\n        (data.receiveShadows != undefined) && (render.receiveShadow = data.receiveShadows);\r\n        (data.castShadow != undefined) && (render.castShadow = data.castShadow);\r\n        let meshPath: string = data.meshPath;\r\n        if (meshPath) {\r\n            let mesh: Mesh = Loader.getRes(meshPath);//加载失败mesh为空\r\n            (mesh) && (this.meshFilter.sharedMesh = mesh);\r\n        }\r\n\r\n        var materials: any[] = data.materials;\r\n        if (materials) {\r\n            let sharedMaterials: Material[] = render.sharedMaterials;\r\n            let materialCount: number = materials.length;\r\n            sharedMaterials.length = materialCount;\r\n            for (let i = 0; i < materialCount; i++) {\r\n                sharedMaterials[i] = Loader.getRes(materials[i].path);\r\n            }\r\n            render.sharedMaterials = sharedMaterials;\r\n        }\r\n\r\n        var boundBox: any = data.boundBox;\r\n        var min: any[] = boundBox.min;\r\n        var max: any[] = boundBox.max;\r\n        render.localBounds.setMin(new Vector3(min[0], min[1], min[2]));\r\n        render.localBounds.setMax(new Vector3(max[0], max[1], max[2]));\r\n        render.localBounds = render.localBounds;\r\n        if (spriteMap) {\r\n            let rootBoneData: number = data.rootBone;\r\n            render.rootBone = spriteMap[rootBoneData];\r\n            let bonesData: any[] = data.bones;\r\n            for (let i = 0, n = bonesData.length; i < n; i++)\r\n                render.bones.push(spriteMap[bonesData[i]]);\r\n\r\n            render._bonesNums = data.bonesNums ? data.bonesNums : render.bones.length;\r\n        }\r\n        // else {//[兼容代码]\r\n        // \t(data.rootBone) && (render._setRootBone(data.rootBone));//[兼容性]\r\n        // }\r\n        var animatorTexture: string = data.animatorTexture;\r\n        if (animatorTexture) {\r\n            let animatortexture: Texture2D = Loader.getRes(animatorTexture, Loader.TEXTURE2D);\r\n            render.simpleAnimatorTexture = animatortexture;\r\n        }\r\n    }\r\n\r\n    // /**\r\n    //  * @inheritDoc\r\n    //  * @override\r\n    //  * @internal\r\n    //  */\r\n    // protected _changeHierarchyAnimator(animator: Animator): void {\r\n    // \tsuper._changeHierarchyAnimator(animator);\r\n    // \tthis.simpleSkinnedMeshRenderer._setCacheAnimator(animator);\r\n    // }\r\n\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     * @internal\r\n     */\r\n    _cloneTo(destObject: any, srcRoot: Node, dstRoot: Node): void {\r\n        // var meshSprite3D: MeshSprite3D = (<MeshSprite3D>destObject);\r\n        // meshSprite3D.meshFilter.sharedMesh = this.meshFilter.sharedMesh;\r\n        // var meshRender: SimpleSkinnedMeshRenderer = (<SimpleSkinnedMeshRenderer>this._render);\r\n        // var destMeshRender: SimpleSkinnedMeshRenderer = (<SimpleSkinnedMeshRenderer>meshSprite3D._render);\r\n        // destMeshRender.enabled = meshRender.enabled;\r\n        // destMeshRender.sharedMaterials = meshRender.sharedMaterials;\r\n        // destMeshRender.castShadow = meshRender.castShadow;\r\n        // var lightmapScaleOffset: Vector4 = meshRender.lightmapScaleOffset;\r\n        // lightmapScaleOffset && (destMeshRender.lightmapScaleOffset = lightmapScaleOffset.clone());\r\n        // destMeshRender.receiveShadow = meshRender.receiveShadow;\r\n        // destMeshRender.sortingFudge = meshRender.sortingFudge;\r\n        // //destMeshRender._rootBone = meshRender._rootBone;\r\n\r\n        // var bones: Sprite3D[] = meshRender.bones;\r\n        // var destBones: Sprite3D[] = destMeshRender.bones;\r\n        // var bonesCount: number = bones.length;\r\n        // destBones.length = bonesCount;\r\n\r\n        // var rootBone: Sprite3D = meshRender.rootBone;\r\n        // if (rootBone) {\r\n        // \tvar pathes: any[] = Utils3D._getHierarchyPath(srcRoot, rootBone, SimpleSkinnedMeshSprite3D._tempArray0);\r\n        // \tif (pathes)\r\n        // \t\tdestMeshRender.rootBone = (<Sprite3D>Utils3D._getNodeByHierarchyPath(dstRoot, pathes));\r\n        // \telse\r\n        // \t\tdestMeshRender.rootBone = rootBone;\r\n        // }\r\n\r\n        // for (var i: number = 0; i < bones.length; i++) {\r\n        // \tpathes = Utils3D._getHierarchyPath(srcRoot, bones[i], SimpleSkinnedMeshSprite3D._tempArray0);\r\n        // \tif (pathes)\r\n        // \t\tdestBones[i] = (<Sprite3D>Utils3D._getNodeByHierarchyPath(dstRoot, pathes));\r\n        // \telse\r\n        // \t\tdestBones[i] = bones[i];\r\n        // }\r\n\r\n        // var lbb: Bounds = meshRender.localBounds;\r\n        // (lbb) && (lbb.cloneTo(destMeshRender.localBounds));\r\n\r\n\r\n        // destMeshRender.simpleAnimatorOffset = meshRender.simpleAnimatorOffset;\r\n        // destMeshRender.simpleAnimatorTexture = meshRender.simpleAnimatorTexture;\r\n        // destMeshRender._bonesNums = meshRender._bonesNums;\r\n\r\n        super._cloneTo(destObject, srcRoot, dstRoot);//父类函数在最后,组件应该最后赋值，否则获取材质默认值等相关函数会有问题\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     */\r\n    destroy(destroyChild: boolean = true): void {\r\n        if (this._destroyed)\r\n            return;\r\n        super.destroy(destroyChild);\r\n        this._meshFilter.destroy();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _create(): Node {\r\n        return new Sprite3D();\r\n    }\r\n\r\n}\r\n\r\n","import { Node } from \"../../display/Node\";\r\nimport { Loader } from \"../../net/Loader\";\r\nimport { Mesh } from \"../resource/models/Mesh\";\r\nimport { MeshFilter } from \"./MeshFilter\";\r\nimport { RenderableSprite3D } from \"./RenderableSprite3D\";\r\nimport { SkinnedMeshRenderer } from \"./SkinnedMeshRenderer\";\r\nimport { Sprite3D } from \"./Sprite3D\";\r\nimport { Material } from \"./material/Material\";\r\nimport { SkinnedMeshSprite3DShaderDeclaration } from \"./SkinnedMeshSprite3DShaderDeclaration\";\r\nimport { Shader3D } from \"../../RenderEngine/RenderShader/Shader3D\";\r\nimport { LayaGL } from \"../../layagl/LayaGL\";\r\nimport { Vector3 } from \"../../maths/Vector3\";\r\nimport { Vector4 } from \"../../maths/Vector4\";\r\n\r\n/**\r\n * <code>SkinnedMeshSprite3D</code> 类用于绑点骨骼节点精灵。\r\n */\r\nexport class SkinnedMeshSprite3D extends RenderableSprite3D {\r\n    /**@internal */\r\n    static _tempArray0: any[] = [];\r\n\r\n    /**着色器变量名，蒙皮动画。*/\r\n    static BONES: number;\r\n    /**\r\n     * @internal\r\n     */\r\n    static __init__(): void {\r\n        SkinnedMeshSprite3DShaderDeclaration.SHADERDEFINE_BONE = Shader3D.getDefineByName(\"BONE\");\r\n        SkinnedMeshSprite3DShaderDeclaration.SHADERDEFINE_SIMPLEBONE = Shader3D.getDefineByName(\"SIMPLEBONE\");\r\n        const commandUniform = LayaGL.renderOBJCreate.createGlobalUniformMap(\"Custom\");\r\n        SkinnedMeshSprite3D.BONES = Shader3D.propertyNameToID(\"u_Bones\");\r\n        commandUniform.addShaderUniform(SkinnedMeshSprite3D.BONES, \"u_Bones\");\r\n    }\r\n\r\n    /** @internal */\r\n    private _meshFilter: MeshFilter;\r\n\r\n    /**\r\n     * 网格过滤器。\r\n     */\r\n    get meshFilter(): MeshFilter {\r\n        return this._meshFilter;\r\n    }\r\n\r\n    /**\r\n     * 网格渲染器。\r\n     */\r\n    get skinnedMeshRenderer(): SkinnedMeshRenderer {\r\n        return (<SkinnedMeshRenderer>this._render);\r\n    }\r\n\r\n    /**\r\n     * 创建一个 <code>MeshSprite3D</code> 实例。\r\n     * @param mesh 网格,同时会加载网格所用默认材质。\r\n     * @param name 名字。\r\n     */\r\n    constructor(mesh: Mesh = null, name: string = null) {\r\n        super(name);\r\n        this._meshFilter = this.addComponent(MeshFilter);\r\n        this._render = this.addComponent(SkinnedMeshRenderer);\r\n        (mesh) && (this._meshFilter.sharedMesh = mesh);\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     * @internal\r\n     */\r\n    _parse(data: any, spriteMap: any): void {\r\n        super._parse(data, spriteMap);\r\n        var render: SkinnedMeshRenderer = this.skinnedMeshRenderer;\r\n        var lightmapIndex: any = data.lightmapIndex;\r\n        (lightmapIndex != null) && (render.lightmapIndex = lightmapIndex);\r\n        var lightmapScaleOffsetArray: any[] = data.lightmapScaleOffset;\r\n        (lightmapScaleOffsetArray) && (render.lightmapScaleOffset = new Vector4(lightmapScaleOffsetArray[0], lightmapScaleOffsetArray[1], lightmapScaleOffsetArray[2], lightmapScaleOffsetArray[3]));\r\n        (data.enableRender != undefined) && (render.enabled = data.enableRender);\r\n        (data.receiveShadows != undefined) && (render.receiveShadow = data.receiveShadows);\r\n        (data.castShadow != undefined) && (render.castShadow = data.castShadow);\r\n        var meshPath: string;\r\n        meshPath = data.meshPath;\r\n        if (meshPath) {\r\n            var mesh: Mesh = Loader.getRes(meshPath);//加载失败mesh为空\r\n            (mesh) && (this.meshFilter.sharedMesh = mesh);\r\n        }\r\n\r\n        var materials: any[] = data.materials;\r\n        if (materials) {\r\n            var sharedMaterials: Material[] = render.sharedMaterials;\r\n            var materialCount: number = materials.length;\r\n            sharedMaterials.length = materialCount;\r\n            for (var i: number = 0; i < materialCount; i++) {\r\n                sharedMaterials[i] = Loader.getRes(materials[i].path);\r\n            }\r\n            render.sharedMaterials = sharedMaterials;\r\n        }\r\n\r\n        var boundBox: any = data.boundBox;\r\n        var min: any[] = boundBox.min;\r\n        var max: any[] = boundBox.max;\r\n        render.localBounds.setMin(new Vector3(min[0], min[1], min[2]));\r\n        render.localBounds.setMax(new Vector3(max[0], max[1], max[2]));\r\n        render.localBounds = render.localBounds;\r\n        if (spriteMap) {\r\n            var rootBoneData: number = data.rootBone;\r\n            render.rootBone = spriteMap[rootBoneData];\r\n            var bonesData: any[] = data.bones;\r\n            var n: number;\r\n            for (i = 0, n = bonesData.length; i < n; i++)\r\n                (render as SkinnedMeshRenderer).bones.push(spriteMap[bonesData[i]]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     * @internal\r\n     */\r\n    _cloneTo(destObject: any, srcRoot: Node, dstRoot: Node): void {\r\n        super._cloneTo(destObject, srcRoot, dstRoot);//父类函数在最后,组件应该最后赋值，否则获取材质默认值等相关函数会有问题\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     */\r\n    destroy(destroyChild: boolean = true): void {\r\n        if (this._destroyed)\r\n            return;\r\n        super.destroy(destroyChild);\r\n        this._meshFilter.destroy();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _create(): Node {\r\n        return new Sprite3D();\r\n    }\r\n\r\n}\r\n\r\n","\r\nexport class TrailTextureMode {\r\n\t/**\r\n\t * 拉伸模式。\r\n\t */\r\n\tstatic Stretch: number = 0;\r\n\r\n\t/**\r\n\t * 平铺模式。\r\n\t */\r\n\tstatic Tile: number = 1;\r\n\r\n}\r\n\r\n\r\n","import { VertexDeclaration } from \"../../../RenderEngine/VertexDeclaration\";\r\nimport { VertexElement } from \"../../../renders/VertexElement\";\r\nimport { VertexElementFormat } from \"../../../renders/VertexElementFormat\";\r\nimport { IVertex } from \"../../graphics/IVertex\"\r\n/**\r\n * <code>VertexTrail</code> 类用于创建拖尾顶点结构。\r\n * @internal\r\n */\r\nexport class VertexTrail implements IVertex {\r\n\t/**@internal */\r\n\tstatic TRAIL_POSITION0: number = 0;\r\n\t/**@internal */\r\n\tstatic TRAIL_OFFSETVECTOR: number = 1;\r\n\t/**@internal */\r\n\tstatic TRAIL_TIME0: number = 2;\r\n\t/**@internal */\r\n\tstatic TRAIL_TEXTURECOORDINATE0Y: number = 3;\r\n\t/**@internal */\r\n\tstatic TRAIL_TEXTURECOORDINATE0X: number = 4;\r\n\t/**@internal */\r\n\tstatic TRAIL_COLOR: number = 5;\r\n\r\n\t/**@internal */\r\n\tprivate static _vertexDeclaration1: VertexDeclaration;\r\n\t/**@internal */\r\n\tprivate static _vertexDeclaration2: VertexDeclaration;\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic get vertexDeclaration1(): VertexDeclaration {\r\n\t\treturn VertexTrail._vertexDeclaration1;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic get vertexDeclaration2(): VertexDeclaration {\r\n\t\treturn VertexTrail._vertexDeclaration2;\r\n\t}\r\n\r\n\tget vertexDeclaration(): VertexDeclaration {\r\n\t\treturn VertexTrail._vertexDeclaration1;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic __init__(): void {\r\n\t\tVertexTrail._vertexDeclaration1 = new VertexDeclaration(32,\r\n\t\t\t[new VertexElement(0, VertexElementFormat.Vector3, VertexTrail.TRAIL_POSITION0),\r\n\t\t\tnew VertexElement(12, VertexElementFormat.Vector3, VertexTrail.TRAIL_OFFSETVECTOR),\r\n\t\t\tnew VertexElement(24, VertexElementFormat.Single, VertexTrail.TRAIL_TIME0),\r\n\t\t\tnew VertexElement(28, VertexElementFormat.Single, VertexTrail.TRAIL_TEXTURECOORDINATE0Y)]);\r\n\t\tVertexTrail._vertexDeclaration2 = new VertexDeclaration(20,\r\n\t\t\t[new VertexElement(0, VertexElementFormat.Single, VertexTrail.TRAIL_TEXTURECOORDINATE0X),\r\n\t\t\tnew VertexElement(4, VertexElementFormat.Color, VertexTrail.TRAIL_COLOR)]);\r\n\t}\r\n}\r\n\r\n","import { LayaGL } from \"../../../layagl/LayaGL\";\r\nimport { Color } from \"../../../maths/Color\";\r\nimport { MathUtils3D } from \"../../../maths/MathUtils3D\";\r\nimport { Matrix4x4 } from \"../../../maths/Matrix4x4\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\nimport { BufferUsage } from \"../../../RenderEngine/RenderEnum/BufferTargetType\";\r\nimport { DrawType } from \"../../../RenderEngine/RenderEnum/DrawType\";\r\nimport { MeshTopology } from \"../../../RenderEngine/RenderEnum/RenderPologyMode\";\r\nimport { VertexDeclaration } from \"../../../RenderEngine/VertexDeclaration\";\r\nimport { Resource } from \"../../../resource/Resource\";\r\nimport { BufferState } from \"../../../webgl/utils/BufferState\";\r\nimport { VertexBuffer3D } from \"../../graphics/VertexBuffer3D\";\r\nimport { Bounds } from \"../../math/Bounds\";\r\nimport { Camera } from \"../Camera\";\r\nimport { GeometryElement } from \"../GeometryElement\";\r\nimport { Gradient } from \"../Gradient\";\r\nimport { RenderContext3D } from \"../render/RenderContext3D\";\r\nimport { Sprite3D } from \"../Sprite3D\";\r\nimport { TrailTextureMode } from \"../TrailTextureMode\";\r\nimport { TrailAlignment } from \"./TrailAlignment\";\r\nimport { TrailFilter } from \"./TrailFilter\";\r\nimport { VertexTrail } from \"./VertexTrail\";\r\n\r\n/**\r\n * <code>TrailGeometry</code> 类用于创建拖尾渲染单元。\r\n */\r\nexport class TrailGeometry extends GeometryElement {\r\n\t/** 轨迹准线_面向摄像机。*/\r\n\tstatic ALIGNMENT_VIEW: number = 0;\r\n\t/** 轨迹准线_面向运动方向。*/\r\n\tstatic ALIGNMENT_TRANSFORM_Z: number = 1;\r\n\r\n\t/**@internal */\r\n\tprivate static _tempVector30: Vector3 = new Vector3();\r\n\t/**@internal */\r\n\tprivate static _tempVector31: Vector3 = new Vector3();\r\n\t/**@internal */\r\n\tprivate static _tempVector32: Vector3 = new Vector3();\r\n\t/**@internal */\r\n\tprivate static _tempVector33: Vector3 = new Vector3();\r\n\t/**@internal */\r\n\tprivate static _tempVector34: Vector3 = new Vector3();\r\n\t/**@internal */\r\n\tprivate static _tempVector35: Vector3 = new Vector3();\r\n\t/**@internal */\r\n\tprivate static _tempVector36: Vector3 = new Vector3();\r\n\r\n\t/**@internal */\r\n\tprivate static _type: number = GeometryElement._typeCounter++;\r\n\r\n\t/**@internal */\r\n\tprivate _floatCountPerVertices1: number = 8;\r\n\t/**@internal */\r\n\tprivate _floatCountPerVertices2: number = 5;\r\n\t/**@internal */\r\n\tprivate _increaseSegementCount: number = 16;\r\n\t/**@internal */\r\n\tprivate _activeIndex: number = 0;\r\n\t/**@internal */\r\n\tprivate _endIndex: number = 0;\r\n\t/**@internal */\r\n\tprivate _needAddFirstVertex: boolean = false;\r\n\t/**@internal */\r\n\tprivate _isTempEndVertex: boolean = false;\r\n\t/**@internal */\r\n\tprivate _subBirthTime: Float32Array;\r\n\t/**@internal */\r\n\tprivate _subDistance: Float64Array;\r\n\t/**@internal */\r\n\tprivate _segementCount: number;\r\n\t/**@internal */\r\n\tprivate _vertices1: Float32Array = null;\r\n\t/**@internal */\r\n\tprivate _vertices2: Float32Array = null;\r\n\t/**@internal */\r\n\tprivate _vertexBuffer1: VertexBuffer3D;\r\n\t/**@internal */\r\n\tprivate _vertexBuffer2: VertexBuffer3D;\r\n\t/**@internal */\r\n\tprivate _lastFixedVertexPosition: Vector3 = new Vector3();\r\n\t/**@internal */\r\n\tprotected _owner: TrailFilter;\r\n\r\n\tprivate tmpColor: Color = new Color();\r\n\t/** @private */\r\n\tprivate _disappearBoundsMode: Boolean = false;\r\n\r\n\tconstructor(owner: TrailFilter) {\r\n\t\tsuper(MeshTopology.TriangleStrip, DrawType.DrawArray);\r\n\t\tthis._owner = owner;\r\n\t\t//初始化_segementCount\r\n\t\tthis.bufferState = new BufferState();\r\n\t\tthis._segementCount = this._increaseSegementCount;\r\n\r\n\t\tthis._resizeData(this._segementCount, this.bufferState);\r\n\t\t// var bounds: Bounds = this._owner._owner.trailRenderer.bounds;\r\n\t\t// var sprite3dPosition: Vector3 = this._owner._owner.transform.position;\r\n\t\t// bounds.setMin(sprite3dPosition);\r\n\t\t// bounds.setMax(sprite3dPosition);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _resizeData(segementCount: number, bufferState: BufferState): void {\r\n\t\tthis._subBirthTime = new Float32Array(segementCount);\r\n\t\tthis._subDistance = new Float64Array(segementCount);\r\n\r\n\t\tvar vertexCount: number = segementCount * 2;\r\n\t\tvar vertexDeclaration1: VertexDeclaration = VertexTrail.vertexDeclaration1;\r\n\t\tvar vertexDeclaration2: VertexDeclaration = VertexTrail.vertexDeclaration2;\r\n\t\tvar vertexBuffers: VertexBuffer3D[] = [];\r\n\t\tvar vertexbuffer1Size: number = vertexCount * vertexDeclaration1.vertexStride;\r\n\t\tvar vertexbuffer2Size: number = vertexCount * vertexDeclaration2.vertexStride;\r\n\t\tvar memorySize: number = vertexbuffer1Size + vertexbuffer2Size;\r\n\t\tthis._vertices1 = new Float32Array(vertexCount * this._floatCountPerVertices1);\r\n\t\tthis._vertices2 = new Float32Array(vertexCount * this._floatCountPerVertices2);\r\n\t\tthis._vertexBuffer1 = LayaGL.renderOBJCreate.createVertexBuffer3D(vertexbuffer1Size, BufferUsage.Dynamic, false);\r\n\t\tthis._vertexBuffer1.vertexDeclaration = vertexDeclaration1;\r\n\t\tthis._vertexBuffer2 = LayaGL.renderOBJCreate.createVertexBuffer3D(vertexbuffer2Size, BufferUsage.Dynamic, false);\r\n\t\tthis._vertexBuffer2.vertexDeclaration = vertexDeclaration2;\r\n\r\n\t\tvertexBuffers.push(this._vertexBuffer1);\r\n\t\tvertexBuffers.push(this._vertexBuffer2);\r\n\t\t// bufferState.bind();\r\n\t\t// bufferState.applyVertexBuffers(vertexBuffers);\r\n\t\t// bufferState.unBind();\r\n\t\tbufferState.applyState(vertexBuffers, null);\r\n\t\tResource._addMemory(memorySize, memorySize);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _resetData(): void {\r\n\t\tvar count: number = this._endIndex - this._activeIndex;\r\n\t\t//提前取出旧数据，否则_resizeData会覆盖\r\n\t\tvar oldVertices1: Float32Array = new Float32Array(this._vertices1.buffer, this._floatCountPerVertices1 * 2 * this._activeIndex * 4, this._floatCountPerVertices1 * 2 * count);\r\n\t\tvar oldVertices2: Float32Array = new Float32Array(this._vertices2.buffer, this._floatCountPerVertices2 * 2 * this._activeIndex * 4, this._floatCountPerVertices2 * 2 * count);\r\n\t\tvar oldSubDistance: Float64Array = new Float64Array(this._subDistance.buffer, this._activeIndex * 8, count);//修改距离数据\r\n\t\tvar oldSubBirthTime: Float32Array = new Float32Array(this._subBirthTime.buffer, this._activeIndex * 4, count);//修改出生时间数据\r\n\r\n\t\tif (count === this._segementCount) {//当前count=_segementCount表示已满,需要扩充\r\n\t\t\tvar memorySize: number = this._vertexBuffer1._byteLength + this._vertexBuffer2._byteLength;\r\n\t\t\tResource._addMemory(-memorySize, -memorySize);\r\n\t\t\tthis._vertexBuffer1.destroy();\r\n\t\t\tthis._vertexBuffer2.destroy();\r\n\t\t\tthis._segementCount += this._increaseSegementCount;\r\n\t\t\tthis._resizeData(this._segementCount, this.bufferState);\r\n\t\t}\r\n\r\n\t\tthis._vertices1.set(oldVertices1, 0);\r\n\t\tthis._vertices2.set(oldVertices2, 0);\r\n\t\tthis._subDistance.set(oldSubDistance, 0);\r\n\t\tthis._subBirthTime.set(oldSubBirthTime, 0);\r\n\r\n\t\tthis._endIndex = count;\r\n\t\tthis._activeIndex = 0;\r\n\t\tthis._vertexBuffer1.setData(this._vertices1.buffer, 0, this._floatCountPerVertices1 * 2 * this._activeIndex * 4, this._floatCountPerVertices1 * 2 * count * 4);\r\n\t\tthis._vertexBuffer2.setData(this._vertices2.buffer, 0, this._floatCountPerVertices2 * 2 * this._activeIndex * 4, this._floatCountPerVertices2 * 2 * count * 4);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * 更新Trail数据\r\n\t */\r\n\t_updateTrail(camera: Camera, lastPosition: Vector3, position: Vector3): void {\r\n\t\tif (!Vector3.equals(lastPosition, position)) {//位置不变不产生分段\r\n\t\t\tif ((this._endIndex - this._activeIndex) === 0)\r\n\t\t\t\tthis._addTrailByFirstPosition(camera, position);//当前分段全部消失时,需要添加一个首分段\r\n\t\t\telse\r\n\t\t\t\tthis._addTrailByNextPosition(camera, position);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * 通过起始位置添加TrailRenderElement起始数据\r\n\t */\r\n\tprivate _addTrailByFirstPosition(camera: Camera, position: Vector3): void {\r\n\t\t(this._endIndex === this._segementCount) && (this._resetData());\r\n\t\tthis._subDistance[this._endIndex] = 0;\r\n\t\tthis._subBirthTime[this._endIndex] = this._owner._curtime;\r\n\t\tthis._endIndex++;\r\n\t\tposition.cloneTo(this._lastFixedVertexPosition);\r\n\t\tthis._needAddFirstVertex = true;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * 通过位置更新TrailRenderElement数据\r\n\t */\r\n\tprivate _addTrailByNextPosition(camera: Camera, position: Vector3): void {\r\n\t\tvar delVector3: Vector3 = TrailGeometry._tempVector30;\r\n\t\tvar pointAtoBVector3: Vector3 = TrailGeometry._tempVector31;\r\n\t\tswitch (this._owner.alignment) {\r\n\t\t\tcase TrailAlignment.View:\r\n\t\t\t\tvar cameraMatrix: Matrix4x4 = camera.viewMatrix;\r\n\t\t\t\tVector3.transformCoordinate(position, cameraMatrix, TrailGeometry._tempVector33);\r\n\t\t\t\tVector3.transformCoordinate(this._lastFixedVertexPosition, cameraMatrix, TrailGeometry._tempVector34);\r\n\t\t\t\tVector3.subtract(TrailGeometry._tempVector33, TrailGeometry._tempVector34, delVector3);\r\n\t\t\t\tVector3.cross(TrailGeometry._tempVector33, delVector3, pointAtoBVector3);\r\n\t\t\t\tbreak;\r\n\t\t\tcase TrailAlignment.TransformZ:\r\n\t\t\t\tVector3.subtract(position, this._lastFixedVertexPosition, delVector3);\r\n\t\t\t\tvar forward: Vector3 = TrailGeometry._tempVector32;\r\n\t\t\t\t(this._owner._ownerRender.owner as Sprite3D).transform.getForward(forward);\r\n\t\t\t\tVector3.cross(delVector3, forward, pointAtoBVector3);//实时更新模式需要和view一样根据当前forward重新计算\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\tVector3.normalize(pointAtoBVector3, pointAtoBVector3);\r\n\t\tVector3.scale(pointAtoBVector3, this._owner.widthMultiplier / 2, pointAtoBVector3);\r\n\r\n\t\tvar delLength: number = Vector3.scalarLength(delVector3);\r\n\t\tvar tempEndIndex: number;\r\n\t\tvar offset: number;\r\n\r\n\t\tif (this._needAddFirstVertex) {\r\n\t\t\tthis._updateVerticesByPositionData(position, pointAtoBVector3, this._endIndex - 1);//延迟更新首分段数据\r\n\t\t\tthis._needAddFirstVertex = false;\r\n\t\t}\r\n\r\n\t\tif (delLength - this._owner.minVertexDistance >= MathUtils3D.zeroTolerance) {//大于最小距离产生新分段\r\n\t\t\tif (this._isTempEndVertex) {\r\n\t\t\t\ttempEndIndex = this._endIndex - 1;\r\n\t\t\t\toffset = delLength - this._subDistance[tempEndIndex];\r\n\t\t\t\tthis._updateVerticesByPosition(position, pointAtoBVector3, delLength, tempEndIndex);\r\n\t\t\t\tthis._owner._totalLength += offset;//不产生新分段要通过差值更新总距离\r\n\t\t\t} else {\r\n\t\t\t\t(this._endIndex === this._segementCount) && (this._resetData());\r\n\t\t\t\tthis._updateVerticesByPosition(position, pointAtoBVector3, delLength, this._endIndex);\r\n\t\t\t\tthis._owner._totalLength += delLength;\r\n\t\t\t\tthis._endIndex++;\r\n\t\t\t}\r\n\t\t\tposition.cloneTo(this._lastFixedVertexPosition);\r\n\t\t\tthis._isTempEndVertex = false;\r\n\t\t} else {\r\n\t\t\tif (this._isTempEndVertex) {\r\n\t\t\t\ttempEndIndex = this._endIndex - 1;\r\n\t\t\t\toffset = delLength - this._subDistance[tempEndIndex];\r\n\t\t\t\tthis._updateVerticesByPosition(position, pointAtoBVector3, delLength, tempEndIndex);\r\n\t\t\t\tthis._owner._totalLength += offset;//不产生新分段要通过差值更新总距离\r\n\t\t\t} else {\r\n\t\t\t\t(this._endIndex === this._segementCount) && (this._resetData());\r\n\t\t\t\tthis._updateVerticesByPosition(position, pointAtoBVector3, delLength, this._endIndex);\r\n\t\t\t\tthis._owner._totalLength += delLength;\r\n\t\t\t\tthis._endIndex++;\r\n\t\t\t}\r\n\t\t\tthis._isTempEndVertex = true;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * 通过位置更新顶点数据\r\n\t */\r\n\tprivate _updateVerticesByPositionData(position: Vector3, pointAtoBVector3: Vector3, index: number): void {\r\n\t\tvar vertexOffset: number = this._floatCountPerVertices1 * 2 * index;\r\n\t\tvar curtime: number = this._owner._curtime;\r\n\t\tthis._vertices1[vertexOffset] = position.x;\r\n\t\tthis._vertices1[vertexOffset + 1] = position.y;\r\n\t\tthis._vertices1[vertexOffset + 2] = position.z;\r\n\t\tthis._vertices1[vertexOffset + 3] = -pointAtoBVector3.x;\r\n\t\tthis._vertices1[vertexOffset + 4] = -pointAtoBVector3.y;\r\n\t\tthis._vertices1[vertexOffset + 5] = -pointAtoBVector3.z;\r\n\t\tthis._vertices1[vertexOffset + 6] = curtime;\r\n\t\tthis._vertices1[vertexOffset + 7] = 1.0;\r\n\r\n\t\tthis._vertices1[vertexOffset + 8] = position.x;\r\n\t\tthis._vertices1[vertexOffset + 9] = position.y;\r\n\t\tthis._vertices1[vertexOffset + 10] = position.z;\r\n\t\tthis._vertices1[vertexOffset + 11] = pointAtoBVector3.x;\r\n\t\tthis._vertices1[vertexOffset + 12] = pointAtoBVector3.y;\r\n\t\tthis._vertices1[vertexOffset + 13] = pointAtoBVector3.z;\r\n\t\tthis._vertices1[vertexOffset + 14] = curtime;\r\n\t\tthis._vertices1[vertexOffset + 15] = 0.0;\r\n\r\n\t\t//添加新的顶点时，需要更新包围盒\r\n\t\tvar bounds: Bounds = this._owner._ownerRender.bounds;\r\n\t\tvar min: Vector3 = bounds.getMin();\r\n\t\tvar max: Vector3 = bounds.getMax();\r\n\t\tvar up: Vector3 = TrailGeometry._tempVector35;\r\n\t\tvar down: Vector3 = TrailGeometry._tempVector36;\r\n\t\tvar out: Vector3 = TrailGeometry._tempVector32;\r\n\t\tVector3.add(position, pointAtoBVector3, up);\r\n\t\tVector3.subtract(position, pointAtoBVector3, down);\r\n\r\n\t\tVector3.min(down, up, out);\r\n\t\tVector3.min(min, out, min);\r\n\t\tbounds.setMin(min);\r\n\r\n\t\tVector3.max(up, down, out);\r\n\t\tVector3.max(max, out, max);\r\n\t\tbounds.setMax(max);\r\n\r\n\r\n\t\tvar floatCount: number = this._floatCountPerVertices1 * 2;\r\n\t\tthis._vertexBuffer1.setData(this._vertices1.buffer, vertexOffset * 4, vertexOffset * 4, floatCount * 4);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * 通过位置更新顶点数据、距离、出生时间\r\n\t */\r\n\tprivate _updateVerticesByPosition(position: Vector3, pointAtoBVector3: Vector3, delDistance: number, index: number): void {\r\n\t\tthis._updateVerticesByPositionData(position, pointAtoBVector3, index);\r\n\t\tthis._subDistance[index] = delDistance;\r\n\t\tthis._subBirthTime[index] = this._owner._curtime;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * 更新VertexBuffer2数据\r\n\t */\r\n\t_updateVertexBufferUV(): void {\r\n\t\tvar bounds: Bounds;\r\n\t\tvar min: Vector3, max: Vector3;\r\n\t\tif (this._disappearBoundsMode) {//如果有顶点消失时候，需要重新计算包围盒\r\n\t\t\tbounds = this._owner._ownerRender.bounds;\r\n\t\t\tvar sprite3dPosition: Vector3 = (this._owner._ownerRender.owner as Sprite3D).transform.position;\r\n\t\t\tbounds.setMin(sprite3dPosition);\r\n\t\t\tbounds.setMax(sprite3dPosition);\r\n\t\t\tmin = bounds.getMin();\r\n\t\t\tmax = bounds.getMax();\r\n\t\t}\r\n\t\tvar vertexCount: number = this._endIndex;\r\n\t\tvar curLength: number = 0;\r\n\r\n\t\tvar gradient: Gradient = this._owner.colorGradient;\r\n\t\tvar startAlphaIndex: number = gradient.colorAlphaKeysCount - 1;\r\n\t\tvar startColorIndex: number = gradient.colorRGBKeysCount - 1;\r\n\r\n\t\tvar totalLength: number = this._owner._totalLength;\r\n\t\tvar stride: number = this._floatCountPerVertices2 * 2;\r\n\t\tfor (var i: number = this._activeIndex; i < vertexCount; i++) {\r\n\t\t\t(i !== this._activeIndex) && (curLength += this._subDistance[i]);\r\n\t\t\tvar uvX: number;\r\n\t\t\tvar lerpFactor: number;\r\n\t\t\tif (this._owner.textureMode == TrailTextureMode.Stretch) {\r\n\t\t\t\tuvX = 1.0 - curLength / totalLength;\r\n\t\t\t\tlerpFactor = uvX;\r\n\t\t\t} else {\r\n\t\t\t\tlerpFactor = 1.0 - curLength / totalLength;\r\n\t\t\t\tuvX = 1.0 - (totalLength - curLength);\r\n\t\t\t}\r\n\r\n\t\t\tstartColorIndex = gradient.evaluateColorRGB(lerpFactor, this.tmpColor, startColorIndex, true);\r\n\t\t\tstartAlphaIndex = gradient.evaluateColorAlpha(lerpFactor, this.tmpColor, startAlphaIndex, true);\r\n\r\n\t\t\tvar index: number = i * stride;\r\n\t\t\tthis._vertices2[index + 0] = uvX;\r\n\t\t\tthis._vertices2[index + 1] = this.tmpColor.r;\r\n\t\t\tthis._vertices2[index + 2] = this.tmpColor.g;\r\n\t\t\tthis._vertices2[index + 3] = this.tmpColor.b;\r\n\t\t\tthis._vertices2[index + 4] = this.tmpColor.a;\r\n\r\n\t\t\tthis._vertices2[index + 5] = uvX;\r\n\t\t\tthis._vertices2[index + 6] = this.tmpColor.r;\r\n\t\t\tthis._vertices2[index + 7] = this.tmpColor.g;\r\n\t\t\tthis._vertices2[index + 8] = this.tmpColor.b;\r\n\t\t\tthis._vertices2[index + 9] = this.tmpColor.a;\r\n\r\n\t\t\tif (this._disappearBoundsMode) {\r\n\t\t\t\tvar posOffset = this._floatCountPerVertices1 * 2 * i;\r\n\t\t\t\tvar pos: Vector3 = TrailGeometry._tempVector32;\r\n\t\t\t\tvar up: Vector3 = TrailGeometry._tempVector33;\r\n\t\t\t\tvar side: Vector3 = TrailGeometry._tempVector34;\r\n\r\n\t\t\t\tpos.setValue(this._vertices1[posOffset + 0], this._vertices1[posOffset + 1], this._vertices1[posOffset + 2]);\r\n\t\t\t\tup.setValue(this._vertices1[posOffset + 3], this._vertices1[posOffset + 4], this._vertices1[posOffset + 5]);\r\n\r\n\t\t\t\tVector3.add(pos, up, side);\r\n\t\t\t\tVector3.min(side, min, min);\r\n\t\t\t\tVector3.max(side, max, max);\r\n\t\t\t\tVector3.subtract(pos, up, side);\r\n\t\t\t\tVector3.min(side, min, min);\r\n\t\t\t\tVector3.max(side, max, max);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (this._disappearBoundsMode) {\r\n\t\t\tbounds.setMin(min);\r\n\t\t\tbounds.setMax(max);\r\n\t\t\tthis._disappearBoundsMode = false;\r\n\t\t}\r\n\t\tvar offset: number = this._activeIndex * stride;\r\n\t\tthis._vertexBuffer2.setData(this._vertices2.buffer, offset * 4, offset * 4, (vertexCount * stride - offset) * 4);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_updateDisappear(): void {\r\n\t\tvar count: number = this._endIndex;\r\n\t\tfor (var i: number = this._activeIndex; i < count; i++) {\r\n\t\t\tif (this._owner._curtime - this._subBirthTime[i] >= this._owner.time + MathUtils3D.zeroTolerance) {\r\n\t\t\t\tvar nextIndex: number = i + 1;\r\n\t\t\t\tif (nextIndex !== count)\r\n\t\t\t\t\tthis._owner._totalLength -= this._subDistance[nextIndex];//移除分段要减去下一分段到当前分段的距离\r\n\r\n\t\t\t\tif (this._isTempEndVertex && (nextIndex === count - 1)) {//如果只剩最后一分段要将其转化为固定分段\r\n\t\t\t\t\tvar fixedPos: Vector3 = this._lastFixedVertexPosition;\r\n\t\t\t\t\tfixedPos.x = this._vertices1[0];\r\n\t\t\t\t\tfixedPos.y = this._vertices1[1];\r\n\t\t\t\t\tfixedPos.z = this._vertices1[2];\r\n\t\t\t\t\tthis._isTempEndVertex = false;\r\n\t\t\t\t}\r\n\t\t\t\tthis._activeIndex++;\r\n\t\t\t\tthis._disappearBoundsMode = true;\r\n\t\t\t} else {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\t_getType(): number {\r\n\t\treturn TrailGeometry._type;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @internal\r\n\t * @override\r\n\t */\r\n\t_prepareRender(state: RenderContext3D): boolean {\r\n\t\treturn this._endIndex - this._activeIndex > 1;//当前分段为0或1时不渲染\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @internal\r\n\t * @override\r\n\t */\r\n\t_updateRenderParams(state: RenderContext3D): void {\r\n\t\t//this._bufferState.bind();\r\n\t\tthis.clearRenderParams();\r\n\t\tvar start: number = this._activeIndex * 2;\r\n\t\tvar count: number = this._endIndex * 2 - start;\r\n\t\tthis.setDrawArrayParams(start, count);\r\n\t\t// LayaGL.renderDrawConatext.drawArrays(MeshTopology.TriangleStrip,start,count);\r\n\t\t// Stat.trianglesFaces += count - 2;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tdestroy(): void {\r\n\t\tsuper.destroy();\r\n\t\tvar memorySize: number = this._vertexBuffer1._byteLength + this._vertexBuffer2._byteLength;\r\n\t\tResource._addMemory(-memorySize, -memorySize);\r\n\t\tthis.bufferState.destroy();\r\n\t\tthis._vertexBuffer1.destroy();\r\n\t\tthis._vertexBuffer2.destroy();\r\n\r\n\t\tthis.bufferState = null;\r\n\t\tthis._vertices1 = null;\r\n\t\tthis._vertexBuffer1 = null;\r\n\t\tthis._vertices2 = null;\r\n\t\tthis._vertexBuffer2 = null;\r\n\t\tthis._subBirthTime = null;\r\n\t\tthis._subDistance = null;\r\n\t\tthis._lastFixedVertexPosition = null;\r\n\t\tthis._disappearBoundsMode = false;\r\n\t}\r\n\r\n\tclear(): void {\r\n\t\tthis._activeIndex = 0;\r\n\t\tthis._endIndex = 0;\r\n\t\tthis._disappearBoundsMode = false;\r\n\t\tthis._subBirthTime.fill(0);\r\n\t\tthis._subDistance.fill(0);\r\n\t\tthis._segementCount = 0;\r\n\t\tthis._isTempEndVertex = false;\r\n\t\tthis._needAddFirstVertex = false;\r\n\t\tthis._lastFixedVertexPosition.setValue(0, 0, 0);\r\n\t}\r\n}\r\n\r\n","import { Color } from \"../../../maths/Color\";\r\nimport { Vector4 } from \"../../../maths/Vector4\";\r\nimport { RenderState } from \"../../../RenderEngine/RenderShader/RenderState\";\r\nimport { Shader3D } from \"../../../RenderEngine/RenderShader/Shader3D\";\r\nimport { BaseTexture } from \"../../../resource/BaseTexture\";\r\nimport { Material, MaterialRenderMode } from \"../material/Material\";\r\n\r\n/**\r\n * <code>TrailMaterial</code> 类用于实现拖尾材质。\r\n */\r\nexport class TrailMaterial extends Material {\r\n\r\n\r\n\t/** 默认材质，禁止修改*/\r\n\tstatic defaultMaterial: TrailMaterial;\r\n\t/**@internal */\r\n\tstatic MAINTEXTURE: number;\r\n\t/**@internal */\r\n\tstatic TINTCOLOR: number;\r\n\t/**@internal */\r\n\tstatic TILINGOFFSET: number;\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic __initDefine__(): void {\r\n\t\tTrailMaterial.MAINTEXTURE = Shader3D.propertyNameToID(\"u_MainTexture\");\r\n\t\tTrailMaterial.TINTCOLOR = Shader3D.propertyNameToID(\"u_MainColor\");\r\n\t\tTrailMaterial.TILINGOFFSET = Shader3D.propertyNameToID(\"u_TilingOffset\");\r\n\t}\r\n\r\n\t/**\r\n\t * 获取颜色。\r\n\t * @return 颜色。\r\n\t */\r\n\tget color(): Color {\r\n\t\treturn (<Color>this._shaderValues.getColor(TrailMaterial.TINTCOLOR));\r\n\t}\r\n\r\n\t/**\r\n\t * 设置颜色。\r\n\t * @param value 颜色。\r\n\t */\r\n\tset color(value: Color) {\r\n\t\tthis._shaderValues.setColor(TrailMaterial.TINTCOLOR, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 获取贴图。\r\n\t * @return 贴图。\r\n\t */\r\n\tget texture(): BaseTexture {\r\n\t\treturn this._shaderValues.getTexture(TrailMaterial.MAINTEXTURE);\r\n\t}\r\n\r\n\t/**\r\n\t * 设置贴图。\r\n\t * @param value 贴图。\r\n\t */\r\n\tset texture(value: BaseTexture) {\r\n\t\tif (value)\r\n\t\t\tthis._shaderValues.addDefine(TrailMaterial.SHADERDEFINE_MAINTEXTURE);\r\n\t\telse\r\n\t\t\tthis._shaderValues.removeDefine(TrailMaterial.SHADERDEFINE_MAINTEXTURE);\r\n\t\tthis._shaderValues.setTexture(TrailMaterial.MAINTEXTURE, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 获取纹理平铺和偏移。\r\n\t * @return 纹理平铺和偏移。\r\n\t */\r\n\tget tilingOffset(): Vector4 {\r\n\t\treturn (<Vector4>this._shaderValues.getVector(TrailMaterial.TILINGOFFSET));\r\n\t}\r\n\r\n\t/**\r\n\t * 设置纹理平铺和偏移。\r\n\t * @param value 纹理平铺和偏移。\r\n\t */\r\n\tset tilingOffset(value: Vector4) {\r\n\t\tif (value) {\r\n\t\t\tthis._shaderValues.setVector(TrailMaterial.TILINGOFFSET, value);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis._shaderValues.getVector(TrailMaterial.TILINGOFFSET).setValue(1.0, 1.0, 0.0, 0.0);\r\n\t\t}\r\n\t}\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.setShaderName(\"Trail\");\r\n\t\tthis.materialRenderMode = MaterialRenderMode.RENDERMODE_ALPHABLENDED;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t * @override\r\n\t */\r\n\tclone(): any {\r\n\t\tvar dest: TrailMaterial = new TrailMaterial();\r\n\t\tthis.cloneTo(dest);\r\n\t\treturn dest;\r\n\t}\r\n\r\n\t//----------------deprecated----------------\r\n\t/**\r\n\t * @deprecated\r\n\t * 渲染状态_透明混合。\r\n\t */\r\n\tstatic RENDERMODE_ALPHABLENDED: number = 0;\r\n\r\n\t/**\r\n\t* @deprecated\r\n\t* 渲染状态_加色法混合。\r\n\t*/\r\n\tstatic RENDERMODE_ADDTIVE: number = 1;\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * 渲染模式。现在可以直接使用materialRenderMode\r\n\t */\r\n\tset renderMode(value: number) {\r\n\t\tswitch (value) {\r\n\t\t\tcase TrailMaterial.RENDERMODE_ADDTIVE:\r\n\t\t\t\tthis.renderQueue = Material.RENDERQUEUE_TRANSPARENT;\r\n\t\t\t\tthis.depthWrite = false;\r\n\t\t\t\tthis.cull = RenderState.CULL_NONE;\r\n\t\t\t\tthis.blend = RenderState.BLEND_ENABLE_ALL;\r\n\t\t\t\tthis.blendSrc = RenderState.BLENDPARAM_SRC_ALPHA;\r\n\t\t\t\tthis.blendDst = RenderState.BLENDPARAM_ONE;\r\n\t\t\t\tthis.alphaTest = false;\r\n\t\t\t\tthis._shaderValues.addDefine(TrailMaterial.SHADERDEFINE_ADDTIVEFOG);\r\n\t\t\t\tbreak;\r\n\t\t\tcase TrailMaterial.RENDERMODE_ALPHABLENDED:\r\n\t\t\t\tthis.renderQueue = Material.RENDERQUEUE_TRANSPARENT;\r\n\t\t\t\tthis.depthWrite = false;\r\n\t\t\t\tthis.cull = RenderState.CULL_NONE;\r\n\t\t\t\tthis.blend = RenderState.BLEND_ENABLE_ALL;\r\n\t\t\t\tthis.blendSrc = RenderState.BLENDPARAM_SRC_ALPHA;\r\n\t\t\t\tthis.blendDst = RenderState.BLENDPARAM_ONE_MINUS_SRC_ALPHA;\r\n\t\t\t\tthis.alphaTest = false;\r\n\t\t\t\tthis._shaderValues.removeDefine(TrailMaterial.SHADERDEFINE_ADDTIVEFOG);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(\"ShurikenParticleMaterial : renderMode value error.\");\r\n\t\t}\r\n\t}\r\n}\r\n\r\n","import { Camera } from \"../Camera\";\r\nimport { FloatKeyframe } from \"../FloatKeyframe\";\r\nimport { GeometryElement } from \"../GeometryElement\";\r\nimport { Gradient } from \"../Gradient\";\r\nimport { GradientMode } from \"../GradientMode\";\r\nimport { BaseRender } from \"../render/BaseRender\";\r\nimport { RenderContext3D } from \"../render/RenderContext3D\";\r\nimport { RenderElement } from \"../render/RenderElement\";\r\nimport { TrailGeometry } from \"./TrailGeometry\";\r\nimport { TrailMaterial } from \"./TrailMaterial\";\r\nimport { TrailRenderer } from \"./TrailRenderer\";\r\nimport { Sprite3D } from \"../Sprite3D\";\r\nimport { Shader3D } from \"../../../RenderEngine/RenderShader/Shader3D\";\r\nimport { LayaGL } from \"../../../layagl/LayaGL\";\r\nimport { TrailAlignment } from \"./TrailAlignment\";\r\nimport { TrailTextureMode } from \"../TrailTextureMode\";\r\nimport { Color } from \"../../../maths/Color\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\n\r\n\r\n/**\r\n * <code>TrailFilter</code> 类用于创建拖尾过滤器。\r\n */\r\nexport class TrailFilter {\r\n\tstatic CURTIME: number ;\r\n\tstatic LIFETIME: number ;\r\n\tstatic WIDTHCURVE: number ;\r\n\tstatic WIDTHCURVEKEYLENGTH: number ;\r\n\r\n\tstatic __init__() {\r\n\t\tTrailFilter.CURTIME = Shader3D.propertyNameToID(\"u_CurTime\");\r\n\t\tTrailFilter.LIFETIME = Shader3D.propertyNameToID(\"u_LifeTime\");\r\n\t\tTrailFilter.WIDTHCURVE = Shader3D.propertyNameToID(\"u_WidthCurve\");\r\n\t\tTrailFilter.WIDTHCURVEKEYLENGTH = Shader3D.propertyNameToID(\"u_WidthCurveKeyLength\");\r\n\r\n\t\tconst spriteParms = LayaGL.renderOBJCreate.createGlobalUniformMap(\"Sprite3D\");\r\n\t\tspriteParms.addShaderUniform(TrailFilter.CURTIME, \"u_CurTime\");\r\n\t\tspriteParms.addShaderUniform(TrailFilter.LIFETIME, \"u_LifeTime\");\r\n\t\tspriteParms.addShaderUniform(TrailFilter.WIDTHCURVE, \"u_WidthCurve\");\r\n\t\tspriteParms.addShaderUniform(TrailFilter.WIDTHCURVEKEYLENGTH, \"u_WidthCurveKeyLength\");\r\n\r\n\r\n\t}\r\n\r\n\t/**@internal */\r\n\tprivate _minVertexDistance: number;\r\n\t/**@internal */\r\n\tprivate _widthMultiplier: number;\r\n\t/**@internal */\r\n\tprivate _time: number;\r\n\t/**@internal */\r\n\tprivate _widthCurve: FloatKeyframe[];\r\n\t/**@internal */\r\n\tprivate _colorGradient: Gradient;\r\n\t/**@internal */\r\n\tprivate _textureMode: TrailTextureMode = TrailTextureMode.Stretch;\r\n\t/**@internal */\r\n\tprivate _trialGeometry: GeometryElement;\r\n\t/**@internal 拖尾总长度*/\r\n\t_totalLength: number = 0;\r\n\r\n\t_ownerRender: TrailRenderer;\r\n\t_lastPosition: Vector3 = new Vector3();\r\n\r\n\t_curtime: number = 0;\r\n\r\n\t/**轨迹准线。*/\r\n\talignment: TrailAlignment = TrailAlignment.View;\r\n\r\n\t/**\r\n\t * 获取淡出时间。\r\n\t * @return  淡出时间。\r\n\t */\r\n\tget time(): number {\r\n\t\treturn this._time;\r\n\t}\r\n\r\n\t/**\r\n\t * 设置淡出时间。\r\n\t * @param value 淡出时间。\r\n\t */\r\n\tset time(value: number) {\r\n\t\tthis._time = value;\r\n\t\tthis._ownerRender._shaderValues.setNumber(TrailFilter.LIFETIME, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 获取新旧顶点之间最小距离。\r\n\t * @return  新旧顶点之间最小距离。\r\n\t */\r\n\tget minVertexDistance(): number {\r\n\t\treturn this._minVertexDistance;\r\n\t}\r\n\r\n\t/**\r\n\t * 设置新旧顶点之间最小距离。\r\n\t * @param value 新旧顶点之间最小距离。\r\n\t */\r\n\tset minVertexDistance(value: number) {\r\n\t\tthis._minVertexDistance = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取宽度倍数。\r\n\t * @return  宽度倍数。\r\n\t */\r\n\tget widthMultiplier(): number {\r\n\t\treturn this._widthMultiplier;\r\n\t}\r\n\r\n\t/**\r\n\t * 设置宽度倍数。\r\n\t * @param value 宽度倍数。\r\n\t */\r\n\tset widthMultiplier(value: number) {\r\n\t\tthis._widthMultiplier = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取宽度曲线。\r\n\t * @return  宽度曲线。\r\n\t */\r\n\tget widthCurve(): FloatKeyframe[] {\r\n\t\treturn this._widthCurve;\r\n\t}\r\n\r\n\t/**\r\n\t * 设置宽度曲线。最多10个\r\n\t * @param value 宽度曲线。\r\n\t */\r\n\tset widthCurve(value: FloatKeyframe[]) {\r\n\t\tthis._widthCurve = value;\r\n\t\tvar widthCurveFloatArray: Float32Array = new Float32Array(value.length * 4);\r\n\t\tvar i: number, j: number, index: number = 0;\r\n\t\tfor (i = 0, j = value.length; i < j; i++) {\r\n\t\t\twidthCurveFloatArray[index++] = value[i].time;\r\n\t\t\twidthCurveFloatArray[index++] = value[i].inTangent;\r\n\t\t\twidthCurveFloatArray[index++] = value[i].outTangent;\r\n\t\t\twidthCurveFloatArray[index++] = value[i].value;\r\n\t\t}\r\n\t\tthis._ownerRender._shaderValues.setBuffer(TrailFilter.WIDTHCURVE, widthCurveFloatArray);\r\n\t\tthis._ownerRender._shaderValues.setInt(TrailFilter.WIDTHCURVEKEYLENGTH, value.length);\r\n\t}\r\n\r\n\t/**\r\n\t * 获取颜色梯度。\r\n\t * @return  颜色梯度。\r\n\t */\r\n\tget colorGradient(): Gradient {\r\n\t\treturn this._colorGradient;\r\n\t}\r\n\r\n\t/**\r\n\t * 设置颜色梯度。\r\n\t * @param value 颜色梯度。\r\n\t */\r\n\tset colorGradient(value: Gradient) {\r\n\t\tthis._colorGradient = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取纹理模式。\r\n\t * @return  纹理模式。\r\n\t */\r\n\tget textureMode(): TrailTextureMode {\r\n\t\treturn this._textureMode;\r\n\t}\r\n\r\n\t/**\r\n\t * 设置纹理模式。\r\n\t * @param value 纹理模式。\r\n\t */\r\n\tset textureMode(value: TrailTextureMode) {\r\n\t\tthis._textureMode = value;\r\n\t}\r\n\r\n\tconstructor(owner: TrailRenderer) {\r\n\t\tthis._ownerRender = owner;\r\n\t\tthis._initDefaultData();\r\n\t\tthis.addRenderElement();\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\taddRenderElement(): void {\r\n\t\tvar render: TrailRenderer = (<TrailRenderer>this._ownerRender);\r\n\t\tvar elements: RenderElement[] = render._renderElements;\r\n\t\tvar material: TrailMaterial = (<TrailMaterial>render.sharedMaterials[0]);\r\n\t\t(material) || (material = TrailMaterial.defaultMaterial);\r\n\t\tvar element: RenderElement = new RenderElement();\r\n\t\telement.setTransform((this._ownerRender.owner as Sprite3D)._transform);\r\n\t\telement.render = render;\r\n\t\telement.material = material;\r\n\t\tthis._trialGeometry = new TrailGeometry(this);\r\n\t\telement.setGeometry(this._trialGeometry);\r\n\t\telements.push(element);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_update(state: RenderContext3D): void {\r\n\t\tvar render: BaseRender = this._ownerRender;\r\n\t\tconst scene = this._ownerRender.owner.scene\r\n\t\tif(!scene)\r\n\t\t\treturn;\r\n\t\tthis._curtime += scene.timer._delta / 1000;\r\n\t\t//设置颜色\r\n\t\trender._shaderValues.setNumber(TrailFilter.CURTIME, this._curtime);\r\n\t\t//现在的位置记录\r\n\t\tvar curPos: Vector3 = (this._ownerRender.owner as Sprite3D).transform.position;\r\n\t\tvar element: TrailGeometry = (<TrailGeometry>render._renderElements[0]._geometry);\r\n\t\telement._updateDisappear();\r\n\t\telement._updateTrail((<Camera>state.camera), this._lastPosition, curPos);\r\n\t\telement._updateVertexBufferUV();\r\n\t\t//克隆到lastPosition\r\n\t\tcurPos.cloneTo(this._lastPosition);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_initDefaultData(): void {\r\n\t\tthis.time = 5.0;\r\n\t\tthis.minVertexDistance = 0.1;\r\n\t\tthis.widthMultiplier = 1;\r\n\t\tthis.textureMode = TrailTextureMode.Stretch;\r\n\r\n\t\tvar widthKeyFrames: FloatKeyframe[] = [];\r\n\t\tvar widthKeyFrame1: FloatKeyframe = new FloatKeyframe();\r\n\t\twidthKeyFrame1.time = 0;\r\n\t\twidthKeyFrame1.inTangent = 0;\r\n\t\twidthKeyFrame1.outTangent = 0;\r\n\t\twidthKeyFrame1.value = 1;\r\n\t\twidthKeyFrames.push(widthKeyFrame1);\r\n\t\tvar widthKeyFrame2: FloatKeyframe = new FloatKeyframe();\r\n\t\twidthKeyFrame2.time = 1;\r\n\t\twidthKeyFrame2.inTangent = 0;\r\n\t\twidthKeyFrame2.outTangent = 0;\r\n\t\twidthKeyFrame2.value = 1;\r\n\t\twidthKeyFrames.push(widthKeyFrame2);\r\n\t\tthis.widthCurve = widthKeyFrames;\r\n\r\n\t\tvar gradient: Gradient = new Gradient(2, 2);\r\n\t\tgradient.mode = GradientMode.Blend;\r\n\t\tgradient.addColorRGB(0, Color.WHITE);\r\n\t\tgradient.addColorRGB(1, Color.WHITE);\r\n\t\tgradient.addColorAlpha(0, 1);\r\n\t\tgradient.addColorAlpha(1, 1);\r\n\t\tthis.colorGradient = gradient;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tdestroy(): void {\r\n\t\tthis._trialGeometry.destroy();\r\n\t\tthis._trialGeometry = null;\r\n\t\tthis._widthCurve = null;\r\n\t\tthis._colorGradient = null;\r\n\t}\r\n\r\n\tclear(): void {\r\n\t\t(<TrailGeometry>this._trialGeometry).clear();\r\n\t\tthis._lastPosition.setValue(0, 0, 0);\r\n\t\tthis._curtime = 0;\r\n\t\tthis._totalLength = 0;\r\n\t}\r\n}\r\n\r\n","import { Sprite3D } from \"../Sprite3D\"\r\nimport { Transform3D } from \"../Transform3D\"\r\nimport { BaseRender } from \"../render/BaseRender\"\r\nimport { RenderContext3D } from \"../render/RenderContext3D\"\r\nimport { TrailFilter } from \"./TrailFilter\";\r\nimport { FloatKeyframe } from \"../FloatKeyframe\";\r\nimport { Gradient } from \"../Gradient\";\r\nimport { Component } from \"../../../components/Component\";\r\nimport { Bounds } from \"../../math/Bounds\";\r\nimport { TrailTextureMode } from \"../TrailTextureMode\"\r\nimport { TrailAlignment } from \"./TrailAlignment\"\r\nimport { Matrix4x4 } from \"../../../maths/Matrix4x4\";\r\n\r\n/**\r\n * <code>TrailRenderer</code> 类用于创建拖尾渲染器。\r\n */\r\nexport class TrailRenderer extends BaseRender {\r\n\r\n    /**@internal */\r\n    _trailFilter: TrailFilter;\r\n\r\n    protected _projectionViewWorldMatrix: Matrix4x4 = new Matrix4x4();\r\n\r\n    /**\r\n     * 实例化一个拖尾渲染器\r\n     */\r\n    constructor() {\r\n        super();\r\n        this._supportOctree = false;\r\n\r\n    }\r\n\r\n    protected _onAdded(): void {\r\n        this._trailFilter = new TrailFilter(this);\r\n    }\r\n\r\n    /**\r\n     * 获取淡出时间。单位s\r\n     * @return  淡出时间。\r\n     */\r\n    get time(): number {\r\n        return this._trailFilter.time;\r\n    }\r\n\r\n    /**\r\n     * 设置淡出时间。单位s\r\n     * @param value 淡出时间。\r\n     */\r\n    set time(value: number) {\r\n        this._trailFilter.time = value;\r\n    }\r\n\r\n    /**\r\n     * 获取新旧顶点之间最小距离。\r\n     * @return  新旧顶点之间最小距离。\r\n     */\r\n    get minVertexDistance(): number {\r\n        return this._trailFilter.minVertexDistance;\r\n    }\r\n\r\n    /**\r\n     * 设置新旧顶点之间最小距离。\r\n     * @param value 新旧顶点之间最小距离。\r\n     */\r\n    set minVertexDistance(value: number) {\r\n        this._trailFilter.minVertexDistance = value;\r\n    }\r\n\r\n    /**\r\n     * 获取宽度倍数。\r\n     * @return  宽度倍数。\r\n     */\r\n    get widthMultiplier(): number {\r\n        return this._trailFilter.widthMultiplier;\r\n    }\r\n\r\n    /**\r\n     * 设置宽度倍数。\r\n     * @param value 宽度倍数。\r\n     */\r\n    set widthMultiplier(value: number) {\r\n        this._trailFilter.widthMultiplier = value;\r\n    }\r\n\r\n    /**\r\n     * 获取宽度曲线。\r\n     * @return  宽度曲线。\r\n     */\r\n    get widthCurve(): FloatKeyframe[] {\r\n        return this._trailFilter.widthCurve;\r\n    }\r\n\r\n    /**\r\n     * 设置宽度曲线。最多10个\r\n     * @param value 宽度曲线。\r\n     */\r\n    set widthCurve(value: FloatKeyframe[]) {\r\n        this._trailFilter.widthCurve = value;\r\n    }\r\n\r\n    /**\r\n     * 获取颜色梯度。\r\n     * @return  颜色梯度。\r\n     */\r\n    get colorGradient(): Gradient {\r\n        return this._trailFilter.colorGradient;\r\n    }\r\n\r\n    /**\r\n     * 设置颜色梯度。\r\n     * @param value 颜色梯度。\r\n     */\r\n    set colorGradient(value: Gradient) {\r\n        this._trailFilter.colorGradient = value;\r\n    }\r\n\r\n    /**\r\n     * 获取纹理模式。\r\n     * @return  纹理模式。\r\n     */\r\n    get textureMode(): TrailTextureMode {\r\n        return this._trailFilter.textureMode;\r\n    }\r\n\r\n    /**\r\n     * 设置纹理模式。\r\n     * @param value 纹理模式。\r\n     */\r\n    set textureMode(value: TrailTextureMode) {\r\n        this._trailFilter.textureMode = value;\r\n    }\r\n\r\n    get alignment(): TrailAlignment {\r\n        return this._trailFilter.alignment;\r\n    }\r\n\r\n    set alignment(value: TrailAlignment) {\r\n        this._trailFilter.alignment = value;\r\n    }\r\n\r\n    protected _onEnable(): void {\r\n        super._onEnable();\r\n\r\n        (this.owner as Sprite3D)._transform.position.cloneTo(this._trailFilter._lastPosition);//激活时需要重置上次位置\r\n    }\r\n\r\n    onUpdate(): void {\r\n        this._calculateBoundingBox();\r\n    }\r\n\r\n    /**\r\n     * 包围盒,只读,不允许修改其值。\r\n     */\r\n    get bounds(): Bounds {\r\n        return this._bounds;\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @internal\r\n     * @override\r\n     */\r\n    protected _calculateBoundingBox(): void {\r\n        let context = RenderContext3D._instance;\r\n        this.boundsChange = false;\r\n        this._trailFilter._update(context);\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @internal\r\n     * @override\r\n     */\r\n    _renderUpdate(state: RenderContext3D, transform: Transform3D): void {\r\n        super._renderUpdate(state, transform);\r\n    }\r\n\r\n    clear(): void {\r\n        this._trailFilter.clear();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _onDestroy() {\r\n        this._trailFilter.destroy();\r\n        super._onDestroy();\r\n    }\r\n\r\n    _cloneTo(dest: Component): void {\r\n        super._cloneTo(dest);\r\n        let render = dest as TrailRenderer;\r\n        render.time = this.time;\r\n        render.minVertexDistance = this.minVertexDistance;\r\n        //render.widthCurve = this.widthCurve;\r\n        var widthCurve: FloatKeyframe[] = [];\r\n        var widthCurveData: any[] = this.widthCurve;\r\n        for (let i = 0, n = this.widthCurve.length; i < n; i++) {\r\n            widthCurve.push(widthCurveData[i].clone());\r\n        }\r\n        render.widthCurve = widthCurve;\r\n        render.colorGradient = this.colorGradient.clone();\r\n        render.textureMode = this.textureMode;\r\n        render.alignment = this.alignment;\r\n    }\r\n\r\n}\r\n\r\n","import { TrailFilter } from \"./TrailFilter\";\r\nimport { TrailRenderer } from \"./TrailRenderer\";\r\nimport { FloatKeyframe } from \"../FloatKeyframe\"\r\nimport { Gradient } from \"../Gradient\"\r\nimport { RenderableSprite3D } from \"../RenderableSprite3D\"\r\nimport { Material } from \"../material/Material\"\r\nimport { Node } from \"../../../display/Node\"\r\nimport { Loader } from \"../../../net/Loader\"\r\nimport { Sprite3D } from \"../Sprite3D\";\r\nimport { Color } from \"../../../maths/Color\";\r\n\r\n/**\r\n * <code>TrailSprite3D</code> 类用于创建拖尾渲染精灵。\r\n */\r\nexport class TrailSprite3D extends RenderableSprite3D {\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic __init__(): void {}\r\n\r\n\t/** @internal */\r\n\tprivate _geometryFilter: TrailFilter;\r\n\r\n\t/**\r\n\t * Trail过滤器。\r\n\t */\r\n\tget trailFilter(): TrailFilter {\r\n\t\treturn (<TrailFilter>this._geometryFilter);\r\n\t}\r\n\r\n\t/**\r\n\t * Trail渲染器。\r\n\t */\r\n\tget trailRenderer(): TrailRenderer {\r\n\t\treturn (<TrailRenderer>this._render);\r\n\t}\r\n\r\n\tconstructor(name: string = null) {\r\n\t\tsuper(name);\r\n\t\tthis._render = this.addComponent(TrailRenderer);\r\n\t\tthis._geometryFilter = (this._render as TrailRenderer)._trailFilter;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\t_parse(data: any, spriteMap: any): void {\r\n\t\tsuper._parse(data, spriteMap);\r\n\t\tvar render: TrailRenderer = (<TrailRenderer>this._render);\r\n\t\tvar filter: TrailFilter = (<TrailFilter>this._geometryFilter);\r\n\t\tvar i: number, j: number;\r\n\t\tvar materials: any[] = data.materials;\r\n\t\tif (materials) {\r\n\t\t\tvar sharedMaterials: Material[] = render.sharedMaterials;\r\n\t\t\tvar materialCount: number = materials.length;\r\n\t\t\tsharedMaterials.length = materialCount;\r\n\t\t\tfor (i = 0; i < materialCount; i++)\r\n\t\t\t\tsharedMaterials[i] = Loader.getRes(materials[i].path);\r\n\t\t\trender.sharedMaterials = sharedMaterials;\r\n\t\t}\r\n\t\t//时间\r\n\t\tfilter.time = data.time;\r\n\t\t//最小顶点距离\r\n\t\tfilter.minVertexDistance = data.minVertexDistance;\r\n\t\tfilter.widthMultiplier = data.widthMultiplier;\r\n\t\tfilter.textureMode = data.textureMode;\r\n\t\t(data.alignment != null) && (filter.alignment = data.alignment);\r\n\t\t//widthCurve\r\n\t\tvar widthCurve: FloatKeyframe[] = [];\r\n\t\tvar widthCurveData: any[] = data.widthCurve;\r\n\t\tfor (i = 0, j = widthCurveData.length; i < j; i++) {\r\n\t\t\tvar trailkeyframe: FloatKeyframe = new FloatKeyframe();\r\n\t\t\ttrailkeyframe.time = widthCurveData[i].time;\r\n\t\t\ttrailkeyframe.inTangent = widthCurveData[i].inTangent;\r\n\t\t\ttrailkeyframe.outTangent = widthCurveData[i].outTangent;\r\n\t\t\ttrailkeyframe.value = widthCurveData[i].value;\r\n\t\t\twidthCurve.push(trailkeyframe);\r\n\t\t}\r\n\t\tfilter.widthCurve = widthCurve;\r\n\t\t//colorGradient\r\n\t\tvar colorGradientData: any = data.colorGradient;\r\n\t\tvar colorKeys: any[] = colorGradientData.colorKeys;\r\n\t\tvar alphaKeys: any[] = colorGradientData.alphaKeys;\r\n\t\tvar colorGradient: Gradient = new Gradient(colorKeys.length, alphaKeys.length);\r\n\t\tcolorGradient.mode = colorGradientData.mode;\r\n\r\n\t\tfor (i = 0, j = colorKeys.length; i < j; i++) {\r\n\t\t\tvar colorKey: any = colorKeys[i];\r\n\t\t\tcolorGradient.addColorRGB(colorKey.time, new Color(colorKey.value[0], colorKey.value[1], colorKey.value[2], 1.0));\r\n\t\t}\r\n\r\n\t\tfor (i = 0, j = alphaKeys.length; i < j; i++) {\r\n\t\t\tvar alphaKey: any = alphaKeys[i];\r\n\t\t\tcolorGradient.addColorAlpha(alphaKey.time, alphaKey.value);\r\n\t\t}\r\n\t\tfilter.colorGradient = colorGradient;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\t_cloneTo(destObject: any, srcSprite: Node, dstSprite: Node): void {\r\n\t\tsuper._cloneTo(destObject, srcSprite, dstSprite);\r\n\t}\r\n\r\n\tclear(): void {\r\n\t\t(this._render as TrailRenderer).clear();\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprotected _create(): Node {\r\n\t\treturn new Sprite3D();\r\n\t}\r\n}\r\n\r\n","import { ILaya3D } from \"../../../../ILaya3D\";\r\nimport { LayaGL } from \"../../../layagl/LayaGL\";\r\nimport { Matrix4x4 } from \"../../../maths/Matrix4x4\";\r\nimport { Vector4 } from \"../../../maths/Vector4\";\r\nimport { IRenderContext3D } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/IRenderContext3D\";\r\nimport { DefineDatas } from \"../../../RenderEngine/RenderShader/DefineDatas\";\r\nimport { ShaderInstance } from \"../../../RenderEngine/RenderShader/ShaderInstance\";\r\nimport { ShaderPass } from \"../../../RenderEngine/RenderShader/ShaderPass\";\r\nimport { SingletonList } from \"../../../utils/SingletonList\";\r\nimport { MeshInstanceGeometry } from \"../../graphics/MeshInstanceGeometry\";\r\nimport { InstanceRenderElementOBJ } from \"../../RenderObjs/RenderObj/InstanceRenderElementOBJ\";\r\nimport { Mesh } from \"../../resource/models/Mesh\";\r\nimport { Camera } from \"../Camera\";\r\nimport { MeshSprite3DShaderDeclaration } from \"../MeshSprite3DShaderDeclaration\";\r\nimport { SimpleSkinnedMeshRenderer } from \"../SimpleSkinnedMeshRenderer\";\r\nimport { Sprite3D } from \"../Sprite3D\";\r\nimport { Transform3D } from \"../Transform3D\";\r\nimport { BaseRender } from \"./BaseRender\";\r\nimport { RenderContext3D } from \"./RenderContext3D\";\r\nimport { RenderElement } from \"./RenderElement\";\r\n\r\nexport class InstanceRenderElement extends RenderElement {\r\n    /** @internal */\r\n    static maxInstanceCount: number = 1024;\r\n    /**@internal */\r\n    private static _pool: InstanceRenderElement[] = [];\r\n\r\n    static create(): InstanceRenderElement {\r\n        let elemet = InstanceRenderElement._pool.length > 0 ? InstanceRenderElement._pool.pop() : new InstanceRenderElement();\r\n        elemet._isInPool = false;\r\n        elemet.clear();\r\n        return elemet;\r\n    }\r\n    /**@internal */\r\n    _instanceBatchElementList: SingletonList<RenderElement>\r\n    /**@internal */\r\n    _isInPool: boolean;\r\n    /**\r\n     * @internal\r\n     * 判断是否需要更新数据 \r\n     * */\r\n    _isUpdataData: boolean;\r\n    /** @internal */\r\n    _invertFrontFace: boolean;\r\n    /**@internal recover renderData*/\r\n    private oriRendertype: number;\r\n    /**@internal */\r\n    private _InvertFront: boolean = false;\r\n\r\n    constructor() {\r\n        super();\r\n        this.setGeometry(new MeshInstanceGeometry(null));\r\n        this._instanceBatchElementList = new SingletonList();\r\n        this._isUpdataData = true;\r\n        this._invertFrontFace = false;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    getInvertFront(): boolean {\r\n        return this._invertFrontFace;\r\n    }\r\n\r\n    set InvertFront(value: boolean) {\r\n        this._InvertFront = value;\r\n\r\n    }\r\n\r\n    protected _createRenderElementOBJ() {\r\n        this._renderElementOBJ = LayaGL.renderOBJCreate.createInstanceRenderElement();\r\n    }\r\n\r\n    compileShader(context: IRenderContext3D) {\r\n        var passes: ShaderPass[] = this._subShader._passes;\r\n        this._renderElementOBJ._clearShaderInstance();\r\n        for (var j: number = 0, m: number = passes.length; j < m; j++) {\r\n            var pass: ShaderPass = passes[j];\r\n            //NOTE:this will cause maybe a shader not render but do prepare before，but the developer can avoide this manual,for example shaderCaster=false.\r\n            if (pass._pipelineMode !== context.pipelineMode)\r\n                continue;\r\n            var comDef: DefineDatas = RenderElement._compileDefine;\r\n\r\n            // todo\r\n            context.sceneShaderData._defineDatas.cloneTo(comDef);\r\n\r\n            comDef.addDefineDatas(context.configShaderData._defineDatas);\r\n\r\n            this.render && comDef.addDefineDatas(this.render._shaderValues._defineDatas);\r\n\r\n            comDef.addDefineDatas(this._renderElementOBJ._materialShaderData._defineDatas);\r\n            //add Instance Define\r\n            comDef.add(MeshSprite3DShaderDeclaration.SHADERDEFINE_GPU_INSTANCE);\r\n\r\n            var shaderIns: ShaderInstance = pass.withCompile(comDef);\r\n            this._renderElementOBJ._addShaderInstance(shaderIns);\r\n        }\r\n    }\r\n\r\n\r\n    _renderUpdatePre(context: RenderContext3D) {\r\n        var sceneMark: number = ILaya3D.Scene3D._updateMark;\r\n        var transform: Transform3D = this.transform;\r\n        context.renderElement = this;\r\n        //model local\r\n        var modelDataRender: boolean = (!!this.render) ? (sceneMark !== this.render._sceneUpdateMark || this.renderType !== this.render._updateRenderType) : false;\r\n        if (modelDataRender) {\r\n            this.render._renderUpdate(context, transform);\r\n            this.render._sceneUpdateMark = sceneMark;\r\n        }\r\n        //camera\r\n        var updateMark: number = Camera._updateMark;\r\n        if (true) {//此处处理更新为裁剪和合并后的，可避免浪费\r\n            this.render._renderUpdateWithCamera(context, transform);\r\n            this.oriRendertype = this.render._updateRenderType\r\n            this.render._updateMark = updateMark;\r\n            this.render._updateRenderType = this.renderType;\r\n            if (this._isUpdataData) {\r\n                let mesh = (this._geometry as MeshInstanceGeometry).subMesh._mesh;\r\n                this.updateInstanceData(mesh);\r\n                this._isUpdataData = false;\r\n            }\r\n        }\r\n\r\n        const subUbo = (!!this.render) ? this.render._subUniformBufferData : false;\r\n        if (subUbo) {\r\n            subUbo._needUpdate && BaseRender._transLargeUbO.updateSubData(subUbo);\r\n        }\r\n        this._renderElementOBJ._isRender = this._geometry._prepareRender(context);\r\n        this._geometry._updateRenderParams(context);\r\n        this.compileShader(context._contextOBJ);\r\n        this._geometry.instanceCount = this._instanceBatchElementList.length;\r\n        this._renderElementOBJ._invertFront = this.getInvertFront();\r\n    }\r\n\r\n    updateInstanceData(mesh: Mesh) {\r\n        mesh._setInstanceBuffer();\r\n        (this._renderElementOBJ as InstanceRenderElementOBJ).clear();\r\n        this._geometry.bufferState = mesh._instanceBufferState;\r\n        switch (mesh._instanceBufferStateType) {\r\n            case Mesh.MESH_INSTANCEBUFFER_TYPE_SIMPLEANIMATOR:\r\n                //worldMatrix\r\n                var worldMatrixData: Float32Array = (this._renderElementOBJ as InstanceRenderElementOBJ).getUpdateData(0, 16 * InstanceRenderElement.maxInstanceCount);\r\n                (this._renderElementOBJ as InstanceRenderElementOBJ).addUpdateBuffer(mesh._instanceWorldVertexBuffer, 16);\r\n                var insBatches = this._instanceBatchElementList;\r\n                var elements = insBatches.elements;\r\n                var count: number = insBatches.length;\r\n                (this._renderElementOBJ as InstanceRenderElementOBJ).drawCount = count;\r\n                let bone = (elements[0].render as SimpleSkinnedMeshRenderer).rootBone;\r\n                if (bone) {\r\n                    for (var i: number = 0; i < count; i++) {\r\n                        var mat: Matrix4x4 = (((elements[i].render) as SimpleSkinnedMeshRenderer).rootBone as Sprite3D)._transform.worldMatrix;\r\n                        worldMatrixData.set(mat.elements, i * 16);\r\n                    }\r\n                }\r\n                else {\r\n                    for (var i: number = 0; i < count; i++)\r\n                        worldMatrixData.set(elements[i].transform.worldMatrix.elements, i * 16);\r\n                }\r\n                //simpleAnimationData\r\n                var simpleAnimatorData: Float32Array = (this._renderElementOBJ as InstanceRenderElementOBJ).getUpdateData(1, 4 * InstanceRenderElement.maxInstanceCount);\r\n                if (bone) {\r\n                    for (var i: number = 0; i < count; i++) {\r\n                        var render: SimpleSkinnedMeshRenderer = (elements[i].render) as SimpleSkinnedMeshRenderer;\r\n                        render._computeAnimatorParamsData();\r\n                        var simpleAnimatorParams: Vector4 = render._simpleAnimatorParams;\r\n                        var offset: number = i * 4;\r\n                        simpleAnimatorData[offset] = simpleAnimatorParams.x;\r\n                        simpleAnimatorData[offset + 1] = simpleAnimatorParams.y;\r\n                    }\r\n                }\r\n                else {\r\n                    for (var i: number = 0; i < count; i++) {\r\n                        simpleAnimatorData[offset] = 0;\r\n                        simpleAnimatorData[offset + 1] = 0;\r\n                    }\r\n                }\r\n                (this._renderElementOBJ as InstanceRenderElementOBJ).addUpdateBuffer(mesh._instanceSimpleAniVertexBuffer, 4)\r\n                break;\r\n            case Mesh.MESH_INSTANCEBUFFER_TYPE_NORMAL:\r\n\r\n                var worldMatrixData: Float32Array = (this._renderElementOBJ as InstanceRenderElementOBJ).getUpdateData(0, 16 * InstanceRenderElement.maxInstanceCount);\r\n                (this._renderElementOBJ as InstanceRenderElementOBJ).addUpdateBuffer(mesh._instanceWorldVertexBuffer, 16);\r\n                var insBatches = this._instanceBatchElementList;\r\n                var elements: RenderElement[] = insBatches.elements;\r\n                var count: number = insBatches.length;\r\n                (this._renderElementOBJ as InstanceRenderElementOBJ).drawCount = count;\r\n                for (var i: number = 0; i < count; i++)\r\n                    worldMatrixData.set(elements[i].transform.worldMatrix.elements, i * 16);\r\n                break;\r\n        }\r\n    }\r\n\r\n    clear() {\r\n        this._instanceBatchElementList.length = 0;\r\n    }\r\n    recover(): void {\r\n        InstanceRenderElement._pool.push(this);\r\n        this.render._updateRenderType = this.oriRendertype;\r\n        this._isInPool = true;\r\n    }\r\n}","import { LayaGL } from \"../../../layagl/LayaGL\";\r\nimport { GeometryElement } from \"../../core/GeometryElement\";\r\nimport { RenderContext3D } from \"../../core/render/RenderContext3D\";\r\nimport { IndexBuffer3D } from \"../../graphics/IndexBuffer3D\";\r\nimport { VertexBuffer3D } from \"../../graphics/VertexBuffer3D\";\r\nimport { Mesh } from \"./Mesh\";\r\nimport { RenderCapable } from \"../../../RenderEngine/RenderEnum/RenderCapable\";\r\nimport { MeshTopology } from \"../../../RenderEngine/RenderEnum/RenderPologyMode\";\r\nimport { DrawType } from \"../../../RenderEngine/RenderEnum/DrawType\";\r\nimport { IndexFormat } from \"../../../RenderEngine/RenderEnum/IndexFormat\";\r\nimport { SkinnedMeshRenderer } from \"../../core/SkinnedMeshRenderer\";\r\n\r\n\r\n/**\r\n * <code>SubMesh</code> 类用于创建子网格数据模板。\r\n */\r\nexport class SubMesh extends GeometryElement {\r\n\r\n\t/**@internal */\r\n\tprivate static _type: number = GeometryElement._typeCounter++;\r\n\r\n\t/** @internal */\r\n\t_mesh: Mesh;\r\n\r\n\t/** @internal */\r\n\t_boneIndicesList: Uint16Array[];\r\n\t/** @internal */\r\n\t_subIndexBufferStart: number[];\r\n\t/** @internal */\r\n\t_subIndexBufferCount: number[];\r\n\r\n\t/** @internal */\r\n\t_indexInMesh: number;\r\n\t/** @internal */\r\n\t_indexStart: number;\r\n\t/** @internal */\r\n\t_indexCount: number;\r\n\t/** @internal */\r\n\t_indices: Uint16Array | Uint32Array;\r\n\t/**@internal [只读]*/\r\n\t_vertexBuffer: VertexBuffer3D;\r\n\t/**@internal [只读]*/\r\n\t_indexBuffer: IndexBuffer3D;\r\n\r\n\t/**\r\n\t * 获取索引数量。\r\n\t */\r\n\tget indexCount(): number {\r\n\t\treturn this._indexCount;\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>SubMesh</code> 实例。\r\n\t * @param\tmesh  网格数据模板。\r\n\t */\r\n\tconstructor(mesh: Mesh) {\r\n\t\tsuper(MeshTopology.Triangles, DrawType.DrawElement);\r\n\t\tthis.indexFormat = mesh.indexFormat;\r\n\t\tif (mesh.indexFormat === IndexFormat.UInt32 && !LayaGL.renderEngine.getCapable(RenderCapable.Element_Index_Uint32)) {\r\n\t\t\tconsole.warn(\"SubMesh:this device do not support IndexFormat.UInt32.\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis._mesh = mesh;\r\n\t\tthis._boneIndicesList = [];\r\n\t\tthis._subIndexBufferStart = [];\r\n\t\tthis._subIndexBufferCount = [];\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_setIndexRange(indexStart: number, indexCount: number, indexFormat: IndexFormat = IndexFormat.UInt16): void {\r\n\t\tthis._indexStart = indexStart;\r\n\t\tthis._indexCount = indexCount;\r\n\t\tif (this._indexBuffer.canRead) {\r\n\t\t\tif (indexFormat == IndexFormat.UInt16) {\r\n\t\t\t\tthis._indices = new Uint16Array(this._indexBuffer.getData().buffer, indexStart * 2, indexCount);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis._indices = new Uint32Array(this._indexBuffer.getData().buffer, indexStart * 4, indexCount);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * @override\r\n\t */\r\n\t_getType(): number {\r\n\t\treturn SubMesh._type;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @internal\r\n\t * @override\r\n\t */\r\n\t_prepareRender(state: RenderContext3D): boolean {\r\n\t\tthis._mesh._uploadVerticesData();\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * @override\r\n\t */\r\n\t_updateRenderParams(state: RenderContext3D): void {\r\n\t\tvar mesh: Mesh = this._mesh;\r\n\r\n\t\tvar skinnedDatas: any[] = (state.renderElement && !!(state.renderElement.render)) ? (<SkinnedMeshRenderer>state.renderElement.render)._skinnedData : null;\r\n\t\tvar byteCount: number;\r\n\t\tswitch (mesh._indexFormat) {\r\n\t\t\tcase IndexFormat.UInt32:\r\n\t\t\t\tbyteCount = 4;\r\n\t\t\t\tbreak;\r\n\t\t\tcase IndexFormat.UInt16:\r\n\t\t\t\tbyteCount = 2;\r\n\t\t\t\tbreak;\r\n\t\t\tcase IndexFormat.UInt8:\r\n\t\t\t\tbyteCount = 1;\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\tthis.clearRenderParams();\r\n\t\tthis.bufferState = mesh._bufferState;\r\n\t\tif (skinnedDatas) {\r\n\t\t\tfor (var i: number = 0, n: number = this._boneIndicesList.length; i < n; i++) {\r\n\t\t\t\tthis.setDrawElemenParams(this._subIndexBufferCount[i], this._subIndexBufferStart[i] * byteCount);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tthis.setDrawElemenParams(this._indexCount, this._indexStart * byteCount);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * 拷贝并获取子网格索引数据的副本。\r\n\t */\r\n\tgetIndices(): Uint16Array | Uint32Array {\r\n\t\tif (this._mesh._isReadable)\r\n\t\t\treturn this._indices.slice();\r\n\t\telse\r\n\t\t\tthrow \"SubMesh:can't get indices on subMesh,mesh's isReadable must be true.\";\r\n\t}\r\n\r\n\t/**\r\n\t * 设置子网格索引。\r\n\t * @param indices \r\n\t */\r\n\tsetIndices(indices: Uint16Array): void {\r\n\t\tthis._indexBuffer.setData(indices, this._indexStart, 0, this._indexCount);\r\n\t}\r\n\r\n\t/**\r\n\t * {@inheritDoc GeometryElement.destroy}\r\n\t * @override\r\n\t */\r\n\tdestroy(): void {\r\n\t\tif (this._destroyed)\r\n\t\t\treturn;\r\n\t\tsuper.destroy();\r\n\t\tthis._indexBuffer.destroy();\r\n\t\tthis._indexBuffer = null;\r\n\t\tthis._mesh = null;\r\n\t\tthis._boneIndicesList = null;\r\n\t\tthis._subIndexBufferStart = null;\r\n\t\tthis._subIndexBufferCount = null;\r\n\t}\r\n}\r\n\r\n","import { ILaya } from \"../../../../ILaya\";\r\nimport { LayaGL } from \"../../../layagl/LayaGL\";\r\nimport { Loader } from \"../../../net/Loader\";\r\nimport { BufferUsage } from \"../../../RenderEngine/RenderEnum/BufferTargetType\";\r\nimport { IndexFormat } from \"../../../RenderEngine/RenderEnum/IndexFormat\";\r\nimport { VertexDeclaration } from \"../../../RenderEngine/VertexDeclaration\";\r\nimport { Resource } from \"../../../resource/Resource\";\r\nimport { Handler } from \"../../../utils/Handler\";\r\nimport { IClone } from \"../../../utils/IClone\";\r\nimport { InstanceRenderElement } from \"../../core/render/InstanceRenderElement\";\r\nimport { IndexBuffer3D } from \"../../graphics/IndexBuffer3D\";\r\nimport { VertexBuffer3D } from \"../../graphics/VertexBuffer3D\";\r\nimport { Bounds } from \"../../math/Bounds\";\r\nimport { Physics3D } from \"../../Physics3D\";\r\nimport { Utils3D } from \"../../utils/Utils3D\";\r\nimport { SubMesh } from \"./SubMesh\";\r\nimport { Color } from \"../../../maths/Color\";\r\nimport { Matrix4x4 } from \"../../../maths/Matrix4x4\";\r\nimport { Vector2 } from \"../../../maths/Vector2\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\nimport { Vector4 } from \"../../../maths/Vector4\";\r\nimport { VertexElementFormat } from \"../../../renders/VertexElementFormat\";\r\nimport { VertexElement } from \"../../../renders/VertexElement\";\r\nimport { BufferState } from \"../../../webgl/utils/BufferState\";\r\nimport { VertexMesh } from \"../../../RenderEngine/RenderShader/VertexMesh\";\r\nimport { MorphTargetData } from \"./MorphTargetData\";\r\nimport { Config } from \"../../../../Config\";\r\n/**\r\n * @internal\r\n */\r\nexport class skinnedMatrixCache {\r\n    readonly subMeshIndex: number;\r\n    readonly batchIndex: number;\r\n    readonly batchBoneIndex: number;\r\n    constructor(subMeshIndex: number, batchIndex: number, batchBoneIndex: number) {\r\n        this.subMeshIndex = subMeshIndex;\r\n        this.batchIndex = batchIndex;\r\n        this.batchBoneIndex = batchBoneIndex;\r\n    }\r\n}\r\n\r\n/**\r\n * <code>Mesh</code> 类用于创建文件网格数据模板。\r\n */\r\nexport class Mesh extends Resource implements IClone {\r\n\r\n    static MESH_INSTANCEBUFFER_TYPE_NORMAL: number = 0;\r\n\r\n    static MESH_INSTANCEBUFFER_TYPE_SIMPLEANIMATOR: number = 1;\r\n\r\n    /** @internal */\r\n    private _tempVector30: Vector3 = new Vector3()\r\n    /** @internal */\r\n    private _tempVector31: Vector3 = new Vector3();\r\n    /** @internal */\r\n    private _tempVector32: Vector3 = new Vector3();\r\n    /** @internal */\r\n    private static _nativeTempVector30: number;\r\n    /** @internal */\r\n    private static _nativeTempVector31: number;\r\n    /** @internal */\r\n    private static _nativeTempVector32: number;\r\n\r\n    /**\r\n      * @internal\r\n      */\r\n    static __init__(): void {\r\n        var physics3D: any = Physics3D._bullet;\r\n        if (physics3D) {\r\n            Mesh._nativeTempVector30 = physics3D.btVector3_create(0, 0, 0);\r\n            Mesh._nativeTempVector31 = physics3D.btVector3_create(0, 0, 0);\r\n            Mesh._nativeTempVector32 = physics3D.btVector3_create(0, 0, 0);\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * 加载网格模板。\r\n     * @param url 模板地址。\r\n     * @param complete 完成回调。\r\n     */\r\n    static load(url: string, complete: Handler): void {\r\n        ILaya.loader.load(url, complete, null, Loader.MESH);\r\n    }\r\n\r\n    /** @internal */\r\n    private _btTriangleMesh: number;\r\n    /** @internal */\r\n    private _minVerticesUpdate: number = -1;\r\n    /** @internal */\r\n    private _maxVerticesUpdate: number = -1;\r\n    /** @internal */\r\n    private _needUpdateBounds: boolean = true;\r\n    /** @internal */\r\n    private _bounds: Bounds;\r\n\r\n    /** @internal */\r\n    _isReadable: boolean;\r\n    /** @internal */\r\n    _bufferState: BufferState = new BufferState();\r\n    /** @internal */\r\n    _instanceBufferState: BufferState;\r\n    /** @internal */\r\n    _instanceBufferStateType: number = 0;\r\n    /**@internal */\r\n    _instanceWorldVertexBuffer: VertexBuffer3D\r\n    /**@internal */\r\n    _instanceSimpleAniVertexBuffer: VertexBuffer3D\r\n    /** @internal */\r\n    _subMeshes: SubMesh[];\r\n    /** @internal */\r\n    _vertexBuffer: VertexBuffer3D = null;\r\n    /** @internal */\r\n    _indexBuffer: IndexBuffer3D = null;\r\n\r\n    /** @internal */\r\n    _boneNames: string[];\r\n    /** @internal */\r\n    _inverseBindPoses: Matrix4x4[];\r\n    /** @internal */\r\n    _skinnedMatrixCaches: skinnedMatrixCache[] = [];\r\n    /** @internal */\r\n    _vertexCount: number = 0;\r\n    /** @internal */\r\n    _indexFormat: IndexFormat = IndexFormat.UInt16;\r\n\r\n    /** @internal */\r\n    instanceWorldMatrixData: Float32Array;\r\n    /** @internal */\r\n    instanceSimpleAnimatorData: Float32Array;\r\n\r\n    morphTargetData: MorphTargetData;\r\n\r\n    /** @internal */\r\n    _width: number;\r\n\r\n    /** @internal */\r\n    _height: number;\r\n\r\n    /**\r\n     * 网格的全局默认绑定动作逆矩阵。\r\n     */\r\n    get inverseAbsoluteBindPoses(): Matrix4x4[] {\r\n        return this._inverseBindPoses;\r\n    }\r\n\r\n    /**\r\n     * 获取顶点个数。\r\n     */\r\n    get vertexCount(): number {\r\n        return this._vertexCount;\r\n    }\r\n\r\n    /**\r\n     * 获取索引个数。\r\n     */\r\n    get indexCount(): number {\r\n        return this._indexBuffer.indexCount;\r\n    }\r\n\r\n    /**\r\n     * SubMesh的个数。\r\n     */\r\n    get subMeshCount(): number {\r\n        return this._subMeshes.length;\r\n    }\r\n\r\n    /**\r\n     * 边界。\r\n     */\r\n    get bounds(): Bounds {\r\n        return this._bounds;\r\n    }\r\n\r\n    set bounds(value: Bounds) {\r\n        if (this._bounds !== value)\r\n            value.cloneTo(this._bounds);\r\n    }\r\n\r\n    /**\r\n     * 索引格式。\r\n     */\r\n    get indexFormat(): IndexFormat {\r\n        return this._indexFormat;\r\n    }\r\n\r\n\r\n    /**\r\n     * 设置indexformat\r\n     */\r\n    set indexFormat(value: IndexFormat) {\r\n        this._indexFormat = value\r\n        this._subMeshes.forEach(element => {\r\n            element.indexFormat = value;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 创建一个 <code>Mesh</code> 实例,禁止使用。\r\n     * @param isReadable 是否可读。\r\n     */\r\n    constructor(isReadable: boolean = true) {\r\n        super();\r\n        this._bounds = new Bounds(new Vector3(), new Vector3());\r\n        this._isReadable = isReadable;\r\n        this._subMeshes = [];\r\n        this.destroyedImmediately = Config.destroyResourceImmediatelyDefault;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _getPositionElement(vertexBuffer: VertexBuffer3D): VertexElement {\r\n        var vertexElements: any[] = vertexBuffer.vertexDeclaration._vertexElements;\r\n        for (var i: number = 0, n: number = vertexElements.length; i < n; i++) {\r\n            var vertexElement: VertexElement = vertexElements[i];\r\n            if (vertexElement._elementFormat === VertexElementFormat.Vector3 && vertexElement._elementUsage === VertexMesh.MESH_POSITION0)\r\n                return vertexElement;\r\n        }\r\n        return null;\r\n    }\r\n\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _getVerticeElementData(data: Array<Vector2 | Vector3 | Vector4 | Color>, elementUsage: number): void {\r\n        data.length = this._vertexCount;\r\n        var verDec: VertexDeclaration = this._vertexBuffer.vertexDeclaration;\r\n        var element: VertexElement = verDec.getVertexElementByUsage(elementUsage);\r\n        if (element) {\r\n            var uint8Vertices: Uint8Array = this._vertexBuffer.getUint8Data();\r\n            var floatVertices: Float32Array = this._vertexBuffer.getFloat32Data();\r\n            var uint8VerStr: number = verDec.vertexStride;\r\n            var floatVerStr: number = uint8VerStr / 4;\r\n            var uint8EleOffset: number = element._offset;\r\n            var floatEleOffset: number = uint8EleOffset / 4;\r\n\r\n            switch (elementUsage) {\r\n                case VertexMesh.MESH_TEXTURECOORDINATE0:\r\n                case VertexMesh.MESH_TEXTURECOORDINATE1:\r\n                    for (var i: number = 0; i < this._vertexCount; i++) {\r\n                        var offset: number = floatVerStr * i + floatEleOffset;\r\n                        data[i] = new Vector2(floatVertices[offset], floatVertices[offset + 1]);\r\n                    }\r\n                    break;\r\n                case VertexMesh.MESH_POSITION0:\r\n                case VertexMesh.MESH_NORMAL0:\r\n                    for (var i: number = 0; i < this._vertexCount; i++) {\r\n                        var offset: number = floatVerStr * i + floatEleOffset;\r\n                        data[i] = new Vector3(floatVertices[offset], floatVertices[offset + 1], floatVertices[offset + 2]);\r\n                    }\r\n                    break;\r\n                case VertexMesh.MESH_TANGENT0:\r\n                case VertexMesh.MESH_BLENDWEIGHT0:\r\n                    for (var i: number = 0; i < this._vertexCount; i++) {\r\n                        var offset: number = floatVerStr * i + floatEleOffset;\r\n                        data[i] = new Vector4(floatVertices[offset], floatVertices[offset + 1], floatVertices[offset + 2], floatVertices[offset + 3]);\r\n                    }\r\n                    break;\r\n                case VertexMesh.MESH_COLOR0:\r\n                    for (var i: number = 0; i < this._vertexCount; i++) {\r\n                        var offset: number = floatVerStr * i + floatEleOffset;\r\n                        data[i] = new Color(floatVertices[offset], floatVertices[offset + 1], floatVertices[offset + 2], floatVertices[offset + 3]);\r\n                    }\r\n                    break;\r\n                case VertexMesh.MESH_BLENDINDICES0:\r\n                    for (var i: number = 0; i < this._vertexCount; i++) {\r\n                        var offset: number = uint8VerStr * i + uint8EleOffset;\r\n                        data[i] = new Vector4(uint8Vertices[offset], uint8Vertices[offset + 1], uint8Vertices[offset + 2], uint8Vertices[offset + 3]);\r\n                    }\r\n                    break;\r\n                default:\r\n                    throw \"Mesh:Unknown elementUsage.\";\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _setVerticeElementData(data: Array<Vector2 | Vector3 | Vector4 | Color>, elementUsage: number): void {\r\n        var verDec: VertexDeclaration = this._vertexBuffer.vertexDeclaration;\r\n        var element: VertexElement = verDec.getVertexElementByUsage(elementUsage);\r\n        if (element) {\r\n            var uint8Vertices: Uint8Array = this._vertexBuffer.getUint8Data();\r\n            var floatVertices: Float32Array = this._vertexBuffer.getFloat32Data();\r\n            var uint8VerStr: number = verDec.vertexStride;\r\n            var float8VerStr: number = uint8VerStr / 4;\r\n            var uint8EleOffset: number = element._offset;\r\n            var floatEleOffset: number = uint8EleOffset / 4;\r\n            switch (elementUsage) {\r\n                case VertexMesh.MESH_TEXTURECOORDINATE0:\r\n                case VertexMesh.MESH_TEXTURECOORDINATE1:\r\n                    for (var i: number = 0, n: number = data.length; i < n; i++) {\r\n                        var offset: number = float8VerStr * i + floatEleOffset;\r\n                        var vec2: Vector2 = <Vector2>data[i];\r\n                        floatVertices[offset] = vec2.x;\r\n                        floatVertices[offset + 1] = vec2.y;\r\n                    }\r\n                    break;\r\n                case VertexMesh.MESH_POSITION0:\r\n                case VertexMesh.MESH_NORMAL0:\r\n                    for (var i: number = 0, n: number = data.length; i < n; i++) {\r\n                        var offset: number = float8VerStr * i + floatEleOffset;\r\n                        var vec3: Vector3 = <Vector3>data[i];\r\n                        floatVertices[offset] = vec3.x;\r\n                        floatVertices[offset + 1] = vec3.y;\r\n                        floatVertices[offset + 2] = vec3.z;\r\n                    }\r\n                    break;\r\n                case VertexMesh.MESH_TANGENT0:\r\n                case VertexMesh.MESH_BLENDWEIGHT0:\r\n                    for (var i: number = 0, n: number = data.length; i < n; i++) {\r\n                        var offset: number = float8VerStr * i + floatEleOffset;\r\n                        var vec4: Vector4 = <Vector4>data[i];\r\n                        floatVertices[offset] = vec4.x;\r\n                        floatVertices[offset + 1] = vec4.y;\r\n                        floatVertices[offset + 2] = vec4.z;\r\n                        floatVertices[offset + 3] = vec4.w;\r\n                    }\r\n                    break;\r\n                case VertexMesh.MESH_COLOR0:\r\n                    for (var i: number = 0, n: number = data.length; i < n; i++) {\r\n                        var offset: number = float8VerStr * i + floatEleOffset;\r\n                        var cor: Color = <Color>data[i];\r\n                        floatVertices[offset] = cor.r;\r\n                        floatVertices[offset + 1] = cor.g;\r\n                        floatVertices[offset + 2] = cor.b;\r\n                        floatVertices[offset + 3] = cor.a;\r\n                    }\r\n                    break;\r\n                case VertexMesh.MESH_BLENDINDICES0:\r\n                    for (var i: number = 0, n: number = data.length; i < n; i++) {\r\n                        var offset: number = uint8VerStr * i + uint8EleOffset;\r\n                        var vec4: Vector4 = <Vector4>data[i];\r\n                        uint8Vertices[offset] = vec4.x;\r\n                        uint8Vertices[offset + 1] = vec4.y;\r\n                        uint8Vertices[offset + 2] = vec4.z;\r\n                        uint8Vertices[offset + 3] = vec4.w;\r\n                    }\r\n                    break;\r\n                default:\r\n                    throw \"Mesh:Unknown elementUsage.\";\r\n            }\r\n            this._minVerticesUpdate = 0;\r\n            this._maxVerticesUpdate = Number.MAX_SAFE_INTEGER;\r\n        }\r\n        else {\r\n            console.warn(\"Mesh: the mesh don't have  this VertexElement.\");\r\n            //TODO:vertexBuffer结构发生变化\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     */\r\n    protected _disposeResource(): void {\r\n        for (var i: number = 0, n: number = this._subMeshes.length; i < n; i++)\r\n            this._subMeshes[i].destroy();\r\n        this._btTriangleMesh && Physics3D._bullet.btStridingMeshInterface_destroy(this._btTriangleMesh);\r\n        this._vertexBuffer && this._vertexBuffer.destroy();\r\n        this._indexBuffer && this._indexBuffer.destroy();\r\n        this._bufferState.destroy();\r\n        this._instanceBufferState && this._instanceBufferState.destroy();\r\n        this._instanceWorldVertexBuffer && this._instanceWorldVertexBuffer.destroy();\r\n        this._instanceSimpleAniVertexBuffer && this._instanceSimpleAniVertexBuffer.destroy();\r\n        this.instanceWorldMatrixData && (this.instanceWorldMatrixData = null);\r\n        this.instanceSimpleAnimatorData && (this.instanceSimpleAnimatorData = null);\r\n        this._setCPUMemory(0);\r\n        this._setGPUMemory(0);\r\n        this._bufferState = null;\r\n        this._instanceBufferState = null;\r\n        this._vertexBuffer = null;\r\n        this._indexBuffer = null;\r\n        this._subMeshes = null;\r\n        this._btTriangleMesh = null;\r\n        this._indexBuffer = null;\r\n        this._boneNames = null;\r\n        this._inverseBindPoses = null;\r\n        this.morphTargetData && (this.morphTargetData.destroy());\r\n    }\r\n\r\n    /**\r\n     *@internal\r\n     */\r\n    _setSubMeshes(subMeshes: SubMesh[]): void {\r\n        this._subMeshes = subMeshes\r\n        for (var i: number = 0, n: number = subMeshes.length; i < n; i++)\r\n            subMeshes[i]._indexInMesh = i;\r\n    }\r\n\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _setBuffer(vertexBuffer: VertexBuffer3D, indexBuffer: IndexBuffer3D): void {\r\n        var bufferState: BufferState = this._bufferState;\r\n        // bufferState.bind();\r\n        // bufferState.applyVertexBuffer(vertexBuffer);\r\n        // bufferState.applyIndexBuffer(indexBuffer);\r\n        // bufferState.unBind();\r\n        bufferState.applyState([vertexBuffer], indexBuffer);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _setInstanceBuffer() {\r\n        if (this._instanceBufferState)\r\n            return;\r\n        var instanceBufferState: BufferState = this._instanceBufferState = new BufferState();\r\n        var instanceBufferStateType = this._instanceBufferStateType;\r\n        let vertexArray = [];\r\n        vertexArray.push(this._vertexBuffer);\r\n        //new Instance VertexBuffer3D\r\n        let instanceBuffer3D: VertexBuffer3D = this._instanceWorldVertexBuffer = LayaGL.renderOBJCreate.createVertexBuffer3D(InstanceRenderElement.maxInstanceCount * 16 * 4, BufferUsage.Dynamic, false);;\r\n        instanceBuffer3D.vertexDeclaration = VertexMesh.instanceWorldMatrixDeclaration;\r\n        instanceBuffer3D.instanceBuffer = true;\r\n        vertexArray.push(instanceBuffer3D);\r\n        this.instanceWorldMatrixData = new Float32Array(InstanceRenderElement.maxInstanceCount * 16);\r\n        switch (instanceBufferStateType) {\r\n            case Mesh.MESH_INSTANCEBUFFER_TYPE_SIMPLEANIMATOR:\r\n                //new SimpleVertexBuffer3D\r\n                let instanceSimpleAnimatorBuffer = this._instanceSimpleAniVertexBuffer = LayaGL.renderOBJCreate.createVertexBuffer3D(InstanceRenderElement.maxInstanceCount * 4 * 4, BufferUsage.Dynamic, false);\r\n                instanceSimpleAnimatorBuffer.vertexDeclaration = VertexMesh.instanceSimpleAnimatorDeclaration;\r\n                instanceSimpleAnimatorBuffer.instanceBuffer = true;\r\n                this.instanceSimpleAnimatorData = new Float32Array(InstanceRenderElement.maxInstanceCount * 4);\r\n                vertexArray.push(instanceSimpleAnimatorBuffer);\r\n                break;\r\n        }\r\n        instanceBufferState.applyState(vertexArray, this._indexBuffer);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _getPhysicMesh(): any {\r\n        //if (!this._btTriangleMesh) {//TODO 去掉共享物理Mesh\r\n        var bt: any = Physics3D._bullet;\r\n        var triangleMesh: number = bt.btTriangleMesh_create();//TODO:独立抽象btTriangleMesh,增加内存复用\r\n        var nativePositio0: number = Mesh._nativeTempVector30;\r\n        var nativePositio1: number = Mesh._nativeTempVector31;\r\n        var nativePositio2: number = Mesh._nativeTempVector32;\r\n        var position0: Vector3 = this._tempVector30;\r\n        var position1: Vector3 = this._tempVector31;\r\n        var position2: Vector3 = this._tempVector32;\r\n\r\n        var vertexBuffer: VertexBuffer3D = this._vertexBuffer;\r\n        var positionElement: VertexElement = this._getPositionElement(vertexBuffer);\r\n        var verticesData: Float32Array = vertexBuffer.getFloat32Data();\r\n        var floatCount: number = vertexBuffer.vertexDeclaration.vertexStride / 4;\r\n        var posOffset: number = positionElement._offset / 4;\r\n\r\n        var indices: Uint16Array = this._indexBuffer.getData();//TODO:API修改问题\r\n        for (var i: number = 0, n: number = indices.length; i < n; i += 3) {\r\n            var p0Index: number = indices[i] * floatCount + posOffset;\r\n            var p1Index: number = indices[i + 1] * floatCount + posOffset;\r\n            var p2Index: number = indices[i + 2] * floatCount + posOffset;\r\n            position0.setValue(verticesData[p0Index], verticesData[p0Index + 1], verticesData[p0Index + 2]);\r\n            position1.setValue(verticesData[p1Index], verticesData[p1Index + 1], verticesData[p1Index + 2]);\r\n            position2.setValue(verticesData[p2Index], verticesData[p2Index + 1], verticesData[p2Index + 2]);\r\n\r\n            Utils3D._convertToBulletVec3(position0, nativePositio0);\r\n            Utils3D._convertToBulletVec3(position1, nativePositio1);\r\n            Utils3D._convertToBulletVec3(position2, nativePositio2);\r\n            bt.btTriangleMesh_addTriangle(triangleMesh, nativePositio0, nativePositio1, nativePositio2, false);\r\n        }\r\n        this._btTriangleMesh = triangleMesh;\r\n        //}\r\n        return this._btTriangleMesh;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _uploadVerticesData(): void {\r\n        var min: number = this._minVerticesUpdate;\r\n        var max: number = this._maxVerticesUpdate;\r\n        if (min !== -1 && max !== -1) {\r\n            var offset: number = min;\r\n            this._vertexBuffer.setData(this._vertexBuffer.getUint8Data().buffer, offset, offset, max - min);\r\n            this._minVerticesUpdate = -1;\r\n            this._maxVerticesUpdate = -1;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 根据获取子网格。\r\n     * @param index 索引。\r\n     */\r\n    getSubMesh(index: number): SubMesh {\r\n        return this._subMeshes[index];\r\n    }\r\n\r\n    /**\r\n     * 拷贝并填充位置数据至数组。\r\n     * @param positions 位置数组。\r\n     * @remark 该方法为拷贝操作，比较耗费性能。\r\n     */\r\n    getPositions(positions: Vector3[]): void {\r\n        if (this._isReadable)\r\n            this._getVerticeElementData(positions, VertexMesh.MESH_POSITION0);\r\n        else\r\n            throw \"Mesh:can't get positions on mesh,isReadable must be true.\";\r\n    }\r\n\r\n    /**\r\n     * 设置位置数据。\r\n     * @param positions 位置。\r\n     */\r\n    setPositions(positions: Vector3[]): void {\r\n        if (this._isReadable) {\r\n            this._setVerticeElementData(positions, VertexMesh.MESH_POSITION0);\r\n            this._needUpdateBounds = true;\r\n        }\r\n        else {\r\n            throw \"Mesh:setPosition() need isReadable must be true or use setVertices().\";\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 拷贝并填充颜色数据至数组。\r\n     * @param colors 颜色数组。\r\n     * @remark 该方法为拷贝操作，比较耗费性能。\r\n     */\r\n    getColors(colors: Color[]): void {\r\n        if (this._isReadable)\r\n            this._getVerticeElementData(colors, VertexMesh.MESH_COLOR0);\r\n        else\r\n            throw \"Mesh:can't get colors on mesh,isReadable must be true.\";\r\n    }\r\n\r\n    /**\r\n     * 设置颜色数据。\r\n     * @param colors  颜色。\r\n     */\r\n    setColors(colors: Color[]): void {\r\n        if (this._isReadable)\r\n            this._setVerticeElementData(colors, VertexMesh.MESH_COLOR0);\r\n        else\r\n            throw \"Mesh:setColors() need isReadable must be true or use setVertices().\";\r\n    }\r\n\r\n    /**\r\n     * 拷贝并填充纹理坐标数据至数组。\r\n     * @param uvs 纹理坐标数组。\r\n     * @param channel 纹理坐标通道。\r\n     * @remark 该方法为拷贝操作，比较耗费性能。\r\n     */\r\n    getUVs(uvs: Vector2[], channel: number = 0): void {\r\n        if (this._isReadable) {\r\n            switch (channel) {\r\n                case 0:\r\n                    this._getVerticeElementData(uvs, VertexMesh.MESH_TEXTURECOORDINATE0);\r\n                    break;\r\n                case 1:\r\n                    this._getVerticeElementData(uvs, VertexMesh.MESH_TEXTURECOORDINATE1);\r\n                    break;\r\n                default:\r\n                    throw \"Mesh:Invalid channel.\";\r\n            }\r\n        }\r\n        else {\r\n            throw \"Mesh:can't get uvs on mesh,isReadable must be true.\";\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 设置纹理坐标数据。\r\n     * @param uvs 纹理坐标。\r\n     * @param channel 纹理坐标通道。\r\n     */\r\n    setUVs(uvs: Vector2[], channel: number = 0): void {\r\n        if (this._isReadable) {\r\n            switch (channel) {\r\n                case 0:\r\n                    this._setVerticeElementData(uvs, VertexMesh.MESH_TEXTURECOORDINATE0);\r\n                    break;\r\n                case 1:\r\n                    this._setVerticeElementData(uvs, VertexMesh.MESH_TEXTURECOORDINATE1);\r\n                    break;\r\n                default:\r\n                    throw \"Mesh:Invalid channel.\";\r\n            }\r\n        }\r\n        else {\r\n            throw \"Mesh:setUVs() need isReadable must be true or use setVertices().\";\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 拷贝并填充法线数据至数组。\r\n     * @param normals 法线数组。\r\n     * @remark 该方法为拷贝操作，比较耗费性能。\r\n     */\r\n    getNormals(normals: Vector3[]): void {\r\n        if (this._isReadable)\r\n            this._getVerticeElementData(normals, VertexMesh.MESH_NORMAL0);\r\n        else\r\n            throw \"Mesh:can't get colors on mesh,isReadable must be true.\";\r\n    }\r\n\r\n    /**\r\n     * 设置法线数据。\r\n     * @param normals 法线。 \r\n     */\r\n    setNormals(normals: Vector3[]): void {\r\n        if (this._isReadable)\r\n            this._setVerticeElementData(normals, VertexMesh.MESH_NORMAL0);\r\n        else\r\n            throw \"Mesh:setNormals() need must be true or use setVertices().\";\r\n    }\r\n\r\n    /**\r\n     * 拷贝并填充切线数据至数组。\r\n     * @param tangents 切线。\r\n     */\r\n    getTangents(tangents: Vector4[]): void {\r\n        if (this._isReadable)\r\n            this._getVerticeElementData(tangents, VertexMesh.MESH_TANGENT0);\r\n        else\r\n            throw \"Mesh:can't get colors on mesh,isReadable must be true.\";\r\n    }\r\n\r\n    /**\r\n     * 设置切线数据。\r\n     * @param tangents 切线。\r\n     */\r\n    setTangents(tangents: Vector4[]): void {\r\n        if (this._isReadable)\r\n            this._setVerticeElementData(tangents, VertexMesh.MESH_TANGENT0);\r\n        else\r\n            throw \"Mesh:setTangents() need isReadable must be true or use setVertices().\";\r\n    }\r\n\r\n    /**\r\n    * 获取骨骼权重。\r\n    * @param boneWeights 骨骼权重。\r\n    */\r\n    getBoneWeights(boneWeights: Vector4[]): void {\r\n        if (this._isReadable)\r\n            this._getVerticeElementData(boneWeights, VertexMesh.MESH_BLENDWEIGHT0);\r\n        else\r\n            throw \"Mesh:can't get boneWeights on mesh,isReadable must be true.\";\r\n    }\r\n\r\n    /**\r\n    * 拷贝并填充骨骼权重数据至数组。\r\n    * @param boneWeights 骨骼权重。\r\n    */\r\n    setBoneWeights(boneWeights: Vector4[]): void {\r\n        if (this._isReadable)\r\n            this._setVerticeElementData(boneWeights, VertexMesh.MESH_BLENDWEIGHT0);\r\n        else\r\n            throw \"Mesh:setBoneWeights() need isReadable must be true or use setVertices().\";\r\n    }\r\n\r\n    /**\r\n    * 获取骨骼索引。\r\n    * @param boneIndices 骨骼索引。\r\n    */\r\n    getBoneIndices(boneIndices: Vector4[]): void {\r\n        if (this._isReadable)\r\n            this._getVerticeElementData(boneIndices, VertexMesh.MESH_BLENDINDICES0);\r\n        else\r\n            throw \"Mesh:can't get boneIndices on mesh,isReadable must be true.\";\r\n    }\r\n\r\n    /**\r\n    * 拷贝并填充骨骼索引数据至数组。\r\n    * @param boneWeights 骨骼索引。\r\n    */\r\n    setBoneIndices(boneIndices: Vector4[]): void {\r\n        if (this._isReadable)\r\n            this._setVerticeElementData(boneIndices, VertexMesh.MESH_BLENDINDICES0);\r\n        else\r\n            throw \"Mesh:setBoneIndices() need isReadable must be true or use setVertices().\";\r\n    }\r\n\r\n\r\n    /**\r\n     * 将Mesh标记为不可读,可减少内存，标记后不可再调用相关读取方法。\r\n     */\r\n    markAsUnreadbale(): void {\r\n        this._uploadVerticesData();\r\n        this._vertexBuffer.markAsUnreadbale();\r\n        this._isReadable = false;\r\n    }\r\n\r\n    /**\r\n     * 获取顶点声明。\r\n     */\r\n    getVertexDeclaration(): VertexDeclaration {\r\n        return this._vertexBuffer._vertexDeclaration;\r\n    }\r\n\r\n    /**\r\n    * 拷贝并获取顶点数据的副本。\r\n    * @return 顶点数据。\r\n    */\r\n    getVertices(): ArrayBuffer {\r\n        if (this._isReadable)\r\n            return this._vertexBuffer.getUint8Data().buffer.slice(0);\r\n        else\r\n            throw \"Mesh:can't get vertices on mesh,isReadable must be true.\";\r\n    }\r\n\r\n    /**\r\n    * 设置顶点数据。\r\n    * @param vertices 顶点数据。\r\n    */\r\n    setVertices(vertices: ArrayBuffer): void {\r\n        this._vertexBuffer.setData(vertices);\r\n        this._needUpdateBounds = true;\r\n    }\r\n\r\n    /**\r\n     * 拷贝并获取网格索引的副本。\r\n     * @return 网格索引。\r\n     */\r\n    getIndices(): Uint8Array | Uint16Array | Uint32Array {\r\n        if (this._isReadable)\r\n            return this._indexBuffer.getData().slice();\r\n        else\r\n            throw \"Mesh:can't get indices on subMesh,mesh's isReadable must be true.\";\r\n    }\r\n\r\n    /**\r\n     * 设置网格索引。\r\n     * @param indices 网格索引。\r\n     */\r\n    setIndices(indices: Uint8Array | Uint16Array | Uint32Array): void {\r\n        var format: IndexFormat;\r\n        if (indices instanceof Uint32Array)\r\n            format = IndexFormat.UInt32;\r\n        else if (indices instanceof Uint16Array)\r\n            format = IndexFormat.UInt16;\r\n        else if (indices instanceof Uint8Array)\r\n            format = IndexFormat.UInt8;\r\n\r\n        var indexBuffer: IndexBuffer3D = this._indexBuffer;\r\n        if (this._indexFormat !== format || indexBuffer.indexCount !== indices.length) {//format chang and length chang will recreate the indexBuffer\r\n            indexBuffer.destroy();\r\n            this._indexBuffer = indexBuffer = LayaGL.renderOBJCreate.createIndexBuffer3D(format, indices.length, BufferUsage.Static, this._isReadable);\r\n        }\r\n        indexBuffer.setData(indices);\r\n        this.indexFormat = format;\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * 从模型位置数据生成包围盒。\r\n     */\r\n    calculateBounds(): void {\r\n        if (this._isReadable) {\r\n            if (this._needUpdateBounds) {\r\n                var min: Vector3 = this._tempVector30;\r\n                var max: Vector3 = this._tempVector31;\r\n                min.x = min.y = min.z = Number.MAX_VALUE;\r\n                max.x = max.y = max.z = -Number.MAX_VALUE;\r\n\r\n                var vertexBuffer: VertexBuffer3D = this._vertexBuffer;\r\n                var positionElement: VertexElement = this._getPositionElement(vertexBuffer);\r\n                var verticesData: Float32Array = vertexBuffer.getFloat32Data();\r\n                var floatCount: number = vertexBuffer.vertexDeclaration.vertexStride / 4;\r\n                var posOffset: number = positionElement._offset / 4;\r\n                for (var j: number = 0, m: number = verticesData.length; j < m; j += floatCount) {\r\n                    var ofset: number = j + posOffset;\r\n                    var pX: number = verticesData[ofset];\r\n                    var pY: number = verticesData[ofset + 1];\r\n                    var pZ: number = verticesData[ofset + 2];\r\n                    min.x = Math.min(min.x, pX);\r\n                    min.y = Math.min(min.y, pY);\r\n                    min.z = Math.min(min.z, pZ);\r\n                    max.x = Math.max(max.x, pX);\r\n                    max.y = Math.max(max.y, pY);\r\n                    max.z = Math.max(max.z, pZ);\r\n                }\r\n                this._bounds.setMin(min);\r\n                this._bounds.setMax(max);\r\n                this._needUpdateBounds = false;\r\n            }\r\n        }\r\n        else {\r\n            throw \"Mesh:can't calculate bounds on subMesh,mesh's isReadable must be true.\";\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * 克隆。\r\n     * @param\tdestObject 克隆源。\r\n     */\r\n    cloneTo(destObject: any): void {//[实现IClone接口]\r\n        var destMesh: Mesh = <Mesh>destObject;\r\n        var vb: VertexBuffer3D = this._vertexBuffer;\r\n        var destVB: VertexBuffer3D = LayaGL.renderOBJCreate.createVertexBuffer3D(vb._byteLength, vb.bufferUsage, vb.canRead);\r\n        destVB.vertexDeclaration = vb.vertexDeclaration;\r\n        destVB.setData(vb.getUint8Data().slice().buffer);\r\n        destMesh._vertexBuffer = destVB;\r\n        destMesh._vertexCount = this._vertexCount;\r\n        var ib: IndexBuffer3D = this._indexBuffer;\r\n        var destIB: IndexBuffer3D = LayaGL.renderOBJCreate.createIndexBuffer3D(IndexFormat.UInt16, ib.indexCount, ib.bufferUsage, ib.canRead);\r\n        destIB.setData(ib.getData().slice());\r\n        destMesh._indexBuffer = destIB;\r\n\r\n        destMesh._setBuffer(destMesh._vertexBuffer, destIB);\r\n        destMesh._instanceBufferStateType = this._instanceBufferStateType;\r\n\r\n        destMesh._setCPUMemory(this.cpuMemory);\r\n        destMesh._setGPUMemory(this.gpuMemory);\r\n\r\n        var i: number;\r\n        var boneNames: string[] = this._boneNames;\r\n        if (boneNames) {\r\n            var destBoneNames: string[] = destMesh._boneNames = [];\r\n            for (i = 0; i < boneNames.length; i++)\r\n                destBoneNames[i] = boneNames[i];\r\n        }\r\n\r\n        var inverseBindPoses: Matrix4x4[] = this._inverseBindPoses;\r\n        if (inverseBindPoses) {\r\n            var destInverseBindPoses: Matrix4x4[] = destMesh._inverseBindPoses = [];\r\n            for (i = 0; i < inverseBindPoses.length; i++)\r\n                destInverseBindPoses[i] = inverseBindPoses[i];\r\n        }\r\n\r\n        var cacheLength: number = this._skinnedMatrixCaches.length;\r\n        destMesh._skinnedMatrixCaches.length = cacheLength;\r\n        for (i = 0; i < cacheLength; i++) {\r\n            var skinnedCache: skinnedMatrixCache = this._skinnedMatrixCaches[i];\r\n            if (skinnedCache)\r\n                destMesh._skinnedMatrixCaches[i] = new skinnedMatrixCache(skinnedCache.subMeshIndex, skinnedCache.batchIndex, skinnedCache.batchBoneIndex);\r\n        }\r\n\r\n        for (i = 0; i < this.subMeshCount; i++) {\r\n            var subMesh: SubMesh = this._subMeshes[i];\r\n            var subIndexBufferStart: number[] = subMesh._subIndexBufferStart;\r\n            var subIndexBufferCount: number[] = subMesh._subIndexBufferCount;\r\n            var boneIndicesList: Uint16Array[] = subMesh._boneIndicesList;\r\n            var destSubmesh: SubMesh = new SubMesh(destMesh);\r\n\r\n            destSubmesh._subIndexBufferStart.length = subIndexBufferStart.length;\r\n            destSubmesh._subIndexBufferCount.length = subIndexBufferCount.length;\r\n            destSubmesh._boneIndicesList.length = boneIndicesList.length;\r\n\r\n            for (var j: number = 0; j < subIndexBufferStart.length; j++)\r\n                destSubmesh._subIndexBufferStart[j] = subIndexBufferStart[j];\r\n            for (j = 0; j < subIndexBufferCount.length; j++)\r\n                destSubmesh._subIndexBufferCount[j] = subIndexBufferCount[j];\r\n            for (j = 0; j < boneIndicesList.length; j++)\r\n                destSubmesh._boneIndicesList[j] = new Uint16Array(boneIndicesList[j]);\r\n\r\n            destSubmesh._indexBuffer = destIB;\r\n            destSubmesh._indexStart = subMesh._indexStart;\r\n            destSubmesh._indexCount = subMesh._indexCount;\r\n            destSubmesh._indices = new Uint16Array(destIB.getData().buffer, subMesh._indexStart * 2, subMesh._indexCount);\r\n            var vertexBuffer: VertexBuffer3D = destMesh._vertexBuffer;\r\n            destSubmesh._vertexBuffer = vertexBuffer;\r\n            destMesh._subMeshes.push(destSubmesh);\r\n        }\r\n        destMesh._setSubMeshes(destMesh._subMeshes);\r\n\r\n        if (this.morphTargetData) {\r\n            destMesh.morphTargetData = this.morphTargetData.clone();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 克隆。\r\n     * @return\t 克隆副本。\r\n     */\r\n    clone(): any {//[实现IClone接口]\r\n        var dest: Mesh = new Mesh();\r\n        this.cloneTo(dest);\r\n        return dest;\r\n    }\r\n\r\n\r\n\r\n    //------------------------------------------NATIVE----------------------------------------------------\r\n    /** @internal */\r\n    _inverseBindPosesBuffer: ArrayBuffer;\r\n}\r\n\r\n\r\n\r\n","import { Vector3 } from \"../../../../maths/Vector3\";\r\nimport { Vector4 } from \"../../../../maths/Vector4\";\r\nimport { ShaderData } from \"../../../../RenderEngine/RenderShader/ShaderData\";\r\nimport { Texture2D } from \"../../../../resource/Texture2D\";\r\nimport { Sprite3DRenderDeclaration } from \"../../../core/render/Sprite3DRenderDeclaration\";\r\nimport { RenderableSprite3D } from \"../../../core/RenderableSprite3D\";\r\nimport { Volume } from \"../Volume\";\r\nimport { VolumeManager } from \"../VolumeManager\";\r\n\r\nexport class VolumetricGI extends Volume {\r\n\r\n    probeCounts: Vector3;\r\n    probeStep: Vector3;\r\n\r\n    /** @internal */\r\n    probeLocations: Float32Array;\r\n\r\n    /**\r\n     * x: irradiance probe texel size\r\n     * y: distance probe texel size\r\n     * z: normalBias\r\n     * w: viewBias\r\n     */\r\n    private _params: Vector4;\r\n\r\n    private _irradiance: Texture2D;\r\n\r\n    /** @internal */\r\n    public get irradiance(): Texture2D {\r\n        return this._irradiance;\r\n    }\r\n    public set irradiance(value: Texture2D) {\r\n        if (this._irradiance == value)\r\n            return;\r\n\r\n        this._irradiance && (this.irradiance._removeReference());\r\n        value && (value._addReference());\r\n        this._irradiance = value;\r\n    }\r\n\r\n    private _distance: Texture2D;\r\n    /** @internal */\r\n    public get distance(): Texture2D {\r\n        return this._distance;\r\n    }\r\n    public set distance(value: Texture2D) {\r\n        if (this._distance == value)\r\n            return;\r\n        this._distance && (this._distance._removeReference());\r\n        value && (value._addReference());\r\n\r\n        this._distance = value;\r\n    }\r\n\r\n    intensity: number;\r\n\r\n    constructor() {\r\n        super();\r\n        this._type = VolumeManager.VolumetricGIType;\r\n        this.probeCounts = new Vector3();\r\n        this.probeStep = new Vector3();\r\n        this._params = new Vector4(8, 16, 0, 0);\r\n    }\r\n\r\n    public get normalBias(): number {\r\n        return this._params.z;\r\n    }\r\n    public set normalBias(value: number) {\r\n        this._params.z = value;\r\n    }\r\n\r\n    public get viewBias(): number {\r\n        return this._params.w;\r\n    }\r\n    public set viewBias(value: number) {\r\n        this._params.w = value;\r\n    }\r\n\r\n    public get irradianceTexel(): number {\r\n        return this._params.x;\r\n    }\r\n\r\n    public get distanceTexel(): number {\r\n        return this._params.y;\r\n    }\r\n\r\n    applyVolumetricGI(shaderData: ShaderData) {\r\n        shaderData.addDefine(Sprite3DRenderDeclaration.SHADERDEFINE_VOLUMETRICGI);\r\n\r\n        shaderData.setVector3(RenderableSprite3D.VOLUMETRICGI_PROBECOUNTS, this.probeCounts);\r\n        shaderData.setVector3(RenderableSprite3D.VOLUMETRICGI_PROBESTEPS, this.probeStep);\r\n\r\n        shaderData.setVector3(RenderableSprite3D.VOLUMETRICGI_PROBESTARTPOS, this.bounds.getMin());\r\n        shaderData.setVector(RenderableSprite3D.VOLUMETRICGI_PROBEPARAMS, this._params);\r\n\r\n        shaderData.setTexture(RenderableSprite3D.VOLUMETRICGI_IRRADIANCE, this.irradiance);\r\n        shaderData.setTexture(RenderableSprite3D.VOLUMETRICGI_DISTANCE, this.distance);\r\n\r\n    }\r\n\r\n    _onDestroy() {\r\n        // todo\r\n        this.irradiance = null;\r\n        this.distance = null;\r\n    }\r\n\r\n    _cloneTo(dest: VolumetricGI): void {\r\n        dest.irradiance = this.irradiance;\r\n        dest.distance = this.distance;\r\n        this.probeCounts.cloneTo(dest.probeCounts);\r\n        this.probeStep.cloneTo(dest.probeStep);\r\n        dest.normalBias = this.normalBias;\r\n        dest.viewBias = this.viewBias;\r\n    }\r\n\r\n}","import { Component } from \"../../components/Component\";\r\nimport { Camera } from \"../core/Camera\";\r\nimport { BaseRender, RenderBitFlag } from \"../core/render/BaseRender\";\r\nimport { Scene3D } from \"../core/scene/Scene3D\";\r\nimport { Sprite3D } from \"../core/Sprite3D\";\r\nimport { Bounds } from \"../math/Bounds\";\r\nimport { Event } from \"../../events/Event\";\r\nimport { Utils3D } from \"../utils/Utils3D\";\r\nimport { IBoundsCell } from \"../math/IBoundsCell\";\r\nimport { Vector3 } from \"../../maths/Vector3\";\r\n\r\nconst tempVec = new Vector3();\r\nconst tempVec1 = new Vector3();\r\n\r\n/**\r\n * 此类描述Lod数据\r\n */\r\nexport class LODInfo {\r\n    /**@internal */\r\n    _mincullRate: number;//裁剪比例 0-1\r\n\r\n    /**@internal */\r\n    _renders: BaseRender[];//此LOD显示的渲染节点\r\n\r\n    /**@internal */\r\n    _cachSprite3D: Sprite3D[];\r\n\r\n    /**@internal */\r\n    _lodIndex: number;\r\n\r\n    /**@internal */\r\n    private _group: LODGroup;\r\n\r\n\r\n\r\n    /**\r\n     * 实例化一个LODInfo\r\n     * @param mincullRate \r\n     */\r\n    constructor(mincullRate: number) {\r\n        this._mincullRate = mincullRate;\r\n        this._renders = [];\r\n        this._cachSprite3D = [];\r\n    }\r\n\r\n    /**\r\n     * 设置最小通过率\r\n     */\r\n    set mincullRate(value: number) {\r\n        this._mincullRate = value;\r\n    }\r\n\r\n    get mincullRate() {\r\n        return this._mincullRate;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * 设置LODGroup\r\n     */\r\n    set group(value: LODGroup) {\r\n        if (value == this._group)\r\n            return;\r\n        if (this._group) {//remove old event\r\n            // this._renders.forEach(element => {\r\n            //     (element.owner as Sprite3D).transform.off(Event.TRANSFORM_CHANGED, this._group._updateRecaculateFlag);\r\n            //     element._LOD = -1;\r\n            // })\r\n            for (let i = 0, n = this._renders.length; i < n; i++) {\r\n                let element = this._renders[i];\r\n                (element.owner as Sprite3D).transform.off(Event.TRANSFORM_CHANGED, this._group._updateRecaculateFlag);\r\n                element._LOD = -1;\r\n            }\r\n        }\r\n        this._group = value;\r\n        for (let i = 0, n = this._renders.length; i < n; i++) {\r\n            let element = this._renders[i];\r\n            (element.owner as Sprite3D).transform.on(Event.TRANSFORM_CHANGED, this._group, this._group._updateRecaculateFlag);\r\n            element._LOD = this._lodIndex;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 设置LODInfo的节点信息\r\n     */\r\n    set renders(value: Sprite3D[]) {\r\n        this._cachSprite3D = value;\r\n        for (var i = 0, n = value.length; i < n; i++) {\r\n            this.addNode(value[i]);\r\n        }\r\n    }\r\n\r\n    get renders(): Sprite3D[] {\r\n        return this._cachSprite3D;\r\n    }\r\n\r\n    /**\r\n     * 在lodInfo中增加渲染节点\r\n     * @param node \r\n     */\r\n    addNode(node: Sprite3D) {\r\n        if (!node)\r\n            return;\r\n        let ren = node;\r\n        if (ren._isRenderNode > 0) {\r\n            let components = ren.components;\r\n            for (let comp of components) {\r\n                if ((comp instanceof BaseRender) && this._renders.indexOf(comp) == -1)\r\n                    this._renders.push(comp);\r\n            }\r\n            this._group && node.transform.on(Event.TRANSFORM_CHANGED, this._group, this._group._updateRecaculateFlag);\r\n        }\r\n        for (var i = 0, n = node.numChildren; i < n; i++) {\r\n            this.addNode(node.getChildAt(i) as Sprite3D);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 删除某个lod节点\r\n     * @param node \r\n     */\r\n    removeNode(node: Sprite3D) {\r\n        let ren = node;\r\n        if (ren._isRenderNode > 0) {\r\n            let components = ren.components;\r\n            let index: number;\r\n            for (let comp of components) {\r\n                if ((comp instanceof BaseRender) && (index = this._renders.indexOf(comp)) == -1) {\r\n                    this._renders.splice(index, 1);\r\n                    comp.setRenderbitFlag(RenderBitFlag.RenderBitFlag_CullFlag, false);\r\n                    this._group && node.transform.off(Event.TRANSFORM_CHANGED, this._group._updateRecaculateFlag);\r\n                }\r\n            }\r\n        }\r\n        for (var i = 0, n = node.numChildren; i < n; i++) {\r\n            this.removeNode(node.getChildAt(i) as Sprite3D);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 释放所有的渲染节点cull标记\r\n     */\r\n    removeAllRender() {\r\n        this._renders.forEach(element => {\r\n            element.setRenderbitFlag(RenderBitFlag.RenderBitFlag_CullFlag, false);\r\n        })\r\n    }\r\n}\r\n\r\n/**\r\n * <code>SpotLight</code> 类用于构建LOD组件\r\n */\r\nexport class LODGroup extends Component implements IBoundsCell {\r\n\r\n    /**\r\n     * 是否需要重新计算_lodBoundsRadius，和_bounds\r\n     * 在LOD值里面位置有相对改动的时候是需要重新计算的\r\n     */\r\n    private _needcaculateBounds: boolean = false;\r\n\r\n    /**     \r\n     * lodGroup所有的渲染节点的包围盒计算\r\n     */\r\n    private _bounds: Bounds;\r\n\r\n    /**\r\n     * size\r\n     */\r\n    private _size: number;\r\n\r\n    /**\r\n     * 包围盒中心位置\r\n     */\r\n    private _lodPosition: Vector3;\r\n\r\n    /**\r\n     * lod等级数量\r\n     */\r\n    private _lodCount: number;\r\n\r\n    /**\r\n     * lod等级信息\r\n     */\r\n    private _lods: LODInfo[] = [];\r\n\r\n    /**\r\n     * 显示节点\r\n     */\r\n    private _visialIndex = -1;\r\n\r\n    /**\r\n     * lod节点比例\r\n     */\r\n    private _nowRate: number;\r\n\r\n    /**\r\n     * 实例化一个LODGroup\r\n     */\r\n    constructor() {\r\n        super();\r\n        this._bounds = new Bounds();\r\n        this._lodPosition = new Vector3();\r\n        this.runInEditor = true;\r\n    }\r\n\r\n    /**\r\n    * get LODInfo 数组\r\n    * @returns \r\n    */\r\n    get lods(): LODInfo[] {\r\n        return this._lods;\r\n    }\r\n\r\n    /**\r\n     * 设置 LODInfo 数组\r\n     * @param data \r\n     */\r\n    set lods(data: LODInfo[]) {\r\n        this._lods = data;\r\n        for (var i = 0, n = this._lods.length; i < n; i++) {\r\n            let element = this._lods[i]\r\n            element._lodIndex = i;\r\n            element.group = this;\r\n        }\r\n        this._updateRecaculateFlag();\r\n        this._lodCount = this._lods.length;\r\n    }\r\n\r\n    get nowRate(){\r\n        return this._nowRate;\r\n    }\r\n\r\n    /**\r\n     * 获得LOD包围盒\r\n     */\r\n    get bounds() {\r\n        this.recalculateBounds();\r\n        return this._bounds;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _onEnable(): void {\r\n        super._onEnable();\r\n        for (var i = 0, n = this._lods.length; i < n; i++) {\r\n            this._setLODinvisible(i);\r\n        }\r\n        this._visialIndex = -1;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _onDisable(): void {\r\n        super._onDisable();\r\n        this._lods.forEach(element => {\r\n            element.removeAllRender();\r\n        })\r\n    }\r\n\r\n    /**\r\n     * 设置显示隐藏组\r\n     * @param rate \r\n     * @returns \r\n     */\r\n    private _applyVisibleRate(rate: number) {\r\n        for (var i = 0; i < this._lodCount; i++) {\r\n            let lod = this._lods[i];\r\n            if (rate > lod.mincullRate) {\r\n                if (i == -1) {\r\n                    this._setLODvisible(i);\r\n                    this._visialIndex = i;\r\n                    return;\r\n                }\r\n                if (i == this._visialIndex)\r\n                    return;\r\n                else {\r\n                    (this._visialIndex != -1) && this._setLODinvisible(this._visialIndex);\r\n                    this._setLODvisible(i);\r\n                    this._visialIndex = i;\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n        //cull\r\n        if (this._visialIndex != -1) {\r\n            this._setLODinvisible(this._visialIndex);\r\n            this._visialIndex = -1;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 设置某一级LOD显示\r\n     * @param index \r\n     */\r\n    private _setLODvisible(index: number): void {\r\n        let lod = this._lods[index];\r\n        for (var i = 0, n = lod._renders.length; i < n; i++) {\r\n            lod._renders[i].setRenderbitFlag(RenderBitFlag.RenderBitFlag_CullFlag, false);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 设置某一级LOD不显示\r\n     * @param index \r\n     */\r\n    private _setLODinvisible(index: number) {\r\n        let lod = this._lods[index];\r\n        for (var i = 0, n = lod._renders.length; i < n; i++) {\r\n            lod._renders[i].setRenderbitFlag(RenderBitFlag.RenderBitFlag_CullFlag, true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * 删除\r\n     */\r\n    onDestroy() {\r\n        this._lods.forEach(element => {\r\n            let renderarray = element._renders;\r\n            for (var i = 0; i < renderarray.length; i++) {\r\n                element.removeNode(renderarray[i].owner as Sprite3D);\r\n            }\r\n        })\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _updateRecaculateFlag() {\r\n        this._needcaculateBounds = true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @param lodGroup \r\n     */\r\n    _cloneTo(lodGroup: LODGroup) {\r\n        super._cloneTo(lodGroup);\r\n        //get common parent\r\n        let getCommomParent = (rootNode: Sprite3D, rootCheckNode: Sprite3D): Sprite3D => {\r\n            let nodeArray: Sprite3D[] = [];\r\n            let node = rootNode;\r\n            while (!!node) {\r\n                if (node instanceof Sprite3D)\r\n                    nodeArray.push(node);\r\n                node = node.parent as Sprite3D;\r\n            }\r\n            let checkNode: Sprite3D = rootCheckNode;\r\n            while (!!checkNode && nodeArray.indexOf(checkNode) == -1) {\r\n                checkNode = checkNode.parent as Sprite3D;\r\n            }\r\n            return checkNode;\r\n        }\r\n        let cloneHierachFun = (rootNode: Sprite3D, rootCheckNode: Sprite3D, destNode: Sprite3D): Sprite3D => {\r\n            let rootparent: Sprite3D = getCommomParent(rootNode, rootCheckNode);\r\n            if (!rootparent)\r\n                return null;\r\n            let path: number[] = [];\r\n            Utils3D._getHierarchyPath(rootparent, rootNode, path);\r\n            let pathcheck: number[] = [];\r\n            Utils3D._getHierarchyPath(rootparent, rootCheckNode, pathcheck);\r\n            let destParent = Utils3D._getParentNodeByHierarchyPath(destNode, path);\r\n            if (!destParent)\r\n                return null;\r\n            return Utils3D._getNodeByHierarchyPath(destParent, pathcheck) as Sprite3D;\r\n        }\r\n        let lodArray: LODInfo[] = [];\r\n        for (let i = 0, n = this._lodCount; i < n; i++) {\r\n            let lod = this._lods[i];\r\n            let cloneLOD = new LODInfo(lod.mincullRate);\r\n            lodArray.push(cloneLOD);\r\n            lod._renders.forEach(element => {\r\n                let node = cloneHierachFun(this.owner as Sprite3D, element.owner as Sprite3D, lodGroup.owner as Sprite3D);\r\n                if (node)\r\n                    cloneLOD.addNode(node);\r\n            });\r\n        }\r\n        lodGroup.lods = lodArray;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * 重新计算包围盒\r\n     */\r\n    recalculateBounds() {\r\n        if (!this._needcaculateBounds) {\r\n            return;\r\n        }\r\n        let firstBounds = true;\r\n        for (let i = 0, n = this._lods.length; i < n; i++) {\r\n            let lod = this._lods[i];\r\n            lod._renders.forEach(element => {\r\n                if (firstBounds) {\r\n                    element.bounds.cloneTo(this._bounds);\r\n                    firstBounds = false;\r\n                }\r\n                else\r\n                    Bounds.merge(this._bounds, element.bounds, this._bounds);\r\n            });\r\n        }\r\n        this._lodPosition = this._bounds.getCenter();\r\n        let extend = this._bounds.getExtent();\r\n        this._size = 2 * Math.max(extend.x, extend.y, extend.z);\r\n        this._needcaculateBounds = false;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * 渲染之前的更新\r\n     */\r\n    onPreRender() {\r\n        this.recalculateBounds();\r\n        //查看相机的距离\r\n        let checkCamera = (this.owner.scene as Scene3D).cullInfoCamera as Camera;\r\n        let maxYDistance = checkCamera.maxlocalYDistance;\r\n        let cameraFrustum = checkCamera.boundFrustum;\r\n        Vector3.subtract(this._lodPosition, checkCamera.transform.position, tempVec);\r\n        //大于farplane,或者不在视锥内.不做lod操作\r\n        let length = tempVec.length();\r\n        if (length > checkCamera.farPlane || cameraFrustum.containsPoint(this._lodPosition) == 0) {\r\n            return;\r\n        }\r\n        let rateYDistance = length / checkCamera.farPlane * maxYDistance;\r\n        let rate = (this._size / rateYDistance);\r\n        this._nowRate = rate;\r\n        this._applyVisibleRate(rate);\r\n    }\r\n}\r\n","import { Color } from \"../../../maths/Color\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\n\r\n/**\r\n * <code>PixelLineData</code> 类用于表示线数据。\r\n */\r\nexport class PixelLineData {\r\n\t/**线开始位置 */\r\n\tstartPosition: Vector3 = new Vector3();\r\n\t/**线结束位置 */\r\n\tendPosition: Vector3 = new Vector3();\r\n\t/**线开始颜色 */\r\n\tstartColor: Color = new Color();\r\n\t/**线结束颜色 */\r\n\tendColor: Color = new Color();\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @param\tdestObject 克隆源。\r\n\t */\r\n\tcloneTo(destObject: PixelLineData): void {\r\n\t\tthis.startPosition.cloneTo(destObject.startPosition);\r\n\t\tthis.endPosition.cloneTo(destObject.endPosition);\r\n\t\tthis.startColor.cloneTo(destObject.startColor);\r\n\t\tthis.endColor.cloneTo(destObject.endColor);\r\n\t}\r\n}\r\n\r\n","import { VertexMesh } from \"../../../RenderEngine/RenderShader/VertexMesh\";\r\nimport { VertexDeclaration } from \"../../../RenderEngine/VertexDeclaration\";\r\nimport { VertexElement } from \"../../../renders/VertexElement\";\r\nimport { VertexElementFormat } from \"../../../renders/VertexElementFormat\";\r\n/**\r\n * @internal\r\n * @author \r\n */\r\nexport class PixelLineVertex {\r\n\tprivate static _vertexDeclaration: VertexDeclaration;\r\n\r\n\tstatic get vertexDeclaration(): VertexDeclaration {\r\n\t\treturn PixelLineVertex._vertexDeclaration;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic __init__(): void {\r\n\t\tPixelLineVertex._vertexDeclaration = new VertexDeclaration(28,\r\n\t\t\t[new VertexElement(0, VertexElementFormat.Vector3, VertexMesh.MESH_POSITION0),\r\n\t\t\tnew VertexElement(12, VertexElementFormat.Vector4, VertexMesh.MESH_COLOR0)]);\r\n\t}\r\n\r\n\tget vertexDeclaration(): VertexDeclaration {\r\n\t\treturn PixelLineVertex._vertexDeclaration;\r\n\t}\r\n\r\n\tconstructor() {\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { LayaGL } from \"../../../layagl/LayaGL\";\r\nimport { Color } from \"../../../maths/Color\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\nimport { BufferUsage } from \"../../../RenderEngine/RenderEnum/BufferTargetType\";\r\nimport { DrawType } from \"../../../RenderEngine/RenderEnum/DrawType\";\r\nimport { MeshTopology } from \"../../../RenderEngine/RenderEnum/RenderPologyMode\";\r\nimport { BufferState } from \"../../../webgl/utils/BufferState\";\r\nimport { VertexBuffer3D } from \"../../graphics/VertexBuffer3D\";\r\nimport { Bounds } from \"../../math/Bounds\";\r\nimport { GeometryElement } from \"../GeometryElement\";\r\nimport { RenderContext3D } from \"../render/RenderContext3D\";\r\nimport { PixelLineData } from \"./PixelLineData\";\r\nimport { PixelLineRenderer } from \"./PixelLineRenderer\";\r\nimport { PixelLineVertex } from \"./PixelLineVertex\";\r\n\r\n/**\r\n * <code>PixelLineFilter</code> 类用于线过滤器。\r\n */\r\nexport class PixelLineFilter extends GeometryElement {\r\n\t/** @private */\r\n\tprivate static _tempVector0: Vector3 = new Vector3();\r\n\t/** @private */\r\n\tprivate static _tempVector1: Vector3 = new Vector3();\r\n\r\n\t/**@internal */\r\n\tprivate static _type: number = GeometryElement._typeCounter++;\r\n\r\n\t/** @internal */\r\n\tprivate _floatCountPerVertices: number = 7;\r\n\r\n\r\n\t/** @internal */\r\n\tprivate _vertexBuffer: VertexBuffer3D;\r\n\t/** @internal */\r\n\tprivate _vertices: Float32Array;\r\n\t/** @internal */\r\n\tprivate _minUpdate: number = Number.MAX_VALUE;\r\n\t/** @internal */\r\n\tprivate _maxUpdate: number = Number.MIN_VALUE;\r\n\t/** @internal */\r\n\tprivate _floatBound: Float32Array = new Float32Array(6);\r\n\t/** @internal */\r\n\tprivate _calculateBound: boolean = false;\r\n\r\n\t/** @internal */\r\n\t_ownerRender: PixelLineRenderer;\r\n\t/** @internal */\r\n\t_bounds: Bounds;\r\n\t/** @internal */\r\n\t_maxLineCount: number = 0;\r\n\t/** @internal */\r\n\t_lineCount: number = 0;\r\n\r\n\t/**\r\n\t * 创建一个PixelLineFilter实例\r\n\t * @param owner 渲染精灵节点 \r\n\t * @param maxLineCount 最大线长\r\n\t */\r\n\tconstructor(owner: PixelLineRenderer, maxLineCount: number) {\r\n\t\tsuper(MeshTopology.Lines, DrawType.DrawArray);\r\n\t\tvar pointCount: number = maxLineCount * 2;\r\n\t\tthis._ownerRender = owner;\r\n\t\tthis._maxLineCount = maxLineCount;\r\n\t\tthis._vertices = new Float32Array(pointCount * this._floatCountPerVertices);\r\n\t\tthis._vertexBuffer = LayaGL.renderOBJCreate.createVertexBuffer3D(PixelLineVertex.vertexDeclaration.vertexStride * pointCount, BufferUsage.Static, false);\r\n\t\tthis._vertexBuffer.vertexDeclaration = PixelLineVertex.vertexDeclaration;\r\n\r\n\t\tvar bufferState = new BufferState();\r\n\t\tthis.bufferState = bufferState;\r\n\t\tthis.bufferState.applyState([this._vertexBuffer], null);\r\n\r\n\t\tvar min: Vector3 = PixelLineFilter._tempVector0;\r\n\t\tvar max: Vector3 = PixelLineFilter._tempVector1;\r\n\t\tmin.setValue(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\r\n\t\tmax.setValue(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\r\n\t\tthis._bounds = new Bounds(min, max);\r\n\t}\r\n\r\n\t/**\r\n\t *\t{@inheritDoc PixelLineFilter._getType}\r\n\t *\t@override\r\n\t *  @internal\r\n\t */\r\n\t_getType(): number {\r\n\t\treturn PixelLineFilter._type;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_resizeLineData(maxCount: number): void {\r\n\t\tvar pointCount: number = maxCount * 2;\r\n\t\tvar lastVertices: Float32Array = this._vertices;\r\n\r\n\t\tthis._vertexBuffer.destroy();\r\n\t\tthis._maxLineCount = maxCount;\r\n\r\n\t\tvar vertexCount: number = pointCount * this._floatCountPerVertices;\r\n\t\tthis._vertices = new Float32Array(vertexCount);\r\n\t\tthis._vertexBuffer = LayaGL.renderOBJCreate.createVertexBuffer3D(PixelLineVertex.vertexDeclaration.vertexStride * pointCount, BufferUsage.Static, false);\r\n\t\tthis._vertexBuffer.vertexDeclaration = PixelLineVertex.vertexDeclaration;\r\n\r\n\t\tif (vertexCount < lastVertices.length) {//取最小长度,拷贝旧数据\r\n\t\t\tthis._vertices.set(new Float32Array(lastVertices.buffer, 0, vertexCount));\r\n\t\t\tthis._vertexBuffer.setData(this._vertices.buffer, 0, 0, vertexCount * 4);\r\n\t\t} else {\r\n\t\t\tthis._vertices.set(lastVertices);\r\n\t\t\tthis._vertexBuffer.setData(this._vertices.buffer, 0, 0, lastVertices.length * 4);\r\n\t\t}\r\n\r\n\t\tthis.bufferState.applyState([this._vertexBuffer], null);\r\n\r\n\t\tthis._minUpdate = Number.MAX_VALUE;\r\n\t\tthis._maxUpdate = Number.MIN_VALUE;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _updateLineVertices(offset: number, startPosition: Vector3, endPosition: Vector3, startColor: Color, endColor: Color): void {\r\n\t\tif (startPosition) {\r\n\t\t\tthis._vertices[offset + 0] = startPosition.x;\r\n\t\t\tthis._vertices[offset + 1] = startPosition.y;\r\n\t\t\tthis._vertices[offset + 2] = startPosition.z;\r\n\t\t}\r\n\r\n\t\tif (startColor) {\r\n\t\t\tthis._vertices[offset + 3] = startColor.r;\r\n\t\t\tthis._vertices[offset + 4] = startColor.g;\r\n\t\t\tthis._vertices[offset + 5] = startColor.b;\r\n\t\t\tthis._vertices[offset + 6] = startColor.a;\r\n\t\t}\r\n\r\n\t\tif (endPosition) {\r\n\t\t\tthis._vertices[offset + 7] = endPosition.x;\r\n\t\t\tthis._vertices[offset + 8] = endPosition.y;\r\n\t\t\tthis._vertices[offset + 9] = endPosition.z;\r\n\t\t}\r\n\r\n\t\tif (endColor) {\r\n\t\t\tthis._vertices[offset + 10] = endColor.r;\r\n\t\t\tthis._vertices[offset + 11] = endColor.g;\r\n\t\t\tthis._vertices[offset + 12] = endColor.b;\r\n\t\t\tthis._vertices[offset + 13] = endColor.a;\r\n\t\t}\r\n\t\tthis._minUpdate = Math.min(this._minUpdate, offset);\r\n\t\tthis._maxUpdate = Math.max(this._maxUpdate, offset + this._floatCountPerVertices * 2);\r\n\r\n\t\t//expand bound\r\n\t\tvar bounds: Bounds = this._bounds;\r\n\t\tvar floatBound: Float32Array = this._floatBound;\r\n\t\tvar min: Vector3 = bounds.getMin(), max: Vector3 = bounds.getMax();\r\n\t\tVector3.min(min, startPosition, min);\r\n\t\tVector3.min(min, endPosition, min);\r\n\t\tVector3.max(max, startPosition, max);\r\n\t\tVector3.max(max, endPosition, max);\r\n\t\tbounds.setMin(min);\r\n\t\tbounds.setMax(max);\r\n\t\tfloatBound[0] = min.x, floatBound[1] = min.y, floatBound[2] = min.z;\r\n\t\tfloatBound[3] = max.x, floatBound[4] = max.y, floatBound[5] = max.z;\r\n\t\tthis._ownerRender.boundsChange = true;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_reCalculateBound(): void {\r\n\t\tif (this._calculateBound) {\r\n\t\t\tvar vertices: Float32Array = this._vertices;\r\n\t\t\tvar min: Vector3 = PixelLineFilter._tempVector0;\r\n\t\t\tvar max: Vector3 = PixelLineFilter._tempVector1;\r\n\t\t\tmin.setValue(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\r\n\t\t\tmax.setValue(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\r\n\t\t\tfor (var i: number = 0; i < this._lineCount * 2; ++i) {\r\n\t\t\t\tvar offset: number = this._floatCountPerVertices * i;\r\n\t\t\t\tvar x: number = vertices[offset + 0], y: number = vertices[offset + 1], z: number = vertices[offset + 2];\r\n\t\t\t\tmin.x = Math.min(x, min.x);\r\n\t\t\t\tmin.y = Math.min(y, min.y);\r\n\t\t\t\tmin.z = Math.min(z, min.z);\r\n\t\t\t\tmax.x = Math.max(x, max.x);\r\n\t\t\t\tmax.y = Math.max(y, max.y);\r\n\t\t\t\tmax.z = Math.max(z, max.z);\r\n\t\t\t}\r\n\t\t\tthis._bounds.setMin(min);\r\n\t\t\tthis._bounds.setMax(max);\r\n\t\t\tvar floatBound: Float32Array = this._floatBound;\r\n\t\t\tfloatBound[0] = min.x, floatBound[1] = min.y, floatBound[2] = min.z;\r\n\t\t\tfloatBound[3] = max.x, floatBound[4] = max.y, floatBound[5] = max.z;\r\n\t\t\tthis._calculateBound = false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_removeLineData(index: number): void {\r\n\t\tvar floatCount: number = this._floatCountPerVertices * 2;\r\n\t\tvar nextIndex: number = index + 1;\r\n\t\tvar offset: number = index * floatCount;\r\n\r\n\t\tvar vertices: Float32Array = this._vertices;\r\n\t\tvar rightPartVertices: Float32Array = new Float32Array(vertices.buffer, nextIndex * floatCount * 4, (this._lineCount - nextIndex) * floatCount);\r\n\t\tvertices.set(rightPartVertices, offset);\r\n\t\tthis._minUpdate = Math.min(this._minUpdate, offset);\r\n\t\tthis._maxUpdate = Math.max(this._maxUpdate, offset + rightPartVertices.length);\r\n\t\tthis._lineCount--;\r\n\r\n\t\tvar floatBound: Float32Array = this._floatBound;\r\n\t\tvar startX: number = vertices[offset], startY: number = vertices[offset + 1], startZ: number = vertices[offset + 2];\r\n\t\tvar endX: number = vertices[offset + 7], endY: number = vertices[offset + 8], endZ: number = vertices[offset + 9];\r\n\t\tvar minX: number = floatBound[0], minY: number = floatBound[1], minZ: number = floatBound[2];\r\n\t\tvar maxX: number = floatBound[3], maxY: number = floatBound[4], maxZ: number = floatBound[5];\r\n\r\n\t\tif ((startX === minX) || (startX === maxX) || (startY === minY) || (startY === maxY) || (startZ === minZ) || (startZ === maxZ) ||\r\n\t\t\t(endX === minX) || (endX === maxX) || (endY === minY) || (endY === maxY) || (endZ === minZ) || (endZ === maxZ))\r\n\t\t\tthis._calculateBound = true;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_updateLineData(index: number, startPosition: Vector3, endPosition: Vector3, startColor: Color, endColor: Color): void {\r\n\t\tvar floatCount: number = this._floatCountPerVertices * 2;\r\n\t\tthis._updateLineVertices(index * floatCount, startPosition, endPosition, startColor, endColor);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_updateLineDatas(index: number, data: PixelLineData[]): void {\r\n\t\tvar floatCount: number = this._floatCountPerVertices * 2;\r\n\t\tvar count: number = data.length;\r\n\t\tfor (var i: number = 0; i < count; i++) {\r\n\t\t\tvar line: PixelLineData = data[i];\r\n\t\t\tthis._updateLineVertices((index + i) * floatCount, line.startPosition, line.endPosition, line.startColor, line.endColor);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 获取线段数据\r\n\t * @return 线段数据。\r\n\t */\r\n\t_getLineData(index: number, out: PixelLineData): void {\r\n\t\tvar startPosition: Vector3 = out.startPosition;\r\n\t\tvar startColor: Color = out.startColor;\r\n\t\tvar endPosition: Vector3 = out.endPosition;\r\n\t\tvar endColor: Color = out.endColor;\r\n\r\n\t\tvar vertices: Float32Array = this._vertices;\r\n\t\tvar offset: number = index * this._floatCountPerVertices * 2;\r\n\r\n\t\tstartPosition.x = vertices[offset + 0];\r\n\t\tstartPosition.y = vertices[offset + 1];\r\n\t\tstartPosition.z = vertices[offset + 2];\r\n\t\tstartColor.r = vertices[offset + 3];\r\n\t\tstartColor.g = vertices[offset + 4];\r\n\t\tstartColor.b = vertices[offset + 5];\r\n\t\tstartColor.a = vertices[offset + 6];\r\n\r\n\t\tendPosition.x = vertices[offset + 7];\r\n\t\tendPosition.y = vertices[offset + 8];\r\n\t\tendPosition.z = vertices[offset + 9];\r\n\t\tendColor.r = vertices[offset + 10];\r\n\t\tendColor.g = vertices[offset + 11];\r\n\t\tendColor.b = vertices[offset + 12];\r\n\t\tendColor.a = vertices[offset + 13];\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\t_prepareRender(state: RenderContext3D): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\t_updateRenderParams(state: RenderContext3D): void {\r\n\t\tthis.clearRenderParams();\r\n\t\tif (this._minUpdate !== Number.MAX_VALUE && this._maxUpdate !== Number.MIN_VALUE) {\r\n\t\t\tthis._vertexBuffer.setData(this._vertices.buffer, this._minUpdate * 4, this._minUpdate * 4, (this._maxUpdate - this._minUpdate) * 4);\r\n\t\t\tthis._minUpdate = Number.MAX_VALUE;\r\n\t\t\tthis._maxUpdate = Number.MIN_VALUE;\r\n\t\t}\r\n\t\tif (this._lineCount > 0) {\r\n\t\t\tthis.setDrawArrayParams(0, this._lineCount * 2);\r\n\t\t\t// LayaGL.renderDrawConatext.drawArrays(MeshTopology.Lines, 0, this._lineCount * 2);\r\n\t\t\t// Stat.renderBatches++;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * 删除\r\n\t */\r\n\tdestroy(): void {\r\n\t\tif (this._destroyed)\r\n\t\t\treturn;\r\n\t\tsuper.destroy();\r\n\t\tthis.bufferState.destroy();\r\n\t\tthis._vertexBuffer.destroy();\r\n\t\tthis.bufferState = null;\r\n\t\tthis._vertexBuffer = null;\r\n\t\tthis._vertices = null;\r\n\t}\r\n}\r\n\r\n","import { Vector4 } from \"../../../maths/Vector4\";\r\nimport { Shader3D } from \"../../../RenderEngine/RenderShader/Shader3D\";\r\nimport { Material } from \"../material/Material\";\r\n\r\n/**\r\n * <code>PixelLineMaterial</code> 类用于实现像素线材质。\r\n */\r\nexport class PixelLineMaterial extends Material {\r\n\t/**@internal */\r\n\tstatic COLOR: number;\r\n\r\n\t/** 默认材质，禁止修改*/\r\n\tstatic defaultMaterial: PixelLineMaterial;\r\n\r\n\t/**\r\n\t* @internal\r\n\t*/\r\n\tstatic __initDefine__(): void {\r\n\t\tPixelLineMaterial.COLOR = Shader3D.propertyNameToID(\"u_Color\");\r\n\t}\r\n\r\n\t/**\r\n\t * 获取颜色。\r\n\t * @return 颜色。\r\n\t */\r\n\tget color(): Vector4 {\r\n\t\treturn (<Vector4>this._shaderValues.getVector(PixelLineMaterial.COLOR));\r\n\t}\r\n\r\n\t/**\r\n\t * 设置颜色。\r\n\t * @param value 颜色。\r\n\t */\r\n\tset color(value: Vector4) {\r\n\t\tthis._shaderValues.setVector(PixelLineMaterial.COLOR, value);\r\n\t}\r\n\r\n\t/**\r\n\t *  创建一个 <code>PixelLineMaterial</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.setShaderName(\"LineShader\");\r\n\t\tthis._shaderValues.setVector(PixelLineMaterial.COLOR, new Vector4(1.0, 1.0, 1.0, 1.0));\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * 克隆。\r\n\t * @return\t 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar dest: PixelLineMaterial = new PixelLineMaterial();\r\n\t\tthis.cloneTo(dest);\r\n\t\treturn dest;\r\n\t}\r\n\r\n}\r\n\r\n","import { Component } from \"../../../components/Component\";\r\nimport { Color } from \"../../../maths/Color\";\r\nimport { Matrix4x4 } from \"../../../maths/Matrix4x4\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\nimport { Vector4 } from \"../../../maths/Vector4\";\r\nimport { ShaderData } from \"../../../RenderEngine/RenderShader/ShaderData\";\r\nimport { Material } from \"../material/Material\";\r\nimport { MeshSprite3DShaderDeclaration } from \"../MeshSprite3DShaderDeclaration\";\r\nimport { BaseRender } from \"../render/BaseRender\";\r\nimport { RenderContext3D } from \"../render/RenderContext3D\";\r\nimport { RenderElement } from \"../render/RenderElement\";\r\nimport { Sprite3D } from \"../Sprite3D\";\r\nimport { Transform3D } from \"../Transform3D\";\r\nimport { PixelLineData } from \"./PixelLineData\";\r\nimport { PixelLineFilter } from \"./PixelLineFilter\";\r\nimport { PixelLineMaterial } from \"./PixelLineMaterial\";\r\n\r\n\r\n/**\r\n * <code>PixelLineRenderer</code> 类用于线渲染器。\r\n */\r\nexport class PixelLineRenderer extends BaseRender {\r\n    /** @internal */\r\n    protected _projectionViewWorldMatrix: Matrix4x4;\r\n\r\n    /**@internal */\r\n    _pixelLineFilter: PixelLineFilter;\r\n    /** @private 是否调用active */\r\n    private _isRenderActive: Boolean = false;\r\n    /** @private 是否加入渲染队列*/\r\n    private _isInRenders: Boolean = false;\r\n\r\n    private _needUpdatelines: boolean = false;\r\n    /**\r\n     * 创建一个PixelLineRenderer实例\r\n     * @param owner 线渲染精灵\r\n     */\r\n    constructor() {\r\n        super();\r\n        this._projectionViewWorldMatrix = new Matrix4x4();\r\n        this._pixelLineFilter = new PixelLineFilter(this, 20);\r\n        this._shaderValues.addDefine(MeshSprite3DShaderDeclaration.SHADERDEFINE_COLOR);\r\n    }\r\n\r\n    private _lines: PixelLineData[] = [];\r\n\r\n    get pixelLinesDatas() {\r\n        if (this._needUpdatelines) {\r\n            this._updateLineDatas();\r\n        }\r\n        return this._lines;\r\n    }\r\n\r\n    set pixelLinesDatas(value: PixelLineData[]) {\r\n        this.clear();\r\n        this.addLines(value);\r\n    }\r\n\r\n    /**\r\n     * 最大线数量\r\n     */\r\n    get maxLineCount(): number {\r\n        return this._pixelLineFilter._maxLineCount;\r\n    }\r\n\r\n    set maxLineCount(value: number) {\r\n        this._pixelLineFilter._resizeLineData(value);\r\n        this._pixelLineFilter._lineCount = Math.min(this._pixelLineFilter._lineCount, value);\r\n    }\r\n\r\n    /**\r\n     * 获取线数量。\r\n     */\r\n    get lineCount(): number {\r\n        return this._pixelLineFilter._lineCount;\r\n    }\r\n\r\n    protected _onAdded(): void {\r\n        super._onAdded();\r\n        this._changeRenderObjects(0, PixelLineMaterial.defaultMaterial);\r\n    }\r\n\r\n    protected _onEnable(): void {\r\n        this._isRenderActive = true;\r\n        if (this._pixelLineFilter._lineCount != 0) {\r\n            (this.owner.scene)._addRenderObject(this);\r\n            this._isInRenders = true;\r\n        }\r\n        this._setBelongScene(this.owner.scene);\r\n    }\r\n\r\n    protected _onDisable(): void {\r\n        if (this._pixelLineFilter && this._pixelLineFilter._lineCount != 0 && this._isRenderActive) {\r\n            this.owner.scene._removeRenderObject(this);\r\n            this._isInRenders = false;\r\n        }\r\n        this._isRenderActive = false;\r\n        this._setUnBelongScene();\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     * @internal\r\n     */\r\n    protected _calculateBoundingBox(): void {\r\n        var worldMat: Matrix4x4 = (this.owner as Sprite3D).transform.worldMatrix;\r\n        var lineFilter: PixelLineFilter = this._pixelLineFilter;\r\n        lineFilter._reCalculateBound();\r\n        lineFilter._bounds._tranform(worldMat, this._bounds);\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     * @internal\r\n     */\r\n    _renderUpdateWithCamera(context: RenderContext3D, transform: Transform3D): void {//TODO:整理_renderUpdate\r\n        var projectionView: Matrix4x4 = context.projectionViewMatrix;\r\n        var sv: ShaderData = this._shaderValues;\r\n        if (transform) {\r\n            var worldMat: Matrix4x4 = transform.worldMatrix;\r\n            sv.setMatrix4x4(Sprite3D.WORLDMATRIX, worldMat);\r\n            this._worldParams.x = transform.getFrontFaceValue();\r\n            sv.setVector(Sprite3D.WORLDINVERTFRONT, this._worldParams);\r\n        } else {\r\n            sv.setMatrix4x4(Sprite3D.WORLDMATRIX, Matrix4x4.DEFAULT);\r\n            sv.setVector(Sprite3D.WORLDINVERTFRONT, Vector4.UnitX);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    _changeRenderObjects(index: number, material: Material): void {\r\n        var renderObjects: RenderElement[] = this._renderElements;\r\n        (material) || (material = PixelLineMaterial.defaultMaterial);\r\n        var renderElement: RenderElement = renderObjects[index];\r\n        (renderElement) || (renderElement = renderObjects[index] = new RenderElement());\r\n        renderElement.setTransform((this.owner as Sprite3D)._transform);\r\n        renderElement.setGeometry(this._pixelLineFilter);\r\n        renderElement.render = this;\r\n        renderElement.material = material;\r\n    }\r\n\r\n    /**\r\n     * @internal //animator data set call\r\n     * @param key \r\n     */\r\n    _pixelLinesDataChange(key: string) {\r\n        if (key != null) {\r\n            let keyN = parseInt(key);\r\n            let line = this._lines[keyN];\r\n            if (line) {\r\n                this.setLine(keyN, line.startPosition, line.endPosition, line.startColor, line.endColor);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 增加一条线。\r\n     * @param\tstartPosition  初始点位置\r\n     * @param\tendPosition\t   结束点位置\r\n     * @param\tstartColor\t   初始点颜色\r\n     * @param\tendColor\t   结束点颜色\r\n     */\r\n    addLine(startPosition: Vector3, endPosition: Vector3, startColor: Color, endColor: Color): void {\r\n        if (this._pixelLineFilter._lineCount !== this._pixelLineFilter._maxLineCount)\r\n            this._pixelLineFilter._updateLineData(this._pixelLineFilter._lineCount++, startPosition, endPosition, startColor, endColor);\r\n        else\r\n            throw \"PixelLineSprite3D: lineCount has equal with maxLineCount.\";\r\n        if (this._isRenderActive && !this._isInRenders && this._pixelLineFilter._lineCount > 0) {\r\n            this.owner.scene && this.owner.scene._addRenderObject(this);\r\n            this._isInRenders = true;\r\n        }\r\n        this._needUpdatelines = true;\r\n    }\r\n\r\n    /**\r\n     * 添加多条线段。\r\n     * @param\tlines  线段数据\r\n     */\r\n    addLines(lines: PixelLineData[]): void {\r\n        var lineCount: number = this._pixelLineFilter._lineCount;\r\n        var addCount: number = lines.length;\r\n        if (lineCount + addCount > this._pixelLineFilter._maxLineCount) {\r\n            throw \"PixelLineSprite3D: lineCount plus lines count must less than maxLineCount.\";\r\n        } else {\r\n            this._pixelLineFilter._updateLineDatas(lineCount, lines);\r\n            this._pixelLineFilter._lineCount += addCount;\r\n        }\r\n        if (this._isRenderActive && !this._isInRenders && this._pixelLineFilter._lineCount > 0) {\r\n            this.owner.scene && this.owner.scene._addRenderObject(this);\r\n            this._isInRenders = true;\r\n        }\r\n        this._needUpdatelines = true;\r\n    }\r\n\r\n    /**\r\n     * 移除一条线段。\r\n     * @param index 索引。\r\n     */\r\n    removeLine(index: number): void {\r\n        if (index < this._pixelLineFilter._lineCount)\r\n            this._pixelLineFilter._removeLineData(index);\r\n        else\r\n            throw \"PixelLineSprite3D: index must less than lineCount.\";\r\n        if (this._isRenderActive && this._isInRenders && this._pixelLineFilter._lineCount == 0) {\r\n            this.owner.scene && this.owner.scene._removeRenderObject(this);\r\n            this._isInRenders = false;\r\n        }\r\n        this._needUpdatelines = true;\r\n    }\r\n\r\n    /**\r\n     * 更新线\r\n     * @param\tindex  \t\t   索引\r\n     * @param\tstartPosition  初始点位置\r\n     * @param\tendPosition\t   结束点位置\r\n     * @param\tstartColor\t   初始点颜色\r\n     * @param\tendColor\t   结束点颜色\r\n     */\r\n    setLine(index: number, startPosition: Vector3, endPosition: Vector3, startColor: Color, endColor: Color): void {\r\n        if (index < this._pixelLineFilter._lineCount) {\r\n            this._pixelLineFilter._updateLineData(index, startPosition, endPosition, startColor, endColor);\r\n            let pixeldata = this._lines[index];\r\n            if (pixeldata) {\r\n                startColor.cloneTo(pixeldata.startColor);\r\n                endColor.cloneTo(pixeldata.endColor);\r\n                startPosition.cloneTo(pixeldata.startPosition);\r\n                endPosition.cloneTo(pixeldata.endPosition);\r\n            }\r\n        }\r\n\r\n        else\r\n            throw \"PixelLineSprite3D: index must less than lineCount.\";\r\n    }\r\n\r\n    /**\r\n     * 获取线段数据\r\n     * @param out 线段数据。\r\n     */\r\n    getLine(index: number, out: PixelLineData): void {\r\n        if (index < this.lineCount)\r\n            this._pixelLineFilter._getLineData(index, out);\r\n        else\r\n            throw \"PixelLineSprite3D: index must less than lineCount.\";\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _updateLineDatas() {\r\n        let n = this.lineCount;\r\n        this._lines = [];\r\n        for (let i = 0; i < n; i++) {\r\n            let pixelLineDatas = new PixelLineData();\r\n            this.getLine(i, pixelLineDatas);\r\n            this._lines.push(pixelLineDatas);\r\n        }\r\n        this._needUpdatelines = false;\r\n    }\r\n\r\n    /**\r\n     * 清除所有线段。\r\n     */\r\n    clear(): void {\r\n        this._pixelLineFilter._lineCount = 0;\r\n        if (this._isRenderActive && this._isInRenders) {\r\n            this.owner.scene && this.owner.scene._removeRenderObject(this);\r\n            this._isInRenders = false;\r\n        }\r\n    }\r\n\r\n    protected _onDestroy() {\r\n        this._pixelLineFilter.destroy();\r\n        this._pixelLineFilter = null;\r\n        super._onDestroy();\r\n    }\r\n\r\n    /**\r\n     * @override\r\n     * @param dest \r\n     */\r\n    _cloneTo(dest: Component): void {\r\n        super._cloneTo(dest);\r\n        let render = dest as PixelLineRenderer;\r\n        render.maxLineCount = this.maxLineCount;\r\n        const lineCount = this.lineCount;\r\n        let linedata = new PixelLineData();\r\n        for (let i = 0, n = lineCount; i < n; i++) {\r\n            this.getLine(i, linedata);\r\n            render.addLine(linedata.startPosition, linedata.endPosition, linedata.startColor, linedata.endColor);\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\n","import { AnimatorState } from \"./AnimatorState\";\r\n\r\n/**\r\n * <code>AnimatorPlayState</code> 类用于创建动画播放状态信息。\r\n */\r\nexport class AnimatorPlayState {\r\n\t/**@internal */\r\n\t_finish: boolean;\r\n\t/**@internal */\r\n\t_startPlayTime: number;\r\n\t/**@internal */\r\n\t_lastElapsedTime: number;\r\n\t/**@internal 动画播放时间*/\r\n\t_elapsedTime: number;\r\n\t/**@internal 播放状态的归一化时间,整数为循环次数，小数为单次播放时间。*/\r\n\t_normalizedTime: number;\r\n\t/**@internal 单词播放归一化时间 */\r\n\t_normalizedPlayTime: number;\r\n\t/**@internal */\r\n\t_duration: number;\r\n\t/**@internal 上次播放的时间，event事件使用*/\r\n\t_parentPlayTime: number;\r\n\t/**@internal */\r\n\t_playEventIndex: number;\r\n\t/**@internal */\r\n\t_lastIsFront: boolean;\r\n\t/**@internal */\r\n\tprivate _currentState: AnimatorState | null = null;\r\n\r\n\t/**\r\n\t * 当前动画State\r\n\t */\r\n\tpublic get currentState(): AnimatorState | null {\r\n\t\treturn this._currentState;\r\n\t}\r\n\tpublic set currentState(value: AnimatorState | null) {\r\n\t\tthis._currentState = value;\r\n\t\tthis._currentState.curTransition = null;//清空目前条件判断\r\n\t}\r\n\r\n\t/**\r\n\t * 播放状态的归一化时间,整数为循环次数，小数为单次播放时间。\r\n\t */\r\n\tget normalizedTime(): number {\r\n\t\treturn this._normalizedTime;\r\n\t}\r\n\r\n\t/**\r\n\t * 当前动画的持续时间，以秒为单位。\r\n\t */\r\n\tget duration(): number {\r\n\t\treturn this._duration;\r\n\t}\r\n\r\n\t/**\r\n\t * 动画状态机。\r\n\t */\r\n\tget animatorState(): AnimatorState {\r\n\t\treturn this._currentState!;\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>AnimatorPlayState</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_resetPlayState(startTime: number, clipDuration: number): void {\r\n\t\tthis._finish = false;\r\n\t\tthis._playEventIndex = 0;\r\n\t\tthis._startPlayTime = startTime;\r\n\t\tthis._elapsedTime = startTime;\r\n\t\tthis._lastIsFront = true;\r\n\t\tthis._normalizedTime = this._elapsedTime / clipDuration;\r\n\t\tvar playTime = this._normalizedTime % 1.0;\r\n\t\tthis._normalizedPlayTime = playTime < 0 ? playTime + 1.0 : playTime;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_cloneTo(dest: AnimatorPlayState): void {\r\n\t\tdest._finish = this._finish;\r\n\t\tdest._startPlayTime = this._startPlayTime;\r\n\t\tdest._playEventIndex = this._playEventIndex;\r\n\t\tdest._elapsedTime = this._elapsedTime;\r\n\t\tdest._normalizedTime = this._normalizedTime;\r\n\t\tdest._normalizedPlayTime = this._normalizedPlayTime;\r\n\t\tdest._lastIsFront = this._lastIsFront;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { IClone } from \"../../../utils/IClone\";\r\nimport { AnimationClip } from \"../../animation/AnimationClip\";\r\nimport { Animator } from \"./Animator\";\r\nimport { AnimatorPlayState } from \"./AnimatorPlayState\";\r\nimport { AnimatorState } from \"./AnimatorState\";\r\nimport { AvatarMask } from \"./AvatarMask\";\r\nimport { KeyframeNodeOwner } from \"./KeyframeNodeOwner\";\r\n\r\n\r\n/**\r\n * <code>AnimatorControllerLayer</code> 类用于创建动画控制器层。\r\n */\r\nexport class AnimatorControllerLayer implements IClone {\r\n    /**混合模式_覆盖。 */\r\n    static BLENDINGMODE_OVERRIDE: number = 0;\r\n    /**混合模式_叠加。 */\r\n    static BLENDINGMODE_ADDTIVE: number = 1;\r\n\r\n    /**@internal */\r\n    private _defaultState: AnimatorState | null;\r\n    /**@internal */\r\n    private _referenceCount: number = 0;\r\n\r\n    /**@internal 0:常规播放、1:动态融合播放、2:固定融合播放*/\r\n    _playType: number = -1;\r\n    /**@internal */\r\n    _crossDuration: number = -1;\r\n    /**@internal */\r\n    _crossPlayState: AnimatorState;\r\n    /**@internal */\r\n    _crossMark: number = 0;\r\n    /**@internal */\r\n    _crossNodesOwnersCount: number = 0;\r\n    /**@internal */\r\n    _crossNodesOwners: KeyframeNodeOwner[] = [];\r\n    /**@internal */\r\n    _crossNodesOwnersIndicesMap: any = {};\r\n    /**@internal */\r\n    _srcCrossClipNodeIndices: number[] = [];\r\n    /**@internal */\r\n    _destCrossClipNodeIndices: number[] = [];\r\n\r\n    /**@internal */\r\n    _animator: Animator;\r\n    /**@internal */\r\n    _states: AnimatorState[] = [];\r\n    /**@internal */\r\n    _playStateInfo: AnimatorPlayState | null = new AnimatorPlayState();\r\n    /**@internal */\r\n    _crossPlayStateInfo: AnimatorPlayState | null = new AnimatorPlayState();\r\n    /**@internal */\r\n    _avatarMask: AvatarMask;\r\n    /** 层的名称。*/\r\n    name: string;\r\n    /** 混合模式。*/\r\n    blendingMode: number = AnimatorControllerLayer.BLENDINGMODE_OVERRIDE;\r\n    /** 默认权重。*/\r\n    defaultWeight: number = 1.0;\r\n    /**\t激活时是否自动播放。*/\r\n    playOnWake: boolean = true;\r\n    /** 是否开启 */\r\n    enable: boolean = true;\r\n\r\n    /**\r\n     * 默认动画状态机。\r\n     */\r\n    get defaultState(): AnimatorState {\r\n        return this._defaultState!;\r\n    }\r\n\r\n    set defaultState(value: AnimatorState) {\r\n        this._defaultState = value;\r\n    }\r\n\r\n    /**\r\n     * 骨骼遮罩\r\n     */\r\n    get avatarMask(): AvatarMask {\r\n        return this._avatarMask;\r\n    }\r\n\r\n    set avatarMask(value: AvatarMask) {\r\n        this._avatarMask = value;\r\n    }\r\n\r\n    //@internal\r\n    public get defaultStateName() {\r\n        if (!this._defaultState) {\r\n            return null;\r\n        }\r\n        return this._defaultState.name;\r\n    }\r\n\r\n    private _defaultStateNameCatch: string;\r\n    //@internal\r\n    public set defaultStateName(value: string) {\r\n        this._defaultState = this.getAnimatorState(value);\r\n        if (null == this._defaultState) {\r\n            if (0 == this._states.length) {\r\n                this._defaultStateNameCatch = value;\r\n            } else {\r\n                for (var i = this._states.length - 1; i >= 0; i--) {\r\n                    if (this._states[i].name == value) {\r\n                        this._defaultState = this._states[i];\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    //@internal\r\n    public get states(): ReadonlyArray<AnimatorState> {\r\n        return this._states;\r\n    }\r\n\r\n    //@internal\r\n    public set states(states: ReadonlyArray<AnimatorState>) {\r\n        if (this._states === states)\r\n            return;\r\n\r\n        if (this._states.length > 0) {\r\n            let removed = this._states.filter(s => states.indexOf(s) == -1);\r\n            for (let state of removed)\r\n                this.removeState(state);\r\n        }\r\n\r\n        if (states.length > 0) {\r\n            let newAdded = states.filter(s => this._states.indexOf(s) == -1);\r\n            for (let state of newAdded)\r\n                this.addState(state);\r\n        }\r\n\r\n        this._states.length = 0;\r\n        this._states.push(...states);\r\n    }\r\n\r\n    /**\r\n     * 创建一个 <code>AnimatorControllerLayer</code> 实例。\r\n     * @param 动画层名称\r\n     */\r\n    constructor(name: string) {\r\n        this.name = name;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _removeClip(clipStateInfos: AnimatorState[], index: number, state: AnimatorState): void {\r\n        var clip: AnimationClip = state._clip!;\r\n        var clipStateInfo: AnimatorState = clipStateInfos[index];\r\n\r\n        clipStateInfos.splice(index, 1);\r\n\r\n        if (this._animator) {\r\n            var frameNodes = clip._nodes;\r\n            var nodeOwners: KeyframeNodeOwner[] = clipStateInfo._nodeOwners;\r\n            clip._removeReference();\r\n            for (var i: number = 0, n: number = frameNodes!.count; i < n; i++)\r\n                this._animator._removeKeyframeNodeOwner(nodeOwners, frameNodes!.getNodeByIndex(i));\r\n        }\r\n    }\r\n\r\n    _getReferenceCount(): number {\r\n        return this._referenceCount;\r\n    }\r\n\r\n    _addReference(count: number = 1): void {\r\n        for (var i: number = 0, n: number = this._states.length; i < n; i++)\r\n            this._states[i]._addReference(count);\r\n        this._referenceCount += count;\r\n    }\r\n\r\n    _removeReference(count: number = 1): void {\r\n        for (var i: number = 0, n: number = this._states.length; i < n; i++)\r\n            this._states[i]._removeReference(count);\r\n        this._referenceCount -= count;\r\n    }\r\n\r\n    _clearReference(): void {\r\n        this._removeReference(-this._referenceCount);\r\n    }\r\n\r\n    /**\r\n     * 获取当前的播放状态。\r\n     * @return 动画播放状态。\r\n     */\r\n    getCurrentPlayState(): AnimatorPlayState {\r\n        return this._playStateInfo!;\r\n    }\r\n\r\n    /**\r\n     * 获取动画状态。\r\n     * @return 动画状态。\r\n     */\r\n    getAnimatorState(name: string): AnimatorState | null {\r\n        var state: AnimatorState;;\r\n        for (let i = 0; i < this._states.length; i++) {\r\n            if (this._states[i].name == name) {\r\n                state = this._states[i];\r\n                break;\r\n            }\r\n        }\r\n        return state ? state : null;\r\n    }\r\n\r\n    /**\r\n     * 添加动画状态。\r\n     * @param\tstate 动画状态。\r\n     * @param   layerIndex 层索引。\r\n     */\r\n    addState(state: AnimatorState): void {\r\n        var stateName: string = state.name;\r\n        if (this.getAnimatorState(stateName)) {\r\n            throw \"AnimatorControllerLayer:this stat's name has exist.\";\r\n        } else {\r\n            this._states.push(state);\r\n            if (stateName == this._defaultStateNameCatch) {\r\n                this._defaultState = state;\r\n                this._defaultStateNameCatch = null;\r\n            }\r\n\r\n            if (this._animator) {\r\n                (state._clip) && (state._clip!._addReference());\r\n                this._animator._getOwnersByClip(state);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 移除动画状态。\r\n     * @param\tstate 动画状态。\r\n     * @param   layerIndex 层索引。\r\n     */\r\n    removeState(state: AnimatorState): void {\r\n        var states: AnimatorState[] = this._states;\r\n        var index: number = -1;\r\n        for (var i: number = 0, n: number = states.length; i < n; i++) {\r\n            if (states[i] === state) {\r\n                index = i;\r\n                break;\r\n            }\r\n        }\r\n        if (index !== -1)\r\n            this._removeClip(states, index, state);\r\n    }\r\n\r\n    /**\r\n     * 销毁。\r\n     */\r\n    destroy(): void {\r\n        this._clearReference();\r\n        this._states = [];\r\n        this._playStateInfo = null;\r\n        this._crossPlayStateInfo = null;\r\n        this._defaultState = null;\r\n    }\r\n\r\n    /**\r\n     * 克隆。\r\n     * @param\tdestObject 克隆源。\r\n     */\r\n    cloneTo(destObject: any): void {\r\n        var dest: AnimatorControllerLayer = (<AnimatorControllerLayer>destObject);\r\n        dest.name = this.name;\r\n        dest.blendingMode = this.blendingMode;\r\n        dest.defaultWeight = this.defaultWeight;\r\n        dest.playOnWake = this.playOnWake;\r\n        this.avatarMask && (dest.avatarMask = this._avatarMask.clone());\r\n    }\r\n\r\n    /**\r\n     * 克隆。\r\n     * @return\t 克隆副本。\r\n     */\r\n    clone(): any {\r\n        var dest: AnimatorControllerLayer = new AnimatorControllerLayer(this.name);\r\n        this.cloneTo(dest);\r\n        return dest;\r\n    }\r\n\r\n}\r\n\r\n\r\n","import { Component } from \"../../../components/Component\";\r\nimport { ClassUtils } from \"../../../utils/ClassUtils\";\r\nimport { SimpleSkinnedMeshRenderer } from \"../../core/SimpleSkinnedMeshRenderer\";\r\nimport { Sprite3D } from \"../../core/Sprite3D\";\r\n\r\n\r\nexport class AnimatorResource {\r\n    static getAnimatorResource(sprite: Sprite3D, propertyKey: string): Component {\r\n        switch (propertyKey) {\r\n            case \"simpleSkinnedMeshRenderer\":\r\n                return sprite.getComponent(SimpleSkinnedMeshRenderer);\r\n            default:\r\n                return sprite.getComponent(ClassUtils.getClass(propertyKey));\r\n                break;\r\n        }\r\n        return null;\r\n    }\r\n}","import { EventDispatcher } from \"../../../events/EventDispatcher\";\r\nimport { Quaternion } from \"../../../maths/Quaternion\";\r\nimport { Vector2 } from \"../../../maths/Vector2\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\nimport { Vector4 } from \"../../../maths/Vector4\";\r\nimport { IClone } from \"../../../utils/IClone\";\r\nimport { AnimationClip } from \"../../animation/AnimationClip\";\r\nimport { AnimatorStateScript } from \"../../animation/AnimatorStateScript\";\r\nimport { KeyframeNodeList } from \"../../animation/KeyframeNodeList\";\r\nimport { Animator, AnimatorParams } from \"./Animator\";\r\nimport { AnimatorTransition } from \"./AnimatorTransition\";\r\nimport { KeyframeNodeOwner, KeyFrameValueType } from \"./KeyframeNodeOwner\";\r\n\r\n/**\r\n * <code>AnimatorState</code> 类用于创建动作状态。\r\n */\r\nexport class AnimatorState extends EventDispatcher implements IClone {\r\n    /**\r\n     * 动画事件 开始时调用\r\n     */\r\n    static EVENT_OnStateEnter = \"OnStartEnter\";\r\n    /**\r\n     * 动画事件 更新时调用\r\n     */\r\n    static EVENT_OnStateUpdate = \"OnStateUpdate\";\r\n    /**\r\n     * 动画事件 离开时调用\r\n     */\r\n    static EVENT_OnStateExit = \"OnStateExit\";\r\n\r\n    /** @internal */\r\n    private _referenceCount: number = 0;\r\n\r\n    /** @internal */\r\n    _clip: AnimationClip | null = null;\r\n\r\n    /** @internal */\r\n    _nodeOwners: KeyframeNodeOwner[] = [];//TODO:提出去\r\n\r\n    /** @internal */\r\n    _currentFrameIndices: Int16Array | null = null;\r\n\r\n    /**是否循环播放,为0时则使用_clip.islooping，1为循环，2为不循环 */\r\n    _isLooping: 0 | 1 | 2 = 0;\r\n\r\n    /**\r\n     * @internal\r\n     * to avoid data confused,must put realtime datas in animatorState,can't be in animationClip,\r\n     * for example use crossFade() with different animatorState but the sample clip source.\r\n     */\r\n    _realtimeDatas: Array<number | Vector3 | Quaternion> = [];\r\n\r\n    /** @internal */\r\n    _scripts: AnimatorStateScript[] | null = null;\r\n\r\n    /**@internal 过渡列表*/\r\n    _transitions: AnimatorTransition[] = [];\r\n\r\n    /**@internal 优先过渡列表only play this transition */\r\n    _soloTransitions: AnimatorTransition[] = [];\r\n\r\n    curTransition: AnimatorTransition;\r\n\r\n    /**名称。*/\r\n    name: string;\r\n\r\n    /**动画播放速度,1.0为正常播放速度。*/\r\n    speed: number = 1.0;\r\n\r\n    /**动作播放起始时间。*/\r\n    clipStart: number = 0.0;\r\n\r\n    /**动作播放结束时间。*/\r\n    clipEnd: number = 1.0;\r\n    /**play on awake start offset*/\r\n    cycleOffset: number = 0;\r\n\r\n    /**\r\n     * 动作。\r\n     */\r\n    get clip(): AnimationClip | null {\r\n        return this._clip;\r\n    }\r\n\r\n    set clip(value: AnimationClip | null) {\r\n        if (this._clip !== value) {\r\n            if (this._clip)\r\n                (this._referenceCount > 0) && (this._clip._removeReference(this._referenceCount));\r\n            if (value) {\r\n                var realtimeDatas: Array<number | Vector3 | Quaternion | Vector2 | Vector4> = this._realtimeDatas;\r\n                var clipNodes: KeyframeNodeList = value._nodes!;\r\n                var count: number = clipNodes.count;\r\n                this._currentFrameIndices = new Int16Array(count);\r\n                this._resetFrameIndices();\r\n                (this._referenceCount > 0) && (value._addReference(this._referenceCount));\r\n                this._realtimeDatas.length = count;\r\n                for (var i: number = 0; i < count; i++) {\r\n                    switch (clipNodes.getNodeByIndex(i).type) {\r\n                        case KeyFrameValueType.Float:\r\n                            break;\r\n                        case KeyFrameValueType.Position:\r\n                        case KeyFrameValueType.Scale:\r\n                        case KeyFrameValueType.RotationEuler:\r\n                        case KeyFrameValueType.Vector3:\r\n                            realtimeDatas[i] = new Vector3();\r\n                            break;\r\n                        case KeyFrameValueType.Rotation:\r\n                            realtimeDatas[i] = new Quaternion();\r\n                            break;\r\n                        case KeyFrameValueType.Vector2:\r\n                            realtimeDatas[i] = new Vector2();\r\n                            break;\r\n                        case KeyFrameValueType.Vector4:\r\n                        case KeyFrameValueType.Color:\r\n                            realtimeDatas[i] = new Vector4();\r\n                            break;\r\n                        default:\r\n                            throw \"AnimationClipParser04:unknown type.\";\r\n                    }\r\n                }\r\n            }\r\n            this._clip = value;\r\n        }\r\n    }\r\n    get islooping() {\r\n        if (0 != this._isLooping) {\r\n            return 1 == this._isLooping;\r\n        }\r\n        return this._clip.islooping;\r\n    }\r\n\r\n    /**\r\n     * IDE\r\n     */\r\n    get transitions() {\r\n        return this._transitions;\r\n    }\r\n\r\n    set transitions(value: AnimatorTransition[]) {\r\n        this._transitions = value;\r\n    }\r\n\r\n    /**\r\n     * IDE\r\n     */\r\n    get soloTransitions() {\r\n        return this._soloTransitions;\r\n    }\r\n\r\n    set soloTransitions(value: AnimatorTransition[]) {\r\n        this._soloTransitions = value\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * 创建一个 <code>AnimatorState</code> 实例。\r\n     */\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _eventStart(animator: Animator, layerIndex: number) {\r\n        this.event(AnimatorState.EVENT_OnStateEnter);\r\n\r\n        if (this._scripts) {\r\n            for (var i: number = 0, n: number = this._scripts.length; i < n; i++) {\r\n                this._scripts[i].setPlayScriptInfo(animator, layerIndex, this);\r\n                this._scripts[i].onStateEnter();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _eventExit() {\r\n        this.event(AnimatorState.EVENT_OnStateExit);\r\n        this.curTransition = null;\r\n        if (this._scripts) {\r\n            for (let i = 0, n = this._scripts.length; i < n; i++) {\r\n                this._scripts[i].onStateExit();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _eventStateUpdate(value: number) {\r\n        this.event(AnimatorState.EVENT_OnStateUpdate, value);\r\n        if (this._scripts) {\r\n            for (var i = 0, n = this._scripts.length; i < n; i++)\r\n                this._scripts[i].onStateUpdate(value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 派发过渡事件\r\n     * @internal\r\n     * @param normalizeTime \r\n     * @param paramsMap \r\n     */\r\n    _eventtransition(normalizeTime: number, paramsMap: AnimatorParams): AnimatorTransition {\r\n        let soloNums = this._soloTransitions.length;\r\n        if (soloNums > 0) {\r\n            for (var i = 0; i < soloNums; i++) {\r\n                if (this._soloTransitions[i].check(normalizeTime, paramsMap))\r\n                    return this._soloTransitions[i];\r\n            }\r\n            return null;\r\n        }\r\n        let transNums = this._transitions.length;\r\n        for (var i = 0; i < transNums; i++) {\r\n            if (this._transitions[i].check(normalizeTime, paramsMap))\r\n                return this._transitions[i];\r\n        }\r\n        return null;\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _getReferenceCount(): number {\r\n        return this._referenceCount;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @param count \r\n     */\r\n    _addReference(count: number = 1): void {\r\n        (this._clip) && (this._clip._addReference(count));\r\n        this._referenceCount += count;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @param count \r\n     */\r\n    _removeReference(count: number = 1): void {\r\n        (this._clip) && (this._clip._removeReference(count));\r\n        this._referenceCount -= count;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _clearReference(): void {\r\n        this._removeReference(-this._referenceCount);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _resetFrameIndices(): void {\r\n        for (var i: number = 0, n: number = this._currentFrameIndices!.length; i < n; i++)\r\n            this._currentFrameIndices![i] = -1;//-1表示没到第0帧,首帧时间可能大于\r\n    }\r\n\r\n    /**\r\n     * 添加脚本。\r\n     * @param\ttype  组件类型。\r\n     * @return 脚本。\r\n     *\r\n     */\r\n    addScript(type: typeof AnimatorStateScript): AnimatorStateScript {\r\n        var script: AnimatorStateScript = new type();\r\n        this._scripts = this._scripts || [];\r\n        this._scripts.push(script);\r\n        return script;\r\n    }\r\n\r\n    /**\r\n     * 获取脚本。\r\n     * @param\ttype  组件类型。\r\n     * @return 脚本。\r\n     *\r\n     */\r\n    getScript(type: typeof AnimatorStateScript): AnimatorStateScript | null {\r\n        if (this._scripts) {\r\n            for (var i: number = 0, n: number = this._scripts.length; i < n; i++) {\r\n                var script: AnimatorStateScript = this._scripts[i];\r\n                if (script instanceof type)\r\n                    return script;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * 获取脚本集合。\r\n     * @param\ttype  组件类型。\r\n     * @return 脚本集合。\r\n     */\r\n    getScripts(type: typeof AnimatorStateScript): AnimatorStateScript[] | null {\r\n        var coms: AnimatorStateScript[] | null = null;\r\n        if (this._scripts) {\r\n            for (var i: number = 0, n: number = this._scripts.length; i < n; i++) {\r\n                var script: AnimatorStateScript = this._scripts[i];\r\n                if (script instanceof type) {\r\n                    coms = coms || [];\r\n                    coms.push(script);\r\n                }\r\n            }\r\n        }\r\n        return coms;\r\n    }\r\n\r\n    /**\r\n     * 克隆。\r\n     * @param\tdestObject 克隆源。\r\n     */\r\n    cloneTo(destObject: any): void {\r\n        var dest: AnimatorState = <AnimatorState>destObject;\r\n        dest.name = this.name;\r\n        dest.speed = this.speed;\r\n        dest.clipStart = this.clipStart;\r\n        dest.clipEnd = this.clipEnd;\r\n        dest.clip = this._clip;\r\n    }\r\n\r\n    /**\r\n     * 克隆。\r\n     * @return\t 克隆副本。\r\n     */\r\n    clone(): any {\r\n        var dest: AnimatorState = new AnimatorState();\r\n        this.cloneTo(dest);\r\n        return dest;\r\n    }\r\n\r\n}","/**\r\n * 用来描述动画层遮罩\r\n */\r\nexport class AvatarMask {\r\n    /**@internal */\r\n    private _avatarPathMap: Record<string, boolean>;\r\n\r\n    /**\r\n     * 创建一个<code>AvatarMask</code>实例\r\n     */\r\n    constructor(data?: any) {\r\n        this._avatarPathMap = data?._avatarPathMap || {};\r\n    }\r\n\r\n    /**\r\n     * 查找节点路径遮罩\r\n     * @param path \r\n     * @returns \r\n     */\r\n    getTransformActive(path: string): boolean {\r\n        return this._avatarPathMap[path];\r\n    }\r\n\r\n    /**\r\n     * 设置\r\n     * @param path \r\n     * @param value \r\n     */\r\n    setTransformActive(path: string, value: boolean) {\r\n        this._avatarPathMap[path] = value;\r\n    }\r\n\r\n    /**\r\n     * 获得遮罩信息\r\n     * @returns \r\n     */\r\n    getAllTranfromPath() {\r\n        return this._avatarPathMap;\r\n    }\r\n\r\n    /**\r\n   * 克隆。\r\n   * @return\t 克隆副本。\r\n   */\r\n    clone(): any {\r\n        var dest: AvatarMask = new AvatarMask();\r\n        this.cloneTo(dest);\r\n        return dest;\r\n    }\r\n    /**\r\n     * 克隆。\r\n     * @param\tdestObject 克隆源。\r\n     */\r\n    cloneTo(destObject: any): void {\r\n        var dest: AvatarMask = (<AvatarMask>destObject);\r\n        for (var key in this._avatarPathMap) {\r\n            dest.setTransformActive(key, this._avatarPathMap[key]);\r\n        }\r\n\r\n    }\r\n\r\n}","\r\nimport { Component } from \"../../../components/Component\";\r\nimport { NodeFlags } from \"../../../Const\";\r\nimport { Loader } from \"../../../net/Loader\";\r\nimport { Stat } from \"../../../utils/Stat\";\r\nimport { AnimationClip } from \"../../animation/AnimationClip\";\r\nimport { AnimatorStateScript } from \"../../animation/AnimatorStateScript\";\r\nimport { KeyframeNode } from \"../../animation/KeyframeNode\";\r\nimport { KeyframeNodeList } from \"../../animation/KeyframeNodeList\";\r\nimport { Material } from \"../../core/material/Material\";\r\nimport { RenderableSprite3D } from \"../../core/RenderableSprite3D\";\r\nimport { Sprite3D } from \"../../core/Sprite3D\";\r\nimport { Utils3D } from \"../../utils/Utils3D\";\r\nimport { AnimatorControllerLayer } from \"./AnimatorControllerLayer\";\r\nimport { AnimatorPlayState } from \"./AnimatorPlayState\";\r\nimport { AnimatorResource } from \"./AnimatorResource\";\r\nimport { AnimatorState } from \"./AnimatorState\";\r\nimport { AvatarMask } from \"./AvatarMask\";\r\nimport { KeyframeNodeOwner, KeyFrameValueType } from \"./KeyframeNodeOwner\";\r\nimport { AnimationEvent } from \"../../animation/AnimationEvent\";\r\nimport { AnimatorTransition } from \"./AnimatorTransition\";\r\nimport { AnimatorController } from \"./AnimatorController\";\r\nimport { Color } from \"../../../maths/Color\";\r\nimport { Quaternion } from \"../../../maths/Quaternion\";\r\nimport { Vector2 } from \"../../../maths/Vector2\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\nimport { Vector4 } from \"../../../maths/Vector4\";\r\nimport { AnimatorUpdateMode } from \"../../../components/AnimatorUpdateMode\";\r\nimport { AnimatorStateCondition } from \"../../../components/AnimatorStateCondition\";\r\n\r\nexport type AnimatorParams = { [key: number]: number | boolean };\r\n\r\n\r\n/**\r\n * <code>Animator</code> 类用于创建动画组件。\r\n */\r\nexport class Animator extends Component {\r\n    /**@internal */\r\n    private static _tempVector31: Vector3 = new Vector3();\r\n    /**@internal */\r\n    private static _tempColor: Color = new Color();\r\n    /**@internal */\r\n    private static _tempQuaternion1: Quaternion = new Quaternion();\r\n\r\n    /** 裁剪模式_始终播放动画。*/\r\n    static CULLINGMODE_ALWAYSANIMATE: number = 0;\r\n    /** 裁剪模式_不可见时完全不播放动画。*/\r\n    static CULLINGMODE_CULLCOMPLETELY: number = 2;\r\n\r\n    /**@internal */\r\n    private _speed: number;\r\n    /**@internal */\r\n    private _keyframeNodeOwnerMap: any;\r\n    /**@internal */\r\n    private _keyframeNodeOwners: KeyframeNodeOwner[] = [];\r\n    /**@internal */\r\n    private _updateMark: number;\r\n    /**@internal */\r\n    private _controllerLayers: AnimatorControllerLayer[];\r\n    /**@internal 更新模式*/\r\n    private _updateMode: AnimatorUpdateMode = AnimatorUpdateMode.Normal;\r\n    /**@internal 降低更新频率调整值*/\r\n    private _lowUpdateDelty: number = 20;\r\n    /**@internal */\r\n    private _animatorParams: AnimatorParams = {};\r\n    // /**@internal */\r\n    // _linkSprites: any;\r\n    /**@internal\t*/\r\n    _avatarNodeMap: any;\r\n    /**@internal */\r\n    _linkAvatarSpritesData: any = {};\r\n    /**@internal */\r\n    _linkAvatarSprites: Sprite3D[] = [];\r\n    /**@internal */\r\n    _renderableSprites: RenderableSprite3D[] = [];\r\n\r\n    /**\t裁剪模式*/\r\n    cullingMode: number = Animator.CULLINGMODE_CULLCOMPLETELY;\r\n\r\n    /**@internal\t[NATIVE]*/\r\n    _animationNodeLocalPositions: Float32Array;\r\n    /**@internal\t[NATIVE]*/\r\n    _animationNodeLocalRotations: Float32Array;\r\n    /**@internal\t[NATIVE]*/\r\n    _animationNodeLocalScales: Float32Array;\r\n    /**@internal\t[NATIVE]*/\r\n    _animationNodeWorldMatrixs: Float32Array;\r\n    /**@internal\t[NATIVE]*/\r\n    _animationNodeParentIndices: Int16Array;\r\n    /**@internal */\r\n    private _finishSleep: boolean = false;\r\n\r\n    _controller: AnimatorController;\r\n\r\n\r\n    set controller(val: AnimatorController) {\r\n        \r\n        this._controller = val;\r\n        if (this._controller) {\r\n            this._controller.updateTo(this);\r\n        }\r\n\r\n    }\r\n    get controller() {\r\n        return this._controller;\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * 动画的播放速度,1.0为正常播放速度。\r\n     */\r\n    get speed(): number {\r\n        return this._speed;\r\n    }\r\n\r\n\r\n    set speed(value: number) {\r\n        this._speed = value;\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    /**\r\n     * 设置更新模式\r\n     */\r\n    set updateMode(value: AnimatorUpdateMode) {\r\n        this._updateMode = value;\r\n    }\r\n\r\n    /**\r\n     * 低更新模式\r\n     */\r\n    set lowUpdateDelty(value: number) {\r\n        this._lowUpdateDelty = value;\r\n    }\r\n\r\n    get controllerLayerCount(): number {\r\n        return this._controllerLayers.length;\r\n    }\r\n\r\n    /**\r\n     * 状态机参数map\r\n     */\r\n    set animatorParams(values: AnimatorParams) {\r\n        this._animatorParams = values;\r\n    }\r\n\r\n    get animatorParams() {\r\n        return this._animatorParams;\r\n    }\r\n\r\n    /**\r\n     * 动画完成是否停止更新\r\n     */\r\n    set sleep(value: boolean) {\r\n        this._finishSleep = value;\r\n    }\r\n\r\n    get sleep() {\r\n        return this._finishSleep;\r\n    }\r\n\r\n    /**\r\n     * 创建一个 <code>Animation</code> 实例。\r\n     */\r\n    constructor() {\r\n        super();\r\n        this._controllerLayers = [];\r\n        //this._linkSprites = {};\r\n        this._speed = 1.0;\r\n        this._keyframeNodeOwnerMap = {};\r\n        this._updateMark = 0;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _addKeyframeNodeOwner(clipOwners: KeyframeNodeOwner[], node: KeyframeNode, propertyOwner: any): void {\r\n        var nodeIndex = node._indexInList;\r\n        var fullPath = node.fullPath;\r\n        var keyframeNodeOwner = this._keyframeNodeOwnerMap[fullPath];\r\n        let mat = false;\r\n        if (keyframeNodeOwner) {\r\n            keyframeNodeOwner.referenceCount++;\r\n            clipOwners[nodeIndex] = keyframeNodeOwner;\r\n        } else {\r\n            var property = propertyOwner;\r\n            for (var i = 0, n = node.propertyCount; i < n; i++) {\r\n                property = property[node.getPropertyByIndex(i)];\r\n                if (property instanceof Material) {\r\n                    mat = true\r\n                }\r\n                if (!property)\r\n                    break;\r\n            }\r\n\r\n            keyframeNodeOwner = this._keyframeNodeOwnerMap[fullPath] = new KeyframeNodeOwner();\r\n            keyframeNodeOwner.isMaterial = mat;\r\n            keyframeNodeOwner.fullPath = fullPath;\r\n            keyframeNodeOwner.indexInList = this._keyframeNodeOwners.length;\r\n            keyframeNodeOwner.referenceCount = 1;\r\n            keyframeNodeOwner.propertyOwner = propertyOwner;\r\n            keyframeNodeOwner.nodePath = node.nodePath;\r\n            keyframeNodeOwner.callbackFunData = node.callbackFunData;\r\n            keyframeNodeOwner.callParams = node.callParams;\r\n            keyframeNodeOwner.getCallbackNode();\r\n            var propertyCount = node.propertyCount;\r\n            var propertys: string[] = [];\r\n            for (i = 0; i < propertyCount; i++)\r\n                propertys[i] = node.getPropertyByIndex(i);\r\n            keyframeNodeOwner.property = propertys;\r\n            keyframeNodeOwner.type = node.type;\r\n\r\n            if (property) {//查询成功后赋默认值\r\n                if (node.type === 0) {\r\n                    keyframeNodeOwner.defaultValue = property;\r\n                } else {\r\n                    var defaultValue = new property.constructor();\r\n                    property.cloneTo(defaultValue);\r\n                    keyframeNodeOwner.defaultValue = defaultValue;\r\n                    keyframeNodeOwner.value = new property.constructor();\r\n                    keyframeNodeOwner.crossFixedValue = new property.constructor();\r\n                }\r\n            }\r\n\r\n            this._keyframeNodeOwners.push(keyframeNodeOwner);\r\n            clipOwners[nodeIndex] = keyframeNodeOwner;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _removeKeyframeNodeOwner(nodeOwners: (KeyframeNodeOwner | null)[], node: KeyframeNode): void {\r\n        var fullPath = node.fullPath;\r\n        var keyframeNodeOwner = this._keyframeNodeOwnerMap[fullPath];\r\n        if (keyframeNodeOwner) {//TODO:Avatar中没该节点,但动画文件有,不会保存_keyframeNodeOwnerMap在中,移除会出BUG,例如动画节点下的SkinnedMeshRender有动画帧，但Avatar中忽略了\r\n            keyframeNodeOwner.referenceCount--;\r\n            if (keyframeNodeOwner.referenceCount === 0) {\r\n                delete this._keyframeNodeOwnerMap[fullPath];\r\n                this._keyframeNodeOwners.splice(this._keyframeNodeOwners.indexOf(keyframeNodeOwner), 1);\r\n            }\r\n            nodeOwners[node._indexInList] = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _getOwnersByClip(clipStateInfo: AnimatorState): void {\r\n        if (!clipStateInfo._clip)\r\n            return;\r\n\r\n        var frameNodes = clipStateInfo._clip!._nodes;\r\n        var frameNodesCount = frameNodes!.count;\r\n        var nodeOwners: KeyframeNodeOwner[] = clipStateInfo._nodeOwners;\r\n        nodeOwners.length = frameNodesCount;\r\n        for (var i: number = 0; i < frameNodesCount; i++) {\r\n            var node: KeyframeNode = frameNodes!.getNodeByIndex(i);\r\n            //var property: any = this._avatar ? this._avatarNodeMap[this._avatar._rootNode.name!] : this.owner;//如果有avatar需使用克隆节点\r\n            var property: any = this.owner;\r\n            for (var j: number = 0, m: number = node.ownerPathCount; j < m; j++) {\r\n                var ownPat: string = node.getOwnerPathByIndex(j);\r\n                if (ownPat === \"\") {//TODO:直接不存\r\n                    break;\r\n                } else {\r\n                    property = property.getChildByName(ownPat);\r\n                    if (!property)\r\n                        break;\r\n                }\r\n            }\r\n\r\n            if (property) {\r\n                var propertyOwner: string = node.propertyOwner;\r\n                const oriProperty = property;\r\n                (propertyOwner) && (property = property[propertyOwner]);\r\n                if (!property) {\r\n                    property = AnimatorResource.getAnimatorResource(oriProperty, propertyOwner);\r\n                }\r\n                property && this._addKeyframeNodeOwner(nodeOwners, node, property);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _updatePlayer(animatorState: AnimatorState, playState: AnimatorPlayState, elapsedTime: number, islooping: boolean, layerIndex: number): void {\r\n        var clipDuration: number = animatorState._clip!._duration * (animatorState.clipEnd - animatorState.clipStart);\r\n        var lastElapsedTime: number = playState._elapsedTime;\r\n        var elapsedPlaybackTime: number = lastElapsedTime + elapsedTime;\r\n        playState._lastElapsedTime = lastElapsedTime;\r\n        playState._elapsedTime = elapsedPlaybackTime;\r\n        var normalizedTime: number = elapsedPlaybackTime / clipDuration;//TODO:时候可以都统一为归一化时间\r\n        playState._normalizedTime = normalizedTime;\r\n        var playTime: number = normalizedTime % 1.0;\r\n        playState._normalizedPlayTime = playTime < 0 ? playTime + 1.0 : playTime;\r\n        playState._duration = clipDuration;\r\n        if ((!islooping && elapsedPlaybackTime >= clipDuration)) {\r\n            playState._finish = true;\r\n            playState._elapsedTime = clipDuration;\r\n            playState._normalizedPlayTime = 1.0;\r\n        }\r\n\r\n        (!playState._finish) && animatorState._eventStateUpdate(playState._normalizedPlayTime);\r\n        this._applyTransition(animatorState, layerIndex, animatorState._eventtransition(playState._normalizedPlayTime, this.animatorParams));\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * 启用过渡\r\n     * @param layerindex \r\n     * @param transition \r\n     * @returns \r\n     */\r\n    private _applyTransition(state: AnimatorState, layerindex: number, transition: AnimatorTransition) {\r\n        if (!transition || transition == state.curTransition)\r\n            return;\r\n        state.curTransition = transition;\r\n        this.crossFade(transition.destState.name, transition.transduration, layerindex, transition.transstartoffset);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @param animatorState \r\n     * @param playState \r\n     */\r\n    private _updateStateFinish(animatorState: AnimatorState, playState: AnimatorPlayState): void {\r\n        if (playState._finish) {\r\n            animatorState._eventExit();//派发播放完成的事件\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _eventScript(events: AnimationEvent[], eventIndex: number, endTime: number, front: boolean, startTime = 0): number {\r\n        let scripts = this.owner.components;\r\n        if (front) {\r\n            endTime += startTime;\r\n            for (let n = events.length; eventIndex < n; eventIndex++) {\r\n                let event = events[eventIndex];\r\n                if (event.time <= endTime) {\r\n                    if (event.time >= startTime) {\r\n                        for (let j = 0, m = scripts.length; j < m; j++) {\r\n                            let script = scripts[j];\r\n                            if (script._isScript()) {\r\n                                let fun: Function = (script as any)[event.eventName];\r\n                                (fun) && (fun.apply(script, event.params));\r\n                            }\r\n                        }\r\n                    }\r\n                } else {\r\n                    break;\r\n                }\r\n            }\r\n        } else {\r\n            for (; eventIndex >= 0; eventIndex--) {\r\n                let event = events[eventIndex];\r\n                if (event.time >= endTime) {\r\n                    for (let j = 0, m = scripts.length; j < m; j++) {\r\n                        let script = scripts[j];\r\n                        if (script._isScript()) {\r\n                            let fun = (script as any)[event.eventName];\r\n                            (fun) && (fun.apply(script, event.params));\r\n                        }\r\n                    }\r\n                } else {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return eventIndex;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _updateEventScript(stateInfo: AnimatorState, playStateInfo: AnimatorPlayState): void {\r\n        if (!this.owner._getBit(NodeFlags.HAS_SCRIPT))\r\n            return;\r\n\r\n        let clip = stateInfo._clip;\r\n        let events = clip!._animationEvents;\r\n        let clipDuration = clip!._duration;\r\n        let elapsedTime = playStateInfo._elapsedTime;\r\n        let time = elapsedTime % clipDuration;\r\n        let loopCount = Math.abs(Math.floor(elapsedTime / clipDuration) - Math.floor(playStateInfo._lastElapsedTime / clipDuration));//backPlay可能为负数\r\n\r\n        let frontPlay = playStateInfo._elapsedTime >= playStateInfo._lastElapsedTime;\r\n        if (playStateInfo._lastIsFront !== frontPlay) {\r\n            if (frontPlay)\r\n                playStateInfo._playEventIndex++;\r\n            else\r\n                playStateInfo._playEventIndex--;\r\n            playStateInfo._lastIsFront = frontPlay;\r\n        }\r\n        let preEventIndex = playStateInfo._playEventIndex;\r\n        if (frontPlay) {\r\n            let startTime = 0;\r\n            if (playStateInfo.animatorState && 0 != playStateInfo.animatorState.clipStart) {\r\n                startTime = playStateInfo.animatorState._clip!._duration * playStateInfo.animatorState.clipStart;\r\n            }\r\n            let newEventIndex = this._eventScript(events, playStateInfo._playEventIndex, loopCount > 0 ? clipDuration : time, true, startTime);\r\n            (preEventIndex === playStateInfo._playEventIndex) && (playStateInfo._playEventIndex = newEventIndex);//这里打个补丁，在event中调用Play 需要重置eventindex，不能直接赋值\r\n            for (let i = 0, n = loopCount - 1; i < n; i++)\r\n                this._eventScript(events, 0, clipDuration, true, startTime);\r\n            (loopCount > 0 && time > 0) && (playStateInfo._playEventIndex = this._eventScript(events, 0, time, true, startTime));//if need cross loop,'time' must large than 0\r\n        } else {\r\n            let newEventIndex = this._eventScript(events, playStateInfo._playEventIndex, loopCount > 0 ? 0 : time, false);\r\n            (preEventIndex === playStateInfo._playEventIndex) && (playStateInfo._playEventIndex = newEventIndex);//这里打个补丁，在event中调用Play 需要重置eventindex，不能直接赋值\r\n            let eventIndex = events.length - 1;\r\n            for (let i = 0, n = loopCount - 1; i < n; i++)\r\n                this._eventScript(events, eventIndex, 0, false);\r\n            (loopCount > 0 && time > 0) && (playStateInfo._playEventIndex = this._eventScript(events, eventIndex, time, false));//if need cross loop,'time' must large than 0\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 更新clip数据\r\n     * @internal\r\n     */\r\n    private _updateClipDatas(animatorState: AnimatorState, addtive: boolean, playStateInfo: AnimatorPlayState, animatorMask: AvatarMask = null): void {\r\n        var clip = animatorState._clip;\r\n        var clipDuration = clip!._duration;\r\n\r\n        var curPlayTime = animatorState.clipStart * clipDuration + playStateInfo._normalizedPlayTime * playStateInfo._duration;\r\n        var currentFrameIndices = animatorState._currentFrameIndices;\r\n        var frontPlay = playStateInfo._elapsedTime > playStateInfo._lastElapsedTime;\r\n        clip!._evaluateClipDatasRealTime(clip!._nodes!, curPlayTime, currentFrameIndices!, addtive, frontPlay, animatorState._realtimeDatas, animatorMask);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _applyFloat(defaultValue: number, nodeOwner: KeyframeNodeOwner, additive: boolean, weight: number, isFirstLayer: boolean, data: number): number {\r\n        if (nodeOwner.updateMark === this._updateMark) {//一定非第一层\r\n            if (additive) {\r\n                defaultValue += weight * data;\r\n            } else {\r\n                var oriValue: number = defaultValue;\r\n                defaultValue = oriValue + weight * (data - oriValue);\r\n            }\r\n        } else {\r\n            if (isFirstLayer) {\r\n                if (additive)\r\n                    defaultValue = nodeOwner.defaultValue + data;\r\n                else\r\n                    defaultValue = data;\r\n            } else {\r\n                if (additive) {\r\n                    defaultValue = nodeOwner.defaultValue + weight * (data);\r\n                } else {\r\n                    var defValue: number = nodeOwner.defaultValue;\r\n                    defaultValue = defValue + weight * (data - defValue);\r\n                }\r\n            }\r\n        }\r\n        return defaultValue;\r\n    }\r\n\r\n    private _applyVec2(defaultValue: Vector2, nodeOwner: KeyframeNodeOwner, additive: boolean, weight: number, isFirstLayer: boolean, data: Vector2): Vector2 {\r\n        if (!defaultValue) return null;\r\n\r\n        if (nodeOwner.updateMark === this._updateMark) {//一定非第一层\r\n            if (additive) {\r\n                defaultValue.x += weight * data.x;\r\n                defaultValue.y += weight * data.y;\r\n            } else {\r\n                var oriValue = defaultValue;\r\n                defaultValue.x = oriValue.x + weight * (data.x - oriValue.x);\r\n                defaultValue.y = oriValue.y + weight * (data.y - oriValue.y);\r\n            }\r\n        } else {\r\n            if (isFirstLayer) {\r\n                if (additive) {\r\n                    defaultValue.x = nodeOwner.defaultValue.x + data.x;\r\n                    defaultValue.y = nodeOwner.defaultValue.y + data.y;\r\n                }\r\n                else\r\n                    data.cloneTo(defaultValue);\r\n            } else {\r\n                if (additive) {\r\n                    defaultValue.x = nodeOwner.defaultValue.x + weight * (data.x);\r\n                    defaultValue.y = nodeOwner.defaultValue.y + weight * (data.y);\r\n                } else {\r\n                    var defValue: Vector2 = nodeOwner.defaultValue;\r\n                    defaultValue.x = defValue.x + weight * (data.x - defValue.x);\r\n                    defaultValue.y = defValue.y + weight * (data.y - defValue.y);\r\n                }\r\n            }\r\n        }\r\n        return defaultValue;\r\n    }\r\n\r\n    private _applyVec3(defaultValue: Vector3, nodeOwner: KeyframeNodeOwner, additive: boolean, weight: number, isFirstLayer: boolean, data: Vector3) {\r\n        if (!defaultValue) return null;\r\n        if (nodeOwner.updateMark === this._updateMark) {//一定非第一层\r\n            if (additive) {\r\n                defaultValue.x += weight * data.x;\r\n                defaultValue.y += weight * data.y;\r\n                defaultValue.z += weight * data.z;\r\n            } else {\r\n                var oriValue = defaultValue;\r\n                defaultValue.x = oriValue.x + weight * (data.x - oriValue.x);\r\n                defaultValue.y = oriValue.y + weight * (data.y - oriValue.y);\r\n                defaultValue.z = oriValue.z + weight * (data.z - oriValue.z);\r\n            }\r\n        } else {\r\n            if (isFirstLayer) {\r\n                if (additive) {\r\n                    defaultValue.x = nodeOwner.defaultValue.x + data.x;\r\n                    defaultValue.y = nodeOwner.defaultValue.y + data.y;\r\n                    defaultValue.z = nodeOwner.defaultValue.z + data.z;\r\n                }\r\n                else\r\n                    data.cloneTo(defaultValue);\r\n            } else {\r\n                if (additive) {\r\n                    defaultValue.x = nodeOwner.defaultValue.x + weight * (data.x);\r\n                    defaultValue.y = nodeOwner.defaultValue.y + weight * (data.y);\r\n                    defaultValue.z = nodeOwner.defaultValue.z + weight * (data.z);\r\n                } else {\r\n                    var defValue: Vector3 = nodeOwner.defaultValue;\r\n                    defaultValue.x = defValue.x + weight * (data.x - defValue.x);\r\n                    defaultValue.y = defValue.y + weight * (data.y - defValue.y);\r\n                    defaultValue.z = defValue.z + weight * (data.z - defValue.z);\r\n                }\r\n            }\r\n        }\r\n        return defaultValue;\r\n    }\r\n\r\n    private _applyVec4(defaultValue: Vector4, nodeOwner: KeyframeNodeOwner, additive: boolean, weight: number, isFirstLayer: boolean, data: Vector4) {\r\n        if (!defaultValue) return null;\r\n        if (nodeOwner.updateMark === this._updateMark) {//一定非第一层\r\n            if (additive) {\r\n                defaultValue.x += weight * data.x;\r\n                defaultValue.y += weight * data.y;\r\n                defaultValue.z += weight * data.z;\r\n                defaultValue.w += weight * data.w;\r\n            } else {\r\n                var oriValue = defaultValue;\r\n                defaultValue.x = oriValue.x + weight * (data.x - oriValue.x);\r\n                defaultValue.y = oriValue.y + weight * (data.y - oriValue.y);\r\n                defaultValue.z = oriValue.z + weight * (data.z - oriValue.z);\r\n                defaultValue.w = oriValue.w + weight * (data.w - oriValue.w);\r\n            }\r\n        } else {\r\n            if (isFirstLayer) {\r\n                if (additive) {\r\n                    defaultValue.x = nodeOwner.defaultValue.x + data.x;\r\n                    defaultValue.y = nodeOwner.defaultValue.y + data.y;\r\n                    defaultValue.z = nodeOwner.defaultValue.z + data.z;\r\n                    defaultValue.w = nodeOwner.defaultValue.w + data.w;\r\n                }\r\n                else\r\n                    data.cloneTo(defaultValue);\r\n            } else {\r\n                if (additive) {\r\n                    defaultValue.x = nodeOwner.defaultValue.x + weight * (data.x);\r\n                    defaultValue.y = nodeOwner.defaultValue.y + weight * (data.y);\r\n                    defaultValue.z = nodeOwner.defaultValue.z + weight * (data.z);\r\n                    defaultValue.w = nodeOwner.defaultValue.w + weight * (data.w);\r\n                } else {\r\n                    var defValue: Vector4 = nodeOwner.defaultValue;\r\n                    defaultValue.x = defValue.x + weight * (data.x - defValue.x);\r\n                    defaultValue.y = defValue.y + weight * (data.y - defValue.y);\r\n                    defaultValue.z = defValue.z + weight * (data.z - defValue.z);\r\n                    defaultValue.w = defValue.w + weight * (data.w - defValue.w);\r\n                }\r\n            }\r\n        }\r\n        return defaultValue;\r\n    }\r\n\r\n    private _applyColor(defaultValue: Color, nodeOwner: KeyframeNodeOwner, additive: boolean, weight: number, isFirstLayer: boolean, data: Vector4) {\r\n        if (!defaultValue) return null;\r\n        if (nodeOwner.updateMark === this._updateMark) {//一定非第一层\r\n            if (additive) {\r\n                defaultValue.r += weight * data.x;\r\n                defaultValue.g += weight * data.y;\r\n                defaultValue.b += weight * data.z;\r\n                defaultValue.a += weight * data.w;\r\n            } else {\r\n                var oriValue = defaultValue;\r\n                defaultValue.r = oriValue.r + weight * (data.x - oriValue.r);\r\n                defaultValue.g = oriValue.g + weight * (data.y - oriValue.g);\r\n                defaultValue.b = oriValue.b + weight * (data.z - oriValue.b);\r\n                defaultValue.a = oriValue.a + weight * (data.w - oriValue.a);\r\n            }\r\n        } else {\r\n            if (isFirstLayer) {\r\n                if (additive) {\r\n                    defaultValue.r = nodeOwner.defaultValue.r + data.x;\r\n                    defaultValue.g = nodeOwner.defaultValue.g + data.y;\r\n                    defaultValue.b = nodeOwner.defaultValue.b + data.z;\r\n                    defaultValue.a = nodeOwner.defaultValue.a + data.w;\r\n                }\r\n                else {\r\n                    //data.cloneTo(defaultValue);\r\n                    defaultValue.setValue(data.x, data.y, data.z, data.w);\r\n                }\r\n\r\n            } else {\r\n                if (additive) {\r\n                    defaultValue.r = nodeOwner.defaultValue.r + weight * (data.x);\r\n                    defaultValue.g = nodeOwner.defaultValue.g + weight * (data.y);\r\n                    defaultValue.b = nodeOwner.defaultValue.b + weight * (data.z);\r\n                    defaultValue.a = nodeOwner.defaultValue.a + weight * (data.w);\r\n                } else {\r\n                    var defValue: Color = nodeOwner.defaultValue;\r\n                    defaultValue.r = defValue.r + weight * (data.x - defValue.r);\r\n                    defaultValue.g = defValue.g + weight * (data.y - defValue.g);\r\n                    defaultValue.b = defValue.b + weight * (data.z - defValue.b);\r\n                    defaultValue.a = defValue.a + weight * (data.w - defValue.a);\r\n                }\r\n            }\r\n        }\r\n        return defaultValue;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _applyPositionAndRotationEuler(nodeOwner: KeyframeNodeOwner, additive: boolean, weight: number, isFirstLayer: boolean, data: Vector3, out: Vector3): void {\r\n        if (nodeOwner.updateMark === this._updateMark) {//一定非第一层\r\n            if (additive) {\r\n                out.x += weight * data.x;\r\n                out.y += weight * data.y;\r\n                out.z += weight * data.z;\r\n            } else {\r\n                var oriX: number = out.x;\r\n                var oriY: number = out.y;\r\n                var oriZ: number = out.z;\r\n                out.x = oriX + weight * (data.x - oriX);\r\n                out.y = oriY + weight * (data.y - oriY);\r\n                out.z = oriZ + weight * (data.z - oriZ);\r\n            }\r\n        } else {\r\n            if (isFirstLayer) {\r\n                if (additive) {\r\n                    var defValue: Vector3 = nodeOwner.defaultValue;\r\n                    out.x = defValue.x + data.x;\r\n                    out.y = defValue.y + data.y;\r\n                    out.z = defValue.z + data.z;\r\n                } else {\r\n                    out.x = data.x;\r\n                    out.y = data.y;\r\n                    out.z = data.z;\r\n                }\r\n            } else {\r\n                defValue = nodeOwner.defaultValue;\r\n                if (additive) {\r\n                    out.x = defValue.x + weight * data.x;\r\n                    out.y = defValue.y + weight * data.y;\r\n                    out.z = defValue.z + weight * data.z;\r\n                } else {\r\n                    var defX: number = defValue.x;\r\n                    var defY: number = defValue.y;\r\n                    var defZ: number = defValue.z;\r\n                    out.x = defX + weight * (data.x - defX);\r\n                    out.y = defY + weight * (data.y - defY);\r\n                    out.z = defZ + weight * (data.z - defZ);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _applyRotation(nodeOwner: KeyframeNodeOwner, additive: boolean, weight: number, isFirstLayer: boolean, clipRot: Quaternion, localRotation: Quaternion): void {\r\n        if (nodeOwner.updateMark === this._updateMark) {//一定非第一层\r\n            if (additive) {\r\n                var tempQuat: Quaternion = Animator._tempQuaternion1;//使用临时四元数_tempQuaternion1，避免引用错乱\r\n                Utils3D.quaternionWeight(clipRot, weight, tempQuat);\r\n                tempQuat.normalize(tempQuat);\r\n                Quaternion.multiply(localRotation, tempQuat, localRotation);\r\n            } else {\r\n                Quaternion.lerp(localRotation, clipRot, weight, localRotation);\r\n            }\r\n        } else {\r\n            if (isFirstLayer) {\r\n                if (additive) {\r\n                    var defaultRot: Quaternion = nodeOwner.defaultValue;\r\n                    Quaternion.multiply(defaultRot, clipRot, localRotation);\r\n                } else {\r\n                    localRotation.x = clipRot.x;\r\n                    localRotation.y = clipRot.y;\r\n                    localRotation.z = clipRot.z;\r\n                    localRotation.w = clipRot.w;\r\n                }\r\n            } else {\r\n                defaultRot = nodeOwner.defaultValue;\r\n                if (additive) {\r\n                    tempQuat = Animator._tempQuaternion1;\r\n                    Utils3D.quaternionWeight(clipRot, weight, tempQuat);\r\n                    tempQuat.normalize(tempQuat);\r\n                    Quaternion.multiply(defaultRot, tempQuat, localRotation);\r\n                } else {\r\n                    Quaternion.lerp(defaultRot, clipRot, weight, localRotation);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _applyScale(nodeOwner: KeyframeNodeOwner, additive: boolean, weight: number, isFirstLayer: boolean, clipSca: Vector3, localScale: Vector3): void {\r\n        if (nodeOwner.updateMark === this._updateMark) {//一定非第一层\r\n            if (additive) {\r\n                var scale: Vector3 = Animator._tempVector31;\r\n                Utils3D.scaleWeight(clipSca, weight, scale);\r\n                localScale.x = localScale.x * scale.x;\r\n                localScale.y = localScale.y * scale.y;\r\n                localScale.z = localScale.z * scale.z;\r\n            } else {\r\n                Utils3D.scaleBlend(localScale, clipSca, weight, localScale);\r\n            }\r\n        } else {\r\n            if (isFirstLayer) {\r\n                if (additive) {\r\n                    var defaultSca: Vector3 = nodeOwner.defaultValue;\r\n                    localScale.x = defaultSca.x * clipSca.x;\r\n                    localScale.y = defaultSca.y * clipSca.y;\r\n                    localScale.z = defaultSca.z * clipSca.z;\r\n                } else {\r\n                    localScale.x = clipSca.x;\r\n                    localScale.y = clipSca.y;\r\n                    localScale.z = clipSca.z;\r\n                }\r\n            } else {\r\n                defaultSca = nodeOwner.defaultValue;\r\n                if (additive) {\r\n                    scale = Animator._tempVector31;\r\n                    Utils3D.scaleWeight(clipSca, weight, scale);\r\n                    localScale.x = defaultSca.x * scale.x;\r\n                    localScale.y = defaultSca.y * scale.y;\r\n                    localScale.z = defaultSca.z * scale.z;\r\n                } else {\r\n                    Utils3D.scaleBlend(defaultSca, clipSca, weight, localScale);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _applyCrossData(nodeOwner: KeyframeNodeOwner, additive: boolean, weight: number, isFirstLayer: boolean, srcValue: any, desValue: any, crossWeight: number): void {\r\n        var pro: any = nodeOwner.propertyOwner;\r\n        if (pro) {\r\n            switch (nodeOwner.type) {\r\n                case KeyFrameValueType.Float: //Float\r\n                    var proPat: string[] = nodeOwner.property!;\r\n                    var m: number = proPat.length - 1;\r\n                    for (var j: number = 0; j < m; j++) {\r\n                        pro = pro[proPat[j]];\r\n                        if (!pro)//属性可能或被置空\r\n                            break;\r\n                    }\r\n\r\n                    var crossValue: number = srcValue + crossWeight * (desValue - srcValue);\r\n                    nodeOwner.value = crossValue;\r\n                    const lastpro = proPat[m];\r\n                    if (!nodeOwner.isMaterial) {\r\n                        pro && (pro[lastpro] = this._applyFloat(pro[lastpro], nodeOwner, additive, weight, isFirstLayer, crossValue));\r\n                    } else {\r\n                        pro && (pro as Material).setFloat(lastpro, this._applyFloat((pro as Material).getFloat(lastpro), nodeOwner, additive, weight, isFirstLayer, crossValue));\r\n                    }\r\n                    if (nodeOwner.callbackFun) {\r\n                        nodeOwner.animatorDataSetCallBack();\r\n                    }\r\n                    break;\r\n                case KeyFrameValueType.Position: //Position\r\n                    var localPos: Vector3 = pro.localPosition;\r\n                    var position: Vector3 = nodeOwner.value;\r\n                    var srcX: number = srcValue.x, srcY: number = srcValue.y, srcZ: number = srcValue.z;\r\n                    position.x = srcX + crossWeight * (desValue.x - srcX);\r\n                    position.y = srcY + crossWeight * (desValue.y - srcY);\r\n                    position.z = srcZ + crossWeight * (desValue.z - srcZ);\r\n                    this._applyPositionAndRotationEuler(nodeOwner, additive, weight, isFirstLayer, position, localPos);\r\n                    pro.localPosition = localPos;\r\n                    break;\r\n                case KeyFrameValueType.Rotation: //Rotation\r\n                    var localRot: Quaternion = pro.localRotation;\r\n                    var rotation: Quaternion = nodeOwner.value;\r\n                    Quaternion.lerp(srcValue, desValue, crossWeight, rotation);\r\n                    this._applyRotation(nodeOwner, additive, weight, isFirstLayer, rotation, localRot);\r\n                    pro.localRotation = localRot;\r\n                    break;\r\n                case KeyFrameValueType.Scale: //Scale\r\n                    var localSca: Vector3 = pro.localScale;\r\n                    var scale: Vector3 = nodeOwner.value;\r\n                    Utils3D.scaleBlend(srcValue, desValue, crossWeight, scale);\r\n                    this._applyScale(nodeOwner, additive, weight, isFirstLayer, scale, localSca);\r\n                    pro.localScale = localSca;\r\n                    break;\r\n                case KeyFrameValueType.RotationEuler: //RotationEuler\r\n                    var localEuler: Vector3 = pro.localRotationEuler;\r\n                    var rotationEuler: Vector3 = nodeOwner.value;\r\n                    srcX = srcValue.x, srcY = srcValue.y, srcZ = srcValue.z;\r\n                    rotationEuler.x = srcX + crossWeight * (desValue.x - srcX);\r\n                    rotationEuler.y = srcY + crossWeight * (desValue.y - srcY);\r\n                    rotationEuler.z = srcZ + crossWeight * (desValue.z - srcZ);\r\n                    this._applyPositionAndRotationEuler(nodeOwner, additive, weight, isFirstLayer, rotationEuler, localEuler);\r\n                    pro.localRotationEuler = localEuler;\r\n                    break;\r\n                case KeyFrameValueType.Color:\r\n                    //TODO\r\n                    break;\r\n                case KeyFrameValueType.Vector2:\r\n                    //TODO\r\n                    break;\r\n                case KeyFrameValueType.Vector4:\r\n                    //TODO\r\n                    break;\r\n                case KeyFrameValueType.Vector3:\r\n                    //TODO\r\n                    break;\r\n            }\r\n            nodeOwner.updateMark = this._updateMark;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 赋值Node数据\r\n     * @param stateInfo 动画状态\r\n     * @param additive 是否为addtive\r\n     * @param weight state权重\r\n     * @param isFirstLayer 是否是第一层\r\n     */\r\n    private _setClipDatasToNode(stateInfo: AnimatorState, additive: boolean, weight: number, isFirstLayer: boolean, controllerLayer: AnimatorControllerLayer = null): void {\r\n        var realtimeDatas: Array<number | Vector3 | Quaternion | Vector2 | Vector4 | Color> = stateInfo._realtimeDatas;\r\n        var nodes: KeyframeNodeList = stateInfo._clip!._nodes!;\r\n        var nodeOwners: KeyframeNodeOwner[] = stateInfo._nodeOwners;\r\n        for (var i: number = 0, n: number = nodes.count; i < n; i++) {\r\n            var nodeOwner: KeyframeNodeOwner = nodeOwners[i];\r\n            if (nodeOwner) {//骨骼中没有该节点\r\n                var node = nodes.getNodeByIndex(i);\r\n                if (controllerLayer.avatarMask && (!controllerLayer.avatarMask.getTransformActive(node.nodePath))) {\r\n                    continue;\r\n                }\r\n                var pro: any = nodeOwner.propertyOwner;\r\n                let value: string;\r\n                if (pro) {\r\n                    switch (nodeOwner.type) {\r\n                        case KeyFrameValueType.Float: //Float\r\n                            var proPat: string[] = nodeOwner.property!;\r\n                            var m: number = proPat.length - 1;\r\n                            for (var j: number = 0; j < m; j++) {\r\n                                pro = pro[proPat[j]];\r\n                                if (!pro)//属性可能或被置空\r\n                                    break;\r\n                            }\r\n                            //pro && this._applyFloat(pro, proPat[m], nodeOwner, additive, weight, isFirstLayer, <number>realtimeDatas[i]);\r\n                            let lastpro = proPat[m];\r\n                            if (!nodeOwner.isMaterial) {\r\n                                pro && (pro[lastpro] = this._applyFloat(pro[lastpro], nodeOwner, additive, weight, isFirstLayer, <number>realtimeDatas[i]));\r\n                                if (nodeOwner.callbackFun) {\r\n                                    nodeOwner.animatorDataSetCallBack();\r\n                                }\r\n                            } else {\r\n                                pro && (pro as Material).setFloat(lastpro, this._applyFloat(0, nodeOwner, additive, weight, isFirstLayer, <number>realtimeDatas[i]));\r\n                            }\r\n                            break;\r\n                        case KeyFrameValueType.Position: //Position\r\n                            var localPos: Vector3 = pro.localPosition;\r\n                            this._applyPositionAndRotationEuler(nodeOwner, additive, weight, isFirstLayer, <Vector3>realtimeDatas[i], localPos);\r\n                            pro.localPosition = localPos;\r\n                            break;\r\n                        case KeyFrameValueType.Rotation: //Rotation\r\n                            var localRot: Quaternion = pro.localRotation;\r\n                            this._applyRotation(nodeOwner, additive, weight, isFirstLayer, <Quaternion>realtimeDatas[i], localRot);\r\n                            pro.localRotation = localRot;\r\n                            break;\r\n                        case KeyFrameValueType.Scale: //Scale\r\n                            var localSca: Vector3 = pro.localScale;\r\n                            this._applyScale(nodeOwner, additive, weight, isFirstLayer, <Vector3>realtimeDatas[i], localSca);\r\n                            pro.localScale = localSca;\r\n                            break;\r\n                        case KeyFrameValueType.RotationEuler: //RotationEuler\r\n                            var localEuler: Vector3 = pro.localRotationEuler;\r\n                            this._applyPositionAndRotationEuler(nodeOwner, additive, weight, isFirstLayer, <Vector3>realtimeDatas[i], localEuler);\r\n                            pro.localRotationEuler = localEuler;\r\n                            break;\r\n                        case KeyFrameValueType.Vector2://vec2\r\n                            var proPat: string[] = nodeOwner.property!;\r\n                            var m: number = proPat.length - 1;\r\n                            for (var j: number = 0; j < m; j++) {\r\n                                pro = pro[proPat[j]];\r\n                                if (!pro)//属性可能或被置空\r\n                                    break;\r\n                            }\r\n                            value = proPat[m];\r\n                            if (!nodeOwner.isMaterial) {\r\n                                pro && (pro[value] = this._applyVec2(pro[value], nodeOwner, additive, weight, isFirstLayer, <Vector2>realtimeDatas[i]));\r\n                                if (nodeOwner.callbackFun) {\r\n                                    nodeOwner.animatorDataSetCallBack();\r\n                                }\r\n                            } else {\r\n                                pro && pro.getVector2(value) && (pro as Material).setVector2(value, this._applyVec2(pro.getVector2(value), nodeOwner, additive, weight, isFirstLayer, <Vector2>realtimeDatas[i]));\r\n                            }\r\n                            break;\r\n                        case KeyFrameValueType.Vector3://vec3\r\n                            var proPat: string[] = nodeOwner.property!;\r\n                            var m: number = proPat.length - 1;\r\n                            for (var j: number = 0; j < m; j++) {\r\n                                pro = pro[proPat[j]];\r\n                                if (!pro)//属性可能或被置空\r\n                                    break;\r\n                            }\r\n                            value = proPat[m];\r\n                            if (!nodeOwner.isMaterial) {\r\n                                pro && (pro[value] = this._applyVec3(pro[value], nodeOwner, additive, weight, isFirstLayer, <Vector3>realtimeDatas[i]));\r\n                                if (nodeOwner.callbackFun) {\r\n                                    nodeOwner.animatorDataSetCallBack();\r\n                                }\r\n                            } else {\r\n                                pro && pro.getVector3(value) && (pro as Material).setVector3(value, this._applyVec3(pro.getVector3(value), nodeOwner, additive, weight, isFirstLayer, <Vector3>realtimeDatas[i]));\r\n                            }\r\n                            break;\r\n                        case KeyFrameValueType.Vector4://vec4\r\n                            var proPat: string[] = nodeOwner.property!;\r\n                            var m: number = proPat.length - 1;\r\n                            for (var j: number = 0; j < m; j++) {\r\n                                pro = pro[proPat[j]];\r\n                                if (!pro)//属性可能或被置空\r\n                                    break;\r\n                            }\r\n                            value = proPat[m];\r\n                            if (!nodeOwner.isMaterial) {\r\n                                pro && (pro[value] = this._applyVec4(pro[value], nodeOwner, additive, weight, isFirstLayer, <Vector4>realtimeDatas[i]));\r\n                                if (nodeOwner.callbackFun) {\r\n                                    nodeOwner.animatorDataSetCallBack();\r\n                                }\r\n                            } else {\r\n                                pro && pro.getVector4(value) && (pro as Material).setVector4(value, this._applyVec4(pro.getVector4(value), nodeOwner, additive, weight, isFirstLayer, <Vector4>realtimeDatas[i]));\r\n                            }\r\n                            break;\r\n                        case KeyFrameValueType.Color://Color\r\n                            var proPat: string[] = nodeOwner.property!;\r\n                            var m: number = proPat.length - 1;\r\n                            for (var j: number = 0; j < m; j++) {\r\n                                pro = pro[proPat[j]];\r\n                                if (!pro)//属性可能或被置空\r\n                                    break;\r\n                            }\r\n                            value = proPat[m];\r\n                            if (!nodeOwner.isMaterial) {\r\n                                pro && (pro[value] = this._applyColor(pro[value], nodeOwner, additive, weight, isFirstLayer, <Vector4>realtimeDatas[i]));\r\n                                if (nodeOwner.callbackFun) {\r\n                                    nodeOwner.animatorDataSetCallBack();\r\n                                }\r\n                            } else {\r\n                                pro && pro.getColor(value) && (pro as Material).setColor(value, this._applyColor(pro.getColor(value), nodeOwner, additive, weight, isFirstLayer, <Vector4>realtimeDatas[i]));\r\n                            }\r\n                            break;\r\n                    }\r\n                    nodeOwner.updateMark = this._updateMark;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _setCrossClipDatasToNode(controllerLayer: AnimatorControllerLayer, srcState: AnimatorState, destState: AnimatorState, crossWeight: number, isFirstLayer: boolean): void {\r\n        var nodeOwners: KeyframeNodeOwner[] = controllerLayer._crossNodesOwners;\r\n        var ownerCount: number = controllerLayer._crossNodesOwnersCount;\r\n        var additive: boolean = controllerLayer.blendingMode !== AnimatorControllerLayer.BLENDINGMODE_OVERRIDE;\r\n        var weight: number = controllerLayer.defaultWeight;\r\n\r\n        var destRealtimeDatas: Array<number | Vector3 | Quaternion> = destState._realtimeDatas;\r\n        var destDataIndices: number[] = controllerLayer._destCrossClipNodeIndices;\r\n        var destNodeOwners: KeyframeNodeOwner[] = destState._nodeOwners;\r\n        var srcRealtimeDatas: Array<number | Vector3 | Quaternion> = srcState._realtimeDatas;\r\n        var srcDataIndices: number[] = controllerLayer._srcCrossClipNodeIndices;\r\n        var srcNodeOwners: KeyframeNodeOwner[] = srcState._nodeOwners;\r\n\r\n        for (var i: number = 0; i < ownerCount; i++) {\r\n            var nodeOwner: KeyframeNodeOwner = nodeOwners[i];\r\n            if (nodeOwner) {\r\n                var srcIndex: number = srcDataIndices[i];\r\n                var destIndex: number = destDataIndices[i];\r\n                var srcValue: any = srcIndex !== -1 ? srcRealtimeDatas[srcIndex] : destNodeOwners[destIndex].defaultValue;\r\n                var desValue: any = destIndex !== -1 ? destRealtimeDatas[destIndex] : srcNodeOwners[srcIndex].defaultValue;\r\n                if (!desValue) {\r\n                    desValue = srcNodeOwners[srcIndex].defaultValue;\r\n                }\r\n                if (!controllerLayer.avatarMask || controllerLayer.avatarMask.getTransformActive(nodeOwner.nodePath)) {\r\n                    this._applyCrossData(nodeOwner, additive, weight, isFirstLayer, srcValue, desValue, crossWeight);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _setFixedCrossClipDatasToNode(controllerLayer: AnimatorControllerLayer, destState: AnimatorState, crossWeight: number, isFirstLayer: boolean): void {\r\n        var nodeOwners: KeyframeNodeOwner[] = controllerLayer._crossNodesOwners;\r\n        var ownerCount: number = controllerLayer._crossNodesOwnersCount;\r\n        var additive: boolean = controllerLayer.blendingMode !== AnimatorControllerLayer.BLENDINGMODE_OVERRIDE;\r\n        var weight: number = controllerLayer.defaultWeight;\r\n        var destRealtimeDatas: Array<number | Vector3 | Quaternion> = destState._realtimeDatas;\r\n        var destDataIndices: number[] = controllerLayer._destCrossClipNodeIndices;\r\n\r\n        for (var i: number = 0; i < ownerCount; i++) {\r\n            var nodeOwner: KeyframeNodeOwner = nodeOwners[i];\r\n            if (nodeOwner) {\r\n                var destIndex: number = destDataIndices[i];\r\n                var srcValue: any = nodeOwner.crossFixedValue;\r\n                var desValue;\r\n                if (destIndex == -1 || !destRealtimeDatas[destIndex]) {\r\n                    desValue = nodeOwner.defaultValue;\r\n                } else {\r\n                    desValue = destRealtimeDatas[destIndex];\r\n                }\r\n                this._applyCrossData(nodeOwner, additive, weight, isFirstLayer, srcValue, desValue, crossWeight);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _revertDefaultKeyframeNodes(clipStateInfo: AnimatorState): void {\r\n        var nodeOwners: KeyframeNodeOwner[] = clipStateInfo._nodeOwners;\r\n        for (var i: number = 0, n: number = nodeOwners.length; i < n; i++) {\r\n            var nodeOwner: KeyframeNodeOwner = nodeOwners[i];\r\n            if (nodeOwner) {\r\n                var pro: any = nodeOwner.propertyOwner;\r\n                let value: string;\r\n                if (pro) {\r\n                    switch (nodeOwner.type) {\r\n                        case KeyFrameValueType.Float:\r\n                            var proPat: string[] = nodeOwner.property!;\r\n                            var m: number = proPat.length - 1;\r\n                            for (var j: number = 0; j < m; j++) {\r\n                                pro = pro[proPat[j]];\r\n                                if (!pro)//属性可能或被置空\r\n                                    break;\r\n                            }\r\n                            //pro && this._applyFloat(pro, proPat[m], nodeOwner, additive, weight, isFirstLayer, <number>realtimeDatas[i]);\r\n                            let lastpro = proPat[m];\r\n                            if (!nodeOwner.isMaterial) {\r\n                                pro && (pro[lastpro] = nodeOwner.defaultValue);\r\n                                if (nodeOwner.callbackFun) {\r\n                                    nodeOwner.animatorDataSetCallBack();\r\n                                }\r\n                            } else {\r\n                                pro && (pro as Material).setFloat(lastpro, nodeOwner.defaultValue);\r\n                            }\r\n                            break;\r\n                        case KeyFrameValueType.Position:\r\n                            var locPos: Vector3 = pro.localPosition;\r\n                            var def: Vector3 = nodeOwner.defaultValue;\r\n                            locPos.x = def.x;\r\n                            locPos.y = def.y;\r\n                            locPos.z = def.z;\r\n                            pro.localPosition = locPos;\r\n                            break;\r\n                        case KeyFrameValueType.Rotation:\r\n                            var locRot: Quaternion = pro.localRotation;\r\n                            var defQua: Quaternion = nodeOwner.defaultValue;\r\n                            locRot.x = defQua.x;\r\n                            locRot.y = defQua.y;\r\n                            locRot.z = defQua.z;\r\n                            locRot.w = defQua.w;\r\n                            pro.localRotation = locRot;\r\n                            break;\r\n                        case KeyFrameValueType.Scale:\r\n                            var locSca: Vector3 = pro.localScale;\r\n                            def = nodeOwner.defaultValue;\r\n                            locSca.x = def.x;\r\n                            locSca.y = def.y;\r\n                            locSca.z = def.z;\r\n                            pro.localScale = locSca;\r\n                            break;\r\n                        case KeyFrameValueType.RotationEuler:\r\n                            var locEul: Vector3 = pro.localRotationEuler;\r\n                            def = nodeOwner.defaultValue;\r\n                            locEul.x = def.x;\r\n                            locEul.y = def.y;\r\n                            locEul.z = def.z;\r\n                            pro.localRotationEuler = locEul;\r\n                            break;\r\n                        case KeyFrameValueType.Vector2:\r\n                            var proPat: string[] = nodeOwner.property!;\r\n                            var m: number = proPat.length - 1;\r\n                            for (var j: number = 0; j < m; j++) {\r\n                                pro = pro[proPat[j]];\r\n                                if (!pro)//属性可能或被置空\r\n                                    break;\r\n                            }\r\n                            value = proPat[m];\r\n                            if (!nodeOwner.isMaterial) {\r\n                                pro && (pro[value] = nodeOwner.defaultValue);\r\n                                if (nodeOwner.callbackFun) {\r\n                                    nodeOwner.animatorDataSetCallBack();\r\n                                }\r\n                            } else {\r\n                                pro && pro.getVector2(value) && (pro as Material).setVector2(value, nodeOwner.defaultValue);\r\n                            }\r\n                            break;\r\n                        case KeyFrameValueType.Vector3:\r\n                            var proPat: string[] = nodeOwner.property!;\r\n                            var m: number = proPat.length - 1;\r\n                            for (var j: number = 0; j < m; j++) {\r\n                                pro = pro[proPat[j]];\r\n                                if (!pro)//属性可能或被置空\r\n                                    break;\r\n                            }\r\n                            value = proPat[m];\r\n                            if (!nodeOwner.isMaterial) {\r\n                                pro && (pro[value] = nodeOwner.defaultValue);\r\n                                if (nodeOwner.callbackFun) {\r\n                                    nodeOwner.animatorDataSetCallBack();\r\n                                }\r\n                            } else {\r\n                                pro && pro.getVector3(value) && (pro as Material).setVector3(value, nodeOwner.defaultValue);\r\n                            }\r\n                            break;\r\n                        case KeyFrameValueType.Vector4:\r\n                            var proPat: string[] = nodeOwner.property!;\r\n                            var m: number = proPat.length - 1;\r\n                            for (var j: number = 0; j < m; j++) {\r\n                                pro = pro[proPat[j]];\r\n                                if (!pro)//属性可能或被置空\r\n                                    break;\r\n                            }\r\n                            value = proPat[m];\r\n                            if (!nodeOwner.isMaterial) {\r\n                                pro && (pro[value] = nodeOwner.defaultValue);\r\n                                if (nodeOwner.callbackFun) {\r\n                                    nodeOwner.animatorDataSetCallBack();\r\n                                }\r\n                            } else {\r\n                                pro && pro.getVector3(value) && (pro as Material).setVector3(value, nodeOwner.defaultValue);\r\n                            }\r\n                            break;\r\n                        case KeyFrameValueType.Color:\r\n                            var proPat: string[] = nodeOwner.property!;\r\n                            var m: number = proPat.length - 1;\r\n                            for (var j: number = 0; j < m; j++) {\r\n                                pro = pro[proPat[j]];\r\n                                if (!pro)//属性可能或被置空\r\n                                    break;\r\n                            }\r\n                            value = proPat[m];\r\n                            let tempColor = Animator._tempColor;\r\n                            tempColor.r = nodeOwner.defaultValue.x;\r\n                            tempColor.g = nodeOwner.defaultValue.y;\r\n                            tempColor.b = nodeOwner.defaultValue.z;\r\n                            tempColor.a = nodeOwner.defaultValue.w;\r\n                            if (!nodeOwner.isMaterial) {\r\n                                pro && (pro[value] = tempColor);\r\n                                if (nodeOwner.callbackFun) {\r\n                                    nodeOwner.animatorDataSetCallBack();\r\n                                }\r\n                            } else {\r\n                                pro && pro.getColor(value) && (pro as Material).setColor(value, tempColor);\r\n                            }\r\n                            break;\r\n                        default:\r\n                            throw \"Animator:unknown type.\";\r\n                    }\r\n\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    onAfterDeserialize(): void {\r\n        let arr = (<any>this).controllerLayers;\r\n        if (!arr || null != this.controller)\r\n            return;\r\n        delete (<any>this).controllerLayers;\r\n        this._controllerLayers.length = 0;\r\n        for (let layer of arr) {\r\n            this.addControllerLayer(layer);\r\n        }\r\n    }\r\n\r\n    protected _onEnable(): void {\r\n        for (let i = 0, n = this._controllerLayers.length; i < n; i++) {\r\n            if (this._controllerLayers[i].playOnWake) {\r\n                let defaultClip: AnimatorState = this.getDefaultState(i);\r\n                (defaultClip) && (this.play(null, i, defaultClip.cycleOffset));\r\n            }\r\n        }\r\n    }\r\n\r\n    protected _onDestroy() {\r\n        for (let i = 0, n = this._controllerLayers.length; i < n; i++)\r\n            this._controllerLayers[i]._removeReference();\r\n    }\r\n\r\n    private _applyUpdateMode(delta: number): number {\r\n        let ret;\r\n        switch (this._updateMode) {\r\n            case AnimatorUpdateMode.Normal:\r\n                ret = delta;\r\n                break;\r\n            case AnimatorUpdateMode.LowFrame:\r\n                ret = (Stat.loopCount % this._lowUpdateDelty == 0) ? delta * this._lowUpdateDelty : 0;\r\n                break;\r\n            case AnimatorUpdateMode.UnScaleTime:\r\n                ret = 0;\r\n                break;\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _handleSpriteOwnersBySprite(isLink: boolean, path: string[], sprite: Sprite3D): void {\r\n        for (var i: number = 0, n: number = this._controllerLayers.length; i < n; i++) {\r\n            if (!this._controllerLayers[i].enable)\r\n                continue;\r\n            var clipStateInfos: AnimatorState[] = this._controllerLayers[i]._states;\r\n            for (var j: number = 0, m: number = clipStateInfos.length; j < m; j++) {\r\n                var clipStateInfo: AnimatorState = clipStateInfos[j];\r\n                var clip: AnimationClip = clipStateInfo._clip!;\r\n                var nodePath: string = path.join(\"/\");\r\n                var ownersNodes: KeyframeNode[] = clip._nodesMap[nodePath];\r\n                if (ownersNodes) {\r\n                    var nodeOwners: KeyframeNodeOwner[] = clipStateInfo._nodeOwners;\r\n                    for (var k: number = 0, p: number = ownersNodes.length; k < p; k++) {\r\n                        if (isLink)\r\n                            this._addKeyframeNodeOwner(nodeOwners, ownersNodes[k], sprite);\r\n                        else\r\n                            this._removeKeyframeNodeOwner(nodeOwners, ownersNodes[k]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @internal\r\n     * @override\r\n     */\r\n    _parse(data: any): void {\r\n        var play: any = data.playOnWake;\r\n        var layersData: any[] = data.layers;\r\n        for (var i: number = 0; i < layersData.length; i++) {\r\n            var layerData: any = layersData[i];\r\n            var animatorLayer: AnimatorControllerLayer = new AnimatorControllerLayer(layerData.name);\r\n            if (i === 0)\r\n                animatorLayer.defaultWeight = 1.0;//TODO:\r\n            else\r\n                animatorLayer.defaultWeight = layerData.weight;\r\n\r\n            var blendingModeData: any = layerData.blendingMode;\r\n            (blendingModeData) && (animatorLayer.blendingMode = blendingModeData);\r\n            this.addControllerLayer(animatorLayer);\r\n            var states: any[] = layerData.states;\r\n            for (var j: number = 0, m: number = states.length; j < m; j++) {\r\n                var state: any = states[j];\r\n                var clipPath: string = state.clipPath;\r\n                if (clipPath) {\r\n                    var name: string = state.name;\r\n                    var motion: AnimationClip;\r\n                    motion = Loader.getRes(clipPath);\r\n                    if (motion) {//加载失败motion为空\r\n                        var animatorState: AnimatorState = new AnimatorState();\r\n                        animatorState.name = name;\r\n                        animatorState.clip = motion;\r\n                        state.speed && (animatorState.speed = state.speed);\r\n                        animatorLayer.addState(animatorState);\r\n                        (j === 0) && (this.getControllerLayer(i).defaultState = animatorState);\r\n                    }\r\n                }\r\n            }\r\n            (play !== undefined) && (animatorLayer.playOnWake = play);\r\n            //avatarMask\r\n            let layerMaskData = layerData.avatarMask;\r\n            if (layerMaskData) {\r\n                let avaMask = new AvatarMask();\r\n                animatorLayer.avatarMask = avaMask;\r\n                for (var bips in layerMaskData) {\r\n                    avaMask.setTransformActive(bips, layerMaskData[bips]);\r\n                }\r\n            }\r\n        }\r\n        var cullingModeData: any = data.cullingMode;\r\n        (cullingModeData !== undefined) && (this.cullingMode = cullingModeData);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    onUpdate(): void {\r\n        let timer = this.owner._scene.timer;\r\n        let delta = timer._delta / 1000.0;//Laya.timer.delta已结包含Laya.timer.scale\r\n        delta = this._applyUpdateMode(delta);\r\n        if (this._speed === 0 || delta === 0)//delta为0无需更新,可能造成crossWeight计算值为NaN\r\n            return;\r\n        if (!Stat.enableAnimatorUpdate)\r\n            return;\r\n        var needRender = true;//TODO:有渲染节点才可将needRender变为true\r\n        var i, n;\r\n        this._updateMark++;\r\n        for (i = 0, n = this._controllerLayers.length; i < n; i++) {\r\n            var controllerLayer: AnimatorControllerLayer = this._controllerLayers[i];\r\n            if (!controllerLayer.enable)\r\n                continue;\r\n            var playStateInfo: AnimatorPlayState = controllerLayer._playStateInfo!;\r\n            if (this.sleep && playStateInfo._finish && controllerLayer._playType == 0) {\r\n                continue;\r\n            }\r\n            var crossPlayStateInfo: AnimatorPlayState = controllerLayer._crossPlayStateInfo!;\r\n            addtive = controllerLayer.blendingMode !== AnimatorControllerLayer.BLENDINGMODE_OVERRIDE;\r\n            switch (controllerLayer._playType) {\r\n                case 0:\r\n                    var animatorState: AnimatorState = playStateInfo.currentState!;\r\n                    var clip: AnimationClip = animatorState._clip!;\r\n                    var speed: number = this._speed * animatorState.speed;\r\n                    var finish: boolean = playStateInfo._finish;//提前取出finish,防止最后一帧跳过\r\n                    finish || this._updatePlayer(animatorState, playStateInfo, delta * speed, animatorState.islooping, i);\r\n                    if (needRender) {\r\n                        var addtive: boolean = controllerLayer.blendingMode !== AnimatorControllerLayer.BLENDINGMODE_OVERRIDE;\r\n                        this._updateClipDatas(animatorState, addtive, playStateInfo, controllerLayer.avatarMask);//clipDatas为逐动画文件,防止两个使用同一动画文件的Animator数据错乱,即使动画停止也要updateClipDatas\r\n                        this._setClipDatasToNode(animatorState, addtive, controllerLayer.defaultWeight, i === 0, controllerLayer);//多层动画混合时即使动画停止也要设置数据\r\n                        finish || this._updateEventScript(animatorState, playStateInfo);\r\n                    }\r\n                    finish || this._updateStateFinish(animatorState, playStateInfo);\r\n                    break;\r\n                case 1:\r\n                    animatorState = playStateInfo.currentState!;\r\n                    clip = animatorState._clip!;\r\n                    var crossState: AnimatorState = controllerLayer._crossPlayState;\r\n                    var crossClip: AnimationClip = crossState._clip!;\r\n                    var crossDuratuion: number = controllerLayer._crossDuration;\r\n                    var startPlayTime: number = crossPlayStateInfo._startPlayTime;\r\n                    var crossClipDuration: number = crossClip._duration - startPlayTime;\r\n                    var crossScale: number = crossDuratuion > crossClipDuration ? crossClipDuration / crossDuratuion : 1.0;//如果过度时间大于过度动作时间,则减慢速度\r\n                    var crossSpeed: number = this._speed * crossState.speed;\r\n                    this._updatePlayer(crossState, crossPlayStateInfo, delta * crossScale * crossSpeed, crossClip.islooping, i);\r\n                    var crossWeight: number = ((crossPlayStateInfo._elapsedTime - startPlayTime) / crossScale) / crossDuratuion;\r\n                    var needUpdateFinishcurrentState = false;\r\n                    if (crossWeight >= 1.0) {\r\n                        if (needRender) {\r\n                            this._updateClipDatas(crossState, addtive, crossPlayStateInfo, controllerLayer.avatarMask);\r\n                            this._setClipDatasToNode(crossState, addtive, controllerLayer.defaultWeight, i === 0, controllerLayer);\r\n\r\n                            controllerLayer._playType = 0;//完成融合,切换到正常播放状态\r\n                            playStateInfo.currentState = crossState;\r\n                            crossPlayStateInfo._cloneTo(playStateInfo);\r\n                        }\r\n                    } else {\r\n                        if (!playStateInfo._finish) {\r\n                            speed = this._speed * animatorState.speed;\r\n                            needUpdateFinishcurrentState = true;\r\n                            this._updatePlayer(animatorState, playStateInfo, delta * speed, animatorState.islooping, i);\r\n                            if (needRender)\r\n                                this._updateClipDatas(animatorState, addtive, playStateInfo, controllerLayer.avatarMask);\r\n                        }\r\n                        if (needRender) {\r\n                            this._updateClipDatas(crossState, addtive, crossPlayStateInfo, controllerLayer.avatarMask);\r\n                            this._setCrossClipDatasToNode(controllerLayer, animatorState, crossState, crossWeight, i === 0);\r\n                        }\r\n                    }\r\n                    if (needRender) {\r\n                        this._updateEventScript(animatorState, playStateInfo);\r\n                        this._updateEventScript(crossState, crossPlayStateInfo);\r\n                    }\r\n                    this._updateStateFinish(crossState, crossPlayStateInfo);\r\n                    needUpdateFinishcurrentState && this._updateStateFinish(playStateInfo.currentState, playStateInfo);\r\n                    break;\r\n                case 2:\r\n                    crossState = controllerLayer._crossPlayState;\r\n                    crossClip = crossState._clip!;\r\n                    crossDuratuion = controllerLayer._crossDuration;\r\n                    startPlayTime = crossPlayStateInfo._startPlayTime;\r\n                    crossClipDuration = crossClip._duration - startPlayTime;\r\n                    crossScale = crossDuratuion > crossClipDuration ? crossClipDuration / crossDuratuion : 1.0;//如果过度时间大于过度动作时间,则减慢速度\r\n                    crossSpeed = this._speed * crossState.speed;\r\n                    this._updatePlayer(crossState, crossPlayStateInfo, delta * crossScale * crossSpeed, crossState.islooping, i);\r\n                    if (needRender) {\r\n                        crossWeight = ((crossPlayStateInfo._elapsedTime - startPlayTime) / crossScale) / crossDuratuion;\r\n                        if (crossWeight >= 1.0) {\r\n                            this._updateClipDatas(crossState, addtive, crossPlayStateInfo, controllerLayer.avatarMask);\r\n                            this._setClipDatasToNode(crossState, addtive, 1.0, i === 0, controllerLayer);\r\n                            controllerLayer._playType = 0;//完成融合,切换到正常播放状态\r\n                            playStateInfo.currentState = crossState;\r\n                            crossPlayStateInfo._cloneTo(playStateInfo);\r\n                        } else {\r\n                            this._updateClipDatas(crossState, addtive, crossPlayStateInfo, controllerLayer.avatarMask);\r\n                            this._setFixedCrossClipDatasToNode(controllerLayer, crossState, crossWeight, i === 0);\r\n                        }\r\n                        this._updateEventScript(crossState, crossPlayStateInfo);\r\n                    }\r\n                    this._updateStateFinish(crossState, crossPlayStateInfo);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @override\r\n     */\r\n    _cloneTo(dest: Component): void {\r\n        var animator: Animator = (<Animator>dest);\r\n        animator.cullingMode = this.cullingMode;\r\n\r\n        for (var i: number = 0, n: number = this._controllerLayers.length; i < n; i++) {\r\n            var controllLayer: AnimatorControllerLayer = this._controllerLayers[i];\r\n            animator.addControllerLayer(controllLayer.clone());\r\n            var animatorStates: AnimatorState[] = controllLayer._states;\r\n            for (var j: number = 0, m: number = animatorStates.length; j < m; j++) {\r\n                var state: AnimatorState = animatorStates[j].clone();\r\n                var cloneLayer: AnimatorControllerLayer = animator.getControllerLayer(i);\r\n                cloneLayer.addState(state);\r\n                (j == 0) && (cloneLayer.defaultState = state);\r\n            }\r\n        }\r\n        animator.controller = this._controller\r\n    }\r\n\r\n    /**\r\n     * 获取默认动画状态。\r\n     * @param\tlayerIndex 层索引。\r\n     * @return 默认动画状态。\r\n     */\r\n    getDefaultState(layerIndex: number = 0): AnimatorState {\r\n        var controllerLayer: AnimatorControllerLayer = this._controllerLayers[layerIndex];\r\n        return controllerLayer.defaultState;\r\n    }\r\n\r\n    /**\r\n     * 添加动画状态。\r\n     * @param\tstate 动画状态。\r\n     * @param   layerIndex 层索引。\r\n     */\r\n    addState(state: AnimatorState, layerIndex: number = 0): void {\r\n        var controllerLayer: AnimatorControllerLayer = this._controllerLayers[layerIndex];\r\n        controllerLayer.addState(state);\r\n        console.warn(\"Animator:this function is discard,please use animatorControllerLayer.addState() instead.\");\r\n    }\r\n\r\n    /**\r\n     * 移除动画状态。\r\n     * @param\tstate 动画状态。\r\n     * @param   layerIndex 层索引。\r\n     */\r\n    removeState(state: AnimatorState, layerIndex: number = 0): void {\r\n        var controllerLayer: AnimatorControllerLayer = this._controllerLayers[layerIndex];\r\n        controllerLayer.removeState(state);\r\n        console.warn(\"Animator:this function is discard,please use animatorControllerLayer.removeState() instead.\");\r\n    }\r\n\r\n    /**\r\n     * 添加控制器层。\r\n     */\r\n    addControllerLayer(controllderLayer: AnimatorControllerLayer): void {\r\n        this._controllerLayers.push(controllderLayer);\r\n        controllderLayer._animator = this;//TODO:可以复用,不应该这么设计\r\n        controllderLayer._addReference();\r\n        var states: AnimatorState[] = controllderLayer._states;\r\n        for (var i: number = 0, n: number = states.length; i < n; i++)\r\n            this._getOwnersByClip(states[i]);\r\n    }\r\n\r\n    /**\r\n     * 获取控制器层。\r\n     */\r\n    getControllerLayer(layerInex: number = 0): AnimatorControllerLayer {\r\n        return this._controllerLayers[layerInex];\r\n    }\r\n\r\n    /**\r\n     * 播放动画。\r\n     * @param\tname 如果为null则播放默认动画，否则按名字播放动画片段。\r\n     * @param\tlayerIndex 层索引。\r\n     * @param\tnormalizedTime 归一化的播放起始时间。\r\n     */\r\n    play(name: string | null = null, layerIndex: number = 0, normalizedTime: number = Number.NEGATIVE_INFINITY): void {\r\n        var controllerLayer: AnimatorControllerLayer = this._controllerLayers[layerIndex];\r\n        if (controllerLayer) {\r\n            var defaultState: AnimatorState = controllerLayer.defaultState;\r\n            if (!name && !defaultState)\r\n                throw new Error(\"Animator:must have default clip value,please set clip property.\");\r\n            var playStateInfo: AnimatorPlayState = controllerLayer._playStateInfo!;\r\n            var curPlayState: AnimatorState = playStateInfo.currentState!;\r\n\r\n\r\n            var animatorState: AnimatorState = name ? controllerLayer.getAnimatorState(name) : defaultState;\r\n            if (!animatorState._clip)\r\n                return;\r\n\r\n            var clipDuration: number = animatorState._clip!._duration;\r\n            var calclipduration = animatorState._clip!._duration * (animatorState.clipEnd - animatorState.clipStart);\r\n            if (curPlayState !== animatorState) {\r\n                if (normalizedTime !== Number.NEGATIVE_INFINITY)\r\n                    playStateInfo._resetPlayState(clipDuration * normalizedTime, calclipduration);\r\n                else\r\n                    playStateInfo._resetPlayState(0.0, calclipduration);\r\n                (curPlayState !== null && curPlayState !== animatorState) && (this._revertDefaultKeyframeNodes(curPlayState));\r\n                controllerLayer._playType = 0;\r\n                playStateInfo.currentState = animatorState;\r\n            } else {\r\n                if (normalizedTime !== Number.NEGATIVE_INFINITY) {\r\n                    playStateInfo._resetPlayState(clipDuration * normalizedTime, calclipduration);\r\n                    controllerLayer._playType = 0;\r\n                }\r\n            }\r\n            var scripts: AnimatorStateScript[] = animatorState._scripts!;\r\n            animatorState._eventStart(this,layerIndex);\r\n\r\n        }\r\n        else {\r\n            console.warn(\"Invalid layerIndex \" + layerIndex + \".\");\r\n        }\r\n        if (this.owner._scene) {\r\n            this.onUpdate();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 在当前动画状态和目标动画状态之间进行融合过渡播放。\r\n     * @param\tname 目标动画状态。\r\n     * @param\ttransitionDuration 过渡时间,该值为当前动画状态的归一化时间，值在0.0~1.0之间。\r\n     * @param\tlayerIndex 层索引。\r\n     * @param\tnormalizedTime 归一化的播放起始时间。\r\n     */\r\n    crossFade(name: string, transitionDuration: number, layerIndex: number = 0, normalizedTime: number = Number.NEGATIVE_INFINITY): void {\r\n        var controllerLayer = this._controllerLayers[layerIndex];\r\n        if (controllerLayer) {\r\n            var destAnimatorState = controllerLayer.getAnimatorState(name);\r\n            if (destAnimatorState) {\r\n                var playType = controllerLayer._playType;\r\n                if (playType === -1) {//如果未曾调用过play则回滚到play方法\r\n                    this.play(name, layerIndex, normalizedTime);\r\n                    return;\r\n                }\r\n\r\n                var crossPlayStateInfo = controllerLayer._crossPlayStateInfo;\r\n                var crossNodeOwners = controllerLayer._crossNodesOwners;\r\n                var crossNodeOwnerIndicesMap = controllerLayer._crossNodesOwnersIndicesMap;\r\n\r\n                var srcAnimatorState = controllerLayer._playStateInfo!.currentState;\r\n                var destNodeOwners = destAnimatorState._nodeOwners;\r\n                var destCrossClipNodeIndices = controllerLayer._destCrossClipNodeIndices;\r\n                var destClip = destAnimatorState._clip;\r\n                var destNodes = destClip._nodes!;\r\n                var destNodesMap = destClip._nodesDic;\r\n                var crossCount = 0;\r\n                switch (playType) {\r\n                    case 0:\r\n                        var srcNodeOwners = srcAnimatorState!._nodeOwners;\r\n                        var scrCrossClipNodeIndices = controllerLayer._srcCrossClipNodeIndices;\r\n                        var srcClip = srcAnimatorState!._clip;\r\n                        var srcNodes = srcClip!._nodes!;\r\n                        var srcNodesMap = srcClip!._nodesDic;\r\n                        controllerLayer._playType = 1;\r\n\r\n                        var crossMark = ++controllerLayer._crossMark;\r\n                        crossCount = controllerLayer._crossNodesOwnersCount = 0;\r\n\r\n                        for (var i = 0, n = srcNodes.count; i < n; i++) {\r\n                            var srcNode = srcNodes.getNodeByIndex(i);\r\n                            var srcIndex = srcNode._indexInList;\r\n                            var srcNodeOwner = srcNodeOwners[srcIndex];\r\n                            if (srcNodeOwner) {\r\n                                var srcFullPath = srcNode.fullPath;\r\n                                scrCrossClipNodeIndices[crossCount] = srcIndex;\r\n                                var destNode = destNodesMap[srcFullPath];\r\n                                if (destNode)\r\n                                    destCrossClipNodeIndices[crossCount] = destNode._indexInList;\r\n                                else\r\n                                    destCrossClipNodeIndices[crossCount] = -1;\r\n\r\n                                crossNodeOwnerIndicesMap[srcFullPath] = crossMark;\r\n                                crossNodeOwners[crossCount] = srcNodeOwner;\r\n                                crossCount++;\r\n                            }\r\n                        }\r\n\r\n                        for (i = 0, n = destNodes.count; i < n; i++) {\r\n                            destNode = destNodes.getNodeByIndex(i);\r\n                            var destIndex = destNode._indexInList;\r\n                            var destNodeOwner = destNodeOwners[destIndex];\r\n                            if (destNodeOwner) {\r\n                                var destFullPath = destNode.fullPath;\r\n                                if (!srcNodesMap[destFullPath]) {\r\n                                    scrCrossClipNodeIndices[crossCount] = -1;\r\n                                    destCrossClipNodeIndices[crossCount] = destIndex;\r\n\r\n                                    crossNodeOwnerIndicesMap[destFullPath] = crossMark;\r\n                                    crossNodeOwners[crossCount] = destNodeOwner;\r\n                                    crossCount++;\r\n                                }\r\n                            }\r\n                        }\r\n                        break;\r\n                    case 1:\r\n                    case 2:\r\n                        controllerLayer._playType = 2;\r\n                        for (i = 0, n = crossNodeOwners.length; i < n; i++) {\r\n                            var nodeOwner = crossNodeOwners[i];\r\n                            nodeOwner.saveCrossFixedValue();\r\n                            destNode = destNodesMap[nodeOwner.fullPath!];\r\n                            if (destNode)\r\n                                destCrossClipNodeIndices[i] = destNode._indexInList;\r\n                            else\r\n                                destCrossClipNodeIndices[i] = -1;\r\n                        }\r\n\r\n                        crossCount = controllerLayer._crossNodesOwnersCount;\r\n                        crossMark = controllerLayer._crossMark;\r\n                        for (i = 0, n = destNodes.count; i < n; i++) {\r\n                            destNode = destNodes.getNodeByIndex(i);\r\n                            destIndex = destNode._indexInList;\r\n                            destNodeOwner = destNodeOwners[destIndex];\r\n                            if (destNodeOwner) {\r\n                                destFullPath = destNode.fullPath;\r\n                                if (crossNodeOwnerIndicesMap[destFullPath] !== crossMark) {\r\n                                    destCrossClipNodeIndices[crossCount] = destIndex;\r\n\r\n                                    crossNodeOwnerIndicesMap[destFullPath] = crossMark;\r\n                                    nodeOwner = destNodeOwners[destIndex];\r\n                                    crossNodeOwners[crossCount] = nodeOwner;\r\n                                    nodeOwner.saveCrossFixedValue();\r\n                                    crossCount++;\r\n                                }\r\n                            }\r\n                        }\r\n                        break;\r\n                    default:\r\n                }\r\n                controllerLayer._crossNodesOwnersCount = crossCount;\r\n                controllerLayer._crossPlayState = destAnimatorState;\r\n                controllerLayer._crossDuration = srcAnimatorState!._clip!._duration * transitionDuration;\r\n                if (normalizedTime !== Number.NEGATIVE_INFINITY)\r\n                    crossPlayStateInfo!._resetPlayState(destClip._duration * normalizedTime, controllerLayer._crossDuration);\r\n                else\r\n                    crossPlayStateInfo!._resetPlayState(0.0, controllerLayer._crossDuration);\r\n                destAnimatorState._eventStart(this,layerIndex);\r\n            }\r\n            else {\r\n                console.warn(\"Invalid name \" + layerIndex + \".\");\r\n            }\r\n        }\r\n        else {\r\n            console.warn(\"Invalid layerIndex \" + layerIndex + \".\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * set params value\r\n     * @param name \r\n     */\r\n    setParamsTrigger(name: number): void;\r\n    setParamsTrigger(name: string): void;\r\n    setParamsTrigger(name: string | number) {\r\n        let id;\r\n        if (typeof name == \"number\")\r\n            id = name;\r\n        else\r\n            id = AnimatorStateCondition.conditionNameToID(name);\r\n        this._animatorParams[id] = true;\r\n    }\r\n\r\n    /**\r\n     * set params value\r\n     * @param name \r\n     */\r\n    setParamsNumber(name: number, value: number): void;\r\n    setParamsNumber(name: string, value: number): void;\r\n    setParamsNumber(name: string | number, value: number) {\r\n        let id;\r\n        if (typeof name == \"number\")\r\n            id = name;\r\n        else\r\n            id = AnimatorStateCondition.conditionNameToID(name);\r\n        this._animatorParams[id] = value;\r\n    }\r\n\r\n    /**\r\n     * set params value\r\n     * @param name \r\n     */\r\n    setParamsBool(name: number, value: boolean): void;\r\n    setParamsBool(name: string, value: boolean): void;\r\n    setParamsBool(name: string | number, value: boolean) {\r\n        let id;\r\n        if (typeof name == \"number\")\r\n            id = name;\r\n        else\r\n            id = AnimatorStateCondition.conditionNameToID(name);\r\n        this._animatorParams[id] = value;\r\n    }\r\n\r\n    /**\r\n     * get params value\r\n     * @param name \r\n     */\r\n    getParamsvalue(name: number): number | boolean;\r\n    getParamsvalue(name: string): number | boolean;\r\n    getParamsvalue(name: string | number): number | boolean {\r\n        let id;\r\n        if (typeof name == \"number\")\r\n            id = name;\r\n        else\r\n            id = AnimatorStateCondition.conditionNameToID(name);\r\n        return this._animatorParams[id];\r\n    }\r\n\r\n\r\n    /**\r\n     * @deprecated 请使用animator.getControllerLayer(layerIndex).getCurrentPlayState()替换。use animator.getControllerLayer(layerIndex).getCurrentPlayState() instead\r\n     * 获取当前的播放状态。\r\n     * @param   layerIndex 层索引。\r\n     * @return  动画播放状态。\r\n     */\r\n    getCurrentAnimatorPlayState(layerInex: number = 0): AnimatorPlayState {\r\n        return this._controllerLayers[layerInex]._playStateInfo!;\r\n    }\r\n}\r\n\r\n\r\n","import { Camera } from \"../Camera\"\r\nimport { CommandBuffer } from \"./command/CommandBuffer\"\r\nimport { ShaderData } from \"../../../RenderEngine/RenderShader/ShaderData\";\r\nimport { RenderTargetFormat } from \"../../../RenderEngine/RenderEnum/RenderTargetFormat\";\r\nimport { RenderTexture } from \"../../../resource/RenderTexture\";\r\n\r\n/**\r\n * * <code>PostProcessRenderContext</code> 类用于创建后期处理渲染上下文。\r\n */\r\nexport class PostProcessRenderContext {\r\n\t/** origan RenderTexture 原始渲染RT,禁止改变此RT*/\r\n\tsource: RenderTexture | null = null;\r\n\t/** forward effect target 上个后期处理的结果*/\r\n\tindirectTarget:RenderTexture|null = null;\r\n\t/** dest RenderTexture 需要将处理后的结果画入此RT*/\r\n\tdestination: RenderTexture | null = null;\r\n\t/** 渲染相机。*/\r\n\tcamera: Camera | null = null;\r\n\t/** 合成着色器数据。*/\r\n\tcompositeShaderData: ShaderData | null = null;\r\n\t/** 后期处理指令流。*/\r\n\tcommand: CommandBuffer | null = null;\r\n\t/** 临时纹理数组。可以将创建的纹理放入此,也可以从这里选取要用的RT来节省显存*/\r\n\tdeferredReleaseTextures: RenderTexture[] = [];\r\n\r\n\t/**\r\n\t * 从回收的RT中选择一个RT 用来节省内存\r\n\t */\r\n\tcreateRTByContextReleaseTexture(width: number, height: number, colorFormat: RenderTargetFormat, depthFormat: RenderTargetFormat, mipmap: boolean = false, multiSamples: number = 1, depthTexture: boolean = false, sRGB: boolean = false){\r\n\t\tlet n =this.deferredReleaseTextures.length\r\n\t\tfor (let index = 0; index <n ; index++) {\r\n            let rt = this.deferredReleaseTextures[index];\r\n            if (rt.width == width && rt.height == height && rt.colorFormat == colorFormat && rt.depthStencilFormat == depthFormat && rt._generateMipmap == mipmap && rt.multiSamples == multiSamples && rt.generateDepthTexture == depthTexture && rt._gammaSpace == sRGB) {\r\n                rt._inPool = false;\r\n                let end = this.deferredReleaseTextures[n - 1];\r\n                this.deferredReleaseTextures[index] = end;\r\n                this.deferredReleaseTextures.length -= 1;\r\n                return rt;\r\n            }\r\n        }\r\n\t\treturn null;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { PostProcess } from \"../../component/PostProcess\";\r\nimport { PostProcessRenderContext } from \"./PostProcessRenderContext\";\r\n/**\r\n\t * <code>PostProcessEffect</code> 类用于创建后期处理渲染效果。\r\n\t */\r\nexport class PostProcessEffect {\r\n\r\n\t/**@internal */\r\n\tprotected _active:boolean;\r\n\t/**@internal */\r\n\tprotected _singleton:boolean;\r\n\r\n\t/**\r\n\t * 创建一个 <code>PostProcessEffect</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tthis._active = true;\r\n\t\tthis._singleton = true;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tset singleton(value:boolean){\r\n\t\tthis._singleton = value;\r\n\t}\r\n\r\n\tget singleton(){\r\n\t\treturn this._singleton;\r\n\t}\r\n\r\n\t/**\r\n\t * 是否开启\r\n\t */\r\n\tget active(){\r\n\t\treturn this._active;\r\n\t}\r\n\r\n\tset active(value:boolean){\r\n\t\tthis._active = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 根据后期处理设置cameraDepthTextureMode\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @returns \r\n\t */\r\n\tgetCameraDepthTextureModeFlag() {\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t/**\r\n\t * 添加到后期处理栈时,会调用\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\teffectInit(postprocess:PostProcess) {\r\n\t\treturn;\r\n\t}\r\n\r\n\t/**\r\n\t * 释放Effect\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\trelease(postprocess:PostProcess){\r\n\t\t\r\n\t}\r\n\r\n\t/**\r\n\t * 渲染\r\n\t * @internal\r\n\t */\r\n\trender(context: PostProcessRenderContext): void {\r\n\r\n\t}\r\n}\r\n\r\n\r\n","#define SHADER_NAME BlitVS\r\n\r\nvarying vec2 v_Texcoord0;\r\n\r\nvoid main()\r\n{\r\n    gl_Position = vec4(u_OffsetScale.x * 2.0 - 1.0 + (a_PositionTexcoord.x + 1.0) * u_OffsetScale.z, (1.0 - ((u_OffsetScale.y * 2.0 - 1.0 + (-a_PositionTexcoord.y + 1.0) * u_OffsetScale.w) + 1.0) / 2.0) * 2.0 - 1.0, 0.0, 1.0);\r\n\r\n    v_Texcoord0 = a_PositionTexcoord.zw;\r\n}","import { Vector3 } from \"../../../../maths/Vector3\";\r\nimport { Vector4 } from \"../../../../maths/Vector4\";\r\nimport { FilterMode } from \"../../../../RenderEngine/RenderEnum/FilterMode\";\r\nimport { RenderTargetFormat } from \"../../../../RenderEngine/RenderEnum/RenderTargetFormat\";\r\nimport { WrapMode } from \"../../../../RenderEngine/RenderEnum/WrapMode\";\r\nimport { Shader3D } from \"../../../../RenderEngine/RenderShader/Shader3D\";\r\nimport { ShaderData, ShaderDataType } from \"../../../../RenderEngine/RenderShader/ShaderData\";\r\nimport { ShaderDefine } from \"../../../../RenderEngine/RenderShader/ShaderDefine\";\r\nimport { SubShader } from \"../../../../RenderEngine/RenderShader/SubShader\";\r\nimport { VertexMesh } from \"../../../../RenderEngine/RenderShader/VertexMesh\";\r\nimport { RenderTexture } from \"../../../../resource/RenderTexture\";\r\nimport { Material } from \"../../material/Material\";\r\nimport { CommandBuffer } from \"../command/CommandBuffer\";\r\nimport { PostProcessEffect } from \"../PostProcessEffect\";\r\nimport { PostProcessRenderContext } from \"../PostProcessRenderContext\";\r\nimport BlitVS from \"../../../../d3/shader/postprocess/BlitScreen.vs\";\r\nimport BlitLUTShader from \"../../../../d3/shader/postprocess/BlitLUTScreen.fs\";\r\nimport { RenderState } from \"../../../../RenderEngine/RenderShader/RenderState\";\r\nimport { Texture2D } from \"../../../../resource/Texture2D\";\r\nimport { RenderContext3D } from \"../RenderContext3D\";\r\nimport { Color } from \"../../../../maths/Color\";\r\nimport { PostProcess } from \"../../../component/PostProcess\";\r\nimport { LayaGL } from \"../../../../layagl/LayaGL\";\r\n\r\nexport enum ToneMappingType {\r\n\tNone,\r\n\tACES\r\n}\r\n\r\n/**\r\n * <code>ColorGradEffect</code> 类用于创建调色Effect\r\n */\r\nexport class ColorGradEffect extends PostProcessEffect {\r\n\tstatic SHADERDEFINE_ACES: ShaderDefine;\r\n\tstatic SHADERDEFINE_CUSTOMLUT: ShaderDefine;\r\n\r\n\tstatic SHADERVALUE_LUT: number;\r\n\tstatic SHADERVALUE_LUTPARAMS: number;\r\n\tstatic SHADERVALUE_CUSTOMLUT: number;\r\n\tstatic SHADERVALUE_CUSTOMLUTPARAMS: number;\r\n\r\n\t/**\r\n\t * bloom resource init\r\n\t */\r\n\tstatic init() {\r\n\t\tColorGradEffect.__initDefine__();\r\n\t\tlet attributeMap: { [name: string]: [number, ShaderDataType] } = {\r\n\t\t\t\"a_PositionTexcoord\": [VertexMesh.MESH_POSITION0, ShaderDataType.Vector4]\r\n\t\t};\r\n\r\n\t\tlet uniformMap = {\r\n\t\t\t\"u_OffsetScale\": ShaderDataType.Vector4,\r\n\t\t\t\"u_MainTex\": ShaderDataType.Texture2D,\r\n\t\t\t\"u_MainTex_TexelSize\": ShaderDataType.Vector4, //x:width,y:height,z:1/width,w:1/height\r\n\t\t};\r\n\t\tlet shader = Shader3D.add(\"blitLUTShader\");\r\n\t\tlet subShader = new SubShader(attributeMap, uniformMap);\r\n\t\tshader.addSubShader(subShader);\r\n\t\tlet pass = subShader.addShaderPass(BlitVS, BlitLUTShader);\r\n\t\tpass.renderState.depthTest = RenderState.DEPTHTEST_ALWAYS;\r\n\t\tpass.renderState.depthWrite = false;\r\n\t\tpass.renderState.cull = RenderState.CULL_NONE;\r\n\t\tpass.renderState.blend = RenderState.BLEND_DISABLE;\r\n\t}\r\n\r\n\tstatic __initDefine__() {\r\n\t\tColorGradEffect.SHADERDEFINE_ACES = Shader3D.getDefineByName(\"ACES\");\r\n\t\tColorGradEffect.SHADERDEFINE_CUSTOMLUT = Shader3D.getDefineByName(\"CUSTOMLUT\");\r\n\r\n\r\n\t\tColorGradEffect.SHADERVALUE_LUT = Shader3D.propertyNameToID(\"u_Lut\");\r\n\t\tColorGradEffect.SHADERVALUE_LUTPARAMS = Shader3D.propertyNameToID(\"u_LutParams\");\r\n\t\tColorGradEffect.SHADERVALUE_CUSTOMLUT = Shader3D.propertyNameToID(\"u_CustomLut\");\r\n\t\tColorGradEffect.SHADERVALUE_CUSTOMLUTPARAMS = Shader3D.propertyNameToID(\"u_CustomLutParams\");\r\n\t}\r\n\r\n\tprivate _needBuildLUT: boolean = false;\r\n\r\n\tprivate _lutCommond: CommandBuffer;\r\n\t_lutTex: RenderTexture;\r\n\tprivate _lutBuilderMat = new Material();\r\n\r\n\r\n\tprivate _LUTShader: Shader3D;\r\n\tprivate _lutShaderData: ShaderData;\r\n\tprivate _blitlutParams: Vector4;\r\n\r\n\t/**color Tone */\r\n\t/**@internal */\r\n\tprivate _toneMapping: ToneMappingType;\r\n\t/**@internal lut height size */\r\n\tprivate _lutSize = 32;\r\n\r\n\t// split toning\r\n\t/**@internal */\r\n\tprivate _enableSplitTone: boolean = false;\r\n\tprivate _splitShadow: Vector3 = new Vector3(0.5, 0.5, 0.5);\r\n\tprivate _splitBalance: number = 0;//-1-1\r\n\tprivate _splithighlights: Vector3 = new Vector3(0.5, 0.5, 0.5);\r\n\tprivate _u_SplitShadow: Vector4 = new Vector4(0,0,0);\r\n\r\n\t// shadows, midtones, highlights\r\n\tprivate _enableSMH: boolean = false;\r\n\t/**@internal */\r\n\tprivate _shadows: Vector3 = new Vector3(1, 1, 1);//0-5\r\n\t/**@internal */\r\n\tprivate _midtones: Vector3 = new Vector3(1, 1, 1);//0-5\r\n\t/**@internal */\r\n\tprivate _highlights: Vector3 = new Vector3(1, 1, 1);//0-5\r\n\t/**@internal */\r\n\tprivate _limits: Vector4 = new Vector4(0, 0.33, 0.55, 1);\r\n\r\n\t//lift gamma gain\r\n\tprivate _enableLiftGammaGain: boolean = false;\r\n\t/**@internal */\r\n\tprivate _lift: Vector3 = new Vector3(0, 0, 0);//-1-1\r\n\t/**@internal */\r\n\tprivate _gamma: Vector3 = new Vector3(1, 1, 1);//999-0.5\r\n\t/**@internal */\r\n\tprivate _gain: Vector3 = new Vector3(1, 1, 1);//0-2\r\n\r\n\t//white balance\r\n\tprivate _enableBalance: boolean = false;\r\n\t/**@internal tint,temperature */\r\n\tprivate _balance: Vector3 = new Vector3();\r\n\tprivate _tint: number = 0;//-100-100\r\n\tprivate _temperature: number = 0;//-100-1\r\n\r\n\t//Color Adjustments\r\n\t/**@internal */\r\n\tprivate _enableColorAdjust: boolean = false;\r\n\t/**@internal */\r\n\tprivate _postExposure = 1;//自动曝光,默认值是1\r\n\t/**@internal */\r\n\tprivate _contrast = 1;//range 0-2//对比度HueSatCon.z\r\n\t/**@internal */\r\n\tprivate _colorFilter = new Color(1, 1, 1);//正片叠底\r\n\t/**@internal */\r\n\tprivate _HueShift = 0;//-0.5-0.5 色相HueSatCon.x\r\n\t\r\n\t/**@internal */\r\n\tprivate _saturation = 1;//0-2饱和度HueSatCon.y\r\n\t\r\n\t/**@internal _HueShift,_saturation,_contrast*/\r\n\tprivate _HueSatCon: Vector4 = new Vector4(0, 1, 1, 0);\r\n\r\n\t/**\r\n\t * Tone Map色彩空间\r\n\t */\r\n\tpublic get toneMapping(): ToneMappingType {\r\n\t\treturn this._toneMapping;\r\n\t}\r\n\r\n\tpublic set toneMapping(value: ToneMappingType) {\r\n\t\tif (value == this._toneMapping)\r\n\t\t\treturn\r\n\t\tthis._needBuildLUT = true;\r\n\t\tthis._toneMapping = value;\r\n\t}\r\n\r\n\t// split toning\r\n\t/**\r\n\t * 是否开启Split Tone\r\n\t */\r\n\tpublic get enableSplitTone() {\r\n\t\treturn this._enableSplitTone;\r\n\t}\r\n\r\n\tpublic set enableSplitTone(value: boolean) {\r\n\t\tthis._enableSplitTone = value;\r\n\t\tthis._needBuildLUT = true;\r\n\t}\r\n\r\n\t/**\r\n\t * split shadow\r\n\t */\r\n\tpublic get splitShadow(): Vector3 {\r\n\t\treturn this._splitShadow;\r\n\t}\r\n\r\n\tpublic set splitShadow(value: Vector3) {\r\n\t\tthis._needBuildLUT = true;\r\n\t\tvalue.cloneTo(this._splitShadow);\r\n\t}\r\n\r\n\t/**\r\n\t * split hightLight\r\n\t */\r\n\tpublic get splithighlights(): Vector3 {\r\n\t\treturn this._splithighlights;\r\n\t}\r\n\tpublic set splithighlights(value: Vector3) {\r\n\t\tif (this._splithighlights.equal(value))\r\n\t\t\treturn;\r\n\t\tthis._needBuildLUT = true;\r\n\t\tvalue.cloneTo(this._splithighlights);\r\n\t}\r\n\r\n\t/**\r\n\t * split balance\r\n\t */\r\n\tpublic get splitBalance(): number {\r\n\t\treturn this._splitBalance;\r\n\t}\r\n\r\n\tpublic set splitBalance(value: number) {\r\n\t\tthis._needBuildLUT = true;\r\n\t\tthis._splitBalance = value;\r\n\t}\r\n\r\n\t// shadows, midtones, highlights\r\n\tpublic get enableSMH(): boolean {\r\n\t\treturn this._enableSMH;\r\n\t}\r\n\r\n\tpublic set enableSMH(value: boolean) {\r\n\t\tthis._needBuildLUT = true;\r\n\t\tthis._enableSMH = value;\r\n\t}\r\n\r\n\t/**\r\n\t * shadows 0-5\r\n\t */\r\n\tpublic get shadows(): Vector3 {\r\n\t\treturn this._shadows;\r\n\t}\r\n\r\n\tpublic set shadows(value: Vector3) {\r\n\t\tif (this._shadows.equal(value))\r\n\t\t\treturn;\r\n\t\tthis._needBuildLUT = true;\r\n\t\tvalue.cloneTo(this._shadows);\r\n\t}\r\n\r\n\t/**\r\n\t * midtones 0-5\r\n\t */\r\n\tpublic get midtones(): Vector3 {\r\n\t\treturn this._midtones;\r\n\t}\r\n\tpublic set midtones(value: Vector3) {\r\n\t\tif (this._midtones.equal(value))\r\n\t\t\treturn;\r\n\t\tthis._needBuildLUT = true;\r\n\t\tvalue.cloneTo(this._midtones);\r\n\t}\r\n\r\n\t/**\r\n\t * highlights 0-5\r\n\t */\r\n\tpublic get highlights(): Vector3 {\r\n\t\treturn this._highlights;\r\n\t}\r\n\tpublic set highlights(value: Vector3) {\r\n\t\tif (this._highlights.equal(value))\r\n\t\t\treturn;\r\n\t\tthis._needBuildLUT = true;\r\n\t\tvalue.cloneTo(this._highlights);\r\n\t}\r\n\r\n\t/**\r\n\t * shadow limit start 0-1\r\n\t */\r\n\tpublic get shadowLimitStart(): number {\r\n\t\treturn this._limits.x;\r\n\t}\r\n\r\n\tpublic set shadowLimitStart(value: number) {\r\n\t\tthis._needBuildLUT = true;\r\n\t\tthis._limits.x = Math.min(value, this.shadowLimitEnd);\r\n\t}\r\n\r\n\t/**\r\n\t * shadow limit end 0-1\r\n\t */\r\n\tpublic get shadowLimitEnd(): number {\r\n\t\treturn this._limits.y;\r\n\t}\r\n\r\n\tpublic set shadowLimitEnd(value: number) {\r\n\t\tthis._needBuildLUT = true;\r\n\t\tthis._limits.y = Math.max(value, this.shadowLimitStart);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * high Light limit start 0-1\r\n\t */\r\n\tpublic get highLightLimitStart(): number {\r\n\t\treturn this._limits.z;\r\n\t}\r\n\r\n\tpublic set highLightLimitStart(value: number) {\r\n\t\tthis._needBuildLUT = true;\r\n\t\tthis._limits.z = Math.min(value, this.highLightLimitEnd);\r\n\t}\r\n\r\n\t/**\r\n\t * high Light limit end 0-1\r\n\t */\r\n\tpublic get highLightLimitEnd(): number {\r\n\t\treturn this._limits.w;\r\n\t}\r\n\r\n\tpublic set highLightLimitEnd(value: number) {\r\n\t\tthis._needBuildLUT = true;\r\n\t\tthis._limits.w = Math.max(this.highLightLimitStart, value);\r\n\t}\r\n\r\n\r\n\t//lift gamma gain\r\n\tpublic get enableLiftGammaGain() {\r\n\t\treturn this._enableLiftGammaGain;\r\n\t}\r\n\r\n\tpublic set enableLiftGammaGain(value: boolean) {\r\n\t\tthis._needBuildLUT = true;\r\n\t\tthis._enableLiftGammaGain = value;\r\n\t}\r\n\r\n\t/**\r\n\t * lift -1-1\r\n\t */\r\n\tpublic get lift(): Vector3 {\r\n\t\treturn this._lift;\r\n\t}\r\n\r\n\tpublic set lift(value: Vector3) {\r\n\t\tif (this.lift.equal(value))\r\n\t\t\treturn;\r\n\t\tthis._needBuildLUT = true;\r\n\t\tvalue.cloneTo(this._lift);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * gamma 999-0.5\r\n\t */\r\n\tpublic get gamma(): Vector3 {\r\n\t\treturn this._gamma;\r\n\t}\r\n\r\n\tpublic set gamma(value: Vector3) {\r\n\t\tif (this._gamma.equal(value))\r\n\t\t\treturn;\r\n\t\tthis._needBuildLUT = true;\r\n\t\tvalue.cloneTo(this._gamma);\r\n\t}\r\n\r\n\t/**\r\n\t * gain 0-2\r\n\t */\r\n\tpublic get gain(): Vector3 {\r\n\t\treturn this._gain;\r\n\t}\r\n\r\n\tpublic set gain(value: Vector3) {\r\n\t\tif (this._gain.equal(value))\r\n\t\t\treturn;\r\n\t\tthis._needBuildLUT = true;\r\n\t\tvalue.cloneTo(this._gain);\r\n\t}\r\n\r\n\tprivate _StandardIlluminantY(x: number) {\r\n\t\treturn 2.87 * x - 3 * x * x - 0.27509507;\r\n\t};\r\n\r\n\tprivate _CIExyToLMS(x: number, y: number) {\r\n\t\tlet Y = 1;\r\n\t\tlet X = Y * x / y;\r\n\t\tlet Z = Y * (1 - x - y) / y;\r\n\r\n\t\tlet L = 0.7328 * X + 0.4296 * Y - 0.1624 * Z;\r\n\t\tlet M = -0.7036 * X + 1.6975 * Y + 0.0061 * Z;\r\n\t\tlet S = 0.0030 * X + 0.0136 * Y + 0.9834 * Z;\r\n\r\n\t\treturn new Vector3(L, M, S);\r\n\t}\r\n\r\n\t// Converts white balancing parameter to LMS coefficients.\r\n\tprivate _ColorBalanceToLMSCoeffs(temperature: number, tint: number) {\r\n\r\n\t\t// Range ~[-1.5;1.5] works best\r\n\t\tlet t1 = temperature / 65.0;\r\n\t\tlet t2 = tint / 65.0;\r\n\r\n\t\t// Get the CIE xy chromaticity of the reference white point.\r\n\t\t// Note: 0.31271 = x value on the D65 white point\r\n\t\tlet x = 0.31271 - t1 * (t1 < 0 ? 0.1 : 0.05);\r\n\t\tlet y = this._StandardIlluminantY(x) + t2 * 0.05;\r\n\r\n\t\t// Calculate the coefficients in the LMS space.\r\n\t\tlet w1 = new Vector3(0.949237, 1.03542, 1.08728);\r\n\t\tlet w2 = this._CIExyToLMS(x, y);\r\n\r\n\t\tthis._balance.set(w1.x / w2.x, w1.y / w2.y, w1.z / w2.z);\r\n\t}\r\n\r\n\t//balance\r\n\tpublic get enableBalance() {\r\n\t\treturn this._enableBalance;\r\n\t}\r\n\r\n\tpublic set enableBalance(value: boolean) {\r\n\t\tthis._needBuildLUT = true;\r\n\t\tthis._enableBalance = value;\r\n\t}\r\n\r\n\t/**\r\n\t * tint -100 - 100\r\n\t */\r\n\tpublic get tint(): number {\r\n\t\treturn this._tint;\r\n\t}\r\n\r\n\r\n\tpublic set tint(value: number) {\r\n\t\tthis._needBuildLUT = true;\r\n\t\tthis._tint = value;\r\n\t\tthis._ColorBalanceToLMSCoeffs(this._temperature, this._tint);\r\n\t}\r\n\r\n\t/**\r\n\t * temperature -100-100\r\n\t */\r\n\tpublic get temperature(): number {\r\n\t\treturn this._temperature;\r\n\t}\r\n\r\n\tpublic set temperature(value: number) {\r\n\t\tthis._needBuildLUT = true;\r\n\t\tthis._temperature = value;\r\n\t\tthis._ColorBalanceToLMSCoeffs(this._temperature, this._tint);\r\n\t}\r\n\r\n\t//Color Adjustments\r\n\tpublic get enableColorAdjust() {\r\n\t\treturn this._enableColorAdjust;\r\n\t}\r\n\r\n\tpublic set enableColorAdjust(value: boolean) {\r\n\t\tthis._needBuildLUT = true;\r\n\t\tthis._enableColorAdjust = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 曝光\r\n\t */\r\n\tpublic get postExposure() {\r\n\t\treturn this._postExposure;\r\n\t}\r\n\r\n\tpublic set postExposure(value) {\r\n\t\tthis._postExposure = value;\r\n\t}\r\n\r\n\t/**\r\n\t * contrast颜色对比度range 0-2\r\n\t */\r\n\tpublic get contrast() {\r\n\t\treturn this._contrast;\r\n\t}\r\n\r\n\tpublic set contrast(value) {\r\n\t\tthis._needBuildLUT = true;\r\n\t\tthis._contrast = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 正片叠底\r\n\t */\r\n\tpublic get colorFilter() {\r\n\t\treturn this._colorFilter;\r\n\t}\r\n\r\n\tpublic set colorFilter(value:Color) {\r\n\t\tthis._needBuildLUT = true;\r\n\t\tvalue.cloneTo(this._colorFilter);\r\n\t}\r\n\r\n\t/**色相 -0.5-0.5*/\r\n\tpublic get HueShift() {\r\n\t\treturn this._HueShift;\r\n\t}\r\n\tpublic set HueShift(value) {\r\n\t\tthis._needBuildLUT = true;\r\n\t\tthis._HueShift = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 饱和度\r\n\t */\r\n\tpublic get saturation() {\r\n\t\treturn this._saturation;\r\n\t}\r\n\tpublic set saturation(value) {\r\n\t\tthis._needBuildLUT = true;\r\n\t\tthis._saturation = value;\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * 创建一个 <code>BloomEffect</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.singleton = true;\r\n\t\tthis.active = true;\r\n\t\tthis._needBuildLUT = true;\r\n\t\tthis._toneMapping = ToneMappingType.None;\r\n\t\tthis._blitlutParams = new Vector4();\r\n\t\tthis._lutShaderData = LayaGL.renderOBJCreate.createShaderData(null);\r\n\t\tthis.lutSize = 32;\r\n\t\tthis._lutCommond = new CommandBuffer();\r\n\t\tthis._lutBuilderMat = new Material();\r\n\t}\r\n\r\n\r\n\r\n\tprivate get lutSize() {\r\n\t\treturn this._lutSize;\r\n\t}\r\n\tprivate set lutSize(value) {\r\n\t\tif (value > 32)//64*6 = 4096\r\n\t\t\treturn\r\n\t\tthis._lutSize = value;\r\n\t\tif (this._lutTex)\r\n\t\t\tthis._lutTex.destroy();\r\n\t\tthis._lutTex = new RenderTexture(this._lutSize * this._lutSize, this._lutSize, RenderTargetFormat.R16G16B16A16, null, false, 1, false, false);\r\n\t\tthis._lutTex.anisoLevel = 1;\r\n\t\tthis._lutTex.wrapModeU = WrapMode.Clamp;\r\n\t\tthis._lutTex.wrapModeV = WrapMode.Clamp;\r\n\t\tthis._lutTex.filterMode = FilterMode.Bilinear;\r\n\t}\r\n\r\n\r\n\r\n\tprivate default_balance = new Vector3(1,1,1);\r\n\tprivate default_splitShadow = new Vector4(0.5,0.5,0.5,0.0);\r\n\tprivate default_splithighlights = new Vector3(0.5,0.5,0.5);\r\n\tprivate default_shadow = new Vector3(1,1,1);\r\n\tprivate default_midtones = new Vector3(1,1,1);\r\n\tprivate default_highlight = new Vector3(1,1,1);\r\n\tprivate default_limint = new Vector4(0.0,0.3,0.55,1.0);\r\n\tprivate default_lift = new Vector3(0,0,0);\r\n\tprivate default_gamma = new Vector3(1,1,1);\r\n\tprivate default_gain = new Vector3(1,1,1);\r\n\tprivate default_ColorFilter = new Color(1,1,1,1);\r\n\tprivate default_HueSatCon = new Vector4(0,1,1,0);\r\n\t/**\r\n\t * @internal\r\n\t * 生成LUT纹理\r\n\t */\r\n\t_buildLUT() {\r\n\t\tif (!this._needBuildLUT)\r\n\t\t\treturn;\r\n\t\tlet lutHeight = this.lutSize;\r\n\t\tlet lutWidth = this.lutSize * this.lutSize;\r\n\t\tlet lutParams = new Vector4(lutHeight, 0.5 / lutWidth, 0.5 / lutHeight, lutHeight / (lutHeight - 1));\r\n\t\tthis._lutBuilderMat.setVector4(\"u_LutParams\", lutParams);\r\n\t\t\r\n\t\tif(this.enableBalance){\r\n\t\t\tthis._ColorBalanceToLMSCoeffs(this.temperature,this.tint);\r\n\t\t\tthis._lutBuilderMat.setVector3(\"u_ColorBalance\", this._balance);\r\n\t\t}else{\r\n\t\t\tthis._lutBuilderMat.setVector3(\"u_ColorBalance\", this.default_balance);\r\n\t\t}\r\n\r\n\t\tif(this.enableSplitTone){\r\n\t\t\tthis._u_SplitShadow.setValue(this._splitShadow.x,this._splitShadow.y,this._splitShadow.z,this.splitBalance);\r\n\t\t\tthis._lutBuilderMat.setVector4(\"u_SplitShadows\", this._u_SplitShadow);\r\n\t\t\tthis._lutBuilderMat.setVector3(\"u_Splithighlights\", this._splithighlights);\r\n\t\t}else{\r\n\t\t\tthis._lutBuilderMat.setVector4(\"u_SplitShadows\", this.default_splitShadow);\r\n\t\t\tthis._lutBuilderMat.setVector3(\"u_Splithighlights\", this.default_splithighlights);\r\n\t\t}\r\n\r\n\t\tif(this.enableSMH){\r\n\t\t\tthis._lutBuilderMat.setVector3(\"u_Shadows\", this._shadows);\r\n\t\t\tthis._lutBuilderMat.setVector3(\"u_Midtones\", this._midtones);\r\n\t\t\tthis._lutBuilderMat.setVector3(\"u_Highlights\", this._highlights);\r\n\t\t\tthis._lutBuilderMat.setVector4(\"u_Limits\", this._limits);\r\n\t\t}else{\r\n\t\t\tthis._lutBuilderMat.setVector3(\"u_Shadows\", this.default_shadow);\r\n\t\t\tthis._lutBuilderMat.setVector3(\"u_Midtones\", this.default_midtones);\r\n\t\t\tthis._lutBuilderMat.setVector3(\"u_Highlights\", this.default_highlight);\r\n\t\t\tthis._lutBuilderMat.setVector4(\"u_Limits\", this.default_limint);\r\n\t\t}\r\n\t\tif(this._enableLiftGammaGain){\r\n\t\t\tthis._lutBuilderMat.setVector3(\"u_Lift\", this._lift);\r\n\t\t\tthis._lutBuilderMat.setVector3(\"u_Gamma\", this._gamma);\r\n\t\t\tthis._lutBuilderMat.setVector3(\"u_Gain\", this._gain);\r\n\t\t}else{\r\n\t\t\tthis._lutBuilderMat.setVector3(\"u_Lift\", this.default_lift);\r\n\t\t\tthis._lutBuilderMat.setVector3(\"u_Gamma\", this.default_gamma);\r\n\t\t\tthis._lutBuilderMat.setVector3(\"u_Gain\", this.default_gain);\r\n\t\t}\r\n\t\tif(this.enableColorAdjust){\r\n\t\t\t//_HueShift,_saturation,_contrast\r\n\t\t\tthis._HueSatCon.setValue(this._HueShift,this.saturation,this._contrast,0.0);\r\n\t\t\tthis._lutBuilderMat.setColor(\"u_ColorFilter\",this._colorFilter);\r\n\t\t\tthis._lutBuilderMat.setVector4(\"u_HueSatCon\",this._HueSatCon);\r\n\t\t}else{\r\n\t\t\tthis._lutBuilderMat.setColor(\"u_ColorFilter\",this.default_ColorFilter);\r\n\t\t\tthis._lutBuilderMat.setVector4(\"u_HueSatCon\",this.default_HueSatCon);\r\n\t\t}\r\n\r\n\t\t\r\n\t\t\r\n\t\tif (this._toneMapping == ToneMappingType.ACES) {\r\n\t\t\tthis._lutBuilderMat.addDefine(ColorGradEffect.SHADERDEFINE_ACES);\r\n\t\t} else {\r\n\t\t\tthis._lutBuilderMat.removeDefine(ColorGradEffect.SHADERDEFINE_ACES);\r\n\t\t}\r\n\t\tthis._lutCommond.blitScreenQuadByMaterial(Texture2D.whiteTexture, this._lutTex, null, this._lutBuilderMat);\r\n\t\tthis._lutCommond.context = RenderContext3D._instance;\r\n\t\tthis._lutCommond._apply();\r\n\t\tthis._lutCommond.clear();\r\n\t}\r\n\r\n\t/**\r\n\t * 添加到后期处理栈时,会调用\r\n\t */\r\n\teffectInit(postprocess:PostProcess) {\r\n\t\tsuper.effectInit(postprocess);\r\n\t\tthis._lutBuilderMat.setShaderName(\"LUTBuilder\");\r\n\t\tthis._LUTShader = Shader3D.find(\"blitLUTShader\");\r\n\t\tpostprocess._enableColorGrad = true;\r\n\t\tpostprocess._ColorGradEffect = this;\r\n\t\t// this._shader = Shader3D.find(\"PostProcessBloom\");\r\n\t\t// this._pyramid = new Array(BloomEffect.MAXPYRAMIDSIZE * 2);\r\n\t}\r\n\r\n\t/**\r\n\t * 释放Effect\r\n\t */\r\n\trelease(postprocess:PostProcess) {\r\n\t\tsuper.release(postprocess);\r\n\t\tpostprocess._enableColorGrad = false;\r\n\t\tpostprocess._ColorGradEffect = null;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\trender(context: PostProcessRenderContext): void {\r\n\t\tlet cmd: CommandBuffer = context.command;\r\n\t\tlet source: RenderTexture = context.indirectTarget;\r\n\t\tif (true) {\r\n\t\t\tthis._blitlutParams.setValue(1 / this._lutTex.width, 1 / this._lutTex.height, this._lutTex.height - 1,this.enableColorAdjust?this._postExposure:1);\r\n\t\t\tthis._lutBuilderMat.removeDefine(ColorGradEffect.SHADERDEFINE_CUSTOMLUT);\r\n\t\t\tthis._lutShaderData.setTexture(ColorGradEffect.SHADERVALUE_LUT, this._lutTex);\r\n\t\t\tthis._lutShaderData.setVector(ColorGradEffect.SHADERVALUE_LUTPARAMS, this._blitlutParams);\r\n\t\t}\r\n\t\telse {\r\n\t\t\t//TODO:CustomLUT\r\n\t\t\tthis._lutBuilderMat.addDefine(ColorGradEffect.SHADERDEFINE_CUSTOMLUT);\r\n\r\n\t\t}\r\n\t\tcmd.blitScreenTriangle(source, context.destination, null, this._LUTShader, this._lutShaderData);\r\n\t}\r\n\r\n}\r\n\r\n\r\n\r\n\r\n","#define SHADER_NAME BlitLUTFS\r\n\r\n#include \"Color.glsl\";\r\n\r\n#include \"ColorGrading.glsl\";\r\n#include \"LUT.glsl\";\r\n\r\nuniform sampler2D u_Lut;\r\nuniform vec4 u_LutParams; // w postExposure\r\n\r\n#ifdef CUSTOMLUT\r\nuniform sampler2D u_CustomLut;\r\nuniform vec4 u_CustomLutParams;\r\n#endif // CUSTOMLUT\r\n\r\nvarying vec2 v_Texcoord0;\r\n\r\nvoid main()\r\n{\r\n    gl_FragColor = texture2D(u_MainTex, v_Texcoord0);\r\n#ifdef Gamma_u_MainTex\r\n    gl_FragColor = gammaToLinear(gl_FragColor);\r\n#endif // Gamma_u_MainTex\r\n\r\n    vec3 color = gl_FragColor.rgb;\r\n    // gl_FragColor.rgb = applyLut(color, 1.0, u_Lut, u_LutParams);\r\n    color *= u_LutParams.w;\r\n    color = applyLut(u_Lut, linearToLogC(color), u_LutParams.xyz);\r\n\r\n#ifdef CUSTOMLUT\r\n\r\n    float contrib = u_CustomLutParams.w;\r\n    vec3 gamma = linearToGamma(color);\r\n    vec3 userLut = applyLut(u_CustomLut, gamma, u_CustomLutParams);\r\n    gamma = mix(gamma, userLut, contrib);\r\n    color = gammaToLinear(gamma);\r\n\r\n#endif // CUSTOMLUT\r\n\r\n    gl_FragColor.rgb = color;\r\n\r\n    gl_FragColor = outputTransform(gl_FragColor);\r\n}\r\n","import { ILaya } from \"../../../ILaya\"\r\nimport { Texture2D } from \"../../resource/Texture2D\"\r\nimport { Camera } from \"../core/Camera\"\r\nimport { CommandBuffer } from \"../core/render/command/CommandBuffer\"\r\nimport { PostProcessEffect } from \"../core/render/PostProcessEffect\"\r\nimport { PostProcessRenderContext } from \"../core/render/PostProcessRenderContext\"\r\nimport { Viewport } from \"../math/Viewport\"\r\nimport { RenderContext3D } from \"../core/render/RenderContext3D\"\r\nimport { ShaderDefine } from \"../../RenderEngine/RenderShader/ShaderDefine\"\r\nimport { Shader3D } from \"../../RenderEngine/RenderShader/Shader3D\"\r\nimport { ShaderData } from \"../../RenderEngine/RenderShader/ShaderData\"\r\nimport { LayaGL } from \"../../layagl/LayaGL\"\r\nimport { RenderTargetFormat } from \"../../RenderEngine/RenderEnum/RenderTargetFormat\"\r\nimport { DepthTextureMode } from \"../depthMap/DepthPass\"\r\nimport { RenderTexture } from \"../../resource/RenderTexture\"\r\nimport { ColorGradEffect } from \"../core/render/PostEffect/ColorGradEffect\"\r\n\r\n/**\r\n * <code>PostProcess</code> 类用于创建后期处理组件。\r\n */\r\nexport class PostProcess {\r\n\r\n    /**@internal */\r\n    static SHADERDEFINE_BLOOM_LOW: ShaderDefine;\r\n\r\n    /**@internal */\r\n    static SHADERDEFINE_BLOOM: ShaderDefine;\r\n\r\n    /**@internal */\r\n    static SHADERDEFINE_FINALPASS: ShaderDefine;\r\n\r\n    /**@internal */\r\n    static SHADERVALUE_MAINTEX: number;\r\n\r\n    /**@internal */\r\n    static SHADERVALUE_BLOOMTEX: number;\r\n\r\n    /**@internal */\r\n    static SHADERVALUE_AUTOEXPOSURETEX: number;\r\n\r\n    /**@internal */\r\n    static SHADERVALUE_BLOOM_DIRTTEX: number;\r\n\r\n    /**@internal */\r\n    static SHADERVALUE_BLOOMTEX_TEXELSIZE: number;\r\n\r\n    /**@internal */\r\n    static SHADERVALUE_BLOOM_DIRTTILEOFFSET: number;\r\n\r\n    /**@internal */\r\n    static SHADERVALUE_BLOOM_SETTINGS: number;\r\n\r\n    /**@internal */\r\n    static SHADERVALUE_BLOOM_COLOR: number;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    static __init__(): void {\r\n        PostProcess.SHADERDEFINE_BLOOM_LOW = Shader3D.getDefineByName(\"BLOOM_LOW\");\r\n        PostProcess.SHADERDEFINE_BLOOM = Shader3D.getDefineByName(\"BLOOM\");\r\n        PostProcess.SHADERDEFINE_FINALPASS = Shader3D.getDefineByName(\"FINALPASS\");\r\n        PostProcess.SHADERVALUE_MAINTEX = Shader3D.propertyNameToID(\"u_MainTex\");\r\n        PostProcess.SHADERVALUE_BLOOMTEX = Shader3D.propertyNameToID(\"u_BloomTex\");\r\n        PostProcess.SHADERVALUE_AUTOEXPOSURETEX = Shader3D.propertyNameToID(\"u_AutoExposureTex\");\r\n        PostProcess.SHADERVALUE_BLOOM_DIRTTEX = Shader3D.propertyNameToID(\"u_Bloom_DirtTex\");\r\n        PostProcess.SHADERVALUE_BLOOMTEX_TEXELSIZE = Shader3D.propertyNameToID(\"u_BloomTex_TexelSize\");\r\n        PostProcess.SHADERVALUE_BLOOM_DIRTTILEOFFSET = Shader3D.propertyNameToID(\"u_Bloom_DirtTileOffset\");\r\n        PostProcess.SHADERVALUE_BLOOM_SETTINGS = Shader3D.propertyNameToID(\"u_Bloom_Settings\");\r\n        PostProcess.SHADERVALUE_BLOOM_COLOR = Shader3D.propertyNameToID(\"u_Bloom_Color\");\r\n    }\r\n\r\n    /**@internal */\r\n    private _compositeShader: Shader3D = Shader3D.find(\"PostProcessComposite\");\r\n\r\n    /**@internal */\r\n    private _compositeShaderData: ShaderData = LayaGL.renderOBJCreate.createShaderData(null);\r\n\r\n    /**@internal */\r\n    private _effects: PostProcessEffect[] = [];\r\n\r\n    /**@internal */\r\n    private _enable: boolean = true;\r\n\r\n    /**@internal */\r\n    private _depthtextureFlag: DepthTextureMode;\r\n    /**@internal 调色Effect*/\r\n    _ColorGradEffect: ColorGradEffect;\r\n    /**@internal 是否开启调色Effect*/\r\n    _enableColorGrad: boolean = false;\r\n\r\n    /**@internal */\r\n    _context: PostProcessRenderContext | null = null;\r\n\r\n    /**\r\n     * 重新计算CameraFlag\r\n     */\r\n    private recaculateCameraFlag() {\r\n        this._depthtextureFlag = DepthTextureMode.None;\r\n        let n = this.effects.length;\r\n        for (let i = 0; i < n; i++) {\r\n            this._depthtextureFlag |= this.effects[i].getCameraDepthTextureModeFlag();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 创建一个 <code>PostProcess</code> 实例。\r\n     */\r\n    constructor() {\r\n        this._context = new PostProcessRenderContext();\r\n        this._context.compositeShaderData = this._compositeShaderData;\r\n        this._context.command = new CommandBuffer();\r\n        this._depthtextureFlag = 0;\r\n    }\r\n\r\n    /**\r\n     * 开启属性\r\n     */\r\n    get enable(): boolean {\r\n        return this._enable;\r\n    }\r\n\r\n    set enable(value: boolean) {\r\n        this._enable = value;\r\n    }\r\n\r\n    /**\r\n     * 设置渲染状态\r\n     * @internal\r\n     */\r\n    set commandContext(oriContext: RenderContext3D) {\r\n        this._context.command._context = oriContext;\r\n    }\r\n\r\n    /**\r\n     * IDEmain\r\n     * 设置后期Effect数组\r\n     */\r\n    set effects(value: PostProcessEffect[]) {\r\n        this.clearEffect();\r\n        for (var i = 0, n = value.length; i < n; i++) {\r\n            if (value[i])\r\n                this.addEffect(value[i]);\r\n        }\r\n    }\r\n\r\n    get effects(): PostProcessEffect[] {\r\n        return this._effects;\r\n    }\r\n\r\n    /**\r\n     * 根据后期处理的需要,设置值\r\n     */\r\n    get cameraDepthTextureMode() {\r\n        return this._depthtextureFlag;\r\n    }\r\n\r\n    /**\r\n     *@internal\r\n     */\r\n    _init(camera: Camera): void {\r\n        this._context!.camera = camera;\r\n        this._context!.command!._camera = camera;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _render(camera: Camera): void {\r\n        this._init(camera);\r\n        var camera = this._context!.camera;\r\n        var viewport: Viewport = camera!.viewport;\r\n        var cameraTarget: RenderTexture = camera!._internalRenderTexture;\r\n        var screenTexture: RenderTexture = RenderTexture.createFromPool(cameraTarget.width, cameraTarget.height, camera._getRenderTextureFormat(), RenderTargetFormat.None, false, 1, false, true);\r\n        var Indirect: RenderTexture[] = [RenderTexture.createFromPool(cameraTarget.width, cameraTarget.height, camera._getRenderTextureFormat(), RenderTargetFormat.None, false, 1, false, true), RenderTexture.createFromPool(cameraTarget.width, cameraTarget.height, camera._getRenderTextureFormat(), RenderTargetFormat.None, false, 1, false, true)];\r\n        //var screenTexture: RenderTexture = cameraTarget;\r\n        this._context!.command!.clear();\r\n        this._context!.source = screenTexture;\r\n        this._context!.indirectTarget = screenTexture;\r\n        this._context!.destination = this._effects.length == 2 ? Indirect[0] : cameraTarget;\r\n        this._context!.compositeShaderData!.clearDefine();\r\n\r\n        this._context.command.blitScreenTriangle(cameraTarget, screenTexture);\r\n\r\n        this._context!.compositeShaderData!.setTexture(PostProcess.SHADERVALUE_AUTOEXPOSURETEX, Texture2D.whiteTexture);//TODO:\r\n        if (this._enableColorGrad) {\r\n            this._ColorGradEffect._buildLUT();\r\n        }\r\n        for (var i: number = 0, n: number = this._effects.length; i < n; i++) {\r\n            if (this._effects[i].active) {\r\n                this._effects[i].render(this._context!);\r\n                if (i == n - 2) {//last effect:destination RenderTexture is CameraTarget\r\n                    this._context.indirectTarget = this._context.destination;\r\n                    this._context.destination = cameraTarget;\r\n                } else {\r\n                    this._context.indirectTarget = this._context.destination;\r\n                    this._context.destination = Indirect[(i + 1) % 2];\r\n                }\r\n            } else if (i == n - 1) {//兼容最后一个Effect Active为false\r\n                this._context.command.blitScreenTriangle(this._context.indirectTarget, cameraTarget);\r\n            }\r\n        }\r\n\r\n        this._compositeShaderData.addDefine(PostProcess.SHADERDEFINE_FINALPASS);\r\n\r\n        var offScreenTex: RenderTexture = camera!._offScreenRenderTexture;\r\n        var dest = offScreenTex ? offScreenTex : null;//TODO:如果不画到RenderTarget上,最后一次为null直接画到屏幕上\r\n        this._context!.destination = dest;\r\n        var canvasWidth: number = camera!._getCanvasWidth(), canvasHeight: number = camera!._getCanvasHeight();\r\n        if (dest) {\r\n            camera!._screenOffsetScale.setValue(viewport.x / canvasWidth, (canvasHeight - viewport.y - viewport.height) / canvasHeight, viewport.width / canvasWidth, viewport.height / canvasHeight);\r\n            this._context!.command!.blitScreenTriangle(cameraTarget, dest, camera!._screenOffsetScale, null, this._compositeShaderData, 0);\r\n        }\r\n\r\n        //释放临时纹理\r\n        RenderTexture.recoverToPool(screenTexture);\r\n        RenderTexture.recoverToPool(Indirect[0]);\r\n        RenderTexture.recoverToPool(Indirect[1]);\r\n        var tempRenderTextures: RenderTexture[] = this._context!.deferredReleaseTextures;\r\n        for (i = 0, n = tempRenderTextures.length; i < n; i++)\r\n            RenderTexture.recoverToPool(tempRenderTextures[i]);\r\n        tempRenderTextures.length = 0;\r\n    }\r\n\r\n    /**\r\n     * 添加后期处理效果。\r\n     */\r\n    addEffect(effect: PostProcessEffect): void {\r\n        if (effect.singleton && this.getEffect((effect as any).constructor)) {\r\n            console.error(\"无法增加已经存在的Effect\");\r\n            return;\r\n        }\r\n        if (!this._enableColorGrad || effect instanceof ColorGradEffect) {\r\n            this._effects.push(effect);\r\n        } else {\r\n            this._effects.splice(this._effects.length - 1, 0, effect);\r\n        }\r\n\r\n        this.recaculateCameraFlag();\r\n        effect.effectInit(this);\r\n    }\r\n\r\n    /**\r\n     * 根据类型获得后期处理实例\r\n     * @param classReg \r\n     * @returns \r\n     */\r\n    getEffect(classReg: any): any {\r\n        let size: number = this._effects.length;\r\n        for (let i = 0; i < size; i++) {\r\n            let element = this._effects[i];\r\n            if (element instanceof classReg) {\r\n                return element;\r\n            }\r\n        }\r\n        return null\r\n    }\r\n\r\n    /**\r\n     * 移除后期处理效果。\r\n     */\r\n    removeEffect(effect: PostProcessEffect): void {\r\n        var index: number = this._effects.indexOf(effect);\r\n        if (index !== -1) {\r\n            this._effects.splice(index, 1);\r\n            effect.release(this);\r\n            this.recaculateCameraFlag();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 清理所有后期处理\r\n     */\r\n    clearEffect(): void {\r\n        let i = this.effects.length - 1;\r\n        for (; i >= 0; i--) {\r\n            this.removeEffect(this.effects[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 调用指令集\r\n     * @internal\r\n     */\r\n    _applyPostProcessCommandBuffers(): void {\r\n        this._context!.command!._apply();\r\n    }\r\n}\r\n\r\n\r\n","#define SHADER_NAME BloomVS\r\n\r\nvarying vec2 v_Texcoord0;\r\nvec4 remapPositionZ(vec4 position)\r\n{\r\n    position.z = position.z * 2.0 - position.w;\r\n    return position;\r\n}\r\nvoid main()\r\n{\r\n    gl_Position = vec4(a_PositionTexcoord.xy, 0.0, 1.0);\r\n    v_Texcoord0 = a_PositionTexcoord.zw;\r\n    gl_Position = remapPositionZ(gl_Position);\r\n}","\r\nimport BloomVS from \"../../../shader/files/postProcess/Bloom/Bloom.vs\";\r\nimport BloomDownsample13PS from \"../../../shader/files/postProcess/Bloom/BloomDownsample13.fs\";\r\nimport BloomDownsample4PS from \"../../../shader/files/postProcess/Bloom/BloomDownsample4.fs\";\r\nimport BloomPrefilter13PS from \"../../../shader/files/postProcess/Bloom/BloomPrefilter13.fs\";\r\nimport BloomPrefilter4PS from \"../../../shader/files/postProcess/Bloom/BloomPrefilter4.fs\";\r\nimport BloomUpsampleBoxPS from \"../../../shader/files/postProcess/Bloom/BloomUpsampleBox.fs\";\r\nimport BloomUpsampleTentPS from \"../../../shader/files/postProcess/Bloom/BloomUpsampleTent.fs\";\r\nimport CompositePS from \"../../../shader/files/postProcess/Bloom/Composite.fs\";\r\nimport CompositeVS from \"../../../shader/files/postProcess/Bloom/Composite.vs\";\r\nimport SamplingGLSL from \"../../../shader/files/postProcess/Sampling.glsl\";\r\nimport StdLibGLSL from \"../../../shader/files/postProcess/StdLib.glsl\";\r\nimport ColorsGLSL from \"../../../shader/files/postProcess/Colors.glsl\";\r\nimport { LayaGL } from \"../../../../layagl/LayaGL\";\r\nimport { FilterMode } from \"../../../../RenderEngine/RenderEnum/FilterMode\";\r\nimport { RenderTargetFormat } from \"../../../../RenderEngine/RenderEnum/RenderTargetFormat\";\r\nimport { Shader3D } from \"../../../../RenderEngine/RenderShader/Shader3D\";\r\nimport { ShaderDataType, ShaderData } from \"../../../../RenderEngine/RenderShader/ShaderData\";\r\nimport { Texture2D } from \"../../../../resource/Texture2D\";\r\nimport { PostProcess } from \"../../../component/PostProcess\";\r\nimport { Viewport } from \"../../../math/Viewport\";\r\nimport { CommandBuffer } from \"../command/CommandBuffer\";\r\nimport { PostProcessEffect } from \"../PostProcessEffect\";\r\nimport { PostProcessRenderContext } from \"../PostProcessRenderContext\";\r\nimport { BaseTexture } from \"../../../../resource/BaseTexture\";\r\nimport { Color } from \"../../../../maths/Color\";\r\nimport { Vector4 } from \"../../../../maths/Vector4\";\r\nimport { RenderTexture } from \"../../../../resource/RenderTexture\";\r\nimport { RenderState } from \"../../../../RenderEngine/RenderShader/RenderState\";\r\nimport { SubShader } from \"../../../../RenderEngine/RenderShader/SubShader\";\r\nimport { VertexMesh } from \"../../../../RenderEngine/RenderShader/VertexMesh\";\r\n\r\n/**\r\n * <code>BloomEffect</code> 类用于创建泛光效果。\r\n */\r\nexport class BloomEffect extends PostProcessEffect {\r\n\t/** @internal */\r\n\tstatic SHADERVALUE_MAINTEX: number;\r\n\t/**@internal */\r\n\tstatic SHADERVALUE_AUTOEXPOSURETEX: number;\r\n\t/**@internal */\r\n\tstatic SHADERVALUE_SAMPLESCALE: number;\r\n\t/**@internal */\r\n\tstatic SHADERVALUE_THRESHOLD: number;\r\n\t/**@internal */\r\n\tstatic SHADERVALUE_PARAMS: number;\r\n\t/**@internal */\r\n\tstatic SHADERVALUE_BLOOMTEX: number;\r\n\r\n\t/**@internal */\r\n\tstatic SUBSHADER_PREFILTER13: number = 0;\r\n\t/**@internal */\r\n\tstatic SUBSHADER_PREFILTER4: number = 1;\r\n\t/**@internal */\r\n\tstatic SUBSHADER_DOWNSAMPLE13: number = 2;\r\n\t/**@internal */\r\n\tstatic SUBSHADER_DOWNSAMPLE4: number = 3;\r\n\t/**@internal */\r\n\tstatic SUBSHADER_UPSAMPLETENT: number = 4;\r\n\t/**@internal */\r\n\tstatic SUBSHADER_UPSAMPLEBOX: number = 5;\r\n\r\n\t/**@internal */\r\n\tprivate static MAXPYRAMIDSIZE: number = 16; // Just to make sure we handle 64k screens... Future-proof!\r\n\r\n\t/**\r\n\t * bloom resource init\r\n\t */\r\n\tstatic init() {\r\n\t\tShader3D.addInclude(\"StdLib.glsl\", StdLibGLSL);\r\n\t\tShader3D.addInclude(\"Colors.glsl\", ColorsGLSL);\r\n\t\tShader3D.addInclude(\"Sampling.glsl\", SamplingGLSL);\r\n\t\tvar attributeMap: any = {\r\n\t\t\t'a_PositionTexcoord': [VertexMesh.MESH_POSITION0, ShaderDataType.Vector4]\r\n\t\t};\r\n\r\n\t\tvar uniformMap: any = {\r\n\t\t\t\"u_MainTex\": ShaderDataType.Texture2D,\r\n\t\t\t\"u_MainTex_TexelSize\": ShaderDataType.Vector4,\r\n\t\t\t\"u_AutoExposureTex\": ShaderDataType.Texture2D,\r\n\t\t\t\"u_Threshold\": ShaderDataType.Vector4,\r\n\t\t\t\"u_Params\": ShaderDataType.Vector4,\r\n\t\t\t\"u_BloomTex\": ShaderDataType.Texture2D,\r\n\t\t\t\"u_SampleScale\": ShaderDataType.Float,\r\n\t\t};\r\n\t\tvar shader = Shader3D.add(\"PostProcessBloom\");\r\n\t\t//subShader0\r\n\t\tvar subShader = new SubShader(attributeMap, uniformMap);\r\n\t\tshader.addSubShader(subShader);\r\n\t\tvar shaderPass = subShader.addShaderPass(BloomVS, BloomPrefilter13PS);\r\n\t\tvar renderState: RenderState = shaderPass.renderState;\r\n\t\trenderState = shaderPass.renderState;\r\n\t\trenderState.depthTest = RenderState.DEPTHTEST_ALWAYS;\r\n\t\trenderState.depthWrite = false;\r\n\t\trenderState.cull = RenderState.CULL_NONE;\r\n\t\trenderState.blend = RenderState.BLEND_DISABLE;\r\n\t\t//subShader1\r\n\t\tsubShader = new SubShader(attributeMap, uniformMap);\r\n\t\tshader.addSubShader(subShader);\r\n\t\tshaderPass = subShader.addShaderPass(BloomVS, BloomPrefilter4PS);\r\n\t\trenderState = shaderPass.renderState;\r\n\t\trenderState.depthTest = RenderState.DEPTHTEST_ALWAYS;\r\n\t\trenderState.depthWrite = false;\r\n\t\trenderState.cull = RenderState.CULL_NONE;\r\n\t\trenderState.blend = RenderState.BLEND_DISABLE;\r\n\t\t//subShader2\r\n\t\tsubShader = new SubShader(attributeMap, uniformMap);\r\n\t\tshader.addSubShader(subShader);\r\n\t\tshaderPass = subShader.addShaderPass(BloomVS, BloomDownsample13PS);\r\n\t\trenderState = shaderPass.renderState;\r\n\t\trenderState.depthTest = RenderState.DEPTHTEST_ALWAYS;\r\n\t\trenderState.depthWrite = false;\r\n\t\trenderState.cull = RenderState.CULL_NONE;\r\n\t\trenderState.blend = RenderState.BLEND_DISABLE;\r\n\t\t//subShader3\r\n\t\tsubShader = new SubShader(attributeMap, uniformMap);\r\n\t\tshader.addSubShader(subShader);\r\n\t\tshaderPass = subShader.addShaderPass(BloomVS, BloomDownsample4PS);\r\n\t\trenderState = shaderPass.renderState;\r\n\t\trenderState.depthTest = RenderState.DEPTHTEST_ALWAYS;\r\n\t\trenderState.depthWrite = false;\r\n\t\trenderState.cull = RenderState.CULL_NONE;\r\n\t\trenderState.blend = RenderState.BLEND_DISABLE;\r\n\t\t//subShader4\r\n\t\tsubShader = new SubShader(attributeMap, uniformMap);\r\n\t\tshader.addSubShader(subShader);\r\n\t\tshaderPass = subShader.addShaderPass(BloomVS, BloomUpsampleTentPS);\r\n\t\trenderState = shaderPass.renderState;\r\n\t\trenderState.depthTest = RenderState.DEPTHTEST_ALWAYS;\r\n\t\trenderState.depthWrite = false;\r\n\t\trenderState.cull = RenderState.CULL_NONE;\r\n\t\trenderState.blend = RenderState.BLEND_DISABLE;\r\n\t\t//subShader5\r\n\t\tsubShader = new SubShader(attributeMap, uniformMap);\r\n\t\tshader.addSubShader(subShader);\r\n\t\tshaderPass = subShader.addShaderPass(BloomVS, BloomUpsampleBoxPS);\r\n\t\trenderState = shaderPass.renderState;\r\n\t\trenderState.depthTest = RenderState.DEPTHTEST_ALWAYS;\r\n\t\trenderState.depthWrite = false;\r\n\t\trenderState.cull = RenderState.CULL_NONE;\r\n\t\trenderState.blend = RenderState.BLEND_DISABLE;\r\n\t\tBloomEffect.CompositeInit();\r\n\t\tBloomEffect.__initDefine__();\r\n\t}\r\n\r\n\tstatic CompositeInit() {\r\n\t\t//PostProcessComposite\r\n\t\tlet attributeMap: any = {\r\n\t\t\t'a_PositionTexcoord': [VertexMesh.MESH_POSITION0, ShaderDataType.Vector4],\r\n\t\t};\r\n\t\tlet uniformMap = {\r\n\t\t\t'u_MainTex': ShaderDataType.Texture2D,\r\n\t\t\t'u_BloomTex': ShaderDataType.Texture2D,\r\n\t\t\t'u_AutoExposureTex': ShaderDataType.Texture2D,\r\n\t\t\t'u_Bloom_DirtTex': ShaderDataType.Texture2D,\r\n\t\t\t'u_BloomTex_TexelSize': ShaderDataType.Vector4,\r\n\t\t\t'u_Bloom_DirtTileOffset': ShaderDataType.Vector4,\r\n\t\t\t'u_Bloom_Settings': ShaderDataType.Vector3,\r\n\t\t\t'u_Bloom_Color': ShaderDataType.Vector3,\r\n\t\t};\r\n\t\tlet shader = Shader3D.add(\"PostProcessComposite\");\r\n\r\n\t\tlet subShader = new SubShader(attributeMap, uniformMap);\r\n\t\tshader.addSubShader(subShader);\r\n\t\tlet shaderPass = subShader.addShaderPass(CompositeVS, CompositePS);\r\n\t\tlet renderState = shaderPass.renderState;\r\n\t\trenderState.depthTest = RenderState.DEPTHTEST_ALWAYS;\r\n\t\trenderState.depthWrite = false;\r\n\t\trenderState.cull = RenderState.CULL_NONE;\r\n\t\trenderState.blend = RenderState.BLEND_DISABLE;\r\n\t}\r\n\r\n\tstatic __initDefine__() {\r\n\t\tBloomEffect.SHADERVALUE_MAINTEX = Shader3D.propertyNameToID(\"u_MainTex\");\r\n\t\tBloomEffect.SHADERVALUE_AUTOEXPOSURETEX = Shader3D.propertyNameToID(\"u_AutoExposureTex\");\r\n\t\tBloomEffect.SHADERVALUE_SAMPLESCALE = Shader3D.propertyNameToID(\"u_SampleScale\");\r\n\t\tBloomEffect.SHADERVALUE_THRESHOLD = Shader3D.propertyNameToID(\"u_Threshold\");\r\n\t\tBloomEffect.SHADERVALUE_PARAMS = Shader3D.propertyNameToID(\"u_Params\");\r\n\t\tBloomEffect.SHADERVALUE_BLOOMTEX = Shader3D.propertyNameToID(\"u_BloomTex\");\r\n\t}\r\n\r\n\t/**@internal */\r\n\tprivate _shader: Shader3D = null;\r\n\t/**@internal */\r\n\tprivate _shaderData: ShaderData = LayaGL.renderOBJCreate.createShaderData(null);\r\n\t/**@internal */\r\n\tprivate _linearColor: Color = new Color();\r\n\t/**@internal */\r\n\tprivate _bloomTextureTexelSize: Vector4 = new Vector4();\r\n\r\n\t/**@internal */\r\n\tprivate _shaderThreshold: Vector4 = new Vector4();\r\n\t/**@internal */\r\n\tprivate _shaderParams: Vector4 = new Vector4();\r\n\t/**@internal */\r\n\tprivate _pyramid: any[] = null;\r\n\t/**@internal */\r\n\tprivate _intensity: number = 0.0;\r\n\t/**@internal */\r\n\tprivate _threshold: number = 1.0;\r\n\t/**@internal */\r\n\tprivate _softKnee: number = 0.5;\r\n\t/**@internal */\r\n\tprivate _diffusion: number = 7.0;\r\n\t/**@internal */\r\n\tprivate _anamorphicRatio: number = 0.0;\r\n\t/**@internal */\r\n\tprivate _dirtIntensity: number = 0.0;\r\n\t/**@internal */\r\n\tprivate _shaderSetting: Vector4 = new Vector4();\r\n\t/**@internal */\r\n\tprivate _dirtTileOffset: Vector4 = new Vector4();\r\n\r\n\t/**@internal*/\r\n\tprivate _clamp: number;\r\n\r\n\t/**泛光颜色。*/\r\n\tprivate _color: Color;\r\n\r\n\t/**是否开启快速模式。该模式通过降低质量来提升性能。*/\r\n\tprivate _fastMode: boolean = false;\r\n\r\n\t/**镜头污渍纹路,用于为泛光特效增加污渍灰尘效果*/\r\n\tprivate _dirtTexture: BaseTexture = null;\r\n\r\n\t/**\r\n\t * 泛光像素的数量,该值在伽马空间\r\n\t */\r\n\tget clamp(): number {\r\n\t\treturn this._clamp;\r\n\t}\r\n\r\n\tset clamp(value: number) {\r\n\t\tthis._clamp = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 泛光颜色。\r\n\t */\r\n\tget color(): Color {\r\n\t\treturn this._color;\r\n\t}\r\n\r\n\tset color(value: Color) {\r\n\t\tthis._color = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 快速模式\r\n\t */\r\n\tget fastMode(): boolean {\r\n\t\treturn this._fastMode;\r\n\t}\r\n\r\n\tset fastMode(value: boolean) {\r\n\t\tthis._fastMode = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 脏迹贴图\r\n\t */\r\n\tget dirtTexture() {\r\n\t\treturn this._dirtTexture;\r\n\t}\r\n\r\n\tset dirtTexture(value: BaseTexture) {\r\n\t\tthis._dirtTexture && this._dirtTexture._removeReference(1);\r\n\t\tthis._dirtTexture = value;\r\n\t\tthis._dirtTexture && this._dirtTexture._addReference(1);\r\n\t}\r\n\r\n\t/**\r\n\t * 获取泛光过滤器强度,最小值为0。\r\n\t * @return 强度。\r\n\t */\r\n\tget intensity(): number {\r\n\t\treturn this._intensity;\r\n\t}\r\n\r\n\t/**\r\n\t * 设置泛光过滤器强度,最小值为0。\r\n\t * @param value 强度。\r\n\t */\r\n\tset intensity(value: number) {\r\n\t\tthis._intensity = Math.max(value, 0.0);\r\n\t}\r\n\r\n\t/**\r\n\t * 设置泛光阈值,在该阈值亮度以下的像素会被过滤掉,该值在伽马空间。\r\n\t * @return 阈值。\r\n\t */\r\n\tget threshold(): number {\r\n\t\treturn this._threshold;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取泛光阈值,在该阈值亮度以下的像素会被过滤掉,该值在伽马空间。\r\n\t * @param value 阈值。\r\n\t */\r\n\tset threshold(value: number) {\r\n\t\tthis._threshold = Math.max(value, 0.0);\r\n\t}\r\n\r\n\t/**\r\n\t * 获取软膝盖过渡强度,在阈值以下进行渐变过渡(0为完全硬过度,1为完全软过度)。\r\n\t * @return 软膝盖值。\r\n\t */\r\n\tget softKnee(): number {\r\n\t\treturn this._softKnee;\r\n\t}\r\n\r\n\t/**\r\n\t * 设置软膝盖过渡强度,在阈值以下进行渐变过渡(0为完全硬过度,1为完全软过度)。\r\n\t * @param value 软膝盖值。\r\n\t */\r\n\tset softKnee(value: number) {\r\n\t\tthis._softKnee = Math.min(Math.max(value, 0.0), 1.0);\r\n\t}\r\n\r\n\t/**\r\n\t * 获取扩散值,改变泛光的扩散范围,最好使用整数值保证效果,该值会改变内部的迭代次数,范围是1到10。\r\n\t * @return 光晕的扩散范围。\r\n\t */\r\n\tget diffusion(): number {\r\n\t\treturn this._diffusion;\r\n\t}\r\n\r\n\t/**\r\n\t * 设置扩散值,改变泛光的扩散范围,最好使用整数值保证效果,该值会改变内部的迭代次数,范围是1到10。\r\n\t * @param value 光晕的扩散范围。\r\n\t */\r\n\tset diffusion(value: number) {\r\n\t\tthis._diffusion = Math.min(Math.max(value, 1), 10);\r\n\t}\r\n\r\n\t/**\r\n\t * 获取形变比,通过扭曲泛光产生视觉上形变,负值为垂直扭曲,正值为水平扭曲。-1 - 1\r\n\t * @return 形变比。\r\n\t */\r\n\tget anamorphicRatio(): number {\r\n\t\treturn this._anamorphicRatio;\r\n\t}\r\n\r\n\t/**\r\n\t * 设置形变比,通过扭曲泛光产生视觉上形变,负值为垂直扭曲,正值为水平扭曲。-1 - 1\r\n\t * @param value 形变比。\r\n\t */\r\n\tset anamorphicRatio(value: number) {\r\n\t\tthis._anamorphicRatio = Math.min(Math.max(value, -1.0), 1.0);\r\n\t}\r\n\r\n\t/**\r\n\t * 获取污渍强度。\r\n\t * @return 污渍强度。\r\n\t */\r\n\tget dirtIntensity(): number {\r\n\t\treturn this._dirtIntensity;\r\n\t}\r\n\r\n\t/**\r\n\t * 设置污渍强度。0-1\r\n\t * @param value 污渍强度。\r\n\t */\r\n\tset dirtIntensity(value: number) {\r\n\t\tthis._dirtIntensity = Math.max(value, 0.0);\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>BloomEffect</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.singleton = true;\r\n\t\tthis.active = true;\r\n\t\tthis.intensity = 1.0;\r\n\t\tthis.threshold = 1.0;\r\n\t\tthis.softKnee = 0.5;\r\n\t\tthis.clamp = 65472;\r\n\t\tthis.diffusion = 7;\r\n\t\tthis.anamorphicRatio = 0;\r\n\t\tthis.color = new Color(1.0,1.0,1.0,1.0);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * 添加到后期处理栈时,会调用\r\n\t */\r\n\teffectInit(postprocess:PostProcess) {\r\n\t\tsuper.effectInit(postprocess);\r\n\t\tthis._shader = Shader3D.find(\"PostProcessBloom\");\r\n\t\tthis._pyramid = new Array(BloomEffect.MAXPYRAMIDSIZE * 2);\r\n\t}\r\n\r\n\t/**\r\n\t * 根据后期处理设置cameraDepthTextureMode\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @returns \r\n\t */\r\n\tgetCameraDepthTextureModeFlag() {\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t/**\r\n\t * 释放Effect\r\n\t */\r\n\trelease(postprocess:PostProcess) {\r\n\t\tsuper.release(postprocess);\r\n\t\tthis._shader = null;\r\n\t\tthis._pyramid = [];\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\trender(context: PostProcessRenderContext): void {\r\n\t\tvar cmd: CommandBuffer = context.command;\r\n\t\tvar viewport: Viewport = context.camera.viewport;\r\n\r\n\t\t//应用自动曝光调整纹理\r\n\t\tthis._shaderData.setTexture(BloomEffect.SHADERVALUE_AUTOEXPOSURETEX, Texture2D.whiteTexture);\r\n\r\n\t\t//获取垂直扭曲和水平扭曲宽高\r\n\t\tvar ratio: number = this._anamorphicRatio;\r\n\t\tvar rw: number = ratio < 0 ? -ratio : 0;\r\n\t\tvar rh: number = ratio > 0 ? ratio : 0;\r\n\r\n\t\t//半分辨率模糊,性效比较高\r\n\t\tvar tw: number = Math.floor(viewport.width / (2 - rw));\r\n\t\tvar th: number = Math.floor(viewport.height / (2 - rh));\r\n\r\n\t\t//计算迭代次数\r\n\t\tvar s: number = Math.max(tw, th);\r\n\t\tvar logs: number;\r\n\t\tlogs = Math.log2(s) + this._diffusion - 10;\r\n\t\tvar logsInt: number = Math.floor(logs);\r\n\t\tvar iterations: number = Math.min(Math.max(logsInt, 1), BloomEffect.MAXPYRAMIDSIZE);\r\n\t\tvar sampleScale: number = 0.5 + logs - logsInt;\r\n\t\tthis._shaderData.setNumber(BloomEffect.SHADERVALUE_SAMPLESCALE, sampleScale);\r\n\r\n\t\t//预过滤参数\r\n\t\tvar lthresh: number = Color.gammaToLinearSpace(this.threshold);\r\n\t\tvar knee: number = lthresh * this._softKnee + 1e-5;\r\n\t\tthis._shaderThreshold.setValue(lthresh, lthresh - knee, knee * 2, 0.25 / knee);\r\n\t\tthis._shaderData.setVector(BloomEffect.SHADERVALUE_THRESHOLD, this._shaderThreshold);\r\n\t\tvar lclamp: number = Color.gammaToLinearSpace(this.clamp);\r\n\r\n\t\tthis._shaderParams.setValue(lclamp, 0, 0, 0);\r\n\t\tthis._shaderData.setVector(BloomEffect.SHADERVALUE_PARAMS, this._shaderParams);\r\n\r\n\t\tvar qualityOffset: number = this.fastMode ? 1 : 0;\r\n\r\n\t\t// Downsample\r\n\t\tvar lastDownTexture: RenderTexture = context.indirectTarget;\r\n\t\tfor (var i: number = 0; i < iterations; i++) {\r\n\t\t\tvar downIndex: number = i * 2;\r\n\t\t\tvar upIndex: number = downIndex + 1;\r\n\t\t\tvar subShader: number = i == 0 ? BloomEffect.SUBSHADER_PREFILTER13 + qualityOffset : BloomEffect.SUBSHADER_DOWNSAMPLE13 + qualityOffset;\r\n\r\n\t\t\tvar mipDownTexture: RenderTexture = RenderTexture.createFromPool(tw, th, RenderTargetFormat.R8G8B8A8, RenderTargetFormat.None, false, 1, false, true);\r\n\t\t\tmipDownTexture.filterMode = FilterMode.Bilinear;\r\n\t\t\tthis._pyramid[downIndex] = mipDownTexture;\r\n\r\n\t\t\tif (i !== iterations - 1) {\r\n\t\t\t\tvar mipUpTexture: RenderTexture = RenderTexture.createFromPool(tw, th, RenderTargetFormat.R8G8B8A8, RenderTargetFormat.None, false, 1, false, true);\r\n\t\t\t\tmipUpTexture.filterMode = FilterMode.Bilinear;\r\n\t\t\t\tthis._pyramid[upIndex] = mipUpTexture;\r\n\t\t\t}\r\n\r\n\t\t\tcmd.blitScreenTriangle(lastDownTexture, mipDownTexture, null, this._shader, this._shaderData, subShader);\r\n\r\n\t\t\tlastDownTexture = mipDownTexture;\r\n\t\t\ttw = Math.max(Math.floor(tw / 2), 1);\r\n\t\t\tth = Math.max(Math.floor(th / 2), 1);\r\n\t\t}\r\n\t\t// Upsample\r\n\t\tvar lastUpTexture: RenderTexture = this._pyramid[(iterations - 1) * 2];//down\r\n\t\tfor (i = iterations - 2; i >= 0; i--) {\r\n\t\t\tdownIndex = i * 2;\r\n\t\t\tupIndex = downIndex + 1;\r\n\t\t\tmipDownTexture = this._pyramid[downIndex];\r\n\t\t\tmipUpTexture = this._pyramid[upIndex];\r\n\t\t\tcmd.setShaderDataTexture(this._shaderData, BloomEffect.SHADERVALUE_BLOOMTEX, mipDownTexture);//通过指令延迟设置\r\n\t\t\tcmd.blitScreenTriangle(lastUpTexture, mipUpTexture, null, this._shader, this._shaderData, BloomEffect.SUBSHADER_UPSAMPLETENT + qualityOffset);\r\n\t\t\tlastUpTexture = mipUpTexture;\r\n\t\t}\r\n\r\n\t\tvar linearColor: Color = this._linearColor;\r\n\t\tthis.color.toLinear(linearColor);\r\n\t\tvar intensity: number = Math.pow(2, this._intensity / 10.0) - 1.0;\r\n\t\tvar shaderSettings: Vector4 = this._shaderSetting;\r\n\t\tthis._shaderSetting.setValue(sampleScale, intensity, this._dirtIntensity, iterations);\r\n\r\n\t\t//镜头污渍\r\n\t\t//需要保证污渍纹理不变型\r\n\t\tvar usedirtTexture = this._dirtTexture ? this._dirtTexture : Texture2D.blackTexture;\r\n\r\n\t\tvar dirtRatio: number = usedirtTexture.width / usedirtTexture.height;\r\n\t\tvar screenRatio: number = viewport.width / viewport.height;\r\n\t\tvar dirtTileOffset: Vector4 = this._dirtTileOffset;\r\n\t\tif (dirtRatio > screenRatio)\r\n\t\t\tdirtTileOffset.setValue(screenRatio / dirtRatio, 1.0, (1.0 - dirtTileOffset.x) * 0.5, 0.0);\r\n\t\telse if (dirtRatio < screenRatio)\r\n\t\t\tdirtTileOffset.setValue(1.0, dirtRatio / screenRatio, 0.0, (1.0 - dirtTileOffset.y) * 0.5);\r\n\r\n\t\t//合成Shader属性\r\n\t\tvar compositeShaderData: ShaderData = context.compositeShaderData;\r\n\t\tif (this.fastMode)\r\n\t\t\tcompositeShaderData.addDefine(PostProcess.SHADERDEFINE_BLOOM_LOW);\r\n\t\telse\r\n\t\t\tcompositeShaderData.addDefine(PostProcess.SHADERDEFINE_BLOOM);\r\n\r\n\t\tthis._bloomTextureTexelSize.setValue(1.0 / lastUpTexture.width, 1.0 / lastUpTexture.height, lastUpTexture.width, lastUpTexture.height);\r\n\r\n\t\tcompositeShaderData.setVector(PostProcess.SHADERVALUE_BLOOM_DIRTTILEOFFSET, dirtTileOffset);\r\n\t\tcompositeShaderData.setVector(PostProcess.SHADERVALUE_BLOOM_SETTINGS, shaderSettings);\r\n\t\tcompositeShaderData.setVector(PostProcess.SHADERVALUE_BLOOM_COLOR, new Vector4(linearColor.r, linearColor.g, linearColor.b, linearColor.a));//TODO:需要Color支持\r\n\t\tcompositeShaderData.setTexture(PostProcess.SHADERVALUE_BLOOM_DIRTTEX, usedirtTexture);\r\n\t\tcompositeShaderData.setTexture(PostProcess.SHADERVALUE_BLOOMTEX, lastUpTexture);\r\n\t\tcompositeShaderData.setVector(PostProcess.SHADERVALUE_BLOOMTEX_TEXELSIZE, this._bloomTextureTexelSize);\r\n\r\n\t\tlet _compositeShader: Shader3D = Shader3D.find(\"PostProcessComposite\");\r\n\r\n\t\tcmd.blitScreenTriangle(context.indirectTarget, context.destination, context.camera._screenOffsetScale, _compositeShader, compositeShaderData, 0);\r\n\r\n\r\n\t\t//释放渲染纹理\r\n\t\tfor (i = 0; i < iterations; i++) {\r\n\t\t\tdownIndex = i * 2;\r\n\t\t\tupIndex = downIndex + 1;\r\n\t\t\tRenderTexture.recoverToPool(this._pyramid[downIndex]);\r\n\t\t\t(i !== 0 && i !== iterations - 1) && (RenderTexture.recoverToPool(this._pyramid[upIndex]));//i==0为lastUpTexture,需延迟释放,i==iterations - 1,不存在\r\n\t\t}\r\n\r\n\t\tcontext.deferredReleaseTextures.push(lastUpTexture);//TODO:是否需要改机制\r\n\t}\r\n\r\n}\r\n\r\n\r\n","#define HALF_MAX       65504.0 // (2 - 2^-10) * 2^15\r\n\r\n#define FLT_EPSILON    1.192092896e-07 // Smallest positive number, such that 1.0 + FLT_EPSILON != 1.0\r\n\r\nmediump vec4 safeHDR(mediump vec4 c)\r\n{\r\n    return min(c, HALF_MAX);\r\n}\r\n\r\nfloat max3(float a, float b, float c)\r\n{\r\n    return max(max(a, b), c);\r\n}\r\n\r\nvec3 positivePow(vec3 base, vec3 power)\r\n{\r\n    return pow(max(abs(base), vec3(FLT_EPSILON, FLT_EPSILON, FLT_EPSILON)), power);\r\n}","#include \"StdLib.glsl\";\r\n\r\n#define EPSILON 1.0e-4\r\n\r\n// Quadratic color thresholding\r\n// curve = (threshold - knee, knee * 2, 0.25 / knee)\r\nmediump vec4 quadraticThreshold(mediump vec4 color, mediump float threshold, mediump vec3 curve) {\r\n\t// Pixel brightness\r\n\tmediump float br = max3(color.r, color.g, color.b);\r\n\r\n\t// Under-threshold part: quadratic curve\r\n\tmediump float rq = clamp(br - curve.x, 0.0, curve.y);\r\n\trq = curve.z * rq * rq;\r\n\r\n\t// Combine and apply the brightness response curve.\r\n\tcolor *= max(rq, br - threshold) / max(br, EPSILON);\r\n\r\n\treturn color;\r\n}\r\n\r\n\r\n\r\n//\r\n// sRGB transfer functions\r\n// Fast path ref: http://chilliant.blogspot.com.au/2012/08/srgb-approximations-for-hlsl.html?m=1\r\n//\r\n// mediump vec3 sRGBToLinear(mediump vec3 c) {\r\n// \t#ifdef USE_VERY_FAST_SRGB\r\n// \t\treturn c * c;\r\n// \t#elif defined(USE_FAST_SRGB)\r\n// \t\treturn c * (c * (c * 0.305306011 + 0.682171111) + 0.012522878);\r\n// \t#else\r\n// \t\tmediump vec3 linearRGBLo = c / 12.92;\r\n// \t\tmediump vec3 power=vec3(2.4, 2.4, 2.4);\r\n// \t\tmediump vec3 linearRGBHi = positivePow((c + 0.055) / 1.055, power);\r\n// \t\tmediump vec3 linearRGB =vec3((c.r<=0.04045) ? linearRGBLo.r : linearRGBHi.r,(c.g<=0.04045) ? linearRGBLo.g : linearRGBHi.g,(c.b<=0.04045) ? linearRGBLo.b : linearRGBHi.b);\r\n// \t\treturn linearRGB;\r\n// \t#endif\r\n// }\r\n\r\n// mediump vec4 sRGBToLinear(mediump vec4 c){\r\n//     return vec4(sRGBToLinear(c.rgb), c.a);\r\n// }\r\n\r\n\r\n\r\n// mediump vec3 linearToSRGB(mediump vec3 c) {\r\n// \t#ifdef USE_VERY_FAST_SRGB\r\n// \t\treturn sqrt(c);\r\n// \t#elif defined(USE_FAST_SRGB)\r\n// \t\treturn max(1.055 * PositivePow(c, 0.416666667) - 0.055, 0.0);\r\n// \t#else\r\n// \t\tmediump vec3 sRGBLo = c * 12.92;\r\n// \t\tmediump vec3 power=vec3(1.0 / 2.4, 1.0 / 2.4, 1.0 / 2.4);\r\n// \t\tmediump vec3 sRGBHi = (positivePow(c, power) * 1.055) - 0.055;\r\n// \t\tmediump vec3 sRGB =vec3((c.r<=0.0031308) ? sRGBLo.r : sRGBHi.r,(c.g<=0.0031308) ? sRGBLo.g : sRGBHi.g,(c.b<=0.0031308) ? sRGBLo.b : sRGBHi.b);\r\n// \t\treturn sRGB;\r\n// \t#endif\r\n// }\r\n\r\n// mediump vec4 linearToSRGB(mediump vec4 c){\r\n//     return vec4(linearToSRGB(c.rgb), c.a);\r\n// }","\r\n// todo only sampler u_MainTex\r\nvec4 samplerTex(sampler2D tex, vec2 uv)\r\n{\r\n    vec4 mainSampler = texture2D(tex, uv);\r\n#ifdef Gamma_u_MainTex\r\n    mainSampler = gammaToLinear(mainSampler);\r\n#endif // Gamma_u_MainTex\r\n\r\n    return mainSampler;\r\n}\r\n\r\n// Better, temporally stable box filtering\r\n// [Jimenez14] http://goo.gl/eomGso\r\n// . . . . . . .\r\n// . A . B . C .\r\n// . . D . E . .\r\n// . F . G . H .\r\n// . . I . J . .\r\n// . K . L . M .\r\n// . . . . . . .\r\nmediump vec4 downsampleBox13Tap(sampler2D tex, vec2 uv, vec2 texelSize)\r\n{\r\n    mediump vec4 A = samplerTex(tex, uv + texelSize * vec2(-1.0, -1.0));\r\n    mediump vec4 B = samplerTex(tex, uv + texelSize * vec2(0.0, -1.0));\r\n    mediump vec4 C = samplerTex(tex, uv + texelSize * vec2(1.0, -1.0));\r\n    mediump vec4 D = samplerTex(tex, uv + texelSize * vec2(-0.5, -0.5));\r\n    mediump vec4 E = samplerTex(tex, uv + texelSize * vec2(0.5, -0.5));\r\n    mediump vec4 F = samplerTex(tex, uv + texelSize * vec2(-1.0, 0.0));\r\n    mediump vec4 G = samplerTex(tex, uv);\r\n    mediump vec4 H = samplerTex(tex, uv + texelSize * vec2(1.0, 0.0));\r\n    mediump vec4 I = samplerTex(tex, uv + texelSize * vec2(-0.5, 0.5));\r\n    mediump vec4 J = samplerTex(tex, uv + texelSize * vec2(0.5, 0.5));\r\n    mediump vec4 K = samplerTex(tex, uv + texelSize * vec2(-1.0, 1.0));\r\n    mediump vec4 L = samplerTex(tex, uv + texelSize * vec2(0.0, 1.0));\r\n    mediump vec4 M = samplerTex(tex, uv + texelSize * vec2(1.0, 1.0));\r\n\r\n    mediump vec2 scale = vec2(0.5, 0.125);\r\n    mediump vec2 div = (1.0 / 4.0) * scale;\r\n\r\n    mediump vec4 o = (D + E + I + J) * div.x;\r\n    o += (A + B + G + F) * div.y;\r\n    o += (B + C + H + G) * div.y;\r\n    o += (F + G + L + K) * div.y;\r\n    o += (G + H + M + L) * div.y;\r\n\r\n    return o;\r\n}\r\n\r\n// Standard box filtering\r\nmediump vec4 downsampleBox4Tap(sampler2D tex, vec2 uv, vec2 texelSize)\r\n{\r\n    vec4 d = texelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);\r\n\r\n    mediump vec4 s = samplerTex(tex, uv + d.xy);\r\n    s += samplerTex(tex, uv + d.zy);\r\n    s += samplerTex(tex, uv + d.xw);\r\n    s += samplerTex(tex, uv + d.zw);\r\n\r\n    return s * (1.0 / 4.0);\r\n}\r\n\r\n// 9-tap bilinear upsampler (tent filter)\r\n// . . . . . . .\r\n// . 1 . 2 . 1 .\r\n// . . . . . . .\r\n// . 2 . 4 . 2 .\r\n// . . . . . . .\r\n// . 1 . 2 . 1 .\r\n// . . . . . . .\r\nmediump vec4 upsampleTent(sampler2D tex, vec2 uv, vec2 texelSize, vec4 sampleScale)\r\n{\r\n    vec4 d = texelSize.xyxy * vec4(1.0, 1.0, -1.0, 0.0) * sampleScale;\r\n\r\n    mediump vec4 s = samplerTex(tex, uv - d.xy);\r\n    s += samplerTex(tex, uv - d.wy) * 2.0;\r\n    s += samplerTex(tex, uv - d.zy);\r\n\r\n    s += samplerTex(tex, uv + d.zw) * 2.0;\r\n    s += samplerTex(tex, uv) * 4.0;\r\n    s += samplerTex(tex, uv + d.xw) * 2.0;\r\n\r\n    s += samplerTex(tex, uv + d.zy);\r\n    s += samplerTex(tex, uv + d.wy) * 2.0;\r\n    s += samplerTex(tex, uv + d.xy);\r\n\r\n    return s * (1.0 / 16.0);\r\n}\r\n\r\n// Standard box filtering\r\nmediump vec4 upsampleBox(sampler2D tex, vec2 uv, vec2 texelSize, vec4 sampleScale)\r\n{\r\n    vec4 d = texelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0) * 0.5 * sampleScale;\r\n\r\n    mediump vec4 s = samplerTex(tex, uv + d.xy);\r\n    s += samplerTex(tex, uv + d.zy);\r\n    s += samplerTex(tex, uv + d.xw);\r\n    s += samplerTex(tex, uv + d.zw);\r\n\r\n    return s * (1.0 / 4.0);\r\n}","#define SHADER_NAME BloomPreFilter13FS\r\n\r\n#include \"Color.glsl\";\r\n#include \"Colors.glsl\";\r\n#include \"Sampling.glsl\";\r\n\r\nvarying vec2 v_Texcoord0;\r\n\r\nmediump vec4 prefilter(mediump vec4 color, vec2 uv)\r\n{\r\n    vec4 autoExposureSampler = texture2D(u_AutoExposureTex, uv);\r\n#ifdef Gamma_u_AutoExposureTex\r\n    autoExposureSampler = gammaToLinear(autoExposureSampler);\r\n#endif // Gamma_u_AutoExposureTex\r\n\r\n    mediump float autoExposure = autoExposureSampler.r;\r\n    color *= autoExposure;\r\n    color = min(vec4(u_Params.x), color); // clamp to max\r\n    color = quadraticThreshold(color, u_Threshold.x, u_Threshold.yzw);\r\n    return color;\r\n}\r\n\r\nvoid fragPrefilter13()\r\n{\r\n    mediump vec4 color = downsampleBox13Tap(u_MainTex, v_Texcoord0, u_MainTex_TexelSize.xy);\r\n    gl_FragColor = prefilter(safeHDR(color), v_Texcoord0);\r\n}\r\n\r\nvoid main()\r\n{\r\n    fragPrefilter13();\r\n\r\n    gl_FragColor = outputTransform(gl_FragColor);\r\n}","#define SHADER_NAME BloomPreFilter4FS\r\n\r\n#include \"Color.glsl\";\r\n#include \"Colors.glsl\";\r\n#include \"Sampling.glsl\";\r\n\r\nvarying vec2 v_Texcoord0;\r\n\r\nmediump vec4 prefilter(mediump vec4 color, vec2 uv)\r\n{\r\n    vec4 autoExposureSampler = texture2D(u_AutoExposureTex, uv);\r\n#ifdef Gamma_u_AutoExposureTex\r\n    autoExposureSampler = gammaToLinear(autoExposureSampler);\r\n#endif // Gamma_u_AutoExposureTex\r\n\r\n    mediump float autoExposure = autoExposureSampler.r;\r\n    color *= autoExposure;\r\n    color = min(vec4(u_Params.x), color); // clamp to max\r\n    color = quadraticThreshold(color, u_Threshold.x, u_Threshold.yzw);\r\n    return color;\r\n}\r\n\r\nvoid fragPrefilter4()\r\n{\r\n    mediump vec4 color = downsampleBox4Tap(u_MainTex, v_Texcoord0, u_MainTex_TexelSize.xy);\r\n    gl_FragColor = prefilter(safeHDR(color), v_Texcoord0);\r\n}\r\n\r\nvoid main()\r\n{\r\n    fragPrefilter4();\r\n\r\n    gl_FragColor = outputTransform(gl_FragColor);\r\n}","#define SHADER_NAME BloomDownSample13FS\r\n\r\n#include \"Color.glsl\";\r\n#include \"Colors.glsl\";\r\n#include \"Sampling.glsl\";\r\n\r\nvarying vec2 v_Texcoord0;\r\n\r\nvoid fragDownsample13()\r\n{\r\n    mediump vec4 color = downsampleBox13Tap(u_MainTex, v_Texcoord0, u_MainTex_TexelSize.xy);\r\n    gl_FragColor = color;\r\n}\r\n\r\nvoid main()\r\n{\r\n    fragDownsample13();\r\n\r\n    gl_FragColor = outputTransform(gl_FragColor);\r\n}","#define SHADER_NAME BloomDownSample4FS\r\n\r\n#include \"Color.glsl\";\r\n#include \"Colors.glsl\";\r\n#include \"Sampling.glsl\";\r\n\r\nvarying vec2 v_Texcoord0;\r\n\r\nvoid fragDownsample4()\r\n{\r\n    mediump vec4 color = downsampleBox4Tap(u_MainTex, v_Texcoord0, u_MainTex_TexelSize.xy);\r\n    gl_FragColor = color;\r\n}\r\n\r\nvoid main()\r\n{\r\n    fragDownsample4();\r\n\r\n    gl_FragColor = outputTransform(gl_FragColor);\r\n}","#define SHADER_NAME BloomUpSampleTentFS\r\n\r\n#include \"Color.glsl\";\r\n#include \"Colors.glsl\";\r\n#include \"Sampling.glsl\";\r\n\r\nvarying vec2 v_Texcoord0;\r\n\r\nmediump vec4 combine(mediump vec4 bloom, vec2 uv)\r\n{\r\n    mediump vec4 color = texture2D(u_BloomTex, uv);\r\n#ifdef Gamma_u_BloomTex\r\n    color = gammaToLinear(color);\r\n#endif // Gamma_u_BloomTex\r\n    return bloom + color;\r\n}\r\n\r\nvoid fragUpsampleTent()\r\n{\r\n    mediump vec4 bloom = upsampleTent(u_MainTex, v_Texcoord0, u_MainTex_TexelSize.xy, vec4(u_SampleScale));\r\n    gl_FragColor = combine(bloom, v_Texcoord0);\r\n}\r\n\r\nvoid main()\r\n{\r\n    fragUpsampleTent();\r\n\r\n    gl_FragColor = outputTransform(gl_FragColor);\r\n}","#define SHADER_NAME BloomUpSampleBoxFS\r\n\r\n#include \"Color.glsl\";\r\n#include \"Colors.glsl\";\r\n#include \"Sampling.glsl\";\r\n\r\nvarying vec2 v_Texcoord0;\r\n\r\nmediump vec4 combine(mediump vec4 bloom, vec2 uv)\r\n{\r\n    mediump vec4 color = texture2D(u_BloomTex, uv);\r\n#ifdef Gamma_u_BloomTex\r\n    color = gammaToLinear(color);\r\n#endif // Gamma_u_BloomTex\r\n    return bloom + color;\r\n}\r\n\r\nvoid fragUpsampleBox()\r\n{\r\n    mediump vec4 bloom = upsampleBox(u_MainTex, v_Texcoord0, u_MainTex_TexelSize.xy, vec4(u_SampleScale));\r\n    gl_FragColor = combine(bloom, v_Texcoord0);\r\n}\r\n\r\nvoid main()\r\n{\r\n    fragUpsampleBox();\r\n\r\n    gl_FragColor = outputTransform(gl_FragColor);\r\n}","#define SHADER_NAME CompositeVS\r\nvarying vec2 v_Texcoord0;\r\nvec4 remapPositionZ(vec4 position)\r\n{\r\n    position.z = position.z * 2.0 - position.w;\r\n    return position;\r\n}\r\nvoid main() {\r\n\tgl_Position = vec4(a_PositionTexcoord.xy, 0.0, 1.0);\r\n\tv_Texcoord0 = a_PositionTexcoord.zw;\r\n\tgl_Position = remapPositionZ(gl_Position);\r\n}","#define SHADER_NAME CompositeFS\r\n\r\n#include \"Color.glsl\";\r\n#include \"Colors.glsl\";\r\n#include \"Sampling.glsl\";\r\n\r\nvarying vec2 v_Texcoord0;\r\n\r\nvoid main()\r\n{\r\n    vec4 autoExposureSampler = texture2D(u_AutoExposureTex, v_Texcoord0);\r\n#ifdef Gamma_u_AutoExposureTex\r\n    autoExposureSampler = gammaToLinear(autoExposureSampler);\r\n#endif // Gamma_u_AutoExposureTex\r\n    mediump float autoExposure = autoExposureSampler.r;\r\n\r\n    mediump vec4 color = vec4(0.0);\r\n    color = texture2D(u_MainTex, v_Texcoord0);\r\n#ifdef Gamma_u_MainTex\r\n    color = gammaToLinear(color);\r\n#endif // Gamma_u_MainTex\r\n\r\n    color.rgb *= autoExposure;\r\n\r\n#if defined(BLOOM) || defined(BLOOM_LOW)\r\n    #ifdef BLOOM\r\n    mediump vec4 bloom = upsampleTent(u_BloomTex, v_Texcoord0, u_BloomTex_TexelSize.xy, vec4(u_Bloom_Settings.x));\r\n    #else\r\n    mediump vec4 bloom = upsampleBox(u_BloomTex, v_Texcoord0, u_BloomTex_TexelSize.xy, vec4(u_Bloom_Settings.x));\r\n    #endif\r\n\r\n    // UVs should be Distort(uv * u_Bloom_DirtTileOffset.xy + u_Bloom_DirtTileOffset.zw)\r\n    // but considering we use a cover-style scale on the dirt texture the difference\r\n    // isn't massive so we chose to save a few ALUs here instead in case lens distortion\r\n    // is active\r\n    mediump vec4 dirt = vec4(texture2D(u_Bloom_DirtTex, v_Texcoord0 * u_Bloom_DirtTileOffset.xy + u_Bloom_DirtTileOffset.zw).rgb, 0.0);\r\n    #ifdef Gamma_u_Bloom_DirtTex\r\n    dirt = gammaToLinear(dirt);\r\n    #endif // Gamma_u_Bloom_DirtTex\r\n\r\n    // Additive bloom (artist friendly)\r\n    bloom *= u_Bloom_Settings.y;\r\n    dirt *= u_Bloom_Settings.z;\r\n    mediump vec4 bloomColor = vec4(u_Bloom_Color, 1.0);\r\n    color += bloom * bloomColor;\r\n    color += dirt * bloom;\r\n#endif\r\n\r\n    mediump vec4 finalColor = color;\r\n    // finalColor = linearToSRGB(finalColor);\r\n    // finalColor.rgb = Dither(finalColor.rgb, v_Texcoord0);//TODO:抖动\r\n    gl_FragColor = finalColor;\r\n\r\n    gl_FragColor = outputTransform(gl_FragColor);\r\n}","#define SHADER_NAME SCREENVS\r\n\r\nvarying vec2 v_Texcoord0;\r\n\r\nvec4 remapPositionZ(vec4 position)\r\n{\r\n    position.z = position.z * 2.0 - position.w;\r\n    return position;\r\n}\r\n\r\nvoid main() {\t\r\n\tgl_Position = vec4(u_OffsetScale.x*2.0-1.0+(a_PositionTexcoord.x+1.0)*u_OffsetScale.z,(1.0-((u_OffsetScale.y*2.0-1.0+(-a_PositionTexcoord.y+1.0)*u_OffsetScale.w)+1.0)/2.0)*2.0-1.0, 0.0, 1.0);\t\r\n\tv_Texcoord0 = a_PositionTexcoord.zw;\r\n\tgl_Position = remapPositionZ(gl_Position);\r\n}\r\n","import FullScreenVert from \"../../../shader/files/postProcess/GaussianDoF/FullScreenVert.vs\";\r\nimport CoCFS from \"../../../shader/files/postProcess/GaussianDoF/CoC.fs\";\r\nimport PrefilterFS from \"../../../shader/files/postProcess/GaussianDoF/Prefilter.fs\";\r\nimport BlurVFS from \"../../../shader/files/postProcess/GaussianDoF/BlurV.fs\";\r\nimport BlurHFS from \"../../../shader/files/postProcess/GaussianDoF/BlurH.fs\";\r\nimport CompositeFS from \"../../../shader/files/postProcess/GaussianDoF/Composite.fs\";\r\nimport { Camera } from \"../../../core/Camera\";\r\nimport { CommandBuffer } from \"../../../core/render/command/CommandBuffer\";\r\nimport { PostProcessEffect } from \"../../../core/render/PostProcessEffect\";\r\nimport { PostProcessRenderContext } from \"../../../core/render/PostProcessRenderContext\";\r\nimport { FilterMode } from \"../../../../RenderEngine/RenderEnum/FilterMode\";\r\nimport { RenderTargetFormat } from \"../../../../RenderEngine/RenderEnum/RenderTargetFormat\";\r\nimport { Shader3D } from \"../../../../RenderEngine/RenderShader/Shader3D\";\r\nimport { ShaderData, ShaderDataType } from \"../../../../RenderEngine/RenderShader/ShaderData\";\r\nimport { ShaderDefine } from \"../../../../RenderEngine/RenderShader/ShaderDefine\";\r\nimport { LayaGL } from \"../../../../layagl/LayaGL\";\r\nimport { DepthTextureMode } from \"../../../depthMap/DepthPass\";\r\nimport { Vector3 } from \"../../../../maths/Vector3\";\r\nimport { Vector4 } from \"../../../../maths/Vector4\";\r\nimport { RenderTexture } from \"../../../../resource/RenderTexture\";\r\nimport { SubShader } from \"../../../../RenderEngine/RenderShader/SubShader\";\r\nimport { VertexMesh } from \"../../../../RenderEngine/RenderShader/VertexMesh\";\r\n\r\n/**\r\n *  <code>BloomEffect</code> 类用于创建环境光遮罩效果。\r\n *  Gaussian DoF\r\n *  * 只支持 远景模糊\r\n *  - start: 开始远景模糊的深度\r\n *  - end: 达到最大模糊半径的远景深度\r\n *  - maxRadius: 远景模糊最大半径\r\n */\r\nexport class GaussianDoF extends PostProcessEffect {\r\n    /**@internal */\r\n    static SOURCESIZE: number;\r\n\r\n    /**@internal */\r\n    static ZBUFFERPARAMS: number;\r\n\r\n    /**@internal */\r\n    static COCPARAMS: number;\r\n\r\n    /**@internal */\r\n    static DEPTHTEXTURE: number;\r\n\r\n    /**@internal */\r\n    static NORMALDEPTHTEXTURE: number;\r\n\r\n    /**@internal */\r\n    static FULLCOCTEXTURE: number;\r\n\r\n    /**@internal */\r\n    static DOWNSAMPLESCALE: number;\r\n\r\n    /**@internal */\r\n    static BLURCOCTEXTURE: number;\r\n\r\n    /**@internal */\r\n    static SHADERDEFINE_DEPTHNORMALTEXTURE: ShaderDefine;\r\n\r\n    /**\r\n     * GaussianDOF resource init\r\n     */\r\n    static init() {\r\n        GaussianDoF.SOURCESIZE = Shader3D.propertyNameToID(\"u_SourceSize\");\r\n        GaussianDoF.ZBUFFERPARAMS = Shader3D.propertyNameToID(\"u_ZBufferParams\");\r\n        GaussianDoF.COCPARAMS = Shader3D.propertyNameToID(\"u_CoCParams\");\r\n        GaussianDoF.DEPTHTEXTURE = Shader3D.propertyNameToID(\"u_CameraDepthTexture\");\r\n        GaussianDoF.NORMALDEPTHTEXTURE = Shader3D.propertyNameToID(\"u_CameraDepthNormalTexture\");\r\n        GaussianDoF.FULLCOCTEXTURE = Shader3D.propertyNameToID(\"u_FullCoCTex\");\r\n        GaussianDoF.DOWNSAMPLESCALE = Shader3D.propertyNameToID(\"u_DownSampleScale\");\r\n        GaussianDoF.BLURCOCTEXTURE = Shader3D.propertyNameToID(\"u_BlurCoCTex\");\r\n        GaussianDoF.SHADERDEFINE_DEPTHNORMALTEXTURE = Shader3D.getDefineByName(\"CAMERA_NORMALDEPTH\");\r\n\r\n        let attributeMap: any = {\r\n            'a_PositionTexcoord': [VertexMesh.MESH_POSITION0, ShaderDataType.Vector4],\r\n        };\r\n\r\n        let uniformMap: any = {\r\n            \"u_MainTex\": ShaderDataType.Texture2D,\r\n            \"u_MainTex_TexelSize\": ShaderDataType.Vector4,\r\n            \"u_OffsetScale\": ShaderDataType.Vector4,\r\n            \"u_ZBufferParams\": ShaderDataType.Vector4,\r\n            \"u_CoCParams\": ShaderDataType.Vector3,\r\n            \"u_FullCoCTex\": ShaderDataType.Texture2D,\r\n            \"u_SourceSize\": ShaderDataType.Vector4,\r\n            \"u_DownSampleScale\": ShaderDataType.Vector4,\r\n            \"u_BlurCoCTex\": ShaderDataType.Texture2D,\r\n        };\r\n        let shader: Shader3D = Shader3D.add(\"GaussianDoF\");\r\n\r\n        /**\r\n         * CoC pass\r\n         * 根据 FarStart 与 FarEnd， 将深度值映射到 0 - 1\r\n         * \r\n         * Camera nearPlane---------FarStart---------FarEnd---------Camera farplane\r\n         *       0         ---------   0    ---------   1  ---------      1\r\n         */\r\n        let cocSubShader: SubShader = new SubShader(attributeMap, uniformMap);\r\n        shader.addSubShader(cocSubShader);\r\n        cocSubShader.addShaderPass(FullScreenVert, CoCFS);\r\n\r\n        /**\r\n         * Prefilter pass\r\n         * \r\n         */\r\n        let prefilterSubShader: SubShader = new SubShader(attributeMap, uniformMap);\r\n        shader.addSubShader(prefilterSubShader);\r\n        prefilterSubShader.addShaderPass(FullScreenVert, PrefilterFS);\r\n\r\n        // blur\r\n        /**\r\n         * blurH pass\r\n         */\r\n        let blurHSubShader: SubShader = new SubShader(attributeMap, uniformMap);\r\n        shader.addSubShader(blurHSubShader);\r\n        blurHSubShader.addShaderPass(FullScreenVert, BlurHFS);\r\n\r\n        /**\r\n         * blurV pass\r\n         */\r\n        let blurVSubShader: SubShader = new SubShader(attributeMap, uniformMap);\r\n        shader.addSubShader(blurVSubShader);\r\n        blurVSubShader.addShaderPass(FullScreenVert, BlurVFS);\r\n\r\n        /**\r\n         * Composite pass\r\n         */\r\n        let compositeSubShader: SubShader = new SubShader(attributeMap, uniformMap);\r\n        shader.addSubShader(compositeSubShader);\r\n        compositeSubShader.addShaderPass(FullScreenVert, CompositeFS);\r\n\r\n    }\r\n\r\n    /**@internal */\r\n    private _shader: Shader3D;\r\n\r\n    /**@internal */\r\n    private _shaderData: ShaderData;\r\n\r\n    /**@internal */\r\n    private _zBufferParams: Vector4;\r\n\r\n    /**@internal */\r\n    private _sourceSize: Vector4;\r\n\r\n    /**@internal */\r\n    private _dowmSampleScale: Vector4;\r\n\r\n    /**\r\n     * 实例化一个高斯DOF效果类\r\n     */\r\n    constructor() {\r\n        super();\r\n        this._shader = Shader3D.find(\"GaussianDoF\");\r\n        this._shaderData = LayaGL.renderOBJCreate.createShaderData(null);\r\n        this._shaderData.setVector3(GaussianDoF.COCPARAMS, new Vector3(10, 30, 1));\r\n        this._zBufferParams = new Vector4();\r\n        this._sourceSize = new Vector4();\r\n        this._dowmSampleScale = new Vector4();\r\n    }\r\n\r\n    /**\r\n     * 开始远景模糊的深度\r\n     */\r\n    set farStart(value: number) {\r\n        let cocParams: Vector3 = this._shaderData.getVector3(GaussianDoF.COCPARAMS);\r\n        cocParams.x = value;\r\n        this._shaderData.setVector3(GaussianDoF.COCPARAMS, cocParams);\r\n    }\r\n\r\n    get farStart(): number {\r\n        return this._shaderData.getVector3(GaussianDoF.COCPARAMS).x;\r\n    }\r\n\r\n    /**\r\n     * 达到最大模糊半径的远景深度\r\n     */\r\n    set farEnd(value: number) {\r\n        let cocParams: Vector3 = this._shaderData.getVector3(GaussianDoF.COCPARAMS);\r\n        cocParams.y = Math.max(cocParams.x, value);\r\n        this._shaderData.setVector3(GaussianDoF.COCPARAMS, cocParams);\r\n    }\r\n\r\n    get farEnd(): number {\r\n        return this._shaderData.getVector3(GaussianDoF.COCPARAMS).y;\r\n    }\r\n\r\n    /**\r\n     * 最大模糊半径\r\n     */\r\n    set maxRadius(value: number) {\r\n        let cocParams: Vector3 = this._shaderData.getVector3(GaussianDoF.COCPARAMS);\r\n        cocParams.z = Math.min(value, 2);\r\n        this._shaderData.setVector3(GaussianDoF.COCPARAMS, cocParams);\r\n    }\r\n\r\n    get maxRadius(): number {\r\n        return this._shaderData.getVector3(GaussianDoF.COCPARAMS).z;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @param context \r\n     */\r\n    private _setupShaderValue(context: PostProcessRenderContext): void {\r\n        let camera: Camera = context.camera;\r\n        this._dowmSampleScale.setValue(0.5, 0.5, 2.0, 2.0);\r\n        this._shaderData.setVector(GaussianDoF.DOWNSAMPLESCALE, this._dowmSampleScale);\r\n        let far = camera.farPlane;\r\n        let near = camera.nearPlane;\r\n        this._zBufferParams.setValue(1.0 - far / near, far / near, (near - far) / (near * far), 1 / near);\r\n        this._shaderData.setVector(GaussianDoF.ZBUFFERPARAMS, this._zBufferParams);\r\n    }\r\n\r\n\r\n    /**\r\n     * @internal\r\n     * @override\r\n     */\r\n    getCameraDepthTextureModeFlag() {\r\n        return DepthTextureMode.Depth;\r\n    }\r\n\r\n    /**\r\n    * @override\r\n    * @param context \r\n    */\r\n    render(context: PostProcessRenderContext): void {\r\n        let cmd: CommandBuffer = context.command;\r\n        this._setupShaderValue(context);\r\n\r\n        let source: RenderTexture = context.source;\r\n\r\n        let shader: Shader3D = this._shader;\r\n        let shaderData: ShaderData = this._shaderData;\r\n\r\n        let dataTexFormat: RenderTargetFormat = RenderTargetFormat.R16G16B16A16;\r\n        // todo fullCoC format: R16\r\n        let fullCoC: RenderTexture = RenderTexture.createFromPool(source.width, source.height, dataTexFormat, RenderTargetFormat.None, false, 1);\r\n        // coc pass\r\n        cmd.blitScreenTriangle(source, fullCoC, null, shader, shaderData, 0);\r\n        // Prefilter pass\r\n        fullCoC.filterMode = FilterMode.Bilinear;\r\n        this._shaderData.setTexture(GaussianDoF.FULLCOCTEXTURE, fullCoC);\r\n        let prefilterTex: RenderTexture = RenderTexture.createFromPool(source.width / 2, source.height / 2, dataTexFormat, RenderTargetFormat.None, false, 1);\r\n        cmd.blitScreenTriangle(source, prefilterTex, null, shader, shaderData, 1);\r\n        // blur\r\n        prefilterTex.filterMode = FilterMode.Bilinear;\r\n        this._sourceSize.setValue(prefilterTex.width, prefilterTex.height, 1.0 / prefilterTex.width, 1.0 / prefilterTex.height);\r\n        this._shaderData.setShaderData(GaussianDoF.SOURCESIZE, ShaderDataType.Vector4, this._sourceSize);\r\n        // blur H\r\n        let blurHTex: RenderTexture = RenderTexture.createFromPool(prefilterTex.width, prefilterTex.height, dataTexFormat, RenderTargetFormat.None, false, 1);\r\n        cmd.blitScreenTriangle(prefilterTex, blurHTex, null, this._shader, this._shaderData, 2);\r\n        // blur V\r\n        let blurVTex: RenderTexture = RenderTexture.createFromPool(prefilterTex.width, prefilterTex.height, dataTexFormat, RenderTargetFormat.None, false, 1);\r\n        cmd.blitScreenTriangle(blurHTex, blurVTex, null, this._shader, this._shaderData, 3);\r\n        // composite\r\n        blurVTex.filterMode = FilterMode.Bilinear;\r\n        blurVTex.anisoLevel = 1;\r\n        fullCoC.filterMode = FilterMode.Point;\r\n        this._shaderData.setTexture(GaussianDoF.BLURCOCTEXTURE, blurVTex);\r\n        let finalTex: RenderTexture = RenderTexture.createFromPool(source.width, source.height, source.colorFormat, source.depthStencilFormat, false, 1);\r\n        cmd.blitScreenTriangle(source, context.destination, null, this._shader, this._shaderData, 4);\r\n        //context.source = finalTex;\r\n        // recover render texture\r\n        RenderTexture.recoverToPool(fullCoC);\r\n        RenderTexture.recoverToPool(prefilterTex);\r\n        RenderTexture.recoverToPool(blurHTex);\r\n        RenderTexture.recoverToPool(blurVTex);\r\n        context.deferredReleaseTextures.push(finalTex);\r\n    }\r\n}\r\n","#define SHADER_NAME COCFS\r\n\r\n#ifdef CAMERA_NORMALDEPTH\r\nuniform sampler2D u_CameraDepthNormalTexture;\r\n#else\r\nuniform sampler2D u_CameraDepthTexture;\r\n#endif\r\n\r\nvarying vec2 v_Texcoord0;\r\n\r\n// Z buffer to linear 0..1 depth\r\nfloat Linear01Depth(float z, vec4 zbufferParams)\r\n{\r\n    return 1.0 / (zbufferParams.x * z + zbufferParams.y);\r\n}\r\n\r\n// Z buffer to linear depth\r\nfloat LinearEyeDepth(float z, vec4 zbufferParams)\r\n{\r\n    return 1.0 / (zbufferParams.z * z + zbufferParams.w);\r\n}\r\n\r\nfloat DecodeFloatRG(vec2 enc)\r\n{\r\n    vec2 kDecodeDot = vec2(1.0, 1.0 / 255.0);\r\n    return dot(enc, kDecodeDot);\r\n}\r\n\r\nvoid DecodeDepthNormal(vec4 enc, out float depth)\r\n{\r\n    depth = DecodeFloatRG(enc.zw);\r\n}\r\n\r\nvoid main()\r\n{\r\n\r\n#ifdef CAMERA_NORMALDEPTH\r\n    vec4 depthNormal = texture2D(u_CameraDepthNormalTexture, v_Texcoord0);\r\n    float depth = 0.0;\r\n    DecodeDepthNormal(depthNormal, depth);\r\n    depth = ((1.0 / depth) - u_ZBufferParams.y) * (1.0 / u_ZBufferParams.x);\r\n#else\r\n    float depth = texture2D(u_CameraDepthTexture, v_Texcoord0).x;\r\n#endif\r\n\r\n    depth = LinearEyeDepth(depth, u_ZBufferParams);\r\n    float farStart = u_CoCParams.x;\r\n    float farEnd = u_CoCParams.y;\r\n\r\n    float coc = (depth - farStart) / (farEnd - farStart);\r\n    coc = clamp(coc, 0.0, 1.0);\r\n    gl_FragColor = vec4(coc, coc, coc, 1.0);\r\n}\r\n","#define SHADER_NAME PrefilterFS\r\n\r\n#include \"Color.glsl\";\r\n\r\nvarying vec2 v_Texcoord0;\r\n\r\nconst int kCount = 5;\r\nvec2 kTaps[5];\r\n\r\nvoid main()\r\n{\r\n\r\n    kTaps[0] = vec2(0.0, 0.0);\r\n    kTaps[1] = vec2(0.9, -0.4);\r\n    kTaps[2] = vec2(-0.9, 0.4);\r\n    kTaps[3] = vec2(0.4, 0.9);\r\n    kTaps[4] = vec2(-0.4, -0.9);\r\n\r\n    vec3 colorAcc = vec3(0.0);\r\n    float farCoCAcc = 0.0;\r\n    for (int i = 0; i < kCount; i++)\r\n\t{\r\n\t    vec2 uv = u_MainTex_TexelSize.xy * kTaps[i] + v_Texcoord0;\r\n\t    vec3 tapColor = texture2D(u_MainTex, uv).rgb;\r\n#ifdef Gamma_u_MainTex\r\n\t    tapColor = gammaToLinear(tapColor);\r\n#endif // Gamma_u_MainTex\r\n\r\n\t    float coc = texture2D(u_FullCoCTex, uv).r;\r\n\r\n\t    colorAcc += tapColor * coc;\r\n\t    farCoCAcc += coc;\r\n\t}\r\n    vec3 color = colorAcc * (1.0 / float(kCount));\r\n    float farCoC = farCoCAcc * (1.0 / float(kCount));\r\n\r\n    // float farCoC = texture2D(u_FullCoCTex, v_Texcoord0).x;\r\n    // vec3 color = texture2D(u_MainTex, v_Texcoord0).rgb;\r\n    // color *= farCoC;\r\n\r\n    gl_FragColor = vec4(color, farCoC);\r\n\r\n    gl_FragColor = outputTransform(gl_FragColor);\r\n}","#define SHADER_NAME BlurHFS\r\n\r\n#include \"Color.glsl\";\r\n\r\nvarying vec2 v_Texcoord0;\r\n\r\nconst int kTapCount = 3;\r\nfloat kOffsets[3];\r\nfloat kCoeffs[3];\r\n\r\nvec4 Blur(vec2 dir, float premultiply)\r\n{\r\n\r\n    kOffsets[0] = -1.33333333;\r\n    kOffsets[1] = 0.00000000;\r\n    kOffsets[2] = 1.33333333;\r\n\r\n    kCoeffs[0] = 0.35294118;\r\n    kCoeffs[1] = 0.29411765;\r\n    kCoeffs[2] = 0.3529411;\r\n\r\n    vec2 uv = v_Texcoord0;\r\n    // ivec2 positionSS = ivec2(u_SourceSize.xy * uv);\r\n\r\n    vec4 halfColor = texture2D(u_MainTex, uv);\r\n#ifdef Gamma_u_MainTex\r\n    halfColor = gammaToLinear(halfColor);\r\n#endif // Gamma_u_MainTex\r\n    float samp0CoC = halfColor.a;\r\n\r\n    float maxRadius = u_CoCParams.z;\r\n    vec2 offset = u_SourceSize.zw * dir * samp0CoC * maxRadius;\r\n\r\n    vec4 acc = vec4(0.0);\r\n\r\n    for (int i = 0; i < kTapCount; i++)\r\n\t{\r\n\t    vec2 sampCoord = uv + kOffsets[i] * offset;\r\n\t    vec4 samp = texture2D(u_MainTex, sampCoord);\r\n#ifdef Gamma_u_MainTex\r\n\t    samp = gammaToLinear(samp);\r\n#endif // Gamma_u_MainTex\r\n\t    float sampCoC = samp.a;\r\n\t    vec3 sampColor = samp.rgb;\r\n\r\n\t    float weight = clamp(1.0 - (samp0CoC - sampCoC), 0.0, 1.0);\r\n\t    acc += vec4(sampColor, sampCoC) * kCoeffs[i] * weight;\r\n\t}\r\n\r\n    acc.xyz /= acc.w + 1e-4;\r\n    return vec4(acc.xyz, samp0CoC);\r\n}\r\n\r\nvoid main()\r\n{\r\n    gl_FragColor = Blur(vec2(1.0, 0.0), 1.0);\r\n\r\n    gl_FragColor = outputTransform(gl_FragColor);\r\n}","#define SHADER_NAME BlurVFS\r\n\r\n#include \"Color.glsl\";\r\n\r\nvarying vec2 v_Texcoord0;\r\n\r\n// todo 3 & 5\r\nconst int kTapCount = 3;\r\nfloat kOffsets[3];\r\nfloat kCoeffs[3];\r\n\r\nvec4 Blur(vec2 dir, float premultiply)\r\n{\r\n\r\n    kOffsets[0] = -1.33333333;\r\n    kOffsets[1] = 0.00000000;\r\n    kOffsets[2] = 1.33333333;\r\n\r\n    kCoeffs[0] = 0.35294118;\r\n    kCoeffs[1] = 0.29411765;\r\n    kCoeffs[2] = 0.3529411;\r\n\r\n    vec2 uv = v_Texcoord0;\r\n    // ivec2 positionSS = ivec2(u_SourceSize.xy * uv);\r\n\r\n    vec4 halfColor = texture2D(u_MainTex, uv);\r\n#ifdef Gamma_u_MainTex\r\n    halfColor = gammaToLinear(halfColor);\r\n#endif // Gamma_u_MainTex\r\n    float samp0CoC = halfColor.a;\r\n\r\n    float maxRadius = u_CoCParams.z;\r\n    vec2 offset = u_SourceSize.zw * dir * samp0CoC * maxRadius;\r\n\r\n    vec4 acc = vec4(0.0);\r\n\r\n    for (int i = 0; i < kTapCount; i++)\r\n\t{\r\n\t    vec2 sampCoord = uv + kOffsets[i] * offset;\r\n\t    vec4 samp = texture2D(u_MainTex, sampCoord);\r\n#ifdef Gamma_u_MainTex\r\n\t    samp = gammaToLinear(samp);\r\n#endif // Gamma_u_MainTex\r\n\t    float sampCoC = samp.w;\r\n\t    vec3 sampColor = samp.xyz;\r\n\r\n\t    float weight = clamp(1.0 - (samp0CoC - sampCoC), 0.0, 1.0);\r\n\t    acc += vec4(sampColor, 1.0) * kCoeffs[i] * weight;\r\n\t}\r\n\r\n    acc.xyz /= acc.w + 1e-4;\r\n    return vec4(acc.xyz, 1.0);\r\n}\r\n\r\nvoid main()\r\n{\r\n    gl_FragColor = Blur(vec2(0.0, 1.0), 0.0);\r\n\r\n    gl_FragColor = outputTransform(gl_FragColor);\r\n}\r\n","#define SHADER_NAME CompositeFS\r\n\r\n#include \"Color.glsl\";\r\n\r\nvarying vec2 v_Texcoord0;\r\n\r\nvoid main()\r\n{\r\n\r\n    vec3 baseColor = texture2D(u_MainTex, v_Texcoord0).rgb;\r\n#ifdef Gamma_u_MainTex\r\n    baseColor = gammaToLinear(baseColor);\r\n#endif // Gamma_u_MainTex\r\n\r\n    vec4 samplevalue = texture2D(u_BlurCoCTex, v_Texcoord0);\r\n    vec3 farColor = samplevalue.rgb;\r\n    float coc = texture2D(u_FullCoCTex, v_Texcoord0).r;\r\n\r\n    vec3 dstColor = vec3(0.0);\r\n    float dstAlpha = 1.0;\r\n\r\n    float blend = sqrt(coc * 3.14 * 2.0);\r\n    dstColor = farColor * clamp(blend, 0.0, 1.0);\r\n    dstAlpha = clamp(1.0 - blend, 0.0, 1.0);\r\n\r\n    gl_FragColor = vec4(baseColor * dstAlpha + dstColor, 1.0);\r\n\r\n    gl_FragColor = outputTransform(gl_FragColor);\r\n}","#define SHADER_NAME OcclusionEstimationFS\r\n\r\n#include \"DepthNormalUtil.glsl\";\r\n\r\n#include \"AmbientOcclusion.glsl\";\r\n\r\n#define FIX_SAMPLING_PATTERN\r\n\r\n// Check if the camera is perspective.\r\n// (returns 1.0 when orthographic)\r\nfloat CheckPerspective(float x)\r\n{\r\n    // todo ortho\r\n    return mix(x, 1.0, 0.0);\r\n}\r\n\r\nvec3 ReconstructViewPos(vec2 uv, float depth, vec2 p11_22, vec2 p13_31)\r\n{\r\n    return vec3((uv * 2.0 - 1.0 - p13_31) / p11_22 * CheckPerspective(depth), depth);\r\n}\r\n\r\n// Pseudo random number generator with 2D coordinates\r\n// https://stackoverflow.com/questions/12964279/whats-the-origin-of-this-glsl-rand-one-liner\r\nfloat UVRandom(float u, float v)\r\n{\r\n    float f = dot(vec2(12.9898, 78.233), vec2(u, v));\r\n    return fract(43758.5453 * sin(f));\r\n}\r\n\r\nvec2 CosSin(float theta)\r\n{\r\n    // float sn, cs;\r\n    // sincos(theta, sn, cs);\r\n    float sn = sin(theta);\r\n    float cs = cos(theta);\r\n    return vec2(cs, sn);\r\n}\r\n\r\nfloat GradientNoise(vec2 uv)\r\n{\r\n    uv = floor(uv * u_MainTex_TexelSize.zw);\r\n    float f = dot(vec2(0.06711056, 0.00583715), uv);\r\n    return fract(52.9829189 * fract(f));\r\n}\r\n\r\n// Sample point picker\r\nvec3 PickSamplePoint(vec2 uv, float index)\r\n{\r\n#if defined(FIX_SAMPLING_PATTERN)\r\n    float gn = GradientNoise(uv * DOWNSAMPLE);\r\n    float u = fract(UVRandom(0.0, index + uv.x * 1e-10) + gn) * 2.0 - 1.0;\r\n    float theta = (UVRandom(1.0, index + uv.x * 1e-10) + gn) * TWO_PI;\r\n#else\r\n    float u = UVRandom(uv.x + u_PlugTime.x, uv.y + index) * 2.0 - 1.0;\r\n    float theta = UVRandom(-uv.x - u_PlugTime.x, uv.y + index) * TWO_PI;\r\n#endif\r\n\r\n    vec3 v = vec3(CosSin(theta) * sqrt(1.0 - u * u), u);\r\n    float l = sqrt((index + 1.0) / float(SAMPLE_COUNT)) * RADIUS;\r\n    return v * l;\r\n}\r\n\r\nvoid main()\r\n{\r\n    vec2 uv = v_Texcoord0;\r\n\r\n    mat3 proj = mat3(u_Projection);\r\n    vec2 p11_22 = vec2(u_Projection[0][0], u_Projection[1][1]);\r\n    vec2 p13_31 = vec2(u_Projection[2][0], u_Projection[2][1]);\r\n\r\n    vec3 norm_o;\r\n    float depth_o = SampleDepthNormal(uv, norm_o);\r\n\r\n    // Reconstruct the view-space position.\r\n    vec3 vpos_o = ReconstructViewPos(uv, depth_o, p11_22, p13_31);\r\n\r\n    float ao = 0.0;\r\n\r\n    for (int s = 0; s < int(SAMPLE_COUNT); s++)\r\n\t{\r\n\t    float s_float = float(s);\r\n\t    vec3 v_s1 = PickSamplePoint(uv, s_float);\r\n\r\n\t    v_s1 = faceforward(v_s1, -norm_o, v_s1);\r\n\t    vec3 vpos_s1 = vpos_o + v_s1;\r\n\r\n\t    // Reproject the sample point\r\n\t    vec3 spos_s1 = proj * vpos_s1;\r\n\t    vec2 uv_s1_01 = (spos_s1.xy / CheckPerspective(vpos_s1.z) + 1.0) * 0.5;\r\n\r\n\t    float depth_s1 = SampleDepth(uv_s1_01);\r\n\r\n\t    vec3 vpos_s2 = ReconstructViewPos(uv_s1_01, depth_s1, p11_22, p13_31);\r\n\t    vec3 v_s2 = vpos_s2 - vpos_o;\r\n\r\n\t    float a1 = max(dot(v_s2, norm_o) - kBeta * depth_o, 0.0);\r\n\t    float a2 = dot(v_s2, v_s2) + EPSILON;\r\n\r\n\t    ao += a1 / a2;\r\n\t}\r\n\r\n    ao *= RADIUS;\r\n\r\n    ao = PositivePow(ao * INTENSITY / float(SAMPLE_COUNT), kContrast);\r\n\r\n    gl_FragColor = PackAONormal(ao, norm_o);\r\n}\r\n\r\n/**\r\n    0.8741,     0,          0,          0,\r\n    0,          1.7320,     0,          0,\r\n    0,          0,          -1.0152,    -1,\r\n    0,          0,          -0.3046,    0\r\n**/","\r\n\r\nimport BlitScreenVS from \"../../../shader/postprocess/BlitScreen.vs\";\r\nimport FragAO from \"../../../shader/files/postProcess/ScalableAO/FragAO.fs\";\r\nimport AoBlurHorizontal from \"../../../shader/files/postProcess/ScalableAO/AoBlurHorizontal.fs\";\r\nimport AOComposition from \"../../../shader/files/postProcess/ScalableAO/AOComposition.fs\";\r\nimport AmbientOcclusion from \"../../../shader/files/postProcess/ScalableAO/AmbientOcclusion.glsl\";\r\nimport { LayaGL } from \"../../../../layagl/LayaGL\";\r\nimport { RenderTargetFormat } from \"../../../../RenderEngine/RenderEnum/RenderTargetFormat\";\r\nimport { WrapMode } from \"../../../../RenderEngine/RenderEnum/WrapMode\";\r\nimport { Shader3D } from \"../../../../RenderEngine/RenderShader/Shader3D\";\r\nimport { ShaderDataType, ShaderData } from \"../../../../RenderEngine/RenderShader/ShaderData\";\r\nimport { DepthTextureMode } from \"../../../depthMap/DepthPass\";\r\nimport { Viewport } from \"../../../math/Viewport\";\r\nimport { Camera } from \"../../Camera\";\r\nimport { CommandBuffer } from \"../command/CommandBuffer\";\r\nimport { PostProcessEffect } from \"../PostProcessEffect\";\r\nimport { PostProcessRenderContext } from \"../PostProcessRenderContext\";\r\nimport { BaseCamera } from \"../../BaseCamera\";\r\nimport { ShaderDefine } from \"../../../../RenderEngine/RenderShader/ShaderDefine\";\r\nimport { Color } from \"../../../../maths/Color\";\r\nimport { Vector2 } from \"../../../../maths/Vector2\";\r\nimport { Vector3 } from \"../../../../maths/Vector3\";\r\nimport { Vector4 } from \"../../../../maths/Vector4\";\r\nimport { RenderTexture } from \"../../../../resource/RenderTexture\";\r\nimport { SubShader } from \"../../../../RenderEngine/RenderShader/SubShader\";\r\nimport { VertexMesh } from \"../../../../RenderEngine/RenderShader/VertexMesh\";\r\n\r\n/**\r\n * AO质量\r\n */\r\nexport enum AOQUALITY{\r\n    /**高 */\r\n    High,\r\n    /**中 */\r\n    MEDIUM,\r\n    /**低 */\r\n    LOWEST\r\n}\r\n\r\n/**\r\n * <code>BloomEffect</code> 类用于创建环境光遮罩效果。\r\n */\r\nexport class ScalableAO extends PostProcessEffect {\r\n\r\n    /**@internal */\r\n    static SHADERDEFINE_AOHigh: ShaderDefine;\r\n\r\n    /**@internal */\r\n    static SHADERDEFINE_AOMEDIUM: ShaderDefine;\r\n\r\n    /**@internal */\r\n    static SHADERDEFINE_LOWEST: ShaderDefine;\r\n\r\n    /**@internal */\r\n    static BlurDelty: number;\r\n\r\n    /**@internal */\r\n    static AOColor: number;\r\n\r\n    /**@internal */\r\n    static aoTexture: number;\r\n\r\n    /**@internal */\r\n    static AOParams: number;\r\n\r\n    /**@internal */\r\n    static SourceTex: number;\r\n\r\n    /**@internal */\r\n    static deltyHorizontal: Vector2 = new Vector2(1.0, 0.0);\r\n\r\n    /**@internal */\r\n    static deltyVector: Vector2 = new Vector2(0.0, 1.0);\r\n\r\n    /**\r\n     * scaleAO resource init\r\n     */\r\n    static init() {\r\n        ScalableAO.BlurDelty = Shader3D.propertyNameToID(\"u_Delty\");\r\n        ScalableAO.AOColor = Shader3D.propertyNameToID(\"u_AOColor\");\r\n        ScalableAO.aoTexture = Shader3D.propertyNameToID(\"u_compositionAoTexture\");\r\n\r\n        ScalableAO.AOParams = Shader3D.propertyNameToID('u_AOParams');\r\n        ScalableAO.SourceTex = Shader3D.propertyNameToID('u_SourceTex');\r\n        ScalableAO.SHADERDEFINE_AOHigh =Shader3D.getDefineByName(\"AO_High\");\r\n        ScalableAO.SHADERDEFINE_AOMEDIUM =Shader3D.getDefineByName(\"AO_MEDIUM\");\r\n        ScalableAO.SHADERDEFINE_LOWEST =Shader3D.getDefineByName(\"AO_LOWEST\");\r\n        Shader3D.addInclude(\"AmbientOcclusion.glsl\", AmbientOcclusion);\r\n        //scalableAoShader\r\n        let attributeMap: any = {\r\n            'a_PositionTexcoord': [VertexMesh.MESH_POSITION0, ShaderDataType.Vector4]\r\n        };\r\n        let uniformMap: any = {\r\n            'u_OffsetScale': ShaderDataType.Vector4,\r\n            'u_MainTex': ShaderDataType.Texture2D,\r\n            'u_MainTex_TexelSize': ShaderDataType.Vector4,\r\n            'u_Delty': ShaderDataType.Vector2,\r\n            'u_PlugTime': ShaderDataType.Vector4,\r\n            'u_AOParams': ShaderDataType.Vector4,\r\n            'u_BlurVector': ShaderDataType.Vector2,\r\n            'u_AOColor': ShaderDataType.Color,\r\n            'u_compositionAoTexture': ShaderDataType.Texture2D\r\n\r\n        }\r\n        let shader: Shader3D = Shader3D.add(\"ScalableAO\");\r\n        let subShader: SubShader = new SubShader(attributeMap, uniformMap);\r\n        shader.addSubShader(subShader);\r\n        subShader.addShaderPass(BlitScreenVS, FragAO);\r\n        //BlurShader\r\n        shader = Shader3D.add(\"AOBlurHorizontal\");\r\n        subShader = new SubShader(attributeMap, uniformMap);\r\n        shader.addSubShader(subShader);\r\n        subShader.addShaderPass(BlitScreenVS, AoBlurHorizontal);\r\n\r\n        //Composition\r\n        shader = Shader3D.add(\"AOComposition\");\r\n        subShader = new SubShader(attributeMap, uniformMap);\r\n        shader.addSubShader(subShader);\r\n        subShader.addShaderPass(BlitScreenVS, AOComposition);\r\n    }\r\n\r\n    /*@internal scalable AO shader*/\r\n    private _shader: Shader3D;\r\n\r\n    /**@internal shader data */\r\n    private _shaderData: ShaderData;\r\n\r\n    /*@internal blurHorizontal Ao Shader */\r\n    private _aoBlurHorizontalShader: Shader3D;\r\n\r\n    /**@internal */\r\n    private _aoComposition: Shader3D;\r\n\r\n    /**@internal */\r\n    private _aoParams: Vector3 = new Vector3();\r\n\r\n    private _aoQuality:AOQUALITY = AOQUALITY.MEDIUM;\r\n\r\n    /**\r\n     * 实例化一个AO效果类\r\n     */\r\n    constructor() {\r\n        super();\r\n        this._shader = Shader3D.find(\"ScalableAO\");\r\n        this._shaderData = LayaGL.renderOBJCreate.createShaderData(null);\r\n        this._aoParams = new Vector3(0.12, 0.15, 1);\r\n        this._shaderData.setVector3(ScalableAO.AOParams, this._aoParams);\r\n        this._shaderData.setVector(BaseCamera.DEPTHZBUFFERPARAMS, new Vector4());\r\n        this._aoBlurHorizontalShader = Shader3D.find(\"AOBlurHorizontal\");\r\n        this._aoComposition = Shader3D.find(\"AOComposition\");\r\n        this.aoQuality = AOQUALITY.MEDIUM;\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * ao Color\r\n     */\r\n    set aoColor(value: Color) {\r\n        this._shaderData.setColor(ScalableAO.AOColor, value);\r\n    }\r\n\r\n    get aoColor() {\r\n        return this._shaderData.getColor(ScalableAO.AOColor);\r\n    }\r\n\r\n    /**\r\n     * ao intensity\r\n     */\r\n    set intensity(value: number) {\r\n        this._aoParams.x = value;\r\n        this._shaderData.setVector3(ScalableAO.AOParams, this._aoParams);\r\n    }\r\n\r\n    get intensity() {\r\n        return this._aoParams.x;\r\n    }\r\n\r\n    /**\r\n     * ao影响半径\r\n     */\r\n    set radius(value: number) {\r\n        this._aoParams.y = value;\r\n        this._shaderData.setVector3(ScalableAO.AOParams, this._aoParams);\r\n    }\r\n\r\n    get radius() {\r\n        return this._aoParams.y;\r\n    }\r\n\r\n    /**\r\n     * ao质量\r\n     */\r\n    get aoQuality(){\r\n        return this._aoQuality;\r\n    }\r\n\r\n    set aoQuality(value:AOQUALITY){\r\n        this._aoQuality = value;\r\n        switch(value){\r\n            case AOQUALITY.High:\r\n                this._shaderData.addDefine(ScalableAO.SHADERDEFINE_AOHigh);\r\n                this._shaderData.removeDefine(ScalableAO.SHADERDEFINE_AOMEDIUM);\r\n                this._shaderData.removeDefine(ScalableAO.SHADERDEFINE_LOWEST);\r\n                break;\r\n            case AOQUALITY.MEDIUM:\r\n                this._shaderData.addDefine(ScalableAO.SHADERDEFINE_AOMEDIUM);\r\n                this._shaderData.removeDefine(ScalableAO.SHADERDEFINE_AOHigh);\r\n                this._shaderData.removeDefine(ScalableAO.SHADERDEFINE_LOWEST);\r\n                break;\r\n            case AOQUALITY.LOWEST:\r\n                this._shaderData.addDefine(ScalableAO.SHADERDEFINE_LOWEST);\r\n                this._shaderData.removeDefine(ScalableAO.SHADERDEFINE_AOHigh);\r\n                this._shaderData.removeDefine(ScalableAO.SHADERDEFINE_AOMEDIUM);\r\n                break;\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @override\r\n     */\r\n    getCameraDepthTextureModeFlag() {\r\n        return DepthTextureMode.DepthAndDepthNormals;\r\n    }\r\n\r\n    /**\r\n     * @override\r\n     * @param context \r\n     */\r\n    render(context: PostProcessRenderContext): void {\r\n        let cmd: CommandBuffer = context.command;\r\n        let viewport: Viewport = context.camera.viewport;\r\n        let camera: Camera = context.camera;\r\n\r\n        // camera rendermode\r\n        camera.depthTextureMode |= DepthTextureMode.DepthNormals;\r\n        camera.depthTextureMode |= DepthTextureMode.Depth;\r\n\r\n        let depthNormalTexture: RenderTexture = camera.depthNormalTexture;\r\n        let depthTexture = camera.depthTexture;\r\n\r\n        if (!depthNormalTexture || !depthTexture) {\r\n            return;\r\n        }\r\n\r\n        depthNormalTexture.wrapModeU = WrapMode.Clamp;\r\n        depthNormalTexture.wrapModeV = WrapMode.Clamp;\r\n\r\n        let source: RenderTexture = context.source;\r\n        let width = source.width;\r\n        let height = source.height;\r\n        let textureFormat: RenderTargetFormat = source.colorFormat;\r\n        let depthFormat: RenderTargetFormat = RenderTargetFormat.None;\r\n\r\n        let finalTex: RenderTexture = RenderTexture.createFromPool(width, height, textureFormat, depthFormat, false, 1);\r\n\r\n        let shader: Shader3D = this._shader;\r\n        let shaderData: ShaderData = this._shaderData;\r\n        //depthTexture;\r\n        //depthNormalTexture;\r\n        cmd.blitScreenTriangle(null, finalTex, null, shader, shaderData, 0);\r\n        //context.source = finalTex;\r\n        let blurTex: RenderTexture = RenderTexture.createFromPool(width, height, textureFormat, depthFormat, false, 1);\r\n        //blur horizontal\r\n        cmd.blitScreenTriangle(finalTex, blurTex, null, this._aoBlurHorizontalShader, shaderData, 0);\r\n        //blur Vec\r\n        cmd.setShaderDataVector2(shaderData, ScalableAO.BlurDelty, ScalableAO.deltyVector);\r\n        cmd.blitScreenTriangle(blurTex, finalTex, null, this._aoBlurHorizontalShader, this._shaderData, 0);\r\n        //blur Composition\r\n        cmd.setShaderDataTexture(shaderData, ScalableAO.aoTexture, finalTex);\r\n        cmd.blitScreenTriangle(context.source, context.destination, null, this._aoComposition, this._shaderData, 0);\r\n        //context.source = blurTex;\r\n        context.deferredReleaseTextures.push(finalTex);\r\n        context.deferredReleaseTextures.push(blurTex);\r\n    }\r\n\r\n}","#include \"Camera.glsl\";\r\n// const \r\n#define TWO_PI 6.2831852\r\n\r\n#define EPSILON         1.0e-4\r\n#define FLT_EPSILON     1.192092896e-07 // Smallest positive number, such that 1.0 + FLT_EPSILON != 1.0\r\n\r\nconst float kContrast = 0.6;\r\nconst float kGeometryCoeff = 0.8;\r\nconst float kBeta = 0.002;\r\n\r\n\r\n// varying\r\nvarying vec2 v_Texcoord0;\r\n\r\n#if defined(AO_High)\r\n\t#define SAMPLE_COUNT 12\r\n#elif defined(AO_MEDIUM)\r\n\t#define SAMPLE_COUNT 8\r\n#else\r\n\t#define SAMPLE_COUNT 4\r\n#endif\r\n\r\n#ifdef AOLOWEST\r\n#define SAMPLE_COUNT 8\r\n#endif\r\n\r\n#ifdef AOLOWEST\r\n#define SAMPLE_COUNT 8\r\n#endif\r\n\r\n\r\n#define INTENSITY u_AOParams.x\r\n#define RADIUS u_AOParams.y\r\n#define DOWNSAMPLE u_AOParams.z\r\n\r\nfloat PositivePow(float base, float power)\r\n{\r\n    return pow(max(abs(base), float(FLT_EPSILON)), power);\r\n}\r\n\r\n\r\n// Boundary check for depth sampler\r\n// (returns a very large value if it lies out of bounds)\r\nfloat CheckBounds(vec2 uv, float d) \r\n{\r\n    float ob = 0.0;\r\n    // todo\r\n    if (uv.x < 0.0 || uv.x > 1.0 || uv.y < 0.0 || uv.y > 1.0) \r\n    {\r\n        ob = 1.0;\r\n    }\r\n    if (d <= 0.00001) {\r\n        ob += 1.0;\r\n    }\r\n\r\n    return ob * 1e8;\r\n}\r\n\r\nfloat SampleDepth(vec2 uv) \r\n{\r\n    float depthTex_Depth = SAMPLE_DEPTH_TEXTURE(u_CameraDepthTexture, uv);\r\n    float depthTex_Linear01Depth = Linear01Depth(depthTex_Depth, u_ZBufferParams);\r\n    return  depthTex_Linear01Depth * u_ProjectionParams.y + CheckBounds(uv, depthTex_Linear01Depth);\r\n}\r\n\r\nvec3 SampleNormal(vec2 uv) \r\n{\r\n    vec4 col = texture2D(u_CameraDepthNormalsTexture, uv);\r\n    vec3 depthNormal_Normal = DecodeViewNormalStereo(col);\r\n    return depthNormal_Normal * vec3(1.0, 1.0, -1.0);\r\n}\r\n\r\nfloat SampleDepthNormal(vec2 uv, out vec3 normal) \r\n{\r\n    normal = SampleNormal(uv);\r\n    return SampleDepth(uv);\r\n}\r\n\r\n// Normal vector comparer (for geometry-aware weighting)\r\nfloat CompareNormal(vec3 d1, vec3 d2)\r\n{\r\n    return smoothstep(kGeometryCoeff, 1.0, dot(d1, d2));\r\n}\r\n\r\n// Accessors for packed AO/normal buffer\r\nvec4 PackAONormal(float ao, vec3 n) \r\n{\r\n    return vec4(ao, n * 0.5 + 0.5);\r\n}\r\n\r\nvec3 GetPackedNormal(vec4 p)\r\n{\r\n    return p.gba * 2.0 - 1.0;\r\n}\r\n\r\nfloat GetPackAO(vec4 p)\r\n{\r\n    return p.r;\r\n}\r\n\r\n\r\n","#define SHADER_NAME AOBlurHorizontal\r\n//质量\r\n#define BLUR_HIGH_QUALITY 0\r\n\r\nvarying vec2 v_Texcoord0;\r\n\r\n// uniform vec2 u_Delty;\r\n\r\nvec3 GetPackedNormal(vec4 p)\r\n{\r\n    return p.gba * 2.0 - 1.0;\r\n}\r\n\r\nfloat CompareNormal(vec3 d1, vec3 d2)\r\n{\r\n    return smoothstep(0.8, 1.0, dot(d1, d2));\r\n}\r\n\r\nfloat GetPackedAO(vec4 p)\r\n{\r\n    return p.r;\r\n}\r\n\r\nvec4 PackAONormal(float ao, vec3 normal)\r\n{\r\n    return vec4(ao, normal * 0.5 + 0.5);\r\n}\r\n\r\nvoid main()\r\n{\r\n    vec2 delta = vec2(u_MainTex_TexelSize.x * 2.0 * u_Delty.x, u_Delty.y * u_MainTex_TexelSize.y * 2.0);\r\n    vec2 uv = v_Texcoord0;\r\n\r\n#if defined(BLUR_HIGH_QUALITY)\r\n\r\n    // High quality 7-tap Gaussian with adaptive sampling\r\n    vec2 uvtran = uv;\r\n    vec4 p0 = texture2D(u_MainTex, uv);\r\n    uvtran = uv - delta;\r\n    vec4 p1a = texture2D(u_MainTex, uvtran);\r\n    uvtran = uv + delta;\r\n    vec4 p1b = texture2D(u_MainTex, uvtran);\r\n    uvtran = uv - delta * 2.0;\r\n    vec4 p2a = texture2D(u_MainTex, uvtran);\r\n    uvtran = uv + delta * 2.0;\r\n    vec4 p2b = texture2D(u_MainTex, uvtran);\r\n    uvtran = uv - delta * 3.2307692308;\r\n    vec4 p3a = texture2D(u_MainTex, uvtran);\r\n    ;\r\n    uvtran = uv + delta * 3.2307692308;\r\n    vec4 p3b = texture2D(u_MainTex, uvtran);\r\n    ;\r\n\r\n    vec3 n0 = GetPackedNormal(p0);\r\n\r\n    float w0 = 0.37004405286;\r\n    float w1a = CompareNormal(n0, GetPackedNormal(p1a)) * 0.31718061674;\r\n    float w1b = CompareNormal(n0, GetPackedNormal(p1b)) * 0.31718061674;\r\n    float w2a = CompareNormal(n0, GetPackedNormal(p2a)) * 0.19823788546;\r\n    float w2b = CompareNormal(n0, GetPackedNormal(p2b)) * 0.19823788546;\r\n    float w3a = CompareNormal(n0, GetPackedNormal(p3a)) * 0.11453744493;\r\n    float w3b = CompareNormal(n0, GetPackedNormal(p3b)) * 0.11453744493;\r\n\r\n    float s;\r\n    s = GetPackedAO(p0) * w0;\r\n    s += GetPackedAO(p1a) * w1a;\r\n    s += GetPackedAO(p1b) * w1b;\r\n    s += GetPackedAO(p2a) * w2a;\r\n    s += GetPackedAO(p2b) * w2b;\r\n    s += GetPackedAO(p3a) * w3a;\r\n    s += GetPackedAO(p3b) * w3b;\r\n\r\n    s /= w0 + w1a + w1b + w2a + w2b + w3a + w3b;\r\n\r\n#else\r\n\r\n    // Fater 5-tap Gaussian with linear sampling\r\n    vec4 p0 = texture2D(u_MainTex, sampler_MainTex, i.texcoordStereo);\r\n    vec4 p1a = SAMPLE_TEXTURE2D(_MainTex, sampler_MainTex, UnityStereoTransformScreenSpaceTex(i.texcoord - delta * 1.3846153846));\r\n    vec4 p1b = SAMPLE_TEXTURE2D(_MainTex, sampler_MainTex, UnityStereoTransformScreenSpaceTex(i.texcoord + delta * 1.3846153846));\r\n    vec4 p2a = SAMPLE_TEXTURE2D(_MainTex, sampler_MainTex, UnityStereoTransformScreenSpaceTex(i.texcoord - delta * 3.2307692308));\r\n    vec4 p2b = SAMPLE_TEXTURE2D(_MainTex, sampler_MainTex, UnityStereoTransformScreenSpaceTex(i.texcoord + delta * 3.2307692308));\r\n\r\n    vec2 uvtran = uv;\r\n    vec4 p0 = texture2D(u_MainTex, uv);\r\n    uvtran = uv - delta * 1.3846153846;\r\n    vec4 p1a = texture2D(u_MainTex, uvtran);\r\n    uvtran = uv + delta * 1.3846153846;\r\n    vec4 p1b = texture2D(u_MainTex, uvtran);\r\n    uvtran = uv - delta * 3.2307692308;\r\n    vec4 p2a = texture2D(u_MainTex, uvtran);\r\n    uvtran = uv + delta * 3.2307692308;\r\n    vec4 p2b = texture2D(u_MainTex, uvtran);\r\n\r\n    vec3 n0 = GetPackedNormal(p0);\r\n\r\n    float w0 = 0.2270270270;\r\n    float w1a = CompareNormal(n0, GetPackedNormal(p1a)) * 0.3162162162;\r\n    float w1b = CompareNormal(n0, GetPackedNormal(p1b)) * 0.3162162162;\r\n    float w2a = CompareNormal(n0, GetPackedNormal(p2a)) * 0.0702702703;\r\n    float w2b = CompareNormal(n0, GetPackedNormal(p2b)) * 0.0702702703;\r\n\r\n    float s;\r\n    s = GetPackedAO(p0) * w0;\r\n    s += GetPackedAO(p1a) * w1a;\r\n    s += GetPackedAO(p1b) * w1b;\r\n    s += GetPackedAO(p2a) * w2a;\r\n    s += GetPackedAO(p2b) * w2b;\r\n\r\n    s /= w0 + w1a + w1b + w2a + w2b;\r\n\r\n#endif\r\n\r\n    gl_FragColor = PackAONormal(s, n0);\r\n}","#define SHADER_NAME AOComposition\r\n\r\n#include \"Color.glsl\";\r\n\r\n#define BLUR_HIGH_QUALITY 0\r\n\r\nvarying vec2 v_Texcoord0;\r\n\r\nvec3 GetPackedNormal(vec4 p)\r\n{\r\n    return p.gba * 2.0 - 1.0;\r\n}\r\nfloat CompareNormal(vec3 d1, vec3 d2)\r\n{\r\n    return smoothstep(0.8, 1.0, dot(d1, d2));\r\n}\r\nfloat GetPackedAO(vec4 p)\r\n{\r\n    return p.r;\r\n}\r\n\r\n// Geometry-aware bilateral filter (single pass/small kernel)\r\nfloat BlurSmall(sampler2D tex, vec2 uv, vec2 delta)\r\n{\r\n    vec4 p0 = texture2D(tex, uv);\r\n    vec2 uvtran = uv + vec2(-delta.x, -delta.y);\r\n    vec4 p1 = texture2D(tex, uvtran);\r\n    uvtran = uv + vec2(delta.x, -delta.y);\r\n    vec4 p2 = texture2D(tex, uvtran);\r\n    uvtran = uv + vec2(-delta.x, delta.y);\r\n    vec4 p3 = texture2D(tex, uvtran);\r\n    uvtran = uv + delta;\r\n    vec4 p4 = texture2D(tex, uvtran);\r\n\r\n    vec3 n0 = GetPackedNormal(p0);\r\n\r\n    float w0 = 1.0;\r\n    float w1 = CompareNormal(n0, GetPackedNormal(p1));\r\n    float w2 = CompareNormal(n0, GetPackedNormal(p2));\r\n    float w3 = CompareNormal(n0, GetPackedNormal(p3));\r\n    float w4 = CompareNormal(n0, GetPackedNormal(p4));\r\n\r\n    float s;\r\n    s = GetPackedAO(p0) * w0;\r\n    s += GetPackedAO(p1) * w1;\r\n    s += GetPackedAO(p2) * w2;\r\n    s += GetPackedAO(p3) * w3;\r\n    s += GetPackedAO(p4) * w4;\r\n\r\n    return s / (w0 + w1 + w2 + w3 + w4);\r\n}\r\n\r\nvoid main()\r\n{\r\n    vec2 uv = v_Texcoord0;\r\n    vec2 delty = u_MainTex_TexelSize.xy;\r\n    float ao = BlurSmall(u_compositionAoTexture, uv, delty);\r\n    vec4 albedo = texture2D(u_MainTex, uv);\r\n#ifdef Gamma_u_MainTex\r\n    albedo = gammaToLinear(albedo);\r\n#endif // Gamma_u_MainTex\r\n    vec4 aocolor = vec4(ao * u_AOColor.rgb, ao);\r\n    albedo.rgb = albedo.rgb * (1.0 - ao) + ao * u_AOColor.rgb * ao;\r\n    gl_FragColor = albedo;\r\n\r\n    gl_FragColor = outputTransform(gl_FragColor);\r\n}","import { AniStateConditionType } from \"../../../components/AnimatorControllerParse\";\r\nimport { AnimatorStateCondition } from \"../../../components/AnimatorStateCondition\";\r\nimport { AnimatorState } from \"./AnimatorState\";\r\n\r\nexport class AnimatorTransition {\r\n    \r\n    /**\r\n     * @internal\r\n     */\r\n    private _name: string;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _mute: boolean;//can,t play on this transition\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _exitTime: number;//退出时间\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _exitByTime: boolean;//是否设置生效时间\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _transstartoffset: number;//归一化的时间的下一个state播放位置\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _transduration: number;//归一化过度时间 0-1\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _conditions: AnimatorStateCondition[];//\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _destState: AnimatorState;\r\n\r\n    /**\r\n     * 创建一个新的Animatortransition\r\n     */\r\n    constructor() {\r\n        this._conditions = [];\r\n        this._exitByTime = true;\r\n        this._exitTime = 0.85;\r\n        this._transduration = 0.15;\r\n        this._transstartoffset = 0;\r\n        this._mute = false;\r\n    }\r\n\r\n    /**\r\n     * 设置过渡名字\r\n     */\r\n    get name() {\r\n        return this._name;\r\n    }\r\n\r\n    set name(value: string) {\r\n        this._name = value;\r\n    }\r\n\r\n    /**\r\n     * 禁用\r\n     */\r\n    get mute() {\r\n        return this._mute;\r\n    }\r\n\r\n    set mute(value: boolean) {\r\n        this._mute = value;\r\n    }\r\n\r\n    /**\r\n     * 目标状态\r\n     */\r\n    get destState() {\r\n        return this._destState;\r\n    }\r\n\r\n    set destState(value: AnimatorState) {\r\n        this._destState = value;\r\n    }\r\n\r\n    /**\r\n     * 设置condition数组\r\n     * IDE\r\n     */\r\n    get conditions() {\r\n        return this._conditions;\r\n    }\r\n\r\n    set conditions(value: AnimatorStateCondition[]) {\r\n        for (var i = this._conditions.length - 1; i >= 0; i--) {\r\n            this.removeCondition(this._conditions[i]);\r\n        }\r\n\r\n        for (var i = 0; i < value.length; i++) {\r\n            this.addCondition(value[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 时间触发\r\n     */\r\n    get exitByTime() {\r\n        return this._exitByTime;\r\n    }\r\n\r\n    set exitByTime(value: boolean) {\r\n        this._exitByTime = value;\r\n    }\r\n\r\n    /**\r\n     * 过度归一化时间（相对于目标State）\r\n     */\r\n    set transduration(value: number) {\r\n        this._transduration = Math.max(0, Math.min(value, 1.0));\r\n    }\r\n\r\n    get transduration() {\r\n        return this._transduration;\r\n    }\r\n\r\n\r\n    /**\r\n    * 目标State播放时间偏移（归一化时间）\r\n    */\r\n    set transstartoffset(value: number) {\r\n        this._transstartoffset = Math.max(0, Math.min(value, 1.0));\r\n    }\r\n\r\n    get transstartoffset() {\r\n        return this._transstartoffset;\r\n    }\r\n\r\n    /**\r\n    * 触发时间（归一化时间）\r\n    */\r\n    set exitTime(value: number) {\r\n        this._exitTime = Math.max(0, Math.min(value, 1.0));\r\n    }\r\n\r\n    get exitTime() {\r\n        return this._exitTime;\r\n    }\r\n\r\n    /**\r\n     * 增加一个条件\r\n     * @param condition \r\n     */\r\n    addCondition(condition: AnimatorStateCondition): void {\r\n        if (this._conditions.indexOf(condition) == -1) {\r\n            this._conditions.push(condition);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 删除一个条件\r\n     * @param condition \r\n     */\r\n    removeCondition(condition: AnimatorStateCondition): void {\r\n        let index = this._conditions.indexOf(condition);\r\n        if (index != -1) {\r\n            this._conditions.splice(index, 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 是否启用过渡\r\n     * @param normalizeTime \r\n     * @param paramsMap \r\n     */\r\n    check(normalizeTime: number, paramsMap: { [key: number]: number | boolean }): boolean {\r\n        if (this._mute) {\r\n            return false;\r\n        }\r\n        if (this._conditions.length == 0) {\r\n            if(normalizeTime>this._exitTime)\r\n                return true;\r\n        } else {\r\n            if (this._exitByTime && normalizeTime < this._exitTime) {\r\n                return false;\r\n            }\r\n            for (var i = 0; i < this._conditions.length; i++) {\r\n                let con = this._conditions[i];\r\n                let out = con.checkState(paramsMap[con.id]);\r\n                if (out) {\r\n                    if (con.type == AniStateConditionType.Trigger)\r\n                        paramsMap[con.id] = false;\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}","import { AnimatorControllerParse, AniParmType, TypeAnimatorConditions, TypeAnimatorControllerData, TypeAnimatorParams, TypeAnimatorState, TypeAnimatorTransition } from \"../../../components/AnimatorControllerParse\";\r\nimport { AnimatorStateCondition, AnimatorStateBoolCondition, AnimatorStateNumberCondition, AnimatorStateTriggerCondition } from \"../../../components/AnimatorStateCondition\";\r\nimport { Resource } from \"../../../resource/Resource\";\r\nimport { ClassUtils } from \"../../../utils/ClassUtils\";\r\nimport { Animator } from \"./Animator\";\r\nimport { AnimatorControllerLayer } from \"./AnimatorControllerLayer\";\r\nimport { AnimatorState } from \"./AnimatorState\";\r\nimport { AnimatorTransition } from \"./AnimatorTransition\";\r\nimport { AvatarMask } from \"./AvatarMask\";\r\n\r\nexport class AnimatorController extends Resource {\r\n    data: TypeAnimatorControllerData;\r\n    clipsID: string[];\r\n    constructor(data: any) {\r\n        super();\r\n        let obj = AnimatorControllerParse.parse(data);\r\n        this.data = obj.ret;\r\n        this.clipsID = obj.clipsID;\r\n    }\r\n\r\n    private getLayers() {\r\n        let layers = this.data.controllerLayers;\r\n        let lArr: AnimatorControllerLayer[] = [];\r\n        for (let i = layers.length - 1; i >= 0; i--) {\r\n            let l = layers[i];\r\n            let acl = new AnimatorControllerLayer(l.name);\r\n            if (l.avatarMask) {\r\n                acl.avatarMask = l.avatarMask;\r\n            }\r\n            lArr.unshift(acl);\r\n            for (let k in l) {\r\n                if (\"avatarMask\" == k || \"name\" == k || \"states\" == k || null == (l as any)[k]) {\r\n                    continue;\r\n                }\r\n                try {\r\n                    (acl as any)[k] = (l as any)[k];\r\n                } catch (err: any) { }\r\n            }\r\n            this.getState(l.states, acl, this.data);\r\n        }\r\n        return lArr;\r\n    }\r\n\r\n    updateTo(a: Animator) {\r\n        let currLayer = (a as any)._controllerLayers;\r\n\r\n        for (let i = 0, len = currLayer.length; i < len; i++) {\r\n            currLayer[i]._removeReference();\r\n        }\r\n        currLayer.length = 0;\r\n\r\n        let layers = this.getLayers();\r\n\r\n        for (let i = 0, len = layers.length; i < len; i++) {\r\n            a.addControllerLayer(layers[i]);\r\n        }\r\n        let parms = this.data.animatorParams;\r\n        if (parms) {\r\n            for (let i = parms.length - 1; i >= 0; i--) {\r\n                let p = parms[i];\r\n                if (AniParmType.Bool == p.type) {\r\n                    a.setParamsBool(p.name, Boolean(p.val));\r\n                } else if (AniParmType.Float == p.type) {\r\n                    let val = Number(p.val);\r\n                    if (isNaN(val)) {\r\n                        val = 0;\r\n                    }\r\n                    a.setParamsNumber(p.name, val);\r\n                } else if (AniParmType.Trigger == p.type) {\r\n                    if (p.val) {\r\n                        a.setParamsTrigger(p.name);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private createState(states: TypeAnimatorState[], idCatch: Record<string, AnimatorState>, acl: AnimatorControllerLayer) {\r\n        if (!states) return null;\r\n        let ret: Record<string, AnimatorState> = {};\r\n        let defID: string = null;\r\n        for (let i = states.length - 1; i >= 0; i--) {\r\n            let obj = states[i];\r\n\r\n            let childStates = obj.states;\r\n\r\n            if (childStates) {\r\n                let groupRet = this.createState(childStates, idCatch, acl);\r\n\r\n                if (groupRet) {\r\n                    idCatch[obj.id] = groupRet.states[groupRet.id];\r\n                }\r\n                continue;\r\n            }\r\n            if (0 > Number(obj.id)) {\r\n                if (\"-1\" == obj.id) {\r\n                    let transitions = obj.soloTransitions;\r\n                    if (transitions && 0 < transitions.length) {\r\n                        defID = transitions[0].id;\r\n                    }\r\n                }\r\n                continue;\r\n            }\r\n            let state = new AnimatorState();\r\n            idCatch[obj.id] = state;\r\n            ret[obj.id] = state;\r\n            for (let k in obj) {\r\n                try {\r\n                    if (\"scripts\" == k) {\r\n                        let scripts: string[] = obj[k];\r\n                        if (scripts && Array.isArray(scripts)) {\r\n                            for (let k = scripts.length - 1; k >= 0; k--) {\r\n                                let uuid = scripts[k];\r\n                                if (uuid && 0 == uuid.indexOf(\"res://\")) {\r\n                                    uuid = uuid.substring(6);\r\n                                }\r\n                                let c = ClassUtils.getClass(uuid);\r\n                                if (c) {\r\n                                    state.addScript(c);\r\n                                }\r\n                            }\r\n                        }\r\n                        continue;\r\n                    } else if (\"soloTransitions\" == k) {\r\n                        continue;\r\n                    } else if (null != (obj as any)[k]) {\r\n                        (state as any)[k] = (obj as any)[k];\r\n                    }\r\n                } catch (err: any) { }\r\n            }\r\n            acl.addState(state);\r\n        }\r\n        return { id: defID, states: ret };\r\n    }\r\n\r\n\r\n    private setExitTransition(exitRet: Record<string, TypeAnimatorTransition[]>, transitions: TypeAnimatorTransition[], idCatch: Record<string, AnimatorState>, data: TypeAnimatorControllerData, pExitRet: Record<string, TypeAnimatorTransition[]>) {\r\n        for (let id in exitRet) {\r\n            let state = idCatch[id];\r\n            if (state) {\r\n                let ats: AnimatorTransition[] = state.transitions;\r\n                let sts: AnimatorTransition[] = state.soloTransitions;\r\n                let linArr = exitRet[id];\r\n                for (let i = transitions.length - 1; i >= 0; i--) {\r\n                    let t = transitions[i];\r\n                    if (\"-3\" == t.id) {\r\n                        if (null == pExitRet[id]) {\r\n                            pExitRet[id] = [];\r\n                        }\r\n                        pExitRet[id].push(t);\r\n                        continue;\r\n                    }\r\n                    for (let j = linArr.length - 1; j >= 0; j--) {\r\n                        let t2 = linArr[j];\r\n                        let ato = new AnimatorTransition();\r\n                        ato.destState = idCatch[t.id];\r\n                        if (t.conditions) {\r\n                            this.addConditions(t.conditions, ato, data);\r\n                        }\r\n                        if (t2.conditions) {\r\n                            this.addConditions(t2.conditions, ato, data);\r\n                        }\r\n                        for (let k in t) {\r\n                            if (\"solo\" == k || \"id\" == k || \"conditions\" == k) {\r\n                                continue;\r\n                            } else {\r\n                                (ato as any)[k] = (t as any)[k];\r\n                            }\r\n                        }\r\n                        if (t.solo) {\r\n                            sts.unshift(ato);\r\n                        } else {\r\n                            ats.unshift(ato);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    private setTransitions(states: TypeAnimatorState[], idCatch: Record<string, AnimatorState>, acl: AnimatorControllerLayer, data: TypeAnimatorControllerData, pState?: TypeAnimatorState) {\r\n        if (!states) return null;\r\n        let exitRet: Record<string, TypeAnimatorTransition[]> = {};\r\n        for (let i = states.length - 1; i >= 0; i--) {\r\n            let obj = states[i];\r\n            if (obj.states) {\r\n                let exitTransition = this.setTransitions(obj.states, idCatch, acl, data, obj);\r\n                if (exitTransition) {\r\n                    let transitions = obj.soloTransitions;\r\n                    if (transitions) {\r\n                        this.setExitTransition(exitTransition, transitions, idCatch, data, exitRet);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        for (let i = states.length - 1; i >= 0; i--) {\r\n            let obj = states[i];\r\n            if (obj.states) {\r\n                continue;\r\n            }\r\n            if (\"-1\" == obj.id) {\r\n                if (obj.soloTransitions && 0 < obj.soloTransitions.length) {\r\n                    if (null == pState) {\r\n                        acl.defaultState = idCatch[obj.soloTransitions[0].id];\r\n                    } else {\r\n                        idCatch[pState.id] = idCatch[obj.soloTransitions[0].id];\r\n                    }\r\n                    continue;\r\n                }\r\n            } else if (\"-2\" == obj.id) {\r\n                let transitions = obj.soloTransitions;\r\n                if (transitions) {\r\n                    for (let j = transitions.length - 1; j >= 0; j--) {\r\n                        let o = transitions[j];\r\n                        let destState = idCatch[o.id];\r\n                        if (destState) {\r\n                            for (let idk in idCatch) {\r\n                                let state = idCatch[idk];\r\n                                let ato = new AnimatorTransition();\r\n                                ato.destState = destState;\r\n                                if (o.conditions) {\r\n                                    this.addConditions(o.conditions, ato, data);\r\n                                }\r\n\r\n                                for (let k in o) {\r\n                                    if (\"solo\" == k || \"id\" == k || \"conditions\" == k) {\r\n                                        continue;\r\n                                    } else {\r\n                                        (ato as any)[k] = (o as any)[k];\r\n                                    }\r\n                                }\r\n\r\n                                if (o.solo) {\r\n                                    state.soloTransitions.unshift(ato);\r\n                                } else {\r\n                                    state.transitions.unshift(ato);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                continue;\r\n            } else if (\"-3\" == obj.id) {\r\n                continue;\r\n            }\r\n            let soloTransitions = obj.soloTransitions;\r\n            if (soloTransitions && idCatch[obj.id]) {\r\n                let ats: AnimatorTransition[] = idCatch[obj.id].transitions;\r\n                let sts: AnimatorTransition[] = idCatch[obj.id].soloTransitions;\r\n                for (let j = soloTransitions.length - 1; j >= 0; j--) {\r\n                    let o = soloTransitions[j];\r\n                    if (\"-3\" == o.id) {\r\n                        if (null == exitRet[obj.id]) {\r\n                            exitRet[obj.id] = [];\r\n                        }\r\n                        exitRet[obj.id].push(o);\r\n                        continue;\r\n                    }\r\n\r\n                    let ato = new AnimatorTransition();\r\n\r\n                    if (idCatch[o.id]) {\r\n                        ato.destState = idCatch[o.id];\r\n                    }\r\n                    if (o.conditions) {\r\n                        this.addConditions(o.conditions, ato, data);\r\n                    }\r\n                    for (let k in o) {\r\n                        if (\"solo\" == k || \"id\" == k || \"conditions\" == k) {\r\n                            continue;\r\n                        } else {\r\n                            (ato as any)[k] = (o as any)[k];\r\n                        }\r\n                    }\r\n                    if (o.solo) {\r\n                        sts.unshift(ato);\r\n                    } else {\r\n                        ats.unshift(ato);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return exitRet;\r\n    }\r\n\r\n    private getState(states: TypeAnimatorState[], acl: AnimatorControllerLayer, data: TypeAnimatorControllerData) {\r\n        if (states) {\r\n            let idCatch: Record<string, AnimatorState> = {};\r\n            this.createState(states, idCatch, acl);\r\n            this.setTransitions(states, idCatch, acl, data);\r\n        }\r\n    }\r\n\r\n    private addConditions(arr: TypeAnimatorConditions[], ato: AnimatorTransition, data: TypeAnimatorControllerData) {\r\n        let parms = data.animatorParams;\r\n        if (null == parms || 0 == parms.length) return;\r\n        for (let i = 0, len = arr.length; i < len; i++) {\r\n            let o = arr[i];\r\n            let parm: TypeAnimatorParams = null;\r\n            for (let j = parms.length - 1; j >= 0; j--) {\r\n                if (parms[j].id == o.id) {\r\n                    parm = parms[j];\r\n                    break;\r\n                }\r\n            }\r\n            if (null == parm) {\r\n                return;\r\n            }\r\n            let c: AnimatorStateCondition;\r\n            if (parm.type == AniParmType.Bool) {\r\n                let b = new AnimatorStateBoolCondition(parm.name);\r\n                b.compareFlag = Boolean(o.checkValue);\r\n                c = b;\r\n            } else if (parm.type == AniParmType.Float) {\r\n                let n = new AnimatorStateNumberCondition(parm.name);\r\n                n.numberValue = Number(o.checkValue);\r\n                n.compareFlag = o.type;\r\n                c = n;\r\n            } else if (parm.type == AniParmType.Trigger) {\r\n                let t = new AnimatorStateTriggerCondition(parm.name);\r\n                c = t;\r\n            }\r\n            ato.addCondition(c);\r\n        }\r\n    }\r\n}","/**\r\n * @internal\r\n */\r\nexport class BatchMark {\r\n\t/**@internal */\r\n\tupdateMark: number = -1;\r\n\t/**@internal */\r\n\tindexInList: number = -1;\r\n\t/**@internal */\r\n\tbatched: boolean = false;\r\n}\r\n\r\n","import { BatchMark } from \"../../core/render/BatchMark\";\r\n/**\r\n * @internal\r\n */\r\nexport class InstanceBatchManager {\r\n    /** @internal */\r\n    static instance = new InstanceBatchManager();\r\n    /**@internal */\r\n    private _instanceBatchOpaqueMarks: any[] = [];\r\n    /**@internal [只读]*/\r\n    updateCountMark: number = 0;\r\n    constructor() {\r\n    }\r\n\r\n    /**\r\n     * get batch index\r\n     */\r\n    private _getData<T>(key: boolean | number, data: any, cls?: new () => T): T {\r\n        if (null == cls) {\r\n            cls = Array as any;\r\n        }\r\n        if (\"boolean\" == typeof key) {\r\n            return (data[key ? 0 : 1]) || (data[key ? 0 : 1] = new cls());\r\n        } else {\r\n            return data[key] || (data[key] = new cls());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * get batchMark by render property\r\n     * @param receiveShadow \r\n     * @param materialID \r\n     * @param subMeshID \r\n     * @param invertFace \r\n     * @returns \r\n     */\r\n    getInstanceBatchOpaquaMark(receiveShadow: boolean, materialID: number, subMeshID: number, invertFace: boolean,reflectionprob:number):BatchMark{\r\n        var data = this._getData(receiveShadow, this._instanceBatchOpaqueMarks);\r\n        data = this._getData(materialID, data);\r\n        data = this._getData(subMeshID, data);\r\n        data =this._getData(invertFace, data);\r\n        return this._getData(reflectionprob,data,BatchMark);\r\n        \r\n    }\r\n}","import { Vector3 } from \"../../../../maths/Vector3\";\r\nimport { SingletonList } from \"../../../../utils/SingletonList\";\r\nimport { Camera } from \"../../../core/Camera\";\r\nimport { BaseRender, RenderBitFlag } from \"../../../core/render/BaseRender\";\r\nimport { InstanceRenderElement } from \"../../../core/render/InstanceRenderElement\";\r\nimport { Scene3D } from \"../../../core/scene/Scene3D\";\r\nconst tempVec = new Vector3();\r\nconst tempVec1 = new Vector3();\r\n/**\r\n * 类用来描述合批的渲染节点\r\n */\r\nexport class BatchRender extends BaseRender {\r\n    /**@internal */\r\n    protected _checkLOD: boolean;\r\n    protected _lodCount: number;\r\n    protected _lodRateArray: number[];\r\n    protected _batchList: SingletonList<BaseRender>;\r\n    protected _batchbit: RenderBitFlag;\r\n    protected _RenderBitFlag: RenderBitFlag;\r\n    protected _lodInstanceRenderElement: { [key: number]: InstanceRenderElement[] } = {};\r\n    protected _lodsize: number;\r\n    private _cacheLod: number;\r\n\r\n    /**\r\n     * 创建一个 <code>BatchRender</code> 实例。\r\n     */\r\n    constructor() {\r\n        super();\r\n        this._RenderBitFlag = RenderBitFlag.RenderBitFlag_Batch;\r\n        this._renderElements = [];\r\n        this._lodInstanceRenderElement[-1] = [];\r\n        this._batchList = new SingletonList<BaseRender>();\r\n    }\r\n\r\n    /**\r\n     * 是否根据lod来合批\r\n     */\r\n    get checkLOD() {\r\n        return this._checkLOD;\r\n    }\r\n\r\n    set checkLOD(value: boolean) {\r\n        this._checkLOD = value;\r\n    }\r\n\r\n    /**\r\n     * lod裁剪过滤\r\n     */\r\n    set lodCullRateArray(value: number[]) {\r\n        if (!this._checkLOD) {\r\n            return;\r\n        }\r\n        value.sort((a, b) => b - a);\r\n        this._lodRateArray = value;\r\n    }\r\n\r\n    get lodCullRateArray() {\r\n        return this._lodRateArray;\r\n    }\r\n\r\n\r\n    /**\r\n     * Overrid it\r\n     *  是否满足batch条件\r\n     */\r\n    protected _canBatch(render: BaseRender): boolean {\r\n        if (render._batchRender) {\r\n            return false;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    protected _onEnable(): void {\r\n        super._onEnable();\r\n        if (this._batchList) {\r\n            for (let i = 0, n = this._batchList.length; i < n; i++) {\r\n                this._batchList.elements[i].setRenderbitFlag(this._RenderBitFlag, true);\r\n            }\r\n        }\r\n    }\r\n\r\n    protected _onDisable(): void {\r\n        super._onDisable();\r\n        if (this._batchList) {\r\n            for (let i = 0, n = this._batchList.length; i < n; i++) {\r\n                this._batchList.elements[i].setRenderbitFlag(this._RenderBitFlag, false);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 根据lod的改变\r\n     */\r\n    protected _changeLOD(lod: number) {\r\n        if (this._cacheLod == lod) {\r\n            return;\r\n        }\r\n\r\n        if(this._cacheLod == this.lodCullRateArray.length - 1)\r\n        {\r\n            lod = -1;\r\n        }\r\n        \r\n        this._renderElements = this._lodInstanceRenderElement[lod];\r\n        if (this._lodInstanceRenderElement[lod] && lod != -1) {\r\n            this._renderElements || (this._renderElements = []);\r\n            this._renderElements = this._renderElements.concat(this._lodInstanceRenderElement[-1]);\r\n        } else {\r\n            this._renderElements = this._lodInstanceRenderElement[-1];\r\n        }\r\n\r\n    }\r\n\r\n    onPreRender() {\r\n        if (!this.checkLOD || !this._lodRateArray || this._lodRateArray.length < 1) {\r\n            this._changeLOD(0);\r\n        } else {\r\n            let checkCamera = (this.owner.scene as Scene3D).cullInfoCamera as Camera;\r\n            let maxYDistance = checkCamera.maxlocalYDistance;\r\n            Vector3.subtract(this._bounds.getCenter(), checkCamera.transform.position, tempVec);\r\n            //大于farplane,或者不在视锥内.不做lod操作\r\n            let length = tempVec.length();\r\n            let rateYDistance = length / checkCamera.farPlane * maxYDistance;\r\n            let rate = (this._lodsize / rateYDistance);\r\n            for (let i = 0; i < this._lodRateArray.length; i++) {\r\n                if (rate < this._lodRateArray[i])\r\n                    continue;\r\n                this._changeLOD(i);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param render \r\n     */\r\n    _batchOneRender(render: BaseRender): boolean {\r\n        //TODO\r\n        return false\r\n    }\r\n\r\n    /**\r\n     * @param render \r\n     */\r\n    _removeOneRender(render: BaseRender) {\r\n        //TODO\r\n    }\r\n\r\n    /**\r\n     * @param render \r\n     */\r\n    _updateOneRender(render: BaseRender) {\r\n        //TODO\r\n    }\r\n\r\n    /**\r\n     * 合批队列传入\r\n     * @param renderNodes \r\n     */\r\n    addList(renderNode: BaseRender[]) {\r\n        for (var i = 0, n = renderNode.length; i < n; i++) {\r\n            let baseRender = renderNode[i];\r\n            if (this._canBatch(baseRender)) {\r\n                this._batchList.add(baseRender);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 根据_batchList合批\r\n     */\r\n    reBatch() {\r\n        let renderNums = this._batchList.length;\r\n        let renders = this._batchList.elements;\r\n        for (var i = 0; i < renderNums; i++) {\r\n            let render = renders[i];\r\n            this._batchOneRender(render);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Restoring the Batch Render State\r\n     */\r\n    _restorRenderNode() {\r\n        for (let i = 0, n = this._batchList.length; i < n; i++) {\r\n            this._removeOneRender(this._batchList.elements[i]);\r\n        }\r\n    }\r\n\r\n    _clear() {\r\n        this._restorRenderNode();\r\n        this._renderElements = [];\r\n        this._batchList.destroy();\r\n        this._batchList = new SingletonList<BaseRender>();\r\n        this._lodInstanceRenderElement = {};\r\n        this._lodInstanceRenderElement[-1] = [];\r\n\r\n    }\r\n}","import { SingletonList } from \"../../../../utils/SingletonList\";\r\nimport { BaseRender, RenderBitFlag } from \"../../../core/render/BaseRender\";\r\nimport { BatchMark } from \"../../../core/render/BatchMark\";\r\nimport { InstanceRenderElement } from \"../../../core/render/InstanceRenderElement\";\r\nimport { RenderElement } from \"../../../core/render/RenderElement\";\r\nimport { InstanceBatchManager } from \"../../../graphics/Batch/InstanceBatchManager\";\r\nimport { MeshInstanceGeometry } from \"../../../graphics/MeshInstanceGeometry\";\r\nimport { Bounds } from \"../../../math/Bounds\";\r\nimport { SubMesh } from \"../../../resource/models/SubMesh\";\r\nimport { BatchRender } from \"./BatchRender\";\r\n\r\n/**\r\n * <code>StaticInstanceBatchRender</code> 类用于创建动作状态。\r\n */\r\nexport class StaticInstanceBatchRender extends BatchRender {\r\n\r\n    /**@internal instanceBatchManager*/\r\n    private _batchManager: InstanceBatchManager;\r\n\r\n    /**@internal  记录每个BatchMask对应的Instance的数量*/\r\n    private _insBatchMarksNums: number[] = [];\r\n\r\n    /**@interal */\r\n    private _insElementMarksArray: InstanceRenderElement[] = [];\r\n\r\n    /**@interal batch rule:Batch min count*/\r\n    private _instanceBatchminNums: number = 10;\r\n\r\n    /**@interal cache udpate element*/\r\n    private _updateChangeElement: InstanceRenderElement[] = [];\r\n\r\n    /**\r\n     * 创建一个 <code>StaticInstanceBatchRender</code> 实例。\r\n     */\r\n    constructor() {\r\n        super();\r\n        this.checkLOD = true;\r\n        this._batchManager = new InstanceBatchManager();\r\n        this._RenderBitFlag = RenderBitFlag.RenderBitFlag_InstanceBatch;\r\n    }\r\n\r\n    /**\r\n     * 判断这个Render是否支持InstanceBatch\r\n     * @param render \r\n     * @returns \r\n     */\r\n    private _isRenderNodeAllCanInstanceBatch(render: BaseRender): boolean {\r\n        let elements = render._renderElements;\r\n        for (var i = 0, n = elements.length; i < n; i++) {\r\n            let element = elements[i];\r\n            if (!element.material._shader._enableInstancing || element.render.lightmapIndex > 0) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 计算Instance合并数量\r\n     * @param render \r\n     */\r\n    private _sumInstanceBatch(render: BaseRender) {\r\n        let elements = render._renderElements;\r\n        for (var i = 0, n = elements.length; i < n; i++) {\r\n            let element = elements[i];\r\n            var insBatchMarks = this._batchManager.getInstanceBatchOpaquaMark(element.render.receiveShadow, element.material.id, element._geometry._id, element.transform ? element.transform._isFrontFaceInvert : false, element.render._probReflection ? element.render._probReflection.id : -1);\r\n            if (insBatchMarks.indexInList == -1) {\r\n                insBatchMarks.indexInList = this._insBatchMarksNums.length;\r\n                this._insBatchMarksNums.push(0);\r\n            }\r\n            this._insBatchMarksNums[insBatchMarks.indexInList] += 1;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * batch one element\r\n     * @param element \r\n     * @param render \r\n     * @returns \r\n     */\r\n    private _batchOneElement(element: RenderElement, render: BaseRender) {\r\n        var insBatchMarks = this._batchManager.getInstanceBatchOpaquaMark(element.render.receiveShadow, element.material.id, element._geometry._id, element.transform ? element.transform._isFrontFaceInvert : false, element.render._probReflection ? element.render._probReflection.id : -1);\r\n        if (insBatchMarks.indexInList == -1)\r\n            return;\r\n        let instanceelement: InstanceRenderElement = this._insElementMarksArray[insBatchMarks.indexInList];\r\n        if (!instanceelement) {\r\n            instanceelement = this._createInstanceElement(element, render, insBatchMarks);\r\n        }\r\n        let list = instanceelement._instanceBatchElementList;\r\n        if (list.length == InstanceRenderElement.maxInstanceCount) {\r\n            this._insBatchMarksNums.push(this._insBatchMarksNums[insBatchMarks.indexInList]);\r\n            insBatchMarks.indexInList = this._insBatchMarksNums.length - 1;\r\n            instanceelement = this._createInstanceElement(element, render, insBatchMarks);\r\n            list = instanceelement._instanceBatchElementList;\r\n        }\r\n        if (list.indexof(element) == -1) {\r\n            list.add(element);\r\n            instanceelement._isUpdataData = true;\r\n            (this._updateChangeElement.indexOf(instanceelement) == -1) && this._updateChangeElement.push(instanceelement);\r\n            element._batchElement = instanceelement;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * remove one element\r\n     * @param element \r\n     * @param render \r\n     * @returns \r\n     */\r\n    private _removeOneElement(element: RenderElement, render: BaseRender) {\r\n        var insBatchMarks = this._batchManager.getInstanceBatchOpaquaMark(element.render.receiveShadow, element.material.id, element._geometry._id, element.transform ? element.transform._isFrontFaceInvert : false, element.render._probReflection ? element.render._probReflection.id : -1);\r\n        if (insBatchMarks.indexInList == -1)\r\n            return;\r\n        let instanceelement: InstanceRenderElement = element._batchElement as InstanceRenderElement;\r\n        if (!instanceelement || this._renderElements.indexOf(instanceelement) == -1) {\r\n            return;\r\n        }\r\n        let list = instanceelement._instanceBatchElementList;\r\n        if (list.indexof(element) != -1) {\r\n            list.remove(element);\r\n            instanceelement._isUpdataData = true;\r\n            (this._updateChangeElement.indexOf(instanceelement) == -1) && this._updateChangeElement.push(instanceelement);\r\n            element._batchElement = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * update one element\r\n     * @param element \r\n     * @param render \r\n     * @returns \r\n     */\r\n    private _updateOneElement(element: RenderElement, render: BaseRender) {\r\n        let instanceelement: InstanceRenderElement = element._batchElement as InstanceRenderElement;\r\n        if (!instanceelement || this._renderElements.indexOf(instanceelement) == -1) {\r\n            return;\r\n        }\r\n        let list = instanceelement._instanceBatchElementList;\r\n        if (list.indexof(element) != -1) {\r\n            instanceelement._isUpdataData = true;\r\n            (this._updateChangeElement.indexOf(instanceelement) == -1) && this._updateChangeElement.push(instanceelement);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * create instanceElement\r\n     * @param element \r\n     * @param render \r\n     * @param batchMark \r\n     * @returns \r\n     */\r\n    private _createInstanceElement(element: RenderElement, render: BaseRender, batchMark: BatchMark) {\r\n        let instanceRenderElement = new InstanceRenderElement();\r\n        instanceRenderElement.render = render;\r\n        instanceRenderElement.renderType = RenderElement.RENDERTYPE_INSTANCEBATCH;\r\n        //Geometry updaste\r\n        (instanceRenderElement._geometry as MeshInstanceGeometry).subMesh = (element._geometry as SubMesh);\r\n        instanceRenderElement.material = element.material;\r\n        instanceRenderElement.setTransform(null);\r\n        instanceRenderElement.renderSubShader = element.renderSubShader;\r\n        let list = instanceRenderElement._instanceBatchElementList;\r\n        list.length = 0;\r\n        list.add(element);\r\n        this._insElementMarksArray[batchMark.indexInList] = instanceRenderElement;\r\n        batchMark.batched = true;\r\n        if (!this._lodInstanceRenderElement[render._LOD]) {\r\n            this._lodInstanceRenderElement[render._LOD] = [];\r\n        }\r\n        this._lodInstanceRenderElement[render._LOD].push(instanceRenderElement);\r\n        return instanceRenderElement;\r\n    }\r\n\r\n    /**\r\n     * 是否满足batch条件\r\n     * @override\r\n     * @param render \r\n     * @returns \r\n     */\r\n    protected _canBatch(render: BaseRender): boolean {\r\n        let elements = render._renderElements;\r\n        for (var i = 0, n = elements.length; i < n; i++) {\r\n            let element = elements[i];\r\n            var insBatchMarks = this._batchManager.getInstanceBatchOpaquaMark(element.render.receiveShadow, element.material.id, element._geometry._id, element.transform ? element.transform._isFrontFaceInvert : false, element.render._probReflection ? element.render._probReflection.id : -1);\r\n            if (this._insBatchMarksNums[insBatchMarks.indexInList] < this._instanceBatchminNums || element.material.renderQueue >= 3000) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @override\r\n     * @internal\r\n     * 重新计算包围盒\r\n     */\r\n    protected _calculateBoundingBox() {\r\n        let bound = this._bounds;\r\n        for (let i = 0, n = this._batchList.length; i < n; i++) {\r\n            if (i == 0) {\r\n                this._batchList.elements[i].bounds.cloneTo(bound);\r\n            } else {\r\n                Bounds.merge(bound, this._batchList.elements[i].bounds, bound);\r\n            }\r\n        }\r\n        let extend = this._bounds.getExtent();\r\n        this._lodsize = 2 * Math.max(extend.x, extend.y, extend.z);\r\n        return this._bounds;\r\n    }\r\n\r\n    /**\r\n     * destroy\r\n     */\r\n    protected _onDestroy() {\r\n        super._onDestroy();\r\n    }\r\n\r\n    /**\r\n     * 添加合批到render\r\n     * @param render \r\n     * @internal\r\n     * @returns \r\n     */\r\n    _batchOneRender(render: BaseRender) {\r\n        if (!this._canBatch(render)) return false;\r\n        this.boundsChange = true;\r\n        let elements = render._renderElements;\r\n        for (let i = 0, n = elements.length; i < n; i++) {\r\n            let renderelement = elements[i];\r\n            this._batchOneElement(renderelement, render);\r\n        }\r\n        render._batchRender = this;\r\n        render.setRenderbitFlag(RenderBitFlag.RenderBitFlag_InstanceBatch, true);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 删除合批\r\n     * @Override\r\n     * @internal\r\n     * @param render \r\n     * @returns \r\n     */\r\n    _removeOneRender(render: BaseRender) {\r\n        if (!this._canBatch(render)) return;\r\n        if (this._batchList.indexof(render) != -1) {\r\n            this.boundsChange = true;\r\n            let elements = render._renderElements;\r\n            for (let i = 0, n = elements.length; i < n; i++) {\r\n                let renderelement = elements[i];\r\n                this._removeOneElement(renderelement, render);\r\n            }\r\n            render._batchRender = null;\r\n            render.setRenderbitFlag(RenderBitFlag.RenderBitFlag_InstanceBatch, false);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 合批过的更新数据\r\n     * @override\r\n     * @internal\r\n     * @param render \r\n     * @returns \r\n     */\r\n    _updateOneRender(render: BaseRender) {\r\n        if (!this._canBatch(render)) return;\r\n        if (this._batchList.indexof(render) != -1) {\r\n            this.boundsChange = true;\r\n            let elements = render._renderElements;\r\n            for (let i = 0, n = elements.length; i < n; i++) {\r\n                let renderelement = elements[i];\r\n                this._updateOneElement(renderelement, render);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * 清理所有渲染\r\n     */\r\n    _clear() {\r\n        super._clear();\r\n        this._insElementMarksArray.forEach(element => {\r\n            element && element.destroy();\r\n        });\r\n        \r\n        this._insElementMarksArray = [];\r\n        this._updateChangeElement = [];\r\n        this._insBatchMarksNums = [];\r\n    }\r\n\r\n\r\n\r\n    /**\r\n    * 合批队列传入\r\n    * @param renderNodes\r\n    */\r\n    addList(renderNodes: BaseRender[]) {\r\n        if (!this._batchList) {\r\n            this._batchList = new SingletonList<BaseRender>();\r\n        }\r\n        let renders: BaseRender[] = [];\r\n        for (var i = 0; i < renderNodes.length; i++) {\r\n            let baseRender = renderNodes[i];\r\n            if (baseRender._batchRender) {\r\n                continue;\r\n            }\r\n            if (this._isRenderNodeAllCanInstanceBatch(baseRender)) {\r\n                // this._batchList.add(baseRender);\r\n                renders.push(baseRender);\r\n                this._sumInstanceBatch(baseRender);\r\n            }\r\n        }\r\n        for (var i = 0, n = renders.length; i < n; i++) {\r\n            let baseRender = renders[i];\r\n            if (this._canBatch(baseRender)) {\r\n                this._batchList.add(baseRender);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 根据_batchList合批\r\n     */\r\n    reBatch() {\r\n        let renderNums = this._batchList.length;\r\n        let renders = this._batchList.elements;\r\n        for (var i = 0; i < renderNums; i++) {\r\n            let render = renders[i];\r\n            this._batchOneRender(render);\r\n        }\r\n    }\r\n\r\n}","import { BaseRender } from \"../../../core/render/BaseRender\";\r\nimport { BatchRender } from \"./BatchRender\";\r\n\r\nexport class StatiVertexMergeBatchRender extends BatchRender {\r\n    \r\n    //TODO 好像基类不需要\r\n    _addList(renderNodes: BaseRender[]) {\r\n        //TODO  add list\r\n    }\r\n}","import { SingletonList } from \"../../../../utils/SingletonList\";\r\nimport { BaseRender } from \"../../../core/render/BaseRender\";\r\nimport { Sprite3D, StaticFlag } from \"../../../core/Sprite3D\";\r\nimport { Volume } from \"../Volume\";\r\nimport { BatchRender } from \"./BatchRender\";\r\nimport { StaticInstanceBatchRender } from \"./StaticInstanceBatchRender\";\r\nimport { StatiVertexMergeBatchRender } from \"./StatiVertexMergeBatchRender\";\r\n\r\n/**\r\n * 类用来描述一个可合并渲染节点的体积\r\n */\r\nexport class StaticBatchVolume extends Volume {\r\n\r\n    /**@internal 缓存可以合并的*/\r\n    private _cacheRender: SingletonList<BaseRender>;\r\n\r\n    /**@internal 已经合并了的BaseRender */\r\n    private _batchRender: SingletonList<BaseRender>;\r\n\r\n    /**@internal 是否根据LOD属性优化 */\r\n    private _checkLOD: boolean;//是否考虑LOD\r\n\r\n    /** StaticInstanceBatch */\r\n    /**@internal 是否开启静态物体Instance的合批 */\r\n    private _enableStaticInstanceBatch: boolean;\r\n\r\n    /**@internal 内置静态物体Instance合批 */\r\n    private _instanceBatchRender: StaticInstanceBatchRender;\r\n\r\n    /**StaticVertexMergeBatch */\r\n    /**@internal 是否开启顶点静态合批 TODO */\r\n    private _enableStaticVertexMergeBatch: boolean;\r\n\r\n    /**@internal 顶点静态合批  TODO*/\r\n    private _vertexMergeBatchRender: StatiVertexMergeBatchRender;\r\n\r\n    /**@internal CustomBatch自定义的batch流程*/\r\n    private _enableCustomBatch: boolean;\r\n\r\n    /**@internal */\r\n    private _customBatchs: BatchRender[] = [];\r\n\r\n    /**\r\n     * @internal\r\n     * @returns \r\n     */\r\n    private _getStaticInstanceBatchRender(): StaticInstanceBatchRender {\r\n        let render = (this.owner as Sprite3D).getComponent(StaticInstanceBatchRender);\r\n        if (!render) {\r\n            render = (this.owner as Sprite3D).addComponent(StaticInstanceBatchRender) as StaticInstanceBatchRender;\r\n        }\r\n        return render;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @returns \r\n     */\r\n    private _getStatiVertexMergeBatchRender(): StatiVertexMergeBatchRender {\r\n        let render = (this.owner as Sprite3D).getComponent(StatiVertexMergeBatchRender);\r\n        if (!render) {\r\n            render = (this.owner as Sprite3D).addComponent(StatiVertexMergeBatchRender) as StatiVertexMergeBatchRender;\r\n        }\r\n        return render;\r\n    }\r\n\r\n    /**\r\n     * 合批是否考虑LOD\r\n     */\r\n    get checkLOD(): boolean {\r\n        return this._checkLOD;\r\n    }\r\n\r\n    set checkLOD(value: boolean) {\r\n        this._checkLOD = value;\r\n        if (this._enableStaticInstanceBatch) {\r\n            this._instanceBatchRender.checkLOD = value;\r\n        }\r\n        if (this._enableStaticVertexMergeBatch) {\r\n            this._vertexMergeBatchRender.checkLOD = value;\r\n        }\r\n        if (this._enableCustomBatch) {\r\n            this._customBatchs.forEach(element => {\r\n                element.checkLOD = value;\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 开启静态Instance实例合批\r\n     */\r\n    get enableStaticInstanceBatchRender(): boolean {\r\n        return this._enableStaticInstanceBatch;\r\n    }\r\n\r\n    set enableStaticInstanceBatchRender(value: boolean) {\r\n        if (!this._instanceBatchRender && value) {\r\n            this._instanceBatchRender = this._getStaticInstanceBatchRender();\r\n        }\r\n        if (value == this._enableStaticInstanceBatch)\r\n            return;\r\n        if (value) {\r\n            this._instanceBatchRender.enabled = true;\r\n        } else {\r\n            this._instanceBatchRender.enabled = false;\r\n        }\r\n        this._enableStaticInstanceBatch = value;\r\n    }\r\n\r\n    /**\r\n     * 开启静态顶点合批\r\n     */\r\n    get enableMergeBatchRender() {\r\n        return this._enableStaticVertexMergeBatch;\r\n    }\r\n\r\n    set enableMergeBatchRender(value: boolean) {\r\n        if (!this._vertexMergeBatchRender && value) {\r\n            this._vertexMergeBatchRender = this._getStatiVertexMergeBatchRender();\r\n        }\r\n        if (value == this._enableStaticVertexMergeBatch)\r\n            return;\r\n        if (value) {\r\n            this._vertexMergeBatchRender.enabled = true;\r\n        } else {\r\n            this._vertexMergeBatchRender.enabled = false;\r\n        }\r\n        this._enableStaticVertexMergeBatch = value;\r\n    }\r\n\r\n    /**\r\n     * 开启自定义合批\r\n     */\r\n    get enableCustomBatchRender() {\r\n        return this._enableCustomBatch;\r\n    }\r\n\r\n    set enableCustomBatchRender(value: boolean) {\r\n        this._enableCustomBatch = value;\r\n        this._customBatchs.forEach(element => {\r\n            element.enabled = value;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 设置自定义的合批方案BatchRender\r\n     */\r\n    set customBatchRenders(value: BatchRender[]) {\r\n        if (this._customBatchs) {\r\n            this._customBatchs.forEach(element => {\r\n                (this.owner as Sprite3D)._destroyComponent(element);\r\n            });\r\n        }\r\n        this._customBatchs = value;\r\n        this._customBatchs.forEach(element => {\r\n            (this.owner as Sprite3D).addComponentInstance(element);\r\n        });\r\n        this.enableCustomBatchRender = this._enableCustomBatch;\r\n    }\r\n\r\n    get customBatchRenders() {\r\n        return this._customBatchs;\r\n    }\r\n\r\n    /**\r\n     * 创建一个<code>BatchVolume</code>实例\r\n     */\r\n    constructor() {\r\n        super();\r\n        this.checkLOD = true;\r\n        this._enableStaticInstanceBatch = false;\r\n        this._enableStaticVertexMergeBatch = false;\r\n        this._cacheRender = new SingletonList<BaseRender>();\r\n        this._batchRender = new SingletonList<BaseRender>();\r\n        this._enableCustomBatch = false;\r\n    }\r\n\r\n    /**     \r\n     * Restoring the Batch Render State\r\n     */\r\n    private _restorRenderNode() {\r\n        if (this.enableCustomBatchRender) {\r\n            this._customBatchs.forEach(element => {\r\n                element._clear();\r\n            });\r\n        }\r\n        if (this._enableStaticInstanceBatch) {\r\n            this._instanceBatchRender._clear();\r\n        }\r\n        if (this.enableCustomBatchRender) {\r\n            this._vertexMergeBatchRender._clear();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * add one RenderNode\r\n     * @param renderNode \r\n     * @returns \r\n     */\r\n    private __addRenderNodeToBatch(renderNode: BaseRender) {\r\n        //动态增加合并批次\r\n        if (this.enableCustomBatchRender) {\r\n            this._customBatchs.forEach(element => {\r\n                if (element._batchOneRender(renderNode)) return;\r\n            });\r\n        }\r\n        if (this._enableStaticInstanceBatch) {\r\n            if (this._instanceBatchRender._batchOneRender(renderNode)) return;\r\n        }\r\n        if (this.enableCustomBatchRender) {\r\n            if (this._vertexMergeBatchRender._batchOneRender(renderNode)) return;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * remove one RenderNode\r\n     * @param renderNode \r\n     */\r\n    private __removeRenderNodeFromBatch(renderNode: BaseRender) {\r\n        //动态删除合并批次\r\n        renderNode._batchRender._removeOneRender(renderNode);\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     */\r\n    protected _onEnable(): void {\r\n        super._onEnable();\r\n        if (this._enableStaticInstanceBatch)\r\n            this._instanceBatchRender && (this._instanceBatchRender.enabled = true);\r\n        if (this._enableStaticVertexMergeBatch)\r\n            this._vertexMergeBatchRender && (this._vertexMergeBatchRender.enabled = true);\r\n        if (this.enableCustomBatchRender) {\r\n            this._customBatchs.forEach(element => {\r\n                element.enabled = true;\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     */\r\n    protected _onDisable(): void {\r\n        super._onDisable();\r\n        if (this._enableStaticInstanceBatch)\r\n            this._instanceBatchRender && (this._instanceBatchRender.enabled = false);\r\n        if (this._enableStaticVertexMergeBatch)\r\n            this._vertexMergeBatchRender && (this._vertexMergeBatchRender.enabled = false);\r\n        if (this.enableCustomBatchRender) {\r\n            this._customBatchs.forEach(element => {\r\n                element.enabled = false;\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 当一个渲染节点进入体积\r\n     * @internal\r\n     * @override\r\n     * @param renderNode \r\n     */\r\n    _addRenderNode?(renderNode: BaseRender): void {\r\n        if (renderNode.renderNode.staticMask == StaticFlag.StaticBatch) {\r\n            if (this._cacheRender.indexof(renderNode) != -1) {\r\n                return;\r\n            }\r\n            this._cacheRender.add(renderNode);\r\n            if (this._batchRender.length > 0) {//if batch exited\r\n                this.__addRenderNodeToBatch(renderNode);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 当一个渲染节点移除体积\r\n     * @internal\r\n     * @override\r\n     * @param renderNode    \r\n     */\r\n    _removeRenderNode(renderNode: BaseRender): void {\r\n        if (renderNode.renderNode.staticMask == StaticFlag.StaticBatch) {\r\n            if (this._batchRender.indexof(renderNode) != -1) {\r\n                this.__removeRenderNodeFromBatch(renderNode);\r\n                this._batchRender.remove(renderNode);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * Volume change\r\n     */\r\n    _VolumeChange() {\r\n        super._VolumeChange();\r\n        this._cacheRender.clear();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    onStart() {\r\n        this.reBatch();\r\n    }\r\n\r\n    /**\r\n     * 重新合批,将清理前面状态\r\n     * 必要时需要手动调用,根据Volume里面的值,进行合批\r\n     */\r\n    reBatch() {\r\n        this._cacheRender.elements.length = this._cacheRender.length;\r\n        this._batchRender.clear();\r\n        this._restorRenderNode();\r\n        if (this.enableCustomBatchRender) {\r\n            this._customBatchs.forEach(element => {\r\n                element.addList(this._cacheRender.elements);\r\n                element.reBatch();\r\n            });\r\n        }\r\n        if (this._enableStaticInstanceBatch) {\r\n            this._instanceBatchRender.addList(this._cacheRender.elements);\r\n            this._instanceBatchRender.reBatch();\r\n        }\r\n        if (this.enableCustomBatchRender) {\r\n            this._vertexMergeBatchRender.addList(this._cacheRender.elements);\r\n            this._vertexMergeBatchRender.reBatch();\r\n        }\r\n        //UpdateBatch Render\r\n        for (var i = 0, n = this._cacheRender.length; i < n; i++) {\r\n            (this._cacheRender.elements[i]._batchRender) && this._batchRender.add(this._cacheRender.elements[i]);\r\n        }\r\n    }\r\n}","import { LayaGL } from \"../../../layagl/LayaGL\";\r\nimport { Matrix4x4 } from \"../../../maths/Matrix4x4\";\r\nimport { Vector2 } from \"../../../maths/Vector2\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\nimport { BufferUsage } from \"../../../RenderEngine/RenderEnum/BufferTargetType\";\r\nimport { DrawType } from \"../../../RenderEngine/RenderEnum/DrawType\";\r\nimport { IndexFormat } from \"../../../RenderEngine/RenderEnum/IndexFormat\";\r\nimport { MeshTopology } from \"../../../RenderEngine/RenderEnum/RenderPologyMode\";\r\nimport { VertexMesh } from \"../../../RenderEngine/RenderShader/VertexMesh\";\r\nimport { VertexDeclaration } from \"../../../RenderEngine/VertexDeclaration\";\r\nimport { BufferState } from \"../../../webgl/utils/BufferState\";\r\nimport { IndexBuffer3D } from \"../../graphics/IndexBuffer3D\";\r\nimport { VertexBuffer3D } from \"../../graphics/VertexBuffer3D\";\r\nimport { Bounds } from \"../../math/Bounds\";\r\nimport { Utils3D } from \"../../utils/Utils3D\";\r\nimport { GeometryElement } from \"../GeometryElement\";\r\nimport { RenderContext3D } from \"../render/RenderContext3D\";\r\nimport { UI3D } from \"./UI3D\";\r\n\r\nexport class UI3DGeometry extends GeometryElement {\r\n    /**@internal */\r\n    private static tempV0: Vector3 = new Vector3();\r\n    /**@internal */\r\n    private static _type: number = GeometryElement._typeCounter++;\r\n    /* @internal 顶点buffer*/\r\n    private _vertexBuffer: VertexBuffer3D;\r\n    /* @internal 顶点数据*/\r\n    private _vertex: Float32Array;\r\n    /**@internal indexbuffer */\r\n    private _indexBuffer: IndexBuffer3D;\r\n    /**@internal index数据 */\r\n    private _index: Uint16Array;\r\n    /**@internal */\r\n    private _bound: Bounds;\r\n    /**@internal */\r\n    _positionArray: Vector3[];\r\n\r\n    /**@internal */\r\n    constructor(owner: UI3D) {\r\n        super(MeshTopology.Triangles, DrawType.DrawElement);\r\n        this._owner = owner;\r\n        //初始化_segementCount\r\n        this.bufferState = new BufferState();\r\n        this._bound = new Bounds();\r\n        this._createBuffer();\r\n        this.indexFormat = IndexFormat.UInt16;\r\n        this._positionArray = [new Vector3(), new Vector3(), new Vector3(), new Vector3()];\r\n    }\r\n\r\n    /**@internal */\r\n    get bounds() {\r\n        return this._bound;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _createBuffer() {\r\n        var vertexDeclaration: VertexDeclaration = VertexMesh.getVertexDeclaration(\"POSITION,NORMAL,UV\");\r\n        var halfLong: number = 1 / 2;\r\n        var halfWidth: number = 1 / 2 * 100;\r\n        this._vertex = new Float32Array([-halfLong, halfWidth, 0, 0, 0, 1, 0, 0,\r\n            halfLong, halfWidth, 0, 0, 0, 1, 1, 0,\r\n        -halfLong, -halfWidth, 0, 0, 0, 1, 0, 1,\r\n            halfLong, -halfWidth, 0, 0, 0, 1, 1, 1]);\r\n        this._index = new Uint16Array([0, 1, 2, 3, 2, 1]);\r\n        //VB\r\n        this._vertexBuffer = LayaGL.renderOBJCreate.createVertexBuffer3D(this._vertex.length * 4, BufferUsage.Dynamic, false);\r\n        this._vertexBuffer.vertexDeclaration = vertexDeclaration;\r\n        this._vertexBuffer.setData(this._vertex.buffer);\r\n        //IB\r\n        this._indexBuffer = LayaGL.renderOBJCreate.createIndexBuffer3D(IndexFormat.UInt16, this._index.length, BufferUsage.Static, false);\r\n        this._indexBuffer.setData(this._index);\r\n        //VAO\r\n        this.bufferState = new BufferState();\r\n        this.bufferState.applyState([this._vertexBuffer], this._indexBuffer);\r\n        this._bound.setExtent(new Vector3(0.5, 0.5, 0.05));\r\n        this._bound.setCenter(new Vector3(0, 0, 0));\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * reset view vertex data\r\n     */\r\n    _resizeViewVertexData(size: Vector2, cameraDir: Vector3, cameraUp: Vector3, viewMode: boolean, worldPos: Vector3): void {\r\n        var halfwidth = size.x / 2;\r\n        var halfhight = size.y / 2;\r\n        if (viewMode) {\r\n            UI3DGeometry.tempV0.set(-halfwidth, halfhight, 0.0);\r\n            Utils3D.billboardTrans(UI3DGeometry.tempV0, cameraDir, cameraUp, this._positionArray[0]);\r\n            UI3DGeometry.tempV0.set(halfwidth, halfhight, 0.0);\r\n            Utils3D.billboardTrans(UI3DGeometry.tempV0, cameraDir, cameraUp, this._positionArray[1]);\r\n            UI3DGeometry.tempV0.set(-halfwidth, -halfhight, 0.0);\r\n            Utils3D.billboardTrans(UI3DGeometry.tempV0, cameraDir, cameraUp, this._positionArray[2]);\r\n            UI3DGeometry.tempV0.set(halfwidth, -halfhight, 0.0);\r\n            Utils3D.billboardTrans(UI3DGeometry.tempV0, cameraDir, cameraUp, this._positionArray[3]);\r\n            this._vertex[3] = this._vertex[11] = this._vertex[19] = this._vertex[27] = -cameraDir.x;\r\n            this._vertex[4] = this._vertex[12] = this._vertex[20] = this._vertex[28] = -cameraDir.y;\r\n            this._vertex[5] = this._vertex[13] = this._vertex[21] = this._vertex[29] = -cameraDir.z;\r\n        } else {\r\n            this._positionArray[0].set(-halfwidth, halfhight, 0.0);\r\n            this._positionArray[1].set(halfwidth, halfhight, 0.0);\r\n            this._positionArray[2].set(-halfwidth, -halfhight, 0.0);\r\n            this._positionArray[3].set(halfwidth, -halfhight, 0.0);\r\n        }\r\n        Vector3.add(this._positionArray[0], worldPos, this._positionArray[0]);\r\n        Vector3.add(this._positionArray[1], worldPos, this._positionArray[1]);\r\n        Vector3.add(this._positionArray[2], worldPos, this._positionArray[2]);\r\n        Vector3.add(this._positionArray[3], worldPos, this._positionArray[3]);\r\n        this._changeVertex(size);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * reset vertex data\r\n     */\r\n    _resizeWorldVertexData(size: Vector2, worldMat: Matrix4x4) {\r\n        let applyMat = (v3: Vector3, mat: Matrix4x4) => {\r\n            Vector3.transformV3ToV3(v3, mat, v3);\r\n            return v3;\r\n        }\r\n        var halfwidth = size.x / 2;\r\n        var halfhight = size.y / 2;\r\n        this._positionArray[0].set(-halfwidth, halfhight, 0.0);\r\n        this._positionArray[1].set(halfwidth, halfhight, 0.0);\r\n        this._positionArray[2].set(-halfwidth, -halfhight, 0.0);\r\n        this._positionArray[3].set(halfwidth, -halfhight, 0.0);\r\n        applyMat(this._positionArray[0], worldMat);\r\n        applyMat(this._positionArray[1], worldMat);\r\n        applyMat(this._positionArray[2], worldMat);\r\n        applyMat(this._positionArray[3], worldMat);\r\n        this._changeVertex(size);\r\n    }\r\n\r\n    private _changeVertex(size: Vector2) {\r\n        this._vertex[0] = this._positionArray[0].x;\r\n        this._vertex[1] = this._positionArray[0].y;\r\n        this._vertex[2] = this._positionArray[0].z;\r\n        this._vertex[8] = this._positionArray[1].x;\r\n        this._vertex[9] = this._positionArray[1].y;\r\n        this._vertex[10] = this._positionArray[1].z;\r\n        this._vertex[16] = this._positionArray[2].x;\r\n        this._vertex[17] = this._positionArray[2].y;\r\n        this._vertex[18] = this._positionArray[2].z;\r\n        this._vertex[24] = this._positionArray[3].x;\r\n        this._vertex[25] = this._positionArray[3].y;\r\n        this._vertex[26] = this._positionArray[3].z;\r\n        this._vertexBuffer.setData(this._vertex.buffer, 0, 0, this._vertex.length * 4);\r\n        UI3DGeometry.tempV0.setValue(size.x / 2, size.y / 2, 0.0);\r\n        this._bound.setExtent(UI3DGeometry.tempV0);\r\n        let halfWidth = (this._positionArray[3].x - this._positionArray[2].x) / 2;\r\n        let halfHeight = (this._positionArray[0].y - this._positionArray[2].y) / 2;\r\n        UI3DGeometry.tempV0.setValue(this._positionArray[2].x + halfWidth, this._positionArray[2].y + halfHeight, this._positionArray[2].z);\r\n        this._bound.setCenter(UI3DGeometry.tempV0);\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @internal\r\n     * @override\r\n     */\r\n    _updateRenderParams(state: RenderContext3D): void {\r\n        this.clearRenderParams();\r\n        this.setDrawElemenParams(6, 0);\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     */\r\n    destroy() {\r\n        super.destroy();\r\n        this.bufferState.destroy();\r\n        this._vertexBuffer.destroy();\r\n        this._indexBuffer.destroy();\r\n        this.bufferState = null;\r\n        this._vertexBuffer = null;\r\n        this._indexBuffer = null;\r\n        delete this._vertex;\r\n        delete this._index;\r\n    }\r\n}","import { Sprite } from \"../../../display/Sprite\";\r\nimport { Matrix4x4 } from \"../../../maths/Matrix4x4\";\r\nimport { Vector2 } from \"../../../maths/Vector2\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\nimport { RenderTargetFormat } from \"../../../RenderEngine/RenderEnum/RenderTargetFormat\";\r\nimport { ShaderDataType } from \"../../../RenderEngine/RenderShader/ShaderData\";\r\nimport { BaseTexture } from \"../../../resource/BaseTexture\";\r\nimport { RenderTexture2D } from \"../../../resource/RenderTexture2D\";\r\nimport { Plane } from \"../../math/Plane\";\r\nimport { Ray } from \"../../math/Ray\";\r\nimport { Picker } from \"../../utils/Picker\";\r\nimport { Utils3D } from \"../../utils/Utils3D\";\r\nimport { Material, MaterialRenderMode } from \"../material/Material\";\r\nimport { MeshSprite3DShaderDeclaration } from \"../MeshSprite3DShaderDeclaration\";\r\nimport { BaseRender } from \"../render/BaseRender\";\r\nimport { RenderContext3D } from \"../render/RenderContext3D\";\r\nimport { RenderElement } from \"../render/RenderElement\";\r\nimport { Scene3D } from \"../scene/Scene3D\";\r\nimport { Sprite3D } from \"../Sprite3D\";\r\nimport { Transform3D } from \"../Transform3D\";\r\nimport { UI3DGeometry } from \"./UI3DGeometry\";\r\nimport { Event } from \"../../../events/Event\";\r\nimport { UnlitMaterial } from \"../material/UnlitMaterial\";\r\nimport { Prefab } from \"../../../resource/HierarchyResource\";\r\nimport { InputManager } from \"../../../events/InputManager\";\r\nimport { NodeFlags } from \"../../../Const\";\r\nimport { ILaya } from \"../../../../ILaya\";\r\nimport { RenderState } from \"../../../RenderEngine/RenderShader/RenderState\";\r\n\r\n/**\r\n * <code>BaseCamera</code> 类用于创建摄像机的父类。\r\n */\r\nexport class UI3D extends BaseRender {\r\n    /**@internal */\r\n    static temp0: Vector3 = new Vector3();\r\n    /**@internal */\r\n    static temp1: Vector3 = new Vector3();\r\n    /**@internal */\r\n    static temp2: Vector3 = new Vector3();\r\n    /**@internal */\r\n    static DEBUG: boolean = false;\r\n    //功能,将2DUI显示到3D面板上 并检测射线\r\n    private _shellSprite: Sprite;\r\n    /**@internal UISprite*/\r\n    private _uisprite: Sprite;\r\n    /**@internal */\r\n    private _ui3DMat: Material;\r\n    /**@internal */\r\n    private _rendertexure2D: RenderTexture2D;\r\n    /**@internal */\r\n    private _geometry: UI3DGeometry;\r\n    /**@internal 2D是否需要重新绘制*/\r\n    private _needUpdate: boolean;\r\n    /**@internal */\r\n    private _uiPlane: Plane;\r\n    /**@internal */\r\n    private _size: Vector2;\r\n    /**@internal */\r\n    private _sizeChange: boolean = true;\r\n    /**@internal */\r\n    private _resolutionRate: number;\r\n    /**@internal */\r\n    private _view: boolean = true;\r\n    /**@internal */\r\n    private _bindPropertyName: string = \"u_AlbedoTexture\";\r\n    /**@internal */\r\n    private _hit: boolean = false;\r\n    /**@internal */\r\n    private _prefab: Prefab;\r\n\r\n    /**\r\n     * 3D渲染的UI节点\r\n     */\r\n    set sprite(value: Sprite) {\r\n        if (value == this._uisprite)\r\n            return;\r\n\r\n        this._uisprite = value;\r\n        this._shellSprite.removeChildren(0, this._shellSprite.numChildren - 1);\r\n        if (value)\r\n            this._shellSprite.addChild(value);\r\n        this._resizeRT();\r\n        this.boundsChange = true;\r\n    }\r\n\r\n    get sprite() {\r\n        return this._uisprite;\r\n    }\r\n\r\n    /**\r\n     * IDE\r\n     * 3D渲染的UI预制体\r\n     */\r\n    set prefab(value: Prefab) {\r\n        this._prefab = value;\r\n        if (value)\r\n            this.sprite = <Sprite>value.create();\r\n        else\r\n            this.sprite = null;\r\n    }\r\n\r\n    get prefab() {\r\n        return this._prefab;\r\n    }\r\n\r\n    /**\r\n     * UI3DmeshScale\r\n     */\r\n    set scale(value: Vector2) {\r\n        if (value.x <= 0 || value.y <= 0)\r\n            return;\r\n        value.cloneTo(this._size);\r\n        this._resizeRT();\r\n        this.boundsChange = true;\r\n        this._sizeChange = true;\r\n    }\r\n\r\n    get scale() {\r\n        return this._size;\r\n    }\r\n\r\n    /**\r\n     * UI渲染模式\r\n     */\r\n    set renderMode(value: MaterialRenderMode) {\r\n        this.sharedMaterial.materialRenderMode = value;\r\n        this.boundsChange = true;\r\n    }\r\n\r\n\r\n    get renderMode(): MaterialRenderMode {\r\n        if (!this.sharedMaterial)\r\n            this.sharedMaterial = this._ui3DMat;\r\n        return this.sharedMaterial.materialRenderMode;\r\n    }\r\n\r\n    /**\r\n     * UI剔除模式\r\n     */\r\n    set cull(value: number) {\r\n        this.sharedMaterial && (this.sharedMaterial.cull = value);\r\n    }\r\n\r\n\r\n    get cull(): number {\r\n        let mat = this.sharedMaterial;\r\n        if (!mat) {\r\n            mat = this._ui3DMat;\r\n        }\r\n        return mat.cull;\r\n    }\r\n\r\n\r\n    /**\r\n     * 分辨率比例\r\n     */\r\n    get resolutionRate() {\r\n        return this._resolutionRate;\r\n    }\r\n\r\n    set resolutionRate(value: number) {\r\n        if (value <= 0)\r\n            return\r\n        if (this._resolutionRate == value)\r\n            return\r\n        this._resolutionRate = value;\r\n        this._resizeRT();\r\n    }\r\n\r\n    /**\r\n     * 面向相机模式\r\n     */\r\n    get billboard() {\r\n        return this._view;\r\n    }\r\n\r\n    set billboard(value: boolean) {\r\n        this._view = value;\r\n        this._sizeChange = true;\r\n        this.boundsChange = true;\r\n    }\r\n\r\n    /**\r\n     * 检测鼠标事件(关闭优化性能)，开启可以触发鼠标事件\r\n     */\r\n    get enableHit() {\r\n        return this._hit;\r\n    }\r\n\r\n    set enableHit(value: boolean) {\r\n        this._hit = value;\r\n    }\r\n\r\n    /**\r\n     * 实例化一个UI3D\r\n     */\r\n    constructor() {\r\n        super();\r\n        this._uiPlane = new Plane(new Vector3(), 0);\r\n        this._size = new Vector2(1, 1);\r\n        this._resolutionRate = 128;\r\n        this._shellSprite = new Sprite();\r\n        this._shellSprite.name = \"UI3D\";\r\n        this._shellSprite._setBit(NodeFlags.DISPLAYED_INSTAGE, true);\r\n        this._shellSprite._setBit(NodeFlags.ACTIVE_INHIERARCHY, true);\r\n        this._shellSprite._parent = ILaya.stage;\r\n        this._shaderValues.addDefine(MeshSprite3DShaderDeclaration.SHADERDEFINE_UV0);\r\n        this._ui3DMat = new UnlitMaterial();\r\n        this._ui3DMat.materialRenderMode = MaterialRenderMode.RENDERMODE_OPAQUE;\r\n        this._ui3DMat.cull = RenderState.CULL_BACK;\r\n    }\r\n\r\n    /**\r\n     * @internal add renderelement\r\n     */\r\n    private _addRenderElement() {\r\n        var elements: RenderElement[] = this._renderElements;\r\n        this._setMaterialTexture();\r\n        var material: Material = (<Material>this.sharedMaterial);\r\n        var element: RenderElement = new RenderElement();\r\n        element.setTransform((this.owner as Sprite3D)._transform);\r\n        element.render = this;\r\n        element.material = material;\r\n        this._geometry = new UI3DGeometry(this);\r\n        element.setGeometry(this._geometry);\r\n        elements.push(element);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _resizeRT() {\r\n        let width = this._size.x * this._resolutionRate;\r\n        let height = this._size.y * this._resolutionRate;\r\n        if (!this._rendertexure2D) {\r\n            this._rendertexure2D = new RenderTexture2D(width, height, RenderTargetFormat.R8G8B8A8, RenderTargetFormat.None);\r\n            this._rendertexure2D._invertY = true;\r\n        } else {\r\n            if (this._rendertexure2D.width != width || this._rendertexure2D.height != height) {\r\n                this._rendertexure2D.destroy();\r\n                this._rendertexure2D = new RenderTexture2D(width, height, RenderTargetFormat.R8G8B8A8, RenderTargetFormat.None);\r\n                this._rendertexure2D._invertY = true;\r\n                this._setMaterialTexture();\r\n            }\r\n        }\r\n        this._submitRT();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    onPreRender(): void {\r\n        //this._geometry\r\n        if (this.billboard || this._sizeChange) {\r\n            this._sizeChange = false;\r\n            this.boundsChange = true;\r\n            if (this.billboard) {\r\n                let camera = (this.owner.scene as Scene3D).cullInfoCamera;\r\n                this._geometry._resizeViewVertexData(this._size, camera._forward, camera._up, this.billboard, (this.owner as Sprite3D).transform.position);\r\n            } else {\r\n                this._geometry._resizeWorldVertexData(this._size, (this.owner as Sprite3D).transform.worldMatrix);\r\n            }\r\n        }\r\n\r\n        //reset plane\r\n        this._updatePlane();\r\n    }\r\n\r\n    private _updatePlane() {\r\n        let posArray = this._geometry._positionArray;\r\n        Plane.createPlaneBy3P(posArray[0], posArray[1], posArray[2], this._uiPlane);\r\n    }\r\n\r\n    /**\r\n    * 分析碰撞点\r\n    * @param hit \r\n    */\r\n    private _parseHit(hit: Vector3) {\r\n        if (!this._uisprite) return null;\r\n        let WV = UI3D.temp0;\r\n        let HV = UI3D.temp1;\r\n        let Dir = UI3D.temp2;\r\n        let posArray = this._geometry._positionArray;\r\n        if (Utils3D.PointinTriangle(posArray[0], posArray[1], posArray[2], hit) || Utils3D.PointinTriangle(posArray[3], posArray[2], posArray[1], hit)) {\r\n            Vector3.subtract(posArray[2], posArray[3], WV);\r\n            Vector3.subtract(posArray[2], posArray[0], HV);\r\n            Vector3.subtract(posArray[2], hit, Dir);\r\n            Vector3.normalize(WV, WV);\r\n            Vector3.normalize(HV, HV);\r\n            let normalizeHitWidth = Math.abs(Vector3.dot(WV, Dir) / this.scale.x);    // dot 也就是在宽度上百分比 0 ~ 1\r\n            let normalizeHitHeight = Math.abs(Vector3.dot(HV, Dir) / this.scale.y);    // dot 这个时在高度上的百分比 0 ~ 1\r\n\r\n            let cx = normalizeHitWidth * this._rendertexure2D.width;\r\n            let cy = (1 - normalizeHitHeight) * this._rendertexure2D.height;\r\n\r\n            // drawCircle to test\r\n            //UI3D.DEBUG && this._uisprite && this._shellSprite.graphics.drawCircle(cx, cy, 10, \"#e53d30\");\r\n\r\n            let target = InputManager.inst.getSpriteUnderPoint(this._uisprite, cx, cy);\r\n            if (target)\r\n                return target;\r\n            else\r\n                return this._uisprite;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * 获得ui渲染图\r\n     */\r\n    getUITexture(): BaseTexture {\r\n        return this._rendertexure2D;\r\n    }\r\n\r\n    /**\r\n     * get camera distance\r\n     * @param rayOri \r\n     * @returns \r\n     */\r\n    _getCameraDistance(rayOri: Vector3): number {\r\n        return Vector3.distance(rayOri, (this.owner as Sprite3D).transform.position);\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     * @internal\r\n     */\r\n    _renderUpdate(context: RenderContext3D, transform: Transform3D): void {\r\n        this._applyLightMapParams();\r\n        this._applyReflection();\r\n        // 这里不需要区分，已经将顶点进行转换了直接使用默认矩阵\r\n        this._setShaderValue(Sprite3D.WORLDMATRIX, ShaderDataType.Matrix4x4, Matrix4x4.DEFAULT);\r\n        this._worldParams.x = transform.getFrontFaceValue();\r\n        this._setShaderValue(Sprite3D.WORLDINVERTFRONT, ShaderDataType.Vector4, this._worldParams);\r\n        return;\r\n    }\r\n\r\n    /** \r\n     * @internal\r\n     * 更新Sprite的RT\r\n     */\r\n    _submitRT() {\r\n        //判断是否需要重置\r\n        this._rendertexure2D && this._shellSprite.drawToTexture(this._rendertexure2D.width, this._rendertexure2D.height, 0, 0, this._rendertexure2D);\r\n        this._setMaterialTexture();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * 设置材质纹理\r\n     */\r\n    _setMaterialTexture() {\r\n        if (!this.sharedMaterial)\r\n            this.sharedMaterial = this._ui3DMat;\r\n        if (!this.sharedMaterial.hasDefine(UnlitMaterial.SHADERDEFINE_ALBEDOTEXTURE)) {\r\n            this.sharedMaterial.addDefine(UnlitMaterial.SHADERDEFINE_ALBEDOTEXTURE);\r\n        }\r\n        this.sharedMaterial.setTexture(this._bindPropertyName, this._rendertexure2D);\r\n    }\r\n\r\n    /**\r\n     * 检测UI事件\r\n     * @internal \r\n     * @param ray \r\n     * @returns \r\n     */\r\n    _checkUIPos(ray: Ray) {\r\n        if (!this.enableHit)\r\n            return false;\r\n        let hitPoint = Picker.rayPlaneIntersection(ray, this._uiPlane);\r\n        if (hitPoint) {\r\n            return this._parseHit(hitPoint);\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     * @internal\r\n     */\r\n    protected _calculateBoundingBox(): void {\r\n        var worldMat: Matrix4x4 = this._transform.worldMatrix;\r\n        this._geometry.bounds.cloneTo(this._bounds);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _onAdded(): void {\r\n        super._onAdded();\r\n        this._addRenderElement();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _onDisable(): void {\r\n        super._onDisable();\r\n        (this.owner as Sprite3D).transform.off(Event.TRANSFORM_CHANGED, this, this._transByRotate);//如果为合并BaseRender,owner可能为空\r\n        (this.owner.scene as Scene3D)._UI3DManager.remove(this);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _onEnable(): void {\r\n        super._onEnable();\r\n        (this.owner.scene as Scene3D)._UI3DManager.add(this);\r\n        (this.owner as Sprite3D).transform.on(Event.TRANSFORM_CHANGED, this, this._transByRotate);//如果为合并BaseRender,owner可能为空\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _onDestroy() {\r\n        super._onDestroy();\r\n        this._rendertexure2D && this._rendertexure2D.destroy();\r\n        this._uisprite && this._uisprite.destroy();\r\n        this._shellSprite && this._shellSprite.destroy();\r\n        this._ui3DMat && this._ui3DMat.destroy();\r\n        this._resolutionRate = null;\r\n        this._uiPlane = null;\r\n        this._size = null;\r\n    }\r\n\r\n    private _transByRotate() {\r\n        if (!this.billboard) {\r\n            this._sizeChange = true;\r\n        }\r\n        this.boundsChange = true;\r\n    }\r\n}\r\n\r\n","import { IResourceLoader, ILoadTask, Loader } from \"../../net/Loader\";\r\nimport { URL } from \"../../net/URL\";\r\nimport { KTXTextureInfo } from \"../../RenderEngine/KTXTextureInfo\";\r\nimport { FilterMode } from \"../../RenderEngine/RenderEnum/FilterMode\";\r\nimport { TextureDimension } from \"../../RenderEngine/RenderEnum/TextureDimension\";\r\nimport { TextureFormat } from \"../../RenderEngine/RenderEnum/TextureFormat\";\r\nimport { WrapMode } from \"../../RenderEngine/RenderEnum/WrapMode\";\r\nimport { AssetDb } from \"../../resource/AssetDb\";\r\nimport { Resource } from \"../../resource/Resource\";\r\nimport { Byte } from \"../../utils/Byte\";\r\nimport { Utils } from \"../../utils/Utils\";\r\nimport { TextureCube } from \"../../resource/TextureCube\";\r\n\r\nvar internalResources: Record<string, TextureCube>;\r\n\r\nclass CubemapLoader implements IResourceLoader {\r\n    constructor() {\r\n        if (!internalResources) {\r\n            internalResources = {\r\n                \"WhiteTextureCube.ltc\": TextureCube.whiteTexture,\r\n                \"BlackTextureCube.ltc\": TextureCube.blackTexture,\r\n                \"GrayTextureCube.ltc\": TextureCube.grayTexture,\r\n            };\r\n        }\r\n    }\r\n\r\n    load(task: ILoadTask) {\r\n        if (task.url.indexOf(\"internal/\") != -1) {\r\n            let tex = internalResources[Utils.getBaseName(task.url)];\r\n            if (tex)\r\n                return Promise.resolve(tex);\r\n        }\r\n\r\n        if (task.ext == \"ktx\" || task.ext == \"cubemap\") {\r\n            let url = task.url;\r\n            if (task.ext == \"cubemap\")\r\n                url = AssetDb.inst.getSubAssetURL(url, task.uuid, \"0\", \"ktx\");\r\n\r\n            return task.loader.fetch(url, \"arraybuffer\", task.progress.createCallback(), task.options).then(data => {\r\n                if (!data)\r\n                    return null;\r\n\r\n                let ktxInfo = KTXTextureInfo.getKTXTextureInfo(data);\r\n                if (ktxInfo.dimension != TextureDimension.Cube) {\r\n                    Loader.warn(\"ktxInfo.dimension != TextureDimension.Cube! \" + task.url);\r\n                    return null;\r\n                }\r\n\r\n                let tex = new TextureCube(ktxInfo.width, ktxInfo.format, ktxInfo.mipmapCount > 1, ktxInfo.sRGB);\r\n                tex.setKTXData(ktxInfo);\r\n\r\n                let obsoluteInst = task.obsoluteInst;\r\n                if (obsoluteInst && (obsoluteInst instanceof TextureCube))\r\n                    tex = this.move(obsoluteInst, tex);\r\n\r\n                return tex;\r\n            });\r\n        }\r\n        else if (task.ext == \"ltcb\" || task.ext == \"ltcb.ls\") {\r\n            return task.loader.fetch(task.url, \"arraybuffer\", task.progress.createCallback(), task.options).then(data => {\r\n                if (!data)\r\n                    return null;\r\n\r\n                let byte: Byte = new Byte(data);\r\n                let version: string = byte.readUTFString();\r\n                if (version !== \"LAYATEXTURECUBE:0000\") {\r\n                    console.warn(`CubemapBinLoader: unknow version. ${version}`);\r\n                    return null;\r\n                }\r\n                let format: TextureFormat = <TextureFormat>byte.readUint8();\r\n                let mipCount: number = byte.getUint8();\r\n                let size: number = byte.readUint16();\r\n                let filterMode: FilterMode = <FilterMode>byte.getUint8();\r\n                let wrapModeU: WrapMode = <WrapMode>byte.getUint8();\r\n                let wrapModev: WrapMode = <WrapMode>byte.getUint8();\r\n                let anisoLevel: FilterMode = byte.getUint8();\r\n\r\n                let tex: TextureCube = new TextureCube(size, format, mipCount > 1 ? true : false);\r\n                tex.setPixelsData(null, false, false);\r\n                tex.filterMode = filterMode;\r\n                tex.wrapModeU = wrapModeU;\r\n                tex.wrapModeV = wrapModev;\r\n                tex.anisoLevel = anisoLevel;\r\n                let pos: number = byte.pos;\r\n                let mipSize: number = size;\r\n                for (let i = 0; i < mipCount; i++) {\r\n                    let uint8Arrays: Array<Uint8Array> = new Array<Uint8Array>(6);\r\n                    let mipPixelLength: number = mipSize * mipSize * tex._getFormatByteCount();\r\n                    for (let j = 0; j < 6; j++) {\r\n                        uint8Arrays[j] = new Uint8Array(data, pos, mipPixelLength);\r\n                        pos += mipPixelLength;\r\n                    }\r\n                    // todo  自动生成 mipmap 与 手动设置 mipmap\r\n                    tex.updateSubPixelsData(uint8Arrays, 0, 0, mipSize, mipSize, i, false, false, false);\r\n                    mipSize /= 2;\r\n                }\r\n\r\n                let obsoluteInst = task.obsoluteInst;\r\n                if (obsoluteInst && (obsoluteInst instanceof TextureCube))\r\n                    tex = this.move(obsoluteInst, tex);\r\n                return tex;\r\n            });\r\n        }\r\n        else {\r\n            return task.loader.fetch(task.url, \"json\", task.progress.createCallback(0.2), task.options).then(data => {\r\n                if (!data)\r\n                    return null;\r\n\r\n                let ltcBasePath: string = URL.getPath(task.url);\r\n                let urls: any[] = [\r\n                    URL.join(ltcBasePath, data.front),\r\n                    URL.join(ltcBasePath, data.back),\r\n                    URL.join(ltcBasePath, data.left),\r\n                    URL.join(ltcBasePath, data.right),\r\n                    URL.join(ltcBasePath, data.up),\r\n                    URL.join(ltcBasePath, data.down)\r\n                ];\r\n\r\n                return Promise.all(urls.map(url => {\r\n                    if (url)\r\n                        return task.loader.fetch(url, \"image\", task.progress.createCallback(), task.options);\r\n                    else\r\n                        return Promise.resolve(null);\r\n                })).then(images => {\r\n                    let constructParams = task.options.constructParams;\r\n                    let size = constructParams ? constructParams[0] : ((images[0]?.width) ?? 1);\r\n                    let format = constructParams ? constructParams[1] : TextureFormat.R8G8B8A8;\r\n                    let mipmap = constructParams ? constructParams[3] : false;\r\n                    let srgb = constructParams ? constructParams[5] : true;\r\n                    let tex = new TextureCube(size, format, mipmap, srgb);\r\n                    tex.setImageData(images, false, false);\r\n\r\n                    let obsoluteInst = task.obsoluteInst;\r\n                    if (obsoluteInst && (obsoluteInst instanceof TextureCube))\r\n                        tex = this.move(obsoluteInst, tex);\r\n                    return tex;\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    private move(obsoluteInst: TextureCube, tex: TextureCube) {\r\n        obsoluteInst._texture = tex._texture;\r\n        obsoluteInst.width = tex.width;\r\n        obsoluteInst.height = tex.height;\r\n        obsoluteInst.obsolute = false;\r\n        delete Resource._idResourcesMap[tex.id];\r\n        return obsoluteInst;\r\n    }\r\n}\r\n\r\nLoader.registerLoader([\"ltc\", \"ltcb\", \"ltcb.ls\", \"cubemap\"], CubemapLoader, Loader.TEXTURECUBE);","import { IResourceLoader, ILoadTask, Loader } from \"../../net/Loader\";\r\nimport { AssetDb } from \"../../resource/AssetDb\";\r\nimport { AnimationClip } from \"../animation/AnimationClip\";\r\n\r\nclass AnimationClipLoader implements IResourceLoader {\r\n    load(task: ILoadTask) {\r\n        let url = AssetDb.inst.getSubAssetURL(task.url, task.uuid, null, \"lani\");\r\n        return task.loader.fetch(url, \"arraybuffer\", task.progress.createCallback(), task.options).then(data => {\r\n            if (!data) {\r\n                return null;\r\n            }\r\n            return AnimationClip._parse(data);\r\n        });\r\n    }\r\n}\r\n\r\nLoader.registerLoader([\"lani\"], AnimationClipLoader, Loader.ANIMATIONCLIP);","import { Color } from \"../../maths/Color\";\r\nimport { Vector2 } from \"../../maths/Vector2\";\r\nimport { Vector3 } from \"../../maths/Vector3\";\r\nimport { Vector4 } from \"../../maths/Vector4\";\r\nimport { ILoadURL, Loader } from \"../../net/Loader\";\r\nimport { URL } from \"../../net/URL\";\r\nimport { BlendEquationSeparate } from \"../../RenderEngine/RenderEnum/BlendEquationSeparate\";\r\nimport { BlendFactor } from \"../../RenderEngine/RenderEnum/BlendFactor\";\r\nimport { CompareFunction } from \"../../RenderEngine/RenderEnum/CompareFunction\";\r\nimport { Shader3D } from \"../../RenderEngine/RenderShader/Shader3D\";\r\nimport { ShaderDefine } from \"../../RenderEngine/RenderShader/ShaderDefine\";\r\nimport { ClassUtils } from \"../../utils/ClassUtils\";\r\nimport { Material } from \"../core/material/Material\";\r\n\r\nexport class MaterialParser {\r\n\r\n    static parse(data: any): Material {\r\n        let props: any = data.props;\r\n\r\n        switch (data.version) {\r\n            case \"LAYAMATERIAL:01\":\r\n            case \"LAYAMATERIAL:02\":\r\n            case \"LAYAMATERIAL:03\":\r\n                let mat = MaterialParser.parseLegacy(data);\r\n                mat.oldparseEndEvent();\r\n                return mat;\r\n            case \"LAYAMATERIAL:04\":\r\n                break;\r\n            default:\r\n                throw new Error(`unkonwn material version: ${data.version}`);\r\n        }\r\n\r\n        let mat = new Material();\r\n        mat.setShaderName(props.type);\r\n        let renderQueue: number;\r\n        for (let key in props) {\r\n            switch (key) {\r\n                case \"type\":\r\n                case \"name\":\r\n                    break;\r\n                case \"defines\":\r\n                    let defineNames: any[] = props[key];\r\n                    for (let i = 0, n = defineNames.length; i < n; i++) {\r\n                        let define: ShaderDefine = Shader3D.getDefineByName(defineNames[i]);//TODO:是否取消defines\r\n                        mat._shaderValues.addDefine(define);\r\n                    }\r\n                    break;\r\n                case \"textures\":\r\n                    let textures: any[] = props[key];\r\n                    for (let i = 0, n = textures.length; i < n; i++) {\r\n                        let texture: any = textures[i];\r\n                        let path: string = texture.path;\r\n                        (path) && (mat._shaderValues.setTexture(Shader3D.propertyNameToID(texture.name), Loader.getBaseTexture(path)));\r\n                    }\r\n                    break;\r\n                case \"renderQueue\":\r\n                    renderQueue = props[key];\r\n                    break;\r\n                case \"alphaTest\":\r\n                    mat.alphaTest = props[key];\r\n                    break;\r\n                case \"materialRenderMode\":\r\n                    mat.materialRenderMode = props[key];\r\n                    break;\r\n                default:\r\n                    let property = props[key];\r\n                    let uniName = Shader3D.propertyNameToID(key);\r\n\r\n                    switch (uniName) {\r\n                        case Shader3D.CULL:\r\n                            mat.cull = property;\r\n                            break;\r\n                        case Shader3D.BLEND:\r\n                            mat.blend = property;\r\n                            break;\r\n                        case Shader3D.BLEND_SRC:\r\n                            mat.blendSrc = property;\r\n                            break;\r\n                        case Shader3D.BLEND_DST:\r\n                            mat.blendDst = property;\r\n                            break;\r\n                        case Shader3D.BLEND_DST_ALPHA:\r\n                            mat.blendDstAlpha = property;\r\n                            break;\r\n                        case Shader3D.BLEND_SRC_ALPHA:\r\n                            mat.blendSrcAlpha = property;\r\n                            break;\r\n                        case Shader3D.BLEND_SRC_RGB:\r\n                            mat.blendSrcRGB = property;\r\n                            break;\r\n                        case Shader3D.BLEND_SRC_RGB:\r\n                            mat.blendDstRGB = property;\r\n                            break;\r\n                        case Shader3D.DEPTH_TEST:\r\n                            mat.depthTest = property;\r\n                            break;\r\n                        case Shader3D.DEPTH_WRITE:\r\n                            mat.depthWrite = !!props[key];\r\n                            break;\r\n                        case Shader3D.STENCIL_TEST:\r\n                            mat.stencilTest = property;\r\n                            break;\r\n                        case Shader3D.STENCIL_Op:\r\n                            mat.stencilOp = property;\r\n                            break;\r\n                        case Shader3D.STENCIL_Ref:\r\n                            mat.stencilRef = property;\r\n                            break;\r\n                        case Shader3D.STENCIL_WRITE:\r\n                            mat.stencilWrite = property;\r\n                            break;\r\n                        default:\r\n                            if (!property.length) {\r\n                                mat._shaderValues.setNumber(uniName, props[key]);\r\n                            } else {\r\n                                var vectorValue = property;\r\n                                switch (vectorValue.length) {\r\n                                    case 2:\r\n                                        mat._shaderValues.setVector2(uniName, new Vector2(vectorValue[0], vectorValue[1]));\r\n                                        break;\r\n                                    case 3:\r\n                                        mat._shaderValues.setVector3(uniName, new Vector3(vectorValue[0], vectorValue[1], vectorValue[2]));\r\n                                        break;\r\n                                    case 4:\r\n                                        if (mat._shaderValues.getColor(uniName)) {\r\n                                            mat._shaderValues.setColor(uniName, new Color(vectorValue[0], vectorValue[1], vectorValue[2], vectorValue[3]));\r\n                                        } else\r\n                                            mat._shaderValues.setVector(uniName, new Vector4(vectorValue[0], vectorValue[1], vectorValue[2], vectorValue[3]));\r\n                                        break;\r\n                                    default:\r\n                                        mat._shaderValues.setBuffer(uniName, vectorValue);\r\n                                }\r\n                            }\r\n                            break;\r\n                    }\r\n            }\r\n        }\r\n        if (null != renderQueue) {\r\n            mat.renderQueue = renderQueue;\r\n        }\r\n\r\n        return mat;\r\n    }\r\n\r\n    static collectLinks(data: any, basePath: string) {\r\n        let urls: ILoadURL[] = [];\r\n        let textures: any[] = data.props?.textures;\r\n        if (textures) {\r\n            for (let i = 0, n = textures.length; i < n; i++) {\r\n                let tex2D: any = textures[i];\r\n                let tex2DPath: string = tex2D.path;\r\n                if (tex2DPath) {\r\n                    tex2D.path = URL.join(basePath, tex2DPath);\r\n                    urls.push({ url: tex2D.path, type: Loader.TEXTURE2D, constructParams: tex2D.constructParams, propertyParams: tex2D.propertyParams });\r\n                }\r\n            }\r\n        }\r\n        return urls;\r\n    }\r\n\r\n\r\n    /**\r\n     * @deprecated\r\n     * @inheritDoc\r\n     */\r\n    static parseLegacy(data: any): Material {\r\n        let jsonData: any = data;\r\n        let props: any = jsonData.props;\r\n\r\n        let mat: Material;\r\n        let classType: string = props.type;\r\n        let clas: any = ClassUtils.getClass(classType);\r\n        if (!clas && classType && classType.startsWith(\"Laya.\"))\r\n            clas = ClassUtils.getClass(classType.substring(5));\r\n        if (clas)\r\n            mat = new clas();\r\n        else {\r\n            mat = new Material();\r\n            mat.setShaderName(classType);\r\n        }\r\n\r\n        switch (jsonData.version) {\r\n            case \"LAYAMATERIAL:01\":\r\n            case \"LAYAMATERIAL:02\":\r\n                for (let key in props) {\r\n                    switch (key) {\r\n                        case \"type\":\r\n                            break;\r\n                        case \"vectors\":\r\n                            let vectors = props[key];\r\n                            for (let i = 0, n = vectors.length; i < n; i++) {\r\n                                let vector = vectors[i];\r\n                                let vectorValue = vector.value;\r\n                                switch (vectorValue.length) {\r\n                                    case 2:\r\n                                        (<any>mat)[vector.name] = new Vector2(vectorValue[0], vectorValue[1]);\r\n                                        break;\r\n                                    case 3:\r\n                                        if ((<any>mat)[vector.name] instanceof Color) {\r\n                                            (<any>mat)[vector.name] = new Color(vectorValue[0], vectorValue[1], vectorValue[2], 1.0);\r\n                                        } else\r\n                                            (<any>mat)[vector.name] = new Vector3(vectorValue[0], vectorValue[1], vectorValue[2]);\r\n                                        break;\r\n                                    case 4:\r\n                                        if ((<any>mat)[vector.name] instanceof Color) {\r\n                                            (<any>mat)[vector.name] = new Color(vectorValue[0], vectorValue[1], vectorValue[2], vectorValue[3]);\r\n                                        } else\r\n                                            (<any>mat)[vector.name] = new Vector4(vectorValue[0], vectorValue[1], vectorValue[2], vectorValue[3]);\r\n                                        break;\r\n                                    default:\r\n                                        throw new Error(\"unkonwn material color length: \" + vectorValue.length);\r\n                                }\r\n                            }\r\n                            break;\r\n                        case \"colors\":\r\n                            let colors = props[key];\r\n                            for (let i = 0, n = colors.length; i < n; i++) {\r\n                                let color = colors[i];\r\n                                let vectorValue = color.value;\r\n                                (<any>mat)[color.name] = new Color(vectorValue[0], vectorValue[1], vectorValue[2], vectorValue[3])\r\n                            }\r\n                            break;\r\n                        case \"textures\":\r\n                            let textures: any[] = props[key];\r\n                            for (let i = 0, n = textures.length; i < n; i++) {\r\n                                let texture: any = textures[i];\r\n                                let path: string = texture.path;\r\n                                (path) && ((<any>mat)[texture.name] = Loader.getBaseTexture(path));\r\n                            }\r\n                            break;\r\n                        case \"defines\":\r\n                            let defineNames: any[] = props[key];\r\n                            for (let i = 0, n = defineNames.length; i < n; i++) {\r\n                                let define: ShaderDefine = Shader3D.getDefineByName(defineNames[i]);//TODO:是否取消defines\r\n                                mat._shaderValues.addDefine(define);\r\n                            }\r\n                            break;\r\n                        case \"renderStates\"://\"LAYAMATERIAL:02\" \r\n                            let renderStatesData: any[] = props[key];\r\n                            let renderStateData: any = renderStatesData[0];\r\n                            mat.blend = renderStateData.blend;\r\n                            mat.cull = this._getRenderStateParams(renderStateData.cull);\r\n                            mat.depthTest = this._getRenderStateParams(renderStateData.depthTest);\r\n                            mat.depthWrite = renderStateData.depthWrite;\r\n                            mat.blendSrc = this._getRenderStateParams(renderStateData.srcBlend);\r\n                            mat.blendDst = this._getRenderStateParams(renderStateData.dstBlend);\r\n                            break;\r\n                        case \"cull\"://\"LAYAMATERIAL:01\"\r\n                            mat.cull = this._getRenderStateParams(props[key]);\r\n                            break;\r\n                        case \"blend\"://\"LAYAMATERIAL:01\"\r\n                            mat.blend = this._getRenderStateParams(props[key]);\r\n                            break;\r\n                        case \"depthWrite\"://\"LAYAMATERIAL:01\" \r\n                            mat.depthWrite = !!props[key];\r\n                            break;\r\n                        case \"srcBlend\"://\"LAYAMATERIAL:01\" \r\n                            mat.blendSrc = this._getRenderStateParams(props[key]);\r\n                            break;\r\n                        case \"dstBlend\"://\"LAYAMATERIAL:01\" \r\n                            mat.blendDst = this._getRenderStateParams(props[key]);\r\n                            break;\r\n                        case \"depthTest\":\r\n                            mat.depthTest = this._getRenderStateParams(props[key]);\r\n                            break;\r\n                        case \"blendDst\":\r\n                            mat.blendDst = this._getRenderStateParams(props[key]);\r\n                            break;\r\n                        case \"blendSrc\":\r\n                            mat.blendSrc = this._getRenderStateParams(props[key]);\r\n                            break;\r\n                        default:\r\n                            (<any>mat)[key] = props[key];\r\n                    }\r\n                }\r\n                break;\r\n            case \"LAYAMATERIAL:03\":\r\n                for (let key in props) {\r\n                    switch (key) {\r\n                        case \"type\":\r\n                        case \"name\":\r\n                            break;\r\n                        case \"defines\":\r\n                            let defineNames: any[] = props[key];\r\n                            for (let i = 0, n = defineNames.length; i < n; i++) {\r\n                                let define: ShaderDefine = Shader3D.getDefineByName(defineNames[i]);//TODO:是否取消defines\r\n                                mat._shaderValues.addDefine(define);\r\n                            }\r\n                            break;\r\n                        case \"textures\":\r\n                            let textures: any[] = props[key];\r\n                            for (let i = 0, n = textures.length; i < n; i++) {\r\n                                let texture: any = textures[i];\r\n                                let path: string = texture.path;\r\n                                (path) && (mat._shaderValues.setTexture(Shader3D.propertyNameToID(texture.name), Loader.getBaseTexture(path)));\r\n                            }\r\n                            break;\r\n                        case \"renderQueue\":\r\n                            mat.renderQueue = props[key];\r\n                            break;\r\n                        default:\r\n                            let property = props[key];\r\n                            let uniName = Shader3D.propertyNameToID(key);\r\n\r\n                            switch (uniName) {\r\n                                case Shader3D.CULL:\r\n                                    mat.cull = this._getRenderStateParams(property);\r\n                                    break;\r\n                                case Shader3D.BLEND:\r\n                                    mat.blend = this._getRenderStateParams(property);\r\n                                    break;\r\n                                case Shader3D.BLEND_SRC:\r\n                                    mat.blendSrc = this._getRenderStateParams(property);\r\n                                    break;\r\n                                case Shader3D.BLEND_DST:\r\n                                    mat.blendDst = this._getRenderStateParams(property);\r\n                                    break;\r\n                                case Shader3D.DEPTH_TEST:\r\n                                    mat.depthTest = this._getRenderStateParams(property);\r\n                                    break;\r\n                                case Shader3D.DEPTH_WRITE:\r\n                                    mat.depthWrite = !!props[key];\r\n                                    break;\r\n                                default:\r\n                                    if (!property.length) {\r\n                                        mat._shaderValues.setNumber(uniName, props[key]);\r\n                                    } else {\r\n                                        var vectorValue = property;\r\n                                        switch (vectorValue.length) {\r\n                                            case 2:\r\n                                                mat._shaderValues.setVector2(uniName, new Vector2(vectorValue[0], vectorValue[1]));\r\n                                                break;\r\n                                            case 3:\r\n                                                mat._shaderValues.setVector3(uniName, new Vector3(vectorValue[0], vectorValue[1], vectorValue[2]));\r\n                                                break;\r\n                                            case 4:\r\n                                                if (mat._shaderValues.getColor(uniName)) {\r\n                                                    mat._shaderValues.setColor(uniName, new Color(vectorValue[0], vectorValue[1], vectorValue[2], vectorValue[3]));\r\n                                                } else\r\n                                                    mat._shaderValues.setVector(uniName, new Vector4(vectorValue[0], vectorValue[1], vectorValue[2], vectorValue[3]));\r\n                                                break;\r\n                                            default:\r\n                                                throw new Error(\"unkonwn material color length: \" + vectorValue.length);\r\n                                        }\r\n                                    }\r\n                                    break;\r\n                            }\r\n\r\n\r\n                    }\r\n                }\r\n                break;\r\n            default:\r\n                throw new Error(\"unkonwn material version: \" + jsonData.version);\r\n        }\r\n        return mat;\r\n    }\r\n\r\n\r\n    /**\r\n        * @deprecated\r\n        * 兼容Blend数据\r\n        */\r\n    private static _getRenderStateParams(type: number) {\r\n        switch (type) {\r\n            case 0x0300:\r\n                return BlendFactor.SourceColor;\r\n            case 0x0301:\r\n                return BlendFactor.OneMinusSourceColor;\r\n            case 0x0306:\r\n                return BlendFactor.DestinationColor;\r\n            case 0x0307:\r\n                return BlendFactor.OneMinusDestinationColor;\r\n            case 0x0302:\r\n                return BlendFactor.SourceAlpha;\r\n            case 0x0303:\r\n                return BlendFactor.OneMinusSourceAlpha;\r\n            case 0x0304:\r\n                return BlendFactor.DestinationAlpha;\r\n            case 0x0305:\r\n                return BlendFactor.OneMinusDestinationAlpha;\r\n            case 0x0308:\r\n                return BlendFactor.SourceAlphaSaturate;\r\n            case 0x8006:\r\n                return BlendEquationSeparate.ADD;\r\n            case 0x800A:\r\n                return BlendEquationSeparate.SUBTRACT;\r\n            case 0x800B:\r\n                return BlendEquationSeparate.REVERSE_SUBTRACT;\r\n            case 0x0200:\r\n                return CompareFunction.Never;\r\n            case 0x0201:\r\n                return CompareFunction.Less;\r\n            case 0x0202:\r\n                return CompareFunction.Equal;\r\n            case 0x0203:\r\n                return CompareFunction.LessEqual;\r\n            case 0x0204:\r\n                return CompareFunction.Greater;\r\n            case 0x0205:\r\n                return CompareFunction.NotEqual;\r\n            case 0x0206:\r\n                return CompareFunction.GreaterEqual;\r\n            case 0x0207:\r\n                return CompareFunction.Always;\r\n            default:\r\n                return type;\r\n        }\r\n    }\r\n}","import { IResourceLoader, ILoadTask, Loader, ILoadURL } from \"../../net/Loader\";\r\nimport { URL } from \"../../net/URL\";\r\nimport { Shader3D } from \"../../RenderEngine/RenderShader/Shader3D\";\r\nimport { AssetDb } from \"../../resource/AssetDb\";\r\nimport { Material } from \"../core/material/Material\";\r\nimport { MaterialParser } from \"./MaterialParser\";\r\n\r\nclass MaterialLoader implements IResourceLoader {\r\n    load(task: ILoadTask) {\r\n        return task.loader.fetch(task.url, \"json\", task.progress.createCallback(0.3), task.options).then(data => {\r\n            if (!data)\r\n                return null;\r\n\r\n            let basePath = URL.getPath(task.url);\r\n            let urls: Array<ILoadURL | string> = MaterialParser.collectLinks(data, basePath);\r\n\r\n            if (data.version === \"LAYAMATERIAL:04\") {\r\n                let shaderName = data.props.type;\r\n                if (!Shader3D.find(shaderName)) {\r\n                    let url = AssetDb.inst.shaderName_to_URL(shaderName);\r\n                    if (url)\r\n                        urls.push(url);\r\n                    else {\r\n                        return AssetDb.inst.shaderName_to_URL_async(shaderName).then(url => {\r\n                            if (url)\r\n                                urls.push(url);\r\n                            else if (data.props.shaderPath)\r\n                                urls.push(URL.join(basePath, data.props.shaderPath));\r\n                            else\r\n                                Loader.warn(`unknown shaderName: ${shaderName}`);\r\n                            return this.load2(task, data, urls);\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n\r\n            return this.load2(task, data, urls);\r\n        });\r\n    }\r\n\r\n    private load2(task: ILoadTask, data: any, urls: Array<any>): Promise<any> {\r\n        if (urls.length == 0) {\r\n            let mat = MaterialParser.parse(data);\r\n            let obsoluteInst = <Material>task.obsoluteInst;\r\n            if (obsoluteInst)\r\n                mat = this.move(obsoluteInst, mat);\r\n            return Promise.resolve(mat);\r\n        }\r\n\r\n        return task.loader.load(urls, task.options, task.progress.createCallback()).then(() => {\r\n            let mat = MaterialParser.parse(data);\r\n\r\n            let obsoluteInst = <Material>task.obsoluteInst;\r\n            if (task.obsoluteInst)\r\n                mat = this.move(obsoluteInst, mat);\r\n            return mat;\r\n        });\r\n    }\r\n\r\n    private move(obsoluteInst: Material, mat: Material) {\r\n        obsoluteInst._shaderValues.reset();\r\n        obsoluteInst.setShaderName(mat._shader.name);\r\n        mat._shaderValues.cloneTo(obsoluteInst._shaderValues);\r\n        obsoluteInst.renderQueue = mat.renderQueue;\r\n        obsoluteInst.obsolute = false;\r\n        mat.destroy();\r\n        return obsoluteInst;\r\n    }\r\n}\r\n\r\nLoader.registerLoader([\"lmat\"], MaterialLoader, Loader.MATERIAL);","\r\nimport { IndexBuffer3D } from \"../graphics/IndexBuffer3D\"\r\nimport { VertexBuffer3D } from \"../graphics/VertexBuffer3D\"\r\nimport { Mesh, skinnedMatrixCache } from \"../resource/models/Mesh\"\r\nimport { SubMesh } from \"../resource/models/SubMesh\"\r\nimport { Byte } from \"../../utils/Byte\"\r\nimport { LayaGL } from \"../../layagl/LayaGL\";\r\nimport { BufferUsage } from \"../../RenderEngine/RenderEnum/BufferTargetType\"\r\nimport { VertexDeclaration } from \"../../RenderEngine/VertexDeclaration\"\r\nimport { IndexFormat } from \"../../RenderEngine/RenderEnum/IndexFormat\"\r\nimport { Matrix4x4 } from \"../../maths/Matrix4x4\"\r\nimport { VertexMesh } from \"../../RenderEngine/RenderShader/VertexMesh\"\r\n\r\n/**\r\n * @internal\r\n * <code>LoadModel</code> 类用于模型加载。\r\n */\r\nexport class LoadModelV04 {\r\n\r\n\t/**@internal */\r\n\tprivate static _BLOCK: any = { count: 0 };\r\n\t/**@internal */\r\n\tprivate static _DATA: any = { offset: 0, size: 0 };\r\n\r\n\t/**@internal */\r\n\tprivate static _strings: any[] = [];\r\n\t/**@internal */\r\n\tprivate static _readData: Byte;\r\n\t/**@internal */\r\n\tprivate static _version: string;\r\n\t/**@internal */\r\n\tprivate static _mesh: Mesh;\r\n\t/**@internal */\r\n\tprivate static _subMeshes: SubMesh[];\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic parse(readData: Byte, version: string, mesh: Mesh, subMeshes: SubMesh[]): void {\r\n\t\tLoadModelV04._mesh = mesh;\r\n\t\tLoadModelV04._subMeshes = subMeshes;\r\n\t\tLoadModelV04._version = version;\r\n\t\tLoadModelV04._readData = readData;\r\n\t\tLoadModelV04.READ_DATA();\r\n\t\tLoadModelV04.READ_BLOCK();\r\n\t\tLoadModelV04.READ_STRINGS();\r\n\t\tfor (var i: number = 0, n: number = LoadModelV04._BLOCK.count; i < n; i++) {\r\n\t\t\tLoadModelV04._readData.pos = LoadModelV04._BLOCK.blockStarts[i];\r\n\t\t\tvar index: number = LoadModelV04._readData.getUint16();\r\n\t\t\tvar blockName: string = LoadModelV04._strings[index];\r\n\t\t\tvar fn: Function = (LoadModelV04 as any)[\"READ_\" + blockName];\r\n\t\t\tif (fn == null)\r\n\t\t\t\tthrow new Error(\"model file err,no this function:\" + index + \" \" + blockName);\r\n\t\t\telse\r\n\t\t\t\tfn.call(null);\r\n\t\t}\r\n\t\tLoadModelV04._strings.length = 0;\r\n\t\tLoadModelV04._readData = null;\r\n\t\tLoadModelV04._version = null;\r\n\t\tLoadModelV04._mesh = null;\r\n\t\tLoadModelV04._subMeshes = null;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate static _readString(): string {\r\n\t\treturn LoadModelV04._strings[LoadModelV04._readData.getUint16()];\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate static READ_DATA(): void {\r\n\t\tLoadModelV04._DATA.offset = LoadModelV04._readData.getUint32();\r\n\t\tLoadModelV04._DATA.size = LoadModelV04._readData.getUint32();\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate static READ_BLOCK(): void {\r\n\t\tvar count: number = LoadModelV04._BLOCK.count = LoadModelV04._readData.getUint16();\r\n\t\tvar blockStarts: any[] = LoadModelV04._BLOCK.blockStarts = [];\r\n\t\tvar blockLengths: any[] = LoadModelV04._BLOCK.blockLengths = [];\r\n\t\tfor (var i: number = 0; i < count; i++) {\r\n\t\t\tblockStarts.push(LoadModelV04._readData.getUint32());\r\n\t\t\tblockLengths.push(LoadModelV04._readData.getUint32());\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate static READ_STRINGS(): void {\r\n\t\tvar offset: number = LoadModelV04._readData.getUint32();\r\n\t\tvar count: number = LoadModelV04._readData.getUint16();\r\n\t\tvar prePos: number = LoadModelV04._readData.pos;\r\n\t\tLoadModelV04._readData.pos = offset + LoadModelV04._DATA.offset;\r\n\r\n\t\tfor (var i: number = 0; i < count; i++)\r\n\t\t\tLoadModelV04._strings[i] = LoadModelV04._readData.readUTFString();\r\n\r\n\t\tLoadModelV04._readData.pos = prePos;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate static READ_MESH(): boolean {\r\n\t\tvar name: string = LoadModelV04._readString();\r\n\t\tvar arrayBuffer: ArrayBuffer = LoadModelV04._readData.__getBuffer();\r\n\t\tvar i: number;\r\n\r\n\t\tvar memorySize: number = 0;\r\n\t\tvar vertexBufferCount: number = LoadModelV04._readData.getInt16();\r\n\t\tvar offset: number = LoadModelV04._DATA.offset;\r\n\t\tfor (i = 0; i < vertexBufferCount; i++) {//TODO:始终为1\r\n\t\t\tvar vbStart: number = offset + LoadModelV04._readData.getUint32();\r\n\t\t\tvar vbLength: number = LoadModelV04._readData.getUint32();\r\n\t\t\tvar vbArrayBuffer: ArrayBuffer = arrayBuffer.slice(vbStart, vbStart + vbLength);\r\n\t\t\tvar vbDatas: Float32Array = new Float32Array(vbArrayBuffer);\r\n\t\t\tvar bufferAttribute: string = LoadModelV04._readString();\r\n\t\t\tvar vertexDeclaration: VertexDeclaration;\r\n\t\t\tswitch (LoadModelV04._version) {\r\n\t\t\t\tcase \"LAYAMODEL:0301\":\r\n\t\t\t\tcase \"LAYAMODEL:0400\":\r\n\t\t\t\t\tvertexDeclaration = VertexMesh.getVertexDeclaration(bufferAttribute);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"LAYAMODEL:0401\":\r\n\t\t\t\t\tvertexDeclaration = VertexMesh.getVertexDeclaration(bufferAttribute, false);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow new Error(\"LoadModelV03: unknown version.\");\r\n\t\t\t}\r\n\r\n\t\t\tif (!vertexDeclaration)\r\n\t\t\t\tthrow new Error(\"LoadModelV03: unknown vertexDeclaration.\");\r\n\r\n\t\t\tvar vertexBuffer: VertexBuffer3D = LayaGL.renderOBJCreate.createVertexBuffer3D(vbDatas.length * 4, BufferUsage.Static, true);\r\n\t\t\tvertexBuffer.vertexDeclaration = vertexDeclaration;\r\n\t\t\tvertexBuffer.setData(vbDatas.buffer);\r\n\t\t\tLoadModelV04._mesh._vertexBuffer = vertexBuffer;\r\n\t\t\tLoadModelV04._mesh._vertexCount += vertexBuffer._byteLength / vertexDeclaration.vertexStride;\r\n\t\t\tmemorySize += vbDatas.length * 4;\r\n\t\t}\r\n\r\n\t\tvar ibStart: number = offset + LoadModelV04._readData.getUint32();\r\n\t\tvar ibLength: number = LoadModelV04._readData.getUint32();\r\n\t\tvar ibDatas: Uint16Array = new Uint16Array(arrayBuffer.slice(ibStart, ibStart + ibLength));\r\n\t\tvar indexBuffer: IndexBuffer3D = LayaGL.renderOBJCreate.createIndexBuffer3D(IndexFormat.UInt16, ibLength / 2,BufferUsage.Static, true);\r\n\t\tindexBuffer.setData(ibDatas);\r\n\t\tLoadModelV04._mesh._indexBuffer = indexBuffer;\r\n\t\tmemorySize += indexBuffer.indexCount * 2;\r\n\r\n\t\tLoadModelV04._mesh._setBuffer(LoadModelV04._mesh._vertexBuffer, indexBuffer);\r\n\r\n\t\tLoadModelV04._mesh._setCPUMemory(memorySize);\r\n\t\tLoadModelV04._mesh._setGPUMemory(memorySize);\r\n\r\n\t\tvar boneNames: string[] = LoadModelV04._mesh._boneNames = [];\r\n\t\tvar boneCount: number = LoadModelV04._readData.getUint16();\r\n\t\tboneNames.length = boneCount;\r\n\t\tfor (i = 0; i < boneCount; i++)\r\n\t\t\tboneNames[i] = LoadModelV04._strings[LoadModelV04._readData.getUint16()];\r\n\r\n\t\tLoadModelV04._readData.pos += 8;//TODO:优化\r\n\r\n\t\tvar bindPoseDataStart: number = LoadModelV04._readData.getUint32();\r\n\t\tvar bindPoseDataLength: number = LoadModelV04._readData.getUint32();\r\n\t\tvar bindPoseDatas: Float32Array = new Float32Array(arrayBuffer.slice(offset + bindPoseDataStart, offset + bindPoseDataStart + bindPoseDataLength));\r\n\t\tvar bindPoseFloatCount: number = bindPoseDatas.length;\r\n\t\tvar bindPoseBuffer: ArrayBuffer = LoadModelV04._mesh._inverseBindPosesBuffer = new ArrayBuffer(bindPoseFloatCount * 4);//TODO:[NATIVE]临时\r\n\t\tLoadModelV04._mesh._inverseBindPoses = [];\r\n\t\tif(bindPoseFloatCount!=0) \r\n\t\t\tLoadModelV04._mesh._instanceBufferStateType = Mesh.MESH_INSTANCEBUFFER_TYPE_SIMPLEANIMATOR;\r\n\t\telse\r\n\t\t\tLoadModelV04._mesh._instanceBufferStateType = Mesh.MESH_INSTANCEBUFFER_TYPE_NORMAL;\r\n\t\t//LoadModelV04._mesh._setInstanceBuffer(LoadModelV04._mesh._instanceBufferStateType);\r\n\t\tfor (i = 0; i < bindPoseFloatCount; i += 16) {\r\n\t\t\tvar inverseGlobalBindPose: Matrix4x4 = new Matrix4x4(bindPoseDatas[i + 0], bindPoseDatas[i + 1], bindPoseDatas[i + 2], bindPoseDatas[i + 3], bindPoseDatas[i + 4], bindPoseDatas[i + 5], bindPoseDatas[i + 6], bindPoseDatas[i + 7], bindPoseDatas[i + 8], bindPoseDatas[i + 9], bindPoseDatas[i + 10], bindPoseDatas[i + 11], bindPoseDatas[i + 12], bindPoseDatas[i + 13], bindPoseDatas[i + 14], bindPoseDatas[i + 15], new Float32Array(bindPoseBuffer, i * 4, 16));\r\n\t\t\tLoadModelV04._mesh._inverseBindPoses[i / 16] = inverseGlobalBindPose;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate static READ_SUBMESH(): boolean {\r\n\t\tvar arrayBuffer: ArrayBuffer = LoadModelV04._readData.__getBuffer();\r\n\t\tvar subMesh: SubMesh = new SubMesh(LoadModelV04._mesh);\r\n\r\n\t\tLoadModelV04._readData.getInt16();//TODO:vbIndex\r\n\t\tLoadModelV04._readData.getUint32();//TODO:vbStart\r\n\t\tLoadModelV04._readData.getUint32();//TODO:vbLength\r\n\r\n\t\tvar ibStart: number = LoadModelV04._readData.getUint32();\r\n\t\tvar ibCount: number = LoadModelV04._readData.getUint32();\r\n\t\tvar indexBuffer: IndexBuffer3D = LoadModelV04._mesh._indexBuffer;\r\n\t\tsubMesh._indexBuffer = indexBuffer;\r\n\t\tsubMesh._setIndexRange(ibStart, ibCount);\r\n\t\tvar vertexBuffer: VertexBuffer3D = LoadModelV04._mesh._vertexBuffer;\r\n\t\tsubMesh._vertexBuffer = vertexBuffer;\r\n\r\n\t\tvar offset: number = LoadModelV04._DATA.offset;\r\n\t\tvar subIndexBufferStart: number[] = subMesh._subIndexBufferStart;\r\n\t\tvar subIndexBufferCount: number[] = subMesh._subIndexBufferCount;\r\n\t\tvar boneIndicesList: Uint16Array[] = subMesh._boneIndicesList;\r\n\t\tvar drawCount: number = LoadModelV04._readData.getUint16();\r\n\t\tsubIndexBufferStart.length = drawCount;\r\n\t\tsubIndexBufferCount.length = drawCount;\r\n\t\tboneIndicesList.length = drawCount;\r\n\r\n\t\tvar skinnedCache: skinnedMatrixCache[] = LoadModelV04._mesh._skinnedMatrixCaches;\r\n\t\tvar subMeshIndex: number = LoadModelV04._subMeshes.length;\r\n\t\tskinnedCache.length = LoadModelV04._mesh._inverseBindPoses.length;\r\n\t\tfor (var i: number = 0; i < drawCount; i++) {\r\n\t\t\tsubIndexBufferStart[i] = LoadModelV04._readData.getUint32();\r\n\t\t\tsubIndexBufferCount[i] = LoadModelV04._readData.getUint32();\r\n\t\t\tvar boneDicofs: number = LoadModelV04._readData.getUint32();\r\n\t\t\tvar boneDicCount: number = LoadModelV04._readData.getUint32();\r\n\t\t\tvar boneIndices: Uint16Array = boneIndicesList[i] = new Uint16Array(arrayBuffer.slice(offset + boneDicofs, offset + boneDicofs + boneDicCount));\r\n\t\t\tvar boneIndexCount: number = boneIndices.length;\r\n\t\t\tfor (var j: number = 0; j < boneIndexCount; j++) {\r\n\t\t\t\tvar index: number = boneIndices[j];\r\n\t\t\t\tskinnedCache[index] || (skinnedCache[index] = new skinnedMatrixCache(subMeshIndex, i, j));\r\n\t\t\t}\r\n\t\t}\r\n\t\tLoadModelV04._subMeshes.push(subMesh);\r\n\t\treturn true;\r\n\t}\r\n}\r\n\r\n\r\n","\r\nexport class MorphTarget {\r\n\r\n    /** @internal */\r\n    _index: number;\r\n\r\n    name: string;\r\n\r\n    fullWeight: number;\r\n\r\n    data: Float32Array;\r\n\r\n    constructor() {\r\n        this.fullWeight = 1;\r\n    }\r\n\r\n}\r\n\r\n// todo class name\r\nexport class MorphTargetChannel {\r\n\r\n    /** @internal */\r\n    _index: number;\r\n\r\n    name: string;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    targets: Array<MorphTarget>;\r\n\r\n    targetCount: number = 0;\r\n\r\n    constructor() {\r\n        this.targets = new Array<MorphTarget>();\r\n    }\r\n\r\n    getTargetByIndex(index: number) {\r\n        return this.targets[index];\r\n    }\r\n\r\n    addTarget(target: MorphTarget) {\r\n        this.targetCount++;\r\n        this.targets.push(target);\r\n        this.targets.sort((a, b) => {\r\n            return a.fullWeight - b.fullWeight;\r\n        })\r\n    }\r\n\r\n}","import { LayaGL } from \"../../../layagl/LayaGL\";\r\nimport { Vector4 } from \"../../../maths/Vector4\";\r\nimport { FilterMode } from \"../../../RenderEngine/RenderEnum/FilterMode\";\r\nimport { RenderCapable } from \"../../../RenderEngine/RenderEnum/RenderCapable\";\r\nimport { RenderParams } from \"../../../RenderEngine/RenderEnum/RenderParams\";\r\nimport { TextureFormat } from \"../../../RenderEngine/RenderEnum/TextureFormat\";\r\nimport { VertexMesh } from \"../../../RenderEngine/RenderShader/VertexMesh\";\r\nimport { VertexDeclaration } from \"../../../RenderEngine/VertexDeclaration\";\r\nimport { Texture2DArray } from \"../../../resource/Texture2DArray\";\r\nimport { Bounds } from \"../../math/Bounds\";\r\nimport { MorphTarget, MorphTargetChannel } from \"./MorphTarget\";\r\n\r\nexport class MorphTargetData {\r\n\r\n    // keep origin insert order\r\n\r\n    private targets: Array<MorphTarget>;\r\n\r\n    private channels: Array<MorphTargetChannel>;\r\n\r\n    vertexCount: number;\r\n\r\n    /**\r\n     * // todo 移除  \r\n     * // 改为 从 VertexDeclaration 中获取\r\n     * morph target attribute element count\r\n     */\r\n    elementCount: number;\r\n\r\n    /**@internal */\r\n    attributeOffset: Vector4;\r\n    /**@internal */\r\n    params: Vector4;\r\n\r\n    /** @internal */\r\n    targetTexture: Texture2DArray;\r\n\r\n    vertexDec: VertexDeclaration;\r\n\r\n    bounds: Bounds;\r\n\r\n    constructor() {\r\n        this.targets = new Array();\r\n        this.channels = new Array();\r\n        this.bounds = new Bounds();\r\n        this.params = new Vector4();\r\n    }\r\n\r\n    addMorphChannel(channel: MorphTargetChannel) {\r\n\r\n        channel._index = this.channels.length;\r\n        this.channels.push(channel);\r\n\r\n        channel.targets.forEach(target => {\r\n            target._index = this.targets.length;\r\n            this.targets.push(target);\r\n        })\r\n    }\r\n\r\n    getMorphChannel(name: string): MorphTargetChannel {\r\n        // return this.targets.find(value => value.name == name);\r\n        return this.channels.find(value => value.name == name);\r\n    }\r\n\r\n    getMorphChannelbyIndex(index: number) {\r\n        return this.channels[index];\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    get targetCount(): number {\r\n        return this.targets.length;\r\n    }\r\n\r\n    get channelCount(): number {\r\n        return this.channels.length;\r\n    }\r\n\r\n    initData() {\r\n        if (LayaGL.renderEngine.getCapable(RenderCapable.Texture3D)) {\r\n            let targetNum = this.targets.length;\r\n\r\n            let maxTexSize = LayaGL.renderEngine.getParams(RenderParams.MAX_Texture_Size);\r\n\r\n            let vertexCount = this.vertexCount;\r\n\r\n            let vertexDec = this.vertexDec;\r\n\r\n            let morphStride = vertexDec.vertexStride / 4;\r\n\r\n            let elementCount = vertexDec.vertexElementCount;\r\n            this.elementCount = elementCount;\r\n\r\n            let texHeight = Math.floor(elementCount * vertexCount / maxTexSize) + 1;\r\n\r\n            let texelStride = 4;\r\n            this.targetTexture = new Texture2DArray(maxTexSize, texHeight, targetNum, TextureFormat.R32G32B32A32, false, false, false);\r\n            this.targetTexture.filterMode = FilterMode.Point;\r\n            this.targetTexture.anisoLevel = 1;\r\n            this.targetTexture.lock = true;\r\n\r\n            let data = new Float32Array(maxTexSize * texHeight * targetNum * texelStride).fill(0);\r\n\r\n            /**\r\n             * x: position offset\r\n             * y: normal offset\r\n             * z: tangent offset\r\n             */\r\n            let attributeOffset = this.attributeOffset = new Vector4(0, 0, 0, 0);\r\n            attributeOffset.x = vertexDec._vertexElements.indexOf(vertexDec.getVertexElementByUsage(VertexMesh.MESH_POSITION0));\r\n            attributeOffset.y = vertexDec._vertexElements.indexOf(vertexDec.getVertexElementByUsage(VertexMesh.MESH_NORMAL0));\r\n            attributeOffset.z = vertexDec._vertexElements.indexOf(vertexDec.getVertexElementByUsage(VertexMesh.MESH_TANGENT0));\r\n\r\n            let targetStride = maxTexSize * texHeight;\r\n\r\n            for (let targetIndex = 0; targetIndex < targetNum; targetIndex++) {\r\n                let target = this.targets[targetIndex];\r\n                for (let vertexIndex = 0; vertexIndex < vertexCount; vertexIndex++) {\r\n                    let dataOffset = (targetIndex * targetStride + vertexIndex * elementCount) * texelStride;\r\n                    vertexDec._vertexElements.forEach((element, elementIndex) => {\r\n                        let pixelOffset = dataOffset + elementIndex * 4;\r\n\r\n                        let elementOffset = element.offset / 4;\r\n                        let targetDataOffset = vertexIndex * morphStride + elementOffset;\r\n                        switch (element.elementUsage) {\r\n                            case VertexMesh.MESH_POSITION0:\r\n                            case VertexMesh.MESH_NORMAL0:\r\n                                data[pixelOffset] = target.data[targetDataOffset];\r\n                                data[pixelOffset + 1] = target.data[targetDataOffset + 1];\r\n                                data[pixelOffset + 2] = target.data[targetDataOffset + 2];\r\n                                break;\r\n                            case VertexMesh.MESH_TANGENT0:\r\n                                data[pixelOffset] = target.data[targetDataOffset];\r\n                                data[pixelOffset + 1] = target.data[targetDataOffset + 1];\r\n                                data[pixelOffset + 2] = target.data[targetDataOffset + 2];\r\n                                data[pixelOffset + 3] = target.data[targetDataOffset + 3];\r\n                                break;\r\n                            default:\r\n                                break;\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n\r\n            this.targetTexture.setPixlesData(data, false, false);\r\n\r\n            this.params.setValue(this.targetTexture.width, this.targetTexture.height, this.elementCount, this.channelCount);\r\n        }\r\n    }\r\n\r\n    destroy() {\r\n        if (this.targetTexture) {\r\n            this.targetTexture.lock = false;\r\n            this.targetTexture.destroy();\r\n            this.targetTexture = null;\r\n        }\r\n\r\n        // todo\r\n        this.targets = null;\r\n        this.channels = null;\r\n    }\r\n\r\n    clone(): MorphTargetData {\r\n        let res = new MorphTargetData();\r\n\r\n        res.bounds.setMin(this.bounds.getMin());\r\n        res.bounds.setMax(this.bounds.getMax());\r\n\r\n        res.vertexCount = this.vertexCount;\r\n        res.vertexDec = this.vertexDec;\r\n\r\n        let channelCount = this.channelCount;\r\n        for (let index = 0; index < channelCount; index++) {\r\n            let channel = this.getMorphChannelbyIndex(index);\r\n\r\n            let newChannel = new MorphTargetChannel();\r\n            newChannel.name = channel.name;\r\n\r\n            let targetCount = channel.targetCount;\r\n            for (let targetIndex = 0; targetIndex < targetCount; targetIndex++) {\r\n                let target = channel.getTargetByIndex(targetIndex);\r\n                \r\n                let newTarget = new MorphTarget();\r\n                newTarget.name = target.name;\r\n                newTarget.fullWeight = target.fullWeight;\r\n                newTarget.data = new Float32Array(target.data);\r\n                \r\n                newChannel.addTarget(newTarget);\r\n            }\r\n\r\n            res.addMorphChannel(newChannel);\r\n        }\r\n\r\n        res.initData();\r\n        return res;\r\n    }\r\n\r\n}","import { LayaGL } from \"../../layagl/LayaGL\"\r\nimport { Matrix4x4 } from \"../../maths/Matrix4x4\"\r\nimport { Vector3 } from \"../../maths/Vector3\"\r\nimport { BufferUsage } from \"../../RenderEngine/RenderEnum/BufferTargetType\"\r\nimport { IndexFormat } from \"../../RenderEngine/RenderEnum/IndexFormat\"\r\nimport { VertexMesh } from \"../../RenderEngine/RenderShader/VertexMesh\"\r\nimport { VertexDeclaration } from \"../../RenderEngine/VertexDeclaration\"\r\nimport { Byte } from \"../../utils/Byte\"\r\nimport { HalfFloatUtils } from \"../../utils/HalfFloatUtils\"\r\nimport { IndexBuffer3D } from \"../graphics/IndexBuffer3D\"\r\nimport { VertexBuffer3D } from \"../graphics/VertexBuffer3D\"\r\nimport { Mesh, skinnedMatrixCache } from \"../resource/models/Mesh\"\r\nimport { MorphTarget, MorphTargetChannel } from \"../resource/models/MorphTarget\"\r\nimport { MorphTargetData } from \"../resource/models/MorphTargetData\"\r\nimport { SubMesh } from \"../resource/models/SubMesh\"\r\n\r\n\r\n/**\r\n * @internal\r\n * <code>LoadModelV05</code> 类用于模型加载。\r\n */\r\nexport class LoadModelV05 {\r\n\r\n    /**@internal */\r\n    private static _BLOCK: any = { count: 0 };\r\n    /**@internal */\r\n    private static _DATA = { offset: 0, size: 0 };\r\n\r\n    /**@internal */\r\n    private static _strings: any[] = [];\r\n    /**@internal */\r\n    private static _readData: Byte;\r\n    /**@internal */\r\n    private static _version: string;\r\n    /**@internal */\r\n    private static _mesh: Mesh;\r\n    /**@internal */\r\n    private static _subMeshes: SubMesh[];\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    static parse(readData: Byte, version: string, mesh: Mesh, subMeshes: SubMesh[]): void {\r\n        LoadModelV05._mesh = mesh;\r\n        LoadModelV05._subMeshes = subMeshes;\r\n        LoadModelV05._version = version;\r\n        LoadModelV05._readData = readData;\r\n        LoadModelV05.READ_DATA();\r\n        LoadModelV05.READ_BLOCK();\r\n        LoadModelV05.READ_STRINGS();\r\n        for (var i: number = 0, n: number = LoadModelV05._BLOCK.count; i < n; i++) {\r\n            LoadModelV05._readData.pos = LoadModelV05._BLOCK.blockStarts[i];\r\n            var index: number = LoadModelV05._readData.getUint16();\r\n            var blockName: string = LoadModelV05._strings[index];\r\n            var fn: Function = (LoadModelV05 as any)[\"READ_\" + blockName];\r\n            if (fn == null)\r\n                throw new Error(\"model file err,no this function:\" + index + \" \" + blockName);\r\n            else\r\n                fn.call(null);\r\n        }\r\n        LoadModelV05._strings.length = 0;\r\n        LoadModelV05._readData = null;\r\n        LoadModelV05._version = null;\r\n        LoadModelV05._mesh = null;\r\n        LoadModelV05._subMeshes = null;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private static _readString(): string {\r\n        return LoadModelV05._strings[LoadModelV05._readData.getUint16()];\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private static READ_DATA(): void {\r\n        LoadModelV05._DATA.offset = LoadModelV05._readData.getUint32();\r\n        LoadModelV05._DATA.size = LoadModelV05._readData.getUint32();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private static READ_BLOCK(): void {\r\n        var count: number = LoadModelV05._BLOCK.count = LoadModelV05._readData.getUint16();\r\n        var blockStarts: any[] = LoadModelV05._BLOCK.blockStarts = [];\r\n        var blockLengths: any[] = LoadModelV05._BLOCK.blockLengths = [];\r\n        for (var i: number = 0; i < count; i++) {\r\n            blockStarts.push(LoadModelV05._readData.getUint32());\r\n            blockLengths.push(LoadModelV05._readData.getUint32());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private static READ_STRINGS(): void {\r\n        var offset: number = LoadModelV05._readData.getUint32();\r\n        var count: number = LoadModelV05._readData.getUint16();\r\n        var prePos: number = LoadModelV05._readData.pos;\r\n        LoadModelV05._readData.pos = offset + LoadModelV05._DATA.offset;\r\n\r\n        for (var i: number = 0; i < count; i++)\r\n            LoadModelV05._strings[i] = LoadModelV05._readData.readUTFString();\r\n\r\n        LoadModelV05._readData.pos = prePos;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private static READ_MESH(): boolean {\r\n        var i: number;\r\n        var memorySize: number = 0;\r\n        var name: string = LoadModelV05._readString();\r\n        var reader: Byte = LoadModelV05._readData;\r\n        var arrayBuffer: ArrayBuffer = reader.__getBuffer();\r\n\r\n\r\n\r\n        var vertexBufferCount: number = reader.getInt16();\r\n        var offset: number = LoadModelV05._DATA.offset;\r\n        for (i = 0; i < vertexBufferCount; i++) {//TODO:始终为1\r\n            var vbStart: number = offset + reader.getUint32();\r\n            var vertexCount: number = reader.getUint32();\r\n            var vertexFlag: string = LoadModelV05._readString();\r\n            var vertexDeclaration: VertexDeclaration = VertexMesh.getVertexDeclaration(vertexFlag, false);\r\n\r\n            var vertexStride: number = vertexDeclaration.vertexStride;\r\n            var vertexData: ArrayBuffer;\r\n            var floatData: Float32Array;\r\n            var uint8Data: Uint8Array;\r\n\r\n            var subVertexFlags: any[] = vertexFlag.split(\",\");\r\n            var subVertexCount: number = subVertexFlags.length;\r\n            var mesh: Mesh = LoadModelV05._mesh;\r\n\r\n            switch (LoadModelV05._version) {\r\n                case \"LAYAMODEL:05\":\r\n                case \"LAYAMODEL:0501\":\r\n                case \"LAYAMODEL:0502\":\r\n                    vertexData = arrayBuffer.slice(vbStart, vbStart + vertexCount * vertexStride);\r\n                    floatData = new Float32Array(vertexData);\r\n                    uint8Data = new Uint8Array(vertexData);\r\n                    break;\r\n                case \"LAYAMODEL:COMPRESSION_05\":\r\n                case \"LAYAMODEL:COMPRESSION_0501\":\r\n                    vertexData = new ArrayBuffer(vertexStride * vertexCount);\r\n                    floatData = new Float32Array(vertexData);\r\n                    uint8Data = new Uint8Array(vertexData);\r\n                    var lastPosition: number = reader.pos;\r\n                    reader.pos = vbStart;\r\n\r\n                    for (var j: number = 0; j < vertexCount; j++) {\r\n                        var subOffset: number;\r\n                        var verOffset: number = j * vertexStride;\r\n                        for (var k: number = 0; k < subVertexCount; k++) {\r\n                            switch (subVertexFlags[k]) {\r\n                                case \"POSITION\":\r\n                                    subOffset = verOffset / 4;\r\n                                    floatData[subOffset] = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n                                    floatData[subOffset + 1] = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n                                    floatData[subOffset + 2] = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n                                    verOffset += 12;\r\n                                    break;\r\n                                case \"NORMAL\":\r\n                                    subOffset = verOffset / 4;\r\n                                    floatData[subOffset] = reader.getUint8() / 127.5 - 1;\r\n                                    floatData[subOffset + 1] = reader.getUint8() / 127.5 - 1;\r\n                                    floatData[subOffset + 2] = reader.getUint8() / 127.5 - 1;\r\n                                    verOffset += 12;\r\n                                    break;\r\n                                case \"COLOR\":\r\n                                    subOffset = verOffset / 4;\r\n                                    floatData[subOffset] = reader.getUint8() / 255;\r\n                                    floatData[subOffset + 1] = reader.getUint8() / 255;\r\n                                    floatData[subOffset + 2] = reader.getUint8() / 255;\r\n                                    floatData[subOffset + 3] = reader.getUint8() / 255;\r\n                                    verOffset += 16;\r\n                                    break;\r\n                                case \"UV\":\r\n                                    subOffset = verOffset / 4;\r\n                                    floatData[subOffset] = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n                                    floatData[subOffset + 1] = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n                                    verOffset += 8;\r\n                                    break;\r\n                                case \"UV1\":\r\n                                    subOffset = verOffset / 4;\r\n                                    floatData[subOffset] = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n                                    floatData[subOffset + 1] = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n                                    verOffset += 8;\r\n                                    break;\r\n                                case \"BLENDWEIGHT\":\r\n                                    subOffset = verOffset / 4;\r\n                                    floatData[subOffset] = reader.getUint8() / 255;\r\n                                    floatData[subOffset + 1] = reader.getUint8() / 255;\r\n                                    floatData[subOffset + 2] = reader.getUint8() / 255;\r\n                                    floatData[subOffset + 3] = reader.getUint8() / 255;\r\n                                    verOffset += 16;\r\n                                    break;\r\n                                case \"BLENDINDICES\":\r\n                                    uint8Data[verOffset] = reader.getUint8();\r\n                                    uint8Data[verOffset + 1] = reader.getUint8();\r\n                                    uint8Data[verOffset + 2] = reader.getUint8();\r\n                                    uint8Data[verOffset + 3] = reader.getUint8();\r\n                                    verOffset += 4;\r\n                                    break;\r\n                                case \"TANGENT\":\r\n                                    subOffset = verOffset / 4;\r\n                                    floatData[subOffset] = reader.getUint8() / 127.5 - 1;\r\n                                    floatData[subOffset + 1] = reader.getUint8() / 127.5 - 1;\r\n                                    floatData[subOffset + 2] = reader.getUint8() / 127.5 - 1;\r\n                                    floatData[subOffset + 3] = reader.getUint8() / 127.5 - 1;\r\n                                    verOffset += 16;\r\n                                    break;\r\n                            }\r\n                        }\r\n                    }\r\n                    reader.pos = lastPosition;\r\n                    break;\r\n            }\r\n\r\n            var vertexBuffer: VertexBuffer3D = LayaGL.renderOBJCreate.createVertexBuffer3D(vertexData.byteLength, BufferUsage.Static, true);\r\n            vertexBuffer.vertexDeclaration = vertexDeclaration;\r\n            vertexBuffer.setData(vertexData);\r\n            var vertexCount: number = vertexBuffer._byteLength / vertexDeclaration.vertexStride;\r\n            //TDDO:是否加标记\r\n            if (vertexCount > 65535)\r\n                mesh._indexFormat = IndexFormat.UInt32;\r\n            else\r\n                mesh._indexFormat = IndexFormat.UInt16;\r\n            mesh._vertexBuffer = vertexBuffer;\r\n            mesh._vertexCount += vertexCount;\r\n            memorySize += floatData.length * 4;\r\n        }\r\n\r\n        var ibStart: number = offset + reader.getUint32();\r\n        var ibLength: number = reader.getUint32();\r\n\r\n        var ibDatas: Uint16Array | Uint32Array;\r\n        if (mesh.indexFormat == IndexFormat.UInt32)\r\n            ibDatas = new Uint32Array(arrayBuffer.slice(ibStart, ibStart + ibLength));\r\n        else\r\n            ibDatas = new Uint16Array(arrayBuffer.slice(ibStart, ibStart + ibLength));\r\n\r\n        var indexBuffer: IndexBuffer3D = LayaGL.renderOBJCreate.createIndexBuffer3D(mesh.indexFormat, ibDatas.length, BufferUsage.Static, true);\r\n        indexBuffer.setData(ibDatas);\r\n        mesh._indexBuffer = indexBuffer;\r\n\r\n        mesh._setBuffer(mesh._vertexBuffer, indexBuffer);\r\n\r\n        memorySize += indexBuffer.indexCount * 2;\r\n        mesh._setCPUMemory(memorySize);\r\n        mesh._setGPUMemory(memorySize);\r\n\r\n        if (LoadModelV05._version == \"LAYAMODEL:0501\" || LoadModelV05._version == \"LAYAMODEL:COMPRESSION_0501\" || LoadModelV05._version == \"LAYAMODEL:0502\") {\r\n            var bounds = mesh.bounds;\r\n            var min: Vector3 = bounds.getMin();\r\n            var max: Vector3 = bounds.getMax();\r\n            min.setValue(reader.getFloat32(), reader.getFloat32(), reader.getFloat32());\r\n            max.setValue(reader.getFloat32(), reader.getFloat32(), reader.getFloat32());\r\n            bounds.setMin(min);\r\n            bounds.setMax(max);\r\n            mesh.bounds = bounds;\r\n        }\r\n\r\n        var boneNames: string[] = mesh._boneNames = [];\r\n        var boneCount: number = reader.getUint16();\r\n        boneNames.length = boneCount;\r\n        for (i = 0; i < boneCount; i++)\r\n            boneNames[i] = LoadModelV05._strings[reader.getUint16()];//[兼容性]\r\n\r\n        var bindPoseDataStart: number = reader.getUint32();\r\n        var bindPoseDataLength: number = reader.getUint32();\r\n        var bindPoseDatas: Float32Array = new Float32Array(arrayBuffer.slice(offset + bindPoseDataStart, offset + bindPoseDataStart + bindPoseDataLength));\r\n        var bindPoseFloatCount: number = bindPoseDatas.length;\r\n        var bindPoseBuffer: ArrayBuffer = mesh._inverseBindPosesBuffer = new ArrayBuffer(bindPoseFloatCount * 4);//TODO:[NATIVE]临时\r\n        mesh._inverseBindPoses = [];\r\n        if (bindPoseFloatCount != 0)\r\n            mesh._instanceBufferStateType = Mesh.MESH_INSTANCEBUFFER_TYPE_SIMPLEANIMATOR;\r\n        else\r\n            mesh._instanceBufferStateType = Mesh.MESH_INSTANCEBUFFER_TYPE_NORMAL;\r\n        //mesh._setInstanceBuffer(mesh._instanceBufferStateType);\r\n        for (i = 0; i < bindPoseFloatCount; i += 16) {\r\n            var inverseGlobalBindPose: Matrix4x4 = new Matrix4x4(bindPoseDatas[i + 0], bindPoseDatas[i + 1], bindPoseDatas[i + 2], bindPoseDatas[i + 3], bindPoseDatas[i + 4], bindPoseDatas[i + 5], bindPoseDatas[i + 6], bindPoseDatas[i + 7], bindPoseDatas[i + 8], bindPoseDatas[i + 9], bindPoseDatas[i + 10], bindPoseDatas[i + 11], bindPoseDatas[i + 12], bindPoseDatas[i + 13], bindPoseDatas[i + 14], bindPoseDatas[i + 15], new Float32Array(bindPoseBuffer, i * 4, 16));\r\n            mesh._inverseBindPoses[i / 16] = inverseGlobalBindPose;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private static READ_SUBMESH(): boolean {\r\n        var reader: Byte = LoadModelV05._readData;\r\n        var arrayBuffer: ArrayBuffer = reader.__getBuffer();\r\n        var subMesh: SubMesh = new SubMesh(LoadModelV05._mesh);\r\n\r\n        reader.getInt16();//TODO:vbIndex\r\n        var ibStart: number = reader.getUint32();\r\n        var ibCount: number = reader.getUint32();\r\n        var indexBuffer: IndexBuffer3D = LoadModelV05._mesh._indexBuffer;\r\n        subMesh._indexBuffer = indexBuffer;\r\n        subMesh._setIndexRange(ibStart, ibCount);\r\n        var vertexBuffer: VertexBuffer3D = LoadModelV05._mesh._vertexBuffer;\r\n        subMesh._vertexBuffer = vertexBuffer;\r\n\r\n        var offset: number = LoadModelV05._DATA.offset;\r\n        var subIndexBufferStart: number[] = subMesh._subIndexBufferStart;\r\n        var subIndexBufferCount: number[] = subMesh._subIndexBufferCount;\r\n        var boneIndicesList: Uint16Array[] = subMesh._boneIndicesList;\r\n        var drawCount: number = reader.getUint16();\r\n        subIndexBufferStart.length = drawCount;\r\n        subIndexBufferCount.length = drawCount;\r\n        boneIndicesList.length = drawCount;\r\n\r\n        var skinnedCache: skinnedMatrixCache[] = LoadModelV05._mesh._skinnedMatrixCaches;\r\n        var subMeshIndex: number = LoadModelV05._subMeshes.length;\r\n        skinnedCache.length = LoadModelV05._mesh._inverseBindPoses.length;\r\n        for (var i: number = 0; i < drawCount; i++) {\r\n            subIndexBufferStart[i] = reader.getUint32();\r\n            subIndexBufferCount[i] = reader.getUint32();\r\n            var boneDicofs: number = reader.getUint32();\r\n            var boneDicCount: number = reader.getUint32();\r\n            var boneIndices: Uint16Array = boneIndicesList[i] = new Uint16Array(arrayBuffer.slice(offset + boneDicofs, offset + boneDicofs + boneDicCount));\r\n            for (var j: number = 0, m: number = boneIndices.length; j < m; j++) {\r\n                var index: number = boneIndices[j];\r\n                skinnedCache[index] || (skinnedCache[index] = new skinnedMatrixCache(subMeshIndex, i, j));\r\n            }\r\n        }\r\n        LoadModelV05._subMeshes.push(subMesh);\r\n        return true;\r\n    }\r\n\r\n    private static READ_MORPH(): boolean {\r\n\r\n        let reader: Byte = LoadModelV05._readData;\r\n        let arrayBuffer: ArrayBuffer = reader.__getBuffer();\r\n        let offset = LoadModelV05._DATA.offset;\r\n        let mesh = LoadModelV05._mesh;\r\n\r\n        let morphData = mesh.morphTargetData = new MorphTargetData();\r\n\r\n        let morphVertexDecStr = LoadModelV05._strings[reader.getUint16()];\r\n\r\n        morphData.vertexDec = VertexMesh.getVertexDeclaration(morphVertexDecStr);\r\n\r\n        let bounds = morphData.bounds;\r\n        let min = bounds.getMin();\r\n        let max = bounds.getMax();\r\n        min.set(reader.getFloat32(), reader.getFloat32(), reader.getFloat32());\r\n        max.set(reader.getFloat32(), reader.getFloat32(), reader.getFloat32());\r\n        bounds.setMin(min);\r\n        bounds.setMax(max);\r\n\r\n        let channelCount = reader.readUint16();\r\n\r\n        for (let channelIndex = 0; channelIndex < channelCount; channelIndex++) {\r\n            let channel = new MorphTargetChannel();\r\n            channel.name = LoadModelV05._strings[reader.getUint16()];\r\n            let targetCount = reader.readUint16();\r\n            for (let targetIndex = 0; targetIndex < targetCount; targetIndex++) {\r\n                let target = new MorphTarget();\r\n                let targetName = LoadModelV05._strings[reader.getUint16()];\r\n                target.name = targetName;\r\n                target.fullWeight = reader.readFloat32();\r\n                let bufferStart = reader.readUint32();\r\n                let bufferLength = reader.readUint32();\r\n                target.data = new Float32Array(arrayBuffer.slice(offset + bufferStart, offset + bufferStart + bufferLength));\r\n\r\n                channel.addTarget(target);\r\n            }\r\n            morphData.addMorphChannel(channel);\r\n        }\r\n\r\n        morphData.vertexCount = mesh.vertexCount;\r\n        morphData.initData();\r\n\r\n        return true;\r\n    }\r\n\r\n    private static READ_UVSIZE(): void {\r\n        LoadModelV05._mesh._width = LoadModelV05._readData.readUint16();\r\n        LoadModelV05._mesh._height = LoadModelV05._readData.readUint16();\r\n    }\r\n}\r\n\r\n\r\n","import { Byte } from \"../../utils/Byte\";\r\nimport { Mesh } from \"../resource/models/Mesh\";\r\nimport { SubMesh } from \"../resource/models/SubMesh\";\r\nimport { LoadModelV04 } from \"./LoadModelV04\";\r\nimport { LoadModelV05 } from \"./LoadModelV05\";\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class MeshReader {\r\n\t/**\r\n\t *@internal\r\n\t */\r\n\tstatic _parse(data: ArrayBuffer): Mesh {\r\n\t\tvar mesh: Mesh = new Mesh();\r\n\t\tMeshReader.read(data, mesh, mesh._subMeshes);\r\n\t\treturn mesh;\r\n\t}\r\n\r\n\tstatic read(data: ArrayBuffer, mesh: Mesh, subMeshes: SubMesh[]): void {\r\n\t\tvar readData: Byte = new Byte(data);\r\n\t\treadData.pos = 0;\r\n\t\tvar version: string = readData.readUTFString();\r\n\t\tswitch (version) {\r\n\t\t\tcase \"LAYAMODEL:0301\":\r\n\t\t\tcase \"LAYAMODEL:0400\":\r\n\t\t\tcase \"LAYAMODEL:0401\":\r\n\t\t\t\tLoadModelV04.parse(readData, version, mesh, subMeshes);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"LAYAMODEL:05\":\r\n\t\t\tcase \"LAYAMODEL:COMPRESSION_05\":\r\n\t\t\tcase \"LAYAMODEL:0501\":\r\n\t\t\tcase \"LAYAMODEL:COMPRESSION_0501\":\r\n\t\t\tcase \"LAYAMODEL:0502\":\r\n\t\t\t\tLoadModelV05.parse(readData, version, mesh, subMeshes);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(\"unknown mesh version: \" + version);\r\n\t\t}\r\n\t\tmesh._setSubMeshes(subMeshes);\r\n\t\tif (version != \"LAYAMODEL:0501\" && version != \"LAYAMODEL:COMPRESSION_0501\" && version != \"LAYAMODEL:0502\")//compatible\r\n\t\t\tmesh.calculateBounds();\r\n\t}\r\n}\r\n\r\n","import { IResourceLoader, ILoadTask, Loader } from \"../../net/Loader\";\r\nimport { AssetDb } from \"../../resource/AssetDb\";\r\nimport { MeshReader } from \"./MeshReader\";\r\n\r\nclass MeshLoader implements IResourceLoader {\r\n    load(task: ILoadTask) {\r\n        let url = AssetDb.inst.getSubAssetURL(task.url, task.uuid, null, \"lm\");\r\n        return task.loader.fetch(url, \"arraybuffer\", task.progress.createCallback(), task.options).then(data => {\r\n            if (!data)\r\n                return null;\r\n\r\n            return MeshReader._parse(data);\r\n        });\r\n    }\r\n}\r\n\r\nLoader.registerLoader([\"lm\"], MeshLoader, Loader.MESH);","import { Component } from \"../../components/Component\";\r\nimport { Node } from \"../../display/Node\";\r\nimport { Camera } from \"../core/Camera\";\r\nimport { DirectionLight } from \"../core/light/DirectionLight\";\r\nimport { PointLight } from \"../core/light/PointLight\";\r\nimport { SpotLight } from \"../core/light/SpotLight\";\r\nimport { MeshSprite3D } from \"../core/MeshSprite3D\";\r\nimport { ShuriKenParticle3D } from \"../core/particleShuriKen/ShuriKenParticle3D\";\r\nimport { RenderableSprite3D } from \"../core/RenderableSprite3D\";\r\nimport { Scene3D } from \"../core/scene/Scene3D\";\r\nimport { SkinnedMeshSprite3D } from \"../core/SkinnedMeshSprite3D\";\r\nimport { Sprite3D } from \"../core/Sprite3D\";\r\nimport { TrailSprite3D } from \"../core/trail/TrailSprite3D\";\r\nimport { ClassUtils } from \"../../utils/ClassUtils\";\r\nimport { SimpleSkinnedMeshSprite3D } from \"../core/SimpleSkinnedMeshSprite3D\";\r\nimport { ILoadURL, Loader } from \"../../net/Loader\";\r\nimport { URL } from \"../../net/URL\";\r\nimport { HierarchyLoader } from \"../../loaders/HierarchyLoader\";\r\nimport { ReflectionProbe } from \"../component/Volume/reflectionProbe/ReflectionProbe\";\r\n\r\n/**\r\n * @internal\r\n * <code>Utils3D</code> 类用于创建3D工具。\r\n */\r\nclass HierarchyParserV2 {\r\n    /**\r\n     * @internal\r\n     * @param nodeData 创建数据\r\n     * @param spriteMap 精灵集合\r\n     * @param outBatchSprites 渲染精灵集合\r\n     */\r\n    private static _createSprite3DInstance(nodeData: any, spriteMap: any, outBatchSprites: RenderableSprite3D[]): Node {\r\n        let node: Node;\r\n        switch (nodeData.type) {\r\n            case \"Scene3D\":\r\n                node = new Scene3D();\r\n                break;\r\n            case \"Sprite3D\":\r\n                node = new Sprite3D();\r\n                break;\r\n            case \"MeshSprite3D\":\r\n                node = new MeshSprite3D();\r\n                (outBatchSprites && nodeData.props.isStatic) && (outBatchSprites.push(<MeshSprite3D>node));\r\n                break;\r\n            case \"SkinnedMeshSprite3D\":\r\n                node = new SkinnedMeshSprite3D();\r\n                break;\r\n            case \"SimpleSkinnedMeshSprite3D\":\r\n                node = new SimpleSkinnedMeshSprite3D();\r\n                break;\r\n            case \"ShuriKenParticle3D\":\r\n                node = new ShuriKenParticle3D();\r\n                break;\r\n            case \"Camera\":\r\n                node = new Camera();\r\n                break;\r\n            case \"DirectionLight\":\r\n                node = new DirectionLight();\r\n                break;\r\n            case \"PointLight\":\r\n                node = new PointLight();\r\n                break;\r\n            case \"SpotLight\":\r\n                node = new SpotLight();\r\n                break;\r\n            case \"TrailSprite3D\":\r\n                node = new TrailSprite3D();\r\n                break;\r\n            case \"ReflectionProbe\":\r\n                node = new Sprite3D();\r\n                node.addComponent(ReflectionProbe);\r\n                break;\r\n            default:\r\n                throw new Error(\"Utils3D:unidentified class type in (.lh) file.\");\r\n        }\r\n\r\n        let childData: any[] = nodeData.child;\r\n        if (childData) {\r\n            for (let i: number = 0, n: number = childData.length; i < n; i++) {\r\n                let child: any = HierarchyParserV2._createSprite3DInstance(childData[i], spriteMap, outBatchSprites)\r\n                node.addChild(child);\r\n            }\r\n        }\r\n\r\n        spriteMap[nodeData.instanceID] = node;\r\n        return node;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @param nodeData \r\n     * @param spriteMap \r\n     * @param interactMap \r\n     */\r\n    private static _createComponentInstance(nodeData: any, spriteMap: any, interactMap: any): void {\r\n        let node: Node = spriteMap[nodeData.instanceID];\r\n        node._parse(nodeData.props, spriteMap);\r\n\r\n        let childData: any[] = nodeData.child;\r\n        if (childData) {\r\n            for (let i: number = 0, n: number = childData.length; i < n; i++)\r\n                HierarchyParserV2._createComponentInstance(childData[i], spriteMap, interactMap)\r\n        }\r\n\r\n        let componentsData: any[] = nodeData.components;\r\n        if (componentsData) {\r\n            for (let j: number = 0, m: number = componentsData.length; j < m; j++) {\r\n                let data: any = componentsData[j];\r\n                let cls: any = ClassUtils.getClass(data.type);\r\n                if (cls) {\r\n                    let component: Component = node.addComponent(cls);\r\n                    component._parse(data, interactMap);\r\n                } else {\r\n                    console.warn(`Unidentified component type: ${data.type}.`);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    static _createNodeByJson02(nodeData: any, outBatchSprites: RenderableSprite3D[]): Node {\r\n        let spriteMap: any = {};\r\n        let interactMap: any = { component: [], data: [] };\r\n        let node: Node = HierarchyParserV2._createSprite3DInstance(nodeData, spriteMap, outBatchSprites);\r\n        HierarchyParserV2._createComponentInstance(nodeData, spriteMap, interactMap);\r\n        HierarchyParserV2._createInteractInstance(interactMap, spriteMap);\r\n        return node;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    static _createInteractInstance(interatMap: any, spriteMap: any) {\r\n        let components: Component[] = interatMap.component;\r\n        let data = interatMap.data;\r\n        for (let i = 0, n = components.length; i < n; i++) {\r\n            components[i]._parseInteractive(data[i], spriteMap);\r\n        }\r\n    }\r\n\r\n    /**\r\n     *@internal\r\n     */\r\n    static parse(data: any) {\r\n        let json: any = data.data;\r\n        let outBatchSprits: RenderableSprite3D[] = [];\r\n        let sprite: Sprite3D | Scene3D;\r\n        switch (data.version) {\r\n            case \"LAYAHIERARCHY:02\":\r\n            case \"LAYASCENE3D:02\":\r\n                sprite = (<Sprite3D | Scene3D>HierarchyParserV2._createNodeByJson02(json, outBatchSprits));\r\n                break;\r\n            default:\r\n                sprite = (<Sprite3D | Scene3D>HierarchyParserV2._createNodeByJson(json, outBatchSprits));\r\n        }\r\n\r\n        //StaticBatchManager.combine((sprite instanceof Sprite3D) ? sprite : null, outBatchSprits);\r\n        return sprite;\r\n    }\r\n\r\n    //--------------------------------------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    static _createNodeByJson(nodeData: any, outBatchSprites: RenderableSprite3D[]): Node {//兼容代码\r\n        let node: Node;\r\n        switch (nodeData.type) {\r\n            case \"Scene3D\":\r\n                node = new Scene3D();\r\n                break;\r\n            case \"Sprite3D\":\r\n                node = new Sprite3D();\r\n                break;\r\n            case \"MeshSprite3D\":\r\n                node = new MeshSprite3D();\r\n                (outBatchSprites && nodeData.props.isStatic) && (outBatchSprites.push(<MeshSprite3D>node));\r\n                break;\r\n            case \"SkinnedMeshSprite3D\":\r\n                node = new SkinnedMeshSprite3D();\r\n                break;\r\n            case \"ShuriKenParticle3D\":\r\n                node = new ShuriKenParticle3D();\r\n                break;\r\n            case \"Camera\":\r\n                node = new Camera();\r\n                break;\r\n            case \"DirectionLight\":\r\n                node = new DirectionLight();\r\n                break;\r\n            case \"PointLight\":\r\n                node = new PointLight();\r\n                break;\r\n            case \"SpotLight\":\r\n                node = new SpotLight();\r\n                break;\r\n            case \"TrailSprite3D\":\r\n                node = new TrailSprite3D();\r\n                break;\r\n            default:\r\n                throw new Error(`Unidentified node type ${nodeData.type}`);\r\n        }\r\n\r\n        let childData: any[] = nodeData.child;\r\n        if (childData) {\r\n            for (let i: number = 0, n: number = childData.length; i < n; i++) {\r\n                let child: any = HierarchyParserV2._createNodeByJson(childData[i], outBatchSprites)\r\n                node.addChild(child);\r\n            }\r\n        }\r\n\r\n        let componentsData: any[] = nodeData.components;\r\n        if (componentsData) {\r\n            for (let j: number = 0, m: number = componentsData.length; j < m; j++) {\r\n                let data: any = componentsData[j];\r\n                let clas: any = ClassUtils.getClass(data.type);\r\n                if (clas) {\r\n                    let component: Component = node.addComponent(clas);\r\n                    component._parse(data);\r\n                } else {\r\n                    console.warn(`Unidentified component type: ${data.type}.`);\r\n                }\r\n            }\r\n        }\r\n        node._parse(nodeData.props, null);\r\n        return node;\r\n    }\r\n\r\n    public static collectResourceLinks(data: any, basePath: string): (string | ILoadURL)[] {\r\n        let test: Record<string, string> = {};\r\n        let innerUrls: ILoadURL[] = [];\r\n\r\n        function addInnerUrl(url: string, type: string, constructParams?: any, propertyParams?: any) {\r\n            let url2 = test[url];\r\n            if (url2 === undefined) {\r\n                url2 = URL.join(basePath, url);\r\n                innerUrls.push({ url: url2, type: type, constructParams: constructParams, propertyParams: propertyParams });\r\n                test[url] = url2;\r\n            }\r\n            return url2;\r\n        }\r\n\r\n        function check(nodeData: any) {\r\n            let props: any = nodeData.props;\r\n            switch (nodeData.type) {\r\n                case \"Scene3D\":\r\n                    let lightmaps: any[] = props.lightmaps;\r\n                    if (lightmaps) {\r\n                        for (let i = 0, n = lightmaps.length; i < n; i++) {\r\n                            let lightMap: any = lightmaps[i];\r\n                            if (lightMap.path) {\r\n                                lightMap.path = addInnerUrl(lightMap.path, Loader.TEXTURE2D, lightMap.constructParams, lightMap.propertyParams);\r\n                            }\r\n                            else {\r\n                                let lightmapColorData: any = lightMap.color;\r\n                                lightmapColorData.path = addInnerUrl(lightmapColorData.path, Loader.TEXTURE2D, lightmapColorData.constructParams, lightmapColorData.propertyParams);\r\n                                let lightmapDirectionData: any = lightMap.direction;\r\n                                if (lightmapDirectionData)\r\n                                    lightmapDirectionData.path = addInnerUrl(lightmapDirectionData.path, Loader.TEXTURE2D, lightmapDirectionData.constructParams, lightmapDirectionData.propertyParams);\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    //兼容\r\n                    let reflectionTextureData: string = props.reflectionTexture;\r\n                    (reflectionTextureData) && (props.reflection = addInnerUrl(reflectionTextureData, Loader.TEXTURECUBE));\r\n\r\n                    let reflectionData: string = props.reflection;\r\n                    (reflectionData) && (props.reflection = addInnerUrl(reflectionData, Loader.TEXTURECUBE));\r\n                    if (props.sky) {\r\n                        let skyboxMaterial: any = props.sky.material;\r\n                        (skyboxMaterial) && (skyboxMaterial.path = addInnerUrl(skyboxMaterial.path, Loader.MATERIAL));\r\n                    }\r\n                    break;\r\n                case \"Camera\":\r\n                    let skyboxMatData: any = props.skyboxMaterial;\r\n                    (skyboxMatData) && (skyboxMatData.path = addInnerUrl(skyboxMatData.path, Loader.MATERIAL));\r\n                    break;\r\n                case \"TrailSprite3D\":\r\n                case \"MeshSprite3D\":\r\n                case \"SkinnedMeshSprite3D\":\r\n                case \"SimpleSkinnedMeshSprite3D\":\r\n                    let meshPath: string = props.meshPath;\r\n                    (meshPath) && (props.meshPath = addInnerUrl(meshPath, Loader.MESH));\r\n                    let materials: any[] = props.materials;\r\n                    if (materials)\r\n                        for (let i = 0, n = materials.length; i < n; i++)\r\n                            materials[i].path = addInnerUrl(materials[i].path, Loader.MATERIAL);\r\n                    if (nodeData.type == \"SimpleSkinnedMeshSprite3D\")\r\n                        if (props.animatorTexture)\r\n                            props.animatorTexture = addInnerUrl(props.animatorTexture, Loader.TEXTURE2D)\r\n                    break;\r\n\r\n                case \"ShuriKenParticle3D\":\r\n                    if (props.main) {\r\n                        let resources: any = props.renderer.resources;\r\n                        let mesh: string = resources.mesh;\r\n                        let material: string = resources.material;\r\n                        (mesh) && (resources.mesh = addInnerUrl(mesh, Loader.MESH));\r\n                        (material) && (resources.material = addInnerUrl(material, Loader.MATERIAL));\r\n                    }\r\n                    else {//兼容代码\r\n                        let parMeshPath: string = props.meshPath;\r\n                        (parMeshPath) && (props.meshPath = addInnerUrl(parMeshPath, Loader.MESH));\r\n                        props.material.path = addInnerUrl(props.material.path, Loader.MATERIAL);\r\n                    }\r\n                    break;\r\n                case \"Terrain\":\r\n                    addInnerUrl(props.dataPath, Loader.TERRAINRES);\r\n                    break;\r\n                case \"ReflectionProbe\":\r\n                    let reflection = props.reflection;\r\n                    (reflection) && (props.reflection = addInnerUrl(reflection, Loader.TEXTURECUBE));\r\n                    break;\r\n            }\r\n\r\n            let components: any[] = nodeData.components;\r\n            if (components) {\r\n                for (let k: number = 0, p: number = components.length; k < p; k++) {\r\n                    let component: any = components[k];\r\n                    switch (component.type) {\r\n                        case \"Animator\":\r\n                            // let avatarData: any = component.avatar;\r\n                            // (avatarData) && (avatarData.path = addInnerUrl(avatarData.path, Loader.AVATAR));\r\n                            let clipPaths: string[] = component.clipPaths;\r\n                            if (!clipPaths) {\r\n                                let layersData: any[] = component.layers;\r\n                                for (let i = 0; i < layersData.length; i++) {\r\n                                    let states: any[] = layersData[i].states;\r\n                                    for (let j: number = 0, m: number = states.length; j < m; j++) {\r\n                                        let clipPath: string = states[j].clipPath;\r\n                                        (clipPath) && (states[j].clipPath = addInnerUrl(clipPath, Loader.ANIMATIONCLIP));\r\n                                    }\r\n                                }\r\n                            } else {\r\n                                for (let i = 0, n = clipPaths.length; i < n; i++)\r\n                                    clipPaths[i] = addInnerUrl(clipPaths[i], Loader.ANIMATIONCLIP);\r\n                            }\r\n                            break;\r\n                        case \"PhysicsCollider\":\r\n                        case \"Rigidbody3D\":\r\n                        case \"CharacterController\":\r\n                            let shapes: any[] = component.shapes;\r\n                            for (let i = 0; i < shapes.length; i++) {\r\n                                let shape: any = shapes[i];\r\n                                if (shape.type === \"MeshColliderShape\") {\r\n                                    let mesh: string = shape.mesh;\r\n                                    (mesh) && (shape.mesh = addInnerUrl(mesh, Loader.MESH));\r\n                                }\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            let children: any[] = nodeData.child;\r\n            if (!children) return;\r\n            for (let i = 0, n = children.length; i < n; i++)\r\n                check(children[i]);\r\n        }\r\n\r\n        check(data.data);\r\n\r\n        return innerUrls;\r\n    }\r\n}\r\n\r\nHierarchyLoader.v2 = HierarchyParserV2;","import { IResourceLoader, ILoadTask, Loader } from \"../../net/Loader\";\r\nimport { AvatarMask } from \"../component/Animator/AvatarMask\";\r\n\r\nclass AvatarMaskLoader implements IResourceLoader {\r\n    load(task: ILoadTask) {\r\n        return task.loader.fetch(task.url, \"json\", task.progress.createCallback(), task.options).then(data => {\r\n            if (!data)\r\n                return null;\r\n\r\n            return new AvatarMask(data);\r\n        });\r\n}\r\n}\r\n\r\nLoader.registerLoader([\"lavm\"], AvatarMaskLoader);","export class ParseJSON {\r\n    static parse(str: string) {\r\n        return this.parseStart(str);\r\n    }\r\n\r\n    private static findIndex(str: string, i: number, fstr: string, len: number) {\r\n        var fi = str.indexOf(fstr, i + 1);\r\n        if (0 > fi) {\r\n            fi = len;\r\n        }\r\n        return { str: str.substring(i + 1, fi), i: fi };\r\n\r\n    }\r\n    private static finCurrObj(): any {\r\n        this.type = 1;\r\n        if (null == this.cobj) {\r\n            return null;\r\n        }\r\n        if (0 == this.currArr.length) {\r\n            if (this.cobj.k) {\r\n                this.ret[this.cobj.k] = this.cobj.val;\r\n            }\r\n            return null;\r\n        } else {\r\n            var pobj = this.currArr.pop()!;\r\n            if (this.cobj.k) {\r\n                if (Array.isArray(pobj.val)) {\r\n                    if (null != this.cobj.k) {\r\n                        var obj: any = {};\r\n                        obj[this.cobj.k] = this.cobj.val;\r\n                        pobj.val.push(obj);\r\n                    } else {\r\n                        //没有key，应该创建的时候已经push进去了\r\n                        //pobj.val.push(cobj.val);\r\n                    }\r\n                } else {\r\n                    pobj.val[this.cobj.k] = this.cobj.val;\r\n                }\r\n            } else if (Array.isArray(this.cobj.val)) {\r\n                if (Array.isArray(pobj.val)) {\r\n                    pobj.val.push(this.cobj.val);\r\n                } else {\r\n                    pobj.val = this.cobj.val;\r\n                }\r\n            } else {\r\n                //console.log(\"应该是已经被push过的obj对象，无需处理\");\r\n            }\r\n            return pobj;\r\n        }\r\n    }\r\n\r\n    private static formatVal(str: string | null) {\r\n        if (null == str) {\r\n            return null;\r\n        }\r\n        var numVal = Number(str);\r\n        if (!isNaN(numVal)) {\r\n            return numVal;\r\n        }\r\n\r\n        if (\"false\" == str.toLowerCase()) {\r\n            return false;\r\n        } else if (\"true\" == str.toLowerCase()) {\r\n            return true;\r\n        } else if (\"null\" == str) {\r\n            return null;\r\n        }\r\n\r\n\r\n        return str;\r\n    }\r\n\r\n    private static len: number;\r\n    private static ret: any;\r\n    private static currStr: string | null;\r\n    private static currArr: { k?: string, val: any }[];\r\n    private static cobj: any;\r\n    /**type为0代表没有找到任何状态，1为当前在寻找key，2为当前在寻找val */\r\n    private static type: number;\r\n\r\n    private static finCurrStr() {\r\n        if (null != this.currStr) {\r\n            this.currStr = this.currStr.trim();\r\n            if (\"\" != this.currStr) {\r\n                if (null != this.cobj) {\r\n                    if (Array.isArray(this.cobj.val)) {\r\n                        this.cobj.val.push(this.formatVal(this.currStr));\r\n                    } else {\r\n                        this.cobj.val = this.formatVal(this.currStr);\r\n                        this.cobj = this.finCurrObj();\r\n                    }\r\n                }\r\n                this.currStr = \"\";\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    private static parseStart(str: string) {\r\n        this.len = str.length;\r\n        var i = 0;\r\n        this.ret = {};\r\n        this.currStr = null;\r\n        this.currArr = [];\r\n        this.cobj = null;\r\n        this.type = 0;\r\n\r\n\r\n        while (i < this.len) {\r\n            var c = str.charAt(i);\r\n            if (\"/\" == c) {\r\n                if (i + 1 < this.len) {\r\n                    i += 1;\r\n                    var cNext = str.charAt(i);\r\n                    var cstr = null;\r\n                    if (\"/\" == cNext) {\r\n                        //单行注释\r\n                        cstr = \"\\n\";\r\n                    } else if (\"*\" == cNext) {\r\n                        //多行注释\r\n                        cstr = \"*/\"\r\n                    }\r\n                    if (null != cstr) {\r\n\r\n\r\n\r\n                        this.finCurrStr();\r\n\r\n\r\n                        var fi = str.indexOf(cstr, i);\r\n                        if (0 > fi) {\r\n                            console.log(\"没有找到注释结尾，应该是一直注释到最后了\");\r\n                            i = this.len;\r\n                        } else {\r\n                            i = fi + cstr.length - 1;\r\n                        }\r\n                    }\r\n                }\r\n            } else if (\"}\" == c) {\r\n                if (null != this.cobj) {\r\n                    this.finCurrStr();\r\n                    if (null != this.cobj) {\r\n                        this.cobj = this.finCurrObj();\r\n                    }\r\n                }\r\n                this.currStr = \"\";\r\n                this.type = 1;\r\n                //obj结束\r\n            } else if (\"{\" == c) {\r\n                this.currStr = \"\";\r\n                this.type = 1;\r\n\r\n\r\n\r\n\r\n            } else if (\"'\" == c || \"\\\"\" == c || \"‘\" == c || \"“\" == c) {\r\n                //检测发现这里是字符串\r\n                if (\"‘\" == c) {\r\n                    c = \"’\";\r\n                } else if (\"“\" == c) {\r\n                    c = \"”\";\r\n                }\r\n                var obj = this.findIndex(str, i, c, this.len);\r\n\r\n                if (2 == this.type && null != this.cobj && Array.isArray(this.cobj.val)) {\r\n                    if (null != this.currStr) {\r\n                        this.currStr = this.currStr.trim();\r\n                        if (\"\" != this.currStr) {\r\n                            this.cobj.val.push(this.formatVal(this.currStr));\r\n                        }\r\n                    }\r\n                    this.cobj.val.push(obj.str);\r\n                    this.currStr = \"\";\r\n                } else if (null != this.currStr) {\r\n                    this.currStr += obj.str;\r\n                }\r\n                i = obj.i;\r\n            } else if (\";\" == c || \",\" == c || \"\\n\" == c) {\r\n                this.finCurrStr();\r\n            } else if (\"]\" == c) {\r\n                //数组结束\r\n                if (null != this.currStr && null != this.cobj && Array.isArray(this.cobj.val)) {\r\n                    this.currStr = this.currStr.trim();\r\n                    if (\"\" != this.currStr) {\r\n                        this.cobj.val.push(this.formatVal(this.currStr));\r\n                    }\r\n                }\r\n                if (null != this.cobj) {\r\n                    //数组需要完成两次才算结束出去\r\n                    this.cobj = this.finCurrObj();\r\n                    this.cobj = this.finCurrObj();\r\n                }\r\n                this.currStr = \"\";\r\n            } else if (\"[\" == c) {\r\n                if (2 != this.type) {\r\n                    console.warn(\"没有key值，忽略掉一个数组\");\r\n                } else {\r\n                    if (null != this.cobj) {\r\n                        this.currArr.push(this.cobj);\r\n                    }\r\n                    this.cobj = { val: [] };\r\n                }\r\n            } else if (\":\" == c) {\r\n                if (null != this.currStr && 1 == this.type) {\r\n                    this.type = 2;\r\n                    if (null != this.cobj) {\r\n                        this.currArr.push(this.cobj);\r\n                    }\r\n                    if (null != this.cobj && Array.isArray(this.cobj.val)) {\r\n                        //数组中的obj对象 eg: {b:[{aa:3,bb:4}],}\r\n                        var pcobj = this.cobj;\r\n                        this.cobj = { val: {} };\r\n                        pcobj.val.push(this.cobj.val);\r\n                        this.currArr.push(this.cobj);\r\n\r\n                    }\r\n                    this.cobj = { k: this.currStr.trim(), val: {} };\r\n\r\n\r\n\r\n                    this.currStr = \"\";\r\n                }\r\n            } else if (null != this.currStr) {\r\n                this.currStr += c;\r\n            }\r\n            i++;\r\n        }\r\n        return this.ret;\r\n    }\r\n\r\n\r\n}","import { Color } from \"../../maths/Color\";\r\nimport { Matrix4x4 } from \"../../maths/Matrix4x4\";\r\nimport { Vector2 } from \"../../maths/Vector2\";\r\nimport { Vector3 } from \"../../maths/Vector3\";\r\nimport { Vector4 } from \"../../maths/Vector4\";\r\nimport { IShaderObjStructor, IShaderpassStructor, Shader3D } from \"../../RenderEngine/RenderShader/Shader3D\";\r\nimport { ShaderDataType } from \"../../RenderEngine/RenderShader/ShaderData\";\r\nimport { Texture2D } from \"../../resource/Texture2D\";\r\nimport { TextureCube } from \"../../resource/TextureCube\";\r\nimport { ParseJSON } from \"../utils/ParseJSON\";\r\n\r\nconst CGBlock: string[] = [\"GLSL Start\", \"GLSL End\"];\r\nconst split: string[] = [\"#defineGLSL\", \"#endGLSL\"];\r\nconst shaderBlock: string[] = [\"Shader3D Start\", \"Shader3D End\"];\r\nconst shaderDataOBJ: Record<string, ShaderDataType> = {\r\n    \"Color\": ShaderDataType.Color,\r\n    \"Int\": ShaderDataType.Int,\r\n    \"Bool\": ShaderDataType.Bool,\r\n    \"Float\": ShaderDataType.Float,\r\n    \"Vector2\": ShaderDataType.Vector2,\r\n    \"Vector3\": ShaderDataType.Vector3,\r\n    \"Vector4\": ShaderDataType.Vector4,\r\n    \"Matrix4x4\": ShaderDataType.Matrix4x4,\r\n    \"Texture2D\": ShaderDataType.Texture2D,\r\n    \"TextureCube\": ShaderDataType.TextureCube,\r\n}\r\n\r\n//TODO 格式改变\r\nexport class ShaderParser {\r\n\r\n    static parse(data: string, basePath?: string): Shader3D {\r\n        let obj = ShaderParser.getShaderBlock(data);\r\n        let cgmap = ShaderParser.getCGBlock(data);\r\n        ShaderParser.bindCG(obj, cgmap);\r\n        let shader = Shader3D.parse(obj, basePath);\r\n        return shader;\r\n    }\r\n\r\n    static compileToTree(sliceFlag: string[], data: string, sliceIndex: number): string[] {\r\n        if (sliceIndex == sliceFlag.length)\r\n            return [data];\r\n        let slicedata = sliceFlag[sliceIndex];\r\n        let splitmap = data.split(slicedata);\r\n        if (splitmap.length == 1)\r\n            return splitmap;\r\n        let map: string[] = [];\r\n        for (let i = 0, n = splitmap.length; i < n; i++) {\r\n            map = map.concat(ShaderParser.compileToTree(sliceFlag, splitmap[i], sliceIndex + 1));\r\n            (i != n - 1) && map.push(slicedata);\r\n        }\r\n        return map;\r\n    }\r\n\r\n    static getMapKey(value: string) {\r\n        let index = value.indexOf(\"\\n\");\r\n        value = value.slice(0, index).replace(\"\\r\", \"\");\r\n        value = value.slice(0, index).replace(\" \", \"\");\r\n        value = value.trim();\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * get Shader Data\r\n     */\r\n    static getShaderBlock(source: string) {\r\n        let shaderData = source.substring(source.indexOf(shaderBlock[0]) + shaderBlock[0].length, source.indexOf(shaderBlock[1]));\r\n        let shaderObj;\r\n        try {\r\n            shaderObj = ParseJSON.parse(shaderData);//TODO new FIle parse(1、去掉繁琐的json格式报错，2、可以有注释)\r\n        } catch {\r\n            console.error(\"Shader describe Data error\");\r\n        }\r\n        return shaderObj as IShaderObjStructor;\r\n    }\r\n\r\n    /**\r\n     * get CG data for map\r\n     * @param source \r\n     * @returns \r\n     */\r\n    static getCGBlock(source: string): { [key: string]: string } {\r\n        let cgdata = source.substring(source.indexOf(CGBlock[0]), source.indexOf(CGBlock[1]));\r\n        let map = ShaderParser.compileToTree(split, cgdata, 0);\r\n        let cgmap: { [key: string]: string } = {};\r\n        for (let i = 0, n = map.length; i < n; i++) {\r\n            let value = map[i];\r\n            if (value == split[0]) {\r\n                i += 1\r\n                let datavalue = map[i];\r\n                let key = ShaderParser.getMapKey(datavalue);\r\n                cgmap[key] = datavalue.slice(datavalue.indexOf(\"\\n\"), datavalue.length - 1);\r\n            }\r\n        }\r\n        return cgmap;\r\n    }\r\n\r\n    static bindCG(shaderObj: IShaderObjStructor, cgmap: { [key: string]: string }) {\r\n        //pass trans\r\n        let passArray = shaderObj.shaderPass as Array<IShaderpassStructor>;\r\n        if (passArray) {\r\n            passArray.forEach(element => {\r\n                if (element.VS) {\r\n                    element.VS = cgmap[element.VS];\r\n                }\r\n                if (element.FS) {\r\n                    element.FS = cgmap[element.FS];\r\n                }\r\n            });\r\n        }\r\n        //attribute map trans\r\n        let attributemap = shaderObj.attributeMap;\r\n        if (attributemap) {\r\n            let indexofAttribute = 0;\r\n            for (let i in attributemap) {\r\n                //TODO  这里的格式要重新理 \"name\":type or \"name\":[type,custom Attribute Location]\r\n                if (attributemap[i] instanceof Array) {\r\n                    let dataArray = attributemap[i];\r\n                    attributemap[i] = [dataArray[1], ShaderParser.getShaderDataType(dataArray[0])];\r\n                } else {\r\n                    attributemap[i] = [indexofAttribute, ShaderParser.getShaderDataType(attributemap[i])];\r\n                    indexofAttribute++;\r\n                }\r\n\r\n            }\r\n        }\r\n        //uniform map trans\r\n        let uniformMap = shaderObj.uniformMap;\r\n        if (uniformMap) {\r\n            let defaultmap: any = {};\r\n            shaderObj.defaultValue = defaultmap;\r\n\r\n            let newUniformMap: any = {};\r\n            shaderObj.uniformMap = newUniformMap;\r\n\r\n            for (let k in uniformMap) {\r\n                let entry = uniformMap[k];\r\n                if (entry.serializable === false)\r\n                    continue;\r\n\r\n                let dataType = ShaderParser.getShaderDataType(entry.type);\r\n                if (entry.default != null)\r\n                    defaultmap[k] = ShaderParser.getDefaultData(dataType, entry.default);\r\n\r\n                if (entry.block) {\r\n                    let block: Record<string, ShaderDataType> = newUniformMap[entry.block];\r\n                    if (!block)\r\n                        newUniformMap[entry.block] = block = {};\r\n                    block[k] = dataType;\r\n                }\r\n                else\r\n                    newUniformMap[k] = dataType;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * trans string to ShaderDataType\r\n     * @param value \r\n     * @returns \r\n     */\r\n    static getShaderDataType(value: string): ShaderDataType {\r\n        return shaderDataOBJ[value];\r\n    }\r\n\r\n    /**\r\n     * set ShaderData Value\r\n     * @param type \r\n     * @param data \r\n     * @returns \r\n     */\r\n    static getDefaultData(type: ShaderDataType, data: any) {\r\n        switch (type) {\r\n            case ShaderDataType.Int:\r\n            case ShaderDataType.Float:\r\n            case ShaderDataType.Bool:\r\n                return data;\r\n            case ShaderDataType.Vector2:\r\n                return new Vector2(data[0], data[1]);\r\n            case ShaderDataType.Vector3:\r\n                return new Vector3(data[0], data[1], data[2]);\r\n            case ShaderDataType.Vector4:\r\n                return new Vector4(data[0], data[1], data[2], data[3]);\r\n            case ShaderDataType.Color:\r\n                return new Color(data[0], data[1], data[2], data[3]);\r\n            case ShaderDataType.Matrix4x4:\r\n                let mat = new Matrix4x4();\r\n                mat.cloneByArray(data);\r\n                return mat;\r\n            case ShaderDataType.Texture2D:\r\n                let tex = null;\r\n                if (data == \"white\")\r\n                    tex = Texture2D.whiteTexture;\r\n                else if (data == \"black\")\r\n                    tex = Texture2D.blackTexture;\r\n                else if (data == \"gray\")\r\n                    tex = Texture2D.grayTexture;\r\n                else if (data == \"normal\")\r\n                    tex = Texture2D.normalTexture;\r\n                return tex;\r\n            case ShaderDataType.TextureCube:\r\n                let texcube = TextureCube.grayTexture;\r\n                if (data == \"white\")\r\n                    texcube = TextureCube.whiteTexture;\r\n                else if (data == \"black\")\r\n                    texcube = TextureCube.blackTexture;\r\n                else if (data == \"gray\")\r\n                    texcube = TextureCube.grayTexture;\r\n                return texcube;\r\n        }\r\n    }\r\n}","import { ILoadTask, IResourceLoader, Loader } from \"../../net/Loader\";\r\nimport { URL } from \"../../net/URL\";\r\nimport { IShaderpassStructor, Shader3D } from \"../../RenderEngine/RenderShader/Shader3D\";\r\nimport { SubShader } from \"../../RenderEngine/RenderShader/SubShader\";\r\nimport { AssetDb } from \"../../resource/AssetDb\";\r\nimport { ShaderCompile } from \"../../webgl/utils/ShaderCompile\";\r\nimport { ShaderParser } from \"./ShaderParser\";\r\n\r\nclass ShaderLoader implements IResourceLoader {\r\n    load(task: ILoadTask) {\r\n        let url = task.url;\r\n        if (task.ext === \"bps\")\r\n            url = AssetDb.inst.getSubAssetURL(url, task.uuid, \"0\", \"shader\");\r\n\r\n        return task.loader.fetch(url, \"text\", task.progress.createCallback(), task.options).then(data => {\r\n            if (!data)\r\n                return null;\r\n\r\n            let obj = ShaderParser.getShaderBlock(data);\r\n            let cgmap = ShaderParser.getCGBlock(data);\r\n            ShaderParser.bindCG(obj, cgmap);\r\n\r\n            if (!obj.name || !obj.uniformMap)\r\n                return null;\r\n\r\n            let basePath = URL.getPath(task.url);\r\n            let passArray: IShaderpassStructor[] = obj.shaderPass;\r\n            return Promise.all(passArray.map(pass => ShaderCompile.compileAsync(pass.VS, pass.FS, basePath))).then(compiledObjs => {\r\n                if (compiledObjs.findIndex(obj => obj == null) != -1) {\r\n                    Loader.warn(\"some pass null \" + task.url);\r\n                    return null;\r\n                }\r\n\r\n                let shader = Shader3D.add(obj.name, obj.enableInstancing, obj.supportReflectionProbe);\r\n                let subshader = new SubShader(obj.attributeMap ? obj.attributeMap : SubShader.DefaultAttributeMap, obj.uniformMap, obj.defaultValue);\r\n                shader.addSubShader(subshader);\r\n\r\n                for (let i in passArray) {\r\n                    subshader._addShaderPass(compiledObjs[i], passArray[i].pipeline);\r\n                }\r\n                return shader;\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\nLoader.registerLoader([\"shader\", \"bps\"], ShaderLoader);","import { ILoadTask, IResourceLoader, Loader } from \"../../net/Loader\";\r\nimport { ShaderCompile } from \"../../webgl/utils/ShaderCompile\";\r\n\r\nclass GLSLLoader implements IResourceLoader {\r\n    load(task: ILoadTask) {\r\n        let url = task.url;\r\n        return task.loader.fetch(url, \"text\", task.progress.createCallback(), task.options).then(data => {\r\n            if (!data)\r\n                return null;\r\n\r\n            return ShaderCompile.addInclude(task.url, data, true);\r\n        });\r\n    }\r\n}\r\n\r\nLoader.registerLoader([\"glsl\", \"vs\", \"fs\"], GLSLLoader);","import { TypeAnimatorLayer, TypeAnimatorState } from \"../../components/AnimatorControllerParse\";\r\nimport { IResourceLoader, ILoadTask, Loader } from \"../../net/Loader\";\r\nimport { AnimatorController } from \"../component/Animator/AnimatorController\";\r\nimport { URL } from \"../../net/URL\";\r\nclass AnimationControllerLoader implements IResourceLoader {\r\n    load(task: ILoadTask) {\r\n        return task.loader.fetch(task.url, \"json\", task.progress.createCallback(0.2), task.options).then(data => {\r\n            let ret = new AnimatorController(data);\r\n            if (ret.data && ret.data.controllerLayers) {\r\n                let layers = ret.data.controllerLayers;\r\n                let promises: Array<any> = [];\r\n                for (let i = layers.length - 1; i >= 0; i--) {\r\n                    if (layers[i].avatarMask) {\r\n                        this.loadAvatarMask(layers[i], promises, task);\r\n                    }\r\n                    let states = layers[i].states;\r\n                    this.loadStates(states, promises, task);\r\n\r\n                }\r\n                return Promise.all(promises).then(() => ret);\r\n            }\r\n            else\r\n                return ret;\r\n        });\r\n    }\r\n    loadAvatarMask(l: TypeAnimatorLayer, promises: Array<any>, task: ILoadTask) {\r\n        let basePath = URL.getPath(task.url);\r\n        if (l.avatarMask && l.avatarMask._$uuid && '' != l.avatarMask._$uuid) {\r\n            let url = URL.getResURLByUUID(l.avatarMask._$uuid);\r\n            if (!url.startsWith(\"res://\"))\r\n                url = URL.join(basePath, url);\r\n            promises.push(task.loader.load(url).then(res => {\r\n                l.avatarMask = res;\r\n            }));\r\n        } else {\r\n            l.avatarMask = null;\r\n        }\r\n    }\r\n\r\n    loadStates(states: TypeAnimatorState[], promises: Array<any>, task: ILoadTask) {\r\n        let basePath = URL.getPath(task.url);\r\n        for (let j = states.length - 1; j >= 0; j--) {\r\n            if (states[j].clip && states[j].clip._$uuid) {\r\n                let url = URL.getResURLByUUID(states[j].clip._$uuid);\r\n                if (!url.startsWith(\"res://\"))\r\n                    url = URL.join(basePath, url);\r\n                promises.push(task.loader.load(url).then(res => {\r\n                    states[j].clip = res;\r\n                }));\r\n\r\n                // promises.push(task.loader.load(\"res://\" + states[j].clip._$uuid).then(res => {\r\n                //     states[j].clip = res;\r\n                // }));\r\n            }\r\n\r\n            if (states[j].states) {\r\n                this.loadStates(states[j].states, promises, task);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nLoader.registerLoader([\"controller\"], AnimationControllerLoader);","import { ClassUtils } from \"../utils/ClassUtils\";\r\nimport { AnimationClip } from \"./animation/AnimationClip\";\r\nimport { Sprite3D } from \"./core/Sprite3D\";\r\nimport { Camera } from \"./core/Camera\";\r\nimport { Gradient } from \"./core/Gradient\";\r\nimport { DirectionLight } from \"./core/light/DirectionLight\";\r\nimport { LightSprite } from \"./core/light/LightSprite\";\r\nimport { PointLight } from \"./core/light/PointLight\";\r\nimport { SpotLight } from \"./core/light/SpotLight\";\r\nimport { BlinnPhongMaterial } from \"./core/material/BlinnPhongMaterial\";\r\nimport { EffectMaterial } from \"./core/material/EffectMaterial\";\r\nimport { ExtendTerrainMaterial } from \"./core/material/ExtendTerrainMaterial\";\r\nimport { Material } from \"./core/material/Material\";\r\nimport { PBRStandardMaterial } from \"./core/material/PBRStandardMaterial\";\r\nimport { SkyBoxMaterial } from \"./core/material/SkyBoxMaterial\";\r\nimport { SkyPanoramicMaterial } from \"./core/material/SkyPanoramicMaterial\";\r\nimport { SkyProceduralMaterial } from \"./core/material/SkyProceduralMaterial\";\r\nimport { UnlitMaterial } from \"./core/material/UnlitMaterial\";\r\nimport { WaterPrimaryMaterial } from \"./core/material/WaterPrimaryMaterial\";\r\nimport { MeshFilter } from \"./core/MeshFilter\";\r\nimport { MeshRenderer } from \"./core/MeshRenderer\";\r\nimport { MeshSprite3D } from \"./core/MeshSprite3D\";\r\nimport { Burst } from \"./core/particleShuriKen/module/Burst\";\r\nimport { ColorOverLifetime } from \"./core/particleShuriKen/module/ColorOverLifetime\";\r\nimport { Emission } from \"./core/particleShuriKen/module/Emission\";\r\nimport { FrameOverTime } from \"./core/particleShuriKen/module/FrameOverTime\";\r\nimport { GradientAngularVelocity } from \"./core/particleShuriKen/module/GradientAngularVelocity\";\r\nimport { GradientColor } from \"./core/particleShuriKen/module/GradientColor\";\r\nimport { GradientDataInt } from \"./core/particleShuriKen/module/GradientDataInt\";\r\nimport { GradientDataNumber } from \"./core/particleShuriKen/module/GradientDataNumber\";\r\nimport { GradientSize } from \"./core/particleShuriKen/module/GradientSize\";\r\nimport { GradientVelocity } from \"./core/particleShuriKen/module/GradientVelocity\";\r\nimport { RotationOverLifetime } from \"./core/particleShuriKen/module/RotationOverLifetime\";\r\nimport { BaseShape } from \"./core/particleShuriKen/module/shape/BaseShape\";\r\nimport { BoxShape } from \"./core/particleShuriKen/module/shape/BoxShape\";\r\nimport { CircleShape } from \"./core/particleShuriKen/module/shape/CircleShape\";\r\nimport { ConeShape } from \"./core/particleShuriKen/module/shape/ConeShape\";\r\nimport { HemisphereShape } from \"./core/particleShuriKen/module/shape/HemisphereShape\";\r\nimport { SphereShape } from \"./core/particleShuriKen/module/shape/SphereShape\";\r\nimport { SizeOverLifetime } from \"./core/particleShuriKen/module/SizeOverLifetime\";\r\nimport { StartFrame } from \"./core/particleShuriKen/module/StartFrame\";\r\nimport { TextureSheetAnimation } from \"./core/particleShuriKen/module/TextureSheetAnimation\";\r\nimport { VelocityOverLifetime } from \"./core/particleShuriKen/module/VelocityOverLifetime\";\r\nimport { ShuriKenParticle3D } from \"./core/particleShuriKen/ShuriKenParticle3D\";\r\nimport { ShurikenParticleMaterial } from \"./core/particleShuriKen/ShurikenParticleMaterial\";\r\nimport { ShurikenParticleRenderer } from \"./core/particleShuriKen/ShurikenParticleRenderer\";\r\nimport { ShurikenParticleSystem } from \"./core/particleShuriKen/ShurikenParticleSystem\";\r\nimport { BaseRender } from \"./core/render/BaseRender\";\r\nimport { RenderableSprite3D } from \"./core/RenderableSprite3D\";\r\nimport { Lightmap } from \"./core/scene/Lightmap\";\r\nimport { Scene3D } from \"./core/scene/Scene3D\";\r\nimport { SimpleSkinnedMeshRenderer } from \"./core/SimpleSkinnedMeshRenderer\";\r\nimport { SimpleSkinnedMeshSprite3D } from \"./core/SimpleSkinnedMeshSprite3D\";\r\nimport { SkinnedMeshRenderer } from \"./core/SkinnedMeshRenderer\";\r\nimport { SkinnedMeshSprite3D } from \"./core/SkinnedMeshSprite3D\";\r\nimport { TrailFilter } from \"./core/trail/TrailFilter\";\r\nimport { TrailMaterial } from \"./core/trail/TrailMaterial\";\r\nimport { TrailRenderer } from \"./core/trail/TrailRenderer\";\r\nimport { TrailSprite3D } from \"./core/trail/TrailSprite3D\";\r\nimport { Transform3D } from \"./core/Transform3D\";\r\nimport { SphericalHarmonicsL2 } from \"./graphics/SphericalHarmonicsL2\";\r\nimport { BoundBox } from \"./math/BoundBox\";\r\nimport { Viewport } from \"./math/Viewport\";\r\nimport { Mesh } from \"./resource/models/Mesh\";\r\nimport { SkyRenderer } from \"./resource/models/SkyRenderer\";\r\nimport { TextureCube } from \"../resource/TextureCube\";\r\nimport { DirectionLightCom } from \"./core/light/DirectionLightCom\";\r\nimport { PointLightCom } from \"./core/light/PointLightCom\";\r\nimport { SpotLightCom } from \"./core/light/SpotLightCom\";\r\nimport { Bounds } from \"./math/Bounds\";\r\nimport { ReflectionProbe } from \"./component/Volume/reflectionProbe/ReflectionProbe\";\r\nimport { VolumetricGI } from \"./component/Volume/VolumetricGI/VolumetricGI\";\r\nimport { AreaLightCom } from \"./core/light/AreaLightCom\";\r\nimport { BoxColliderShape } from \"./physics/shape/BoxColliderShape\";\r\nimport { CapsuleColliderShape } from \"./physics/shape/CapsuleColliderShape\";\r\nimport { CylinderColliderShape } from \"./physics/shape/CylinderColliderShape\";\r\nimport { ConeColliderShape } from \"./physics/shape/ConeColliderShape\";\r\nimport { SphereColliderShape } from \"./physics/shape/SphereColliderShape\";\r\nimport { MeshColliderShape } from \"./physics/shape/MeshColliderShape\";\r\nimport { LODGroup, LODInfo } from \"./component/LODGroup\";\r\nimport { PixelLineData } from \"./core/pixelLine/PixelLineData\";\r\nimport { PixelLineRenderer } from \"./core/pixelLine/PixelLineRenderer\";\r\nimport { FloatKeyframe } from \"./core/FloatKeyframe\";\r\nimport { CompoundColliderShape } from \"./physics/shape/CompoundColliderShape\";\r\nimport { Animator } from \"./component/Animator/Animator\";\r\nimport { AnimatorControllerLayer } from \"./component/Animator/AnimatorControllerLayer\";\r\nimport { AnimatorState } from \"./component/Animator/AnimatorState\";\r\nimport { AvatarMask } from \"./component/Animator/AvatarMask\";\r\nimport { PostProcess } from \"./component/PostProcess\";\r\nimport { PostProcessEffect } from \"./core/render/PostProcessEffect\";\r\nimport { BloomEffect } from \"./core/render/PostEffect/BloomEffect\";\r\nimport { GaussianDoF } from \"./core/render/PostEffect/GaussianDoF\";\r\nimport { ScalableAO } from \"./core/render/PostEffect/ScalableAO\";\r\nimport { AnimatorController } from \"./component/Animator/AnimatorController\";\r\nimport { StaticBatchVolume } from \"./component/Volume/BatchVolume/StaticBatchVolume\";\r\nimport { StaticInstanceBatchRender } from \"./component/Volume/BatchVolume/StaticInstanceBatchRender\";\r\nimport { RenderTexture } from \"../resource/RenderTexture\";\r\nimport { ColorGradEffect } from \"./core/render/PostEffect/ColorGradEffect\";\r\nimport { UI3D } from \"./core/UI3D/UI3D\";\r\nimport \"./loaders/AnimationClipLoader\";\r\nimport \"./loaders/CubemapLoader\";\r\nimport \"./loaders/MaterialLoader\";\r\nimport \"./loaders/MeshLoader\";\r\nimport \"./loaders/HierarchyParserV2\";\r\nimport \"./loaders/AvatarMaskLoader\";\r\nimport \"./loaders/ShaderLoader\";\r\nimport \"./loaders/GLSLLoader\";\r\nimport \"./loaders/AnimationControllerLoader\";\r\n\r\n\r\n\r\n\r\nlet c = ClassUtils.regClass;\r\nc(\"Sprite3D\", Sprite3D);\r\nc(\"Scene3D\", Scene3D);\r\nc(\"Camera\", Camera);\r\nc(\"LightSprite\", LightSprite);\r\nc(\"DirectionLight\", DirectionLight);\r\nc(\"PointLight\", PointLight);\r\nc(\"SpotLight\", SpotLight);\r\nc(\"AreaLightCom\", AreaLightCom);\r\nc(\"DirectionLightCom\", DirectionLightCom);\r\nc(\"PointLightCom\", PointLightCom);\r\nc(\"SpotLightCom\", SpotLightCom);\r\nc(\"RenderableSprite3D\", RenderableSprite3D);\r\nc(\"MeshSprite3D\", MeshSprite3D);\r\nc(\"MeshFilter\", MeshFilter);\r\nc(\"BaseRender\", BaseRender);\r\nc(\"MeshRenderer\", MeshRenderer);\r\nc(\"SimpleSkinnedMeshSprite3D\", SimpleSkinnedMeshSprite3D);\r\nc(\"SkinnedMeshSprite3D\", SkinnedMeshSprite3D);\r\nc(\"SkinnedMeshRenderer\", SkinnedMeshRenderer);\r\nc(\"SimpleSkinnedMeshRenderer\", SimpleSkinnedMeshRenderer);\r\nc(\"SkyRenderer\", SkyRenderer);\r\nc(\"TrailSprite3D\", TrailSprite3D);\r\nc(\"TrailFilter\", TrailFilter);\r\nc(\"TrailRenderer\", TrailRenderer);\r\nc(\"PixelLineRenderer\", PixelLineRenderer);\r\nc(\"PixelLineData\", PixelLineData);\r\nc(\"Gradient\", Gradient);\r\nc(\"Transform3D\", Transform3D);\r\nc(\"Lightmap\", Lightmap);\r\nc(\"ReflectionProbe\", ReflectionProbe);\r\nc(\"VolumetricGI\", VolumetricGI);\r\nc(\"StaticBatchVolume\",StaticBatchVolume);\r\nc(\"StaticInstanceBatchRender\",StaticInstanceBatchRender);\r\nc(\"SphericalHarmonicsL2\", SphericalHarmonicsL2);\r\nc(\"Viewport\", Viewport);\r\nc(\"Bounds\", Bounds);\r\nc(\"BoundBox\", BoundBox);\r\nc(\"TextureCube\", TextureCube);\r\nc(\"Mesh\", Mesh);\r\nc(\"FloatKeyframe\", FloatKeyframe);\r\nc(\"RenderTexture\", RenderTexture);\r\nc(\"Animator\", Animator);\r\nc(\"AnimatorController\", AnimatorController);\r\nc(\"AnimatorControllerLayer\", AnimatorControllerLayer);\r\nc(\"AnimatorState\", AnimatorState);\r\nc(\"AnimationClip\", AnimationClip);\r\nc(\"AvatarMask\", AvatarMask);\r\nc(\"UI3D\", UI3D);\r\n\r\nc(\"Material\", Material);\r\nc(\"BlinnPhongMaterial\", BlinnPhongMaterial);\r\nc(\"EffectMaterial\", EffectMaterial);\r\nc(\"ExtendTerrainMaterial\", ExtendTerrainMaterial);\r\nc(\"PBRStandardMaterial\", PBRStandardMaterial);\r\nc(\"SkyBoxMaterial\", SkyBoxMaterial);\r\nc(\"SkyPanoramicMaterial\", SkyPanoramicMaterial);\r\nc(\"SkyProceduralMaterial\", SkyProceduralMaterial);\r\nc(\"UnlitMaterial\", UnlitMaterial);\r\nc(\"WaterPrimaryMaterial\", WaterPrimaryMaterial);\r\nc(\"ShurikenParticleMaterial\", ShurikenParticleMaterial);\r\nc(\"TrailMaterial\", TrailMaterial);\r\n\r\nc(\"ShuriKenParticle3D\", ShuriKenParticle3D);\r\nc(\"ShurikenParticleRenderer\", ShurikenParticleRenderer);\r\nc(\"ShurikenParticleSystem\", ShurikenParticleSystem);\r\nc(\"Burst\", Burst);\r\nc(\"Emission\", Emission);\r\nc(\"BaseShape\", BaseShape);\r\nc(\"BoxShape\", BoxShape);\r\nc(\"CircleShape\", CircleShape);\r\nc(\"ConeShape\", ConeShape);\r\nc(\"HemisphereShape\", HemisphereShape);\r\nc(\"SphereShape\", SphereShape);\r\nc(\"FrameOverTime\", FrameOverTime);\r\nc(\"GradientAngularVelocity\", GradientAngularVelocity);\r\nc(\"GradientColor\", GradientColor);\r\nc(\"GradientDataInt\", GradientDataInt);\r\nc(\"GradientDataNumber\", GradientDataNumber);\r\nc(\"GradientSize\", GradientSize);\r\nc(\"GradientVelocity\", GradientVelocity);\r\nc(\"StartFrame\", StartFrame);\r\nc(\"TextureSheetAnimation\", TextureSheetAnimation);\r\nc(\"ColorOverLifetime\", ColorOverLifetime);\r\nc(\"RotationOverLifetime\", RotationOverLifetime);\r\nc(\"SizeOverLifetime\", SizeOverLifetime);\r\nc(\"VelocityOverLifetime\", VelocityOverLifetime);\r\nc(\"LODInfo\", LODInfo);\r\nc(\"LODGroup\", LODGroup);\r\n\r\n\r\nc(\"DirectionLight\", DirectionLight);\r\nc(\"DirectionLightCom\", DirectionLightCom);\r\nc(\"MeshRenderer\", MeshRenderer);\r\nc(\"MeshFilter\", MeshFilter);\r\nc(\"MeshRenderer\", MeshRenderer);\r\nc(\"SkinnedMeshRenderer\", SkinnedMeshRenderer);\r\nc(\"SimpleSkinnedMeshRenderer\", SimpleSkinnedMeshRenderer);\r\nc(\"SkyRenderer\", SkyRenderer);\r\n\r\nc(\"BoxColliderShape\", BoxColliderShape);\r\nc(\"CapsuleColliderShape\", CapsuleColliderShape);\r\nc(\"ConeColliderShape\", ConeColliderShape);\r\nc(\"CylinderColliderShape\", CylinderColliderShape);\r\nc(\"SphereColliderShape\", SphereColliderShape);\r\nc(\"MeshColliderShape\", MeshColliderShape);\r\nc(\"CompoundColliderShape\", CompoundColliderShape);\r\n\r\nc(\"PostProcess\", PostProcess);\r\nc(\"PostProcessEffect\", PostProcessEffect);\r\nc(\"BloomEffect\", BloomEffect);\r\nc(\"GaussianDoF\", GaussianDoF);\r\nc(\"ScalableAO\", ScalableAO);\r\nc(\"ColorGradEffect\",ColorGradEffect);","import { LayaGL } from \"../../layagl/LayaGL\";\r\nimport { GeometryElement } from \"../core/GeometryElement\";\r\nimport { RenderContext3D } from \"../core/render/RenderContext3D\";\r\nimport { SubMeshRenderElement } from \"../core/render/SubMeshRenderElement\";\r\nimport { SubMesh } from \"../resource/models/SubMesh\";\r\nimport { VertexBuffer3D } from \"./VertexBuffer3D\";\r\nimport { BufferUsage } from \"../../RenderEngine/RenderEnum/BufferTargetType\";\r\nimport { MeshTopology } from \"../../RenderEngine/RenderEnum/RenderPologyMode\";\r\nimport { DrawType } from \"../../RenderEngine/RenderEnum/DrawType\";\r\nimport { IndexFormat } from \"../../RenderEngine/RenderEnum/IndexFormat\";\r\nimport { VertexMesh } from \"../../RenderEngine/RenderShader/VertexMesh\";\r\n\r\n/**\r\n * 是否要删除\r\n * @internal\r\n */\r\nexport class SubMeshInstanceBatch extends GeometryElement {\r\n\t/** @internal */\r\n\tstatic instance: SubMeshInstanceBatch;\r\n\t/** @internal */\r\n\tstatic maxInstanceCount: number = 1024;\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic __init__(): void {\r\n\t\tSubMeshInstanceBatch.instance = new SubMeshInstanceBatch();\r\n\t}\r\n\r\n\t/** @internal */\r\n\tinstanceWorldMatrixData: Float32Array = new Float32Array(SubMeshInstanceBatch.maxInstanceCount * 16);\r\n\t/** @internal */\r\n\tinstanceWorldMatrixBuffer: VertexBuffer3D;\r\n\t/**SimpleAnimator */\r\n\t/** @internal */\r\n\tinstanceSimpleAnimatorData: Float32Array = new Float32Array(SubMeshInstanceBatch.maxInstanceCount * 4);\r\n\t/** @internal */\r\n\tinstanceSimpleAnimatorBuffer: VertexBuffer3D;\r\n\r\n\t/**\r\n\t * 创建一个 <code>InstanceSubMesh</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper(MeshTopology.Triangles, DrawType.DrawElementInstance);\r\n\t\tthis.indexFormat = IndexFormat.UInt16;\r\n\t\tthis.instanceWorldMatrixBuffer = LayaGL.renderOBJCreate.createVertexBuffer3D(this.instanceWorldMatrixData.length * 4, BufferUsage.Dynamic, false);\r\n\t\tthis.instanceWorldMatrixBuffer.vertexDeclaration = VertexMesh.instanceWorldMatrixDeclaration;\r\n\t\tthis.instanceWorldMatrixBuffer.instanceBuffer = true;\r\n\t\t//SImpleAnimator\r\n\t\tthis.instanceSimpleAnimatorBuffer = LayaGL.renderOBJCreate.createVertexBuffer3D(this.instanceSimpleAnimatorData.length * 4, BufferUsage.Dynamic, false);\r\n\t\tthis.instanceSimpleAnimatorBuffer.vertexDeclaration = VertexMesh.instanceSimpleAnimatorDeclaration;\r\n\t\tthis.instanceSimpleAnimatorBuffer.instanceBuffer = true;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\t_updateRenderParams(state: RenderContext3D): void {\r\n\t\tvar element: SubMeshRenderElement = (<SubMeshRenderElement>state.renderElement);\r\n\t\tvar subMesh: SubMesh = element.instanceSubMesh;\r\n\t\tvar count: number = element.instanceBatchElementList.length;\r\n\t\tvar indexCount: number = subMesh._indexCount;\r\n\t\t//subMesh._mesh._instanceBufferState.bind();\r\n\t\tthis.clearRenderParams();\r\n\t\tthis.bufferState = subMesh._mesh._instanceBufferState;\r\n\t\tthis.instanceCount = count;\r\n\t\tthis.setDrawElemenParams(indexCount, subMesh._indexStart * 2);\r\n\t\t//LayaGL.renderDrawConatext.drawElementsInstanced(MeshTopology.Triangles, indexCount, IndexFormat.UInt16, subMesh._indexStart * 2, count);\r\n\t\t//Stat.renderBatches++;\r\n\t\t//Stat.savedRenderBatches += count - 1;\r\n\t\t//Stat.trianglesFaces += indexCount * count / 3;\r\n\t}\r\n\r\n\r\n}\r\n\r\n","import { IVertex } from \"../IVertex\"\r\nimport { VertexDeclaration } from \"../../../RenderEngine/VertexDeclaration\"\r\nimport { Vector2 } from \"../../../maths/Vector2\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\nimport { VertexElementFormat } from \"../../../renders/VertexElementFormat\";\r\nimport { VertexElement } from \"../../../renders/VertexElement\";\r\n\r\n/**\r\n * @internal\r\n * <code>VertexPositionTerrain</code> 类用于创建位置、法线、纹理1、纹理2顶点结构。\r\n */\r\nexport class VertexPositionTerrain implements IVertex {\r\n\tstatic TERRAIN_POSITION0: number = 0;\r\n\tstatic TERRAIN_NORMAL0: number = 1;\r\n\tstatic TERRAIN_TEXTURECOORDINATE0: number = 2;\r\n\tstatic TERRAIN_TEXTURECOORDINATE1: number = 3;\r\n\r\n\tprivate static _vertexDeclaration: VertexDeclaration;\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic __init__(): void {\r\n\t\tVertexPositionTerrain._vertexDeclaration = new VertexDeclaration(40, [new VertexElement(0, VertexElementFormat.Vector3, VertexPositionTerrain.TERRAIN_POSITION0),\r\n\t\tnew VertexElement(12, VertexElementFormat.Vector3, VertexPositionTerrain.TERRAIN_NORMAL0),\r\n\t\tnew VertexElement(24, VertexElementFormat.Vector2, VertexPositionTerrain.TERRAIN_TEXTURECOORDINATE0),\r\n\t\tnew VertexElement(32, VertexElementFormat.Vector2, VertexPositionTerrain.TERRAIN_TEXTURECOORDINATE1)]);\r\n\t}\r\n\r\n\tstatic get vertexDeclaration(): VertexDeclaration {\r\n\t\treturn VertexPositionTerrain._vertexDeclaration;\r\n\t}\r\n\r\n\tprivate _position: Vector3;\r\n\tprivate _normal: Vector3;\r\n\tprivate _textureCoord0: Vector2;\r\n\tprivate _textureCoord1: Vector2;\r\n\r\n\tget position(): Vector3 {\r\n\t\treturn this._position;\r\n\t}\r\n\r\n\tget normal(): Vector3 {\r\n\t\treturn this._normal;\r\n\t}\r\n\r\n\tget textureCoord0(): Vector2 {\r\n\t\treturn this._textureCoord0;\r\n\t}\r\n\r\n\tget textureCoord1(): Vector2 {\r\n\t\treturn this._textureCoord1;\r\n\t}\r\n\r\n\tget vertexDeclaration(): VertexDeclaration {\r\n\t\treturn VertexPositionTerrain._vertexDeclaration;\r\n\t}\r\n\r\n\tconstructor(position: Vector3, normal: Vector3, textureCoord0: Vector2, textureCoord1: Vector2) {\r\n\t\tthis._position = position;\r\n\t\tthis._normal = normal;\r\n\t\tthis._textureCoord0 = textureCoord0;\r\n\t\tthis._textureCoord1 = textureCoord1;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { Rigidbody3D } from \"./Rigidbody3D\";\r\nimport { PhysicsComponent } from \"./PhysicsComponent\";\r\n\r\nexport interface IPhyDebugDrawer{\r\n    /**\r\n     * 设置颜色\r\n     * @param c \r\n     */\r\n    color(c:number):void;\r\n    /**\r\n     * 画线\r\n     * @param sx \r\n     * @param sy \r\n     * @param sz \r\n     * @param ex \r\n     * @param ey \r\n     * @param ez \r\n     */\r\n    line(sx:number,sy:number,sz:number, ex:number, ey:number,ez:number):void;\r\n    /**\r\n     * 清除画线结果\r\n     */\r\n    clear():void;\r\n}\r\n/**\r\n * @internal\r\n */\r\nexport class BulletInteractive {\r\n    mem:WebAssembly.Memory;\r\n    dbgLine:IPhyDebugDrawer;\r\n    /**\r\n     * \r\n     * @param mem \r\n     * @param dbgline 如果要显示物理线框，要设置这个\r\n     */\r\n    constructor(mem:WebAssembly.Memory, dbgline:IPhyDebugDrawer){\r\n        this.mem=mem;\r\n        this.dbgLine=dbgline;\r\n    }\r\n    //Dynamic刚体,初始化时调用一次,Kinematic刚体,每次物理tick时调用(如果未进入睡眠状态),让物理引擎知道刚体位置。\r\n    getWorldTransform(rigidBodyID: number, worldTransPointer: number) {\r\n        //已调整机制,引擎会统一处理通过Transform修改坐标更新包围盒队列\r\n        //var rigidBody:Rigidbody3D = __JS__(\"this._rigidbody\");\r\n        //if (!rigidBody._colliderShape)//Dynamic刚体初始化时没有colliderShape需要跳过\r\n        //return;\r\n        //\r\n        //rigidBody._simulation._updatedRigidbodies++;\r\n        //var physics3D:* = Laya3D._physics3D;\r\n        //var worldTrans:* = physics3D.wrapPointer(worldTransPointer, physics3D.btTransform);\r\n        //rigidBody._innerDerivePhysicsTransformation(worldTrans, true);\r\n    }\r\n    //Dynamic刚体,物理引擎每帧调用一次,用于更新渲染矩阵。\r\n    setWorldTransform(rigidBodyID: number, worldTransPointer: number) {\r\n        var rigidBody: Rigidbody3D = PhysicsComponent._physicObjectsMap[rigidBodyID];\r\n        rigidBody._simulation._updatedRigidbodies++;\r\n        rigidBody._updateTransformComponent(worldTransPointer);\r\n    }\r\n    drawLine=(sx: number, sy: number, sz: number, ex: number, ey: number, ez: number, color: number)=>{\r\n        if(!this.dbgLine) return;\r\n        this.dbgLine.color(color);\r\n        this.dbgLine.line(sx,sy,sz,ex,ey,ez);\r\n    }\r\n    clearLine=()=>{\r\n        if(!this.dbgLine) return;\r\n        this.dbgLine.clear();\r\n    }\r\n    jslog=(ptr: number, len: number)=>{\r\n        if(!this.mem) return;\r\n        let td = new TextDecoder();\r\n        let str = new Uint8Array(this.mem.buffer, ptr, len);\r\n        let jsstr = td.decode(str);\r\n        console.log(jsstr);\r\n    }\r\n\r\n}","import { IndexBuffer3D } from \"../../graphics/IndexBuffer3D\";\r\nimport { VertexBuffer3D } from \"../../graphics/VertexBuffer3D\";\r\nimport { Mesh } from \"./Mesh\";\r\nimport { SubMesh } from \"./SubMesh\";\r\nimport { BufferUsage } from \"../../../RenderEngine/RenderEnum/BufferTargetType\";\r\nimport { VertexDeclaration } from \"../../../RenderEngine/VertexDeclaration\";\r\nimport { LayaGL } from \"../../../layagl/LayaGL\";\r\nimport { IndexFormat } from \"../../../RenderEngine/RenderEnum/IndexFormat\";\r\nimport { Quaternion } from \"../../../maths/Quaternion\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\nimport { VertexMesh } from \"../../../RenderEngine/RenderShader/VertexMesh\";\r\n\r\n/**\r\n * <code>PrimitiveMesh</code> 类用于创建简单网格。\r\n */\r\nexport class PrimitiveMesh {\r\n\r\n\tstatic __init__(): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic _createMesh(vertexDeclaration: VertexDeclaration, vertices: Float32Array, indices: Uint16Array): Mesh {\r\n\t\tvar mesh: Mesh = new Mesh();\r\n\t\tvar subMesh: SubMesh = new SubMesh(mesh);\r\n\t\tvar vertexBuffer: VertexBuffer3D = LayaGL.renderOBJCreate.createVertexBuffer3D(vertices.length * 4, BufferUsage.Static, true);\r\n\t\tvertexBuffer.vertexDeclaration = vertexDeclaration;\r\n\t\tvertexBuffer.setData(vertices.buffer);\r\n\t\tmesh._vertexBuffer = vertexBuffer;\r\n\t\tmesh._vertexCount = vertexBuffer._byteLength / vertexDeclaration.vertexStride;\r\n\t\tvar indexBuffer: IndexBuffer3D = LayaGL.renderOBJCreate.createIndexBuffer3D(IndexFormat.UInt16, indices.length, BufferUsage.Static, true);\r\n\t\tindexBuffer.setData(indices);\r\n\t\tmesh._indexBuffer = indexBuffer;\r\n\r\n\t\tmesh._setBuffer(vertexBuffer, indexBuffer);\r\n\t\t//mesh._setInstanceBuffer(mesh._instanceBufferStateType);\r\n\t\tsubMesh._vertexBuffer = vertexBuffer;\r\n\t\tsubMesh._indexBuffer = indexBuffer;\r\n\t\tsubMesh._setIndexRange(0, indexBuffer.indexCount);\r\n\r\n\t\tvar subIndexBufferStart: number[] = subMesh._subIndexBufferStart;\r\n\t\tvar subIndexBufferCount: number[] = subMesh._subIndexBufferCount;\r\n\t\tvar boneIndicesList: Uint16Array[] = subMesh._boneIndicesList;\r\n\t\tsubIndexBufferStart.length = 1;\r\n\t\tsubIndexBufferCount.length = 1;\r\n\t\tboneIndicesList.length = 1;\r\n\t\tsubIndexBufferStart[0] = 0;\r\n\t\tsubIndexBufferCount[0] = indexBuffer.indexCount;\r\n\r\n\t\tvar subMeshes: SubMesh[] = [];\r\n\t\tsubMeshes.push(subMesh);\r\n\t\tmesh._setSubMeshes(subMeshes);\r\n\t\tmesh.calculateBounds();\r\n\t\tvar memorySize: number = vertexBuffer._byteLength + indexBuffer._byteLength;\r\n\t\tmesh._setCPUMemory(memorySize);\r\n\t\tmesh._setGPUMemory(memorySize);\r\n\t\treturn mesh;\r\n\t}\r\n\r\n\t/**\r\n\t * 创建Box网格。\r\n\t * @param long 半径\r\n\t * @param height 垂直层数\r\n\t * @param width 水平层数\r\n\t * @return\r\n\t */\r\n\tstatic createBox(long: number = 1, height: number = 1, width: number = 1): Mesh {\r\n\t\tvar vertexDeclaration: VertexDeclaration = VertexMesh.getVertexDeclaration(\"POSITION,NORMAL,UV\");\r\n\r\n\t\tvar halfLong: number = long / 2;\r\n\t\tvar halfHeight: number = height / 2;\r\n\t\tvar halfWidth: number = width / 2;\r\n\r\n\t\tvar vertices: Float32Array = new Float32Array([\r\n\t\t\t//上\r\n\t\t\t-halfLong, halfHeight, -halfWidth, 0, 1, 0, 0, 0, halfLong, halfHeight, -halfWidth, 0, 1, 0, 1, 0, halfLong, halfHeight, halfWidth, 0, 1, 0, 1, 1, -halfLong, halfHeight, halfWidth, 0, 1, 0, 0, 1,\r\n\t\t\t//下\r\n\t\t\t-halfLong, -halfHeight, -halfWidth, 0, -1, 0, 0, 1, halfLong, -halfHeight, -halfWidth, 0, -1, 0, 1, 1, halfLong, -halfHeight, halfWidth, 0, -1, 0, 1, 0, -halfLong, -halfHeight, halfWidth, 0, -1, 0, 0, 0,\r\n\t\t\t//左\r\n\t\t\t-halfLong, halfHeight, -halfWidth, -1, 0, 0, 0, 0, -halfLong, halfHeight, halfWidth, -1, 0, 0, 1, 0, -halfLong, -halfHeight, halfWidth, -1, 0, 0, 1, 1, -halfLong, -halfHeight, -halfWidth, -1, 0, 0, 0, 1,\r\n\t\t\t//右\r\n\t\t\thalfLong, halfHeight, -halfWidth, 1, 0, 0, 1, 0, halfLong, halfHeight, halfWidth, 1, 0, 0, 0, 0, halfLong, -halfHeight, halfWidth, 1, 0, 0, 0, 1, halfLong, -halfHeight, -halfWidth, 1, 0, 0, 1, 1,\r\n\t\t\t//前\r\n\t\t\t-halfLong, halfHeight, halfWidth, 0, 0, 1, 0, 0, halfLong, halfHeight, halfWidth, 0, 0, 1, 1, 0, halfLong, -halfHeight, halfWidth, 0, 0, 1, 1, 1, -halfLong, -halfHeight, halfWidth, 0, 0, 1, 0, 1,\r\n\t\t\t//后\r\n\t\t\t-halfLong, halfHeight, -halfWidth, 0, 0, -1, 1, 0, halfLong, halfHeight, -halfWidth, 0, 0, -1, 0, 0, halfLong, -halfHeight, -halfWidth, 0, 0, -1, 0, 1, -halfLong, -halfHeight, -halfWidth, 0, 0, -1, 1, 1]);\r\n\r\n\t\tvar indices: Uint16Array = new Uint16Array([\r\n\t\t\t//上\r\n\t\t\t0, 1, 2, 2, 3, 0,\r\n\t\t\t//下\r\n\t\t\t4, 7, 6, 6, 5, 4,\r\n\t\t\t//左\r\n\t\t\t8, 9, 10, 10, 11, 8,\r\n\t\t\t//右\r\n\t\t\t12, 15, 14, 14, 13, 12,\r\n\t\t\t//前\r\n\t\t\t16, 17, 18, 18, 19, 16,\r\n\t\t\t//后\r\n\t\t\t20, 23, 22, 22, 21, 20]);\r\n\t\treturn PrimitiveMesh._createMesh(vertexDeclaration, vertices, indices);\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个胶囊体模型\r\n\t * @param radius 半径\r\n\t * @param height 高度\r\n\t * @param stacks 水平层数,一般设为垂直层数的一半\r\n\t * @param slices 垂直层数\r\n\t */\r\n\tstatic createCapsule(radius: number = 0.5, height: number = 2, stacks: number = 16, slices: number = 32): Mesh {\r\n\t\tvar vertexCount: number = (stacks + 1) * (slices + 1) * 2 + (slices + 1) * 2;\r\n\t\tvar indexCount: number = (3 * stacks * (slices + 1)) * 2 * 2 + 2 * slices * 3;\r\n\r\n\t\t//定义顶点数据结构\r\n\t\tvar vertexDeclaration: VertexDeclaration = VertexMesh.getVertexDeclaration(\"POSITION,NORMAL,UV\");\r\n\t\t//单个顶点数据个数,总共字节数/单个字节数\r\n\t\tvar vertexFloatStride: number = vertexDeclaration.vertexStride / 4;\r\n\t\t//顶点\r\n\t\tvar vertices: Float32Array = new Float32Array(vertexCount * vertexFloatStride);\r\n\t\t//顶点索引\r\n\t\tvar indices: Uint16Array = new Uint16Array(indexCount);\r\n\r\n\t\tvar stackAngle: number = (Math.PI / 2.0) / stacks;\r\n\t\tvar sliceAngle: number = (Math.PI * 2.0) / slices;\r\n\r\n\t\t//圆柱体高度的一半\r\n\t\tvar hcHeight: number = height / 2 - radius;\r\n\r\n\t\tvar posX: number = 0;\r\n\t\tvar posY: number = 0;\r\n\t\tvar posZ: number = 0;\r\n\r\n\t\tvar vc: number = 0;\r\n\t\tvar ic: number = 0;\r\n\r\n\t\tvar verticeCount: number = 0;\r\n\r\n\t\tvar stack: number, slice: number;\r\n\r\n\t\t//顶部半球\r\n\t\tfor (stack = 0; stack <= stacks; stack++) {\r\n\r\n\t\t\tfor (slice = 0; slice <= slices; slice++) {\r\n\r\n\t\t\t\tposX = radius * Math.cos(stack * stackAngle) * Math.cos(slice * sliceAngle + Math.PI);\r\n\t\t\t\tposY = radius * Math.sin(stack * stackAngle);\r\n\t\t\t\tposZ = radius * Math.cos(stack * stackAngle) * Math.sin(slice * sliceAngle + Math.PI);\r\n\r\n\t\t\t\t//pos\r\n\t\t\t\tvertices[vc++] = posX;\r\n\t\t\t\tvertices[vc++] = posY + hcHeight;\r\n\t\t\t\tvertices[vc++] = posZ;\r\n\r\n\t\t\t\t//normal\r\n\t\t\t\tvertices[vc++] = posX;\r\n\t\t\t\tvertices[vc++] = posY;\r\n\t\t\t\tvertices[vc++] = posZ;\r\n\r\n\t\t\t\t//uv\r\n\t\t\t\tvertices[vc++] = 1 - slice / slices;\r\n\t\t\t\tvertices[vc++] = (1 - stack / stacks) * ((Math.PI * radius / 2) / (height + Math.PI * radius));\r\n\r\n\t\t\t\tif (stack < stacks) {\r\n\r\n\t\t\t\t\t// First\r\n\t\t\t\t\tindices[ic++] = (stack * (slices + 1)) + slice + (slices + 1);\r\n\t\t\t\t\tindices[ic++] = (stack * (slices + 1)) + slice;\r\n\t\t\t\t\tindices[ic++] = (stack * (slices + 1)) + slice + 1;\r\n\t\t\t\t\t// Second\r\n\t\t\t\t\tindices[ic++] = (stack * (slices + 1)) + slice + (slices);\r\n\t\t\t\t\tindices[ic++] = (stack * (slices + 1)) + slice;\r\n\t\t\t\t\tindices[ic++] = (stack * (slices + 1)) + slice + (slices + 1);\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tverticeCount += (stacks + 1) * (slices + 1);\r\n\r\n\t\t//底部半球\r\n\t\tfor (stack = 0; stack <= stacks; stack++) {\r\n\r\n\t\t\tfor (slice = 0; slice <= slices; slice++) {\r\n\r\n\t\t\t\tposX = radius * Math.cos(stack * stackAngle) * Math.cos(slice * sliceAngle + Math.PI);\r\n\t\t\t\tposY = radius * Math.sin(-stack * stackAngle);\r\n\t\t\t\tposZ = radius * Math.cos(stack * stackAngle) * Math.sin(slice * sliceAngle + Math.PI);\r\n\r\n\t\t\t\t//pos\r\n\t\t\t\tvertices[vc++] = posX;\r\n\t\t\t\tvertices[vc++] = posY - hcHeight;\r\n\t\t\t\tvertices[vc++] = posZ;\r\n\r\n\t\t\t\t//normal\r\n\t\t\t\tvertices[vc++] = posX;\r\n\t\t\t\tvertices[vc++] = posY;\r\n\t\t\t\tvertices[vc++] = posZ;\r\n\r\n\t\t\t\t//uv\r\n\t\t\t\tvertices[vc++] = 1 - slice / slices;\r\n\t\t\t\tvertices[vc++] = ((stack / stacks) * (Math.PI * radius / 2) + (height + Math.PI * radius / 2)) / (height + Math.PI * radius);\r\n\r\n\t\t\t\tif (stack < stacks) {\r\n\r\n\t\t\t\t\t// First\r\n\t\t\t\t\tindices[ic++] = verticeCount + (stack * (slices + 1)) + slice;\r\n\t\t\t\t\tindices[ic++] = verticeCount + (stack * (slices + 1)) + slice + (slices + 1);\r\n\t\t\t\t\tindices[ic++] = verticeCount + (stack * (slices + 1)) + slice + 1;\r\n\t\t\t\t\t// Second\r\n\t\t\t\t\tindices[ic++] = verticeCount + (stack * (slices + 1)) + slice;\r\n\t\t\t\t\tindices[ic++] = verticeCount + (stack * (slices + 1)) + slice + (slices);\r\n\t\t\t\t\tindices[ic++] = verticeCount + (stack * (slices + 1)) + slice + (slices + 1);\r\n\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tverticeCount += (stacks + 1) * (slices + 1);\r\n\r\n\t\t//侧壁\r\n\t\tfor (slice = 0; slice <= slices; slice++) {\r\n\t\t\tposX = radius * Math.cos(slice * sliceAngle + Math.PI);\r\n\t\t\tposY = hcHeight;\r\n\t\t\tposZ = radius * Math.sin(slice * sliceAngle + Math.PI);\r\n\r\n\t\t\t//pos\r\n\t\t\tvertices[vc++] = posX;\r\n\t\t\tvertices[vc + (slices + 1) * 8 - 1] = posX;\r\n\t\t\tvertices[vc++] = posY;\r\n\t\t\tvertices[vc + (slices + 1) * 8 - 1] = -posY;\r\n\t\t\tvertices[vc++] = posZ;\r\n\t\t\tvertices[vc + (slices + 1) * 8 - 1] = posZ;\r\n\t\t\t//normal\r\n\t\t\tvertices[vc++] = posX;\r\n\t\t\tvertices[vc + (slices + 1) * 8 - 1] = posX;\r\n\t\t\tvertices[vc++] = 0;\r\n\t\t\tvertices[vc + (slices + 1) * 8 - 1] = 0;\r\n\t\t\tvertices[vc++] = posZ;\r\n\t\t\tvertices[vc + (slices + 1) * 8 - 1] = posZ;\r\n\t\t\t//uv    \r\n\t\t\tvertices[vc++] = 1 - slice * 1 / slices;\r\n\t\t\tvertices[vc + (slices + 1) * 8 - 1] = 1 - slice * 1 / slices;\r\n\t\t\tvertices[vc++] = (Math.PI * radius / 2) / (height + Math.PI * radius);\r\n\t\t\tvertices[vc + (slices + 1) * 8 - 1] = (Math.PI * radius / 2 + height) / (height + Math.PI * radius);\r\n\t\t}\r\n\r\n\t\tfor (slice = 0; slice < slices; slice++) {\r\n\r\n\t\t\tindices[ic++] = slice + verticeCount + (slices + 1);\r\n\t\t\tindices[ic++] = slice + verticeCount + 1;\r\n\t\t\tindices[ic++] = slice + verticeCount;\r\n\r\n\t\t\tindices[ic++] = slice + verticeCount + (slices + 1);\r\n\t\t\tindices[ic++] = slice + verticeCount + (slices + 1) + 1;\r\n\t\t\tindices[ic++] = slice + verticeCount + 1;\r\n\t\t}\r\n\r\n\t\tverticeCount += 2 * (slices + 1);\r\n\t\treturn PrimitiveMesh._createMesh(vertexDeclaration, vertices, indices);\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个圆锥体模型\r\n\t * @param radius 半径\r\n\t * @param height 高度\r\n\t * @param slices 分段数\r\n\t */\r\n\tstatic createCone(radius: number = 0.5, height: number = 1, slices: number = 32): Mesh {\r\n\t\t//(this._released) || (dispose());//如果已存在，则释放资源\r\n\t\tvar vertexCount: number = (slices + 1 + 1) + (slices + 1) * 2;\r\n\t\tvar indexCount: number = 6 * slices + 3 * slices;\r\n\r\n\t\t//定义顶点数据结构\r\n\t\tvar vertexDeclaration: VertexDeclaration = VertexMesh.getVertexDeclaration(\"POSITION,NORMAL,UV\");\r\n\t\t//单个顶点数据个数,总共字节数/单个字节数\r\n\t\tvar vertexFloatStride: number = vertexDeclaration.vertexStride / 4;\r\n\t\t//顶点\r\n\t\tvar vertices: Float32Array = new Float32Array(vertexCount * vertexFloatStride);\r\n\t\t//顶点索引\r\n\t\tvar indices: Uint16Array = new Uint16Array(indexCount);\r\n\r\n\t\tvar sliceAngle: number = (Math.PI * 2.0) / slices;\r\n\r\n\t\tvar halfHeight: number = height / 2;\r\n\t\tvar curAngle: number = 0;\r\n\t\tvar verticeCount: number = 0;\r\n\r\n\t\tvar posX: number = 0;\r\n\t\tvar posY: number = 0;\r\n\t\tvar posZ: number = 0;\r\n\r\n\t\tvar normal: Vector3 = new Vector3();\r\n\t\tvar downV3: Vector3 = new Vector3(0, -1, 0);\r\n\t\tvar upPoint: Vector3 = new Vector3(0, halfHeight, 0);\r\n\t\tvar downPoint: Vector3 = new Vector3();\r\n\t\tvar v3: Vector3 = new Vector3();\r\n\t\tvar q4: Quaternion = new Quaternion();\r\n\t\tvar rotateAxis: Vector3 = new Vector3();\r\n\t\tvar rotateRadius: number;\r\n\r\n\t\tvar vc: number = 0;\r\n\t\tvar ic: number = 0;\r\n\r\n\t\t//壁\r\n\t\tfor (var rv: number = 0; rv <= slices; rv++) {\r\n\t\t\tcurAngle = rv * sliceAngle;\r\n\t\t\tposX = Math.cos(curAngle + Math.PI) * radius;\r\n\t\t\tposY = halfHeight;\r\n\t\t\tposZ = Math.sin(curAngle + Math.PI) * radius;\r\n\r\n\t\t\t//pos\r\n\t\t\tvertices[vc++] = 0;\r\n\t\t\tvertices[vc + (slices + 1) * 8 - 1] = posX;\r\n\t\t\tvertices[vc++] = posY;\r\n\t\t\tvertices[vc + (slices + 1) * 8 - 1] = -posY;\r\n\t\t\tvertices[vc++] = 0;\r\n\t\t\tvertices[vc + (slices + 1) * 8 - 1] = posZ;\r\n\r\n\t\t\tnormal.x = posX;\r\n\t\t\tnormal.y = 0;\r\n\t\t\tnormal.z = posZ;\r\n\t\t\tdownPoint.x = posX;\r\n\t\t\tdownPoint.y = -posY;\r\n\t\t\tdownPoint.z = posZ;\r\n\t\t\tVector3.subtract(downPoint, upPoint, v3);\r\n\t\t\tVector3.normalize(v3, v3);\r\n\t\t\trotateRadius = Math.acos(Vector3.dot(downV3, v3));\r\n\t\t\tVector3.cross(downV3, v3, rotateAxis);\r\n\t\t\tVector3.normalize(rotateAxis, rotateAxis);\r\n\t\t\tQuaternion.createFromAxisAngle(rotateAxis, rotateRadius, q4);\r\n\t\t\tVector3.normalize(normal, normal);\r\n\t\t\tVector3.transformQuat(normal, q4, normal);\r\n\t\t\tVector3.normalize(normal, normal);\r\n\t\t\t//normal\r\n\t\t\tvertices[vc++] = normal.x;\r\n\t\t\tvertices[vc + (slices + 1) * 8 - 1] = normal.x;\r\n\t\t\tvertices[vc++] = normal.y;\r\n\t\t\tvertices[vc + (slices + 1) * 8 - 1] = normal.y;\r\n\t\t\tvertices[vc++] = normal.z;\r\n\t\t\tvertices[vc + (slices + 1) * 8 - 1] = normal.z;\r\n\t\t\t//uv    \r\n\t\t\tvertices[vc++] = 1 - rv * 1 / slices;\r\n\t\t\tvertices[vc + (slices + 1) * 8 - 1] = 1 - rv * 1 / slices;\r\n\t\t\tvertices[vc++] = 0;\r\n\t\t\tvertices[vc + (slices + 1) * 8 - 1] = 1;\r\n\r\n\t\t}\r\n\r\n\t\tvc += (slices + 1) * 8;\r\n\r\n\t\tfor (var ri: number = 0; ri < slices; ri++) {\r\n\t\t\tindices[ic++] = ri + verticeCount + (slices + 1);\r\n\t\t\tindices[ic++] = ri + verticeCount + 1;\r\n\t\t\tindices[ic++] = ri + verticeCount;\r\n\r\n\t\t\tindices[ic++] = ri + verticeCount + (slices + 1);\r\n\t\t\tindices[ic++] = ri + verticeCount + (slices + 1) + 1;\r\n\t\t\tindices[ic++] = ri + verticeCount + 1;\r\n\r\n\t\t}\r\n\r\n\t\tverticeCount += 2 * (slices + 1);\r\n\r\n\t\t//底\r\n\t\tfor (var bv: number = 0; bv <= slices; bv++) {\r\n\t\t\tif (bv === 0) {\r\n\t\t\t\t//pos\r\n\t\t\t\tvertices[vc++] = 0;\r\n\t\t\t\tvertices[vc++] = -halfHeight;\r\n\t\t\t\tvertices[vc++] = 0;\r\n\t\t\t\t//normal\r\n\t\t\t\tvertices[vc++] = 0;\r\n\t\t\t\tvertices[vc++] = -1;\r\n\t\t\t\tvertices[vc++] = 0;\r\n\t\t\t\t//uv\r\n\t\t\t\tvertices[vc++] = 0.5;\r\n\t\t\t\tvertices[vc++] = 0.5;\r\n\t\t\t}\r\n\r\n\t\t\tcurAngle = bv * sliceAngle;\r\n\t\t\tposX = Math.cos(curAngle + Math.PI) * radius;\r\n\t\t\tposY = -halfHeight;\r\n\t\t\tposZ = Math.sin(curAngle + Math.PI) * radius;\r\n\r\n\t\t\t//pos\r\n\t\t\tvertices[vc++] = posX;\r\n\t\t\tvertices[vc++] = posY;\r\n\t\t\tvertices[vc++] = posZ;\r\n\t\t\t//normal\r\n\t\t\tvertices[vc++] = 0;\r\n\t\t\tvertices[vc++] = -1;\r\n\t\t\tvertices[vc++] = 0;\r\n\t\t\t//uv\r\n\t\t\tvertices[vc++] = 0.5 + Math.cos(curAngle) * 0.5;\r\n\t\t\tvertices[vc++] = 0.5 + Math.sin(curAngle) * 0.5;\r\n\r\n\t\t}\r\n\r\n\t\tfor (var bi: number = 0; bi < slices; bi++) {\r\n\t\t\tindices[ic++] = 0 + verticeCount;\r\n\t\t\tindices[ic++] = bi + 2 + verticeCount;\r\n\t\t\tindices[ic++] = bi + 1 + verticeCount;\r\n\t\t}\r\n\r\n\t\tverticeCount += slices + 1 + 1;\r\n\t\treturn PrimitiveMesh._createMesh(vertexDeclaration, vertices, indices);\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个圆柱体模型\r\n\t * @param radius 半径\r\n\t * @param height 高度\r\n\t * @param slices 垂直层数\r\n\t */\r\n\tstatic createCylinder(radius: number = 0.5, height: number = 2, slices: number = 32): Mesh {\r\n\t\t//(this._released) || (dispose());//如果已存在，则释放资源\r\n\t\tvar vertexCount: number = (slices + 1 + 1) + (slices + 1) * 2 + (slices + 1 + 1);\r\n\t\tvar indexCount: number = 3 * slices + 6 * slices + 3 * slices;\r\n\r\n\t\t//定义顶点数据结构\r\n\t\tvar vertexDeclaration: VertexDeclaration = VertexMesh.getVertexDeclaration(\"POSITION,NORMAL,UV\");\r\n\t\t//单个顶点数据个数,总共字节数/单个字节数\r\n\t\tvar vertexFloatStride: number = vertexDeclaration.vertexStride / 4;\r\n\t\t//顶点\r\n\t\tvar vertices: Float32Array = new Float32Array(vertexCount * vertexFloatStride);\r\n\t\t//顶点索引\r\n\t\tvar indices: Uint16Array = new Uint16Array(indexCount);\r\n\r\n\t\tvar sliceAngle: number = (Math.PI * 2.0) / slices;\r\n\r\n\t\tvar halfHeight: number = height / 2;\r\n\t\tvar curAngle: number = 0;\r\n\t\tvar verticeCount: number = 0;\r\n\t\tvar posX: number = 0;\r\n\t\tvar posY: number = 0;\r\n\t\tvar posZ: number = 0;\r\n\r\n\t\tvar vc: number = 0;\r\n\t\tvar ic: number = 0;\r\n\r\n\t\t//顶\r\n\t\tfor (var tv: number = 0; tv <= slices; tv++) {\r\n\r\n\t\t\tif (tv === 0) {\r\n\t\t\t\t//pos\r\n\t\t\t\tvertices[vc++] = 0;\r\n\t\t\t\tvertices[vc++] = halfHeight;\r\n\t\t\t\tvertices[vc++] = 0;\r\n\t\t\t\t//normal\r\n\t\t\t\tvertices[vc++] = 0;\r\n\t\t\t\tvertices[vc++] = 1;\r\n\t\t\t\tvertices[vc++] = 0;\r\n\t\t\t\t//uv\r\n\t\t\t\tvertices[vc++] = 0.5;\r\n\t\t\t\tvertices[vc++] = 0.5;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tcurAngle = tv * sliceAngle;\r\n\t\t\tposX = Math.cos(curAngle) * radius;\r\n\t\t\tposY = halfHeight;\r\n\t\t\tposZ = Math.sin(curAngle) * radius;\r\n\r\n\t\t\t//pos\r\n\t\t\tvertices[vc++] = posX;\r\n\t\t\tvertices[vc++] = posY;\r\n\t\t\tvertices[vc++] = posZ;\r\n\t\t\t//normal\r\n\t\t\tvertices[vc++] = 0;\r\n\t\t\tvertices[vc++] = 1;\r\n\t\t\tvertices[vc++] = 0;\r\n\r\n\t\t\t//uv\r\n\t\t\tvertices[vc++] = 0.5 + Math.cos(curAngle) * 0.5;\r\n\t\t\tvertices[vc++] = 0.5 + Math.sin(curAngle) * 0.5;\r\n\t\t}\r\n\r\n\t\tfor (var ti: number = 0; ti < slices; ti++) {\r\n\t\t\tindices[ic++] = 0;\r\n\t\t\tindices[ic++] = ti + 1;\r\n\t\t\tindices[ic++] = ti + 2;\r\n\t\t}\r\n\t\tverticeCount += slices + 1 + 1;\r\n\r\n\t\t//壁\r\n\t\tfor (var rv: number = 0; rv <= slices; rv++) {\r\n\t\t\tcurAngle = rv * sliceAngle;\r\n\t\t\tposX = Math.cos(curAngle + Math.PI) * radius;\r\n\t\t\tposY = halfHeight;\r\n\t\t\tposZ = Math.sin(curAngle + Math.PI) * radius;\r\n\r\n\t\t\t//pos\r\n\t\t\tvertices[vc++] = posX;\r\n\t\t\tvertices[vc + (slices + 1) * 8 - 1] = posX;\r\n\t\t\tvertices[vc++] = posY;\r\n\t\t\tvertices[vc + (slices + 1) * 8 - 1] = -posY;\r\n\t\t\tvertices[vc++] = posZ;\r\n\t\t\tvertices[vc + (slices + 1) * 8 - 1] = posZ;\r\n\t\t\t//normal\r\n\t\t\tvertices[vc++] = posX;\r\n\t\t\tvertices[vc + (slices + 1) * 8 - 1] = posX;\r\n\t\t\tvertices[vc++] = 0;\r\n\t\t\tvertices[vc + (slices + 1) * 8 - 1] = 0;\r\n\t\t\tvertices[vc++] = posZ;\r\n\t\t\tvertices[vc + (slices + 1) * 8 - 1] = posZ;\r\n\t\t\t//uv    \r\n\t\t\tvertices[vc++] = 1 - rv * 1 / slices;\r\n\t\t\tvertices[vc + (slices + 1) * 8 - 1] = 1 - rv * 1 / slices;\r\n\t\t\tvertices[vc++] = 0;\r\n\t\t\tvertices[vc + (slices + 1) * 8 - 1] = 1;\r\n\r\n\t\t}\r\n\r\n\t\tvc += (slices + 1) * 8;\r\n\r\n\t\tfor (var ri: number = 0; ri < slices; ri++) {\r\n\t\t\tindices[ic++] = ri + verticeCount + (slices + 1);\r\n\t\t\tindices[ic++] = ri + verticeCount + 1;\r\n\t\t\tindices[ic++] = ri + verticeCount;\r\n\r\n\t\t\tindices[ic++] = ri + verticeCount + (slices + 1);\r\n\t\t\tindices[ic++] = ri + verticeCount + (slices + 1) + 1;\r\n\t\t\tindices[ic++] = ri + verticeCount + 1;\r\n\r\n\t\t}\r\n\r\n\t\tverticeCount += 2 * (slices + 1);\r\n\r\n\t\t//底\r\n\t\tfor (var bv: number = 0; bv <= slices; bv++) {\r\n\t\t\tif (bv === 0) {\r\n\t\t\t\t//pos\r\n\t\t\t\tvertices[vc++] = 0;\r\n\t\t\t\tvertices[vc++] = -halfHeight;\r\n\t\t\t\tvertices[vc++] = 0;\r\n\t\t\t\t//normal\r\n\t\t\t\tvertices[vc++] = 0;\r\n\t\t\t\tvertices[vc++] = -1;\r\n\t\t\t\tvertices[vc++] = 0;\r\n\t\t\t\t//uv\r\n\t\t\t\tvertices[vc++] = 0.5;\r\n\t\t\t\tvertices[vc++] = 0.5;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tcurAngle = bv * sliceAngle;\r\n\t\t\tposX = Math.cos(curAngle + Math.PI) * radius;\r\n\t\t\tposY = -halfHeight;\r\n\t\t\tposZ = Math.sin(curAngle + Math.PI) * radius;\r\n\r\n\t\t\t//pos\r\n\t\t\tvertices[vc++] = posX;\r\n\t\t\tvertices[vc++] = posY;\r\n\t\t\tvertices[vc++] = posZ;\r\n\t\t\t//normal\r\n\t\t\tvertices[vc++] = 0;\r\n\t\t\tvertices[vc++] = -1;\r\n\t\t\tvertices[vc++] = 0;\r\n\t\t\t//uv\r\n\t\t\tvertices[vc++] = 0.5 + Math.cos(curAngle) * 0.5;\r\n\t\t\tvertices[vc++] = 0.5 + Math.sin(curAngle) * 0.5;\r\n\r\n\t\t}\r\n\r\n\t\tfor (var bi: number = 0; bi < slices; bi++) {\r\n\t\t\tindices[ic++] = 0 + verticeCount;\r\n\t\t\tindices[ic++] = bi + 2 + verticeCount;\r\n\t\t\tindices[ic++] = bi + 1 + verticeCount;\r\n\t\t}\r\n\r\n\t\tverticeCount += slices + 1 + 1;\r\n\t\treturn PrimitiveMesh._createMesh(vertexDeclaration, vertices, indices);\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个平面模型\r\n\t * @param long  长\r\n\t * @param width 宽\r\n\t */\r\n\tstatic createPlane(long: number = 10, width: number = 10, stacks: number = 10, slices: number = 10): Mesh {\r\n\t\tvar vertexCount: number = (stacks + 1) * (slices + 1);\r\n\t\tvar indexCount: number = stacks * slices * 2 * 3;\r\n\t\tvar indices: Uint16Array = new Uint16Array(indexCount);\r\n\t\t//定义顶点数据结构\r\n\t\tvar vertexDeclaration: VertexDeclaration = VertexMesh.getVertexDeclaration(\"POSITION,NORMAL,UV\");\r\n\t\t//单个顶点数据个数,总共字节数/单个字节数\r\n\t\tvar vertexFloatStride: number = vertexDeclaration.vertexStride / 4;\r\n\t\t//顶点数组长度\r\n\t\tvar vertices: Float32Array = new Float32Array(vertexCount * vertexFloatStride);\r\n\r\n\t\tvar halfLong: number = long / 2;\r\n\t\tvar halfWidth: number = width / 2;\r\n\t\tvar stacksLong: number = long / stacks;\r\n\t\tvar slicesWidth: number = width / slices;\r\n\r\n\t\tvar verticeCount: number = 0;\r\n\r\n\t\tfor (var i: number = 0; i <= slices; i++) {\r\n\r\n\t\t\tfor (var j: number = 0; j <= stacks; j++) {\r\n\r\n\t\t\t\tvertices[verticeCount++] = j * stacksLong - halfLong;\r\n\t\t\t\tvertices[verticeCount++] = 0;\r\n\t\t\t\tvertices[verticeCount++] = i * slicesWidth - halfWidth;\r\n\t\t\t\tvertices[verticeCount++] = 0;\r\n\t\t\t\tvertices[verticeCount++] = 1;\r\n\t\t\t\tvertices[verticeCount++] = 0;\r\n\t\t\t\tvertices[verticeCount++] = j * 1 / stacks;\r\n\t\t\t\tvertices[verticeCount++] = i * 1 / slices;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tvar indiceIndex: number = 0;\r\n\r\n\t\tfor (i = 0; i < slices; i++) {\r\n\r\n\t\t\tfor (j = 0; j < stacks; j++) {\r\n\r\n\t\t\t\tindices[indiceIndex++] = (i + 1) * (stacks + 1) + j;\r\n\t\t\t\tindices[indiceIndex++] = i * (stacks + 1) + j;\r\n\t\t\t\tindices[indiceIndex++] = (i + 1) * (stacks + 1) + j + 1;\r\n\r\n\t\t\t\tindices[indiceIndex++] = i * (stacks + 1) + j;\r\n\t\t\t\tindices[indiceIndex++] = i * (stacks + 1) + j + 1;\r\n\t\t\t\tindices[indiceIndex++] = (i + 1) * (stacks + 1) + j + 1;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn PrimitiveMesh._createMesh(vertexDeclaration, vertices, indices);\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个四边形模型\r\n\t * @param long  长\r\n\t * @param width 宽\r\n\t */\r\n\tstatic createQuad(long: number = 1, width: number = 1): Mesh {\r\n\t\t//定义顶点数据结构\r\n\t\tvar vertexDeclaration: VertexDeclaration = VertexMesh.getVertexDeclaration(\"POSITION,NORMAL,UV\");\r\n\t\tvar halfLong: number = long / 2;\r\n\t\tvar halfWidth: number = width / 2;\r\n\r\n\t\tvar vertices: Float32Array = new Float32Array([-halfLong, halfWidth, 0, 0, 0, 1, 0, 0, halfLong, halfWidth, 0, 0, 0, 1, 1, 0, -halfLong, -halfWidth, 0, 0, 0, 1, 0, 1, halfLong, -halfWidth, 0, 0, 0, 1, 1, 1]);\r\n\t\tvar indices: Uint16Array = new Uint16Array([0, 1, 2, 3, 2, 1]);\r\n\r\n\t\treturn PrimitiveMesh._createMesh(vertexDeclaration, vertices, indices);\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个球体模型\r\n\t * @param radius 半径\r\n\t * @param stacks 水平层数\r\n\t * @param slices 垂直层数\r\n\t */\r\n\tstatic createSphere(radius: number = 0.5, stacks: number = 32, slices: number = 32): Mesh {\r\n\t\tvar vertexCount: number = (stacks + 1) * (slices + 1);\r\n\t\tvar indexCount: number = (3 * stacks * (slices + 1)) * 2;\r\n\r\n\t\tvar indices: Uint16Array = new Uint16Array(indexCount);\r\n\t\tvar vertexDeclaration: VertexDeclaration = VertexMesh.getVertexDeclaration(\"POSITION,NORMAL,UV\");\r\n\t\tvar vertexFloatStride: number = vertexDeclaration.vertexStride / 4;\r\n\t\tvar vertices: Float32Array = new Float32Array(vertexCount * vertexFloatStride);\r\n\r\n\t\tvar stackAngle: number = Math.PI / stacks;\r\n\t\tvar sliceAngle: number = (Math.PI * 2.0) / slices;\r\n\r\n\t\t// Generate the group of Stacks for the sphere  \r\n\t\tvar vertexIndex: number = 0;\r\n\t\tvertexCount = 0;\r\n\t\tindexCount = 0;\r\n\r\n\t\tfor (var stack: number = 0; stack < (stacks + 1); stack++) {\r\n\t\t\tvar r: number = Math.sin(stack * stackAngle);\r\n\t\t\tvar y: number = Math.cos(stack * stackAngle);\r\n\r\n\t\t\t// Generate the group of segments for the current Stack  \r\n\t\t\tfor (var slice: number = 0; slice < (slices + 1); slice++) {\r\n\t\t\t\tvar x: number = r * Math.sin(slice * sliceAngle + Math.PI * 1 / 2);\r\n\t\t\t\tvar z: number = r * Math.cos(slice * sliceAngle + Math.PI * 1 / 2);\r\n\t\t\t\tvertices[vertexCount + 0] = x * radius;\r\n\t\t\t\tvertices[vertexCount + 1] = y * radius;\r\n\t\t\t\tvertices[vertexCount + 2] = z * radius;\r\n\r\n\t\t\t\tvertices[vertexCount + 3] = x;\r\n\t\t\t\tvertices[vertexCount + 4] = y;\r\n\t\t\t\tvertices[vertexCount + 5] = z;\r\n\r\n\t\t\t\tvertices[vertexCount + 6] = slice / slices;\r\n\t\t\t\tvertices[vertexCount + 7] = stack / stacks;\r\n\t\t\t\tvertexCount += vertexFloatStride;\r\n\t\t\t\tif (stack != (stacks - 1)) {\r\n\t\t\t\t\t// First Face\r\n\t\t\t\t\tindices[indexCount++] = vertexIndex + (slices + 1);\r\n\t\t\t\t\tindices[indexCount++] = vertexIndex;\r\n\t\t\t\t\tindices[indexCount++] = vertexIndex + 1;\r\n\t\t\t\t\t// Second \r\n\t\t\t\t\tindices[indexCount++] = vertexIndex + (slices);\r\n\t\t\t\t\tindices[indexCount++] = vertexIndex;\r\n\t\t\t\t\tindices[indexCount++] = vertexIndex + (slices + 1);\r\n\t\t\t\t\tvertexIndex++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn PrimitiveMesh._createMesh(vertexDeclaration, vertices, indices);\r\n\t}\r\n}\r\n\r\n","#if !defined(Utils_lib)\r\n    #define Utils_lib\r\n\r\n#endif // Utils_lib","#define SHADER_NAME BlitFS\r\n\r\n#include \"Color.glsl\";\r\n#include \"FastApproximateAntiAliasing.glsl\";\r\n\r\nvarying vec2 v_Texcoord0;\r\n\r\nvoid main()\r\n{\r\n#ifdef FXAA\r\n    gl_FragColor = FXAAMain(u_MainTex, v_Texcoord0, u_MainTex_TexelSize.zw);\r\n#else\r\n    vec4 mainColor = texture2D(u_MainTex, v_Texcoord0);\r\n    #ifdef Gamma_u_MainTex\r\n    mainColor = gammaToLinear(mainColor);\r\n    #endif // Gamma_u_AlbedoTexture\r\n    gl_FragColor = mainColor;\r\n#endif\r\n\r\n    gl_FragColor = outputTransform(gl_FragColor);\r\n}\r\n","import { Shader3D } from \"../../../RenderEngine/RenderShader/Shader3D\";\r\nimport { ShaderDataType } from \"../../../RenderEngine/RenderShader/ShaderData\";\r\nimport BlitVS from \"./BlitScreen.vs\";\r\nimport BlitFS from \"./BlitScreen.fs\";\r\nimport FXAA from \"./FastApproximateAntiAliasing.glsl\";\r\nimport { SubShader } from \"../../../RenderEngine/RenderShader/SubShader\";\r\nimport { RenderState } from \"../../../RenderEngine/RenderShader/RenderState\";\r\nimport { VertexMesh } from \"../../../RenderEngine/RenderShader/VertexMesh\";\r\n\r\nimport ColorGradingGLSL from \"./ColorGrading.glsl\";\r\nimport TonemappingGLSL from \"./Tonemapping.glsl\";\r\nimport LUTGLSL from \"./LUT.glsl\";\r\n\r\nimport LUTBuilderFS from \"./LUTBuilder.fs\";\r\n\r\nexport class BlitScreenShaderInit {\r\n\r\n    static init() {\r\n        Shader3D.addInclude(\"FastApproximateAntiAliasing.glsl\", FXAA);\r\n\r\n        Shader3D.addInclude(\"ColorGrading.glsl\", ColorGradingGLSL);\r\n        Shader3D.addInclude(\"Tonemapping.glsl\", TonemappingGLSL);\r\n        Shader3D.addInclude(\"LUT.glsl\", LUTGLSL);\r\n\r\n        let attributeMap: { [name: string]: [number, ShaderDataType] } = {\r\n            \"a_PositionTexcoord\": [VertexMesh.MESH_POSITION0, ShaderDataType.Vector4]\r\n        };\r\n\r\n        let uniformMap = {\r\n            \"u_OffsetScale\": ShaderDataType.Vector4,\r\n            \"u_MainTex\": ShaderDataType.Texture2D,\r\n            \"u_MainTex_TexelSize\": ShaderDataType.Vector4, //x:width,y:height,z:1/width,w:1/height\r\n        };\r\n\r\n        let shader = Shader3D.add(\"BlitScreen\");\r\n        let subShader = new SubShader(attributeMap, uniformMap);\r\n        shader.addSubShader(subShader);\r\n        let blitPass = subShader.addShaderPass(BlitVS, BlitFS);\r\n        blitPass.statefirst = true;\r\n        let blitState = blitPass.renderState;\r\n        blitState.depthTest = RenderState.DEPTHTEST_ALWAYS;\r\n        blitState.depthWrite = false;\r\n        blitState.cull = RenderState.CULL_NONE;\r\n        blitState.blend = RenderState.BLEND_DISABLE;\r\n\r\n        let transparentShader = Shader3D.add(\"BlitScreen_Transparnet\");\r\n        let transparentSubShader = new SubShader(attributeMap, uniformMap);\r\n        transparentShader.addSubShader(transparentSubShader);\r\n        let blitPassTrans = transparentSubShader.addShaderPass(BlitVS, BlitFS);\r\n        blitPass.statefirst = true;\r\n        blitState = blitPassTrans.renderState;\r\n        blitState.depthTest = RenderState.DEPTHTEST_ALWAYS;\r\n        blitState.depthWrite = false;\r\n        blitState.cull = RenderState.CULL_NONE;\r\n        blitState.blend = RenderState.BLEND_ENABLE_ALL;\r\n        blitState.srcBlend = RenderState.BLENDPARAM_SRC_ALPHA;\r\n        blitState.dstBlend = RenderState.BLENDPARAM_ONE_MINUS_SRC_ALPHA;\r\n\r\n        this.lutBuilderInit();\r\n    }\r\n\r\n    private static lutBuilderInit() {\r\n\r\n        let attributeMap: { [name: string]: [number, ShaderDataType] } = {\r\n            \"a_PositionTexcoord\": [VertexMesh.MESH_POSITION0, ShaderDataType.Vector4]\r\n        };\r\n\r\n        let uniformMap = {\r\n            \"u_OffsetScale\": ShaderDataType.Vector4,\r\n            \"u_MainTex\": ShaderDataType.Texture2D,\r\n            \"u_MainTex_TexelSize\": ShaderDataType.Vector4, //x:width,y:height,z:1/width,w:1/height\r\n            \"u_LutParams\": ShaderDataType.Vector4\r\n        };\r\n\r\n        let shader = Shader3D.add(\"LUTBuilder\");\r\n        let subShader = new SubShader(attributeMap, uniformMap);\r\n        shader.addSubShader(subShader);\r\n        let pass = subShader.addShaderPass(BlitVS, LUTBuilderFS);\r\n        pass.renderState.depthTest = RenderState.DEPTHTEST_ALWAYS;\r\n        pass.renderState.depthWrite = false;\r\n        pass.renderState.cull = RenderState.CULL_NONE;\r\n        pass.renderState.blend = RenderState.BLEND_DISABLE;\r\n        pass.statefirst = true;\r\n    }\r\n\r\n}","#if !defined(FXAA_lib)\r\n    #define FXAA_lib\r\n#ifdef FXAA\r\n    #define EDGE_THRESHOLD_MIN 0.0312\r\n    #define EDGE_THRESHOLD_MAX 0.125\r\n    #define QUALITY(q)\t       ((q) < 5 ? 1.0 : ((q) > 5 ? ((q) < 10 ? 2.0 : ((q) < 11 ? 4.0 : 8.0)) : 1.5))\r\n    #define ITERATIONS\t       12\r\n    #define SUBPIXEL_QUALITY   0.75\r\n\r\nfloat rgb2luma(in vec3 rgb)\r\n{\r\n    return dot(rgb, vec3(0.299, 0.587, 0.114));\r\n}\r\n\r\nvec3 textureOffsetbyScreenSize(in sampler2D mainTex, in vec2 uv, in vec2 offset, in vec2 inverseScreenSize)\r\n{\r\n    vec2 sampleruv = uv + inverseScreenSize * offset; // u_texturesize表示每个像素的偏移量\r\n    return texture2D(mainTex, sampleruv).rgb;\r\n}\r\n\r\nvec4 FXAAMain(in sampler2D mainTex, in vec2 texuv, in vec2 inverseScreenSize)\r\n{\r\n\r\n    vec4 mainColor = texture2D(mainTex, texuv);\r\n    vec3 colorCenter = mainColor.rgb;\r\n    // Luma at the current fragment\r\n    float lumaCenter = rgb2luma(colorCenter);\r\n\r\n    // Luma at the four direct neighbours of the current fragment.\r\n    float lumaDown = rgb2luma(textureOffsetbyScreenSize(mainTex, texuv, vec2(0, -1), inverseScreenSize));\r\n    float lumaUp = rgb2luma(textureOffsetbyScreenSize(mainTex, texuv, vec2(0, 1), inverseScreenSize));\r\n    float lumaLeft = rgb2luma(textureOffsetbyScreenSize(mainTex, texuv, vec2(-1, 0), inverseScreenSize));\r\n    float lumaRight = rgb2luma(textureOffsetbyScreenSize(mainTex, texuv, vec2(1, 0), inverseScreenSize));\r\n\r\n    // Find the maximum and minimum luma around the current fragment.\r\n    float lumaMin = min(lumaCenter, min(min(lumaDown, lumaUp), min(lumaLeft, lumaRight)));\r\n    float lumaMax = max(lumaCenter, max(max(lumaDown, lumaUp), max(lumaLeft, lumaRight)));\r\n\r\n    // Compute the delta.\r\n    float lumaRange = lumaMax - lumaMin;\r\n\r\n    // If the luma variation is lower that a threshold (or if we are in a really dark area), we are not on an edge, don't perform any AA.\r\n    if (lumaRange < max(EDGE_THRESHOLD_MIN, lumaMax * EDGE_THRESHOLD_MAX))\r\n\t{\r\n\t    return mainColor;\r\n\t}\r\n\r\n    // Query the 4 remaining corners lumas.\r\n    float lumaDownLeft = rgb2luma(textureOffsetbyScreenSize(mainTex, texuv, vec2(-1, -1), inverseScreenSize));\r\n    float lumaUpRight = rgb2luma(textureOffsetbyScreenSize(mainTex, texuv, vec2(1, 1), inverseScreenSize));\r\n    float lumaUpLeft = rgb2luma(textureOffsetbyScreenSize(mainTex, texuv, vec2(-1, 1), inverseScreenSize));\r\n    float lumaDownRight = rgb2luma(textureOffsetbyScreenSize(mainTex, texuv, vec2(1, -1), inverseScreenSize));\r\n\r\n    // Combine the four edges lumas (using intermediary variables for future computations with the same values).\r\n    float lumaDownUp = lumaDown + lumaUp;\r\n    float lumaLeftRight = lumaLeft + lumaRight;\r\n\r\n    // Same for corners\r\n    float lumaLeftCorners = lumaDownLeft + lumaUpLeft;\r\n    float lumaDownCorners = lumaDownLeft + lumaDownRight;\r\n    float lumaRightCorners = lumaDownRight + lumaUpRight;\r\n    float lumaUpCorners = lumaUpRight + lumaUpLeft;\r\n\r\n    // Compute an estimation of the gradient along the horizontal and vertical axis.\r\n    float edgeHorizontal = abs(-2.0 * lumaLeft + lumaLeftCorners) + abs(-2.0 * lumaCenter + lumaDownUp) * 2.0 + abs(-2.0 * lumaRight + lumaRightCorners);\r\n    float edgeVertical = abs(-2.0 * lumaUp + lumaUpCorners) + abs(-2.0 * lumaCenter + lumaLeftRight) * 2.0 + abs(-2.0 * lumaDown + lumaDownCorners);\r\n\r\n    // Is the local edge horizontal or vertical ?\r\n    bool isHorizontal = (edgeHorizontal >= edgeVertical);\r\n\r\n    // Choose the step size (one pixel) accordingly.\r\n    float stepLength = isHorizontal ? inverseScreenSize.y : inverseScreenSize.x;\r\n\r\n    // Select the two neighboring texels lumas in the opposite direction to the local edge.\r\n    float luma1 = isHorizontal ? lumaDown : lumaLeft;\r\n    float luma2 = isHorizontal ? lumaUp : lumaRight;\r\n    // Compute gradients in this direction.\r\n    float gradient1 = luma1 - lumaCenter;\r\n    float gradient2 = luma2 - lumaCenter;\r\n\r\n    // Which direction is the steepest ?\r\n    bool is1Steepest = abs(gradient1) >= abs(gradient2);\r\n\r\n    // Gradient in the corresponding direction, normalized.\r\n    float gradientScaled = 0.25 * max(abs(gradient1), abs(gradient2));\r\n\r\n    // Average luma in the correct direction.\r\n    float lumaLocalAverage = 0.0;\r\n    if (is1Steepest)\r\n\t{\r\n\t    // Switch the direction\r\n\t    stepLength = -stepLength;\r\n\t    lumaLocalAverage = 0.5 * (luma1 + lumaCenter);\r\n\t}\r\n    else\r\n\t{\r\n\t    lumaLocalAverage = 0.5 * (luma2 + lumaCenter);\r\n\t}\r\n\r\n    // Shift UV in the correct direction by half a pixel.\r\n    vec2 currentUv = texuv;\r\n    if (isHorizontal)\r\n\t{\r\n\t    currentUv.y += stepLength * 0.5;\r\n\t}\r\n    else\r\n\t{\r\n\t    currentUv.x += stepLength * 0.5;\r\n\t}\r\n\r\n    // Compute offset (for each iteration step) in the right direction.\r\n    vec2 offset = isHorizontal ? vec2(inverseScreenSize.x, 0.0) : vec2(0.0, inverseScreenSize.y);\r\n    // Compute UVs to explore on each side of the edge, orthogonally. The QUALITY allows us to step faster.\r\n    vec2 uv1 = currentUv - offset * QUALITY(0);\r\n    vec2 uv2 = currentUv + offset * QUALITY(0);\r\n\r\n    // Read the lumas at both current extremities of the exploration segment, and compute the delta wrt to the local average luma.\r\n    float lumaEnd1 = rgb2luma(textureOffsetbyScreenSize(mainTex, uv1, vec2(0.0, 0.0), inverseScreenSize));\r\n    float lumaEnd2 = rgb2luma(textureOffsetbyScreenSize(mainTex, uv2, vec2(0.0, 0.0), inverseScreenSize));\r\n    lumaEnd1 -= lumaLocalAverage;\r\n    lumaEnd2 -= lumaLocalAverage;\r\n\r\n    // If the luma deltas at the current extremities is larger than the local gradient, we have reached the side of the edge.\r\n    bool reached1 = abs(lumaEnd1) >= gradientScaled;\r\n    bool reached2 = abs(lumaEnd2) >= gradientScaled;\r\n    bool reachedBoth = reached1 && reached2;\r\n\r\n    // If the side is not reached, we continue to explore in this direction.\r\n    if (!reached1)\r\n\t{\r\n\t    uv1 -= offset * QUALITY(1);\r\n\t}\r\n    if (!reached2)\r\n\t{\r\n\t    uv2 += offset * QUALITY(1);\r\n\t}\r\n\r\n    // If both sides have not been reached, continue to explore.\r\n    if (!reachedBoth)\r\n\t{\r\n\r\n\t    for (int i = 2; i < ITERATIONS; i++)\r\n\t\t{\r\n\t\t    // If needed, read luma in 1st direction, compute delta.\r\n\t\t    if (!reached1)\r\n\t\t\t{\r\n\t\t\t    lumaEnd1 = rgb2luma(textureOffsetbyScreenSize(mainTex, uv1, vec2(0.0, 0.0), inverseScreenSize));\r\n\t\t\t    lumaEnd1 = lumaEnd1 - lumaLocalAverage;\r\n\t\t\t}\r\n\t\t    // If needed, read luma in opposite direction, compute delta.\r\n\t\t    if (!reached2)\r\n\t\t\t{\r\n\t\t\t    lumaEnd2 = rgb2luma(textureOffsetbyScreenSize(mainTex, uv2, vec2(0.0, 0.0), inverseScreenSize));\r\n\t\t\t    lumaEnd2 = lumaEnd2 - lumaLocalAverage;\r\n\t\t\t}\r\n\t\t    // If the luma deltas at the current extremities is larger than the local gradient, we have reached the side of the edge.\r\n\t\t    reached1 = abs(lumaEnd1) >= gradientScaled;\r\n\t\t    reached2 = abs(lumaEnd2) >= gradientScaled;\r\n\t\t    reachedBoth = reached1 && reached2;\r\n\r\n\t\t    // If the side is not reached, we continue to explore in this direction, with a variable quality.\r\n\t\t    if (!reached1)\r\n\t\t\t{\r\n\t\t\t    uv1 -= offset * QUALITY(i);\r\n\t\t\t}\r\n\t\t    if (!reached2)\r\n\t\t\t{\r\n\t\t\t    uv2 += offset * QUALITY(i);\r\n\t\t\t}\r\n\r\n\t\t    // If both sides have been reached, stop the exploration.\r\n\t\t    if (reachedBoth)\r\n\t\t\t{\r\n\t\t\t    break;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n    // Compute the distances to each side edge of the edge (!).\r\n    float distance1 = isHorizontal ? (texuv.x - uv1.x) : (texuv.y - uv1.y);\r\n    float distance2 = isHorizontal ? (uv2.x - texuv.x) : (uv2.y - texuv.y);\r\n\r\n    // In which direction is the side of the edge closer ?\r\n    bool isDirection1 = distance1 < distance2;\r\n    float distanceFinal = min(distance1, distance2);\r\n\r\n    // Thickness of the edge.\r\n    float edgeThickness = (distance1 + distance2);\r\n\r\n    // Is the luma at center smaller than the local average ?\r\n    bool isLumaCenterSmaller = lumaCenter < lumaLocalAverage;\r\n\r\n    // If the luma at center is smaller than at its neighbour, the delta luma at each end should be positive (same variation).\r\n    bool correctVariation1 = (lumaEnd1 < 0.0) != isLumaCenterSmaller;\r\n    bool correctVariation2 = (lumaEnd2 < 0.0) != isLumaCenterSmaller;\r\n\r\n    // Only keep the result in the direction of the closer side of the edge.\r\n    bool correctVariation = isDirection1 ? correctVariation1 : correctVariation2;\r\n\r\n    // UV offset: read in the direction of the closest side of the edge.\r\n    float pixelOffset = -distanceFinal / edgeThickness + 0.5;\r\n\r\n    // If the luma variation is incorrect, do not offset.\r\n    float finalOffset = correctVariation ? pixelOffset : 0.0;\r\n\r\n    // Sub-pixel shifting\r\n    // Full weighted average of the luma over the 3x3 neighborhood.\r\n    float lumaAverage = (1.0 / 12.0) * (2.0 * (lumaDownUp + lumaLeftRight) + lumaLeftCorners + lumaRightCorners);\r\n    // Ratio of the delta between the global average and the center luma, over the luma range in the 3x3 neighborhood.\r\n    float subPixelOffset1 = clamp(abs(lumaAverage - lumaCenter) / lumaRange, 0.0, 1.0);\r\n    float subPixelOffset2 = (-2.0 * subPixelOffset1 + 3.0) * subPixelOffset1 * subPixelOffset1;\r\n    // Compute a sub-pixel offset based on this delta.\r\n    float subPixelOffsetFinal = subPixelOffset2 * subPixelOffset2 * SUBPIXEL_QUALITY;\r\n\r\n    // Pick the biggest of the two offsets.\r\n    finalOffset = max(finalOffset, subPixelOffsetFinal);\r\n\r\n    // Compute the final UV coordinates.\r\n    vec2 finalUv = texuv;\r\n    if (isHorizontal)\r\n\t{\r\n\t    finalUv.y += finalOffset * stepLength;\r\n\t}\r\n    else\r\n\t{\r\n\t    finalUv.x += finalOffset * stepLength;\r\n\t}\r\n\r\n    // Read the color at the new UV coordinates, and use it.\r\n    return texture2D(mainTex, finalUv);\r\n}\r\n#endif//FXAA\r\n#endif // Color_lib\r\n","#if !defined(ColorGrading_lib)\r\n    #define ColorGrading_lib\r\n\r\nconst float ACEScc_MAX = 1.4679964;\r\nconst float ACEScc_MIDGRAY = 0.4135884;\r\n\r\nconst float LogC_cut = 0.011361;\r\nconst float LogC_a = 5.555556;\r\nconst float LogC_b = 0.047996;\r\nconst float LogC_c = 0.244161;\r\nconst float LogC_d = 0.386036;\r\nconst float LogC_e = 5.301883;\r\nconst float LogC_f = 0.092819;\r\n\r\nfloat linearToLogC(float x)\r\n{\r\n    float o;\r\n    if (x > LogC_cut)\r\n\t{\r\n\t    o = LogC_c * log10(max(LogC_a * x + LogC_b, 0.0)) + LogC_d;\r\n\t}\r\n    else\r\n\t{\r\n\t    o = LogC_e * x + LogC_f;\r\n\t}\r\n    return o;\r\n}\r\n\r\nvec3 linearToLogC(vec3 x)\r\n{\r\n    vec3 logc;\r\n    logc.x = linearToLogC(x.x);\r\n    logc.y = linearToLogC(x.y);\r\n    logc.z = linearToLogC(x.z);\r\n    return logc;\r\n}\r\n\r\nfloat logCToLinear(float x)\r\n{\r\n    float o;\r\n    if (x > LogC_e * LogC_cut + LogC_f)\r\n\to = (pow(10.0, (x - LogC_d) / LogC_c) - LogC_b) / LogC_a;\r\n    else\r\n\to = (x - LogC_f) / LogC_e;\r\n    return o;\r\n}\r\n\r\nvec3 logCToLinear(vec3 x)\r\n{\r\n    vec3 linear;\r\n    linear.x = logCToLinear(x.x);\r\n    linear.y = logCToLinear(x.y);\r\n    linear.z = logCToLinear(x.z);\r\n    return linear;\r\n}\r\n\r\n// Hue, Saturation, Value\r\n// Ranges:\r\n//  Hue [0.0, 1.0]\r\n//  Sat [0.0, 1.0]\r\n//  Lum [0.0, HALF_MAX]\r\nvec3 RgbToHsv(vec3 c)\r\n{\r\n    const vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\r\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\r\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\r\n    float d = q.x - min(q.w, q.y);\r\n    const float e = 1.0e-4;\r\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\r\n}\r\n\r\nvec3 HsvToRgb(vec3 c)\r\n{\r\n    const vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\r\n    vec3 p = abs(fract(vec3(c.x) + K.xyz) * 6.0 - K.www);\r\n    return c.z * mix(vec3(K.x) , saturate(p - vec3(K.x)), c.y);\r\n}\r\n\r\nfloat RotateHue(float value, float low, float hi)\r\n{\r\n    return (value < low)\r\n            ? value + hi\r\n            : (value > hi)\r\n                ? value - hi\r\n                : value;\r\n}\r\n\r\n\r\nconst mat3 Linear_to_LMS_MAT = mat3(\r\n    vec3(3.90405e-1, 7.08416e-2, 2.31082e-2),\r\n    vec3(5.49941e-1, 9.63172e-1, 1.28021e-1),\r\n    vec3(8.92632e-3, 1.35775e-3, 9.36245e-1));\r\n\r\nconst mat3 LMS_to_Linear_MAT = mat3(\r\n    vec3(2.85847e+0, -2.10182e-1, -4.18120e-2),\r\n    vec3(-1.62879e+0, 1.15820e+0, -1.18169e-1),\r\n    vec3(-2.48910e-2, 3.24281e-4, 1.06867e+0));\r\n\r\n// white balance\r\nuniform vec3 u_ColorBalance;\r\n\r\n// split toning\r\nuniform vec4 u_SplitShadows;\r\nuniform vec3 u_Splithighlights;\r\n\r\n// shadows, midtones, highlights\r\nuniform vec3 u_Shadows;\r\nuniform vec3 u_Midtones;\r\nuniform vec3 u_Highlights;\r\nuniform vec4 u_Limits;\r\n\r\n// lift, gamma, gain\r\nuniform vec3 u_Lift;\r\nuniform vec3 u_Gamma;\r\nuniform vec3 u_Gain;\r\n\r\n//color adjusted\r\nuniform vec4 u_ColorFilter;\r\nuniform vec4 u_HueSatCon;\r\n\r\nfloat luminance(in vec3 color)\r\n{\r\n    #ifdef ACES\r\n    float luma = dot(color, AP1_RGB2Y);\r\n    #else\r\n    float luma = dot(color, vec3(0.2126729, 0.7151522, 0.0721750));\r\n    #endif // ACES\r\n    return luma;\r\n}\r\n\r\nvec3 softlight(vec3 base, vec3 blend)\r\n{\r\n    vec3 r1 = 2.0 * base * blend + base * base * (1.0 - 2.0 * blend);\r\n    vec3 r2 = sqrt(base) * (2.0 * blend - 1.0) + 2.0 * base * (1.0 - blend);\r\n    vec3 t = step(0.5, blend);\r\n    return r2 * t + (1.0 - t) * r1;\r\n}\r\n\r\n// input linear sRGB\r\n// if ACES tonemap, calculate in ACEScg, return ACEScg\r\n// else calculate in logC, return linear sRGB\r\nvec3 colorGrade(in vec3 color)\r\n{\r\n    // White balance in LMS space\r\n    vec3 colorLMS = Linear_to_LMS_MAT * color;\r\n    colorLMS *= u_ColorBalance.xyz;\r\n    color = LMS_to_Linear_MAT * colorLMS;\r\n\r\n    // Do contrast in log after white balance\r\n    #ifdef ACES\r\n        vec3 colorLog = ACES_to_ACEScc(sRGB_to_AP0_MAT * color);\r\n    #else\r\n        vec3 colorLog = linearToLogC(color);\r\n    #endif\r\n    \r\n    colorLog = (colorLog - vec3(ACEScc_MIDGRAY)) * u_HueSatCon.z + vec3(ACEScc_MIDGRAY);\r\n\r\n\r\n    #ifdef ACES\r\n        //colorLinear = ACES_to_ACEScg(ACEScc_to_ACES(colorLog));\r\n        color = AP0_to_AP1_MAT * ACEScc_to_ACES(colorLog);\r\n    #else\r\n        color = logCToLinear(colorLog);\r\n    #endif // ACES\r\n\r\n    // Color filter is just an unclipped multiplier\r\n    color = color * u_ColorFilter.rgb;\r\n\r\n    color = max(vec3(0.0), color);\r\n\r\n    // split toning\r\n    float balance = u_SplitShadows.w;\r\n    vec3 gamma = linearToGamma(color);\r\n    float splitLuma = saturate(luminance(color)) + balance;\r\n    vec3 splitShadows = mix(vec3(0.5, 0.5, 0.5), u_SplitShadows.xyz, 1.0 - splitLuma);\r\n    vec3 splitHeighlights = mix(vec3(0.5, 0.5, 0.5), u_Splithighlights.xyz, splitLuma);\r\n    gamma = softlight(gamma, splitShadows);\r\n    gamma = softlight(gamma, splitHeighlights);\r\n    color = gammaToLinear(gamma);\r\n\r\n    // shadows, midtones, highlights\r\n    float luma = luminance(color);\r\n    float shadowFactor = 1.0 - smoothstep(u_Limits.x, u_Limits.y, luma);\r\n    float highlightsFactor = smoothstep(u_Limits.z, u_Limits.w, luma);\r\n    float midtonesFactor = 1.0 - shadowFactor - highlightsFactor;\r\n    color = color * u_Shadows.xyz * shadowFactor + color * u_Midtones.xyz * midtonesFactor + color * u_Highlights.xyz * highlightsFactor;\r\n\r\n    // Lift, gamma, gain\r\n    color = color * u_Gain.xyz + u_Lift.xyz;\r\n    color = sign(color) * pow(abs(color), u_Gamma.xyz);\r\n    \r\n    // HSV operations\r\n    vec3 hsv = RgbToHsv(color);\r\n    // Hue Shift & Hue Vs Hue\r\n    float hue = hsv.x + u_HueSatCon.x;\r\n    hsv.x = RotateHue(hsv.x, 0.0, 1.0);\r\n    color = HsvToRgb(hsv);\r\n\r\n    // Global saturation\r\n    luma = luminance(color);\r\n    color = vec3(luma) + (vec3(u_HueSatCon.y)) * (color - vec3(luma));\r\n    \r\n    return color;\r\n}\r\n\r\n#endif // ColorGrading_lib","#if !defined(Tonemapping_lib)\r\n    #define Tonemapping_lib\r\n\r\n// ACES Tonemapping color grading in ACEScg space\r\nvec3 tonemap(in vec3 ap1)\r\n{\r\n    vec3 color = ap1;\r\n\r\n    #ifdef ACES\r\n    vec3 aces = AP1_to_AP0_MAT * color;\r\n    vec3 oces = RRT(aces);\r\n    color = ODT_sRGB_100nits(oces);\r\n    #endif // ACES\r\n\r\n    // todo other tonemap\r\n\r\n    return color;\r\n}\r\n\r\n#endif // Tonemapping_lib","#if !defined(LUT_lib)\r\n    #define LUT_lib\r\n\r\n// scaleOffset = (1 / lut_width, 1 / lut_height, lut_height - 1)\r\nvec3 applyLut(sampler2D lut, vec3 uvw, vec3 scaleOffset)\r\n{\r\n    uvw.z *= scaleOffset.z;\r\n\r\n    float shift = floor(uvw.z);\r\n    uvw.xy = uvw.xy * scaleOffset.z * scaleOffset.xy + scaleOffset.xy * 0.5;\r\n    uvw.x += shift * scaleOffset.y;\r\n\r\n    uvw.xyz = mix(\r\n\ttexture2DLodEXT(lut, uvw.xy, 0.0).rgb,\r\n\ttexture2DLodEXT(lut, uvw.xy + vec2(scaleOffset.y, 0.0), 0.0).rgb,\r\n\tuvw.z - shift);\r\n    return uvw;\r\n}\r\n\r\n#endif // LUT_lib","#define SHADER_NAME LutBuilder\r\n\r\n#include \"Color.glsl\";\r\n\r\n#ifdef ACES\r\n    #include \"ACES.glsl\";\r\n#endif // ACES\r\n\r\n#include \"ColorGrading.glsl\";\r\n\r\n#include \"Tonemapping.glsl\";\r\n\r\nvarying vec2 v_Texcoord0;\r\n\r\n// lut params: (lutHeight, 0.5 / lutWidth, 0.5 / lutHeight, lutHeidht / (lutHeight - 1))\r\nvec3 lutValue(vec2 uv, vec4 params)\r\n{\r\n    vec3 color;\r\n    uv -= params.yz;\r\n    color.r = fract(uv.x * params.x);\r\n    color.b = uv.x - color.r / params.x;\r\n    color.g = uv.y;\r\n    return color * params.w;\r\n}\r\n\r\n// internal lut logC space\r\nvoid main()\r\n{\r\n    vec2 uv = v_Texcoord0;\r\n    vec3 color = lutValue(uv, u_LutParams);\r\n    color = logCToLinear(color);\r\n    vec3 grade = colorGrade(color);\r\n    vec3 tone = tonemap(grade);\r\n\r\n    gl_FragColor = vec4(tone, 1.0);\r\n}","\r\n#define SHADER_NAME UnlitVS\r\n\r\n#include \"Math.glsl\";\r\n\r\n#include \"Scene.glsl\";\r\n#include \"SceneFogInput.glsl\";\r\n\r\n#include \"Camera.glsl\";\r\n#include \"Sprite3DVertex.glsl\";\r\n\r\n#include \"VertexCommon.glsl\";\r\n\r\n#ifdef UV\r\nvarying vec2 v_Texcoord0;\r\n#endif // UV\r\n\r\n#ifdef COLOR\r\nvarying vec4 v_VertexColor;\r\n#endif // COLOR\r\n\r\nvoid main()\r\n{\r\n    Vertex vertex;\r\n    getVertexParams(vertex);\r\n\r\n#ifdef UV\r\n    v_Texcoord0 = transformUV(vertex.texCoord0, u_TilingOffset);\r\n#endif // UV\r\n\r\n#ifdef COLOR\r\n    v_VertexColor = vertex.vertexColor;\r\n#endif // COLOR\r\n\r\n    mat4 worldMat = getWorldMatrix();\r\n    vec4 pos = (worldMat * vec4(vertex.positionOS, 1.0));\r\n    vec3 positionWS = pos.xyz / pos.w;\r\n\r\n    gl_Position = getPositionCS(positionWS);\r\n\r\n    gl_Position = remapPositionZ(gl_Position);\r\n\r\n#ifdef FOG\r\n    FogHandle(gl_Position.z);\r\n#endif\r\n}\r\n","#define SHADER_NAME DepthVS\r\n\r\n#include \"DepthVertex.glsl\";\r\n\r\nvoid main()\r\n{\r\n    Vertex vertex;\r\n    getVertexParams(vertex);\r\n\r\n    mat4 worldMat = getWorldMatrix();\r\n    vec4 pos = (worldMat * vec4(vertex.positionOS, 1.0));\r\n    vec3 positionWS = pos.xyz / pos.w;\r\n\r\n    mat4 normalMat = transpose(inverse(worldMat));\r\n    vec3 normalWS = normalize((normalMat * vec4(vertex.normalOS, 0.0)).xyz);\r\n\r\n    vec4 positionCS = DepthPositionCS(positionWS, normalWS);\r\n    gl_Position = remapPositionZ(positionCS);\r\n}","#define SHADER_NAME DepthFS\r\n\r\n#include \"DepthFrag.glsl\";\r\n\r\nvoid main()\r\n{\r\n    gl_FragColor = getDepthColor();\r\n}","import UnlitVS from \"./Unlit.vs\";\r\nimport UnlitFS from \"./Unlit.fs\";\r\nimport DepthVS from \"../depth/Depth.vs\";\r\nimport DepthFS from \"../depth/Depth.fs\";\r\nimport { Shader3D } from \"../../../RenderEngine/RenderShader/Shader3D\";\r\nimport { ShaderDataType } from \"../../../RenderEngine/RenderShader/ShaderData\";\r\nimport { Color } from \"../../../maths/Color\";\r\nimport { Vector4 } from \"../../../maths/Vector4\";\r\nimport { SubShader } from \"../../../RenderEngine/RenderShader/SubShader\";\r\n\r\n\r\nexport class UnlitShaderInit {\r\n\r\n    static init() {\r\n\r\n        let uniformMap = {\r\n            \"UnlitBlock\": {\r\n                \"u_AlbedoColor\": ShaderDataType.Color,\r\n                \"u_TilingOffset\": ShaderDataType.Vector4,\r\n            },\r\n            \"u_AlbedoTexture\": ShaderDataType.Texture2D,\r\n            \"u_AlphaTestValue\": ShaderDataType.Float,\r\n        };\r\n\r\n        let defaultValue = {\r\n            \"u_AlbedoColor\": Color.WHITE,\r\n            \"u_TilingOffset\": new Vector4(1, 1, 0, 0),\r\n            \"u_AlphaTestValue\": 0.5\r\n        }\r\n\r\n        let shader = Shader3D.add(\"Unlit\", true, false);\r\n        let subShader = new SubShader(SubShader.DefaultAttributeMap, uniformMap, defaultValue);\r\n        shader.addSubShader(subShader);\r\n        let forwardPass = subShader.addShaderPass(UnlitVS, UnlitFS);\r\n        let shadowPass = subShader.addShaderPass(DepthVS, DepthFS, \"ShadowCaster\");\r\n    }\r\n}","\r\n#define SHADER_NAME UNLITFS\r\n\r\n#include \"Color.glsl\";\r\n\r\n#include \"Scene.glsl\";\r\n#include \"SceneFog.glsl\";\r\n\r\n#include \"Camera.glsl\";\r\n#include \"Sprite3DFrag.glsl\";\r\n\r\n#ifdef UV\r\nvarying vec2 v_Texcoord0;\r\n#endif // UV\r\n\r\n#ifdef COLOR\r\nvarying vec4 v_VertexColor;\r\n#endif // COLOR\r\n\r\nvoid main()\r\n{\r\n    vec3 color = u_AlbedoColor.rgb;\r\n    float alpha = u_AlbedoColor.a;\r\n\r\n#ifdef COLOR\r\n    #ifdef ENABLEVERTEXCOLOR\r\n    vec4 vertexColor = v_VertexColor;\r\n    color *= vertexColor.rgb;\r\n    alpha *= vertexColor.a;\r\n    #endif // ENABLEVERTEXCOLOR\r\n#endif // COLOR\r\n\r\n#ifdef UV\r\n    vec2 uv = v_Texcoord0;\r\n\r\n    #ifdef ALBEDOTEXTURE\r\n    vec4 albedoSampler = texture2D(u_AlbedoTexture, uv);\r\n\r\n\t#ifdef Gamma_u_AlbedoTexture\r\n    albedoSampler = gammaToLinear(albedoSampler);\r\n\t#endif // Gamma_u_AlbedoTexture\r\n\r\n    color *= albedoSampler.rgb;\r\n    alpha *= albedoSampler.a;\r\n    #endif // ALBEDOTEXTURE\r\n#endif // UV\r\n\r\n#ifdef ALPHATEST\r\n    if (alpha < u_AlphaTestValue)\r\n\tdiscard;\r\n#endif // ALPHATEST\r\n\r\n#ifdef FOG\r\n    color = scenUnlitFog(color);\r\n#endif // FOG\r\n\r\n    gl_FragColor = vec4(color, alpha);\r\n\r\n    gl_FragColor = outputTransform(gl_FragColor);\r\n}","import { Shader3D } from \"../../../RenderEngine/RenderShader/Shader3D\";\r\nimport { ShaderDataType } from \"../../../RenderEngine/RenderShader/ShaderData\";\r\nimport BlinnPhongCommonGLSL from \"./BlinnPhongCommon.glsl\";\r\nimport BlinnPhongVertexGLSL from \"./BlinnPhongVertex.glsl\";\r\nimport BlinnPhongFragGLSL from \"./BlinnPhongFrag.glsl\";\r\nimport BlinnPhongVS from \"./BlinnPhong.vs\";\r\nimport BlinnPhongFS from \"./BlinnPhong.fs\";\r\nimport DepthVS from \"../depth/Depth.vs\";\r\nimport DepthFS from \"../depth/Depth.fs\";\r\nimport DepthNormalVS from \"./BlinnPhongDepthNormal.vs\";\r\nimport DepthNormalFS from \"./BlinnPhongDepthNormal.fs\";\r\nimport { Color } from \"../../../maths/Color\";\r\nimport { Vector4 } from \"../../../maths/Vector4\";\r\nimport { SubShader } from \"../../../RenderEngine/RenderShader/SubShader\";\r\n\r\nexport class BlinnPhongShaderInit {\r\n\r\n    static init() {\r\n\r\n        Shader3D.addInclude(\"BlinnPhongCommon.glsl\", BlinnPhongCommonGLSL);\r\n        Shader3D.addInclude(\"BlinnPhongVertex.glsl\", BlinnPhongVertexGLSL);\r\n        Shader3D.addInclude(\"BlinnPhongFrag.glsl\", BlinnPhongFragGLSL);\r\n\r\n        let uniformMap = {\r\n            \"u_AlphaTestValue\": ShaderDataType.Float,\r\n            \"u_TilingOffset\": ShaderDataType.Vector4,\r\n\r\n            \"u_DiffuseColor\": ShaderDataType.Color,\r\n            \"u_DiffuseTexture\": ShaderDataType.Texture2D,\r\n            \"u_AlbedoIntensity\": ShaderDataType.Float,\r\n\r\n            \"u_MaterialSpecular\": ShaderDataType.Color,\r\n            \"u_SpecularTexture\": ShaderDataType.Texture2D,\r\n\r\n            \"u_Shininess\": ShaderDataType.Float,\r\n\r\n            \"u_NormalTexture\": ShaderDataType.Texture2D,\r\n        };\r\n\r\n        let defaultValue = {\r\n            \"u_AlbedoIntensity\": 1.0,\r\n            \"u_DiffuseColor\": Color.WHITE,\r\n            \"u_MaterialSpecular\": Color.WHITE,\r\n            \"u_Shininess\": 0.078125,\r\n            \"u_AlphaTestValue\": 0.5,\r\n            \"u_TilingOffset\": new Vector4(1, 1, 0, 0),\r\n        };\r\n\r\n        let shader = Shader3D.add(\"BLINNPHONG\", true, true);\r\n        let subShader = new SubShader(SubShader.DefaultAttributeMap, uniformMap, defaultValue);\r\n        shader.addSubShader(subShader);\r\n        let shadingPass = subShader.addShaderPass(BlinnPhongVS, BlinnPhongFS);\r\n        let shadowPass = subShader.addShaderPass(DepthVS, DepthFS, \"ShadowCaster\");\r\n        let depthNormal = subShader.addShaderPass(DepthNormalVS, DepthNormalFS, \"DepthNormal\");\r\n    }\r\n\r\n}","#if !defined(BlinnPhongCommon_lib)\r\n    #define BlinnPhongCommon_lib\r\n\r\n// varying\r\nvarying vec3 v_PositionWS;\r\n// todo\r\nvarying vec3 v_NormalWS;\r\nvarying vec3 v_TangentWS;\r\nvarying vec3 v_BiNormalWS;\r\n\r\n    #ifdef UV\r\nvarying vec2 v_Texcoord0;\r\n    #endif // UV\r\n\r\n    #ifdef UV1\r\n\t#ifdef LIGHTMAP\r\nvarying vec2 v_Texcoord1;\r\n\t#endif // LIGHTMAP\r\n    #endif // UV1\r\n\r\n    #ifdef COLOR\r\nvarying vec4 v_VertexColor;\r\n    #endif // COLOR\r\n\r\n// 记录顶点信息, 用于由vs向fs传递数据\r\nstruct PixelParams {\r\n    vec3 positionWS;\r\n\r\n    vec3 normalWS;\r\n    vec3 tangentWS;\r\n    vec3 biNormalWS;\r\n    mat3 TBN;\r\n\r\n    #ifdef UV\r\n    vec2 uv0;\r\n    #endif // UV\r\n\r\n    #ifdef UV1\r\n\t#ifdef LIGHTMAP\r\n    vec2 uv1;\r\n\t#endif // LIGHTMAP\r\n    #endif // UV1\r\n\r\n    #ifdef COLOR\r\n    vec4 vertexColor;\r\n    #endif // COLOR\r\n};\r\n\r\n#endif // BlinnPhongCommon_lib","#if !defined(BlinnPhongVertex_lib)\r\n    #define BlinnPhongVertex_lib\r\n\r\n    #include \"ShadingVertex.glsl\";\r\n\r\nvoid initPixelParams(inout PixelParams params, in Vertex vertex)\r\n{\r\n    shadingPixelParams(params, vertex);\r\n    sharePixelParams(params);\r\n}\r\n\r\n#endif // BlinnPhongVertex_lib","#if !defined(BlinnPhongFrag_lib)\r\n    #define BlinnPhongFrag_lib\r\n\r\n    #include \"BlinnPhongLighting.glsl\";\r\n\r\n    #include \"ShadingFrag.glsl\";\r\n\r\nvoid getPixelInfo(inout PixelInfo info, const in PixelParams pixel, const in Surface surface)\r\n{\r\n    info.positionWS = pixel.positionWS;\r\n\r\n    info.vertexNormalWS = pixel.normalWS;\r\n\r\n    #ifdef TANGENT\r\n    info.normalWS = normalize(pixel.TBN * surface.normalTS);\r\n    #else // TANGENT\r\n    info.normalWS = pixel.normalWS;\r\n    #endif // TANGENT\r\n\r\n    info.viewDir = normalize(u_CameraPos - info.positionWS);\r\n\r\n    #ifdef LIGHTMAP\r\n\t#ifdef UV1\r\n    info.lightmapUV = pixel.uv1;\r\n\t#endif // UV1\r\n    #endif // LIGHTMAP\r\n}\r\n\r\nvec3 BlinnPhongLighting(const in Surface surface, const in PixelParams pixel)\r\n{\r\n    PixelInfo info;\r\n    getPixelInfo(info, pixel, surface);\r\n\r\n    vec3 positionWS = info.positionWS;\r\n    vec3 normalWS = info.normalWS;\r\n    vec3 v = info.viewDir;\r\n\r\n    vec3 lightColor = vec3(0.0, 0.0, 0.0);\r\n\r\n    #ifdef DIRECTIONLIGHT\r\n    for (int i = 0; i < CalculateLightCount; i++)\r\n\t{\r\n\t    if (i >= DirectionCount)\r\n\t\tbreak;\r\n\t    DirectionLight directionLight = getDirectionLight(i, positionWS);\r\n\t    if (directionLight.lightMode == LightMode_Mix)\r\n\t\t{\r\n\t\t    continue;\r\n\t\t}\r\n\t    Light light = getLight(directionLight);\r\n\t    lightColor += BlinnPhongLighting(surface, light, info) * light.attenuation;\r\n\t}\r\n    #endif // DIRECTIONLIGHT\r\n\r\n    #if defined(POINTLIGHT) || defined(SPOTLIGHT)\r\n    ivec4 clusterInfo = getClusterInfo(u_View, u_Viewport, positionWS, gl_FragCoord, u_ProjectionParams);\r\n    #endif // POINTLIGHT || SPOTLIGHT\r\n\r\n    #ifdef POINTLIGHT\r\n    for (int i = 0; i < CalculateLightCount; i++)\r\n\t{\r\n\t    if (i >= clusterInfo.x)\r\n\t\tbreak;\r\n\t    PointLight pointLight = getPointLight(i, clusterInfo, positionWS);\r\n\t    if (pointLight.lightMode == LightMode_Mix)\r\n\t\t{\r\n\t\t    continue;\r\n\t\t}\r\n\t    Light light = getLight(pointLight, normalWS, positionWS);\r\n\t    lightColor += BlinnPhongLighting(surface, light, info) * light.attenuation;\r\n\t}\r\n    #endif // POINTLIGHT\r\n\r\n    #ifdef SPOTLIGHT\r\n    for (int i = 0; i < CalculateLightCount; i++)\r\n\t{\r\n\t    if (i >= clusterInfo.y)\r\n\t\tbreak;\r\n\t    SpotLight spotLight = getSpotLight(i, clusterInfo, positionWS);\r\n\t    if (spotLight.lightMode == LightMode_Mix)\r\n\t\t{\r\n\t\t    continue;\r\n\t\t}\r\n\t    Light light = getLight(spotLight, normalWS, positionWS);\r\n\t    lightColor += BlinnPhongLighting(surface, light, info) * light.attenuation;\r\n\t}\r\n    #endif // SPOTLIGHT\r\n\r\n    vec3 giColor = BlinnPhongGI(surface, info);\r\n\r\n    return lightColor + giColor;\r\n}\r\n\r\n#endif // BlinnPhongFrag_lib","#define SHADER_NAME BlinnPhongVS\r\n\r\n#include \"Math.glsl\";\r\n\r\n#include \"Scene.glsl\";\r\n#include \"SceneFogInput.glsl\";\r\n\r\n#include \"Camera.glsl\";\r\n#include \"Sprite3DVertex.glsl\";\r\n\r\n#include \"VertexCommon.glsl\";\r\n\r\n#include \"BlinnPhongVertex.glsl\";\r\n\r\nvoid main()\r\n{\r\n    Vertex vertex;\r\n    getVertexParams(vertex);\r\n\r\n    PixelParams pixel;\r\n    initPixelParams(pixel, vertex);\r\n\r\n    gl_Position = getPositionCS(pixel.positionWS);\r\n\r\n    gl_Position = remapPositionZ(gl_Position);\r\n\r\n#ifdef FOG\r\n    FogHandle(gl_Position.z);\r\n#endif\r\n}\r\n","#define SHADER_NAME BlinnPhongFS\r\n\r\n#include \"Color.glsl\";\r\n\r\n#include \"Scene.glsl\";\r\n#include \"SceneFog.glsl\";\r\n\r\n#include \"Camera.glsl\";\r\n#include \"Sprite3DFrag.glsl\";\r\n\r\n#include \"BlinnPhongFrag.glsl\";\r\n\r\nvoid getBinnPhongSurfaceParams(inout Surface surface, in PixelParams pixel)\r\n{\r\n#ifdef UV\r\n    vec2 uv = transformUV(pixel.uv0, u_TilingOffset);\r\n#else // UV\r\n    vec2 uv = vec2(0.0);\r\n#endif // UV\r\n\r\n    surface.diffuseColor = u_DiffuseColor.rgb;\r\n    surface.alpha = u_DiffuseColor.a;\r\n\r\n#ifdef COLOR\r\n    #ifdef ENABLEVERTEXCOLOR\r\n    surface.diffuseColor *= pixel.vertexColor.xyz;\r\n    surface.alpha *= pixel.vertexColor.a;\r\n    #endif // ENABLEVERTEXCOLOR\r\n#endif // COLOR\r\n\r\n#ifdef DIFFUSEMAP\r\n    vec4 diffuseSampler = texture2D(u_DiffuseTexture, uv);\r\n    #ifdef Gamma_u_DiffuseTexture\r\n    diffuseSampler = gammaToLinear(diffuseSampler);\r\n    #endif // Gamma_u_DiffuseTexture\r\n    surface.diffuseColor *= u_DiffuseColor.rgb * diffuseSampler.rgb * u_AlbedoIntensity;\r\n    surface.alpha *= diffuseSampler.a;\r\n#endif // DIFFUSEMAP\r\n\r\n    surface.diffuseColor *= u_AlbedoIntensity;\r\n\r\n    surface.normalTS = vec3(0.0, 0.0, 1.0);\r\n#ifdef NORMALMAP\r\n    vec3 normalSampler = texture2D(u_NormalTexture, uv).rgb;\r\n    normalSampler = normalize(normalSampler * 2.0 - 1.0);\r\n    normalSampler.y *= -1.0;\r\n    surface.normalTS = normalSampler;\r\n#endif // NORMALMAP\r\n\r\n#ifdef SPECULARMAP\r\n    vec4 specularSampler = texture2D(u_SpecularTexture, uv);\r\n    #ifdef Gamma_u_SpecularTexture\r\n    specularSampler = gammaToLinear(specularSampler);\r\n    #endif // Gamma_u_SpecularTexture\r\n    surface.gloss = specularSampler.rgb;\r\n#else // SPECULARMAP\r\n    #ifdef DIFFUSEMAP\r\n    surface.gloss = vec3(diffuseSampler.a);\r\n    #else // DIFFUSEMAP\r\n    surface.gloss = vec3(1.0, 1.0, 1.0);\r\n    #endif // DIFFUSEMAP\r\n#endif // SPECULARMAP\r\n    surface.specularColor = u_MaterialSpecular.rgb;\r\n    surface.shininess = u_Shininess;\r\n}\r\n\r\nvoid main()\r\n{\r\n    PixelParams pixel;\r\n    getPixelParams(pixel);\r\n\r\n    Surface surface;\r\n    getBinnPhongSurfaceParams(surface, pixel);\r\n\r\n#ifdef ALPHATEST\r\n    if (surface.alpha < u_AlphaTestValue)\r\n\t{\r\n\t    discard;\r\n\t}\r\n#endif // ALPHATEST\r\n\r\n    vec3 surfaceColor = vec3(0.0);\r\n\r\n    surfaceColor = BlinnPhongLighting(surface, pixel);\r\n\r\n#ifdef FOG\r\n    surfaceColor = sceneLitFog(surfaceColor);\r\n#endif // FOG\r\n\r\n    gl_FragColor = vec4(surfaceColor, surface.alpha);\r\n\r\n    gl_FragColor = outputTransform(gl_FragColor);\r\n}\r\n","#define SHADER_NAME BlinnPhongDephtNormalVS\r\n\r\n#include \"Math.glsl\";\r\n\r\n#include \"Camera.glsl\";\r\n\r\n#include \"Sprite3DVertex.glsl\";\r\n\r\n#include \"VertexCommon.glsl\";\r\n\r\n#include \"BlinnPhongVertex.glsl\";\r\n\r\nvarying vec4 v_PositionCS;\r\n\r\nvoid main()\r\n{\r\n    Vertex vertex;\r\n    getVertexParams(vertex);\r\n\r\n    PixelParams pixel;\r\n    initPixelParams(pixel, vertex);\r\n\r\n    vec4 positionCS = getPositionCS(pixel.positionWS);\r\n    v_PositionCS = positionCS;\r\n    gl_Position = positionCS;\r\n    gl_Position = remapPositionZ(gl_Position);\r\n}","#define SHADER_NAME BlinnPhongDephtNormalFS\r\n\r\n#include \"Color.glsl\";\r\n\r\n#include \"Scene.glsl\";\r\n\r\n#include \"Camera.glsl\";\r\n#include \"Sprite3DFrag.glsl\";\r\n\r\n#include \"ShadingFrag.glsl\";\r\n\r\n#include \"DepthNormalFrag.glsl\";\r\n\r\nvarying vec4 v_PositionCS;\r\n\r\nvoid main()\r\n{\r\n    PixelParams pixel;\r\n    getPixelParams(pixel);\r\n\r\n    vec3 normalWS = pixel.normalWS;\r\n\r\n#ifdef NORMALMAP\r\n    #ifdef UV\r\n\r\n    vec2 uv = transformUV(pixel.uv0, u_TilingOffset);\r\n    vec3 normalSampler = texture2D(u_NormalTexture, uv).rgb;\r\n    normalSampler = normalize(normalSampler * 2.0 - 1.0);\r\n    normalSampler.y *= -1.0;\r\n    vec3 normalTS = normalSampler;\r\n    normalWS = normalize(pixel.TBN * normalTS);\r\n\r\n    #endif // UV\r\n#endif // NORMALMAP\r\n\r\n    vec4 positionCS = v_PositionCS;\r\n\r\n    vec4 dephtNormal = encodeDepthNormal(positionCS, normalWS);\r\n\r\n    gl_FragColor = dephtNormal;\r\n}","import { Shader3D } from \"../../../RenderEngine/RenderShader/Shader3D\"\r\nimport { ShaderDataType } from \"../../../RenderEngine/RenderShader/ShaderData\"\r\nimport { VertexTrail } from \"../../core/trail/VertexTrail\";\r\nimport TrailVS from \"./Trail.vs\";\r\nimport TrailFS from \"./Trail.fs\";\r\nimport { Color } from \"../../../maths/Color\";\r\nimport { Vector4 } from \"../../../maths/Vector4\";\r\nimport { SubShader } from \"../../../RenderEngine/RenderShader/SubShader\";\r\nexport class TrailShaderInit {\r\n    static init() {\r\n        let attributeMap: { [name: string]: [number, ShaderDataType] } = {\r\n            'a_Position': [VertexTrail.TRAIL_POSITION0, ShaderDataType.Vector4],\r\n            'a_OffsetVector': [VertexTrail.TRAIL_OFFSETVECTOR, ShaderDataType.Vector3],\r\n            'a_Texcoord0X': [VertexTrail.TRAIL_TEXTURECOORDINATE0X, ShaderDataType.Float],\r\n            'a_Texcoord0Y': [VertexTrail.TRAIL_TEXTURECOORDINATE0Y, ShaderDataType.Float],\r\n            'a_BirthTime': [VertexTrail.TRAIL_TIME0, ShaderDataType.Float],\r\n            'a_Color': [VertexTrail.TRAIL_COLOR, ShaderDataType.Vector4],\r\n        };\r\n\r\n        let uniformMap = {\r\n            \"u_TilingOffset\": ShaderDataType.Vector4,\r\n            \"u_MainTexture\": ShaderDataType.Texture2D,\r\n            \"u_MainColor\": ShaderDataType.Color,\r\n        };\r\n\r\n        let defaultValue = {\r\n            \"u_MainColor\": Color.WHITE,\r\n            \"u_TilingOffset\": new Vector4(1, 1, 0, 0),\r\n        };\r\n\r\n        let shader = Shader3D.add(\"Trail\", false, false);\r\n        let subShader = new SubShader(attributeMap, uniformMap, defaultValue);\r\n        shader.addSubShader(subShader);\r\n        let forwardPass = subShader.addShaderPass(TrailVS, TrailFS);\r\n    }\r\n}","#define SHADER_NAME TrailVS\r\n\r\n#include \"Camera.glsl\";\r\n#include \"Scene.glsl\"\r\n#include \"SceneFogInput.glsl\"\r\n\r\n// Sprite uniform\r\nuniform float u_CurTime;\r\nuniform float u_LifeTime;\r\nuniform vec4 u_WidthCurve[10];\r\nuniform int u_WidthCurveKeyLength;\r\n\r\nvarying vec2 v_Texcoord0;\r\nvarying vec4 v_Color;\r\n\r\nfloat hermiteInterpolate(float t, float outTangent, float inTangent, float duration, float value1, float value2)\r\n{\r\n    float t2 = t * t;\r\n    float t3 = t2 * t;\r\n    float a = 2.0 * t3 - 3.0 * t2 + 1.0;\r\n    float b = t3 - 2.0 * t2 + t;\r\n    float c = t3 - t2;\r\n    float d = -2.0 * t3 + 3.0 * t2;\r\n    return a * value1 + b * outTangent * duration + c * inTangent * duration + d * value2;\r\n}\r\n\r\nfloat getCurWidth(in float normalizeTime)\r\n{\r\n    float width;\r\n    if (normalizeTime == 0.0)\r\n\t{\r\n\t    width = u_WidthCurve[0].w;\r\n\t}\r\n    else if (normalizeTime >= 1.0)\r\n\t{\r\n\t    width = u_WidthCurve[u_WidthCurveKeyLength - 1].w;\r\n\t}\r\n    else\r\n\t{\r\n\t    for (int i = 0; i < 10; i++)\r\n\t\t{\r\n\t\t    if (normalizeTime == u_WidthCurve[i].x)\r\n\t\t\t{\r\n\t\t\t    width = u_WidthCurve[i].w;\r\n\t\t\t    break;\r\n\t\t\t}\r\n\r\n\t\t    vec4 lastFrame = u_WidthCurve[i];\r\n\t\t    vec4 nextFrame = u_WidthCurve[i + 1];\r\n\t\t    if (normalizeTime > lastFrame.x && normalizeTime < nextFrame.x)\r\n\t\t\t{\r\n\t\t\t    float duration = nextFrame.x - lastFrame.x;\r\n\t\t\t    float t = (normalizeTime - lastFrame.x) / duration;\r\n\t\t\t    float outTangent = lastFrame.z;\r\n\t\t\t    float inTangent = nextFrame.y;\r\n\t\t\t    float value1 = lastFrame.w;\r\n\t\t\t    float value2 = nextFrame.w;\r\n\t\t\t    width = hermiteInterpolate(t, outTangent, inTangent, duration, value1, value2);\r\n\t\t\t    break;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n    return width;\r\n}\r\n\r\nvoid main()\r\n{\r\n    float normalizeTime = (u_CurTime - a_BirthTime) / u_LifeTime;\r\n\r\n    v_Texcoord0 = vec2(a_Texcoord0X, 1.0 - a_Texcoord0Y) * u_TilingOffset.xy + u_TilingOffset.zw;\r\n\r\n    v_Color = a_Color;\r\n\r\n    vec3 cameraPos = (u_View * a_Position).rgb;\r\n    gl_Position = u_Projection * vec4(cameraPos + a_OffsetVector * getCurWidth(normalizeTime), 1.0);\r\n\r\n    gl_Position = remapPositionZ(gl_Position);\r\n\t#ifdef FOG\r\n        FogHandle(gl_Position.z);\r\n    #endif\r\n}","#define SHADER_NAME TrailFS\r\n\r\n#include \"Color.glsl\";\r\n#include \"Scene.glsl\";\r\n#include \"SceneFog.glsl\";\r\n\r\nvarying vec2 v_Texcoord0;\r\nvarying vec4 v_Color;\r\n\r\nvoid main()\r\n{\r\n    vec4 color = 2.0 * u_MainColor * v_Color;\r\n#ifdef MAINTEXTURE\r\n    vec4 mainTextureColor = texture2D(u_MainTexture, v_Texcoord0);\r\n    #ifdef Gamma_u_MainTexture\r\n    mainTextureColor = gammaToLinear(mainTextureColor);\r\n    #endif // Gamma_u_MainTexture\r\n\r\n    color *= mainTextureColor;\r\n#endif\r\n\r\n#ifdef FOG\r\n    color.xyz = scenUnlitFog(color.xyz);\r\n#endif // FOG\r\n    gl_FragColor = color;\r\n\r\n    gl_FragColor = outputTransform(gl_FragColor);\r\n}\r\n","import { Shader3D } from \"../../../RenderEngine/RenderShader/Shader3D\";\r\nimport { ShaderDataType } from \"../../../RenderEngine/RenderShader/ShaderData\";\r\n\r\nimport PBRStandardVS from \"./pbrStandard.vs\";\r\nimport PBRStandardFS from \"./pbrStandard.fs\";\r\n\r\nimport DepthVS from \"../depth/Depth.vs\";\r\nimport DepthFS from \"../depth/Depth.fs\";\r\n\r\nimport DepthNormalVS from \"./PBRStandardDepthNormal.vs\";\r\nimport DepthNormalFS from \"./PBRStandardDepthNormal.fs\";\r\n\r\nimport { Color } from \"../../../maths/Color\";\r\nimport { Vector4 } from \"../../../maths/Vector4\";\r\nimport { SubShader } from \"../../../RenderEngine/RenderShader/SubShader\";\r\n\r\n\r\nexport class PBRStandardShaderInit {\r\n\r\n    static init() {\r\n\r\n        let uniformMap = {\r\n            \"u_AlbedoColor\": ShaderDataType.Color,\r\n            \"u_TilingOffset\": ShaderDataType.Vector4,\r\n            \"u_NormalScale\": ShaderDataType.Float,\r\n            \"u_Metallic\": ShaderDataType.Float,\r\n            \"u_Smoothness\": ShaderDataType.Float,\r\n            \"u_OcclusionStrength\": ShaderDataType.Float,\r\n            \"u_AlphaTestValue\": ShaderDataType.Float,\r\n            \"u_EmissionColor\": ShaderDataType.Color,\r\n            \"u_EmissionIntensity\": ShaderDataType.Float,\r\n            \"u_AlbedoTexture\": ShaderDataType.Texture2D,\r\n            \"u_NormalTexture\": ShaderDataType.Texture2D,\r\n            \"u_OcclusionTexture\": ShaderDataType.Texture2D,\r\n            \"u_EmissionTexture\": ShaderDataType.Texture2D,\r\n            \"u_MetallicGlossTexture\": ShaderDataType.Texture2D,\r\n            // anisotrioy\r\n            \"u_AnisotropyStrength\": ShaderDataType.Float,\r\n            \"u_AnisotropyTexture\": ShaderDataType.Texture2D,\r\n            \"u_AnisotropyRotation\": ShaderDataType.Float,\r\n            // clear coat\r\n            \"u_ClearCoatFactor\": ShaderDataType.Float,\r\n            \"u_ClearCoatTexture\": ShaderDataType.Texture2D,\r\n            \"u_ClearCoatRoughness\": ShaderDataType.Float,\r\n            \"u_ClearCoatRoughnessTexture\": ShaderDataType.Texture2D,\r\n            \"u_ClearCoatNormalTexture\": ShaderDataType.Texture2D,\r\n            //detail \r\n            \"u_DetailAlbedoTexture\": ShaderDataType.Texture2D,\r\n            \"u_DetailNormalTexture\": ShaderDataType.Texture2D,\r\n            \"u_DetailNormalScale\": ShaderDataType.Float,\r\n            \"u_DetailTillingOffset\": ShaderDataType.Vector4\r\n        };\r\n\r\n        let defaultValue = {\r\n            \"u_AlbedoColor\": Color.WHITE,\r\n            \"u_TilingOffset\": new Vector4(1, 1, 0, 0),\r\n            \"u_DetailTillingOffset\": new Vector4(1, 1, 0, 0),\r\n            \"u_NormalScale\": 1,\r\n            \"u_DetailNormalScale\": 1,\r\n            \"u_Metallic\": 0,\r\n            \"u_Smoothness\": 0.5,\r\n            \"u_OcclusionStrength\": 1,\r\n            \"u_EmissionColor\": Color.WHITE,\r\n            \"u_EmissionIntensity\": 1,\r\n            \"u_AlphaTestValue\": 0.5,\r\n            // anisotrioy\r\n            \"u_AnisotropyStrength\": 0,\r\n            \"u_AnisotropyRotation\": 0,\r\n            // clear coat\r\n            \"u_ClearCoatFactor\": 0,\r\n            \"u_ClearCoatRoughness\": 0,\r\n        };\r\n\r\n        let shader = Shader3D.add(\"PBR\", true, true);\r\n        let subShader = new SubShader(SubShader.DefaultAttributeMap, uniformMap, defaultValue);\r\n        shader.addSubShader(subShader);\r\n        let shadingPass = subShader.addShaderPass(PBRStandardVS, PBRStandardFS);\r\n        let shadowPass = subShader.addShaderPass(DepthVS, DepthFS, \"ShadowCaster\");\r\n        let depthNormal = subShader.addShaderPass(DepthNormalVS, DepthNormalFS, \"DepthNormal\");\r\n    }\r\n\r\n}","#define SHADER_NAME PBRStandardVS\r\n\r\n#include \"Math.glsl\";\r\n\r\n#include \"Scene.glsl\";\r\n#include \"SceneFogInput.glsl\";\r\n\r\n#include \"Camera.glsl\";\r\n#include \"Sprite3DVertex.glsl\";\r\n\r\n#include \"VertexCommon.glsl\";\r\n\r\n#include \"PBRVertex.glsl\";\r\n\r\n#if defined(DETAILTEXTURE) || defined(DETAILNORMAL)\r\nvarying vec2 v_DetailUV;\r\n#endif\r\n\r\nvoid main()\r\n{\r\n    Vertex vertex;\r\n    getVertexParams(vertex);\r\n\r\n    PixelParams pixel;\r\n    initPixelParams(pixel, vertex);\r\n\r\n#if defined(DETAILTEXTURE) || defined(DETAILNORMAL)\r\n    #ifdef UV\r\n    v_DetailUV = transformUV(vertex.texCoord0, u_DetailTillingOffset);\r\n    #else // UV\r\n    v_DetailUV = vec2(0.0);\r\n    #endif\r\n#endif\r\n\r\n    gl_Position = getPositionCS(pixel.positionWS);\r\n\r\n    gl_Position = remapPositionZ(gl_Position);\r\n\r\n#ifdef FOG\r\n    FogHandle(gl_Position.z);\r\n#endif\r\n}","#define SHADER_NAME PBRStandardFS\r\n\r\n#include \"Color.glsl\";\r\n\r\n#include \"Scene.glsl\";\r\n#include \"SceneFog.glsl\";\r\n\r\n#include \"Camera.glsl\";\r\n#include \"Sprite3DFrag.glsl\";\r\n\r\n#include \"PBRMetallicFrag.glsl\";\r\n\r\n#if defined(DETAILTEXTURE) || defined(DETAILNORMAL)\r\nvarying vec2 v_DetailUV;\r\n    #define ColorSpaceDouble vec3(4.59479380, 4.59479380, 4.59479380);\r\nvec3 BlendNormals(vec3 n1, vec3 n2)\r\n{\r\n    return normalize(vec3(n1.xy + n2.xy, n1.z * n2.z));\r\n}\r\n#endif // DETAILTEXTURE || DETAILNORMAL\r\n\r\nvoid initSurfaceInputs(inout SurfaceInputs inputs, const in PixelParams pixel)\r\n{\r\n#ifdef UV\r\n    vec2 uv = transformUV(pixel.uv0, u_TilingOffset);\r\n#else // UV\r\n    vec2 uv = vec2(0.0);\r\n#endif // UV\r\n\r\n    inputs.diffuseColor = u_AlbedoColor.rgb;\r\n    inputs.alpha = u_AlbedoColor.a;\r\n\r\n#ifdef COLOR\r\n    #ifdef ENABLEVERTEXCOLOR\r\n    inputs.diffuseColor *= pixel.vertexColor.xyz;\r\n    inputs.alpha *= pixel.vertexColor.a;\r\n    #endif // ENABLEVERTEXCOLOR\r\n#endif // COLOR\r\n\r\n    inputs.alphaTest = u_AlphaTestValue;\r\n\r\n#ifdef ALBEDOTEXTURE\r\n    vec4 albedoSampler = texture2D(u_AlbedoTexture, uv);\r\n    #ifdef Gamma_u_AlbedoTexture\r\n    albedoSampler = gammaToLinear(albedoSampler);\r\n    #endif // Gamma_u_AlbedoTexture\r\n    inputs.diffuseColor *= albedoSampler.rgb;\r\n    inputs.alpha *= albedoSampler.a;\r\n#endif // ALBEDOTEXTURE\r\n\r\n// Detail Albedo\r\n#ifdef DETAILTEXTURE\r\n    vec3 detailSampler = texture2D(u_DetailAlbedoTexture, v_DetailUV).rgb;\r\n    #ifdef Gamma_u_DetailAlbedoTexture\r\n    detailSampler = gammaToLinear(detailSampler);\r\n    #endif // Gamma_u_DetailAlbedoTexture\r\n    detailSampler *= ColorSpaceDouble;\r\n    inputs.diffuseColor *= detailSampler;\r\n#endif\r\n\r\n    inputs.normalTS = vec3(0.0, 0.0, 1.0);\r\n#ifdef NORMALTEXTURE\r\n    vec3 normalSampler = texture2D(u_NormalTexture, uv).rgb;\r\n    normalSampler = normalize(normalSampler * 2.0 - 1.0);\r\n    normalSampler.y *= -1.0;\r\n    inputs.normalTS = normalScale(normalSampler, u_NormalScale);\r\n#endif\r\n\r\n#ifdef DETAILNORMAL\r\n    vec3 detailnormalSampler = texture2D(u_DetailNormalTexture, v_DetailUV).rgb;\r\n    detailnormalSampler = normalize(detailnormalSampler * 2.0 - 1.0);\r\n    detailnormalSampler.y *= -1.0;\r\n    detailnormalSampler = normalScale(detailnormalSampler, u_DetailNormalScale);\r\n    inputs.normalTS = BlendNormals(inputs.normalTS, detailnormalSampler);\r\n#endif\r\n\r\n    inputs.metallic = u_Metallic;\r\n    inputs.smoothness = u_Smoothness;\r\n\r\n#ifdef METALLICGLOSSTEXTURE\r\n\r\n    vec4 metallicSampler = texture2D(u_MetallicGlossTexture, uv);\r\n    #ifdef Gamma_u_MetallicGlossTexture\r\n    metallicSampler = gammaToLinear(metallicSampler);\r\n    #endif // Gamma_u_MetallicGlossTexture\r\n\r\n    inputs.metallic = metallicSampler.x;\r\n\r\n    #ifdef SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA\r\n\t#ifdef ALBEDOTEXTURE\r\n    inputs.smoothness = (albedoSampler.a * u_Smoothness);\r\n\t#endif // ALBEDOTEXTURE\r\n    #else // SMOOTHNESSSOURCE_METALLICTEXTURE_ALPHA\r\n    inputs.smoothness = (metallicSampler.a * u_Smoothness);\r\n    #endif // SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA\r\n\r\n#endif // METALLICGLOSSTEXTURE\r\n\r\n    inputs.occlusion = 1.0;\r\n#ifdef OCCLUSIONTEXTURE\r\n    vec4 occlusionSampler = texture2D(u_OcclusionTexture, uv);\r\n    #ifdef Gamma_u_OcclusionTexture\r\n    occlusionSampler = gammaToLinear(occlusionSampler);\r\n    #endif // Gamma_u_OcclusionTexture\r\n\r\n    float occlusion = occlusionSampler.g;\r\n    inputs.occlusion = (1.0 - u_OcclusionStrength) + occlusion * u_OcclusionStrength;\r\n#endif // OCCLUSIONTEXTURE\r\n\r\n    inputs.emissionColor = vec3(0.0);\r\n#ifdef EMISSION\r\n    inputs.emissionColor = u_EmissionColor.rgb * u_EmissionIntensity;\r\n    #ifdef EMISSIONTEXTURE\r\n    vec4 emissionSampler = texture2D(u_EmissionTexture, uv);\r\n\t#ifdef Gamma_u_EmissionTexture\r\n    emissionSampler = gammaToLinear(emissionSampler);\r\n\t#endif // Gamma_u_EmissionTexture\r\n    inputs.emissionColor *= emissionSampler.rgb;\r\n    #endif // EMISSIONTEXTURE\r\n#endif // EMISSION\r\n\r\n#ifdef CLEARCOAT\r\n    inputs.clearCoat = u_ClearCoatFactor;\r\n    inputs.clearCoatRoughness = u_ClearCoatRoughness;\r\n\r\n    #ifdef CLEARCOATMAP\r\n    // todo\r\n    // linear tex no need gamma\r\n    vec4 clearCoatSampler = texture2D(u_ClearCoatTexture, uv);\r\n    inputs.clearCoat *= clearCoatSampler.r;\r\n    #endif // CLEARCOATMAP\r\n\r\n    #ifdef CLEARCOAT_ROUGHNESSMAP\r\n    // todo\r\n    // linear tex no need gamma\r\n    vec4 clearcoatSampleRoughness = texture2D(u_ClearCoatRoughnessTexture, uv);\r\n    inputs.clearCoatRoughness *= clearcoatSampleRoughness.g;\r\n    #endif // CLEARCOAT_ROUGHNESSMAP\r\n\r\n    #ifdef CLEARCOAT_NORMAL\r\n    vec3 clearCoatNormalSampler = texture2D(u_ClearCoatNormalTexture, uv).rgb;\r\n    clearCoatNormalSampler = normalize(clearCoatNormalSampler * 2.0 - 1.0);\r\n    clearCoatNormalSampler.y *= -1.0;\r\n    inputs.clearCoatNormalTS = clearCoatNormalSampler;\r\n    #endif // CLEARCOAT_NORMAL\r\n#endif // CLEARCOAT\r\n\r\n#ifdef ANISOTROPIC\r\n    inputs.anisotropy = u_AnisotropyStrength;\r\n    vec2 direction = vec2(1.0, 0.0);\r\n\r\n    #ifdef ANISOTROPYMAP\r\n    vec3 anisotropySampler = texture2D(u_AnisotropyTexture, uv).rgb;\r\n\r\n    inputs.anisotropy *= anisotropySampler.b;\r\n    direction = anisotropySampler.xy * 2.0 - 1.0;\r\n    #endif // ANISOTROPYMAP\r\n\r\n    vec2 anisotropyRotation = vec2(cos(u_AnisotropyRotation), sin(u_AnisotropyRotation));\r\n    mat2 rotationMatrix = mat2(anisotropyRotation.x, anisotropyRotation.y, -anisotropyRotation.y, anisotropyRotation.x);\r\n    inputs.anisotropyDirection = rotationMatrix * direction;\r\n\r\n#endif // ANISOTROPIC\r\n}\r\n\r\nvoid main()\r\n{\r\n    PixelParams pixel;\r\n    getPixelParams(pixel);\r\n\r\n    SurfaceInputs inputs;\r\n    initSurfaceInputs(inputs, pixel);\r\n\r\n    vec4 surfaceColor = PBR_Metallic_Flow(inputs, pixel);\r\n\r\n#ifdef FOG\r\n    surfaceColor.rgb = sceneLitFog(surfaceColor.rgb);\r\n#endif // FOG\r\n\r\n    gl_FragColor = surfaceColor;\r\n\r\n    gl_FragColor = outputTransform(gl_FragColor);\r\n}","#define SHADER_NAME PBRStandardDepthNormalVS\r\n\r\n#include \"Math.glsl\";\r\n\r\n#include \"Camera.glsl\";\r\n\r\n#include \"Sprite3DVertex.glsl\";\r\n\r\n#include \"VertexCommon.glsl\";\r\n\r\n#include \"PBRVertex.glsl\";\r\n\r\nvarying vec4 v_PositionCS;\r\n\r\nvoid main()\r\n{\r\n    Vertex vertex;\r\n    getVertexParams(vertex);\r\n\r\n    PixelParams pixel;\r\n    initPixelParams(pixel, vertex);\r\n\r\n    sharePixelParams(pixel);\r\n\r\n    vec4 positionCS = getPositionCS(pixel.positionWS);\r\n    v_PositionCS = positionCS;\r\n    gl_Position = positionCS;\r\n    gl_Position = remapPositionZ(gl_Position);\r\n}","#define SHADER_NAME PBRStandardDepthNormalFS\r\n\r\n#include \"Color.glsl\";\r\n\r\n#include \"Scene.glsl\";\r\n\r\n#include \"Camera.glsl\";\r\n#include \"Sprite3DFrag.glsl\";\r\n\r\n#include \"ShadingFrag.glsl\";\r\n\r\n#include \"DepthNormalFrag.glsl\";\r\n\r\nvarying vec4 v_PositionCS;\r\n\r\nvoid main()\r\n{\r\n    PixelParams pixel;\r\n    getPixelParams(pixel);\r\n\r\n    vec3 normalWS = pixel.normalWS;\r\n\r\n#ifdef NORMALTEXTURE\r\n    #ifdef UV\r\n\r\n    vec2 uv = transformUV(pixel.uv0, u_TilingOffset);\r\n    vec3 normalSampler = texture2D(u_NormalTexture, uv).rgb;\r\n    normalSampler = normalize(normalSampler * 2.0 - 1.0);\r\n    normalSampler.y *= -1.0;\r\n    vec3 normalTS = normalScale(normalSampler, u_NormalScale);\r\n    normalWS = normalize(pixel.TBN * normalTS);\r\n\r\n    #endif // UV\r\n#endif // NORMALTEXTURE\r\n\r\n    vec4 positionCS = v_PositionCS;\r\n\r\n    vec4 dephtNormal = encodeDepthNormal(positionCS, normalWS);\r\n\r\n    gl_FragColor = dephtNormal;\r\n}","import { Shader3D } from \"../../../RenderEngine/RenderShader/Shader3D\";\r\nimport { ShaderDataType } from \"../../../RenderEngine/RenderShader/ShaderData\";\r\nimport SkyboxVS from \"./SkyBox.vs\";\r\nimport SkyboxFS from \"./SkyBox.fs\";\r\nimport { Color } from \"../../../maths/Color\";\r\nimport { AttributeMapType, SubShader } from \"../../../RenderEngine/RenderShader/SubShader\";\r\nimport { RenderState } from \"../../../RenderEngine/RenderShader/RenderState\";\r\nimport { VertexMesh } from \"../../../RenderEngine/RenderShader/VertexMesh\";\r\nimport { CullMode } from \"../../../RenderEngine/RenderEnum/CullMode\";\r\n\r\nexport class SkyBoxShaderInit {\r\n\r\n    static init() {\r\n\r\n        let attributeMap: AttributeMapType = {\r\n            \"a_Position\": [VertexMesh.MESH_POSITION0, ShaderDataType.Vector4]\r\n        };\r\n\r\n        let uniformMap = {\r\n            \"u_TintColor\": ShaderDataType.Color,\r\n            \"u_Exposure\": ShaderDataType.Float,\r\n            \"u_Rotation\": ShaderDataType.Float,\r\n            \"u_CubeTexture\": ShaderDataType.TextureCube\r\n        };\r\n\r\n        let defaultValue = {\r\n            \"u_TintColor\": new Color(0.5, 0.5, 0.5, 0.5),\r\n            \"u_Exposure\": 1,\r\n            \"u_Rotation\": 0\r\n        };\r\n\r\n        let shader = Shader3D.add(\"SkyBox\");\r\n        let subShader = new SubShader(attributeMap, uniformMap, defaultValue);\r\n        shader.addSubShader(subShader);\r\n        let pass = subShader.addShaderPass(SkyboxVS, SkyboxFS);\r\n        pass.renderState.depthTest = RenderState.DEPTHTEST_LEQUAL;\r\n        pass.renderState.cull = CullMode.Back;\r\n        pass.statefirst = true;\r\n\r\n\r\n    }\r\n\r\n}","#define SHADER_NAME SkyBoxVS\r\n\r\n#include \"Camera.glsl\";\r\n\r\nconst float c_deg2ang = 3.141593 / 180.0;\r\n\r\nvec4 rotateAroundYInDegrees(vec4 vertex, float deg)\r\n{\r\n    float angle = deg * c_deg2ang;\r\n    float sina = sin(angle);\r\n    float cosa = cos(angle);\r\n    mat2 m = mat2(cosa, -sina, sina, cosa);\r\n    return vec4(m * vertex.xz, vertex.yw).xzyw;\r\n}\r\n\r\nvec4 remapSkyPositionZ(in vec4 position)\r\n{\r\n    position.z = position.w;\r\n    return position;\r\n}\r\n\r\nvarying vec3 v_Texcoord;\r\n\r\nvoid main()\r\n{\r\n    // todo 这个转换 ？\r\n    v_Texcoord = vec3(-a_Position.x, a_Position.yz); //转换坐标系\r\n\r\n    vec4 position = rotateAroundYInDegrees(a_Position, u_Rotation);\r\n    // gl_Position = getPositionCS(position.xyz);\r\n\r\n    gl_Position = u_ViewProjection * position;\r\n\r\n    gl_Position = remapSkyPositionZ(gl_Position);\r\n}","#define SHADER_NAME SkyBoxFS\r\n\r\n#include \"Color.glsl\";\r\n\r\nvarying vec3 v_Texcoord;\r\n\r\nconst vec4 c_ColorSpace = vec4(4.59479380, 4.59479380, 4.59479380, 2.0);\r\n\r\nvoid main()\r\n{\r\n    vec3 uv = v_Texcoord;\r\n    vec4 cubeSampler = textureCube(u_CubeTexture, uv);\r\n#ifdef Gamma_u_CubeTexture\r\n    cubeSampler = gammaToLinear(cubeSampler);\r\n#endif // Gamma_u_CubeTexture\r\n\r\n    vec3 color = cubeSampler.rgb * u_TintColor.rgb * u_Exposure * c_ColorSpace.rgb;\r\n\r\n    gl_FragColor = vec4(color, 1.0);\r\n\r\n    gl_FragColor = outputTransform(gl_FragColor);\r\n}","import { Shader3D } from \"../../../RenderEngine/RenderShader/Shader3D\";\r\nimport { ShaderDataType } from \"../../../RenderEngine/RenderShader/ShaderData\";\r\nimport { VertexShuriKenParticle } from \"../../graphics/Vertex/VertexShuriKenParticle\";\r\nimport ShurikenVS from \"./particleShuriKen.vs\";\r\nimport ShurikenFS from \"./particleShuriKen.fs\";\r\nimport MathGradient from \"./MathGradient.glsl\";\r\nimport ParticleSpriteVS from \"./particleShuriKenSpriteVS.glsl\";\r\nimport { Color } from \"../../../maths/Color\";\r\nimport { Vector4 } from \"../../../maths/Vector4\";\r\nimport { SubShader } from \"../../../RenderEngine/RenderShader/SubShader\";\r\n/**\r\n * ParticleShuriKen Shader init\r\n */\r\nexport class ParticleShuriKenShaderInit{\r\n    static init(){\r\n        \r\n        Shader3D.addInclude(\"MathGradient.glsl\", MathGradient);\r\n        Shader3D.addInclude(\"particleShuriKenSpriteVS.glsl\", ParticleSpriteVS);\r\n\r\n        let attributeMap: { [name: string]: [number, ShaderDataType] } = {\r\n            'a_CornerTextureCoordinate': [VertexShuriKenParticle.PARTICLE_CORNERTEXTURECOORDINATE0, ShaderDataType.Vector4],\r\n\t\t \t'a_MeshPosition': [VertexShuriKenParticle.PARTICLE_POSITION0,ShaderDataType.Vector3],\r\n            'a_MeshColor':[VertexShuriKenParticle.PARTICLE_COLOR0,ShaderDataType.Vector4],\r\n\t\t \t'a_MeshTextureCoordinate': [VertexShuriKenParticle.PARTICLE_TEXTURECOORDINATE0,ShaderDataType.Vector2],\r\n\t\t \t'a_ShapePositionStartLifeTime': [VertexShuriKenParticle.PARTICLE_SHAPEPOSITIONSTARTLIFETIME,ShaderDataType.Vector4],\r\n\t\t    'a_DirectionTime': [VertexShuriKenParticle.PARTICLE_DIRECTIONTIME,ShaderDataType.Vector4],\r\n\t\t \t'a_StartColor': [VertexShuriKenParticle.PARTICLE_STARTCOLOR0,ShaderDataType.Vector4],\r\n\t\t \t'a_StartSize': [VertexShuriKenParticle.PARTICLE_STARTSIZE,ShaderDataType.Vector3],\r\n\t\t \t'a_StartRotation0': [VertexShuriKenParticle.PARTICLE_STARTROTATION,ShaderDataType.Vector3],\r\n\t\t \t'a_StartSpeed': [VertexShuriKenParticle.PARTICLE_STARTSPEED,ShaderDataType.Float],\r\n\t\t \t'a_Random0': [VertexShuriKenParticle.PARTICLE_RANDOM0,ShaderDataType.Vector4],\r\n\t\t \t'a_Random1': [VertexShuriKenParticle.PARTICLE_RANDOM1,ShaderDataType.Vector4],\r\n\t\t \t'a_SimulationWorldPostion': [VertexShuriKenParticle.PARTICLE_SIMULATIONWORLDPOSTION,ShaderDataType.Vector3],\r\n\t\t \t'a_SimulationWorldRotation': [VertexShuriKenParticle.PARTICLE_SIMULATIONWORLDROTATION,ShaderDataType.Vector4],\r\n\t\t \t'a_SimulationUV': [VertexShuriKenParticle.PARTICLE_SIMULATIONUV,ShaderDataType.Vector4]\r\n        };\r\n\r\n        let uniformMap = {\r\n            \"u_Tintcolor\": ShaderDataType.Color,\r\n            \"u_texture\": ShaderDataType.Texture2D,\r\n            \"u_TilingOffset\": ShaderDataType.Vector4\r\n        };\r\n\r\n        let defaultValue = {\r\n            \"u_Tintcolor\": new Color(0.5, 0.5, 0.5, 0.5),\r\n            \"u_TilingOffset\": new Vector4(1, 1, 0, 0),\r\n        };\r\n\r\n        let shader = Shader3D.add(\"PARTICLESHURIKEN\", false, false);\r\n        let subShader = new SubShader(attributeMap, uniformMap, defaultValue);\r\n        shader.addSubShader(subShader);\r\n        let forwardPass = subShader.addShaderPass(ShurikenVS, ShurikenFS);\r\n\r\n    }\r\n}","float getCurValueFromGradientFloat(in vec2 gradientNumbers[4], in float normalizedAge)\r\n{\r\n    float curValue;\r\n    for (int i = 1; i < 4; i++)\r\n\t{\r\n\t    vec2 gradientNumber = gradientNumbers[i];\r\n\t    float key = gradientNumber.x;\r\n\t    if (key >= normalizedAge)\r\n\t\t{\r\n\t\t    vec2 lastGradientNumber = gradientNumbers[i - 1];\r\n\t\t    float lastKey = lastGradientNumber.x;\r\n\t\t    float age = (normalizedAge - lastKey) / (key - lastKey);\r\n\t\t    curValue = mix(lastGradientNumber.y, gradientNumber.y, age);\r\n\t\t    break;\r\n\t\t}\r\n\t}\r\n    return curValue;\r\n}\r\n\r\nfloat getTotalValueFromGradientFloat(in vec2 gradientNumbers[4],\r\n    in float normalizedAge)\r\n{\r\n    float totalValue = 0.0;\r\n    for (int i = 1; i < 4; i++)\r\n\t{\r\n\t    vec2 gradientNumber = gradientNumbers[i];\r\n\t    float key = gradientNumber.x;\r\n\t    vec2 lastGradientNumber = gradientNumbers[i - 1];\r\n\t    float lastValue = lastGradientNumber.y;\r\n\r\n\t    if (key >= normalizedAge)\r\n\t\t{\r\n\t\t    float lastKey = lastGradientNumber.x;\r\n\t\t    float age = (normalizedAge - lastKey) / (key - lastKey);\r\n\t\t    totalValue += (lastValue + mix(lastValue, gradientNumber.y, age)) / 2.0 * a_ShapePositionStartLifeTime.w * (normalizedAge - lastKey);\r\n\t\t    break;\r\n\t\t}\r\n\t    else\r\n\t\t{\r\n\t\t    totalValue += (lastValue + gradientNumber.y) / 2.0 * a_ShapePositionStartLifeTime.w * (key - lastGradientNumber.x);\r\n\t\t}\r\n\t}\r\n    return totalValue;\r\n}\r\n\r\nvec4 getColorFromGradient(in vec2 gradientAlphas[COLORCOUNT],\r\n    in vec4 gradientColors[COLORCOUNT],\r\n    in float normalizedAge, in vec4 keyRanges)\r\n{\r\n    float alphaAge = clamp(normalizedAge, keyRanges.z, keyRanges.w);\r\n    vec4 overTimeColor;\r\n    for (int i = 1; i < COLORCOUNT; i++)\r\n\t{\r\n\t    vec2 gradientAlpha = gradientAlphas[i];\r\n\t    float alphaKey = gradientAlpha.x;\r\n\t    if (alphaKey >= alphaAge)\r\n\t\t{\r\n\t\t    vec2 lastGradientAlpha = gradientAlphas[i - 1];\r\n\t\t    float lastAlphaKey = lastGradientAlpha.x;\r\n\t\t    float age = (alphaAge - lastAlphaKey) / (alphaKey - lastAlphaKey);\r\n\t\t    overTimeColor.a = mix(lastGradientAlpha.y, gradientAlpha.y, age);\r\n\t\t    break;\r\n\t\t}\r\n\t}\r\n\r\n    float colorAge = clamp(normalizedAge, keyRanges.x, keyRanges.y);\r\n    for (int i = 1; i < COLORCOUNT; i++)\r\n\t{\r\n\t    vec4 gradientColor = gradientColors[i];\r\n\t    float colorKey = gradientColor.x;\r\n\t    if (colorKey >= colorAge)\r\n\t\t{\r\n\t\t    vec4 lastGradientColor = gradientColors[i - 1];\r\n\t\t    float lastColorKey = lastGradientColor.x;\r\n\t\t    float age = (colorAge - lastColorKey) / (colorKey - lastColorKey);\r\n\t\t    overTimeColor.rgb = mix(gradientColors[i - 1].yzw, gradientColor.yzw, age);\r\n\t\t    break;\r\n\t\t}\r\n\t}\r\n    return overTimeColor;\r\n}\r\n\r\nfloat getFrameFromGradient(in vec2 gradientFrames[4], in float normalizedAge)\r\n{\r\n    float overTimeFrame;\r\n    for (int i = 1; i < 4; i++)\r\n\t{\r\n\t    vec2 gradientFrame = gradientFrames[i];\r\n\t    float key = gradientFrame.x;\r\n\t    if (key >= normalizedAge)\r\n\t\t{\r\n\t\t    vec2 lastGradientFrame = gradientFrames[i - 1];\r\n\t\t    float lastKey = lastGradientFrame.x;\r\n\t\t    float age = (normalizedAge - lastKey) / (key - lastKey);\r\n\t\t    overTimeFrame = mix(lastGradientFrame.y, gradientFrame.y, age);\r\n\t\t    break;\r\n\t\t}\r\n\t}\r\n    return floor(overTimeFrame);\r\n}\r\n","// sprite Uniform\r\nuniform float u_CurrentTime;\r\nuniform vec3 u_Gravity;\r\nuniform vec2 u_DragConstanct;\r\nuniform vec3 u_WorldPosition;\r\nuniform vec4 u_WorldRotation;\r\nuniform bool u_ThreeDStartRotation;\r\nuniform int u_ScalingMode;\r\nuniform vec3 u_PositionScale;\r\nuniform vec3 u_SizeScale;\r\n\r\nuniform float u_StretchedBillboardLengthScale;\r\nuniform float u_StretchedBillboardSpeedScale;\r\nuniform int u_SimulationSpace;\r\n\r\n#if defined(VELOCITYOVERLIFETIMECONSTANT) || defined(VELOCITYOVERLIFETIMECURVE) || defined(VELOCITYOVERLIFETIMERANDOMCONSTANT) || defined(VELOCITYOVERLIFETIMERANDOMCURVE)\r\nuniform int u_VOLSpaceType;\r\n#endif\r\n#if defined(VELOCITYOVERLIFETIMECONSTANT) || defined(VELOCITYOVERLIFETIMERANDOMCONSTANT)\r\nuniform vec3 u_VOLVelocityConst;\r\n#endif\r\n#if defined(VELOCITYOVERLIFETIMECURVE) || defined(VELOCITYOVERLIFETIMERANDOMCURVE)\r\nuniform vec2 u_VOLVelocityGradientX[4]; // x为key,y为速度\r\nuniform vec2 u_VOLVelocityGradientY[4]; // x为key,y为速度\r\nuniform vec2 u_VOLVelocityGradientZ[4]; // x为key,y为速度\r\n#endif\r\n#ifdef VELOCITYOVERLIFETIMERANDOMCONSTANT\r\nuniform vec3 u_VOLVelocityConstMax;\r\n#endif\r\n#ifdef VELOCITYOVERLIFETIMERANDOMCURVE\r\nuniform vec2 u_VOLVelocityGradientMaxX[4]; // x为key,y为速度\r\nuniform vec2 u_VOLVelocityGradientMaxY[4]; // x为key,y为速度\r\nuniform vec2 u_VOLVelocityGradientMaxZ[4]; // x为key,y为速度\r\n#endif\r\n\r\n#ifdef COLORKEYCOUNT_8\r\n    #define COLORCOUNT 8\r\n#else\r\n    #define COLORCOUNT 4\r\n#endif\r\n\r\n#ifdef COLOROVERLIFETIME\r\nuniform vec4 u_ColorOverLifeGradientColors[COLORCOUNT]; // x为key,yzw为Color\r\nuniform vec2 u_ColorOverLifeGradientAlphas[COLORCOUNT]; // x为key,y为Alpha\r\nuniform vec4 u_ColorOverLifeGradientRanges;\r\n#endif\r\n#ifdef RANDOMCOLOROVERLIFETIME\r\nuniform vec4 u_ColorOverLifeGradientColors[COLORCOUNT]; // x为key,yzw为Color\r\nuniform vec2 u_ColorOverLifeGradientAlphas[COLORCOUNT]; // x为key,y为Alpha\r\nuniform vec4 u_ColorOverLifeGradientRanges;\r\nuniform vec4 u_MaxColorOverLifeGradientColors[COLORCOUNT]; // x为key,yzw为Color\r\nuniform vec2 u_MaxColorOverLifeGradientAlphas[COLORCOUNT]; // x为key,y为Alpha\r\nuniform vec4 u_MaxColorOverLifeGradientRanges;\r\n#endif\r\n\r\n#if defined(SIZEOVERLIFETIMECURVE) || defined(SIZEOVERLIFETIMERANDOMCURVES)\r\nuniform vec2 u_SOLSizeGradient[4]; // x为key,y为尺寸\r\n#endif\r\n#ifdef SIZEOVERLIFETIMERANDOMCURVES\r\nuniform vec2 u_SOLSizeGradientMax[4]; // x为key,y为尺寸\r\n#endif\r\n#if defined(SIZEOVERLIFETIMECURVESEPERATE) || defined(SIZEOVERLIFETIMERANDOMCURVESSEPERATE)\r\nuniform vec2 u_SOLSizeGradientX[4]; // x为key,y为尺寸\r\nuniform vec2 u_SOLSizeGradientY[4]; // x为key,y为尺寸\r\nuniform vec2 u_SOLSizeGradientZ[4]; // x为key,y为尺寸\r\n#endif\r\n#ifdef SIZEOVERLIFETIMERANDOMCURVESSEPERATE\r\nuniform vec2 u_SOLSizeGradientMaxX[4]; // x为key,y为尺寸\r\nuniform vec2 u_SOLSizeGradientMaxY[4]; // x为key,y为尺寸\r\nuniform vec2 u_SOLSizeGradientMaxZ[4]; // x为key,y为尺寸\r\n#endif\r\n\r\n#ifdef ROTATIONOVERLIFETIME\r\n    #if defined(ROTATIONOVERLIFETIMECONSTANT) || defined(ROTATIONOVERLIFETIMERANDOMCONSTANTS)\r\nuniform float u_ROLAngularVelocityConst;\r\n    #endif\r\n    #ifdef ROTATIONOVERLIFETIMERANDOMCONSTANTS\r\nuniform float u_ROLAngularVelocityConstMax;\r\n    #endif\r\n    #if defined(ROTATIONOVERLIFETIMECURVE) || defined(ROTATIONOVERLIFETIMERANDOMCURVES)\r\nuniform vec2 u_ROLAngularVelocityGradient[4]; // x为key,y为旋转\r\n    #endif\r\n    #ifdef ROTATIONOVERLIFETIMERANDOMCURVES\r\nuniform vec2 u_ROLAngularVelocityGradientMax[4]; // x为key,y为旋转\r\n    #endif\r\n#endif\r\n#ifdef ROTATIONOVERLIFETIMESEPERATE\r\n    #if defined(ROTATIONOVERLIFETIMECONSTANT) || defined(ROTATIONOVERLIFETIMERANDOMCONSTANTS)\r\nuniform vec3 u_ROLAngularVelocityConstSeprarate;\r\n    #endif\r\n    #ifdef ROTATIONOVERLIFETIMERANDOMCONSTANTS\r\nuniform vec3 u_ROLAngularVelocityConstMaxSeprarate;\r\n    #endif\r\n    #if defined(ROTATIONOVERLIFETIMECURVE) || defined(ROTATIONOVERLIFETIMERANDOMCURVES)\r\nuniform vec2 u_ROLAngularVelocityGradientX[4];\r\nuniform vec2 u_ROLAngularVelocityGradientY[4];\r\nuniform vec2 u_ROLAngularVelocityGradientZ[4];\r\n    #endif\r\n    #ifdef ROTATIONOVERLIFETIMERANDOMCURVES\r\nuniform vec2 u_ROLAngularVelocityGradientMaxX[4];\r\nuniform vec2 u_ROLAngularVelocityGradientMaxY[4];\r\nuniform vec2 u_ROLAngularVelocityGradientMaxZ[4];\r\nuniform vec2 u_ROLAngularVelocityGradientMaxW[4];\r\n    #endif\r\n#endif\r\n\r\n#if defined(TEXTURESHEETANIMATIONCURVE) || defined(TEXTURESHEETANIMATIONRANDOMCURVE)\r\nuniform float u_TSACycles;\r\nuniform vec2 u_TSASubUVLength;\r\nuniform vec2 u_TSAGradientUVs[4]; // x为key,y为frame\r\n#endif\r\n#ifdef TEXTURESHEETANIMATIONRANDOMCURVE\r\nuniform vec2 u_TSAMaxGradientUVs[4]; // x为key,y为frame\r\n#endif","#define SHADER_NAME ParticleVS\r\n\r\n#include \"Camera.glsl\";\r\n#include \"particleShuriKenSpriteVS.glsl\";\r\n#include \"Math.glsl\";\r\n#include \"MathGradient.glsl\";\r\n#include \"Color.glsl\";\r\n#include \"Scene.glsl\"\r\n#include \"SceneFogInput.glsl\"\r\n\r\n\r\n#ifdef RENDERMODE_MESH\r\nvarying vec4 v_MeshColor;\r\n#endif\r\n\r\nvarying vec4 v_Color;\r\nvarying vec2 v_TextureCoordinate;\r\n\r\n//修改这里剔除没有用到的光照函数，增加粒子的编译速度\r\nvec2 TransformUV(vec2 texcoord, vec4 tilingOffset)\r\n{\r\n    vec2 transTexcoord = vec2(texcoord.x, texcoord.y - 1.0) * tilingOffset.xy + vec2(tilingOffset.z, -tilingOffset.w);\r\n    transTexcoord.y += 1.0;\r\n    return transTexcoord;\r\n}\r\n\r\n#if defined(VELOCITYOVERLIFETIMECONSTANT) || defined(VELOCITYOVERLIFETIMECURVE) || defined(VELOCITYOVERLIFETIMERANDOMCONSTANT) || defined(VELOCITYOVERLIFETIMERANDOMCURVE)\r\nvec3 computeParticleLifeVelocity(in float normalizedAge)\r\n{\r\n    vec3 outLifeVelocity;\r\n    #ifdef VELOCITYOVERLIFETIMECONSTANT\r\n    outLifeVelocity = u_VOLVelocityConst;\r\n    #endif\r\n    #ifdef VELOCITYOVERLIFETIMECURVE\r\n    outLifeVelocity = vec3(getCurValueFromGradientFloat(u_VOLVelocityGradientX, normalizedAge),\r\n\tgetCurValueFromGradientFloat(u_VOLVelocityGradientY, normalizedAge),\r\n\tgetCurValueFromGradientFloat(u_VOLVelocityGradientZ, normalizedAge));\r\n    #endif\r\n    #ifdef VELOCITYOVERLIFETIMERANDOMCONSTANT\r\n    outLifeVelocity = mix(u_VOLVelocityConst,\r\n\tu_VOLVelocityConstMax,\r\n\tvec3(a_Random1.y, a_Random1.z, a_Random1.w));\r\n    #endif\r\n    #ifdef VELOCITYOVERLIFETIMERANDOMCURVE\r\n    outLifeVelocity = vec3(\r\n\tmix(getCurValueFromGradientFloat(u_VOLVelocityGradientX, normalizedAge),\r\n\t    getCurValueFromGradientFloat(u_VOLVelocityGradientMaxX, normalizedAge),\r\n\t    a_Random1.y),\r\n\tmix(getCurValueFromGradientFloat(u_VOLVelocityGradientY, normalizedAge),\r\n\t    getCurValueFromGradientFloat(u_VOLVelocityGradientMaxY, normalizedAge),\r\n\t    a_Random1.z),\r\n\tmix(getCurValueFromGradientFloat(u_VOLVelocityGradientZ, normalizedAge),\r\n\t    getCurValueFromGradientFloat(u_VOLVelocityGradientMaxZ, normalizedAge),\r\n\t    a_Random1.w));\r\n    #endif\r\n\r\n    return outLifeVelocity;\r\n}\r\n#endif\r\n\r\n// drag\r\nvec3 getStartPosition(vec3 startVelocity, float age, vec3 dragData)\r\n{\r\n    vec3 startPosition;\r\n    float lasttime = min(startVelocity.x / dragData.x, age);\r\n    startPosition = lasttime * (startVelocity - 0.5 * dragData * lasttime);\r\n    return startPosition;\r\n}\r\n\r\nvec3 computeParticlePosition(in vec3 startVelocity, in vec3 lifeVelocity, in float age, in float normalizedAge, vec3 gravityVelocity, vec4 worldRotation, vec3 dragData)\r\n{\r\n    vec3 startPosition = getStartPosition(startVelocity, age, dragData);\r\n    vec3 lifePosition;\r\n#if defined(VELOCITYOVERLIFETIMECONSTANT) || defined(VELOCITYOVERLIFETIMECURVE) || defined(VELOCITYOVERLIFETIMERANDOMCONSTANT) || defined(VELOCITYOVERLIFETIMERANDOMCURVE)\r\n    #ifdef VELOCITYOVERLIFETIMECONSTANT\r\n    // startPosition = startVelocity * age;\r\n    lifePosition = lifeVelocity * age;\r\n    #endif\r\n    #ifdef VELOCITYOVERLIFETIMECURVE\r\n    // startPosition = startVelocity * age;\r\n    lifePosition = vec3(getTotalValueFromGradientFloat(u_VOLVelocityGradientX, normalizedAge),\r\n\tgetTotalValueFromGradientFloat(u_VOLVelocityGradientY, normalizedAge),\r\n\tgetTotalValueFromGradientFloat(u_VOLVelocityGradientZ, normalizedAge));\r\n    #endif\r\n    #ifdef VELOCITYOVERLIFETIMERANDOMCONSTANT\r\n    // startPosition = startVelocity * age;\r\n    lifePosition = lifeVelocity * age;\r\n    #endif\r\n    #ifdef VELOCITYOVERLIFETIMERANDOMCURVE\r\n    // startPosition = startVelocity * age;\r\n    lifePosition = vec3(\r\n\tmix(\r\n\t    getTotalValueFromGradientFloat(u_VOLVelocityGradientX, normalizedAge),\r\n\t    getTotalValueFromGradientFloat(u_VOLVelocityGradientMaxX, normalizedAge),\r\n\t    a_Random1.y),\r\n\tmix(\r\n\t    getTotalValueFromGradientFloat(u_VOLVelocityGradientY, normalizedAge),\r\n\t    getTotalValueFromGradientFloat(u_VOLVelocityGradientMaxY, normalizedAge),\r\n\t    a_Random1.z),\r\n\tmix(\r\n\t    getTotalValueFromGradientFloat(u_VOLVelocityGradientZ, normalizedAge),\r\n\t    getTotalValueFromGradientFloat(u_VOLVelocityGradientMaxZ, normalizedAge),\r\n\t    a_Random1.w));\r\n    #endif\r\n\r\n    vec3 finalPosition;\r\n    if (u_VOLSpaceType == 0)\r\n\t{\r\n\t    if (u_ScalingMode != 2)\r\n\t\tfinalPosition = rotationByQuaternions(\r\n\t\t    u_PositionScale * (a_ShapePositionStartLifeTime.xyz + startPosition + lifePosition),\r\n\t\t    worldRotation);\r\n\t    else\r\n\t\tfinalPosition = rotationByQuaternions(\r\n\t\t    u_PositionScale * a_ShapePositionStartLifeTime.xyz + startPosition + lifePosition,\r\n\t\t    worldRotation);\r\n\t}\r\n    else\r\n\t{\r\n\t    if (u_ScalingMode != 2)\r\n\t\tfinalPosition = rotationByQuaternions(\r\n\t\t\t\t    u_PositionScale * (a_ShapePositionStartLifeTime.xyz + startPosition),\r\n\t\t\t\t    worldRotation)\r\n\t\t    + lifePosition;\r\n\t    else\r\n\t\tfinalPosition = rotationByQuaternions(\r\n\t\t\t\t    u_PositionScale * a_ShapePositionStartLifeTime.xyz + startPosition,\r\n\t\t\t\t    worldRotation)\r\n\t\t    + lifePosition;\r\n\t}\r\n#else\r\n    // startPosition = startVelocity * age;\r\n    vec3 finalPosition;\r\n    if (u_ScalingMode != 2)\r\n\tfinalPosition = rotationByQuaternions(\r\n\t    u_PositionScale * (a_ShapePositionStartLifeTime.xyz + startPosition),\r\n\t    worldRotation);\r\n    else\r\n\tfinalPosition = rotationByQuaternions(\r\n\t    u_PositionScale * a_ShapePositionStartLifeTime.xyz + startPosition,\r\n\t    worldRotation);\r\n#endif\r\n\r\n    if (u_SimulationSpace == 0)\r\n\tfinalPosition = finalPosition + a_SimulationWorldPostion;\r\n    else if (u_SimulationSpace == 1)\r\n\tfinalPosition = finalPosition + u_WorldPosition;\r\n\r\n    finalPosition += 0.5 * gravityVelocity * age;\r\n\r\n    return finalPosition;\r\n}\r\n\r\nvec4 computeParticleColor(in vec4 color, in float normalizedAge)\r\n{\r\n#ifdef COLOROVERLIFETIME\r\n    color *= getColorFromGradient(u_ColorOverLifeGradientAlphas,\r\n\tu_ColorOverLifeGradientColors,\r\n\tnormalizedAge, u_ColorOverLifeGradientRanges);\r\n#endif\r\n\r\n#ifdef RANDOMCOLOROVERLIFETIME\r\n    color *= mix(getColorFromGradient(u_ColorOverLifeGradientAlphas,\r\n\t\t     u_ColorOverLifeGradientColors,\r\n\t\t     normalizedAge, u_ColorOverLifeGradientRanges),\r\n\tgetColorFromGradient(u_MaxColorOverLifeGradientAlphas,\r\n\t    u_MaxColorOverLifeGradientColors,\r\n\t    normalizedAge, u_MaxColorOverLifeGradientRanges),\r\n\ta_Random0.y);\r\n#endif\r\n\r\n    return color;\r\n}\r\n\r\nvec2 computeParticleSizeBillbard(in vec2 size, in float normalizedAge)\r\n{\r\n#ifdef SIZEOVERLIFETIMECURVE\r\n    size *= getCurValueFromGradientFloat(u_SOLSizeGradient, normalizedAge);\r\n#endif\r\n#ifdef SIZEOVERLIFETIMERANDOMCURVES\r\n    size *= mix(getCurValueFromGradientFloat(u_SOLSizeGradient, normalizedAge),\r\n\tgetCurValueFromGradientFloat(u_SOLSizeGradientMax, normalizedAge),\r\n\ta_Random0.z);\r\n#endif\r\n#ifdef SIZEOVERLIFETIMECURVESEPERATE\r\n    size *= vec2(getCurValueFromGradientFloat(u_SOLSizeGradientX, normalizedAge),\r\n\tgetCurValueFromGradientFloat(u_SOLSizeGradientY, normalizedAge));\r\n#endif\r\n#ifdef SIZEOVERLIFETIMERANDOMCURVESSEPERATE\r\n    size *= vec2(mix(getCurValueFromGradientFloat(u_SOLSizeGradientX, normalizedAge),\r\n\t\t     getCurValueFromGradientFloat(u_SOLSizeGradientMaxX, normalizedAge),\r\n\t\t     a_Random0.z),\r\n\tmix(getCurValueFromGradientFloat(u_SOLSizeGradientY, normalizedAge),\r\n\t    getCurValueFromGradientFloat(u_SOLSizeGradientMaxY, normalizedAge),\r\n\t    a_Random0.z));\r\n#endif\r\n    return size;\r\n}\r\n\r\n#ifdef RENDERMODE_MESH\r\nvec3 computeParticleSizeMesh(in vec3 size, in float normalizedAge)\r\n{\r\n    #ifdef SIZEOVERLIFETIMECURVE\r\n    size *= getCurValueFromGradientFloat(u_SOLSizeGradient, normalizedAge);\r\n    #endif\r\n    #ifdef SIZEOVERLIFETIMERANDOMCURVES\r\n    size *= mix(getCurValueFromGradientFloat(u_SOLSizeGradient, normalizedAge),\r\n\tgetCurValueFromGradientFloat(u_SOLSizeGradientMax, normalizedAge),\r\n\ta_Random0.z);\r\n    #endif\r\n    #ifdef SIZEOVERLIFETIMECURVESEPERATE\r\n    size *= vec3(getCurValueFromGradientFloat(u_SOLSizeGradientX, normalizedAge),\r\n\tgetCurValueFromGradientFloat(u_SOLSizeGradientY, normalizedAge),\r\n\tgetCurValueFromGradientFloat(u_SOLSizeGradientZ, normalizedAge));\r\n    #endif\r\n    #ifdef SIZEOVERLIFETIMERANDOMCURVESSEPERATE\r\n    size *= vec3(mix(getCurValueFromGradientFloat(u_SOLSizeGradientX, normalizedAge),\r\n\t\t     getCurValueFromGradientFloat(u_SOLSizeGradientMaxX, normalizedAge),\r\n\t\t     a_Random0.z),\r\n\tmix(getCurValueFromGradientFloat(u_SOLSizeGradientY, normalizedAge),\r\n\t    getCurValueFromGradientFloat(u_SOLSizeGradientMaxY, normalizedAge),\r\n\t    a_Random0.z),\r\n\tmix(getCurValueFromGradientFloat(u_SOLSizeGradientZ, normalizedAge),\r\n\t    getCurValueFromGradientFloat(u_SOLSizeGradientMaxZ, normalizedAge),\r\n\t    a_Random0.z));\r\n    #endif\r\n    return size;\r\n}\r\n#endif\r\n\r\nfloat computeParticleRotationFloat(in float rotation,\r\n    in float age,\r\n    in float normalizedAge)\r\n{\r\n#ifdef ROTATIONOVERLIFETIME\r\n    #ifdef ROTATIONOVERLIFETIMECONSTANT\r\n    float ageRot = u_ROLAngularVelocityConst * age;\r\n    rotation += ageRot;\r\n    #endif\r\n    #ifdef ROTATIONOVERLIFETIMECURVE\r\n    rotation += getTotalValueFromGradientFloat(u_ROLAngularVelocityGradient, normalizedAge);\r\n    #endif\r\n    #ifdef ROTATIONOVERLIFETIMERANDOMCONSTANTS\r\n    float ageRot = mix(u_ROLAngularVelocityConst, u_ROLAngularVelocityConstMax, a_Random0.w) * age;\r\n    rotation += ageRot;\r\n    #endif\r\n    #ifdef ROTATIONOVERLIFETIMERANDOMCURVES\r\n    rotation += mix(\r\n\tgetTotalValueFromGradientFloat(u_ROLAngularVelocityGradient, normalizedAge),\r\n\tgetTotalValueFromGradientFloat(u_ROLAngularVelocityGradientMax,\r\n\t    normalizedAge),\r\n\ta_Random0.w);\r\n    #endif\r\n#endif\r\n#ifdef ROTATIONOVERLIFETIMESEPERATE\r\n    #ifdef ROTATIONOVERLIFETIMECONSTANT\r\n    float ageRot = u_ROLAngularVelocityConstSeprarate.z * age;\r\n    rotation += ageRot;\r\n    #endif\r\n    #ifdef ROTATIONOVERLIFETIMECURVE\r\n    rotation += getTotalValueFromGradientFloat(u_ROLAngularVelocityGradientZ,\r\n\tnormalizedAge);\r\n    #endif\r\n    #ifdef ROTATIONOVERLIFETIMERANDOMCONSTANTS\r\n    float ageRot = mix(u_ROLAngularVelocityConstSeprarate.z,\r\n\t\t       u_ROLAngularVelocityConstMaxSeprarate.z,\r\n\t\t       a_Random0.w)\r\n\t* age;\r\n    rotation += ageRot;\r\n    #endif\r\n    #ifdef ROTATIONOVERLIFETIMERANDOMCURVES\r\n    rotation += mix(getTotalValueFromGradientFloat(u_ROLAngularVelocityGradientZ,\r\n\t\t\tnormalizedAge),\r\n\tgetTotalValueFromGradientFloat(\r\n\t    u_ROLAngularVelocityGradientMaxZ, normalizedAge),\r\n\ta_Random0.w);\r\n    #endif\r\n#endif\r\n    return rotation;\r\n}\r\n\r\n#if defined(RENDERMODE_MESH) && (defined(ROTATIONOVERLIFETIME) || defined(ROTATIONOVERLIFETIMESEPERATE))\r\nvec3 computeParticleRotationVec3(in vec3 rotation,\r\n    in float age,\r\n    in float normalizedAge)\r\n{\r\n    #ifdef ROTATIONOVERLIFETIME\r\n\t#ifdef ROTATIONOVERLIFETIMECONSTANT\r\n    float ageRot = u_ROLAngularVelocityConst * age;\r\n    rotation += ageRot;\r\n\t#endif\r\n\t#ifdef ROTATIONOVERLIFETIMECURVE\r\n    rotation += getTotalValueFromGradientFloat(u_ROLAngularVelocityGradient, normalizedAge);\r\n\t#endif\r\n\t#ifdef ROTATIONOVERLIFETIMERANDOMCONSTANTS\r\n    float ageRot = mix(u_ROLAngularVelocityConst, u_ROLAngularVelocityConstMax, a_Random0.w) * age;\r\n    rotation += ageRot;\r\n\t#endif\r\n\t#ifdef ROTATIONOVERLIFETIMERANDOMCURVES\r\n    rotation += mix(\r\n\tgetTotalValueFromGradientFloat(u_ROLAngularVelocityGradient, normalizedAge),\r\n\tgetTotalValueFromGradientFloat(u_ROLAngularVelocityGradientMax,\r\n\t    normalizedAge),\r\n\ta_Random0.w);\r\n\t#endif\r\n    #endif\r\n    #ifdef ROTATIONOVERLIFETIMESEPERATE\r\n\t#ifdef ROTATIONOVERLIFETIMECONSTANT\r\n    vec3 ageRot = u_ROLAngularVelocityConstSeprarate * age;\r\n    rotation += ageRot;\r\n\t#endif\r\n\t#ifdef ROTATIONOVERLIFETIMECURVE\r\n    rotation += vec3(getTotalValueFromGradientFloat(u_ROLAngularVelocityGradientX,\r\n\t\t\t normalizedAge),\r\n\tgetTotalValueFromGradientFloat(u_ROLAngularVelocityGradientY,\r\n\t    normalizedAge),\r\n\tgetTotalValueFromGradientFloat(u_ROLAngularVelocityGradientZ,\r\n\t    normalizedAge));\r\n\t#endif\r\n\t#ifdef ROTATIONOVERLIFETIMERANDOMCONSTANTS\r\n    vec3 ageRot = mix(u_ROLAngularVelocityConstSeprarate,\r\n\t\t      u_ROLAngularVelocityConstMaxSeprarate,\r\n\t\t      a_Random0.w)\r\n\t* age;\r\n    rotation += ageRot;\r\n\t#endif\r\n\t#ifdef ROTATIONOVERLIFETIMERANDOMCURVES\r\n    rotation += vec3(mix(getTotalValueFromGradientFloat(u_ROLAngularVelocityGradientX,\r\n\t\t\t     normalizedAge),\r\n\t\t\t getTotalValueFromGradientFloat(u_ROLAngularVelocityGradientMaxX,\r\n\t\t\t     normalizedAge),\r\n\t\t\t a_Random0.w),\r\n\tmix(getTotalValueFromGradientFloat(u_ROLAngularVelocityGradientY,\r\n\t\tnormalizedAge),\r\n\t    getTotalValueFromGradientFloat(u_ROLAngularVelocityGradientMaxY,\r\n\t\tnormalizedAge),\r\n\t    a_Random0.w),\r\n\tmix(getTotalValueFromGradientFloat(u_ROLAngularVelocityGradientZ,\r\n\t\tnormalizedAge),\r\n\t    getTotalValueFromGradientFloat(u_ROLAngularVelocityGradientMaxZ,\r\n\t\tnormalizedAge),\r\n\t    a_Random0.w));\r\n\t#endif\r\n    #endif\r\n    return rotation;\r\n}\r\n#endif\r\n\r\nvec2 computeParticleUV(in vec2 uv, in float normalizedAge)\r\n{\r\n#ifdef TEXTURESHEETANIMATIONCURVE\r\n    float cycleNormalizedAge = normalizedAge * u_TSACycles;\r\n    float frame = getFrameFromGradient(\r\n\tu_TSAGradientUVs, cycleNormalizedAge - floor(cycleNormalizedAge));\r\n    float totalULength = frame * u_TSASubUVLength.x;\r\n    float floorTotalULength = floor(totalULength);\r\n    uv.x += totalULength - floorTotalULength;\r\n    uv.y += floorTotalULength * u_TSASubUVLength.y;\r\n#endif\r\n#ifdef TEXTURESHEETANIMATIONRANDOMCURVE\r\n    float cycleNormalizedAge = normalizedAge * u_TSACycles;\r\n    float uvNormalizedAge = cycleNormalizedAge - floor(cycleNormalizedAge);\r\n    float frame = floor(mix(getFrameFromGradient(u_TSAGradientUVs, uvNormalizedAge),\r\n\tgetFrameFromGradient(u_TSAMaxGradientUVs, uvNormalizedAge),\r\n\ta_Random1.x));\r\n    float totalULength = frame * u_TSASubUVLength.x;\r\n    float floorTotalULength = floor(totalULength);\r\n    uv.x += totalULength - floorTotalULength;\r\n    uv.y += floorTotalULength * u_TSASubUVLength.y;\r\n#endif\r\n    return uv;\r\n}\r\n\r\nvoid main()\r\n{\r\n    float age = u_CurrentTime - a_DirectionTime.w;\r\n    float normalizedAge = age / a_ShapePositionStartLifeTime.w;\r\n    vec3 lifeVelocity;\r\n    if (normalizedAge < 1.0)\r\n\t{\r\n\t    vec3 startVelocity = a_DirectionTime.xyz * a_StartSpeed;\r\n#if defined(VELOCITYOVERLIFETIMECONSTANT) || defined(VELOCITYOVERLIFETIMECURVE) || defined(VELOCITYOVERLIFETIMERANDOMCONSTANT) || defined(VELOCITYOVERLIFETIMERANDOMCURVE)\r\n\t    lifeVelocity = computeParticleLifeVelocity(normalizedAge); //计算粒子生命周期速度\r\n#endif\r\n\t    vec3 gravityVelocity = u_Gravity * age;\r\n\r\n\t    vec4 worldRotation;\r\n\t    if (u_SimulationSpace == 0)\r\n\t\tworldRotation = a_SimulationWorldRotation;\r\n\t    else\r\n\t\tworldRotation = u_WorldRotation;\r\n\r\n\t    // drag\r\n\t    vec3 dragData = a_DirectionTime.xyz * mix(u_DragConstanct.x, u_DragConstanct.y, a_Random0.x);\r\n\t    vec3 center = computeParticlePosition(startVelocity, lifeVelocity, age, normalizedAge, gravityVelocity, worldRotation, dragData); //计算粒子位置\r\n\r\n#ifdef SPHERHBILLBOARD\r\n\t    vec2 corner = a_CornerTextureCoordinate.xy; // Billboard模式z轴无效\r\n\t    vec3 cameraUpVector = normalize(u_CameraUp); // TODO:是否外面归一化\r\n\t    vec3 sideVector = normalize(cross(u_CameraDirection, cameraUpVector));\r\n\t    vec3 upVector = normalize(cross(sideVector, u_CameraDirection));\r\n\t    corner *= computeParticleSizeBillbard(a_StartSize.xy, normalizedAge);\r\n    #if defined(ROTATIONOVERLIFETIME) || defined(ROTATIONOVERLIFETIMESEPERATE)\r\n\t    if (u_ThreeDStartRotation)\r\n\t\t{\r\n\t\t    vec3 rotation = vec3(\r\n\t\t\ta_StartRotation0.xy,\r\n\t\t\tcomputeParticleRotationFloat(a_StartRotation0.z, age, normalizedAge));\r\n\t\t    center += u_SizeScale.xzy * rotationByEuler(corner.x * sideVector + corner.y * upVector, rotation);\r\n\t\t}\r\n\t    else\r\n\t\t{\r\n\t\t    float rot = computeParticleRotationFloat(a_StartRotation0.x, age, normalizedAge);\r\n\t\t    float c = cos(rot);\r\n\t\t    float s = sin(rot);\r\n\t\t    mat2 rotation = mat2(c, -s, s, c);\r\n\t\t    corner = rotation * corner;\r\n\t\t    center += u_SizeScale.xzy * (corner.x * sideVector + corner.y * upVector);\r\n\t\t}\r\n    #else\r\n\t    if (u_ThreeDStartRotation)\r\n\t\t{\r\n\t\t    center += u_SizeScale.xzy * rotationByEuler(corner.x * sideVector + corner.y * upVector, a_StartRotation0);\r\n\t\t}\r\n\t    else\r\n\t\t{\r\n\t\t    float c = cos(a_StartRotation0.x);\r\n\t\t    float s = sin(a_StartRotation0.x);\r\n\t\t    mat2 rotation = mat2(c, -s, s, c);\r\n\t\t    corner = rotation * corner;\r\n\t\t    center += u_SizeScale.xzy * (corner.x * sideVector + corner.y * upVector);\r\n\t\t}\r\n    #endif\r\n#endif\r\n\r\n#ifdef STRETCHEDBILLBOARD\r\n\t    vec2 corner = a_CornerTextureCoordinate.xy; // Billboard模式z轴无效\r\n\t    vec3 velocity;\r\n    #if defined(VELOCITYOVERLIFETIMECONSTANT) || defined(VELOCITYOVERLIFETIMECURVE) || defined(VELOCITYOVERLIFETIMERANDOMCONSTANT) || defined(VELOCITYOVERLIFETIMERANDOMCURVE)\r\n\t    if (u_VOLSpaceType == 0)\r\n\t\tvelocity = rotationByQuaternions(u_SizeScale * (startVelocity + lifeVelocity),\r\n\t\t\t       worldRotation)\r\n\t\t    + gravityVelocity;\r\n\t    else\r\n\t\tvelocity = rotationByQuaternions(u_SizeScale * startVelocity, worldRotation) + lifeVelocity + gravityVelocity;\r\n    #else\r\n\t    velocity = rotationByQuaternions(u_SizeScale * startVelocity, worldRotation) + gravityVelocity;\r\n    #endif\r\n\t    vec3 cameraUpVector = normalize(velocity);\r\n\t    vec3 direction = normalize(center - u_CameraPos);\r\n\t    vec3 sideVector = normalize(cross(direction, normalize(velocity)));\r\n\r\n\t    sideVector = u_SizeScale.xzy * sideVector;\r\n\t    cameraUpVector = length(vec3(u_SizeScale.x, 0.0, 0.0)) * cameraUpVector;\r\n\r\n\t    vec2 size = computeParticleSizeBillbard(a_StartSize.xy, normalizedAge);\r\n\r\n\t    const mat2 rotaionZHalfPI = mat2(0.0, -1.0, 1.0, 0.0);\r\n\t    corner = rotaionZHalfPI * corner;\r\n\t    corner.y = corner.y - abs(corner.y);\r\n\r\n\t    float speed = length(velocity); // TODO:\r\n\t    center += sign(u_SizeScale.x) * (sign(u_StretchedBillboardLengthScale) * size.x * corner.x * sideVector + (speed * u_StretchedBillboardSpeedScale + size.y * u_StretchedBillboardLengthScale) * corner.y * cameraUpVector);\r\n#endif\r\n\r\n#ifdef HORIZONTALBILLBOARD\r\n\t    vec2 corner = a_CornerTextureCoordinate.xy; // Billboard模式z轴无效\r\n\t    const vec3 cameraUpVector = vec3(0.0, 0.0, 1.0);\r\n\t    const vec3 sideVector = vec3(-1.0, 0.0, 0.0);\r\n\r\n\t    float rot = computeParticleRotationFloat(a_StartRotation0.x, age, normalizedAge);\r\n\t    float c = cos(rot);\r\n\t    float s = sin(rot);\r\n\t    mat2 rotation = mat2(c, -s, s, c);\r\n\t    corner = rotation * corner * cos(0.78539816339744830961566084581988); // TODO:临时缩小cos45,不确定U3D原因\r\n\t    corner *= computeParticleSizeBillbard(a_StartSize.xy, normalizedAge);\r\n\t    center += u_SizeScale.xzy * (corner.x * sideVector + corner.y * cameraUpVector);\r\n#endif\r\n\r\n#ifdef VERTICALBILLBOARD\r\n\t    vec2 corner = a_CornerTextureCoordinate.xy; // Billboard模式z轴无效\r\n\t    const vec3 cameraUpVector = vec3(0.0, 1.0, 0.0);\r\n\t    vec3 sideVector = normalize(cross(u_CameraDirection, cameraUpVector));\r\n\r\n\t    float rot = computeParticleRotationFloat(a_StartRotation0.x, age, normalizedAge);\r\n\t    float c = cos(rot);\r\n\t    float s = sin(rot);\r\n\t    mat2 rotation = mat2(c, -s, s, c);\r\n\t    corner = rotation * corner * cos(0.78539816339744830961566084581988); // TODO:临时缩小cos45,不确定U3D原因\r\n\t    corner *= computeParticleSizeBillbard(a_StartSize.xy, normalizedAge);\r\n\t    center += u_SizeScale.xzy * (corner.x * sideVector + corner.y * cameraUpVector);\r\n#endif\r\n\r\n#ifdef RENDERMODE_MESH\r\n\t    vec3 size = computeParticleSizeMesh(a_StartSize, normalizedAge);\r\n    #if defined(ROTATIONOVERLIFETIME) || defined(ROTATIONOVERLIFETIMESEPERATE)\r\n\t    if (u_ThreeDStartRotation)\r\n\t\t{\r\n\t\t    vec3 rotation = vec3(\r\n\t\t\ta_StartRotation0.xy,\r\n\t\t\tcomputeParticleRotationFloat(a_StartRotation0.z, age, normalizedAge));\r\n\t\t    center += rotationByQuaternions(\r\n\t\t\tu_SizeScale * rotationByEuler(a_MeshPosition * size, rotation),\r\n\t\t\tworldRotation);\r\n\t\t}\r\n\t    else\r\n\t\t{\r\n\t#ifdef ROTATIONOVERLIFETIME\r\n\t\t    float angle = computeParticleRotationFloat(a_StartRotation0.x, age, normalizedAge);\r\n\t\t    if (a_ShapePositionStartLifeTime.x != 0.0 || a_ShapePositionStartLifeTime.y != 0.0)\r\n\t\t\t{\r\n\t\t\t    center += (rotationByQuaternions(\r\n\t\t\t\trotationByAxis(\r\n\t\t\t\t    u_SizeScale * a_MeshPosition * size,\r\n\t\t\t\t    normalize(cross(vec3(0.0, 0.0, 1.0),\r\n\t\t\t\t\tvec3(a_ShapePositionStartLifeTime.xy, 0.0))),\r\n\t\t\t\t    angle),\r\n\t\t\t\tworldRotation)); //已验证\r\n\t\t\t}\r\n\t\t    else\r\n\t\t\t{\r\n\t    #ifdef SHAPE\r\n\t\t\t    center += u_SizeScale.xzy * (rotationByQuaternions(rotationByAxis(a_MeshPosition * size, vec3(0.0, -1.0, 0.0), angle), worldRotation));\r\n\t    #else\r\n\t\t\t    if (u_SimulationSpace == 0)\r\n\t\t\t\tcenter += rotationByAxis(u_SizeScale * a_MeshPosition * size,\r\n\t\t\t\t    vec3(0.0, 0.0, -1.0),\r\n\t\t\t\t    angle); //已验证\r\n\t\t\t    else if (u_SimulationSpace == 1)\r\n\t\t\t\tcenter += rotationByQuaternions(\r\n\t\t\t\t    u_SizeScale * rotationByAxis(a_MeshPosition * size, vec3(0.0, 0.0, -1.0), angle),\r\n\t\t\t\t    worldRotation); //已验证\r\n\t    #endif\r\n\t\t\t}\r\n\t#endif\r\n\t#ifdef ROTATIONOVERLIFETIMESEPERATE\r\n\t\t    // TODO:是否应合并if(u_ThreeDStartRotation)分支代码,待测试\r\n\t\t    vec3 angle = computeParticleRotationVec3(\r\n\t\t\tvec3(0.0, 0.0, -a_StartRotation0.x), age, normalizedAge);\r\n\t\t    center += (rotationByQuaternions(\r\n\t\t\trotationByEuler(u_SizeScale * a_MeshPosition * size,\r\n\t\t\t    vec3(angle.x, angle.y, angle.z)),\r\n\t\t\tworldRotation)); //已验证\r\n\t#endif\r\n\t\t}\r\n    #else\r\n\t    if (u_ThreeDStartRotation)\r\n\t\t{\r\n\t\t    center += rotationByQuaternions(\r\n\t\t\tu_SizeScale * rotationByEuler(a_MeshPosition * size, a_StartRotation0),\r\n\t\t\tworldRotation); //已验证\r\n\t\t}\r\n\t    else\r\n\t\t{\r\n\t\t    if (a_ShapePositionStartLifeTime.x != 0.0 || a_ShapePositionStartLifeTime.y != 0.0)\r\n\t\t\t{\r\n\t\t\t    if (u_SimulationSpace == 0)\r\n\t\t\t\tcenter += rotationByAxis(\r\n\t\t\t\t    u_SizeScale * a_MeshPosition * size,\r\n\t\t\t\t    normalize(cross(vec3(0.0, 0.0, 1.0),\r\n\t\t\t\t\tvec3(a_ShapePositionStartLifeTime.xy, 0.0))),\r\n\t\t\t\t    a_StartRotation0.x);\r\n\t\t\t    else if (u_SimulationSpace == 1)\r\n\t\t\t\tcenter += (rotationByQuaternions(\r\n\t\t\t\t    u_SizeScale * rotationByAxis(a_MeshPosition * size, normalize(cross(vec3(0.0, 0.0, 1.0), vec3(a_ShapePositionStartLifeTime.xy, 0.0))), a_StartRotation0.x),\r\n\t\t\t\t    worldRotation)); //已验证\r\n\t\t\t}\r\n\t\t    else\r\n\t\t\t{\r\n\t#ifdef SHAPE\r\n\t\t\t    if (u_SimulationSpace == 0)\r\n\t\t\t\tcenter += u_SizeScale * rotationByAxis(a_MeshPosition * size, vec3(0.0, -1.0, 0.0), a_StartRotation0.x);\r\n\t\t\t    else if (u_SimulationSpace == 1)\r\n\t\t\t\tcenter += rotationByQuaternions(\r\n\t\t\t\t    u_SizeScale * rotationByAxis(a_MeshPosition * size, vec3(0.0, -1.0, 0.0), a_StartRotation0.x),\r\n\t\t\t\t    worldRotation);\r\n\t#else\r\n\t\t\t    if (u_SimulationSpace == 0)\r\n\t\t\t\tcenter += rotationByAxis(u_SizeScale * a_MeshPosition * size,\r\n\t\t\t\t    vec3(0.0, 0.0, -1.0),\r\n\t\t\t\t    a_StartRotation0.x);\r\n\t\t\t    else if (u_SimulationSpace == 1)\r\n\t\t\t\tcenter += rotationByQuaternions(\r\n\t\t\t\t    u_SizeScale * rotationByAxis(a_MeshPosition * size, vec3(0.0, 0.0, -1.0), a_StartRotation0.x),\r\n\t\t\t\t    worldRotation); //已验证\r\n\t#endif\r\n\t\t\t}\r\n\t\t}\r\n    #endif\r\n\t    v_MeshColor = a_MeshColor;\r\n#endif\r\n\t    gl_Position = u_Projection * u_View * vec4(center, 1.0);\r\n\t\tvec4 startcolor = gammaToLinear(a_StartColor);\r\n\t    v_Color = computeParticleColor(startcolor, normalizedAge);\r\n#ifdef DIFFUSEMAP\r\n\t    vec2 simulateUV;\r\n    #if defined(SPHERHBILLBOARD) || defined(STRETCHEDBILLBOARD) || defined(HORIZONTALBILLBOARD) || defined(VERTICALBILLBOARD)\r\n\t    simulateUV = a_SimulationUV.xy + a_CornerTextureCoordinate.zw * a_SimulationUV.zw;\r\n\t    v_TextureCoordinate = computeParticleUV(simulateUV, normalizedAge);\r\n    #endif\r\n    #ifdef RENDERMODE_MESH\r\n\t    simulateUV = a_SimulationUV.xy + a_MeshTextureCoordinate * a_SimulationUV.zw;\r\n\t    v_TextureCoordinate = computeParticleUV(simulateUV, normalizedAge);\r\n    #endif\r\n\t    v_TextureCoordinate = TransformUV(v_TextureCoordinate, u_TilingOffset);\r\n#endif\r\n\t}\r\n    else\r\n\t{\r\n\t    gl_Position = vec4(2.0, 2.0, 2.0, 1.0); // Discard use out of X(-1,1),Y(-1,1),Z(0,1)\r\n\t}\r\n    gl_Position = remapPositionZ(gl_Position);\r\n\t#ifdef FOG\r\n        FogHandle(gl_Position.z);\r\n    #endif\r\n}\r\n","#define SHADER_NAME ParticleFS\r\n\r\n#include \"Scene.glsl\";\r\n#include \"SceneFog.glsl\";\r\n#include \"Color.glsl\";\r\n\r\nconst vec4 c_ColorSpace = vec4(4.59479380, 4.59479380, 4.59479380, 2.0);\r\n\r\nvarying vec4 v_Color;\r\nvarying vec2 v_TextureCoordinate;\r\n// uniform sampler2D u_texture;\r\n// uniform vec4 u_Tintcolor;\r\n\r\n#ifdef RENDERMODE_MESH\r\nvarying vec4 v_MeshColor;\r\n#endif\r\n\r\nvoid main()\r\n{\r\n    vec4 color;\r\n#ifdef RENDERMODE_MESH\r\n    color = v_MeshColor;\r\n#else\r\n    color = vec4(1.0);\r\n#endif\r\n\r\n#ifdef DIFFUSEMAP\r\n    vec4 colorT = texture2D(u_texture, v_TextureCoordinate);\r\n    #ifdef Gamma_u_texture\r\n    colorT = gammaToLinear(colorT);\r\n    #endif // Gamma_u_SpecularTexture\r\n    #ifdef TINTCOLOR\r\n    color *= colorT * u_Tintcolor * c_ColorSpace * v_Color;\r\n    #else\r\n    color *= colorT * v_Color;\r\n    #endif // TINTCOLORd\r\n#else\r\n    #ifdef TINTCOLOR\r\n    color *= u_Tintcolor * c_ColorSpace * v_Color;\r\n    #else\r\n    color *= v_Color;\r\n    #endif // TINTCOLOR\r\n#endif\r\n\r\n#ifdef FOG\r\n    color.rgb = scenUnlitFog(color.rgb);\r\n#endif // FOG\r\n    gl_FragColor = color;\r\n\r\n    gl_FragColor = outputTransform(gl_FragColor);\r\n}","import { Shader3D } from \"../../../RenderEngine/RenderShader/Shader3D\";\r\nimport { ShaderDataType } from \"../../../RenderEngine/RenderShader/ShaderData\";\r\nimport SkyProceduralVS from \"./SkyProceduralShader.vs\";\r\nimport SkyProceduralFS from \"./SkyProceduralShader.fs\";\r\nimport { Color } from \"../../../maths/Color\";\r\nimport { RenderState } from \"../../../RenderEngine/RenderShader/RenderState\";\r\nimport { AttributeMapType, SubShader } from \"../../../RenderEngine/RenderShader/SubShader\";\r\nimport { VertexMesh } from \"../../../RenderEngine/RenderShader/VertexMesh\";\r\nimport { CullMode } from \"../../../RenderEngine/RenderEnum/CullMode\";\r\n\r\nexport class SkyProceduralShaderInit {\r\n    static init() {\r\n        let attributeMap: AttributeMapType = {\r\n            \"a_Position\": [VertexMesh.MESH_POSITION0, ShaderDataType.Vector4]\r\n        };\r\n\r\n        let uniformMap = {\r\n            \"u_SunSize\": ShaderDataType.Float,\r\n            \"u_SunSizeConvergence\": ShaderDataType.Float,\r\n            \"u_AtmosphereThickness\": ShaderDataType.Float,\r\n            \"u_SkyTint\": ShaderDataType.Color,\r\n            \"u_GroundTint\": ShaderDataType.Color,\r\n            \"u_Exposure\": ShaderDataType.Float,\r\n        };\r\n\r\n        let defaultValue = {\r\n            \"u_SunSize\": 0.04,\r\n            \"u_SunSizeConvergence\": 5,\r\n            \"u_AtmosphereThickness\": 1.0,\r\n            \"u_SkyTint\": new Color(0.5, 0.5, 0.5, 1.0),\r\n            \"u_GroundTint\": new Color(0.369, 0.349, 0.341, 1.0),\r\n            \"u_Exposure\": 1.3,\r\n        };\r\n        let shader = Shader3D.add(\"SkyProcedural\");\r\n        \r\n        let subShader = new SubShader(attributeMap, uniformMap, defaultValue);\r\n        shader.addSubShader(subShader);\r\n        let pass = subShader.addShaderPass(SkyProceduralVS, SkyProceduralFS);\r\n        pass.renderState.depthTest = RenderState.DEPTHTEST_LEQUAL;\r\n        pass.renderState.cull = CullMode.Back;\r\n        pass.statefirst = true;\r\n    }\r\n}","#define SHADER_NAME SkyProceduralVS\r\n\r\n#include \"Camera.glsl\";\r\n\r\nconst float c_deg2ang = 3.141593 / 180.0;\r\n\r\n#define OUTER_RADIUS 1.025\r\n#define RAYLEIGH (mix(0.0, 0.0025, pow(u_AtmosphereThickness,2.5)))// Rayleigh constant Rayleigh为夜空光和极光亮度单位\r\n#define MIE 0.0010             // Mie constant 米氏散射\r\n#define SUN_BRIGHTNESS 20.0    // Sun brightness\r\n#define MAX_SCATTER 50.0 // Maximum scattering value, to prevent math overflows on Adrenos\r\n\r\nconst float SKY_GROUND_THRESHOLD = 0.02;\r\nconst float outerRadius = OUTER_RADIUS;\r\nconst float outerRadius2 = OUTER_RADIUS*OUTER_RADIUS;\r\nconst float innerRadius = 1.0;\r\nconst float innerRadius2 = 1.0;\r\nconst float cameraHeight = 0.0001;\r\n\r\nconst float HDSundiskIntensityFactor = 15.0;\r\nconst float simpleSundiskIntensityFactor = 27.0;\r\n\r\nconst float sunScale = 400.0 * SUN_BRIGHTNESS;\r\nconst float kmESun = MIE * SUN_BRIGHTNESS;\r\nconst float km4PI = MIE * 4.0 * 3.14159265;\r\nconst float scale = 1.0 / (OUTER_RADIUS - 1.0);\r\nconst float scaleDepth = 0.25;\r\nconst float scaleOverScaleDepth = (1.0 / (OUTER_RADIUS - 1.0)) / 0.25;\r\nconst float samples = 2.0; // THIS IS UNROLLED MANUALLY, DON'T TOUCH\r\n\r\n// RGB wavelengths        .35 (.62=158), .43 (.68=174), .525 (.75=190)\r\nconst vec3 c_DefaultScatteringWavelength = vec3(0.65, 0.57, 0.475);//默认散射波长\r\nconst vec3 c_VariableRangeForScatteringWavelength = vec3(0.15, 0.15, 0.15);//散射播放的可变范围\r\n\r\n// uniform vec4 u_SkyTint;\r\n// uniform vec4 u_GroundTint;\r\n// uniform float u_Exposure;\r\n// uniform float u_AtmosphereThickness;\r\nvec4 skyRemapGLPositionZ(vec4 position){\r\n\tposition.z = position.w;\r\n\treturn position;\r\n}\r\n//sprite\r\nuniform vec3 u_SunLight_direction;\r\nuniform vec4 u_SunLight_color;\r\n\r\nvarying vec3 v_GroundColor;\r\nvarying vec3 v_SkyColor;\r\n\r\n#ifdef SUN_HIGH_QUALITY\r\n\tvarying vec3 v_Vertex;\r\n#elif defined(SUN_SIMPLE)\r\n\tvarying vec3 v_RayDir;\r\n#else\r\n\tvarying float v_SkyGroundFactor;\r\n#endif\r\n\r\n#if defined(SUN_HIGH_QUALITY)||defined(SUN_SIMPLE)\r\n\tvarying vec3 v_SunColor;\r\n#endif\r\n\r\n// Calculates the Rayleigh phase function\r\nfloat getRayleighPhase(vec3 light, vec3 ray) \r\n{\r\n\tfloat eyeCos = dot(light, ray);\r\n\treturn 0.75 + 0.75*eyeCos*eyeCos;\r\n}\r\n\r\nfloat scaleAngle(float inCos)\r\n{\r\n\tfloat x = 1.0 - inCos;\r\n\treturn 0.25 * exp(-0.00287 + x*(0.459 + x*(3.83 + x*(-6.80 + x*5.25))));\r\n}\r\n\r\n\r\nvoid main(){\r\n    gl_Position = u_ViewProjection*a_Position;\r\n\r\n    vec3 skyTintInGammaSpace = pow(u_SkyTint.xyz,vec3(0.45));//u_SkyTint.xyz;//支持非GAMMA空间后要调整\r\n\tvec3 scatteringWavelength = mix(c_DefaultScatteringWavelength-c_VariableRangeForScatteringWavelength,c_DefaultScatteringWavelength+c_VariableRangeForScatteringWavelength,vec3(1.0) - skyTintInGammaSpace); // using Tint in sRGB+ gamma allows for more visually linear interpolation and to keep (0.5) at (128, gray in sRGB) point\r\n\tvec3 invWavelength = 1.0 / pow(scatteringWavelength, vec3(4.0));\r\n\r\n\tfloat krESun = RAYLEIGH * SUN_BRIGHTNESS;\r\n\tfloat kr4PI = RAYLEIGH * 4.0 * 3.14159265;\r\n\r\n\tvec3 cameraPos = vec3(0.0,innerRadius + cameraHeight,0.0); // The camera's current position\r\n\r\n\t// Get the ray from the camera to the vertex and its length (which is the far point of the ray passing through the atmosphere)\r\n\tvec3 eyeRay = normalize(a_Position.xyz);\r\n\r\n\tfloat far = 0.0;\r\n\tvec3 cIn, cOut;\r\n\tif (eyeRay.y >= 0.0) {// Sky\r\n\t\t// Calculate the length of the \"atmosphere\"\r\n\t\tfar = sqrt(outerRadius2 + innerRadius2 * eyeRay.y * eyeRay.y - innerRadius2) - innerRadius * eyeRay.y;\r\n\r\n\t\t// Calculate the ray's starting position, then calculate its scattering offset\r\n\t\tfloat height = innerRadius + cameraHeight;\r\n\t\tfloat depth = exp(scaleOverScaleDepth * -cameraHeight);\r\n\t\tfloat startAngle = dot(eyeRay, cameraPos) / height;\r\n\t\tfloat startOffset = depth*scaleAngle(startAngle);\r\n\r\n\t\t// Initialize the scattering loop variables\r\n\t\tfloat sampleLength = far / samples;\r\n\t\tfloat scaledLength = sampleLength * scale;\r\n\t\tvec3 sampleRay = eyeRay * sampleLength;\r\n\t\tvec3 samplePoint = cameraPos + sampleRay * 0.5;\r\n\r\n\t\tvec3 frontColor = vec3(0.0);\r\n\t\t//unrolling this manually to avoid some platform for loop slow\r\n\t\t{\r\n\t\t\tfloat height = length(samplePoint);\r\n\t\t\tfloat depth = exp(scaleOverScaleDepth * (innerRadius - height));\r\n\t\t\tfloat lightAngle = dot(-u_SunLight_direction, samplePoint) / height;\r\n\t\t\tfloat cameraAngle = dot(eyeRay, samplePoint) / height;\r\n\t\t\tfloat scatter = (startOffset + depth*(scaleAngle(lightAngle) - scaleAngle(cameraAngle)));\r\n\t\t\tvec3 attenuate = exp(-clamp(scatter, 0.0, MAX_SCATTER) * (invWavelength * kr4PI + km4PI));\r\n\r\n\t\t\tfrontColor += attenuate * (depth * scaledLength);\r\n\t\t\tsamplePoint += sampleRay;\r\n\t\t}\r\n\t\t{\r\n\t\t\tfloat height = length(samplePoint);\r\n\t\t\tfloat depth = exp(scaleOverScaleDepth * (innerRadius - height));\r\n\t\t\tfloat lightAngle = dot(-u_SunLight_direction, samplePoint) / height;\r\n\t\t\tfloat cameraAngle = dot(eyeRay, samplePoint) / height;\r\n\t\t\tfloat scatter = (startOffset + depth*(scaleAngle(lightAngle) - scaleAngle(cameraAngle)));\r\n\t\t\tvec3 attenuate = exp(-clamp(scatter, 0.0, MAX_SCATTER) * (invWavelength * kr4PI + km4PI));\r\n\r\n\t\t\tfrontColor += attenuate * (depth * scaledLength);\r\n\t\t\tsamplePoint += sampleRay;\r\n\t\t}\r\n\r\n\t\t// Finally, scale the Mie and Rayleigh colors and set up the varying variables for the pixel shader\r\n\t\tcIn = frontColor * (invWavelength * krESun);\r\n\t\tcOut = frontColor * kmESun;\r\n\t} else {// Ground\r\n\t\tfar = (-cameraHeight) / (min(-0.001, eyeRay.y));\r\n\t\tvec3 pos = cameraPos + far * eyeRay;\r\n\r\n\t\t// Calculate the ray's starting position, then calculate its scattering offset\r\n\t\tfloat depth = exp((-cameraHeight) * (1.0/scaleDepth));\r\n\t\tfloat cameraAngle = dot(-eyeRay, pos);\r\n\t\tfloat lightAngle = dot(-u_SunLight_direction, pos);\r\n\t\tfloat cameraScale = scaleAngle(cameraAngle);\r\n\t\tfloat lightScale = scaleAngle(lightAngle);\r\n\t\tfloat cameraOffset = depth*cameraScale;\r\n\t\tfloat temp = lightScale + cameraScale;\r\n\r\n\t\t// Initialize the scattering loop variables\r\n\t\tfloat sampleLength = far / samples;\r\n\t\tfloat scaledLength = sampleLength * scale;\r\n\t\tvec3 sampleRay = eyeRay * sampleLength;\r\n\t\tvec3 samplePoint = cameraPos + sampleRay * 0.5;\r\n\r\n\t\t// Now loop through the sample rays\r\n\t\tvec3 frontColor = vec3(0.0, 0.0, 0.0);\r\n\t\tvec3 attenuate;\r\n\r\n\t\t// Loop removed because we kept hitting SM2.0 temp variable limits. Doesn't affect the image too much.\r\n\t\t{\r\n\t\t\tfloat height = length(samplePoint);\r\n\t\t\tfloat depth = exp(scaleOverScaleDepth * (innerRadius - height));\r\n\t\t\tfloat scatter = depth*temp - cameraOffset;\r\n\t\t\tattenuate = exp(-clamp(scatter, 0.0, MAX_SCATTER) * (invWavelength * kr4PI + km4PI));\r\n\t\t\tfrontColor += attenuate * (depth * scaledLength);\r\n\t\t\tsamplePoint += sampleRay;\r\n\t\t}\r\n\r\n\t\tcIn = frontColor * (invWavelength * krESun + kmESun);\r\n\t\tcOut = clamp(attenuate, 0.0, 1.0);\r\n\t}\r\n\r\n\t#ifdef SUN_HIGH_QUALITY\r\n\t\tv_Vertex = -a_Position.xyz;\r\n\t#elif defined(SUN_SIMPLE) \r\n\t\tv_RayDir = -eyeRay;\r\n\t#else\r\n\t\tv_SkyGroundFactor = -eyeRay.y / SKY_GROUND_THRESHOLD;\r\n\t#endif\r\n\r\n\t// if we want to calculate color in vprog:\r\n\t// in case of linear: multiply by _Exposure in here (even in case of lerp it will be common multiplier, so we can skip mul in fshader)\r\n\tv_GroundColor = u_Exposure * (cIn + u_GroundTint.xyz * cOut);//u_GroundColor*u_GroundColor is gamma space convert to linear space\r\n\tv_SkyColor    = u_Exposure * (cIn * getRayleighPhase(-u_SunLight_direction, -eyeRay));\r\n\r\n\t\r\n\t// The sun should have a stable intensity in its course in the sky. Moreover it should match the highlight of a purely specular material.\r\n\t// This matching was done using the Unity3D standard shader BRDF1 on the 5/31/2017\r\n\t// Finally we want the sun to be always bright even in LDR thus the normalization of the lightColor for low intensity.\r\n\tfloat lightColorIntensity = clamp(length(u_SunLight_color.xyz), 0.25, 1.0);\r\n\r\n\t#ifdef SUN_HIGH_QUALITY \r\n\t\tv_SunColor = HDSundiskIntensityFactor * clamp(cOut,0.0,1.0) * u_SunLight_color.xyz / lightColorIntensity;\r\n\t#elif defined(SUN_SIMPLE) \r\n\t\tv_SunColor = simpleSundiskIntensityFactor * clamp(cOut * sunScale,0.0,1.0) * u_SunLight_color.xyz / lightColorIntensity;\r\n\t#endif\r\n\tgl_Position=skyRemapGLPositionZ(gl_Position);\r\n}","#define SHADER_NAME SkyProceduralFS\r\n\r\n#include \"Color.glsl\";\r\n\r\nconst float MIE_G = -0.990;\r\nconst float MIE_G2 = 0.9801;\r\nconst float SKY_GROUND_THRESHOLD = 0.02;\r\n\r\n// uniform float u_SunSize;\r\n// uniform float u_SunSizeConvergence;\r\n\r\nuniform vec3 u_SunLight_direction;\r\n\r\nvarying vec3 v_GroundColor;\r\nvarying vec3 v_SkyColor;\r\n\r\n#ifdef SUN_HIGH_QUALITY\r\nvarying vec3 v_Vertex;\r\n#elif defined(SUN_SIMPLE)\r\nvarying vec3 v_RayDir;\r\n#else\r\nvarying float v_SkyGroundFactor;\r\n#endif\r\n\r\n#if defined(SUN_HIGH_QUALITY) || defined(SUN_SIMPLE)\r\nvarying vec3 v_SunColor;\r\n#endif\r\n\r\n// Calculates the Mie phase function\r\nfloat getMiePhase(float eyeCos, float eyeCos2)\r\n{\r\n    float temp = 1.0 + MIE_G2 - 2.0 * MIE_G * eyeCos;\r\n    temp = pow(temp, pow(u_SunSize, 0.65) * 10.0);\r\n    temp = max(temp, 1.0e-4); // prevent division by zero, esp. in half precision\r\n    temp = 1.5 * ((1.0 - MIE_G2) / (2.0 + MIE_G2)) * (1.0 + eyeCos2) / temp;\r\n    return temp;\r\n}\r\n\r\n// Calculates the sun shape\r\nfloat calcSunAttenuation(vec3 lightPos, vec3 ray)\r\n{\r\n#ifdef SUN_HIGH_QUALITY\r\n    float focusedEyeCos = pow(clamp(dot(lightPos, ray), 0.0, 1.0), u_SunSizeConvergence);\r\n    return getMiePhase(-focusedEyeCos, focusedEyeCos * focusedEyeCos);\r\n#else // SUN_SIMPLE\r\n    vec3 delta = lightPos - ray;\r\n    float dist = length(delta);\r\n    float spot = 1.0 - smoothstep(0.0, u_SunSize, dist);\r\n    return spot * spot;\r\n#endif\r\n}\r\n\r\nvoid main()\r\n{\r\n    // if y > 1 [eyeRay.y < -SKY_GROUND_THRESHOLD] - ground\r\n    // if y >= 0 and < 1 [eyeRay.y <= 0 and > -SKY_GROUND_THRESHOLD] - horizon\r\n    // if y < 0 [eyeRay.y > 0] - sky\r\n    vec3 col = vec3(0.0, 0.0, 0.0);\r\n\r\n#ifdef SUN_HIGH_QUALITY\r\n    vec3 ray = normalize(v_Vertex);\r\n    float y = ray.y / SKY_GROUND_THRESHOLD;\r\n#elif defined(SUN_SIMPLE)\r\n    vec3 ray = v_RayDir;\r\n    float y = ray.y / SKY_GROUND_THRESHOLD;\r\n#else\r\n    float y = v_SkyGroundFactor;\r\n#endif\r\n\r\n    // if we did precalculate color in vprog: just do lerp between them\r\n    col = mix(v_SkyColor, v_GroundColor, clamp(y, 0.0, 1.0));\r\n\r\n#if defined(SUN_HIGH_QUALITY) || defined(SUN_SIMPLE)\r\n    if (y < 0.0)\r\n\tcol += v_SunColor * calcSunAttenuation(-u_SunLight_direction, -ray);\r\n#endif\r\n\r\n    // col = sqrt(col);//linear space convert to gamma space\r\n    gl_FragColor = vec4(col, 1.0);\r\n\r\n    gl_FragColor = outputTransform(gl_FragColor);\r\n}\r\n","import { Shader3D } from \"../../../RenderEngine/RenderShader/Shader3D\";\r\nimport { ShaderDataType } from \"../../../RenderEngine/RenderShader/ShaderData\";\r\nimport SkyPanoramicVS from \"./SkyPanoramic.vs\";\r\nimport SkyPanoramicFS from \"./SkyPanoramic.fs\";\r\nimport { Texture2D } from \"../../../resource/Texture2D\";\r\nimport { Color } from \"../../../maths/Color\";\r\nimport { Vector4 } from \"../../../maths/Vector4\";\r\nimport { RenderState } from \"../../../RenderEngine/RenderShader/RenderState\";\r\nimport { AttributeMapType, SubShader } from \"../../../RenderEngine/RenderShader/SubShader\";\r\nimport { VertexMesh } from \"../../../RenderEngine/RenderShader/VertexMesh\";\r\nimport { CullMode } from \"../../../RenderEngine/RenderEnum/CullMode\";\r\n\r\nexport class SkyPanoramicShaderInit {\r\n    static init() {\r\n        let attributeMap: AttributeMapType = {\r\n            \"a_Position\": [VertexMesh.MESH_POSITION0, ShaderDataType.Vector4]\r\n        };\r\n\r\n        let uniformMap = {\r\n            'u_TintColor': ShaderDataType.Color,\r\n            'u_Rotation': ShaderDataType.Float,\r\n            'u_Texture': ShaderDataType.Texture2D,\r\n            'u_Exposure':ShaderDataType.Float,\r\n        };\r\n\r\n        let defaultValue = {\r\n            'u_TintColor': new Color(0.5,0.5,0.5,1.0),\r\n            'u_Exposure': 1.3,\r\n            'u_Rotation': 0,\r\n            'u_Texture': Texture2D.grayTexture,\r\n        };\r\n        let shader = Shader3D.add(\"SkyPanoramic\");\r\n        let subShader = new SubShader(attributeMap, uniformMap, defaultValue);\r\n        shader.addSubShader(subShader);\r\n        let pass = subShader.addShaderPass(SkyPanoramicVS, SkyPanoramicFS);\r\n        pass.renderState.depthTest = RenderState.DEPTHTEST_LEQUAL;\r\n        pass.renderState.cull = CullMode.Back;\r\n        pass.statefirst = true;\r\n    }\r\n}","#define SHADER_NAME SkyPanoramicVS\r\n\r\n#include \"Camera.glsl\";\r\n#define PI 3.14159265359\r\n\r\n//attribute vec4 a_Position;\r\n\r\n//uniform float u_Rotation;\r\n\r\nvarying vec3 v_Texcoord;\r\nvarying vec2 v_Image180ScaleAndCutoff;\r\nvarying vec4 v_Layout3DScaleAndOffset;\r\n\r\nvec4 skyRemapGLPositionZ(vec4 position){\r\n\tposition.z = position.w;\r\n\treturn position;\r\n}\r\n\r\nvec4 rotateAroundYInDegrees (vec4 vertex, float degrees)\r\n{\r\n\tfloat angle = degrees * PI / 180.0;\r\n\tfloat sina=sin(angle);\r\n\tfloat cosa=cos(angle);\r\n\tmat2 m = mat2(cosa, -sina, sina, cosa);\r\n\treturn vec4(m*vertex.xz, vertex.yw).xzyw;\r\n}\r\n\t\r\nvoid main()\r\n{\r\n\tvec4 position = rotateAroundYInDegrees(a_Position, u_Rotation);\r\n\t\r\n\r\n\tv_Texcoord=vec3(-a_Position.x,-a_Position.y,a_Position.z);// NOTE: -a_Position.x convert coords system\r\n\r\n\t// Calculate constant horizontal scale and cutoff for 180 (vs 360) image type\r\n\tv_Image180ScaleAndCutoff = vec2(1.0, 1.0);// 360 degree mode\r\n\r\n\t// Calculate constant scale and offset for 3D layouts\r\n\tv_Layout3DScaleAndOffset = vec4(0,0,1,1);\r\n\tgl_Position = u_ViewProjection*position;\r\n\tgl_Position=skyRemapGLPositionZ(gl_Position);\r\n\r\n}\r\n","#define SHADER_NAME SkyPanoramicVS\r\n\r\n#include \"Color.glsl\";\r\n\r\nvarying vec3 v_Texcoord;\r\nvarying vec2 v_Image180ScaleAndCutoff;\r\nvarying vec4 v_Layout3DScaleAndOffset;\r\nconst vec4 c_ColorSpace = vec4(4.59479380, 4.59479380, 4.59479380, 2.0);\r\n\r\nvec2 ToRadialCoords(vec3 coords)\r\n{\r\n    vec3 normalizedCoords = normalize(coords);\r\n    float latitude = acos(normalizedCoords.y);\r\n    float longitude = atan(normalizedCoords.z, normalizedCoords.x);\r\n    vec2 sphereCoords = vec2(longitude, latitude) * vec2(0.5 / PI, 1.0 / PI);\r\n    return vec2(0.5, 1.0) - sphereCoords;\r\n}\r\n\r\nvoid main()\r\n{\r\n    vec2 tc = ToRadialCoords(v_Texcoord);\r\n    if (tc.x > v_Image180ScaleAndCutoff.y)\r\n\tgl_FragColor = vec4(0, 0, 0, 1);\r\n    tc.x = mod(tc.x * v_Image180ScaleAndCutoff.x, 1.0);\r\n    tc = (tc + v_Layout3DScaleAndOffset.xy) * v_Layout3DScaleAndOffset.zw;\r\n\r\n    mediump vec4 tex = texture2D(u_Texture, tc);\r\n#ifdef Gamma_u_Texture\r\n    tex = gammaToLinear(tex);\r\n#endif // Gamma_u_Texture\r\n    mediump vec3 c = tex.xyz;\r\n    c = c * u_TintColor.rgb * c_ColorSpace.rgb;\r\n    c *= u_Exposure;\r\n    gl_FragColor = vec4(c, 1.0);\r\n\r\n    gl_FragColor = outputTransform(gl_FragColor);\r\n}\r\n","import { Shader3D } from \"../../../../RenderEngine/RenderShader/Shader3D\";\r\n\r\nimport UtillitiesColorGLSL from \"./lib/UtillitiesColor.glsl\";\r\nimport TransformCommonGLSL from \"./lib/TransformCommon.glsl\";\r\nimport RRTCommonGLSL from \"./lib/RRTCommon.glsl\";\r\nimport ODTCommonGLSL from \"./lib/ODTCommon.glsl\";\r\nimport TonescalesGLSL from \"./lib/Tonescales.glsl\";\r\n\r\nimport RRTGLSL from \"./rrt/RRT.glsl\";\r\nimport ODT_sRGB_100nits_GLSL from \"./odt/ODT_sRGB_100nits.glsl\";\r\n\r\nimport ACESGLSL from \"./ACES.glsl\";\r\n\r\nexport class ACESShaderLib {\r\n\r\n    static init() {\r\n        Shader3D.addInclude(\"ACES_UtillitiesColor.glsl\", UtillitiesColorGLSL);\r\n        Shader3D.addInclude(\"ACES_TransformCommon.glsl\", TransformCommonGLSL);\r\n        Shader3D.addInclude(\"ACES_Tonescales.glsl\", TonescalesGLSL);\r\n        Shader3D.addInclude(\"ACES_RRTCommon.glsl\", RRTCommonGLSL);\r\n        Shader3D.addInclude(\"ACES_ODTCommon.glsl\", ODTCommonGLSL);\r\n\r\n        Shader3D.addInclude(\"ACES_RRT.glsl\", RRTGLSL);\r\n        Shader3D.addInclude(\"ACES_ODT_sRGB_100nits.glsl\", ODT_sRGB_100nits_GLSL);\r\n\r\n        Shader3D.addInclude(\"ACES.glsl\", ACESGLSL);\r\n    }\r\n\r\n}","#if !defined(UtillitiesColor_lib)\r\n#define UtillitiesColor_lib\r\n\r\n// Transformations between CIE XYZ tristimulus values and CIE x,y\r\n// chromaticity coordinates\r\nvec3 XYZ_2_xyY(vec3 XYZ)\r\n{\r\n    vec3 xyY;\r\n    float divisor = max(XYZ.x + XYZ.y + XYZ.z, 1e-10);\r\n    xyY.x = XYZ.x / divisor;\r\n    xyY.y = XYZ.y / divisor;\r\n    xyY.z = XYZ.y;\r\n    return xyY;\r\n}\r\n\r\nvec3 xyY_2_XYZ(vec3 xyY)\r\n{\r\n    vec3 XYZ;\r\n    XYZ.x = xyY.x * xyY.z / max(xyY.y, 1e-10);\r\n    XYZ.y = xyY.z;\r\n    XYZ.z = (1.0 - xyY.x - xyY.y) * xyY.z / max(xyY.y, 1e-10);\r\n    return XYZ;\r\n}\r\n\r\nfloat rgb_2_yc(vec3 rgb, float ycRadiusWeight)\r\n{\r\n    float r = rgb.r;\r\n    float g = rgb.g;\r\n    float b = rgb.b;\r\n    float k = b * (b - g) + g * (g - r) + r * (r - b);\r\n    k = max(MEDIUMP_FLT_MIN, k);\r\n    float chroma = sqrt(k);\r\n    return (b + g + r + ycRadiusWeight * chroma) / 3.0;\r\n}\r\n\r\nfloat rgb_2_yc(vec3 rgb)\r\n{\r\n    return rgb_2_yc(rgb, 1.75);\r\n}\r\n\r\n// Transformations from RGB to other color representations\r\n\r\n// Returns a geometric hue angle in degrees (0-360) based on RGB values.\r\nfloat rgb_2_hue(vec3 rgb)\r\n{\r\n    float hue;\r\n    // For neutral colors, hue is undefined and the function will return a quiet NaN value.\r\n    // if (rgb.r == rgb.g && rgb.g == rgb.b) {\r\n    //     // hue = FLT_NAN;\r\n    //     // todo FLT_NAN\r\n    //     hue = 0.0;\r\n    // } else {\r\n    //     hue = (180.0 * INVERT_PI) * atan2(sqrt(3.0) * (rgb.g - rgb.b), 2.0 * rgb.r - rgb.g - rgb.b);\r\n    // }\r\n    if (rgb.x == rgb.y && rgb.y == rgb.z)\r\n        hue = 0.0; // RGB triplets where RGB are equal have an undefined hue\r\n    else\r\n        hue = (180.0 * INVERT_PI) * atan(sqrt(3.0) * (rgb.y - rgb.z), 2.0 * rgb.x - rgb.y - rgb.z);\r\n\r\n    if (hue < 0.0) {\r\n        hue = hue + 360.0;\r\n    }\r\n\r\n    return hue;\r\n}\r\n\r\n#endif // UtillitiesColor_lib","#if !defined(TransformCommon_lib)\r\n    #define TransformCommon_lib\r\n\r\nconst float TINY = 1e-10;\r\n\r\n// sRGB D65 to AP0 D60\r\n// https://www.colour-science.org:8010/apps/rgb_colourspace_transformation_matrix CAT 02\r\nconst mat3 sRGB_to_AP0_MAT = mat3(\r\n    vec3(0.4395856442, 0.0895395735, 0.0173871832),\r\n    vec3(0.3839294030, 0.8147498351, 0.1087391143),\r\n    vec3(0.1765327364, 0.0956836061, 0.8738205876));\r\n\r\n// sRGB D65 to AP1 D60\r\n// https://www.colour-science.org:8010/apps/rgb_colourspace_transformation_matrix CAT 02\r\nconst mat3 sRGB_to_AP1_MAT = mat3(\r\n    vec3(0.6131178129, 0.0699340823, 0.0204629926),\r\n    vec3(0.3411819959, 0.9181030375, 0.1067686634),\r\n    vec3(0.0457873443, 0.0119327755, 0.8727159106));\r\n\r\nconst mat3 AP1_to_XYZ_MAT = mat3(\r\n    vec3(0.6624541811, 0.2722287168, -0.0055746495),\r\n    vec3(0.1340042065, 0.6740817658, 0.0040607335),\r\n    vec3(0.1561876870, 0.0536895174, 1.0103391003));\r\n\r\nconst mat3 AP0_to_AP1_MAT = mat3(\r\n    vec3(1.4514393161, -0.0765537734, 0.0083161484),\r\n    vec3(-0.2365107469, 1.1762296998, -0.0060324498),\r\n    vec3(-0.2149285693, -0.0996759264, 0.9977163014));\r\n\r\nconst mat3 AP1_to_AP0_MAT = mat3(\r\n    vec3(0.6954522414, 0.0447945634, -0.0055258826),\r\n    vec3(0.1406786965, 0.8596711185, 0.0040252103),\r\n    vec3(0.1638690622, 0.0955343182, 1.0015006723));\r\n\r\nconst mat3 XYZ_to_AP1_MAT = mat3(\r\n    vec3(1.6410233797, -0.6636628587, 0.0117218943),\r\n    vec3(-0.3248032942, 1.6153315917, -0.0082844420),\r\n    vec3(-0.2364246952, 0.0167563477, 0.9883948585));\r\n\r\nconst vec3 AP1_RGB2Y = vec3(0.2722287168, 0.6740817658, 0.0536895174);\r\n\r\nfloat ACES_to_ACEScc(float x)\r\n{\r\n    // if (x <= 0.0)\r\n    // return -0.35828683;\r\n    // else if (x < pow(2.0, -15.0))\r\n    // return (log2(pow(2.0, -16.0) + x * 0.5) + 9.72) / 17.52;\r\n    // else\r\n    // return (log2(x) + 9.72) / 17.52;\r\n\r\n    return (x < 0.00003051757) ? (log2(0.00001525878 + x * 0.5) + 9.72) / 17.52 : (log2(x) + 9.72) / 17.52;\r\n}\r\n\r\nvec3 ACES_to_ACEScc(vec3 x)\r\n{\r\n    x = clamp(x, vec3(0.0), vec3(MEDIUMP_FLT_MAX));\r\n    x.x = ACES_to_ACEScc(x.x);\r\n    x.y = ACES_to_ACEScc(x.y);\r\n    x.z = ACES_to_ACEScc(x.z);\r\n\r\n    return x;\r\n}\r\n\r\nfloat ACEScc_to_ACES(float x)\r\n{\r\n    if (x < -0.3013698630)\r\n\treturn (pow(2.0, x * 17.52 - 9.72) - pow(2.0, -16.0)) * 2.0;\r\n    else if (x < (log2(MEDIUMP_FLT_MAX) + 9.72) / 17.52)\r\n\treturn pow(2.0, x * 17.52 - 9.72);\r\n    else\r\n\treturn MEDIUMP_FLT_MAX;\r\n}\r\n\r\nvec3 ACEScc_to_ACES(vec3 x)\r\n{\r\n    x.x = ACEScc_to_ACES(x.x);\r\n    x.y = ACEScc_to_ACES(x.y);\r\n    x.z = ACEScc_to_ACES(x.z);\r\n    return x;\r\n}\r\n\r\nfloat rgb_2_saturation(vec3 rgb)\r\n{\r\n    float rgbmax = vecmax(rgb);\r\n    float rgbmin = vecmin(rgb);\r\n    return (max(rgbmax, TINY) - max(rgbmin, TINY)) / max(rgbmax, 1e-2);\r\n}\r\n\r\n#endif // TransformCommon_lib","#if !defined(Tonescales_lib)\r\n#define Tonescales_lib\r\n\r\nconst mat3 M = mat3(\r\n    vec3(0.5, -1.0, 0.5),\r\n    vec3(-1.0, 1.0, 0.5),\r\n    vec3(0.5, 0.0, 0.0));\r\n\r\nfloat segmented_spline_c5_fwd(float x)\r\n{\r\n#ifdef GRAPHICS_API_GLES3\r\n    const float coefsLow[6] = float[6](-4.0000000000, -4.0000000000, -3.1573765773, -0.4852499958, 1.8477324706, 1.8477324706);\r\n    const float coefsHigh[6] = float[6](-0.7185482425, 2.0810307172, 3.6681241237, 4.0000000000, 4.0000000000, 4.0000000000);\r\n#else\r\n    const float coefsLow_0 = -4.0000000000;\r\n    const float coefsLow_1 = -4.0000000000;\r\n    const float coefsLow_2 = -3.1573765773;\r\n    const float coefsLow_3 = -0.4852499958;\r\n    const float coefsLow_4 = 1.8477324706;\r\n    const float coefsLow_5 = 1.8477324706;\r\n\r\n    const float coefsHigh_0 = -0.7185482425;\r\n    const float coefsHigh_1 = 2.0810307172;\r\n    const float coefsHigh_2 = 3.6681241237;\r\n    const float coefsHigh_3 = 4.0000000000;\r\n    const float coefsHigh_4 = 4.0000000000;\r\n    const float coefsHigh_5 = 4.0000000000;\r\n#endif // GRAPHICS_API_GLES3\r\n\r\n    const vec2 minPoint = vec2(0.0000054931640625, 0.0001);\r\n    const vec2 midPoint = vec2(0.18, 4.8);\r\n    const vec2 maxPoint = vec2(47185.92, 10000.);\r\n    const float slopeLow = 0.0;\r\n    const float slopeHigh = 0.0;\r\n\r\n    const int N_KNOTS_LOW = 4;\r\n    const int N_KNOTS_HIGH = 4;\r\n\r\n    float logx = log10(max(x, MEDIUMP_FLT_MIN));\r\n    float logy;\r\n\r\n    if (logx <= log10(minPoint.x)) {\r\n        logy = logx * slopeLow + (log10(minPoint.y) - slopeLow * log10(minPoint.x));\r\n    } else if ((logx > log10(minPoint.x)) && (logx < log10(midPoint.x))) {\r\n        float knot_coord = float(N_KNOTS_LOW - 1) * (logx - log10(minPoint.x)) / (log10(midPoint.x) - log10(minPoint.x));\r\n        int j = int(knot_coord);\r\n        float t = knot_coord - float(j);\r\n        vec3 cf;\r\n#ifdef GRAPHICS_API_GLES3\r\n        cf = vec3(coefsLow[j], coefsLow[j + 1], coefsLow[j + 2]);\r\n#else\r\n        if (j <= 0) {\r\n            cf = vec3(coefsLow_0, coefsLow_1, coefsLow_2);\r\n        } else if (j == 1) {\r\n            cf = vec3(coefsLow_1, coefsLow_2, coefsLow_3);\r\n        } else if (j == 2) {\r\n            cf = vec3(coefsLow_2, coefsLow_3, coefsLow_4);\r\n        } else { // if (j == 3)\r\n            cf = vec3(coefsLow_3, coefsLow_4, coefsLow_5);\r\n        }\r\n#endif // GRAPHICS_API_GLES3\r\n\r\n        vec3 monomials = vec3(t * t, t, 1.);\r\n        logy = dot(monomials, M * cf);\r\n    } else if ((logx >= log10(midPoint.x)) && (logx < log10(maxPoint.x))) {\r\n        float knot_coord = float(N_KNOTS_HIGH - 1) * (logx - log10(midPoint.x)) / (log10(maxPoint.x) - log10(midPoint.x));\r\n        int j = int(knot_coord);\r\n        float t = knot_coord - float(j);\r\n        vec3 cf;\r\n#ifdef GRAPHICS_API_GLES3\r\n        cf = vec3(coefsHigh[j], coefsHigh[j + 1], coefsHigh[j + 2]);\r\n#else\r\n        if (j <= 0) {\r\n            cf = vec3(coefsHigh_0, coefsHigh_1, coefsHigh_2);\r\n        } else if (j == 1) {\r\n            cf = vec3(coefsHigh_1, coefsHigh_2, coefsHigh_3);\r\n        } else if (j == 2) {\r\n            cf = vec3(coefsHigh_2, coefsHigh_3, coefsHigh_4);\r\n        } else { // if (j == 3)\r\n            cf = vec3(coefsHigh_3, coefsHigh_4, coefsHigh_5);\r\n        }\r\n#endif // #ifdef GRAPHICS_API_GLES3\r\n        vec3 monomials = vec3(t * t, t, 1.);\r\n        logy = dot(monomials, M * cf);\r\n    } else {\r\n        logy = logx * slopeHigh + (log10(maxPoint.y) - slopeHigh * log10(maxPoint.x));\r\n    }\r\n    return pow(10.0, logy);\r\n}\r\n\r\nfloat segmented_spline_c9_fwd(float x)\r\n{\r\n// ODT_48nits\r\n#ifdef GRAPHICS_API_GLES3\r\n    const float coefsLow[10] = float[10](-1.6989700043, -1.6989700043, -1.4779000000, -1.2291000000, -0.8648000000, -0.4480000000, 0.0051800000, 0.4511080334, 0.9113744414, 0.9113744414);\r\n    const float coefsHigh[10] = float[10](0.5154386965, 0.8470437783, 1.1358000000, 1.3802000000, 1.5197000000, 1.5985000000, 1.6467000000, 1.6746091357, 1.6878733390, 1.6878733390);\r\n#else\r\n    const float coefsLow_0 = -1.6989700043;\r\n    const float coefsLow_1 = -1.6989700043;\r\n    const float coefsLow_2 = -1.4779000000;\r\n    const float coefsLow_3 = -1.2291000000;\r\n    const float coefsLow_4 = -0.8648000000;\r\n    const float coefsLow_5 = -0.4480000000;\r\n    const float coefsLow_6 = 0.0051800000;\r\n    const float coefsLow_7 = 0.4511080334;\r\n    const float coefsLow_8 = 0.9113744414;\r\n    const float coefsLow_9 = 0.9113744414;\r\n\r\n    const float coefsHigh_0 = 0.5154386965;\r\n    const float coefsHigh_1 = 0.8470437783;\r\n    const float coefsHigh_2 = 1.1358000000;\r\n    const float coefsHigh_3 = 1.3802000000;\r\n    const float coefsHigh_4 = 1.5197000000;\r\n    const float coefsHigh_5 = 1.5985000000;\r\n    const float coefsHigh_6 = 1.6467000000;\r\n    const float coefsHigh_7 = 1.6746091357;\r\n    const float coefsHigh_8 = 1.6878733390;\r\n    const float coefsHigh_9 = 1.6878733390;\r\n#endif // GRAPHICS_API_GLES3\r\n\r\n    // todo const\r\n    vec2 minPoint = vec2(segmented_spline_c5_fwd(0.18 * pow(2.0, -6.5)), 0.02);\r\n    vec2 midPoint = vec2(segmented_spline_c5_fwd(0.18), 4.8);\r\n    vec2 maxPoint = vec2(segmented_spline_c5_fwd(0.18 * pow(2., 6.5)), 48.0);\r\n\r\n    const float slopeLow = 0.0;\r\n    const float slopeHigh = 0.04;\r\n\r\n    const int N_KNOTS_LOW = 8;\r\n    const int N_KNOTS_HIGH = 8;\r\n\r\n    float logx = log10(max(x, MEDIUMP_FLT_MIN));\r\n    float logy;\r\n\r\n    if (logx <= log10(minPoint.x)) {\r\n        logy = logx * slopeLow + (log10(minPoint.y) - slopeLow * log10(minPoint.x));\r\n    } else if ((logx > log10(minPoint.x)) && (logx < log10(midPoint.x))) {\r\n        float knot_coord = float(N_KNOTS_LOW - 1) * (logx - log10(minPoint.x)) / (log10(midPoint.x) - log10(minPoint.x));\r\n        int j = int(knot_coord);\r\n        float t = knot_coord - float(j);\r\n        vec3 cf;\r\n#ifdef GRAPHICS_API_GLES3\r\n        cf = vec3(coefsLow[j], coefsLow[j + 1], coefsLow[j + 2]);\r\n#else\r\n        if (j <= 0) {\r\n            cf = vec3(coefsLow_0, coefsLow_1, coefsLow_2);\r\n        } else if (j == 1) {\r\n            cf = vec3(coefsLow_1, coefsLow_2, coefsLow_3);\r\n        } else if (j == 2) {\r\n            cf = vec3(coefsLow_2, coefsLow_3, coefsLow_4);\r\n        } else if (j == 3) {\r\n            cf = vec3(coefsLow_3, coefsLow_4, coefsLow_5);\r\n        } else if (j == 4) {\r\n            cf = vec3(coefsLow_4, coefsLow_5, coefsLow_6);\r\n        } else if (j == 5) {\r\n            cf = vec3(coefsLow_5, coefsLow_6, coefsLow_7);\r\n        } else if (j == 6) {\r\n            cf = vec3(coefsLow_6, coefsLow_7, coefsLow_8);\r\n        } else { // if (j == 7)\r\n            cf = vec3(coefsLow_7, coefsLow_8, coefsLow_9);\r\n        }\r\n#endif // GRAPHICS_API_GLES3\r\n        vec3 monomials = vec3(t * t, t, 1.0);\r\n        logy = dot(monomials, M * cf);\r\n    } else if ((logx >= log10(midPoint.x)) && (logx < log10(maxPoint.x))) {\r\n        float knot_coord = float(N_KNOTS_HIGH - 1) * (logx - log10(midPoint.x)) / (log10(maxPoint.x) - log10(midPoint.x));\r\n        int j = int(knot_coord);\r\n        float t = knot_coord - float(j);\r\n        vec3 cf;\r\n#ifdef GRAPHICS_API_GLES3\r\n        cf = vec3(coefsHigh[j], coefsHigh[j + 1], coefsHigh[j + 2]);\r\n#else\r\n        if (j <= 0) {\r\n            cf = vec3(coefsHigh_0, coefsHigh_1, coefsHigh_2);\r\n        } else if (j == 1) {\r\n            cf = vec3(coefsHigh_1, coefsHigh_2, coefsHigh_3);\r\n        } else if (j == 2) {\r\n            cf = vec3(coefsHigh_2, coefsHigh_3, coefsHigh_4);\r\n        } else if (j == 3) {\r\n            cf = vec3(coefsHigh_3, coefsHigh_4, coefsHigh_5);\r\n        } else if (j == 4) {\r\n            cf = vec3(coefsHigh_4, coefsHigh_5, coefsHigh_6);\r\n        } else if (j == 5) {\r\n            cf = vec3(coefsHigh_5, coefsHigh_6, coefsHigh_7);\r\n        } else if (j == 6) {\r\n            cf = vec3(coefsHigh_6, coefsHigh_7, coefsHigh_8);\r\n        } else { // if (j == 7)\r\n            cf = vec3(coefsHigh_7, coefsHigh_8, coefsHigh_9);\r\n        }\r\n#endif // GRAPHICS_API_GLES3\r\n        vec3 monomials = vec3(t * t, t, 1.0);\r\n        logy = dot(monomials, M * cf);\r\n    } else {\r\n        logy = logx * slopeHigh + (log10(maxPoint.y) - slopeHigh * log10(maxPoint.x));\r\n    }\r\n\r\n    return pow(10.0, logy);\r\n}\r\n\r\n#endif // Tonescales_lib","#if !defined(RRTCommon_lib)\r\n#define RRTCommon_lib\r\n\r\n// \"Glow\" module constants\r\nconst float RRT_GLOW_GAIN = 0.05;\r\nconst float RRT_GLOW_MID = 0.08;\r\n\r\n// Red modifier constants\r\nconst float RRT_RED_SCALE = 0.82;\r\nconst float RRT_RED_PIVOT = 0.03;\r\nconst float RRT_RED_HUE = 0.;\r\nconst float RRT_RED_WIDTH = 135.;\r\n\r\n// Desaturation contants\r\nconst float RRT_SAT_FACTOR = 0.96;\r\n\r\n// ------- Glow module functions\r\n\r\nfloat glow_fwd(float ycIn, float glowGainIn, float glowMid)\r\n{\r\n    float glowGainOut;\r\n    if (ycIn <= 2.0 / 3.0 * glowMid) {\r\n        glowGainOut = glowGainIn;\r\n    } else if (ycIn >= 2.0 * glowMid) {\r\n        glowGainOut = 0.0;\r\n    } else {\r\n        glowGainOut = glowGainIn * (glowMid / ycIn - 0.5);\r\n    }\r\n    return glowGainOut;\r\n}\r\n\r\n// Sigmoid function in the range 0 to 1 spanning -2 to +2.\r\nfloat sigmoid_shaper(float x)\r\n{\r\n    float t = max(1.0 - abs(x * 0.5), 0.0);\r\n    float y = 1.0 + sign(x) * (1.0 - t * t);\r\n\r\n    return y * 0.5;\r\n}\r\n\r\n// ------- Red modifier functions\r\nfloat center_hue(float hue, float centerH)\r\n{\r\n    float hueCentered = hue - centerH;\r\n    if (hueCentered < -180.0) {\r\n        hueCentered = hueCentered + 360.0;\r\n    } else if (hueCentered > 180.0) {\r\n        hueCentered -= 360.0;\r\n    }\r\n    return hueCentered;\r\n}\r\n\r\n#endif // RRTCommon_lib","#if !defined(ODTCommon_lib)\r\n#define ODTCommon_lib\r\n\r\nconst float CINEMA_WHITE = 48.0;\r\nconst float CINEMA_BLACK = 0.02; // CINEMA_WHITE / 2400.\r\n\r\n// Gamma compensation factor\r\nconst float DIM_SURROUND_GAMMA = 0.9811;\r\n\r\n// Saturation compensation factor\r\nconst float ODT_SAT_FACTOR = 0.93;\r\n\r\n// white point D60 to D65\r\n// ACES white point D60\r\nconst mat3 D60_to_D65_MAT = mat3(\r\n    vec3(0.987224, -0.00759836, 0.00307257),\r\n    vec3(-0.00611327, 1.00186, -0.00509595),\r\n    vec3(0.0159533, 0.00533002, 1.08168));\r\n\r\nfloat Y_2_linCV(float Y, float Ymax, float Ymin)\r\n{\r\n    return (Y - Ymin) / (Ymax - Ymin);\r\n}\r\n\r\nvec3 darkSurround_to_dimSurround(vec3 linearCV)\r\n{\r\n    vec3 XYZ = linearCV * AP1_to_XYZ_MAT;\r\n    vec3 xyY = XYZ_2_xyY(XYZ);\r\n    xyY.z = clamp(xyY.z, 0.0, MEDIUMP_FLT_MAX);\r\n    xyY.z = pow(xyY.z, DIM_SURROUND_GAMMA);\r\n    XYZ = xyY_2_XYZ(xyY);\r\n\r\n    return XYZ * XYZ_to_AP1_MAT;\r\n}\r\n\r\n#endif // ODTCommon_lib","#if !defined(RRT_lib)\r\n#define RRT_lib\r\n\r\n#include \"ACES_RRTCommon.glsl\";\r\n\r\n/**\r\n * @param ACES AP0\r\n * @returns OCES\r\n */\r\nvec3 RRT(vec3 aces)\r\n{\r\n    // --- Glow module --- //\r\n    float saturation = rgb_2_saturation(aces);\r\n    float ycIn = rgb_2_yc(aces);\r\n    float s = sigmoid_shaper((saturation - 0.4) / 0.2);\r\n    float addedGlow = 1.0 + glow_fwd(ycIn, RRT_GLOW_GAIN * s, RRT_GLOW_MID);\r\n\r\n    aces *= addedGlow;\r\n\r\n    // --- Red modifier --- //\r\n    float hue = rgb_2_hue(aces);\r\n    float centeredHue = center_hue(hue, RRT_RED_HUE);\r\n\r\n    float hueWeight = smoothstep(0.0, 1.0, 1.0 - abs(2.0 * centeredHue / RRT_RED_WIDTH));\r\n    hueWeight *= hueWeight;\r\n\r\n    aces.r += hueWeight * saturation * (RRT_RED_PIVOT - aces.r) * (1. - RRT_RED_SCALE);\r\n\r\n    // --- ACES to RGB rendering space --- //\r\n    vec3 rgbPre = AP0_to_AP1_MAT * aces;\r\n    rgbPre = clamp(rgbPre, 0.0, MEDIUMP_FLT_MAX);\r\n\r\n    // --- Global desaturation --- //\r\n    rgbPre = mix(vec3(dot(rgbPre, AP1_RGB2Y)), rgbPre, RRT_SAT_FACTOR);\r\n\r\n    // --- Apply the tonescale independently in rendering-space RGB --- //\r\n    vec3 rgbPost;\r\n    rgbPost.x = segmented_spline_c5_fwd(rgbPre.x);\r\n    rgbPost.y = segmented_spline_c5_fwd(rgbPre.y);\r\n    rgbPost.z = segmented_spline_c5_fwd(rgbPre.z);\r\n\r\n    // --- RGB rendering space to OCES --- //\r\n    vec3 rgbOces = AP1_to_AP0_MAT * rgbPost;\r\n\r\n    return rgbOces;\r\n}\r\n\r\n#endif // RRT_lib","#if !defined(ODT_sRGB_100nits_lib)\r\n#define ODT_sRGB_100nits_lib\r\n\r\n#include \"ACES_ODTCommon.glsl\";\r\n\r\n// CIE XYZ to REC.709\r\nconst mat3 XYZ_to_REC709_MAT = mat3(\r\n    vec3(3.2409699419, -0.9692436363, 0.0556300797),\r\n    vec3(-1.5373831776, 1.8759675015, -0.2039769589),\r\n    vec3(-0.498610760, 0.0415550574, 1.0569715142));\r\n\r\nconst float DISPGAMMA = 2.4;\r\nconst float OFFSET = 0.055;\r\n\r\nvec3 ODT_sRGB_100nits(vec3 oces)\r\n{\r\n    // OCES to RGB rendering space\r\n    vec3 rgbPre = AP0_to_AP1_MAT * oces;\r\n\r\n    // Apply the tonescale independently in rendering-space RGB\r\n    vec3 rgbPost;\r\n    rgbPost.r = segmented_spline_c9_fwd(rgbPre.r);\r\n    rgbPost.g = segmented_spline_c9_fwd(rgbPre.g);\r\n    rgbPost.b = segmented_spline_c9_fwd(rgbPre.b);\r\n\r\n    // Scale luminance to linear code value\r\n    vec3 linearCV;\r\n    linearCV.r = Y_2_linCV(rgbPost.r, CINEMA_WHITE, CINEMA_BLACK);\r\n    linearCV.g = Y_2_linCV(rgbPost.g, CINEMA_WHITE, CINEMA_BLACK);\r\n    linearCV.b = Y_2_linCV(rgbPost.b, CINEMA_WHITE, CINEMA_BLACK);\r\n\r\n    // Apply gamma adjustment to compensate for dim surround\r\n    linearCV = darkSurround_to_dimSurround(linearCV);\r\n\r\n    // Convert to display primary encoding\r\n    // Rendering space RGB to XYZ\r\n    vec3 XYZ = AP1_to_XYZ_MAT * linearCV;\r\n\r\n    // Apply CAT from ACES white point to assumed observer adapted white point\r\n    XYZ = D60_to_D65_MAT * XYZ;\r\n\r\n    // CIE XYZ to display primaries\r\n    linearCV = XYZ_to_REC709_MAT * XYZ;\r\n\r\n    linearCV = clamp(linearCV, vec3(0.0), vec3(1.0));\r\n    return linearCV;\r\n}\r\n\r\n#endif // ODT_sRGB_100nits_lib","// Academy Color Encoding System (ACES) software and tools are provided by the\r\n// Academy under the following terms and conditions: A worldwide, royalty-free,\r\n// non-exclusive right to copy, modify, create derivatives, and use, in source\r\n// and binary forms, is hereby granted, subject to acceptance of this license.\r\n\r\n// Copyright 2019 Academy of Motion Picture Arts and Sciences (A.M.P.A.S.).\r\n// Portions contributed by others as indicated. All rights reserved.\r\n\r\n// Performance of any of the aforementioned acts indicates acceptance to be\r\n// bound by the following terms and conditions:\r\n\r\n// Copies of source code, in whole or in part, must retain the above copyright\r\n// notice, this list of conditions and the Disclaimer of Warranty.\r\n\r\n// Use in binary form must retain the above copyright notice, this list of\r\n// conditions and the Disclaimer of Warranty in the documentation and/or other\r\n// materials provided with the distribution.\r\n\r\n// Nothing in this license shall be deemed to grant any rights to trademarks,\r\n// copyrights, patents, trade secrets or any other intellectual property of\r\n// A.M.P.A.S. or any contributors, except as expressly stated herein.\r\n\r\n// Neither the name \"A.M.P.A.S.\" nor the name of any other contributors to this\r\n// software may be used to endorse or promote products derivative of or based on\r\n// this software without express prior written permission of A.M.P.A.S. or the\r\n// contributors, as appropriate.\r\n\r\n// This license shall be construed pursuant to the laws of the State of\r\n// California, and any disputes related thereto shall be subject to the\r\n// jurisdiction of the courts therein.\r\n\r\n// Disclaimer of Warranty: THIS SOFTWARE IS PROVIDED BY A.M.P.A.S. AND\r\n// CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT\r\n// NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n// PARTICULAR PURPOSE, AND NON-INFRINGEMENT ARE DISCLAIMED. IN NO EVENT SHALL\r\n// A.M.P.A.S., OR ANY CONTRIBUTORS OR DISTRIBUTORS, BE LIABLE FOR ANY DIRECT,\r\n// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, RESITUTIONARY, OR CONSEQUENTIAL\r\n// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\r\n// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\r\n// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\r\n// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\r\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n\r\n// WITHOUT LIMITING THE GENERALITY OF THE FOREGOING, THE ACADEMY SPECIFICALLY\r\n// DISCLAIMS ANY REPRESENTATIONS OR WARRANTIES WHATSOEVER RELATED TO PATENT OR\r\n// OTHER INTELLECTUAL PROPERTY RIGHTS IN THE ACADEMY COLOR ENCODING SYSTEM, OR\r\n// APPLICATIONS THEREOF, HELD BY PARTIES OTHER THAN A.M.P.A.S.,WHETHER DISCLOSED\r\n// OR UNDISCLOSED.\r\n\r\n#if !defined(ACES_lib)\r\n#define ACES_lib\r\n\r\n#include \"ACES_TransformCommon.glsl\";\r\n#include \"ACES_UtillitiesColor.glsl\";\r\n#include \"ACES_Tonescales.glsl\";\r\n\r\n#include \"ACES_RRT.glsl\";\r\n#include \"ACES_ODT_sRGB_100nits.glsl\";\r\n\r\n// idt\r\n\r\n// linear D65 sRGB to D60 ACES AP0\r\nvec3 sRGB_to_AP0(vec3 sRGB)\r\n{\r\n    return sRGB_to_AP0_MAT * sRGB;\r\n}\r\n\r\n// linear D65 sRGB to D60 ACES AP1\r\nvec3 sRGB_to_AP1(vec3 sRGB)\r\n{\r\n    return sRGB_to_AP1_MAT * sRGB;\r\n}\r\n\r\n// lmt\r\n// todo\r\n\r\n#endif // ACES_lib","\r\nimport { Shader3D } from \"../../RenderEngine/RenderShader/Shader3D\";\r\nimport UtilsGLSL from \"./utils/Utils.glsl\";\r\nimport ColorGLSL from \"./utils/Color.glsl\";\r\nimport MathGLSL from \"./utils/Math.glsl\";\r\nimport OutputTransformGLSL from \"./common/OutputTransform.glsl\";\r\nimport BakedBoneMatrixSamplerGLSL from \"./utils/BakedBoneMatrixSampler.glsl\";\r\n\r\nimport MorphTargetGLSL from \"./common/MorphTarget.glsl\";\r\nimport VertexGLSL from \"./common/VertexCommon.glsl\";\r\n\r\nimport ShadingCommonGLSL from \"./common/ShadingCommon.glsl\";\r\nimport ShadingVertexGLSL from \"./common/ShadingVertex.glsl\";\r\nimport ShadingFragGLSL from \"./common/ShadingFrag.glsl\";\r\n\r\nimport SceneGLSL from \"./common/SceneCommon.glsl\";\r\nimport CameraGLSL from \"./common/CameraCommon.glsl\";\r\nimport Sprite3DCommonGLSL from \"./common/Sprite3DCommon.glsl\";\r\nimport Sprite3DVertexGLSL from \"./common/Sprite3DVertex.glsl\";\r\nimport Sprite3DFragGLSL from \"./common/Sprite3DFrag.glsl\";\r\n\r\nimport DepthVertexGLSL from \"./depth/DepthVertex.glsl\";\r\nimport DepthFragGLSL from \"./depth/DepthFrag.glsl\";\r\nimport DepthNormalUtilGLSL from \"./depth/DepthNormalUtil.glsl\";\r\nimport DepthNormalFragGLSL from \"./depth/DepthNormalFrag.glsl\";\r\n\r\nimport ShadowSampleTentGLSL from \"./lighting/ShadowSampleTent.glsl\";\r\nimport ShadowSamplerGLSL from \"./lighting/ShadowSampler.glsl\";\r\n\r\nimport SceneFogGLSL from \"./utils/SceneFog.glsl\";\r\nimport SceneFogInputGLSL from \"./utils/SceneFogInput.glsl\";\r\n\r\nimport LightingGLSL from \"./lighting/Lighting.glsl\";\r\nimport GlobalIlluminationGLSL from \"./lighting/globalIllumination.glsl\";\r\nimport OctGLSL from \"./lighting/volumetricGI/Oct.glsl\";\r\nimport GridHelpersGLSL from \"./lighting/volumetricGI/GridHelpers.glsl\";\r\nimport VolumetricGIGLSL from \"./lighting/volumetricGI/VolumetricGI.glsl\";\r\n\r\nimport BlinnPhongLightingGLSL from \"./lightingmode/BlinnPhongLighting.glsl\";\r\nimport PBRLightingGLSL from \"./lightingmode/PBRLighting.glsl\";\r\n\r\nimport { BlitScreenShaderInit } from \"./postprocess/BlitScreenShaderInit\";\r\nimport { UnlitShaderInit } from \"./unlit/UnlitShaderInit\";\r\nimport { BlinnPhongShaderInit } from \"./blinnphong/BlinnPhongShaderInit\";\r\nimport { TrailShaderInit } from \"./Trail/TrailShaderInit\";\r\nimport { PBRShaderLib } from \"./pbr/PBRShaderLib\";\r\nimport { PBRStandardShaderInit } from \"./pbr/PBRStandardShaderInit\";\r\nimport { SkyBoxShaderInit } from \"./sky/SkyBoxShaderInit\";\r\nimport { ParticleShuriKenShaderInit } from \"./ShurikenParticle/ParticleShuriKenShaderInit\";\r\nimport { SkyProceduralShaderInit } from \"./sky/SkyProceduralShaderInit\";\r\nimport { SkyPanoramicShaderInit } from \"./sky/SkyPanoramicShaderInit\";\r\nimport { ACESShaderLib } from \"./postprocess/ACES/ACESShaderLib\";\r\n\r\n/**\r\n * @internal\r\n * <code>ShaderInit</code> 类用于初始化内置Shader。\r\n */\r\nexport class ShaderInit3D {\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic __init__(): void {\r\n\r\n\t\t// utils\r\n\t\tShader3D.addInclude(\"Utils.glsl\", UtilsGLSL);\r\n\t\tShader3D.addInclude(\"Color.glsl\", ColorGLSL);\r\n\t\tShader3D.addInclude(\"Math.glsl\", MathGLSL);\r\n\t\tShader3D.addInclude(\"BakedBoneMatrixSampler.glsl\", BakedBoneMatrixSamplerGLSL);\r\n\t\tShader3D.addInclude(\"MorphTarget.glsl\", MorphTargetGLSL);\r\n\t\tShader3D.addInclude(\"VertexCommon.glsl\", VertexGLSL);\r\n\t\tShader3D.addInclude(\"ShadingCommon.glsl\", ShadingCommonGLSL);\r\n\t\tShader3D.addInclude(\"ShadingVertex.glsl\", ShadingVertexGLSL);\r\n\t\tShader3D.addInclude(\"ShadingFrag.glsl\", ShadingFragGLSL);\r\n\r\n\t\tShader3D.addInclude(\"OutputTransform.glsl\", OutputTransformGLSL);\r\n\r\n\t\t// scene\r\n\t\tShader3D.addInclude(\"Scene.glsl\", SceneGLSL);\r\n\r\n\t\t// camera\r\n\t\tShader3D.addInclude(\"Camera.glsl\", CameraGLSL);\r\n\r\n\t\t// sprite3D\r\n\t\tShader3D.addInclude(\"Sprite3DCommon.glsl\", Sprite3DCommonGLSL);\r\n\t\tShader3D.addInclude(\"Sprite3DVertex.glsl\", Sprite3DVertexGLSL);\r\n\t\tShader3D.addInclude(\"Sprite3DFrag.glsl\", Sprite3DFragGLSL);\r\n\r\n\t\t// depth\r\n\t\tShader3D.addInclude(\"DepthVertex.glsl\", DepthVertexGLSL);\r\n\t\tShader3D.addInclude(\"DepthFrag.glsl\", DepthFragGLSL);\r\n\t\tShader3D.addInclude(\"DepthNormalUtil.glsl\", DepthNormalUtilGLSL);\r\n\t\tShader3D.addInclude(\"DepthNormalFrag.glsl\", DepthNormalFragGLSL);\r\n\r\n\t\t// scene fog\r\n\t\tShader3D.addInclude(\"SceneFog.glsl\", SceneFogGLSL);\r\n\t\tShader3D.addInclude(\"SceneFogInput.glsl\", SceneFogInputGLSL);\r\n\t\t// shadow sampler\r\n\t\tShader3D.addInclude(\"ShadowSampleTent.glsl\", ShadowSampleTentGLSL);\r\n\t\tShader3D.addInclude(\"ShadowSampler.glsl\", ShadowSamplerGLSL);\r\n\r\n\t\t// lighting\r\n\t\tShader3D.addInclude(\"Lighting.glsl\", LightingGLSL);\r\n\t\tShader3D.addInclude(\"globalIllumination.glsl\", GlobalIlluminationGLSL);\r\n\t\t// volumetric GI\r\n\t\tShader3D.addInclude(\"Oct.glsl\", OctGLSL);\r\n\t\tShader3D.addInclude(\"GridHelpers.glsl\", GridHelpersGLSL);\r\n\t\tShader3D.addInclude(\"VolumetricGI.glsl\", VolumetricGIGLSL);\r\n\r\n\t\t// lighting mode\r\n\t\tShader3D.addInclude(\"BlinnPhongLighting.glsl\", BlinnPhongLightingGLSL);\r\n\t\tShader3D.addInclude(\"PBRLighting.glsl\", PBRLightingGLSL);\r\n\r\n\t\t// lib\r\n\t\tPBRShaderLib.init();\r\n\t\tACESShaderLib.init();\r\n\r\n\t\t// shader init\r\n\t\tBlitScreenShaderInit.init();\r\n\t\tUnlitShaderInit.init();\r\n\t\tPBRStandardShaderInit.init();\r\n\t\t//PBRShaderInit.init();\r\n\t\tBlinnPhongShaderInit.init();\r\n\t\tTrailShaderInit.init();\r\n\t\tParticleShuriKenShaderInit.init();\r\n\t\tSkyBoxShaderInit.init();\r\n\t\tSkyProceduralShaderInit.init();\r\n\t\tSkyPanoramicShaderInit.init();\r\n\r\n\t\t///////////////////////////////////////////////////////////////////////\r\n\t\tShader3D.SHADERDEFINE_LEGACYSINGALLIGHTING = Shader3D.getDefineByName(\"LEGACYSINGLELIGHTING\");\r\n\t\tShader3D.SHADERDEFINE_GRAPHICS_API_GLES2 = Shader3D.getDefineByName(\"GRAPHICS_API_GLES2\");\r\n\t\tShader3D.SHADERDEFINE_GRAPHICS_API_GLES3 = Shader3D.getDefineByName(\"GRAPHICS_API_GLES3\");\r\n\t\tShader3D.SHADERDEFINE_ENUNIFORMBLOCK = Shader3D.getDefineByName(\"ENUNIFORMBLOCK\");\r\n\t\tShader3D.SHADERDEFINE_FLOATTEXTURE = Shader3D.getDefineByName(\"FLOATTEXTURE\");\r\n\t\tShader3D.SHADERDEFINE_FLOATTEXTURE_FIL_LINEAR = Shader3D.getDefineByName(\"FLOATTEXTURE_FIL_LINEAR\");\r\n\t\t// Shader3D.addInclude(\"LayaComInput.glsl\", LayaComInput);\r\n\t\t// Shader3D.addInclude(\"DepthCasterInput.glsl\", DepthCasterInput);\r\n\t\t// Shader3D.addInclude(\"Lighting.glsl\", LightingGLSL);\r\n\t\t// Shader3D.addInclude(\"ShadowSampleTent.glsl\", ShadowSampleTentGLSL);\r\n\t\t// Shader3D.addInclude(\"GlobalIllumination.glsl\", GlobalIllumination);\r\n\t\t// Shader3D.addInclude(\"Shadow.glsl\", ShadowGLSL);\r\n\t\t// Shader3D.addInclude(\"ShadowCasterVS.glsl\", ShadowCasterVSGLSL);\r\n\t\t// Shader3D.addInclude(\"ShadowCasterFS.glsl\", ShadowCasterFSGLSL);\r\n\t\t// Shader3D.addInclude(\"Colors.glsl\", ColorsGLSL);\r\n\t\t// Shader3D.addInclude(\"Sampling.glsl\", SamplingGLSL);\r\n\t\t// Shader3D.addInclude(\"StdLib.glsl\", StdLibGLSL);\r\n\t\t// Shader3D.addInclude(\"PBRVSInput.glsl\", PBRVSInput);\r\n\t\t// Shader3D.addInclude(\"PBRFSInput.glsl\", PBRFSInput);\r\n\t\t// Shader3D.addInclude(\"LayaPBRBRDF.glsl\", LayaPBRBRDF);\r\n\t\t// Shader3D.addInclude(\"PBRCore.glsl\", PBRCore);\r\n\t\t// Shader3D.addInclude(\"PBRVertex.glsl\", PBRVertex);\r\n\t\t// Shader3D.addInclude(\"LayaUtile.glsl\", LayaUtile);\r\n\t\t// Shader3D.addInclude(\"DepthNormalUtil.glsl\", DepthNormalUtil);\r\n\t\t//Blinnphong\r\n\t\t// var shader: Shader3D = Shader3D.add(\"BLINNPHONG\", true);\r\n\t\t// var subShader: SubShader = new SubShader();\r\n\t\t// shader.addSubShader(subShader);\r\n\t\t// subShader.addShaderPass(MeshBlinnPhongVS, MeshBlinnPhongPS, \"Forward\");\r\n\t\t// var shaderPass: ShaderPass = subShader.addShaderPass(MeshBlinnPhongShadowCasterVS, MeshBlinnPhongShadowCasterPS, \"ShadowCaster\");\r\n\t\t// shaderPass = subShader.addShaderPass(DepthNormalsTextureVS, DepthNormalsTextureFS, \"DepthNormal\");\r\n\t\t// //LineShader\r\n\t\t// shader = Shader3D.add(\"LineShader\");\r\n\t\t// subShader = new SubShader();\r\n\t\t// shader.addSubShader(subShader);\r\n\t\t// subShader.addShaderPass(lineVS, linePS);\r\n\t\t// //unlit\r\n\t\t// shader = Shader3D.add(\"Unlit\", true);\r\n\t\t// subShader = new SubShader();\r\n\t\t// shader.addSubShader(subShader);\r\n\t\t// subShader.addShaderPass(UnlitVS, UnlitPS);\r\n\t\t// //meshEffect\r\n\t\t// shader = Shader3D.add(\"Effect\", true);\r\n\t\t// subShader = new SubShader();\r\n\t\t// shader.addSubShader(subShader);\r\n\t\t// subShader.addShaderPass(EffectVS, EffectPS);\r\n\r\n\t\t// //ShurikenParticle\r\n\t\t// var attributeMap = {\r\n\t\t// \t'a_CornerTextureCoordinate': VertexShuriKenParticle.PARTICLE_CORNERTEXTURECOORDINATE0,\r\n\t\t// \t'a_MeshPosition': VertexShuriKenParticle.PARTICLE_POSITION0,\r\n\t\t// \t'a_MeshColor': VertexShuriKenParticle.PARTICLE_COLOR0,\r\n\t\t// \t'a_MeshTextureCoordinate': VertexShuriKenParticle.PARTICLE_TEXTURECOORDINATE0,\r\n\t\t// \t'a_ShapePositionStartLifeTime': VertexShuriKenParticle.PARTICLE_SHAPEPOSITIONSTARTLIFETIME,\r\n\t\t// \t'a_DirectionTime': VertexShuriKenParticle.PARTICLE_DIRECTIONTIME,\r\n\t\t// \t'a_StartColor': VertexShuriKenParticle.PARTICLE_STARTCOLOR0,\r\n\t\t// \t'a_EndColor': VertexShuriKenParticle.PARTICLE_ENDCOLOR0,\r\n\t\t// \t'a_StartSize': VertexShuriKenParticle.PARTICLE_STARTSIZE,\r\n\t\t// \t'a_StartRotation0': VertexShuriKenParticle.PARTICLE_STARTROTATION,\r\n\t\t// \t'a_StartSpeed': VertexShuriKenParticle.PARTICLE_STARTSPEED,\r\n\t\t// \t'a_Random0': VertexShuriKenParticle.PARTICLE_RANDOM0,\r\n\t\t// \t'a_Random1': VertexShuriKenParticle.PARTICLE_RANDOM1,\r\n\t\t// \t'a_SimulationWorldPostion': VertexShuriKenParticle.PARTICLE_SIMULATIONWORLDPOSTION,\r\n\t\t// \t'a_SimulationWorldRotation': VertexShuriKenParticle.PARTICLE_SIMULATIONWORLDROTATION,\r\n\t\t// \t'a_SimulationUV': VertexShuriKenParticle.PARTICLE_SIMULATIONUV\r\n\t\t// };\r\n\t\t// shader = Shader3D.add(\"PARTICLESHURIKEN\");\r\n\t\t// subShader = new SubShader(attributeMap);\r\n\t\t// shader.addSubShader(subShader);\r\n\t\t// subShader.addShaderPass(ParticleShuriKenVS, ParticleShuriKenPS);\r\n\t\t// //SkyBox\r\n\t\t// shader = Shader3D.add(\"SkyBox\");\r\n\t\t// subShader = new SubShader();\r\n\t\t// shader.addSubShader(subShader);\r\n\t\t// subShader.addShaderPass(SkyBoxVS, SkyBoxPS);\r\n\t\t// // //SkyBoxProcedural\r\n\t\t// shader = Shader3D.add(\"SkyBoxProcedural\");\r\n\t\t// subShader = new SubShader();\r\n\t\t// shader.addSubShader(subShader);\r\n\t\t// subShader.addShaderPass(SkyBoxProceduralVS, SkyBoxProceduralPS);\r\n\t\t// //extendTerrain的shader TODO delete\r\n\t\t// shader = Shader3D.add(\"ExtendTerrain\");\r\n\t\t// subShader = new SubShader();\r\n\t\t// shader.addSubShader(subShader);\r\n\t\t// subShader.addShaderPass(extendTerrainVS, extendTerrainPS);\r\n\t\t// //Trail\r\n\t\t// (attributeMap as any) = {\r\n\t\t// \t'a_Position': VertexTrail.TRAIL_POSITION0,\r\n\t\t// \t'a_OffsetVector': VertexTrail.TRAIL_OFFSETVECTOR,\r\n\t\t// \t'a_Texcoord0X': VertexTrail.TRAIL_TEXTURECOORDINATE0X,\r\n\t\t// \t'a_Texcoord0Y': VertexTrail.TRAIL_TEXTURECOORDINATE0Y,\r\n\t\t// \t'a_BirthTime': VertexTrail.TRAIL_TIME0,\r\n\t\t// \t'a_Color': VertexTrail.TRAIL_COLOR\r\n\t\t// };\r\n\t\t// shader = Shader3D.add(\"Trail\");\r\n\t\t// subShader = new SubShader(attributeMap);\r\n\t\t// shader.addSubShader(subShader);\r\n\t\t// subShader.addShaderPass(TrailVS, TrailPS);\r\n\r\n\t\t// // //WaterPrimary TODO delete\r\n\t\t// shader = Shader3D.add(\"WaterPrimary\");\r\n\t\t// subShader = new SubShader();\r\n\t\t// shader.addSubShader(subShader);\r\n\t\t// subShader.addShaderPass(WaterPrimaryVS, WaterPrimaryPS);\r\n\t\t// //BlitScreen\r\n\t\t// // (attributeMap as any) = {\r\n\t\t// // \t'a_PositionTexcoord': VertexMesh.MESH_POSITION0\r\n\t\t// // };\r\n\t\t// // shader = Shader3D.add(\"BlitScreen\");\r\n\t\t// // subShader = new SubShader(attributeMap);\r\n\t\t// // shader.addSubShader(subShader);\r\n\t\t// // var shaderPass: ShaderPass = subShader.addShaderPass(BlitScreenVS, BlitScreenPS);\r\n\t\t// var renderState: RenderState = shaderPass.renderState;\r\n\t\t// renderState.depthTest = RenderState.DEPTHTEST_ALWAYS;\r\n\t\t// renderState.depthWrite = false;\r\n\t\t// renderState.cull = RenderState.CULL_NONE;\r\n\t\t// renderState.blend = RenderState.BLEND_DISABLE;\r\n\t\t// //PostProcessBloom\r\n\t\t// (attributeMap as any) = {\r\n\t\t// \t'a_PositionTexcoord': VertexMesh.MESH_POSITION0\r\n\t\t// };\r\n\t\t// shader = Shader3D.add(\"PostProcessBloom\");\r\n\t\t// //subShader0\r\n\t\t// subShader = new SubShader(attributeMap);\r\n\t\t// shader.addSubShader(subShader);\r\n\t\t// shaderPass = subShader.addShaderPass(BloomVS, BloomPrefilter13PS);\r\n\t\t// renderState = shaderPass.renderState;\r\n\t\t// renderState.depthTest = RenderState.DEPTHTEST_ALWAYS;\r\n\t\t// renderState.depthWrite = false;\r\n\t\t// renderState.cull = RenderState.CULL_NONE;\r\n\t\t// renderState.blend = RenderState.BLEND_DISABLE;\r\n\t\t// //subShader1\r\n\t\t// subShader = new SubShader(attributeMap);\r\n\t\t// shader.addSubShader(subShader);\r\n\t\t// shaderPass = subShader.addShaderPass(BloomVS, BloomPrefilter4PS);\r\n\t\t// renderState = shaderPass.renderState;\r\n\t\t// renderState.depthTest = RenderState.DEPTHTEST_ALWAYS;\r\n\t\t// renderState.depthWrite = false;\r\n\t\t// renderState.cull = RenderState.CULL_NONE;\r\n\t\t// renderState.blend = RenderState.BLEND_DISABLE;\r\n\t\t// //subShader2\r\n\t\t// subShader = new SubShader(attributeMap);\r\n\t\t// shader.addSubShader(subShader);\r\n\t\t// shaderPass = subShader.addShaderPass(BloomVS, BloomDownsample13PS);\r\n\t\t// renderState = shaderPass.renderState;\r\n\t\t// renderState.depthTest = RenderState.DEPTHTEST_ALWAYS;\r\n\t\t// renderState.depthWrite = false;\r\n\t\t// renderState.cull = RenderState.CULL_NONE;\r\n\t\t// renderState.blend = RenderState.BLEND_DISABLE;\r\n\t\t// //subShader3\r\n\t\t// subShader = new SubShader(attributeMap);\r\n\t\t// shader.addSubShader(subShader);\r\n\t\t// shaderPass = subShader.addShaderPass(BloomVS, BloomDownsample4PS);\r\n\t\t// renderState = shaderPass.renderState;\r\n\t\t// renderState.depthTest = RenderState.DEPTHTEST_ALWAYS;\r\n\t\t// renderState.depthWrite = false;\r\n\t\t// renderState.cull = RenderState.CULL_NONE;\r\n\t\t// renderState.blend = RenderState.BLEND_DISABLE;\r\n\t\t// //subShader4\r\n\t\t// subShader = new SubShader(attributeMap);\r\n\t\t// shader.addSubShader(subShader);\r\n\t\t// shaderPass = subShader.addShaderPass(BloomVS, BloomUpsampleTentPS);\r\n\t\t// renderState = shaderPass.renderState;\r\n\t\t// renderState.depthTest = RenderState.DEPTHTEST_ALWAYS;\r\n\t\t// renderState.depthWrite = false;\r\n\t\t// renderState.cull = RenderState.CULL_NONE;\r\n\t\t// renderState.blend = RenderState.BLEND_DISABLE;\r\n\t\t// //subShader5\r\n\t\t// subShader = new SubShader(attributeMap);\r\n\t\t// shader.addSubShader(subShader);\r\n\t\t// shaderPass = subShader.addShaderPass(BloomVS, BloomUpsampleBoxPS);\r\n\t\t// renderState = shaderPass.renderState;\r\n\t\t// renderState.depthTest = RenderState.DEPTHTEST_ALWAYS;\r\n\t\t// renderState.depthWrite = false;\r\n\t\t// renderState.cull = RenderState.CULL_NONE;\r\n\t\t// renderState.blend = RenderState.BLEND_DISABLE;\r\n\r\n\t\t// //PostProcessComposite\r\n\t\t// (attributeMap as any) = {\r\n\t\t// \t'a_PositionTexcoord': VertexMesh.MESH_POSITION0\r\n\t\t// };\r\n\t\t// shader = Shader3D.add(\"PostProcessComposite\");\r\n\r\n\t\t// subShader = new SubShader(attributeMap);\r\n\t\t// shader.addSubShader(subShader);\r\n\t\t// shaderPass = subShader.addShaderPass(CompositeVS, CompositePS);\r\n\t\t// renderState = shaderPass.renderState;\r\n\t\t// renderState.depthTest = RenderState.DEPTHTEST_ALWAYS;\r\n\t\t// renderState.depthWrite = false;\r\n\t\t// renderState.cull = RenderState.CULL_NONE;\r\n\t\t// renderState.blend = RenderState.BLEND_DISABLE;\r\n\t}\r\n}\r\n\r\n","#if !defined(Color_lib)\r\n    #define Color_lib\r\n\r\n    #include \"Math.glsl\";\r\n\r\nvec3 linearToGamma(in vec3 value)\r\n{\r\n    // return vec3(mix(pow(value.rgb, vec3(0.41666)) * 1.055 - vec3(0.055), value.rgb * 12.92, vec3(lessThanEqual(value.rgb, vec3(0.0031308)))));\r\n    return pow(value, vec3(1.0 / 2.2));\r\n}\r\n\r\nvec4 linearToGamma(in vec4 value)\r\n{\r\n    return vec4(linearToGamma(value.rgb), value.a);\r\n}\r\n\r\nvec3 gammaToLinear(in vec3 value)\r\n{\r\n    // return pow((value + 0.055) / 1.055, vec3(2.4));\r\n    return pow(value, vec3(2.2));\r\n}\r\n\r\nvec4 gammaToLinear(in vec4 value)\r\n{\r\n    return vec4(gammaToLinear(value.rgb), value.a);\r\n}\r\n\r\nconst float c_RGBDMaxRange = 255.0;\r\n\r\n// float color to rgbd\r\nvec4 encodeRGBD(in vec3 color)\r\n{\r\n    float maxRGB = max(vecmax(color), FLT_EPS);\r\n    float d = max(1.0, c_RGBDMaxRange / maxRGB);\r\n    d = saturate(d / 255.0);\r\n\r\n    vec3 rgb = color.rgb * d;\r\n    rgb = saturate(rgb);\r\n    return vec4(rgb, d);\r\n}\r\n\r\n// rgbd to float color\r\nvec3 decodeRGBD(in vec4 rgbd)\r\n{\r\n    vec3 color = rgbd.rgb * (1.0 / rgbd.a);\r\n    return color;\r\n}\r\n\r\n// float color to rgbm\r\nvec4 encodeRGBM(in vec3 color, float range)\r\n{\r\n    color *= 1.0 / range;\r\n    float maxRGB = max(vecmax(color), FLT_EPS);\r\n    float m = ceil(maxRGB * 255.0) / 255.0;\r\n    vec3 rgb = color.rgb * 1.0 / m;\r\n\r\n    vec4 rgbm = vec4(rgb, m);\r\n    return rgbm;\r\n}\r\n\r\n// rgbm to float color\r\nvec3 decodeRGBM(in vec4 rgbm, float range)\r\n{\r\n    return range * rgbm.rgb * rgbm.a;\r\n}\r\n\r\n    #include \"OutputTransform.glsl\";\r\n\r\n#endif // Color_lib","#if !defined(Math_lib)\r\n    #define Math_lib\r\n\r\n    #ifndef GRAPHICS_API_GLES3\r\nmat2 inverse(mat2 m)\r\n{\r\n    return mat2(m[1][1], -m[0][1], -m[1][0], m[0][0]) / (m[0][0] * m[1][1] - m[0][1] * m[1][0]);\r\n}\r\nmat3 inverse(mat3 m)\r\n{\r\n    float a00 = m[0][0], a01 = m[0][1], a02 = m[0][2];\r\n    float a10 = m[1][0], a11 = m[1][1], a12 = m[1][2];\r\n    float a20 = m[2][0], a21 = m[2][1], a22 = m[2][2];\r\n\r\n    float b01 = a22 * a11 - a12 * a21;\r\n    float b11 = -a22 * a10 + a12 * a20;\r\n    float b21 = a21 * a10 - a11 * a20;\r\n\r\n    float det = a00 * b01 + a01 * b11 + a02 * b21;\r\n\r\n    return mat3(b01, (-a22 * a01 + a02 * a21), (a12 * a01 - a02 * a11), b11, (a22 * a00 - a02 * a20),\r\n\t       (-a12 * a00 + a02 * a10), b21, (-a21 * a00 + a01 * a20), (a11 * a00 - a01 * a10))\r\n\t/ det;\r\n}\r\n\r\nmat4 inverse(mat4 m)\r\n{\r\n    float a00 = m[0][0], a01 = m[0][1], a02 = m[0][2], a03 = m[0][3], a10 = m[1][0], a11 = m[1][1], a12 = m[1][2],\r\n\t  a13 = m[1][3], a20 = m[2][0], a21 = m[2][1], a22 = m[2][2], a23 = m[2][3], a30 = m[3][0], a31 = m[3][1],\r\n\t  a32 = m[3][2], a33 = m[3][3],\r\n\r\n\t  b00 = a00 * a11 - a01 * a10, b01 = a00 * a12 - a02 * a10, b02 = a00 * a13 - a03 * a10,\r\n\t  b03 = a01 * a12 - a02 * a11, b04 = a01 * a13 - a03 * a11, b05 = a02 * a13 - a03 * a12,\r\n\t  b06 = a20 * a31 - a21 * a30, b07 = a20 * a32 - a22 * a30, b08 = a20 * a33 - a23 * a30,\r\n\t  b09 = a21 * a32 - a22 * a31, b10 = a21 * a33 - a23 * a31, b11 = a22 * a33 - a23 * a32,\r\n\r\n\t  det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n\r\n    return mat4(a11 * b11 - a12 * b10 + a13 * b09, a02 * b10 - a01 * b11 - a03 * b09, a31 * b05 - a32 * b04 + a33 * b03,\r\n\t       a22 * b04 - a21 * b05 - a23 * b03, a12 * b08 - a10 * b11 - a13 * b07, a00 * b11 - a02 * b08 + a03 * b07,\r\n\t       a32 * b02 - a30 * b05 - a33 * b01, a20 * b05 - a22 * b02 + a23 * b01, a10 * b10 - a11 * b08 + a13 * b06,\r\n\t       a01 * b08 - a00 * b10 - a03 * b06, a30 * b04 - a31 * b02 + a33 * b00, a21 * b02 - a20 * b04 - a23 * b00,\r\n\t       a11 * b07 - a10 * b09 - a12 * b06, a00 * b09 - a01 * b07 + a02 * b06, a31 * b01 - a30 * b03 - a32 * b00,\r\n\t       a20 * b03 - a21 * b01 + a22 * b00)\r\n\t/ det;\r\n}\r\n\r\nmat4 transpose(mat4 m)\r\n{\r\n    return mat4(m[0][0], m[1][0], m[2][0], m[3][0],\r\n\tm[0][1], m[1][1], m[2][1], m[3][1],\r\n\tm[0][2], m[1][2], m[2][2], m[3][2],\r\n\tm[0][3], m[1][3], m[2][3], m[3][3]);\r\n}\r\nmat3 transpose(mat3 m)\r\n{\r\n    return mat3(m[0][0], m[1][0], m[2][0],\r\n\tm[0][1], m[1][1], m[2][1],\r\n\tm[0][2], m[1][2], m[2][2]);\r\n}\r\n    #endif // GRAPHICS_API_GLES3\r\n\r\n    #define PI 3.14159265359\r\n\r\n    #define INVERT_PI 0.31830988618\r\n\r\n    #define HALF_PI 1.570796327\r\n\r\n    #define MEDIUMP_FLT_MAX 65504.0\r\n    #define MEDIUMP_FLT_MIN 0.00006103515625\r\n\r\n    #if defined(GL_FRAGMENT_PRECISION_HIGH)\r\n\t#define FLT_EPS\t\t   1e-5\r\n\t#define saturateMediump(x) x\r\n    #else\r\n\t#define FLT_EPS\t\t   MEDIUMP_FLT_MIN\r\n\t#define saturateMediump(x) min(x, MEDIUMP_FLT_MAX)\r\n    #endif // GL_FRAGMENT_PRECISION_HIGH\r\n\r\n    #define saturate(x) clamp(x, 0.0, 1.0)\r\n\r\nfloat pow2(float x)\r\n{\r\n    return x * x;\r\n}\r\n\r\nfloat pow5(float x)\r\n{\r\n    float x2 = x * x;\r\n    return x2 * x2 * x;\r\n}\r\n\r\nconst float INVERT_LOG10 = 0.43429448190325176;\r\n\r\nfloat log10(float x)\r\n{\r\n    return log(x) * INVERT_LOG10;\r\n}\r\n\r\nfloat vecmax(const vec2 v)\r\n{\r\n    return max(v.x, v.y);\r\n}\r\n\r\nfloat vecmax(const vec3 v)\r\n{\r\n    return max(v.x, max(v.y, v.z));\r\n}\r\n\r\nfloat vecmax(const vec4 v)\r\n{\r\n    return max(max(v.x, v.y), max(v.z, v.w));\r\n}\r\n\r\nfloat vecmin(const vec2 v)\r\n{\r\n    return min(v.x, v.y);\r\n}\r\n\r\nfloat vecmin(const vec3 v)\r\n{\r\n    return min(v.x, min(v.y, v.z));\r\n}\r\n\r\nfloat vecmin(const vec4 v)\r\n{\r\n    return min(min(v.x, v.y), min(v.z, v.w));\r\n}\r\n\r\nvec3 SafeNormalize(in vec3 inVec)\r\n{\r\n    float dp3 = max(0.001, dot(inVec, inVec));\r\n    return inVec * inversesqrt(dp3);\r\n}\r\n\r\nvec3 normalScale(in vec3 normal, in float scale)\r\n{\r\n    normal *= vec3(scale, scale, 1.0);\r\n    return normalize(normal);\r\n}\r\n\r\n/**\r\n * Approximates acos(x) with a max absolute error of 9.0x10^-3.\r\n * Valid in the range -1..1.\r\n */\r\nfloat acosFast(float x)\r\n{\r\n    // Lagarde 2014, \"Inverse trigonometric functions GPU optimization for AMD GCN architecture\"\r\n    // This is the approximation of degree 1, with a max absolute error of 9.0x10^-3\r\n    float y = abs(x);\r\n    float p = -0.1565827 * y + 1.570796;\r\n    p *= sqrt(1.0 - y);\r\n    return x >= 0.0 ? p : PI - p;\r\n}\r\n\r\n/**\r\n * Approximates acos(x) with a max absolute error of 9.0x10^-3.\r\n * Valid only in the range 0..1.\r\n */\r\nfloat acosFastPositive(float x)\r\n{\r\n    float p = -0.1565827 * x + 1.570796;\r\n    return p * sqrt(1.0 - x);\r\n}\r\n\r\n/*\r\n * Random number between 0 and 1, using interleaved gradient noise.\r\n * w must not be normalized (e.g. window coordinates)\r\n */\r\nfloat interleavedGradientNoise(const highp vec2 w)\r\n{\r\n    const vec3 m = vec3(0.06711056, 0.00583715, 52.9829189);\r\n    return fract(m.z * fract(dot(w, m.xy)));\r\n}\r\n\r\n/*\r\n * vertex rotate by Euler\r\n */\r\nvec3 rotationByEuler(in vec3 vector, in vec3 rot)\r\n{\r\n    float halfRoll = rot.z * 0.5;\r\n    float halfPitch = rot.x * 0.5;\r\n    float halfYaw = rot.y * 0.5;\r\n\r\n    float sinRoll = sin(halfRoll);\r\n    float cosRoll = cos(halfRoll);\r\n    float sinPitch = sin(halfPitch);\r\n    float cosPitch = cos(halfPitch);\r\n    float sinYaw = sin(halfYaw);\r\n    float cosYaw = cos(halfYaw);\r\n\r\n    float quaX = (cosYaw * sinPitch * cosRoll) + (sinYaw * cosPitch * sinRoll);\r\n    float quaY = (sinYaw * cosPitch * cosRoll) - (cosYaw * sinPitch * sinRoll);\r\n    float quaZ = (cosYaw * cosPitch * sinRoll) - (sinYaw * sinPitch * cosRoll);\r\n    float quaW = (cosYaw * cosPitch * cosRoll) + (sinYaw * sinPitch * sinRoll);\r\n\r\n    // vec4 q=vec4(quaX,quaY,quaZ,quaW);\r\n    // vec3 temp = cross(q.xyz, vector) + q.w * vector;\r\n    // return (cross(temp, -q.xyz) + dot(q.xyz,vector) * q.xyz + q.w * temp);\r\n\r\n    float x = quaX + quaX;\r\n    float y = quaY + quaY;\r\n    float z = quaZ + quaZ;\r\n    float wx = quaW * x;\r\n    float wy = quaW * y;\r\n    float wz = quaW * z;\r\n    float xx = quaX * x;\r\n    float xy = quaX * y;\r\n    float xz = quaX * z;\r\n    float yy = quaY * y;\r\n    float yz = quaY * z;\r\n    float zz = quaZ * z;\r\n\r\n    return vec3(((vector.x * ((1.0 - yy) - zz)) + (vector.y * (xy - wz))) + (vector.z * (xz + wy)),\r\n\t((vector.x * (xy + wz)) + (vector.y * ((1.0 - xx) - zz))) + (vector.z * (yz - wx)),\r\n\t((vector.x * (xz - wy)) + (vector.y * (yz + wx))) + (vector.z * ((1.0 - xx) - yy)));\r\n}\r\n\r\n/*\r\n * Assume that axis has been normalized\r\n * point rotate by one axis\r\n */\r\nvec3 rotationByAxis(in vec3 vector, in vec3 axis, in float angle)\r\n{\r\n    float halfAngle = angle * 0.5;\r\n    float sin = sin(halfAngle);\r\n\r\n    float quaX = axis.x * sin;\r\n    float quaY = axis.y * sin;\r\n    float quaZ = axis.z * sin;\r\n    float quaW = cos(halfAngle);\r\n\r\n    // vec4 q=vec4(quaX,quaY,quaZ,quaW);\r\n    // vec3 temp = cross(q.xyz, vector) + q.w * vector;\r\n    // return (cross(temp, -q.xyz) + dot(q.xyz,vector) * q.xyz + q.w * temp);\r\n\r\n    float x = quaX + quaX;\r\n    float y = quaY + quaY;\r\n    float z = quaZ + quaZ;\r\n    float wx = quaW * x;\r\n    float wy = quaW * y;\r\n    float wz = quaW * z;\r\n    float xx = quaX * x;\r\n    float xy = quaX * y;\r\n    float xz = quaX * z;\r\n    float yy = quaY * y;\r\n    float yz = quaY * z;\r\n    float zz = quaZ * z;\r\n\r\n    return vec3(((vector.x * ((1.0 - yy) - zz)) + (vector.y * (xy - wz))) + (vector.z * (xz + wy)),\r\n\t((vector.x * (xy + wz)) + (vector.y * ((1.0 - xx) - zz))) + (vector.z * (yz - wx)),\r\n\t((vector.x * (xz - wy)) + (vector.y * (yz + wx))) + (vector.z * ((1.0 - xx) - yy)));\r\n}\r\n\r\n/*\r\n *rotate by quaternions\r\n */\r\nvec3 rotationByQuaternions(in vec3 v, in vec4 q)\r\n{\r\n    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);\r\n}\r\n\r\n#endif // Math_lib","#if !defined(BakeBoneAnimSampler_lib)\r\n    #define BakeBoneAnimSampler_lib\r\n\r\nmat4 loadBakedMatMatrix(float FramePos, float boneIndices, float offset)\r\n{\r\n    vec2 uv;\r\n    float PixelPos = FramePos + boneIndices * 4.0;\r\n    float halfOffset = offset * 0.5;\r\n    float uvoffset = PixelPos / u_SimpleAnimatorTextureSize;\r\n    uv.y = floor(uvoffset) * offset + halfOffset;\r\n    uv.x = mod(float(PixelPos), u_SimpleAnimatorTextureSize) * offset + halfOffset;\r\n    vec4 mat0row = texture2D(u_SimpleAnimatorTexture, uv);\r\n    uv.x += offset;\r\n    vec4 mat1row = texture2D(u_SimpleAnimatorTexture, uv);\r\n    uv.x += offset;\r\n    vec4 mat2row = texture2D(u_SimpleAnimatorTexture, uv);\r\n    uv.x += offset;\r\n    vec4 mat3row = texture2D(u_SimpleAnimatorTexture, uv);\r\n    mat4 m = mat4(mat0row.x, mat0row.y, mat0row.z, mat0row.w,\r\n\tmat1row.x, mat1row.y, mat1row.z, mat1row.w,\r\n\tmat2row.x, mat2row.y, mat2row.z, mat2row.w,\r\n\tmat3row.x, mat3row.y, mat3row.z, mat3row.w);\r\n    return m;\r\n}\r\n\r\n#endif // BakeBoneAnimSampler_lib","#if !defined(MorphTarget_lib)\r\n    #define MorphTarget_lib\r\n\r\n    #ifdef GRAPHICS_API_GLES3\r\n\r\n/// static mesh property\r\nuniform sampler2DArray u_MorphTargetsTex;\r\n// xy: tex size, z: attribute count\r\nuniform vec4 u_MorphParams;\r\nuniform vec4 u_MorphAttrOffset;\r\n\r\n\t#define Morph_TexWidth\t   u_MorphParams.x\r\n\t#define Morph_TexHeight\t   u_MorphParams.y\r\n\t#define Morph_AttributeNum u_MorphParams.z\r\n\t#define Morph_TargetNum\t   u_MorphParams.w\r\n\r\n\t#define Morph_PositionOffset u_MorphAttrOffset.x\r\n\t#define Morph_NormalOffset   u_MorphAttrOffset.y\r\n\t#define Morph_TangentOffset  u_MorphAttrOffset.z\r\n\r\n// #define MORPH_MAX_COUNT 8\r\n\r\n/// dynamic params\r\nuniform float u_MorphActiveTargets[MORPH_MAX_COUNT];\r\nuniform float u_MorphTargetWeights[MORPH_MAX_COUNT];\r\nuniform int u_MorphTargetActiveCount;\r\n\r\n\t#define MORPH_ACTIVE_COUNT u_MorphTargetActiveCount\r\n\r\nvec4 sampleMorphTargets(in int vertexID, in float targetID)\r\n{\r\n    int v = vertexID / int(Morph_TexWidth);\r\n    int u = vertexID - v * int(Morph_TexWidth);\r\n\r\n    vec3 uvw = vec3((float(u) + 0.5) / Morph_TexWidth, (float(v) + 0.5) / Morph_TexHeight, targetID);\r\n\r\n    return texture(u_MorphTargetsTex, uvw);\r\n}\r\n\r\nvec3 positionMorph(in vec3 position)\r\n{\r\n    int vertexID = gl_VertexID * int(Morph_AttributeNum) + int(Morph_PositionOffset);\r\n\r\n    for (int i = 0; i < MORPH_ACTIVE_COUNT; i++)\r\n\t{\r\n\t    float index = u_MorphActiveTargets[i];\r\n\r\n\t    position += sampleMorphTargets(vertexID, index).xyz * u_MorphTargetWeights[i];\r\n\t}\r\n\r\n    return position;\r\n}\r\n\r\nvec3 normalMorph(in vec3 normal)\r\n{\r\n    int vertexID = gl_VertexID * int(Morph_AttributeNum) + int(Morph_NormalOffset);\r\n    for (int i = 0; i < MORPH_ACTIVE_COUNT; i++)\r\n\t{\r\n\t    float index = u_MorphActiveTargets[i];\r\n\r\n\t    normal += sampleMorphTargets(vertexID, index).xyz * u_MorphTargetWeights[i];\r\n\t}\r\n\r\n    return normal;\r\n}\r\n\r\nvec4 tangentMorph(in vec4 tangent)\r\n{\r\n    int vertexID = gl_VertexID * int(Morph_AttributeNum) + int(Morph_TangentOffset);\r\n    for (int i = 0; i < MORPH_ACTIVE_COUNT; i++)\r\n\t{\r\n\t    float index = u_MorphActiveTargets[i];\r\n\r\n\t    vec4 sampleTangent = sampleMorphTargets(vertexID, index);\r\n\r\n\t    tangent.xyz += sampleTangent.xyz * u_MorphTargetWeights[i] * tangent.w * sampleTangent.w;\r\n\t}\r\n\r\n    return tangent;\r\n}\r\n\r\n    #endif // GRAPHICS_API_GLES3\r\n\r\n#endif // MorphTarget_lib","#if !defined(VertexCommon_lib)\r\n    #define VertexCommon_lib\r\n\r\n    #ifdef MORPHTARGETS\r\n\t#include \"MorphTarget.glsl\";\r\n    #endif // MORPHTARGETS\r\n\r\nstruct Vertex {\r\n\r\n    vec3 positionOS;\r\n\r\n    vec3 normalOS;\r\n\r\n    #ifdef TANGENT\r\n    vec4 tangentOS;\r\n    #endif // TANGENT\r\n\r\n    // todo  uv define ?\r\n    #ifdef UV\r\n    vec2 texCoord0;\r\n    #endif // UV\r\n\r\n    #ifdef UV1\r\n    vec2 texCoord1;\r\n    #endif // UV1\r\n\r\n    #ifdef COLOR\r\n    vec4 vertexColor;\r\n    #endif // COLOR\r\n};\r\n\r\n/**\r\n * vertex position\r\n */\r\nvec4 getVertexPosition()\r\n{\r\n    vec4 position = a_Position;\r\n\r\n    #ifdef MORPHTARGETS\r\n\t#ifdef MORPHTARGETS_POSITION\r\n    position.xyz = positionMorph(position.xyz);\r\n\t#endif // MORPHTARGETS_POSITION\r\n    #endif // MORPHTARGETS\r\n\r\n    return position;\r\n}\r\n\r\nvec3 getVertexNormal()\r\n{\r\n    vec3 normal = a_Normal.xyz;\r\n    #ifdef MORPHTARGETS\r\n\t#ifdef MORPHTARGETS_NORMAL\r\n    normal.xyz = normalMorph(normal);\r\n\t#endif // MORPHTARGETS_NORMAL\r\n    #endif // MORPHTARGETS\r\n\r\n    return normal;\r\n}\r\n\r\n    #ifdef TANGENT\r\nvec4 getVertexTangent()\r\n{\r\n    vec4 tangent = a_Tangent0;\r\n\r\n\t#ifdef MORPHTARGETS\r\n\t    #ifdef MORPHTARGETS_TANGENT\r\n    tangent = tangentMorph(tangent);\r\n\t    #endif // MORPHTARGETS_TANGENT\r\n\t#endif // MORPHTARGETS\r\n\r\n    return tangent;\r\n}\r\n    #endif // TANGENT\r\n\r\nvoid getVertexParams(inout Vertex vertex)\r\n{\r\n    vertex.positionOS = getVertexPosition().xyz;\r\n\r\n    vertex.normalOS = getVertexNormal();\r\n\r\n    #ifdef TANGENT\r\n    vertex.tangentOS = getVertexTangent();\r\n    #endif // TANGENT\r\n\r\n    #ifdef UV\r\n    vertex.texCoord0 = a_Texcoord0;\r\n    #endif // UV\r\n\r\n    #ifdef UV1\r\n    vertex.texCoord1 = a_Texcoord1;\r\n    #endif // UV1\r\n\r\n    #ifdef COLOR\r\n    // consider vertexColor is gamma\r\n    vertex.vertexColor = vec4(pow(a_Color.rgb, vec3(2.2)), a_Color.a);\r\n    #endif // COLOR\r\n}\r\n\r\n#endif // VertexCommon_lib","#if !defined(ShadingCommon_lib)\r\n    #define ShadingCommon_lib\r\n\r\n// varying\r\nvarying vec3 v_PositionWS;\r\n// todo\r\nvarying vec3 v_NormalWS;\r\nvarying vec3 v_TangentWS;\r\nvarying vec3 v_BiNormalWS;\r\n\r\n    #ifdef UV\r\nvarying vec2 v_Texcoord0;\r\n    #endif // UV\r\n\r\n    #ifdef UV1\r\n\t#ifdef LIGHTMAP\r\nvarying vec2 v_Texcoord1;\r\n\t#endif // LIGHTMAP\r\n    #endif // UV1\r\n\r\n    #ifdef COLOR\r\nvarying vec4 v_VertexColor;\r\n    #endif // COLOR\r\n\r\n// 记录顶点信息, 用于由vs向fs传递数据\r\nstruct PixelParams {\r\n    vec3 positionWS;\r\n\r\n    // todo\r\n    vec3 normalWS;\r\n    vec3 tangentWS;\r\n    vec3 biNormalWS;\r\n    mat3 TBN;\r\n\r\n    #ifdef UV\r\n    vec2 uv0;\r\n    #endif // UV\r\n\r\n    #ifdef UV1\r\n\t#ifdef LIGHTMAP\r\n    vec2 uv1;\r\n\t#endif // LIGHTMAP\r\n    #endif // UV1\r\n\r\n    #ifdef COLOR\r\n    vec4 vertexColor;\r\n    #endif // COLOR\r\n};\r\n\r\n#endif // ShadingCommon_lib","#if !defined(ShadingVertex_lib)\r\n    #define ShadingVertex_lib\r\n\r\n    #include \"ShadingCommon.glsl\";\r\n\r\nvoid sharePixelParams(const in PixelParams params)\r\n{\r\n    v_PositionWS = params.positionWS;\r\n\r\n    v_NormalWS = params.normalWS;\r\n    v_TangentWS = params.tangentWS;\r\n    v_BiNormalWS = params.biNormalWS;\r\n\r\n    #ifdef UV\r\n    v_Texcoord0 = params.uv0;\r\n    #endif // UV\r\n\r\n    #ifdef UV1\r\n\t#ifdef LIGHTMAP\r\n    v_Texcoord1 = params.uv1;\r\n\t#endif LIGHTMAP\r\n    #endif // UV1\r\n\r\n    #ifdef COLOR\r\n    v_VertexColor = params.vertexColor;\r\n    #endif // COLOR\r\n}\r\n\r\nvoid shadingPixelParams(inout PixelParams params, in Vertex vertex)\r\n{\r\n    mat4 worldMat = getWorldMatrix();\r\n    vec4 pos = (worldMat * vec4(vertex.positionOS, 1.0));\r\n    params.positionWS = pos.xyz / pos.w;\r\n\r\n    mat4 normalMat = transpose(inverse(worldMat));\r\n    params.normalWS = normalize((normalMat * vec4(vertex.normalOS, 0.0)).xyz);\r\n\r\n    #ifdef TANGENT\r\n    params.tangentWS = normalize((normalMat * vec4(vertex.tangentOS.xyz, 0.0)).xyz);\r\n    params.tangentWS *= u_WroldInvertFront.x;\r\n    params.biNormalWS = normalize(cross(params.normalWS, params.tangentWS) * sign(vertex.tangentOS.w));\r\n    #else // TANGENT\r\n    params.tangentWS = vec3(1.0, 0.0, 0.0);\r\n    params.tangentWS *= u_WroldInvertFront.x;\r\n    params.biNormalWS = normalize(cross(params.normalWS, params.tangentWS));\r\n    #endif // TANGENT\r\n    \r\n\r\n    #ifdef UV\r\n    params.uv0 = vertex.texCoord0;\r\n    #endif // UV\r\n\r\n    #ifdef UV1\r\n\t#ifdef LIGHTMAP\r\n    params.uv1 = tranformLightMapUV(vertex.texCoord1, u_LightmapScaleOffset);\r\n\t#endif LIGHTMAP\r\n    #endif // UV1\r\n\r\n    #ifdef COLOR\r\n    params.vertexColor = vertex.vertexColor;\r\n    #endif // COLOR\r\n}\r\n\r\n#endif // ShadingVertex_lib","#if !defined(ShadingFrag_lib)\r\n    #define ShadingFrag_lib\r\n\r\n    #include \"ShadingCommon.glsl\";\r\n\r\n    #define _InvertNormal (float(gl_FrontFacing) * 2.0 - 1.0);\r\n\r\nvoid getPixelParams(inout PixelParams params)\r\n{\r\n    params.positionWS = v_PositionWS;\r\n\r\n    float invertN = _InvertNormal;\r\n\r\n    params.normalWS = normalize(v_NormalWS * invertN);\r\n    params.tangentWS = normalize(v_TangentWS * invertN);\r\n    params.biNormalWS = normalize(v_BiNormalWS * invertN);\r\n\r\n    params.TBN = mat3(params.tangentWS, params.biNormalWS, params.normalWS);\r\n\r\n    #ifdef UV\r\n    params.uv0 = v_Texcoord0;\r\n    #endif // UV\r\n\r\n    #ifdef UV1\r\n\t#ifdef LIGHTMAP\r\n    params.uv1 = v_Texcoord1;\r\n\t#endif // LIGHTMAP\r\n    #endif // UV1\r\n\r\n    #ifdef COLOR\r\n    params.vertexColor = v_VertexColor;\r\n    #endif // COLOR\r\n}\r\n\r\n#endif // ShadingFrag_lib","#if !defined(OutputTransform_lib)\r\n    #define OutputTransform_lib\r\n\r\nvec3 gammaCorrect(in vec3 color, float gammaValue)\r\n{\r\n    return pow(color, vec3(gammaValue));\r\n}\r\n\r\nvec4 gammaCorrect(in vec4 color)\r\n{\r\n    // todo color gamut gamma value\r\n    // default sRGB\r\n    float gammaValue = 1.0 / 2.2;\r\n    return vec4(gammaCorrect(color.rgb, gammaValue), color.a);\r\n}\r\n\r\nvec4 outputTransform(in vec4 color)\r\n{\r\n    #ifdef GAMMACORRECT\r\n    // render in linear, output gamma\r\n    return gammaCorrect(color);\r\n    #else // GAMMACORRECT\r\n    return color;\r\n    #endif // GAMMACORRECT\r\n}\r\n\r\n#endif // OutputTransform_lib\r\n","#if !defined(SceneCommon_lib)\r\n    #define SceneCommon_lib\r\n\r\n    #ifdef ENUNIFORMBLOCK\r\nuniform SceneUniformBlock\r\n{\r\n    // time\r\n    float u_Time;\r\n    vec4 u_FogParams;// x start,y range,z Density\r\n    vec4 u_FogColor;\r\n};\r\n    #else // ENUNIFORMBLOCK\r\n// time\r\nuniform float u_Time;\r\nuniform vec4 u_FogParams;//x start,y range,z Density\r\nuniform vec4 u_FogColor;\r\n    #endif // ENUNIFORMBLOCK\r\n    //rotate SH IBL\r\nuniform float u_GIRotate;\r\n\r\n#endif // SceneCommon_lib","#if !defined(CameraCommon_lib)\r\n    #define CameraCommon_lib\r\n\r\n    #ifdef ENUNIFORMBLOCK\r\n\r\nuniform CameraUniformBlock\r\n{\r\n    mat4 u_View;\r\n    mat4 u_Projection;\r\n    mat4 u_ViewProjection;\r\n    vec4 u_ProjectionParams; // x: near, y: far, z: invert, w: 1/far\r\n    vec4 u_Viewport; // x,y,width,height\r\n    vec3 u_CameraDirection;\r\n    vec3 u_CameraUp;\r\n    vec3 u_CameraPos;\r\n};\r\n    #else\r\nuniform mat4 u_View;\r\nuniform mat4 u_Projection;\r\nuniform mat4 u_ViewProjection;\r\nuniform vec4 u_ProjectionParams; // x: near, y: far, z: invert, w: 1/far\r\nuniform vec4 u_Viewport; // x, y, width, height\r\nuniform vec3 u_CameraDirection;\r\nuniform vec3 u_CameraUp;\r\nuniform vec3 u_CameraPos;\r\n    #endif // ENUNIFORMBLOCK\r\n\r\n/*Depth or DepthNormal Uniform*/\r\nuniform highp sampler2D u_CameraDepthTexture;\r\nuniform vec4 u_ZBufferParams; //(1.0 - far / near, far / near, (near - far) / (near * far), 1 / near)\r\nuniform mediump sampler2D u_CameraDepthNormalsTexture;\r\nuniform mediump sampler2D u_CameraOpaqueTexture;\r\n\r\nvec4 getPositionCS(in vec3 positionWS)\r\n{\r\n    return u_ViewProjection * vec4(positionWS, 1.0);\r\n}\r\n\r\nvec3 getViewDirection(in vec3 positionWS)\r\n{\r\n    return normalize(u_CameraPos - positionWS);\r\n}\r\n\r\n// 根据投影剧专重映射深度\r\nvec4 remapPositionZ(vec4 position)\r\n{\r\n    position.z = position.z * 2.0 - position.w;\r\n    return position;\r\n}\r\n\r\n#endif // CameraCommon_lib","#if !defined(Sprite3DCommon_lib)\r\n    #define Sprite3DCommon_lib\r\n\r\nuniform mat4 u_WorldMat;\r\n\r\nuniform vec4 u_WroldInvertFront;\r\n    \r\n    #ifdef LIGHTMAP\r\nuniform vec4 u_LightmapScaleOffset;\r\n    #endif // LIGHTMAP\r\n\r\nvec2 tranformLightMapUV(in vec2 texcoord, in vec4 tilingOffset)\r\n{\r\n    vec2 lightMapUV = vec2(texcoord.x, 1.0 - texcoord.y) * tilingOffset.xy + tilingOffset.zw;\r\n    lightMapUV.y = 1.0 - lightMapUV.y;\r\n    return lightMapUV;\r\n}\r\n\r\nvec2 transformUV(in vec2 texcoord, in vec4 tilingOffset)\r\n{\r\n    vec2 uv = texcoord * tilingOffset.xy + tilingOffset.zw * vec2(1.0, -1.0) + vec2(0.0, 1.0 - tilingOffset.y);\r\n    return uv;\r\n}\r\n\r\n#endif // Sprite3DCommon_lib","#if !defined(Sprite3DVertex_lib)\r\n    #define Sprite3DVertex_lib\r\n\r\n    #include \"Sprite3DCommon.glsl\";\r\n\r\n    #ifdef BONE\r\n// todo const int c_MaxBoneCount = 24\r\nuniform mat4 u_Bones[24];\r\n\r\n\t#ifdef SIMPLEBONE\r\nuniform vec4 u_SimpleAnimatorParams;\r\nuniform sampler2D u_SimpleAnimatorTexture;\r\nuniform float u_SimpleAnimatorTextureSize;\r\n\t    #include \"BakedBoneMatrixSampler.glsl\";\r\n\r\n\t#endif // SIMPLEBONE\r\n\r\n    #endif // BONE\r\n\r\n/**\r\n * world matrix\r\n */\r\nmat4 getWorldMatrix()\r\n{\r\n    #ifdef GPU_INSTANCE\r\n    mat4 worldMat = a_WorldMat;\r\n    #else\r\n    mat4 worldMat = u_WorldMat;\r\n    #endif // GPU_INSTANCE\r\n\r\n    #ifdef BONE\r\n\r\n\t#ifdef SIMPLEBONE\r\n\r\n\t    #ifdef GPU_INSTANCE\r\n    float currentPixelPos = a_SimpleTextureParams.x + a_SimpleTextureParams.y;\r\n\t    #else // GPU_INSTANCE\r\n    float currentPixelPos = u_SimpleAnimatorParams.x + u_SimpleAnimatorParams.y;\r\n\t    #endif // GPU_INSTANCE\r\n\r\n    float offset = 1.0 / u_SimpleAnimatorTextureSize;\r\n    mat4 skinTrans = loadBakedMatMatrix(currentPixelPos, a_BoneIndices.x, offset) * a_BoneWeights.x;\r\n    skinTrans += loadBakedMatMatrix(currentPixelPos, a_BoneIndices.y, offset) * a_BoneWeights.y;\r\n    skinTrans += loadBakedMatMatrix(currentPixelPos, a_BoneIndices.z, offset) * a_BoneWeights.z;\r\n    skinTrans += loadBakedMatMatrix(currentPixelPos, a_BoneIndices.w, offset) * a_BoneWeights.w;\r\n    worldMat = worldMat * skinTrans;\r\n\r\n\t#else // SIMPLEBONE\r\n\r\n    ivec4 boneIndex = ivec4(a_BoneIndices);\r\n    mat4 skinTrans = u_Bones[boneIndex.x] * a_BoneWeights.x;\r\n    skinTrans += u_Bones[boneIndex.y] * a_BoneWeights.y;\r\n    skinTrans += u_Bones[boneIndex.z] * a_BoneWeights.z;\r\n    skinTrans += u_Bones[boneIndex.w] * a_BoneWeights.w;\r\n    worldMat = worldMat * skinTrans;\r\n\r\n\t#endif // SIMPLEBONE\r\n\r\n    #endif // BONE\r\n\r\n    return worldMat;\r\n}\r\n\r\n#endif // Sprite3DVertex_lib","#if !defined(Sprite3DFrag_lib)\r\n    #define Sprite3DFrag_lib\r\n\r\n    #include \"Sprite3DCommon.glsl\";\r\n\r\n#endif // Sprite3DFrag_lib","#if !defined(DepthVertex_lib)\r\n    #define DepthVertex_lib\r\n    #include \"Math.glsl\";\r\n    #include \"Scene.glsl\";\r\n    #include \"Camera.glsl\";\r\n    #include \"Sprite3DVertex.glsl\";\r\n\r\n    #include \"VertexCommon.glsl\";\r\n\r\n    #if defined(SHADOW) || defined(SHADOW_SPOT)\r\n\r\n\t#ifndef DEPTHPASS\r\n\t    #ifdef ENUNIFORMBLOCK\r\nuniform ShadowUniformBlock\r\n{\r\n    vec4 u_ShadowBias; // x: depth bias, y: normal bias\r\n    vec3 u_ShadowLightDirection;\r\n};\r\n\t    #else // ENUNIFORMBLOCK\r\nuniform vec4 u_ShadowBias; // x: depth bias, y: normal bias\r\n\t\t#ifdef SHADOW\r\nuniform vec3 u_ShadowLightDirection;\r\n\t\t#endif // SHADOW\r\n\t    #endif // ENUNIFORMBLOCK\r\n\r\nvec3 applyShadowBias(vec3 positionWS, vec3 normalWS, vec3 lightDirection)\r\n{\r\n    float invNdotL = 1.0 - clamp(dot(-lightDirection, normalWS), 0.0, 1.0);\r\n    float scale = invNdotL * u_ShadowBias.y;\r\n\r\n    // normal bias is negative since we want to apply an inset normal offset\r\n    positionWS += -lightDirection * u_ShadowBias.xxx;\r\n    positionWS += normalWS * vec3(scale);\r\n    return positionWS;\r\n}\r\n\t#endif // DEPTHPASS\r\n    #endif // SHADOW || SHADOW_SPOT\r\n\r\n    #ifdef DEPTHPASS\r\n\t#include \"Camera.glsl\";\r\n    #endif // DEPTHPASS\r\n\r\nvec4 DepthPositionCS(in vec3 positionWS, in vec3 normalWS)\r\n{\r\n    #ifdef DEPTHPASS\r\n    vec4 positionCS = u_ViewProjection * vec4(positionWS, 1.0);\r\n    #endif // DEPTHPASS\r\n\r\n    #ifdef SHADOW\r\n\t#ifndef DEPTHPASS\r\n    positionWS = applyShadowBias(positionWS, normalWS, u_ShadowLightDirection);\r\n    vec4 positionCS = u_ViewProjection * vec4(positionWS, 1.0);\r\n    positionCS.z = max(positionCS.z, 0.0); // min ndc z is 0.0\r\n\t#endif // DEPTHPASS\r\n    #endif // SHADOW\r\n\r\n    #ifdef SHADOW_SPOT\r\n\t#ifndef DEPTHPASS\r\n    vec4 positionCS = u_ViewProjection * vec4(positionWS, 1.0);\r\n    positionCS.z = positionCS.z - u_ShadowBias.x / positionCS.w;\r\n    positionCS.z = max(positionCS.z, 0.0); // min ndc z is 0.0\r\n\t#endif // DEPTHPASS\r\n    #endif // SHADOW_SPOT\r\n\r\n    return positionCS;\r\n}\r\n\r\n#endif // DepthVertex_lib","#if !defined(DepthFrag_lib)\r\n    #define DepthFrag_lib\r\n\r\nvec4 getDepthColor()\r\n{\r\n    return vec4(0.0);\r\n}\r\n\r\n#endif // DepthFrag_lib","#define SAMPLE_DEPTH_TEXTURE(textureName, coord2) (texture2D(textureName, coord2).r)\r\n//此方法库用来压缩解析深度贴图，法线深度贴图\r\n\r\n// Encoding/decoding view space normals into 2D 0..1 vector\r\nvec2 EncodeViewNormalStereo(vec3 n)\r\n{\r\n    n.z = abs(n.z);\r\n    float kScale = 1.7777;\r\n    vec2 enc;\r\n    enc = n.xy / (n.z + 1.0);\r\n    enc /= kScale;\r\n    enc = enc * 0.5 + 0.5;\r\n    return enc;\r\n}\r\n\r\nvec3 DecodeViewNormalStereo(vec4 enc4)\r\n{\r\n    float kScale = 1.7777;\r\n    vec3 nn = enc4.xyz * vec3(2.0 * kScale, 2.0 * kScale, 0.0) + vec3(-kScale, -kScale, 1.0);\r\n    float g = 2.0 / dot(nn.xyz, nn.xyz);\r\n    vec3 n;\r\n    n.xy = g * nn.xy;\r\n    n.z = g - 1.0;\r\n    return n;\r\n}\r\n\r\n// Encoding/decoding [0..1) floats into 8 bit/channel RG. Note that 1.0 will not be encoded properly.\r\nvec2 EncodeFloatRG(float v)\r\n{\r\n    vec2 kEncodeMul = vec2(1.0, 255.0);\r\n    float kEncodeBit = 1.0 / 255.0;\r\n    vec2 enc = kEncodeMul * v;\r\n    enc = fract(enc);\r\n    enc.x -= enc.y * kEncodeBit;\r\n    return enc;\r\n}\r\n\r\nfloat DecodeFloatRG(vec2 enc)\r\n{\r\n    vec2 kDecodeDot = vec2(1.0, 1.0 / 255.0);\r\n    return dot(enc, kDecodeDot);\r\n}\r\n\r\nvec4 EncodeDepthNormal(float depth, vec3 normals)\r\n{\r\n    vec4 encode;\r\n    encode.xy = EncodeViewNormalStereo(normals);\r\n    encode.zw = EncodeFloatRG(depth);\r\n    return encode;\r\n}\r\n\r\nvoid DecodeDepthNormal(vec4 enc, out float depth, out vec3 normal)\r\n{\r\n    depth = DecodeFloatRG(enc.zw);\r\n    normal = DecodeViewNormalStereo(enc);\r\n}\r\n\r\nvec4 depthNormalsFragment(vec4 depthNormal)\r\n{\r\n    return EncodeDepthNormal(depthNormal.w, depthNormal.xyz);\r\n}\r\n\r\n// Z buffer to linear 0..1 depth\r\nfloat Linear01Depth(float z, vec4 zbufferParams)\r\n{\r\n    return 1.0 / (zbufferParams.x * z + zbufferParams.y);\r\n}\r\n// Z buffer to linear depth\r\nfloat LinearEyeDepth(float z, vec4 zbufferParams)\r\n{\r\n    return 1.0 / (zbufferParams.z * z + zbufferParams.w);\r\n}\r\n","#if !defined(DepthNormalFrag_lib)\r\n    #define DepthNormalFrag_lib\r\n\r\n    #include \"DepthNormalUtil.glsl\";\r\n\r\nvec4 encodeDepthNormal(const in vec4 positionCS, const in vec3 normalWS)\r\n{\r\n    float depth = (positionCS.z * 2.0 - positionCS.w) * u_ProjectionParams.w;\r\n\r\n    vec3 normalVS = mat3(u_View) * normalWS;\r\n\r\n    return EncodeDepthNormal(depth, normalVS);\r\n}\r\n\r\n#endif // DepthNormalFrag_lib","#if !defined(SceneFog_lib)\r\n    #define SceneFog_lib\r\n\r\n    #ifdef FOG\r\nvarying float v_fogFactor;\r\nfloat getFogFactor()\r\n{\r\n    return v_fogFactor;\r\n}\r\n\r\nvec3 scenUnlitFog(in vec3 color)\r\n{\r\n    float lerpFact = getFogFactor();\r\n\t#ifdef ADDTIVEFOG\r\n    lerpFact = clamp(lerpFact, 0.0, 1.0);\r\n    return mix(vec3(0.0), color, lerpFact);\r\n\t#else\r\n    lerpFact = clamp(lerpFact, 0.0, 1.0);\r\n    return mix(u_FogColor.rgb, color, lerpFact);\r\n\t#endif // ADDTIVEFOG\r\n}\r\n\r\nvec3 sceneLitFog(in vec3 color)\r\n{\r\n    float lerpFact = getFogFactor();\r\n    lerpFact = clamp(lerpFact, 0.0, 1.0);\r\n    return mix(u_FogColor.rgb, color, lerpFact);\r\n}\r\n\r\n    #endif\r\n#endif // SceneFog_lib","#if !defined(SceneFog_lib)\r\n    #define SceneFog_lib\r\n\r\n    #ifdef FOG\r\nvarying float v_fogFactor;\r\nvoid FogHandle(in float fact)\r\n{\r\n    float lerpFact = 0.0;\r\n\t#ifdef FOG_EXP\r\n    lerpFact = fact * (u_FogParams.z / log(2.0));\r\n    lerpFact = exp2(-lerpFact);\r\n\t#elif defined(FOG_EXP2)\r\n    lerpFact = fact * (u_FogParams.z / sqrt(log(2.0)));\r\n    lerpFact = exp2(-lerpFact);\r\n\t#else // default FOG_LINEAR\r\n    lerpFact = (-1.0 * fact / (u_FogParams.y - u_FogParams.x) + u_FogParams.y / (u_FogParams.y - u_FogParams.x));\r\n\t#endif\r\n    v_fogFactor = lerpFact;\r\n}\r\n    #endif\r\n#endif // SceneFog_lib","// ------------------------------------------------------------------\r\n//  PCF Filtering Tent Functions\r\n// ------------------------------------------------------------------\r\n\r\n// Assuming a isoceles right angled triangle of height \"triangleHeight\" (as drawn below).\r\n// This function return the area of the triangle above the first texel(in Y the first texel).\r\n//\r\n// |\\      <-- 45 degree slop isosceles right angled triangle\r\n// | \\\r\n// ----    <-- length of this side is \"triangleHeight\"\r\n// _ _ _ _ <-- texels\r\nfloat sampleShadowGetIRTriangleTexelArea(float triangleHeight)\r\n{\r\n    return triangleHeight - 0.5;\r\n}\r\n\r\n// Assuming a isoceles triangle of 1.5 texels height and 3 texels wide lying on 4 texels.\r\n// This function return the area of the triangle above each of those texels.\r\n//    |    <-- offset from -0.5 to 0.5, 0 meaning triangle is exactly in the center\r\n//   / \\   <-- 45 degree slop isosceles triangle (ie tent projected in 2D)\r\n//  /   \\\r\n// _ _ _ _ <-- texels\r\n// X Y Z W <-- result indices (in computedArea.xyzw and computedAreaUncut.xyzw)\r\n// Top point at (right,top) in a texel,left bottom point at (middle,middle) in a texel,right bottom point at (middle,middle) in a texel.\r\nvoid sampleShadowGetTexelAreasTent3x3(float offset, out vec4 computedArea, out vec4 computedAreaUncut)\r\n{\r\n    // Compute the exterior areas,a and h is same.\r\n    float a = offset + 0.5;\r\n    float offsetSquaredHalved = a * a * 0.5;\r\n    computedAreaUncut.x = computedArea.x = offsetSquaredHalved - offset;\r\n    computedAreaUncut.w = computedArea.w = offsetSquaredHalved;\r\n\r\n    // Compute the middle areas\r\n    // For Y : We find the area in Y of as if the left section of the isoceles triangle would\r\n    // intersect the axis between Y and Z (ie where offset = 0).\r\n    computedAreaUncut.y = sampleShadowGetIRTriangleTexelArea(1.5 - offset);\r\n    // This area is superior to the one we are looking for if (offset < 0) thus we need to\r\n    // subtract the area of the triangle defined by (0,1.5-offset), (0,1.5+offset), (-offset,1.5).\r\n    float clampedOffsetLeft = min(offset,0.0);\r\n    float areaOfSmallLeftTriangle = clampedOffsetLeft * clampedOffsetLeft;\r\n    computedArea.y = computedAreaUncut.y - areaOfSmallLeftTriangle;\r\n\r\n    // We do the same for the Z but with the right part of the isoceles triangle\r\n    computedAreaUncut.z = sampleShadowGetIRTriangleTexelArea(1.5 + offset);\r\n    float clampedOffsetRight = max(offset,0.0);\r\n    float areaOfSmallRightTriangle = clampedOffsetRight * clampedOffsetRight;\r\n    computedArea.z = computedAreaUncut.z - areaOfSmallRightTriangle;\r\n}\r\n\r\n// Assuming a isoceles triangle of 2.5 texel height and 5 texels wide lying on 6 texels.\r\n// This function return the weight of each texels area relative to the full triangle area.\r\n//  /       \\\r\n// _ _ _ _ _ _ <-- texels\r\n// 0 1 2 3 4 5 <-- computed area indices (in texelsWeights[])\r\n// Top point at (right,top) in a texel,left bottom point at (middle,middle) in a texel,right bottom point at (middle,middle) in a texel.\r\nvoid sampleShadowGetTexelWeightsTent5x5(float offset, out vec3 texelsWeightsA, out vec3 texelsWeightsB)\r\n{\r\n    vec4 areaFrom3texelTriangle;\r\n    vec4 areaUncutFrom3texelTriangle;\r\n    sampleShadowGetTexelAreasTent3x3(offset, areaFrom3texelTriangle, areaUncutFrom3texelTriangle);\r\n\r\n    // Triangle slope is 45 degree thus we can almost reuse the result of the 3 texel wide computation.\r\n    // the 5 texel wide triangle can be seen as the 3 texel wide one but shifted up by one unit/texel.\r\n    // 0.16 is 1/(the triangle area)\r\n    texelsWeightsA.x = 0.16 * (areaFrom3texelTriangle.x);\r\n    texelsWeightsA.y = 0.16 * (areaUncutFrom3texelTriangle.y);\r\n    texelsWeightsA.z = 0.16 * (areaFrom3texelTriangle.y + 1.0);\r\n    texelsWeightsB.x = 0.16 * (areaFrom3texelTriangle.z + 1.0);\r\n    texelsWeightsB.y = 0.16 * (areaUncutFrom3texelTriangle.z);\r\n    texelsWeightsB.z = 0.16 * (areaFrom3texelTriangle.w);\r\n}\r\n\r\n// 5x5 Tent filter (45 degree sloped triangles in U and V)\r\nvoid sampleShadowComputeSamplesTent5x5(vec4 shadowMapTextureTexelSize, vec2 coord, out float fetchesWeights[9], out vec2 fetchesUV[9])\r\n{\r\n    // tent base is 5x5 base thus covering from 25 to 36 texels, thus we need 9 bilinear PCF fetches\r\n    vec2 tentCenterInTexelSpace = coord.xy * shadowMapTextureTexelSize.zw;\r\n    vec2 centerOfFetchesInTexelSpace = floor(tentCenterInTexelSpace + 0.5);\r\n    vec2 offsetFromTentCenterToCenterOfFetches = tentCenterInTexelSpace - centerOfFetchesInTexelSpace;\r\n\r\n    // find the weight of each texel based on the area of a 45 degree slop tent above each of them.\r\n    vec3 texelsWeightsUA, texelsWeightsUB;\r\n    vec3 texelsWeightsVA, texelsWeightsVB;\r\n    sampleShadowGetTexelWeightsTent5x5(offsetFromTentCenterToCenterOfFetches.x, texelsWeightsUA, texelsWeightsUB);\r\n    sampleShadowGetTexelWeightsTent5x5(offsetFromTentCenterToCenterOfFetches.y, texelsWeightsVA, texelsWeightsVB);\r\n\r\n    // each fetch will cover a group of 2x2 texels, the weight of each group is the sum of the weights of the texels\r\n    vec3 fetchesWeightsU = vec3(texelsWeightsUA.xz, texelsWeightsUB.y) + vec3(texelsWeightsUA.y, texelsWeightsUB.xz);\r\n    vec3 fetchesWeightsV = vec3(texelsWeightsVA.xz, texelsWeightsVB.y) + vec3(texelsWeightsVA.y, texelsWeightsVB.xz);\r\n\r\n    // move the PCF bilinear fetches to respect texels weights\r\n    vec3 fetchesOffsetsU = vec3(texelsWeightsUA.y, texelsWeightsUB.xz) / fetchesWeightsU.xyz + vec3(-2.5,-0.5,1.5);\r\n    vec3 fetchesOffsetsV = vec3(texelsWeightsVA.y, texelsWeightsVB.xz) / fetchesWeightsV.xyz + vec3(-2.5,-0.5,1.5);\r\n    fetchesOffsetsU *= shadowMapTextureTexelSize.xxx;\r\n    fetchesOffsetsV *= shadowMapTextureTexelSize.yyy;\r\n\r\n    vec2 bilinearFetchOrigin = centerOfFetchesInTexelSpace * shadowMapTextureTexelSize.xy;\r\n    fetchesUV[0] = bilinearFetchOrigin + vec2(fetchesOffsetsU.x, fetchesOffsetsV.x);\r\n    fetchesUV[1] = bilinearFetchOrigin + vec2(fetchesOffsetsU.y, fetchesOffsetsV.x);\r\n    fetchesUV[2] = bilinearFetchOrigin + vec2(fetchesOffsetsU.z, fetchesOffsetsV.x);\r\n    fetchesUV[3] = bilinearFetchOrigin + vec2(fetchesOffsetsU.x, fetchesOffsetsV.y);\r\n    fetchesUV[4] = bilinearFetchOrigin + vec2(fetchesOffsetsU.y, fetchesOffsetsV.y);\r\n    fetchesUV[5] = bilinearFetchOrigin + vec2(fetchesOffsetsU.z, fetchesOffsetsV.y);\r\n    fetchesUV[6] = bilinearFetchOrigin + vec2(fetchesOffsetsU.x, fetchesOffsetsV.z);\r\n    fetchesUV[7] = bilinearFetchOrigin + vec2(fetchesOffsetsU.y, fetchesOffsetsV.z);\r\n    fetchesUV[8] = bilinearFetchOrigin + vec2(fetchesOffsetsU.z, fetchesOffsetsV.z);\r\n\r\n    fetchesWeights[0] = fetchesWeightsU.x * fetchesWeightsV.x;\r\n    fetchesWeights[1] = fetchesWeightsU.y * fetchesWeightsV.x;\r\n    fetchesWeights[2] = fetchesWeightsU.z * fetchesWeightsV.x;\r\n    fetchesWeights[3] = fetchesWeightsU.x * fetchesWeightsV.y;\r\n    fetchesWeights[4] = fetchesWeightsU.y * fetchesWeightsV.y;\r\n    fetchesWeights[5] = fetchesWeightsU.z * fetchesWeightsV.y;\r\n    fetchesWeights[6] = fetchesWeightsU.x * fetchesWeightsV.z;\r\n    fetchesWeights[7] = fetchesWeightsU.y * fetchesWeightsV.z;\r\n    fetchesWeights[8] = fetchesWeightsU.z * fetchesWeightsV.z;\r\n}","#if !defined(ShadowSampler_lib)\r\n    #define ShadowSampler_lib\r\n\r\n    #ifndef GRAPHICS_API_GLES3\r\n\t#define NO_NATIVE_SHADOWMAP\r\n    #endif // GRAPHICS_API_GLES3\r\n\r\n    #if defined(NO_NATIVE_SHADOWMAP)\r\n\t#define TEXTURE2D_SHADOW(textureName)\t\t     uniform mediump sampler2D textureName\r\n\t#define SAMPLE_TEXTURE2D_SHADOW(textureName, coord3) (texture2D(textureName, coord3.xy).r < coord3.z ? 0.0 : 1.0)\r\n\t#define TEXTURE2D_SHADOW_PARAM(shadowMap)\t     mediump sampler2D shadowMap\r\n    #else // NO_NATIVE_SHADOWMAP\r\n\t#define TEXTURE2D_SHADOW(textureName)\t\t     uniform mediump sampler2DShadow textureName\r\n\t#define SAMPLE_TEXTURE2D_SHADOW(textureName, coord3) textureLod(textureName, coord3, 0.0)\r\n\t#define TEXTURE2D_SHADOW_PARAM(shadowMap)\t     mediump sampler2DShadow shadowMap\r\n    #endif // NO_NATIVE_SHADOWMAP\r\n\r\n    // 计算阴影\r\n    #ifdef RECEIVESHADOW\r\n\r\n\t#include \"ShadowSampleTent.glsl\";\r\n\r\nuniform vec4 u_ShadowParams;\r\n\r\n\t#define ShadowStrength\t   u_ShadowParams.x\r\n\t#define SpotShadowStrength u_ShadowParams.y\r\n\r\n    // 平行光阴影\r\n\t#ifdef SHADOW\r\n\t    #define CALCULATE_SHADOWS\r\nvarying vec4 v_ShadowCoord;\r\nTEXTURE2D_SHADOW(u_ShadowMap);\r\nuniform vec4 u_ShadowMapSize;\r\n\r\n#ifdef SHADOW_CASCADE\r\nconst int c_MaxCascadeCount = 4;\r\n#else //SHADOW_CASCADE\r\nconst int c_MaxCascadeCount = 1;\r\n#endif//SHADOW_CASCADE\r\n\r\nuniform mat4 u_ShadowMatrices[c_MaxCascadeCount];\r\nuniform vec4 u_ShadowSplitSpheres[c_MaxCascadeCount];\r\n\t#endif // SHADOW\r\n\r\n\t// 聚光灯阴影\r\n\t#ifdef SHADOW_SPOT\r\n\t    #define CALCULATE_SPOTSHADOWS\r\nvarying vec4 v_SpotShadowCoord;\r\nTEXTURE2D_SHADOW(u_SpotShadowMap);\r\nuniform vec4 u_SpotShadowMapSize;\r\nuniform mat4 u_SpotViewProjectMatrix;\r\n\t#endif // SHADOW_SPOT\r\n\r\nfloat sampleShdowMapFiltered4(TEXTURE2D_SHADOW_PARAM(shadowMap), vec3 shadowCoord, vec4 shadowMapSize)\r\n{\r\n    float attenuation;\r\n    vec4 attenuation4;\r\n    vec2 offset = shadowMapSize.xy / 2.0;\r\n    vec3 shadowCoord0 = shadowCoord + vec3(-offset, 0.0);\r\n    vec3 shadowCoord1 = shadowCoord + vec3(offset.x, -offset.y, 0.0);\r\n    vec3 shadowCoord2 = shadowCoord + vec3(-offset.x, offset.y, 0.0);\r\n    vec3 shadowCoord3 = shadowCoord + vec3(offset, 0.0);\r\n    attenuation4.x = SAMPLE_TEXTURE2D_SHADOW(shadowMap, shadowCoord0);\r\n    attenuation4.y = SAMPLE_TEXTURE2D_SHADOW(shadowMap, shadowCoord1);\r\n    attenuation4.z = SAMPLE_TEXTURE2D_SHADOW(shadowMap, shadowCoord2);\r\n    attenuation4.w = SAMPLE_TEXTURE2D_SHADOW(shadowMap, shadowCoord3);\r\n    attenuation = dot(attenuation4, vec4(0.25));\r\n    return attenuation;\r\n}\r\n\r\nfloat sampleShdowMapFiltered9(TEXTURE2D_SHADOW_PARAM(shadowMap), vec3 shadowCoord, vec4 shadowmapSize)\r\n{\r\n    float attenuation;\r\n    float fetchesWeights[9];\r\n    vec2 fetchesUV[9];\r\n    sampleShadowComputeSamplesTent5x5(shadowmapSize, shadowCoord.xy, fetchesWeights, fetchesUV);\r\n    attenuation = fetchesWeights[0] * SAMPLE_TEXTURE2D_SHADOW(shadowMap, vec3(fetchesUV[0].xy, shadowCoord.z));\r\n    attenuation += fetchesWeights[1] * SAMPLE_TEXTURE2D_SHADOW(shadowMap, vec3(fetchesUV[1].xy, shadowCoord.z));\r\n    attenuation += fetchesWeights[2] * SAMPLE_TEXTURE2D_SHADOW(shadowMap, vec3(fetchesUV[2].xy, shadowCoord.z));\r\n    attenuation += fetchesWeights[3] * SAMPLE_TEXTURE2D_SHADOW(shadowMap, vec3(fetchesUV[3].xy, shadowCoord.z));\r\n    attenuation += fetchesWeights[4] * SAMPLE_TEXTURE2D_SHADOW(shadowMap, vec3(fetchesUV[4].xy, shadowCoord.z));\r\n    attenuation += fetchesWeights[5] * SAMPLE_TEXTURE2D_SHADOW(shadowMap, vec3(fetchesUV[5].xy, shadowCoord.z));\r\n    attenuation += fetchesWeights[6] * SAMPLE_TEXTURE2D_SHADOW(shadowMap, vec3(fetchesUV[6].xy, shadowCoord.z));\r\n    attenuation += fetchesWeights[7] * SAMPLE_TEXTURE2D_SHADOW(shadowMap, vec3(fetchesUV[7].xy, shadowCoord.z));\r\n    attenuation += fetchesWeights[8] * SAMPLE_TEXTURE2D_SHADOW(shadowMap, vec3(fetchesUV[8].xy, shadowCoord.z));\r\n    return attenuation;\r\n}\r\n    #endif // RECEIVESHADOW\r\n\r\n    // 计算平行光阴影\r\n    #if defined(CALCULATE_SHADOWS)\r\n\r\n#ifdef SHADOW_CASCADE\r\n// 平行光阴影级联索引\r\nmediump int computeCascadeIndex(in vec3 positionWS)\r\n{\r\n    vec3 fromCenter0 = positionWS - u_ShadowSplitSpheres[0].xyz;\r\n    vec3 fromCenter1 = positionWS - u_ShadowSplitSpheres[1].xyz;\r\n    vec3 fromCenter2 = positionWS - u_ShadowSplitSpheres[2].xyz;\r\n    vec3 fromCenter3 = positionWS - u_ShadowSplitSpheres[3].xyz;\r\n\r\n    mediump vec4 comparison = vec4(dot(fromCenter0, fromCenter0) < u_ShadowSplitSpheres[0].w,\r\n\tdot(fromCenter1, fromCenter1) < u_ShadowSplitSpheres[1].w,\r\n\tdot(fromCenter2, fromCenter2) < u_ShadowSplitSpheres[2].w,\r\n\tdot(fromCenter3, fromCenter3) < u_ShadowSplitSpheres[3].w);\r\n\r\n    comparison.yzw = clamp(comparison.yzw - comparison.xyz, 0.0, 1.0); // keep the nearest\r\n    mediump vec4 indexCoefficient = vec4(4.0, 3.0, 2.0, 1.0);\r\n    mediump int index = 4 - int(dot(comparison, indexCoefficient));\r\n    return index;\r\n}\r\n#endif\r\n\r\n// 平行光阴影坐标\r\nvec4 getShadowCoord(in vec3 positionWS)\r\n{\r\n\t#ifdef SHADOW_CASCADE\r\n    mediump int cascadeIndex = computeCascadeIndex(positionWS);\r\n\t    #ifdef GRAPHICS_API_GLES3\r\n    mat4 shadowMat = u_ShadowMatrices[cascadeIndex];\r\n\t    #else // GRAPHICS_API_GLES3\r\n    mat4 shadowMat;\r\n    if (cascadeIndex == 0)\r\n\t{\r\n\t    shadowMat = u_ShadowMatrices[0];\r\n\t}\r\n    else if (cascadeIndex == 1)\r\n\t{\r\n\t    shadowMat = u_ShadowMatrices[1];\r\n\t}\r\n    else if (cascadeIndex == 2)\r\n\t{\r\n\t    shadowMat = u_ShadowMatrices[2];\r\n\t}\r\n    else\r\n\t{\r\n\t    shadowMat = u_ShadowMatrices[3];\r\n\t}\r\n\t    #endif // GRAPHICS_API_GLES3\r\n\r\n    return shadowMat * vec4(positionWS, 1.0);\r\n\r\n\t#else // SHADOW_CASCADE\r\n\r\n    return u_ShadowMatrices[0] * vec4(positionWS, 1.0);\r\n\r\n\t#endif // SHADOW_CASCADE\r\n}\r\n\r\n// 采样平行光阴影\r\nfloat sampleShadowmap(in vec4 shadowCoord)\r\n{\r\n    float attenuation = 1.0;\r\n\r\n    vec3 coord = shadowCoord.xyz / shadowCoord.w;\r\n\r\n    vec4 shadowmapSize = u_ShadowMapSize;\r\n\r\n    if (coord.z > 0.0 && coord.z < 1.0)\r\n\t{\r\n\t#if defined(SHADOW_SOFT_SHADOW_HIGH)\r\n\t    attenuation = sampleShdowMapFiltered9(u_ShadowMap, coord, shadowmapSize);\r\n\t#elif defined(SHADOW_SOFT_SHADOW_LOW)\r\n\t    attenuation = sampleShdowMapFiltered4(u_ShadowMap, coord, shadowmapSize);\r\n\t#else // hard\r\n\t    attenuation = SAMPLE_TEXTURE2D_SHADOW(u_ShadowMap, coord);\r\n\t#endif // SHADOW_SOFT_SHADOW_HIGH\r\n\t    attenuation = mix(1.0, attenuation, ShadowStrength);\r\n\t}\r\n\r\n    return attenuation;\r\n}\r\n\r\n    #endif // CALCULATE_SHADOWS\r\n\r\n    // 计算 聚光灯 阴影\r\n    #if defined(CALCULATE_SPOTSHADOWS)\r\n\r\n// 聚光灯阴影坐标\r\nvec4 getSpotShadowCoord(in vec3 positionWS)\r\n{\r\n    vec4 coordinate = u_SpotViewProjectMatrix * vec4(positionWS, 1.0);\r\n\r\n    return coordinate;\r\n}\r\n\r\n// 采样聚光灯阴影\r\nfloat sampleSpotShadowmap(vec4 shadowCoord)\r\n{\r\n    float attenuation = 1.0;\r\n\r\n    vec3 coord = shadowCoord.xyz / shadowCoord.w;\r\n    coord.xy = coord.xy * 0.5 + 0.5;\r\n\r\n    vec4 shadowmapSize = u_SpotShadowMapSize;\r\n    // todo\r\n    if (coord.z > 0.0 && coord.z < 1.0)\r\n\t{\r\n\t#if defined(SHADOW_SPOT_SOFT_SHADOW_HIGH)\r\n\t    attenuation = sampleShdowMapFiltered9(u_SpotShadowMap, coord, shadowmapSize);\r\n\t#elif defined(SHADOW_SPOT_SOFT_SHADOW_LOW)\r\n\t    attenuation = sampleShdowMapFiltered4(u_SpotShadowMap, coord, shadowmapSize);\r\n\t#else // hard\r\n\t    attenuation = SAMPLE_TEXTURE2D_SHADOW(u_SpotShadowMap, coord);\r\n\t#endif\r\n\t    attenuation = mix(1.0, attenuation, SpotShadowStrength);\r\n\t}\r\n\r\n    return attenuation;\r\n}\r\n\r\n    #endif // CALCULATE_SPOTSHADOWS\r\n\r\n#endif // ShadowSampler_lib","#if !defined(Lighting_lib)\r\n    #define Lighting_lib\r\n\r\n    #include \"ShadowSampler.glsl\";\r\n\r\nstruct Light {\r\n    vec3 color;\r\n    vec3 dir;\r\n    float attenuation;\r\n};\r\n\r\nstruct DirectionLight {\r\n    vec3 color;\r\n    vec3 direction;\r\n    float attenuation;\r\n    int lightMode;\r\n};\r\n\r\nstruct PointLight {\r\n    vec3 color;\r\n    vec3 position;\r\n    float range;\r\n    float attenuation;\r\n    int lightMode;\r\n};\r\n\r\nstruct SpotLight {\r\n    vec3 color;\r\n    vec3 position;\r\n    float range;\r\n    vec3 direction;\r\n    float spot;\r\n    float attenuation;\r\n    int lightMode;\r\n};\r\n\r\n    #define LightMode_Mix      0\r\n    #define LightMode_RealTime 1\r\n\r\nint getAttenuationByMode(float lightMapMode)\r\n{\r\n    #ifdef LIGHTMAP // mix 0 realtime 1\r\n    return int(lightMapMode);\r\n    #else // LIGHTMAP\r\n\r\n\t#ifdef VOLUMETRICGI\r\n    return int(lightMapMode);\r\n\t#endif // VOLUMETRICGI\r\n\r\n    #endif // LIGHTMAP\r\n    return LightMode_RealTime;\r\n}\r\n\r\n    #if defined(DIRECTIONLIGHT) || defined(POINTLIGHT) || defined(SPOTLIGHT)\r\n\r\n\t#define LIGHTING\r\n\r\n// 灯光衰减函数\r\nfloat attenuation(in vec3 L, in float invLightRadius)\r\n{\r\n    float fRatio = clamp(length(L) * invLightRadius, 0.0, 1.0);\r\n    fRatio *= fRatio;\r\n    return 1.0 / (1.0 + 25.0 * fRatio) * clamp(4.0 * (1.0 - fRatio), 0.0, 1.0);\r\n}\r\n\r\n// 平行光\r\nLight getLight(in DirectionLight directionLight)\r\n{\r\n    Light light;\r\n    light.color = directionLight.color;\r\n    light.dir = directionLight.direction;\r\n    light.attenuation = directionLight.attenuation;\r\n    return light;\r\n}\r\n\r\n// 点光\r\nLight getLight(in PointLight pointLight, in vec3 normalWS, in vec3 positionWS)\r\n{\r\n    vec3 lightDirection = positionWS - pointLight.position;\r\n    float rangeAttenuate = attenuation(lightDirection, 1.0 / pointLight.range);\r\n\r\n    Light light;\r\n    light.color = pointLight.color * rangeAttenuate;\r\n    light.dir = normalize(lightDirection);\r\n    light.attenuation = pointLight.attenuation;\r\n    return light;\r\n}\r\n\r\n// 聚光灯\r\nLight getLight(in SpotLight spotLight, in vec3 normalWS, in vec3 positionWS)\r\n{\r\n    vec3 lightDirection = positionWS - spotLight.position;\r\n    vec3 normalizeLightDir = normalize(lightDirection);\r\n\r\n    vec2 cosAngles = cos(vec2(spotLight.spot, spotLight.spot * 0.5) * 0.5);\r\n    float dirAttenuate = dot(spotLight.direction, normalizeLightDir);\r\n    dirAttenuate *= smoothstep(cosAngles.x, cosAngles.y, dirAttenuate);\r\n\r\n    float rangeAttenuate = attenuation(lightDirection, 1.0 / spotLight.range);\r\n\r\n    Light light;\r\n    light.color = spotLight.color * rangeAttenuate * dirAttenuate;\r\n    light.dir = normalizeLightDir;\r\n    light.attenuation = spotLight.attenuation;\r\n    return light;\r\n}\r\n\r\n\t#ifdef LEGACYSINGLELIGHTING\r\n\t    #define CalculateLightCount 1\r\n\t    #define DirectionCount\t1\r\n\r\n\t    #ifdef DIRECTIONLIGHT\r\nuniform DirectionLight u_DirectionLight;\r\n\t    #endif // DIRECTIONLIGHT\r\n\r\n\t    #ifdef POINTLIGHT\r\nuniform PointLight u_PointLight;\r\n\t    #endif // POINTLIGHT\r\n\r\n\t    #ifdef SPOTLIGHT\r\nuniform SpotLight u_SpotLight;\r\n\t    #endif // SPOTLIGHT\r\n\r\n\t#else // LEGACYSINGLELIGHTING\r\n\t    #define CalculateLightCount MAX_LIGHT_COUNT\r\n\t    #define DirectionCount\tu_DirationLightCount\r\n\r\nuniform sampler2D u_LightBuffer;\r\n\r\n\t    #ifdef DIRECTIONLIGHT\r\nuniform mediump int u_DirationLightCount;\r\n\t    #endif\r\n\r\n\t    #if defined(POINTLIGHT) || defined(SPOTLIGHT)\r\nconst int c_ClusterBufferWidth = CLUSTER_X_COUNT * CLUSTER_Y_COUNT;\r\nconst int c_ClusterBufferHeight = CLUSTER_Z_COUNT * (1 + int(ceil(float(MAX_LIGHT_COUNT_PER_CLUSTER) / 4.0)));\r\nconst int c_ClusterBufferFloatWidth = c_ClusterBufferWidth * 4;\r\nuniform sampler2D u_LightClusterBuffer;\r\n\r\nint getLightIndex(in int offset, in int index)\r\n{\r\n    int totalOffset = offset + index;\r\n    int row = totalOffset / c_ClusterBufferFloatWidth;\r\n    int lastRowFloat = totalOffset - row * c_ClusterBufferFloatWidth;\r\n    int col = lastRowFloat / 4;\r\n    vec2 uv = vec2((float(col) + 0.5) / float(c_ClusterBufferWidth), (float(row) + 0.5) / float(c_ClusterBufferHeight));\r\n    vec4 texPixel = texture2D(u_LightClusterBuffer, uv);\r\n    int pixelComponent = lastRowFloat - col * 4;\r\n\r\n\t\t#ifdef GRAPHICS_API_GLES3\r\n    return int(texPixel[pixelComponent]);\r\n\t\t#else\r\n    if (pixelComponent == 0)\r\n\treturn int(texPixel.x);\r\n    else if (pixelComponent == 1)\r\n\treturn int(texPixel.y);\r\n    else if (pixelComponent == 2)\r\n\treturn int(texPixel.z);\r\n    else\r\n\treturn int(texPixel.w);\r\n\t\t#endif\r\n}\r\n\t    #endif // POINTLIGHT || SPOTLIGHT\r\n\r\n\t#endif // LEGACYSINGLELIGHTING\r\n\r\n\t#ifdef DIRECTIONLIGHT\r\nDirectionLight getDirectionLight(in int index, in vec3 positionWS)\r\n{\r\n    DirectionLight light;\r\n\t    #ifdef LEGACYSINGLELIGHTING\r\n    light.color = u_DirectionLight.color;\r\n    light.direction = u_DirectionLight.direction;\r\n    light.attenuation = 1.0;\r\n    light.lightMode = getAttenuationByMode(float(u_DirectionLight.lightMode));\r\n\t    #else // LEGACYSINGLELIGHTING\r\n    float v = (float(index) + 0.5) / float(CalculateLightCount);\r\n    vec4 p1 = texture2D(u_LightBuffer, vec2(0.125, v));\r\n    vec4 p2 = texture2D(u_LightBuffer, vec2(0.375, v));\r\n    light.color = p1.rgb;\r\n    light.direction = p2.rgb;\r\n    light.attenuation = 1.0;\r\n    light.lightMode = getAttenuationByMode(p1.a);\r\n\t    #endif // LEGACYSINGLELIGHTING\r\n\r\n\t    #if defined(CALCULATE_SHADOWS)\r\n    if (index == 0)\r\n\t{\r\n\t    vec4 shadowCoord = getShadowCoord(positionWS);\r\n\t    float shadowAttenuation = sampleShadowmap(shadowCoord);\r\n\t    light.attenuation = shadowAttenuation;\r\n\t}\r\n\t    #endif // CALCULATE_SHADOWS\r\n\r\n    return light;\r\n}\r\n\t#endif // DIRECTIONLIGHT\r\n\r\n\t#if defined(POINTLIGHT) || defined(SPOTLIGHT)\r\nivec4 getClusterInfo(mat4 viewMatrix, vec4 viewport, vec3 positionWS, vec4 fragCoord, vec4 projectParams)\r\n{\r\n\t    #ifdef LEGACYSINGLELIGHTING\r\n    return ivec4(1, 1, 0, 0);\r\n\t    #else // LEGACYSINGLELIGHTING\r\n    // todo  这个地方 用 positionVS 替换?\r\n    vec3 viewPos = vec3(viewMatrix * vec4(positionWS, 1.0));\r\n    int clusterXIndex = int(floor(fragCoord.x / (float(viewport.z) / float(CLUSTER_X_COUNT))));\r\n    int clusterYIndex = int(floor((viewport.w * (projectParams.z < 0.0 ? 0.0 : 1.0) - fragCoord.y * projectParams.z) / (float(viewport.w) / float(CLUSTER_Y_COUNT))));\r\n    float zSliceParam = float(CLUSTER_Z_COUNT) / log2(projectParams.y / projectParams.x);\r\n    int clusterZIndex = int(floor(log2(-viewPos.z) * zSliceParam - log2(projectParams.x) * zSliceParam));\r\n    // todo 化简\r\n    vec2 uv = vec2((float(clusterXIndex + clusterYIndex * CLUSTER_X_COUNT) + 0.5) / float(c_ClusterBufferWidth), (float(clusterZIndex) + 0.5) / float(c_ClusterBufferHeight));\r\n    vec4 clusterPixel = texture2D(u_LightClusterBuffer, uv);\r\n    return ivec4(clusterPixel); // X:Point Count Y:Spot Count Z、W:Light Offset\r\n\t    #endif // LEGACYSINGLELIGHTING\r\n}\r\n\t#endif // POINTLIGHT || SPOTLIGHT\r\n\r\n\t#ifdef POINTLIGHT\r\nPointLight getPointLight(in int index, in ivec4 clusterInfo, in vec3 positionWS)\r\n{\r\n\r\n    PointLight light;\r\n\t    #ifdef LEGACYSINGLELIGHTING\r\n    light.color = u_PointLight.color;\r\n    light.position = u_PointLight.position;\r\n    light.range = u_PointLight.range;\r\n    light.attenuation = 1.0;\r\n    light.lightMode = getAttenuationByMode(float(u_PointLight.lightMode));\r\n\t    #else // LEGACYSINGLELIGHTING\r\n    // todo  重复计算\r\n    int indexOffset = clusterInfo.z * c_ClusterBufferFloatWidth + clusterInfo.w;\r\n    int pointIndex = getLightIndex(indexOffset, index);\r\n    float v = (float(pointIndex) + 0.5) / float(CalculateLightCount);\r\n    vec4 p1 = texture2D(u_LightBuffer, vec2(0.125, v));\r\n    vec4 p2 = texture2D(u_LightBuffer, vec2(0.375, v));\r\n    light.color = p1.rgb;\r\n    light.range = p1.a;\r\n    light.position = p2.rgb;\r\n    light.attenuation = 1.0;\r\n    light.lightMode = getAttenuationByMode(p2.a);\r\n\t    #endif // LEGACYSINGLELIGHTING\r\n    return light;\r\n}\r\n\t#endif // POINTLIGHT\r\n\r\n\t#ifdef SPOTLIGHT\r\nSpotLight getSpotLight(in int index, in ivec4 clusterInfo, in vec3 positionWS)\r\n{\r\n    SpotLight light;\r\n\r\n\t    #ifdef LEGACYSINGLELIGHTING\r\n    light.color = u_SpotLight.color;\r\n    light.position = u_SpotLight.position;\r\n    light.range = u_SpotLight.range;\r\n    light.direction = u_SpotLight.direction;\r\n    light.spot = u_SpotLight.spot;\r\n    light.attenuation = 1.0;\r\n    light.lightMode = getAttenuationByMode(float(u_SpotLight.lightMode));\r\n\t    #else // LEGACYSINGLELIGHTING\r\n    // todo  重复计算\r\n    int indexOffset = clusterInfo.z * c_ClusterBufferFloatWidth + clusterInfo.w;\r\n    int spotIndex = getLightIndex(indexOffset, index + clusterInfo.x);\r\n    float v = (float(spotIndex) + 0.5) / float(CalculateLightCount);\r\n    vec4 p1 = texture2D(u_LightBuffer, vec2(0.125, v));\r\n    vec4 p2 = texture2D(u_LightBuffer, vec2(0.375, v));\r\n    vec4 p3 = texture2D(u_LightBuffer, vec2(0.625, v));\r\n    light.color = p1.rgb;\r\n    light.range = p1.a;\r\n    light.position = p2.rgb;\r\n    light.spot = p2.a;\r\n    light.direction = p3.rgb;\r\n    light.attenuation = 1.0;\r\n    light.lightMode = getAttenuationByMode(p3.a);\r\n\t    #endif // LEGACYSINGLELIGHTING\r\n\r\n\t    #if defined(CALCULATE_SPOTSHADOWS)\r\n    if (index == 0)\r\n\t{\r\n\t    vec4 shadowCoord = getSpotShadowCoord(positionWS);\r\n\t    float shadowAttenuation = sampleSpotShadowmap(shadowCoord);\r\n\t    light.attenuation = shadowAttenuation;\r\n\t}\r\n\t    #endif // CALCULATE_SPOTSHADOWS\r\n\r\n    return light;\r\n}\r\n\t#endif // SPOTLIGHT\r\n\r\n    #endif // DIRECTIONLIGHT || POINTLIGHT || SPOTLIGHT\r\n\r\n#endif // Lighting_lib","#if !defined(globalIllumination_lib)\r\n    #define globalIllumination_lib\r\n\r\n    #ifdef VOLUMETRICGI\r\n\t#include \"VolumetricGI.glsl\";\r\n    #endif // VOLUMETRICGI\r\n\r\nvec3 rotateByYAixs(in vec3 normal)\r\n{\r\n    float co = cos(u_GIRotate);\r\n    float si = sin(u_GIRotate);\r\n    float x = normal.x * co - normal.z * si;\r\n    float z = normal.x * si + normal.z * co;\r\n    return vec3(x, normal.y, z);\r\n}\r\n\r\nvec4 rotateByYAixs(in vec4 normal)\r\n{\r\n    float co = cos(u_GIRotate);\r\n    float si = sin(u_GIRotate);\r\n    float x = normal.x * co - normal.z * si;\r\n    float z = normal.x * si + normal.z * co;\r\n    return vec4(x, normal.y, z, normal.w);\r\n}\r\nuniform float u_AmbientIntensity;\r\nuniform float u_ReflectionIntensity;\r\n\r\n    #ifdef GI_IBL\r\n\r\nuniform vec3 u_IblSH[9];\r\n\r\nuniform samplerCube u_IBLTex;\r\nuniform float u_IBLRoughnessLevel;\r\n\r\n\t#define IBL_ROUGHNESS_LEVEL u_IBLRoughnessLevel\r\n\r\n// todo 格式\r\nvec3 diffuseIrradiance(in vec3 normalWS)\r\n{\r\n    // todo cmeng 生成的数据问题， 临时转换下\r\n    vec3 n = normalWS * vec3(-1.0, 1.0, 1.0);\r\n    n = rotateByYAixs(n);\r\n    return max(\r\n\t       u_IblSH[0]\r\n\t\t   + u_IblSH[1] * n.y\r\n\t\t   + u_IblSH[2] * n.z\r\n\t\t   + u_IblSH[3] * n.x\r\n\t\t   + u_IblSH[4] * (n.y * n.x)\r\n\t\t   + u_IblSH[5] * (n.y * n.z)\r\n\t\t   + u_IblSH[6] * (3.0 * n.z * n.z - 1.0)\r\n\t\t   + u_IblSH[7] * (n.z * n.x)\r\n\t\t   + u_IblSH[8] * (n.x * n.x - n.y * n.y),\r\n\t       0.0)\r\n\t* u_AmbientIntensity;\r\n}\r\n\r\nvec3 diffuseIrradiance(in vec3 normalWS, in vec3 positionWS, in vec3 viewDir)\r\n{\r\n\t#ifdef VOLUMETRICGI\r\n    vec3 surfaceBias = VolumetricGISurfaceBias(normalWS, viewDir);\r\n    return VolumetricGIVolumeIrradiance(positionWS, surfaceBias, normalWS) * u_AmbientIntensity;\r\n\t#else // VOLUMETRICGI\r\n    return diffuseIrradiance(normalWS);\r\n\t#endif // VOLUMETRICGI\r\n}\r\n\r\nvec3 specularRadiance(in vec3 r, in float perceptualRoughness)\r\n{\r\n    float lod = IBL_ROUGHNESS_LEVEL * perceptualRoughness * (2.0 - perceptualRoughness);\r\n\r\n    // todo 临时转换\r\n    vec3 reflectDir = r * vec3(-1.0, 1.0, 1.0);\r\n\r\n    // todo rotateY SceneConfig\r\n    reflectDir = rotateByYAixs(reflectDir);\r\n\r\n    // todo float 编码 ?\r\n    vec4 reflectSampler = textureCubeLodEXT(u_IBLTex, reflectDir, lod);\r\n\r\n\t#ifdef IBL_RGBD\r\n    return decodeRGBD(reflectSampler) * u_ReflectionIntensity;\r\n\t#else // IBL_RGBD\r\n    return reflectSampler.rgb * u_ReflectionIntensity;\r\n\t#endif // IBL_RGBD\r\n}\r\n\r\n    #endif // GI_IBL\r\n\r\n    #ifdef GI_LEGACYIBL\r\n\r\nuniform vec4 u_AmbientSHAr;\r\nuniform vec4 u_AmbientSHAg;\r\nuniform vec4 u_AmbientSHAb;\r\nuniform vec4 u_AmbientSHBr;\r\nuniform vec4 u_AmbientSHBg;\r\nuniform vec4 u_AmbientSHBb;\r\nuniform vec4 u_AmbientSHC;\r\n\r\n\t#define LAYA_SPECCUBE_LOD_STEPS 6.0\r\nuniform samplerCube u_ReflectTexture;\r\nuniform vec4 u_ReflectCubeHDRParams;\r\n\r\nvec3 shEvalLinearL0L1(in vec4 normal)\r\n{\r\n    vec3 x;\r\n    x.r = dot(u_AmbientSHAr, normal);\r\n    x.g = dot(u_AmbientSHAg, normal);\r\n    x.b = dot(u_AmbientSHAb, normal);\r\n    return x;\r\n}\r\n\r\nvec3 shEvalLinearL2(in vec4 normal)\r\n{\r\n    vec3 x1, x2;\r\n    // 4 of the quadratic (L2) polynomials\r\n    vec4 vB = normal.xyzz * normal.yzzx;\r\n    x1.r = dot(u_AmbientSHBr, vB);\r\n    x1.g = dot(u_AmbientSHBg, vB);\r\n    x1.b = dot(u_AmbientSHBb, vB);\r\n\r\n    // Final (5th) quadratic (L2) polynomial\r\n    float vC = normal.x * normal.x - normal.y * normal.y;\r\n    x2 = u_AmbientSHC.rgb * vC;\r\n\r\n    return x1 + x2;\r\n}\r\n\r\nvec3 diffuseIrradiance(in vec3 normalWS)\r\n{\r\n    // todo -x 坐标转换\r\n    vec4 normal = vec4(-normalWS.x, normalWS.yz, 1.0);\r\n\r\n    // TODO rotate y SceneConfig\r\n\r\n    normal = rotateByYAixs(normal);\r\n\r\n    vec3 ambientContrib = shEvalLinearL0L1(normal);\r\n    ambientContrib += shEvalLinearL2(normal);\r\n    vec3 ambient = max(vec3(0.0), ambientContrib);\r\n\r\n    return ambient * u_AmbientIntensity;\r\n}\r\n\r\nvec3 diffuseIrradiance(in vec3 normalWS, in vec3 positionWS, in vec3 viewDir)\r\n{\r\n\t#ifdef VOLUMETRICGI\r\n    vec3 surfaceBias = VolumetricGISurfaceBias(normalWS, viewDir);\r\n    return VolumetricGIVolumeIrradiance(positionWS, surfaceBias, normalWS) * u_AmbientIntensity;\r\n\t#else // VOLUMETRICGI\r\n    return diffuseIrradiance(normalWS);\r\n\t#endif // VOLUMETRICGI\r\n}\r\n\r\nvec3 specularRadiance(in vec3 r, in float perceptualRoughness)\r\n{\r\n    float roughness = perceptualRoughness * (1.7 - 0.7 * perceptualRoughness);\r\n    // todo 临时转换\r\n    r *= vec3(-1.0, 1.0, 1.0);\r\n    r = rotateByYAixs(r);\r\n\r\n    float lod = roughness * LAYA_SPECCUBE_LOD_STEPS;\r\n    vec4 rgbm = textureCubeLodEXT(u_ReflectTexture, r, lod);\r\n    float range = u_ReflectCubeHDRParams.x;\r\n    vec3 color = decodeRGBM(rgbm, range);\r\n    color = gammaToLinear(color);\r\n    return color * u_ReflectionIntensity;\r\n}\r\n\r\n    #endif // GI_LEGACYIBL\r\n\r\n    #ifndef GI_IBL\r\n\t#ifndef GI_LEGACYIBL\r\n\r\nuniform vec4 u_AmbientColor;\r\n\r\nvec3 diffuseIrradiance(in vec3 normalWS)\r\n{\r\n    return u_AmbientColor.rgb * u_AmbientIntensity;\r\n}\r\n\r\nvec3 diffuseIrradiance(in vec3 normalWS, in vec3 positionWS, in vec3 viewDir)\r\n{\r\n    return diffuseIrradiance(normalWS);\r\n}\r\n\r\nvec3 specularRadiance(in vec3 r, in float perceptualRoughness)\r\n{\r\n    // todo\r\n    return u_AmbientColor.rgb * u_ReflectionIntensity;\r\n}\r\n\r\n\t#endif // GI_LEGACYIBL\r\n    #endif // GI_IBL\r\n\r\n    #ifdef LIGHTMAP\r\n\r\n\t#ifdef UV1\r\n\t    #define USELIGHTMAP\r\n\t#endif // UV1\r\n\r\nuniform sampler2D u_LightMap;\r\n\r\n\t#ifdef LIGHTMAP_DIRECTIONAL\r\n\r\nuniform sampler2D u_LightMapDirection;\r\n\r\nvec3 DecodeDirectionalLightmap(in vec2 lightmapUV, in vec3 bakeColor, in vec3 normalWS)\r\n{\r\n    vec4 dirLightmap = texture2D(u_LightMapDirection, lightmapUV);\r\n    vec3 lightdir = normalize(dirLightmap.xyz - vec3(0.5)); // 0-1  => -0.5-0.5\r\n    //根据法线计算半兰伯特\r\n    float halfLambert = clamp(dot(normalWS, lightdir), 0.0, 1.0) * 0.5 + 0.5;\r\n    return bakeColor * halfLambert / max(dirLightmap.w, 0.001);\r\n}\r\n\r\n\t#endif // LIGHTMAP_DIRECTIONAL\r\n\r\nvec3 getBakedLightmapColor(in vec2 lightmapUV, in vec3 normalWS)\r\n{\r\n    vec4 lightmapSampler = texture2D(u_LightMap, lightmapUV);\r\n\t// todo lightmap rgbm encode color space\r\n    lightmapSampler.rgb =  decodeRGBM(lightmapSampler,5.0);\r\n\r\n\t//#ifdef Gamma_u_LightMap\r\n    lightmapSampler = gammaToLinear(lightmapSampler);\r\n\t//#endif // Gamma_u_LightMap\r\n\r\n\t#ifdef LIGHTMAP_DIRECTIONAL\r\n    lightmapSampler.rgb = DecodeDirectionalLightmap(lightmapUV, lightmapSampler.rgb, normalWS);\r\n\t#endif // LIGHTMAP_DIRECTIONAL\r\n\r\n    return lightmapSampler.rgb;\r\n}\r\n\r\n    #endif // LIGHTMAP\r\n\r\n    #ifdef SPECCUBE_BOX_PROJECTION\r\n\r\nuniform vec3 u_SpecCubeProbePosition;\r\nuniform vec3 u_SpecCubeBoxMax;\r\nuniform vec3 u_SpecCubeBoxMin;\r\n\r\nvec3 getBoxProjectionReflectedVector(vec3 r, vec3 positionWS)\r\n{\r\n    vec3 boxCenter = u_SpecCubeProbePosition;\r\n    vec3 boxMin = u_SpecCubeBoxMin;\r\n    vec3 boxMax = u_SpecCubeBoxMax;\r\n\r\n    vec3 nr = normalize(r);\r\n    vec3 rbmax = boxMax - positionWS;\r\n    vec3 rbmin = boxMin - positionWS;\r\n    vec3 select = step(vec3(0.0), r);\r\n    vec3 rbminmax = mix(rbmin, rbmax, select) / nr;\r\n    float scalar = vecmin(rbminmax);\r\n    vec3 boxr = nr * scalar + positionWS - boxCenter;\r\n    return boxr;\r\n}\r\n\r\n    #endif // SPECCUBE_BOX_PROJECTION\r\n\r\n#endif // globalIllumination_lib","#if !defined(Oct_lib)\r\n    #define Oct_lib\r\n\r\nfloat signNotZero(in float k) { return k >= 0.0 ? 1.0 : -1.0; }\r\n\r\nvec2 signNotZero(in vec2 v) { return vec2(signNotZero(v.x), signNotZero(v.y)); }\r\n\r\n/**\r\n * v: normalized sample dir\r\n * @return: oct encode uv [-1, 1]\r\n */\r\nvec2 octEncode(in vec3 v)\r\n{\r\n    float l1norm = abs(v.x) + abs(v.y) + abs(v.z);\r\n    vec2 result = v.xy * (1.0 / l1norm);\r\n    if (v.z < 0.0)\r\n\t{\r\n\t    result = (1.0 - abs(result.yx)) * signNotZero(result.xy);\r\n\t}\r\n\r\n    return result;\r\n}\r\n\r\n/**\r\n * x: u [-1, 1]\r\n * y: v [-1, 1]\r\n * @return: normalized sample dir\r\n */\r\nvec3 finalDecode(float x, float y)\r\n{\r\n    vec3 v = vec3(x, y, 1.0 - abs(x) - abs(y));\r\n    if (v.z < 0.0)\r\n\t{\r\n\t    v.xy = (1.0 - abs(v.yx)) * signNotZero(v.xy);\r\n\t}\r\n    return normalize(v);\r\n}\r\n\r\n/**\r\n * dir: cubemap sample dir\r\n * outsize: probe size with border (x: probe x, y: probe y, z: 1 / probe x, w: 1\r\n * / probe y) gridsize: probe grid size (x: probe x index, y: probe y index, z:\r\n * grid x size, w: grid y size)\r\n * @return texture coord [0, 1]\r\n */\r\nvec2 textureCoordFromDirection(in vec3 dir, vec4 outSize, vec4 gridSize)\r\n{\r\n    vec2 uv = (octEncode(normalize(dir))) * 0.5 + 0.5;\r\n    uv = uv * (outSize.xy - vec2(2.0, 2.0)) * outSize.zw + outSize.zw;\r\n    uv = gridSize.xy * (1.0 / gridSize.zw) + uv * (1.0 / gridSize.zw);\r\n    return uv;\r\n}\r\n\r\n#endif // Oct_lib","#if !defined(GridHelpers_lib)\r\n    #define GridHelpers_lib\r\n\r\nint gridCoordToProbeIndex(in ivec3 probeCoords, const in ivec3 probeCounts)\r\n{\r\n    return probeCoords.x + probeCoords.y * probeCounts.x + probeCoords.z * probeCounts.x * probeCounts.y;\r\n}\r\n\r\nivec3 probeIndexToGridcoord(in int probeIndex, const in ivec3 probeCounts)\r\n{\r\n    ivec3 iPos;\r\n    iPos.x = probeIndex % probeCounts.x;\r\n    iPos.y = (probeIndex % (probeCounts.x * probeCounts.y)) / probeCounts.x;\r\n    iPos.z = probeIndex / (probeCounts.x * probeCounts.y);\r\n    return iPos;\r\n\r\n    //   ivec3 iPos;\r\n    //   iPos.x = probeIndex & (probeCounts.x - 1);\r\n    //   iPos.y = (probeIndex & ((probeCounts.x * probeCounts.y) - 1)) >>\r\n    //            findMSB(probeCounts.x);\r\n    //   iPos.z = probeIndex >> findMSB(probeCounts.x * probeCounts.y);\r\n    //   return iPos;\r\n}\r\n\r\nvec3 gridCoordToPosition(in ivec3 coord, const in vec3 probeStep,\r\n    const in vec3 probeStartPosition)\r\n{\r\n    return (vec3(coord) + 0.5) * probeStep + probeStartPosition;\r\n}\r\n\r\nivec3 baseGridCoord(in vec3 position, in vec3 probeStep,\r\n    in vec3 probeStartPosition, in ivec3 probeCounts)\r\n{\r\n    probeStartPosition += 0.5 * probeStep;\r\n    return clamp(ivec3((position - probeStartPosition) / probeStep),\r\n\tivec3(0, 0, 0), probeCounts - ivec3(1, 1, 1));\r\n}\r\n\r\n#endif // GridHelpers_lib","// https://jcgt.org/published/0008/02/01/\r\n\r\n#if !defined(VolumetricGI_lib)\r\n    #define VolumetricGI_lib\r\n\r\n    #include \"Oct.glsl\";\r\n    #include \"GridHelpers.glsl\";\r\n\r\nstruct VolumetricGI {\r\n    vec3 probeCounts;\r\n    vec3 probeStep;\r\n    vec3 probeStartPosition;\r\n    // float irradianceTexels;\r\n    // float distanceTexels;\r\n    // float normalBias;\r\n    // float viewBias;\r\n    vec4 probeParams; // x: irradianceTexels, y: distanceTexels, z: normalBias, w: viewBias\r\n};\r\n\r\nuniform VolumetricGI u_VolumetricGI;\r\n\r\nuniform sampler2D u_ProbeIrradiance;\r\nuniform sampler2D u_ProbeDistance;\r\n\r\nvec2 porbeGridCoordToTextureGridCoord(in ivec3 porbeGridCoord,\r\n    in ivec3 probeCounts,\r\n    in vec2 textureGridSize)\r\n{\r\n    int probeIndex = gridCoordToProbeIndex(porbeGridCoord, probeCounts);\r\n    ivec2 index;\r\n    index.x = probeIndex % (probeCounts.x * probeCounts.y);\r\n    index.y = probeIndex / (probeCounts.x * probeCounts.y);\r\n\r\n    vec2 textureGridCoord = vec2(index);\r\n    textureGridCoord.y = textureGridCoord.y;\r\n    return textureGridCoord;\r\n}\r\n\r\nvec3 VolumetricGISurfaceBias(in vec3 surfaceNormal, in vec3 cameraDirection)\r\n{\r\n    return surfaceNormal * u_VolumetricGI.probeParams.z + cameraDirection * u_VolumetricGI.probeParams.w;\r\n}\r\n\r\nvec3 VolumetricGIVolumeIrradiance(in vec3 worldPosition, in vec3 surfaceBias,\r\n    in vec3 direction)\r\n{\r\n    // direction *= vec3(-1.0, 1.0, 1.0);\r\n    ivec3 porbeCounts = ivec3(u_VolumetricGI.probeCounts);\r\n    vec3 probeStep = u_VolumetricGI.probeStep;\r\n    vec3 probeStartPosition = u_VolumetricGI.probeStartPosition;\r\n    vec2 volumeCounts = vec2(porbeCounts.x * porbeCounts.y, porbeCounts.z);\r\n    vec4 irradianceTexels = vec4(u_VolumetricGI.probeParams.x, u_VolumetricGI.probeParams.x, 1.0 / u_VolumetricGI.probeParams.x, 1.0 / u_VolumetricGI.probeParams.x);\r\n    vec4 distanceTexels = vec4(u_VolumetricGI.probeParams.y, u_VolumetricGI.probeParams.y, 1.0 / u_VolumetricGI.probeParams.y, 1.0 / u_VolumetricGI.probeParams.y);\r\n\r\n    ivec3 maxGridCoord = porbeCounts - ivec3(1);\r\n\r\n    vec3 irradiance = vec3(0.0);\r\n    float accumulatedWeights = 0.0;\r\n\r\n    // Bias the world space position\r\n    vec3 biasedWorldPosition = worldPosition + surfaceBias;\r\n\r\n    // Get the 3D grid coordinates of the probe nearest the biased world position\r\n    // (i.e. the \"base\" probe)\r\n    ivec3 baseProbeCoords = baseGridCoord(biasedWorldPosition, probeStep,\r\n\tprobeStartPosition, porbeCounts);\r\n\r\n    // Get the world-space position of the base probe (ignore relocation)\r\n    vec3 baseProbeWorldPosition = gridCoordToPosition(baseProbeCoords, probeStep, probeStartPosition);\r\n\r\n    // Clamp the distance (in grid space) between the given point and the base\r\n    // probe's world position (on each axis) to [0, 1]\r\n    vec3 gridSpaceDistance = biasedWorldPosition - baseProbeWorldPosition;\r\n\r\n    vec3 alpha = clamp(gridSpaceDistance / probeStep, vec3(0.0), vec3(1.0));\r\n\r\n    // Iterate over the 8 closest probes and accumulate their contributions\r\n    for (int probeIndex = 0; probeIndex < 8; probeIndex++)\r\n\t{\r\n\t    // Compute the offset to the adjacent probe in grid coordinates by sourcing\r\n\t    // the offsets from the bits of the loop index: x = bit 0, y = bit 1, z =\r\n\t    // bit 2\r\n\t    ivec3 adjacentProbeOffset = ivec3(probeIndex, probeIndex >> 1, probeIndex >> 2) & ivec3(1, 1, 1);\r\n\r\n\t    // Get the 3D grid coordinates of the adjacent probe by adding the offset to\r\n\t    // the base probe and clamping to the grid boundaries\r\n\t    ivec3 adjacentProbeCoords = clamp(baseProbeCoords + adjacentProbeOffset, ivec3(0), maxGridCoord);\r\n\r\n\t    // Get the adjacent probe's world position\r\n\t    vec3 adjacentProbeWorldPosition = gridCoordToPosition(adjacentProbeCoords, probeStep, probeStartPosition);\r\n\r\n\t    // Compute the distance and direction from the (biased and non-biased)\r\n\t    // shading point and the adjacent probe\r\n\t    vec3 worldPosToAdjProbe = normalize(adjacentProbeWorldPosition - worldPosition);\r\n\t    vec3 biasedPosToAdjProbe = normalize(adjacentProbeWorldPosition - biasedWorldPosition);\r\n\t    float biasedPosToAdjProbeDist = distance(adjacentProbeWorldPosition, biasedWorldPosition);\r\n\r\n\t    // Compute trilinear weights based on the distance to each adjacent probe to\r\n\t    // smoothly transition between probes. adjacentProbeOffset is binary, so\r\n\t    // we're using a 1-alpha when adjacentProbeOffset = 0 and alpha when\r\n\t    // adjacentProbeOffset = 1.\r\n\t    vec3 trilinear = max(vec3(0.001), mix(1.0 - alpha, alpha, vec3(adjacentProbeOffset)));\r\n\t    float trilinearWeight = trilinear.x * trilinear.y * trilinear.z;\r\n\t    float weight = 1.0;\r\n\r\n\t    // A naive soft backface weight would ignore a probe when\r\n\t    // it is behind the surface. That's good for walls, but for\r\n\t    // small details inside of a room, the normals on the details\r\n\t    // might rule out all of the probes that have mutual visibility\r\n\t    // to the point. We instead use a \"wrap shading\" test. The small\r\n\t    // offset at the end reduces the \"going to zero\" impact.\r\n\t    float warpShading = (dot(worldPosToAdjProbe, direction) + 1.0) * 0.5;\r\n\t    weight *= (warpShading * warpShading) * 0.2;\r\n\r\n\t    vec2 textureGridCoord = porbeGridCoordToTextureGridCoord(\r\n\t\tadjacentProbeCoords, porbeCounts, volumeCounts);\r\n\t    // compute the octahedral coordinates of the adjacent probe\r\n\t    vec2 probeTextureUV = textureCoordFromDirection(-biasedPosToAdjProbe, distanceTexels,\r\n\t\tvec4(textureGridCoord, volumeCounts));\r\n\t    // Sample the probe's distance texture to get the mean distance to nearby\r\n\t    // surfaces\r\n\t    vec3 filteredDistance = texture2D(u_ProbeDistance, probeTextureUV).xyz;\r\n\t    // Find the variance of the mean distance\r\n\t    float variance = abs(filteredDistance.x * filteredDistance.x - filteredDistance.y);\r\n\r\n\t    // Occlusion test\r\n\t    float chebyshevWeight = 1.0;\r\n\t    if (biasedPosToAdjProbeDist > filteredDistance.x)\r\n\t\t{\r\n\t\t    float v = biasedPosToAdjProbeDist - filteredDistance.x;\r\n\t\t    // v must be greater than 0, which is guaranteed by the if condition\r\n\t\t    // above.\r\n\t\t    chebyshevWeight = variance / (variance + (v * v));\r\n\r\n\t\t    // Increase the contrast in the weight\r\n\t\t    chebyshevWeight = max(chebyshevWeight * chebyshevWeight * chebyshevWeight, 0.0);\r\n\t\t}\r\n\r\n\t    if (filteredDistance.z < 1.0)\r\n\t\t{\r\n\t\t    chebyshevWeight = 1.0;\r\n\t\t}\r\n\r\n\t    // Avoid visibility weights ever going all the way to zero because\r\n\t    // when *no* probe has visibility we need a fallback value\r\n\t    weight *= max(0.05, chebyshevWeight);\r\n\r\n\t    // Avoid a weight of zero\r\n\t    weight = max(0.000001, weight);\r\n\r\n\t    // A small amount of light is visible due to logarithmic perception, so\r\n\t    // crush tiny weights but keep the curve continuous\r\n\t    const float crushThreshold = 0.2;\r\n\t    if (weight < crushThreshold)\r\n\t\t{\r\n\t\t    weight *= (weight * weight) * (1.0 / (crushThreshold * crushThreshold));\r\n\t\t}\r\n\r\n\t    // Apply the trilinear weights\r\n\t    weight *= trilinearWeight;\r\n\r\n\t    probeTextureUV = textureCoordFromDirection(\r\n\t\tdirection, irradianceTexels, vec4(textureGridCoord, volumeCounts));\r\n\r\n\t    // Sample the probe's irradiance\r\n\t    vec3 probeIrradiance = linearToGamma(texture2D(u_ProbeIrradiance, probeTextureUV).rgb);\r\n\r\n\t    irradiance += (probeIrradiance * weight);\r\n\t    accumulatedWeights += weight;\r\n\t}\r\n\r\n    if (accumulatedWeights == 0.0)\r\n\t{\r\n\t    return vec3(0.0);\r\n\t}\r\n\r\n    irradiance *= (1.f / accumulatedWeights); // Normalize by the accumulated weights\r\n\r\n    irradiance = gammaToLinear(irradiance);\r\n\r\n    return irradiance;\r\n}\r\n\r\n#endif // VolumetricGI_lib","#if !defined(BlinnPhongLighting_lib)\r\n    #define BlinnPhongLighting_lib\r\n\r\n    #include \"Lighting.glsl\";\r\n    #include \"globalIllumination.glsl\";\r\n\r\nstruct PixelInfo {\r\n    vec3 positionWS;\r\n\r\n    vec3 vertexNormalWS;\r\n    vec3 normalWS;\r\n\r\n    vec3 viewDir;\r\n\r\n    #ifdef LIGHTMAP\r\n\t#ifdef UV1\r\n    vec2 lightmapUV;\r\n\t#endif // UV1\r\n    #endif // LIGHTMAP\r\n};\r\n\r\nstruct Surface {\r\n    vec3 diffuseColor;\r\n    vec3 specularColor;\r\n    float shininess;\r\n    vec3 gloss;\r\n\r\n    vec3 normalTS;\r\n\r\n    float alpha;\r\n    float alphaClip;\r\n};\r\n\r\nvec3 BlinnPhongLighting(in Surface surface, in Light light, in PixelInfo pixel)\r\n{\r\n    vec3 l = normalize(-light.dir);\r\n    vec3 v = pixel.viewDir;\r\n\r\n    vec3 normalWS = pixel.normalWS;\r\n\r\n    vec3 diffuseColor = surface.diffuseColor;\r\n    float shininess = surface.shininess;\r\n    vec3 specularColor = surface.specularColor;\r\n    vec3 gloss = surface.gloss;\r\n\r\n    // difffuse\r\n    float ndl = max(0.0, dot(normalWS, l));\r\n    vec3 lightDiffuse = light.color * diffuseColor * ndl;\r\n\r\n    // specular\r\n    mediump vec3 h = normalize(v + l);\r\n    lowp float ndh = max(0.0, dot(h, normalWS));\r\n    float specularIntensity = pow(ndh, shininess * 128.0);\r\n    vec3 lightSpecular = light.color * specularColor * specularIntensity * gloss;\r\n\r\n    return lightDiffuse + lightSpecular;\r\n}\r\n\r\nvec3 BlinnPhongGI(const in Surface surface, const in PixelInfo info)\r\n{\r\n    vec3 indirect = vec3(0.0);\r\n\r\n    #ifdef LIGHTMAP\r\n\t#ifdef UV1\r\n\r\n    vec2 lightmapUV = info.lightmapUV;\r\n    vec3 bakedColor = getBakedLightmapColor(lightmapUV, info.normalWS);\r\n\r\n    // todo  surface.diffuseColor ？\r\n    indirect = bakedColor * surface.diffuseColor;\r\n\r\n\t#endif // UV1\r\n\r\n    #else // LIGHTMAP\r\n\r\n    vec3 n = info.normalWS;\r\n    indirect = diffuseIrradiance(n) * surface.diffuseColor;\r\n\r\n    #endif // LIGHTMAP\r\n\r\n    return indirect;\r\n}\r\n\r\n#endif // BlinnPhongLighting_lib","#if !defined(PBRLighting_lib)\r\n    #define PBRLighting_lib\r\n\r\n    #include \"Lighting.glsl\";\r\n\r\n    // 精度\r\n    #if !defined(GL_FRAGMENT_PRECISION_HIGH)\r\n\t#define MIN_PERCEPTUAL_ROUGHNESS 0.089\r\n\t#define MIN_ROUGHNESS\t\t 0.007921\r\n    #else\r\n\t#define MIN_PERCEPTUAL_ROUGHNESS 0.045\r\n\t#define MIN_ROUGHNESS\t\t 0.002025\r\n    #endif\r\n\r\n    #define MIN_N_DOT_V 1e-4\r\n\r\n    #include \"BRDF.glsl\";\r\n\r\nstruct PixelInfo {\r\n    vec3 positionWS;\r\n\r\n    vec3 vertexNormalWS;\r\n    vec3 normalWS;\r\n    vec3 tangentWS;\r\n    vec3 biNormalWS;\r\n\r\n    vec3 viewDir;\r\n    float NoV;\r\n\r\n    vec3 dfg;\r\n    vec3 energyCompensation;\r\n\r\n    #ifdef CLEARCOAT\r\n    vec3 clearCoatNormal;\r\n    float clearCoatNoV;\r\n    #endif // CLEARCOAT\r\n\r\n    #ifdef ANISOTROPIC\r\n    vec3 anisotropicT;\r\n    vec3 anisotropicB;\r\n    float ToV;\r\n    float BoV;\r\n    float at;\r\n    float ab;\r\n    #endif // ANISOTROPIC\r\n\r\n    #ifdef LIGHTMAP\r\n\t#ifdef UV1\r\n    vec2 lightmapUV;\r\n\t#endif // UV1\r\n    #endif // LIGHTMAP\r\n};\r\n\r\nstruct Surface {\r\n    vec3 diffuseColor;\r\n    float alpha;\r\n    vec3 f0;\r\n    float roughness;\r\n    float perceptualRoughness;\r\n    float occlusion;\r\n\r\n    vec3 normalTS;\r\n\r\n    #ifdef CLEARCOAT\r\n    float clearCoat;\r\n    float clearCoatRoughness;\r\n    float clearCoatPerceptualRoughness;\r\n\t#ifdef CLEARCOAT_NORMAL\r\n    vec3 clearCoatNormalTS;\r\n\t#endif // CLEARCOAT_NORMAL\r\n    #endif // CLEARCOAT\r\n\r\n    #ifdef ANISOTROPIC\r\n    float anisotropy;\r\n    vec2 anisotropyDirection;\r\n    #endif // ANISOTROPIC\r\n};\r\n\r\nstruct LightParams {\r\n    vec3 l;\r\n    vec3 h;\r\n    float NoL;\r\n    float NoH;\r\n    float LoH;\r\n    float VoH;\r\n\r\n    #ifdef CLEARCOAT\r\n    float clearCoatNoH;\r\n    float clearCoatNoL;\r\n    #endif // CLEARCOAT\r\n\r\n    #ifdef ANISOTROPIC\r\n    float ToL;\r\n    float BoL;\r\n    #endif // ANISOTROPIC\r\n};\r\n\r\nvoid initLightParams(inout LightParams params, const in PixelInfo pixel, const in Light light)\r\n{\r\n    vec3 v = pixel.viewDir;\r\n    vec3 n = pixel.normalWS;\r\n\r\n    vec3 l = normalize(-light.dir);\r\n    params.l = l;\r\n\r\n    vec3 h = SafeNormalize(v + l);\r\n    params.h = h;\r\n    params.NoL = saturate(dot(n, l));\r\n    params.NoH = saturate(dot(n, h));\r\n    params.LoH = saturate(dot(l, h));\r\n    params.VoH = saturate(dot(v, h));\r\n\r\n    #ifdef CLEARCOAT\r\n    params.clearCoatNoL = saturate(dot(pixel.clearCoatNormal, l));\r\n    params.clearCoatNoH = saturate(dot(pixel.clearCoatNormal, h));\r\n    #endif // CLEARCOAT\r\n\r\n    #ifdef ANISOTROPIC\r\n    vec3 t = pixel.anisotropicT;\r\n    vec3 b = pixel.anisotropicB;\r\n    params.ToL = dot(t, l);\r\n    params.BoL = dot(b, l);\r\n    #endif // ANISOTROPIC\r\n}\r\n\r\nvec3 prefilteredDFG_LUT(float roughness, float NoV)\r\n{\r\n    vec2 samplePoint = clamp(vec2(NoV, roughness), vec2(0.0, 0.0), vec2(1.0, 1.0));\r\n    samplePoint.y = 1.0 - samplePoint.y;\r\n    #if defined(FLOATTEXTURE) && defined(FLOATTEXTURE_FIL_LINEAR)\r\n        return (texture2D(u_IBLDFG, samplePoint)).rgb;\r\n    #else\r\n        return decodeRGBD(texture2D(u_IBLDFG, samplePoint));\r\n    #endif\r\n}\r\n\r\nvec2 EnvBRDFApproxLazarov(float roughness, float NoV)\r\n{\r\n    vec4 c0 = vec4(-1, -0.0275, -0.572, 0.022);\r\n    vec4 c1 = vec4(1, 0.0425, 1.04, -0.04);\r\n    vec4 r = roughness * c0 + c1;\r\n    float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\r\n    vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\r\n    return AB;\r\n}\r\n\r\nvec3 diffuseLobe(in Surface surface, const in PixelInfo pixel, const in LightParams lightParams)\r\n{\r\n    return surface.diffuseColor * diffuse();\r\n    // return surface.diffuseColor * diffuse() * (1.0 - F_Schlick(surface.f0, vec3(1.0, 1.0, 1.0), lightParams.VoH));\r\n    // return surface.diffuseColor * Fd_Burley(surface.roughness, pixel.NoV, lightParams.NoL, lightParams.LoH);\r\n}\r\n\r\nvec3 specularLobe(const in Surface surface, const in PixelInfo pixel, const in LightParams lightParams)\r\n{\r\n    float roughness = surface.roughness;\r\n\r\n    float D = distribution(roughness, lightParams.NoH, lightParams.h, pixel.normalWS);\r\n    float V = visibility(roughness, pixel.NoV, lightParams.NoL);\r\n    vec3 F = fresnel(surface.f0, lightParams.LoH);\r\n\r\n    return (D * V) * F;\r\n}\r\n\r\n    #ifdef CLEARCOAT\r\nfloat clearCoatLobe(const in Surface surface, const in PixelInfo pixel, const in LightParams lightParams)\r\n{\r\n    float roughness = surface.clearCoatRoughness;\r\n    float clearCoat = surface.clearCoat;\r\n    vec3 n = pixel.clearCoatNormal;\r\n    vec3 h = lightParams.h;\r\n    float LoH = lightParams.LoH;\r\n\r\n    float clearCoatNoH = lightParams.clearCoatNoH;\r\n\r\n    float D = distribution(roughness, clearCoatNoH, h, n);\r\n    float V = V_kelemen(LoH);\r\n\r\n    return D * V;\r\n}\r\n    #endif // CLEARCOAT\r\n\r\n    #ifdef ANISOTROPIC\r\nvec3 anisotropyLobe(const in Surface surface, const in PixelInfo pixel, const in LightParams lightParams)\r\n{\r\n    float anisotropy = surface.anisotropy;\r\n    float at = pixel.at;\r\n    float ab = pixel.ab;\r\n    vec3 anisotropicT = pixel.anisotropicT;\r\n    vec3 anisotropicB = pixel.anisotropicB;\r\n\r\n    float NoV = pixel.NoV;\r\n    float ToV = pixel.ToV;\r\n    float BoV = pixel.BoV;\r\n\r\n    vec3 h = lightParams.h;\r\n    float NoL = lightParams.NoL;\r\n    float NoH = lightParams.NoH;\r\n    float VoH = lightParams.VoH;\r\n    float ToL = lightParams.ToL;\r\n    float BoL = lightParams.BoL;\r\n\r\n    float V = V_SmithGGXCorrelated_Anisotropic(at, ab, ToV, BoV, ToL, BoL, NoV, NoL);\r\n    float D = D_GGX_Anisotropic(NoH, h, anisotropicT, anisotropicB, at, ab);\r\n    vec3 F = fresnel(surface.f0, lightParams.LoH);\r\n    return V * D * F;\r\n}\r\n    #endif // ANISOTROPIC\r\n\r\nvec3 PBRLighting(const in Surface surface, const in PixelInfo pixel, const in Light light)\r\n{\r\n    LightParams lightParams;\r\n    initLightParams(lightParams, pixel, light);\r\n\r\n    vec3 Fd = diffuseLobe(surface, pixel, lightParams);\r\n\r\n    #ifdef ANISOTROPIC\r\n    vec3 Fr = anisotropyLobe(surface, pixel, lightParams);\r\n    #else // ANISOTROPIC\r\n    vec3 Fr = specularLobe(surface, pixel, lightParams);\r\n    #endif // ANISOTROPIC\r\n\r\n    vec3 shading = (Fd + Fr * pixel.energyCompensation) * lightParams.NoL;\r\n\r\n    #ifdef CLEARCOAT\r\n    float clearCoatNoL = lightParams.clearCoatNoL;\r\n    float LoH = lightParams.LoH;\r\n    // todo\r\n    // default IOR 1.5\r\n    float FccClearCoat = F_Schlick(0.04, 1.0, LoH) * surface.clearCoat;\r\n    float attenuation = 1.0 - FccClearCoat;\r\n    shading *= attenuation;\r\n\r\n    float clearcoat = clearCoatLobe(surface, pixel, lightParams) * FccClearCoat;\r\n    shading += clearcoat * clearCoatNoL;\r\n    #endif // CLEARCOAT\r\n\r\n    return shading * light.color;\r\n}\r\n\r\n    // gi\r\n    #include \"PBRGI.glsl\";\r\n\r\n#endif // PBRLighting_lib","import { IndexBuffer } from \"../../RenderEngine/IndexBuffer\";\r\nimport { BufferTargetType, BufferUsage } from \"../../RenderEngine/RenderEnum/BufferTargetType\";\r\nimport { IndexFormat } from \"../../RenderEngine/RenderEnum/IndexFormat\";\r\n/**\r\n * 请使用LayaGL.RenderOBJCreate.createIndexBuffer3D来创建\r\n * <code>IndexBuffer3D</code> 类用于创建索引缓冲。\r\n */\r\nexport class IndexBuffer3D extends IndexBuffer {\r\n\t/** @internal */\r\n\tprivate _canRead: boolean;\r\n\r\n\t/**\r\n\t * 索引类型。\r\n\t */\r\n\tget indexType(): IndexFormat {\r\n\t\treturn this._indexType;\r\n\t}\r\n\r\n\t/**\r\n\t * 索引类型字节数量。\r\n\t */\r\n\tget indexTypeByteCount(): number {\r\n\t\treturn this._indexTypeByteCount;\r\n\t}\r\n\r\n\t/**\r\n\t * 索引个数。\r\n\t */\r\n\tget indexCount(): number {\r\n\t\treturn this._indexCount;\r\n\t}\r\n\r\n\t/**\r\n\t * 是否可读。\r\n\t */\r\n\tget canRead(): boolean {\r\n\t\treturn this._canRead;\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>IndexBuffer3D,不建议开发者使用并用IndexBuffer3D.create()代替</code> 实例。\r\n\t * @param\tindexType 索引类型。\r\n\t * @param\tindexCount 索引个数。\r\n\t * @param\tbufferUsage IndexBuffer3D用途类型。\r\n\t * @param\tcanRead 是否可读。\r\n\t */\r\n\tconstructor(indexType: IndexFormat, indexCount: number, bufferUsage: BufferUsage = BufferUsage.Static, canRead: boolean = false) {\r\n\t\tsuper(BufferTargetType.ELEMENT_ARRAY_BUFFER, bufferUsage);\r\n\t\tthis._indexType = indexType;\r\n\t\tthis._indexCount = indexCount;\r\n\r\n\t\tthis._canRead = canRead;\r\n\r\n\t\tswitch (indexType) {\r\n\t\t\tcase IndexFormat.UInt32:\r\n\t\t\t\tthis._indexTypeByteCount = 4;\r\n\t\t\t\tbreak;\r\n\t\t\tcase IndexFormat.UInt16:\r\n\t\t\t\tthis._indexTypeByteCount = 2;\r\n\t\t\t\tbreak;\r\n\t\t\tcase IndexFormat.UInt8:\r\n\t\t\t\tthis._indexTypeByteCount = 1;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(\"unidentification index type.\");\r\n\t\t}\r\n\t\tvar byteLength: number = this._indexTypeByteCount * indexCount;\r\n\t\tthis._byteLength = byteLength;\r\n\t\tthis._setIndexData(byteLength);\r\n\t\tif (canRead) {\r\n\t\t\tswitch (indexType) {\r\n\t\t\t\tcase IndexFormat.UInt32:\r\n\t\t\t\t\tthis._buffer = new Uint32Array(indexCount);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase IndexFormat.UInt16:\r\n\t\t\t\t\tthis._buffer = new Uint16Array(indexCount);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase IndexFormat.UInt8:\r\n\t\t\t\t\tthis._buffer = new Uint8Array(indexCount);\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 设置数据。\r\n\t * @param\tdata 索引数据。\r\n\t * @param\tbufferOffset 索引缓冲中的偏移。\r\n\t * @param\tdataStartIndex 索引数据的偏移。\r\n\t * @param\tdataCount 索引数据的数量。\r\n\t */\r\n\tsetData(data: any, bufferOffset: number = 0, dataStartIndex: number = 0, dataCount: number = 4294967295/*uint.MAX_VALUE*/): void {\r\n\t\tvar byteCount: number = this._indexTypeByteCount;\r\n\t\tif (dataStartIndex !== 0 || dataCount !== 4294967295/*uint.MAX_VALUE*/) {\r\n\t\t\tswitch (this._indexType) {\r\n\t\t\t\tcase IndexFormat.UInt32:\r\n\t\t\t\t\tdata = new Uint32Array(data.buffer, dataStartIndex * byteCount, dataCount);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase IndexFormat.UInt16:\r\n\t\t\t\t\tdata = new Uint16Array(data.buffer, dataStartIndex * byteCount, dataCount);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase IndexFormat.UInt8:\r\n\t\t\t\t\tdata = new Uint8Array(data.buffer, dataStartIndex * byteCount, dataCount);\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._setIndexData(data, bufferOffset * byteCount);\r\n\r\n\t\tif (this._canRead) {\r\n\t\t\tif (bufferOffset !== 0 || dataStartIndex !== 0 || dataCount !== 4294967295/*uint.MAX_VALUE*/) {\r\n\t\t\t\tvar maxLength: number = this._buffer.length - bufferOffset;\r\n\t\t\t\tif (dataCount > maxLength)\r\n\t\t\t\t\tdataCount = maxLength;\r\n\t\t\t\tif (typeof data == typeof this._buffer && data.length == dataCount)\r\n\t\t\t\t\tthis._buffer.set(data, bufferOffset);\r\n\t\t\t\telse\r\n\t\t\t\t\tfor (var i: number = 0; i < dataCount; i++)\r\n\t\t\t\t\t\tthis._buffer[bufferOffset + i] = data[i];\r\n\t\t\t} else {\r\n\t\t\t\tthis._buffer = data;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 获取索引数据。\r\n\t * @return\t索引数据。\r\n\t */\r\n\tgetData(): Uint16Array {\r\n\t\tif (this._canRead)\r\n\t\t\treturn <Uint16Array>this._buffer;\r\n\t\telse\r\n\t\t\tthrow new Error(\"Can't read data from VertexBuffer with only write flag!\");\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tdestroy(): void {\r\n\t\tsuper.destroy();\r\n\t\tthis._buffer = null;\r\n\t\tthis._byteLength = 0;\r\n\t\tthis._indexCount = 0;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { BufferTargetType, BufferUsage } from \"../../RenderEngine/RenderEnum/BufferTargetType\";\r\nimport { VertexBuffer } from \"../../RenderEngine/VertexBuffer\";\r\nimport { VertexDeclaration } from \"../../RenderEngine/VertexDeclaration\";\r\n\r\n\r\n/**\r\n * 请使用LayaGL.RenderOBJCreate.createIndexBuffer3D来创建\r\n * <code>VertexBuffer3D</code> 类用于创建顶点缓冲。\r\n */\r\nexport class VertexBuffer3D extends VertexBuffer {\r\n\r\n\t/** @internal */\r\n\tprotected _canRead: boolean;\r\n\r\n\r\n\t/** @internal */\r\n\t_float32Reader: Float32Array | null = null;\r\n\r\n\t/**\r\n\t * 获取顶点声明。\r\n\t */\r\n\tget vertexDeclaration(): VertexDeclaration | null {\r\n\t\treturn this._vertexDeclaration;\r\n\t}\r\n\r\n\tset vertexDeclaration(value: VertexDeclaration | null) {\r\n\t\tthis._vertexDeclaration = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 是否可读。\r\n\t */\r\n\tget canRead(): boolean {\r\n\t\treturn this._canRead;\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>VertexBuffer3D</code> 实例。\r\n\t * @param\tbyteLength 字节长度。\r\n\t * @param\tbufferUsage VertexBuffer3D用途类型。\r\n\t * @param\tcanRead 是否可读。\r\n\t */\r\n\tconstructor(byteLength: number, bufferUsage: BufferUsage, canRead: boolean = false) {\r\n\t\tsuper(BufferTargetType.ARRAY_BUFFER, bufferUsage);\r\n\t\tthis._canRead = canRead;\r\n\t\tthis._byteLength = byteLength;\r\n\t\tthis.bind();\r\n\t\tthis._glBuffer.setDataLength(byteLength)\r\n\t\tif (this._canRead) {\r\n\t\t\tthis._buffer = new Uint8Array(byteLength);\r\n\t\t\tthis._float32Reader = new Float32Array(this._buffer.buffer);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 剥离内存块存储。\r\n\t */\r\n\torphanStorage(): void {\r\n\t\tthis.bind();\r\n\t\tthis._glBuffer.setDataLength(this._byteLength);\r\n\t}\r\n\r\n\t/**\r\n\t * 设置数据。\r\n\t * @param\tdata 顶点数据。\r\n\t * @param\tbufferOffset 顶点缓冲中的偏移,以字节为单位。\r\n\t * @param\tdataStartIndex 顶点数据的偏移,以字节为单位。\r\n\t * @param\tdataCount 顶点数据的长度,以字节为单位。\r\n\t */\r\n\tsetData(buffer: ArrayBuffer, bufferOffset: number = 0, dataStartIndex: number = 0, dataCount: number = Number.MAX_SAFE_INTEGER): void {\r\n\t\tthis.bind();\r\n\t\tvar needSubData: boolean = dataStartIndex !== 0 || dataCount !== Number.MAX_SAFE_INTEGER;\r\n\t\tif (needSubData) {\r\n\t\t\tvar subData: Uint8Array = new Uint8Array(buffer, dataStartIndex, dataCount);\r\n\t\t\tthis._glBuffer.setData(subData, bufferOffset);\r\n\t\t\tif (this._canRead)\r\n\t\t\t\tthis._buffer.set(subData, bufferOffset);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis._glBuffer.setData(buffer, bufferOffset);\r\n\t\t\tif (this._canRead)\r\n\t\t\t\tthis._buffer.set(new Uint8Array(buffer), bufferOffset);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 获取顶点数据。\r\n\t * @return\t顶点数据。\r\n\t */\r\n\tgetUint8Data(): Uint8Array {\r\n\t\tif (this._canRead)\r\n\t\t\treturn <Uint8Array>this._buffer;\r\n\t\telse\r\n\t\t\tthrow new Error(\"Can't read data from VertexBuffer with only write flag!\");\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tgetFloat32Data(): Float32Array | null {\r\n\t\tif (this._canRead)\r\n\t\t\treturn this._float32Reader;\r\n\t\telse\r\n\t\t\tthrow new Error(\"Can't read data from VertexBuffer with only write flag!\");\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tmarkAsUnreadbale(): void {\r\n\t\tthis._canRead = false;\r\n\t\tthis._buffer = null;\r\n\t\tthis._float32Reader = null;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tdestroy(): void {\r\n\t\tsuper.destroy();\r\n\t\tthis._buffer = null;\r\n\t\tthis._float32Reader = null;\r\n\t\tthis._vertexDeclaration = null;\r\n\t\tthis._byteLength = 0;\r\n\t}\r\n}\r\n\r\n\r\n\r\n\r\n","import { Matrix4x4 } from \"../../maths/Matrix4x4\";\r\nimport { Vector3 } from \"../../maths/Vector3\";\r\nimport { IClone } from \"../../utils/IClone\";\r\nimport { BoundBox } from \"./BoundBox\";\r\n\r\n/**\r\n * <code>BoundsImp</code> 类用于创建包围体。\r\n */\r\nexport class BoundsImpl implements IClone {\r\n    /**@internal */\r\n    static _UPDATE_MIN: number = 0x01;\r\n    /**@internal */\r\n    static _UPDATE_MAX: number = 0x02;\r\n    /**@internal */\r\n    static _UPDATE_CENTER: number = 0x04;\r\n    /**@internal */\r\n    static _UPDATE_EXTENT: number = 0x08;\r\n\r\n    protected _updateFlag: number = 0;\r\n\r\n    /**@internal\t*/\r\n    _center: Vector3 = new Vector3();\r\n    /**@internal\t*/\r\n    _extent: Vector3 = new Vector3();\r\n    /***/\r\n    _boundBox: BoundBox = new BoundBox(new Vector3(), new Vector3());\r\n\r\n    get min() {\r\n        return this.getMin();\r\n    }\r\n\r\n    set min(value: Vector3) {\r\n        this.setMin(value);\r\n    }\r\n\r\n    get max() {\r\n        return this.getMax();\r\n    }\r\n\r\n    set max(value: Vector3) {\r\n        this.setMax(value);\r\n    }\r\n\r\n    /**\r\n     * 设置包围盒的最小点。\r\n     * @param value\t包围盒的最小点。\r\n     */\r\n    setMin(value: Vector3): void {\r\n        var min: Vector3 = this._boundBox.min;\r\n        if (value !== min)\r\n            value.cloneTo(min);\r\n        this._setUpdateFlag(BoundsImpl._UPDATE_CENTER | BoundsImpl._UPDATE_EXTENT, true);\r\n        this._setUpdateFlag(BoundsImpl._UPDATE_MIN, false);\r\n    }\r\n\r\n    /**\r\n     * 获取包围盒的最小点。\r\n     * @return\t包围盒的最小点。\r\n     */\r\n    getMin(): Vector3 {\r\n        var min: Vector3 = this._boundBox.min;\r\n        if (this._getUpdateFlag(BoundsImpl._UPDATE_MIN)) {\r\n            this._getMin(this.getCenter(), this.getExtent(), min);\r\n            this._setUpdateFlag(BoundsImpl._UPDATE_MIN, false);\r\n        }\r\n        return min;\r\n    }\r\n\r\n    /**\r\n     * 设置包围盒的最大点。\r\n     * @param value\t包围盒的最大点。\r\n     */\r\n    setMax(value: Vector3): void {\r\n        var max: Vector3 = this._boundBox.max;\r\n        if (value !== max)\r\n            value.cloneTo(max);\r\n        this._setUpdateFlag(BoundsImpl._UPDATE_CENTER | BoundsImpl._UPDATE_EXTENT, true);\r\n        this._setUpdateFlag(BoundsImpl._UPDATE_MAX, false);\r\n    }\r\n\r\n    /**\r\n     * 获取包围盒的最大点。\r\n     * @return\t包围盒的最大点。\r\n     */\r\n    getMax(): Vector3 {\r\n        var max: Vector3 = this._boundBox.max;\r\n        if (this._getUpdateFlag(BoundsImpl._UPDATE_MAX)) {\r\n            this._getMax(this.getCenter(), this.getExtent(), max);\r\n            this._setUpdateFlag(BoundsImpl._UPDATE_MAX, false);\r\n        }\r\n        return max;\r\n    }\r\n\r\n    /**\r\n     * 设置包围盒的中心点。\r\n     * @param value\t包围盒的中心点。\r\n     */\r\n    setCenter(value: Vector3): void {\r\n        if (value !== this._center)\r\n            value.cloneTo(this._center);\r\n        this._setUpdateFlag(BoundsImpl._UPDATE_MIN | BoundsImpl._UPDATE_MAX, true);\r\n        this._setUpdateFlag(BoundsImpl._UPDATE_CENTER, false);\r\n    }\r\n\r\n    /**\r\n     * 获取包围盒的中心点。\r\n     * @return\t包围盒的中心点。\r\n     */\r\n    getCenter(): Vector3 {\r\n        if (this._getUpdateFlag(BoundsImpl._UPDATE_CENTER)) {\r\n            this._getCenter(this.getMin(), this.getMax(), this._center);\r\n            this._setUpdateFlag(BoundsImpl._UPDATE_CENTER, false);\r\n        }\r\n        return this._center;\r\n    }\r\n\r\n    /**\r\n     * 设置包围盒的范围。\r\n     * @param value\t包围盒的范围。\r\n     */\r\n    setExtent(value: Vector3): void {\r\n        if (value !== this._extent)\r\n            value.cloneTo(this._extent);\r\n        this._setUpdateFlag(BoundsImpl._UPDATE_MIN | BoundsImpl._UPDATE_MAX, true);\r\n        this._setUpdateFlag(BoundsImpl._UPDATE_EXTENT, false);\r\n    }\r\n\r\n    /**\r\n     * 获取包围盒的范围。\r\n     * @return\t包围盒的范围。\r\n     */\r\n    getExtent(): Vector3 {\r\n        if (this._getUpdateFlag(BoundsImpl._UPDATE_EXTENT)) {\r\n            this._getExtent(this.getMin(), this.getMax(), this._extent);\r\n            this._setUpdateFlag(BoundsImpl._UPDATE_EXTENT, false);\r\n        }\r\n        return this._extent;\r\n    }\r\n\r\n    /**\r\n     * 创建一个 <code>BoundsImp</code> 实例。\r\n     * @param\tmin  min 最小坐标\r\n     * @param\tmax  max 最大坐标。\r\n     */\r\n    constructor(min?: Vector3, max?: Vector3) {\r\n        min && min.cloneTo(this._boundBox.min);\r\n        max && max.cloneTo(this._boundBox.max);\r\n        this._setUpdateFlag(BoundsImpl._UPDATE_CENTER | BoundsImpl._UPDATE_EXTENT, true);\r\n    }\r\n\r\n    protected _getUpdateFlag(type: number): boolean {\r\n        return (this._updateFlag & type) != 0;\r\n    }\r\n\r\n\r\n    protected _setUpdateFlag(type: number, value: boolean): void {\r\n        if (value)\r\n            this._updateFlag |= type;\r\n        else\r\n            this._updateFlag &= ~type;\r\n    }\r\n\r\n\r\n    protected _getCenter(min: Vector3, max: Vector3, out: Vector3): void {\r\n        Vector3.add(min, max, out);\r\n        Vector3.scale(out, 0.5, out);\r\n    }\r\n\r\n\r\n    protected _getExtent(min: Vector3, max: Vector3, out: Vector3): void {\r\n        Vector3.subtract(max, min, out);\r\n        Vector3.scale(out, 0.5, out);\r\n    }\r\n\r\n\r\n    protected _getMin(center: Vector3, extent: Vector3, out: Vector3): void {\r\n        Vector3.subtract(center, extent, out);\r\n    }\r\n\r\n\r\n    protected _getMax(center: Vector3, extent: Vector3, out: Vector3): void {\r\n        Vector3.add(center, extent, out);\r\n    }\r\n\r\n    protected _rotateExtents(extents: Vector3, rotation: Matrix4x4, out: Vector3): void {\r\n        var extentsX: number = extents.x;\r\n        var extentsY: number = extents.y;\r\n        var extentsZ: number = extents.z;\r\n        var matE: Float32Array = rotation.elements;\r\n        out.x = Math.abs(matE[0] * extentsX) + Math.abs(matE[4] * extentsY) + Math.abs(matE[8] * extentsZ);\r\n        out.y = Math.abs(matE[1] * extentsX) + Math.abs(matE[5] * extentsY) + Math.abs(matE[9] * extentsZ);\r\n        out.z = Math.abs(matE[2] * extentsX) + Math.abs(matE[6] * extentsY) + Math.abs(matE[10] * extentsZ);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _tranform(matrix: Matrix4x4, out: BoundsImpl): void {\r\n        var outCen: Vector3 = out._center;\r\n        var outExt: Vector3 = out._extent;\r\n\r\n        Vector3.transformCoordinate(this.getCenter(), matrix, outCen);\r\n        this._rotateExtents(this.getExtent(), matrix, outExt);\r\n\r\n        out._boundBox.setCenterAndExtent(outCen, outExt);\r\n        out._updateFlag = 0;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _getBoundBox(): BoundBox {\r\n        if (this._updateFlag & BoundsImpl._UPDATE_MIN) {\r\n            var min: Vector3 = this._boundBox.min;\r\n            this._getMin(this.getCenter(), this.getExtent(), min);\r\n            this._setUpdateFlag(BoundsImpl._UPDATE_MIN, false);\r\n        }\r\n        if (this._updateFlag & BoundsImpl._UPDATE_MAX) {\r\n            var max: Vector3 = this._boundBox.max;\r\n            this._getMax(this.getCenter(), this.getExtent(), max);\r\n            this._setUpdateFlag(BoundsImpl._UPDATE_MAX, false);\r\n        }\r\n        return this._boundBox;\r\n    }\r\n\r\n    /**\r\n     * @returns -1为不相交 不为0的时候返回值为相交体积\r\n     */\r\n    calculateBoundsintersection(bounds: BoundsImpl): number {\r\n        var ownMax: Vector3 = this.getMax();\r\n        var ownMin: Vector3 = this.getMin();\r\n        var calMax: Vector3 = bounds.getMax();\r\n        var calMin: Vector3 = bounds.getMin();\r\n        var tempV0: Vector3 = TEMP_VECTOR3_MAX0;\r\n        var tempV1: Vector3 = TEMP_VECTOR3_MAX1;\r\n        var thisExtends: Vector3 = this.getExtent();\r\n        var boundExtends: Vector3 = bounds.getExtent();\r\n        tempV0.setValue(Math.max(ownMax.x, calMax.x) - Math.min(ownMin.x, calMin.x),\r\n            Math.max(ownMax.y, calMax.y) - Math.min(ownMin.y, calMin.y),\r\n            Math.max(ownMax.z, calMax.z) - Math.min(ownMin.z, calMin.z));\r\n        tempV1.setValue((thisExtends.x + boundExtends.x) * 2.0,\r\n            (thisExtends.y + boundExtends.y) * 2.0,\r\n            (thisExtends.z + boundExtends.z) * 2.0);\r\n        if ((tempV0.x) > (tempV1.x)) return -1;\r\n        if ((tempV0.y) > (tempV1.y)) return -1;\r\n        if ((tempV0.z) > (tempV1.z)) return -1;\r\n        return (tempV1.x - tempV0.x) * (tempV1.y - tempV0.y) * (tempV1.z - tempV0.z);\r\n    }\r\n\r\n\r\n    /**\r\n     * 克隆。\r\n     * @param\tdestObject 克隆源。\r\n     */\r\n    cloneTo(destObject: any): void {\r\n        var destBounds: BoundsImpl = (<BoundsImpl>destObject);\r\n        this.getMin().cloneTo(destBounds._boundBox.min);\r\n        this.getMax().cloneTo(destBounds._boundBox.max);\r\n        this.getCenter().cloneTo(destBounds._center);\r\n        this.getExtent().cloneTo(destBounds._extent);\r\n        destBounds._updateFlag = 0;\r\n    }\r\n\r\n    /**\r\n     * 克隆。\r\n     * @return\t 克隆副本。\r\n     */\r\n    clone(): any {\r\n        var dest: BoundsImpl = new BoundsImpl(new Vector3(), new Vector3());\r\n        this.cloneTo(dest);\r\n        return dest;\r\n    }\r\n}\r\n\r\nconst TEMP_VECTOR3_MAX0 = new Vector3();\r\nconst TEMP_VECTOR3_MAX1 = new Vector3();","import { IBaseRenderNode } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/IBaseRenderNode\";\r\nimport { BaseRender } from \"../../core/render/BaseRender\";\r\nimport { Transform3D } from \"../../core/Transform3D\";\r\nimport { Bounds } from \"../../math/Bounds\";\r\n\r\n\r\nexport class BaseRenderNode implements IBaseRenderNode {\r\n   \r\n    /**@interanl */\r\n    boundsChange: boolean;\r\n    /**@internal ID */\r\n    renderId: number;\r\n    /**@internal Shadow Mode */\r\n    receiveShadow: boolean;\r\n    /**@internal shadow mode */\r\n    castShadow: boolean;\r\n    /**@internal 包围盒 */\r\n    bounds: Bounds;\r\n    /**@internal 排序矫正值 */\r\n    sortingFudge: number;\r\n    /**@internal 距离矫正 */\r\n    distanceForSort: number;\r\n    /**@internal transform3D */\r\n    transform: Transform3D;\r\n    /**@internal baseRender */\r\n    owner: BaseRender | null;\r\n    /**@internal TODO Base Bounds/can update Bounds by transform*GeometryBounds*/\r\n    geometryBounds: Bounds | null;\r\n    /**@internal layer */\r\n    layer:number;\r\n    /**@internal */\r\n    renderbitFlag:number;\r\n    /**@internal */\r\n    staticMask: number;\r\n}","import { LayaGL } from \"../../../layagl/LayaGL\";\r\nimport { RenderCapable } from \"../../../RenderEngine/RenderEnum/RenderCapable\";\r\nimport { SingletonList } from \"../../../utils/SingletonList\";\r\nimport { RenderElement } from \"../../core/render/RenderElement\";\r\nimport { SubMeshInstanceBatch } from \"../SubMeshInstanceBatch\";\r\nimport { InstanceBatchManager } from \"./InstanceBatchManager\";\r\nimport { InstanceRenderElement } from \"../../core/render/InstanceRenderElement\";\r\nimport { MeshInstanceGeometry } from \"../MeshInstanceGeometry\";\r\nimport { SubMesh } from \"../../resource/models/SubMesh\";\r\nimport { Config3D } from \"../../../../Config3D\";\r\n\r\nexport class RenderElementBatch {\r\n    static instance: RenderElementBatch;\r\n    private _instanceBatchManager: InstanceBatchManager;\r\n    private _recoverList: SingletonList<InstanceRenderElement>;\r\n    constructor() {\r\n        RenderElementBatch.instance = this;\r\n        this._instanceBatchManager = InstanceBatchManager.instance;\r\n        this._recoverList = new SingletonList();\r\n    }\r\n\r\n    /**\r\n     * after batchRender\r\n     */\r\n    recoverData() {\r\n        let elements = this._recoverList.elements;\r\n        for (let i = 0, n = this._recoverList.length; i < n; i++) {\r\n            let element = elements[i];\r\n            element.recover();\r\n        }\r\n        this._recoverList.length = 0;\r\n    }\r\n\r\n    /**\r\n     * BatchData\r\n     * @param elements \r\n     */\r\n    batch(elements: SingletonList<RenderElement>) {\r\n        let len = elements.length;\r\n        elements.length = 0;\r\n        this._instanceBatchManager.updateCountMark++;//每个批次是一个新的标签，保证更新不重复\r\n        let elementArray = elements.elements;\r\n        for (var i = 0; i < len; i++) {\r\n            let element = elements.elements[i];\r\n            if (!element._canBatch) {\r\n                elements.add(element);\r\n                continue;\r\n            }\r\n            if (element.staticBatch && (!element._baseRender._probReflection || element._baseRender._probReflection._isScene) && Config3D.enableStaticBatch) {\r\n                //static Batch TODO\r\n                elements.add(element);\r\n            }\r\n            else if (Config3D.enableDynamicBatch && LayaGL.renderEngine.getCapable(RenderCapable.DrawElement_Instance)) {\r\n                if (element._subShader._owner._enableInstancing && element._baseRender.lightmapIndex < 0) {\r\n                    var insManager = this._instanceBatchManager;\r\n                    let invertFrontFace = element._transform ? element._transform._isFrontFaceInvert : false;\r\n                    var insBatchMarks = insManager.getInstanceBatchOpaquaMark(element._baseRender._receiveShadow, element._material._id, element._geometry._id, invertFrontFace, element._baseRender._probReflection ? element._baseRender._probReflection._id : -1);\r\n                    if (insManager.updateCountMark === insBatchMarks.updateMark) {\r\n                        //can batch\r\n                        var insBatchIndex: number = insBatchMarks.indexInList;\r\n                        var insOriElement: RenderElement = elementArray[insBatchIndex];\r\n                        if (insBatchMarks.batched) {\r\n                            var instanceelements: SingletonList<RenderElement> = (insOriElement as InstanceRenderElement)._instanceBatchElementList;\r\n                            if (instanceelements.length === SubMeshInstanceBatch.maxInstanceCount) {\r\n                                insBatchMarks.updateMark = insManager.updateCountMark;\r\n                                insBatchMarks.indexInList = elements.length;\r\n                                insBatchMarks.batched = false;\r\n                                elements.add(element);\r\n                            } else {\r\n                                instanceelements.add(element);\r\n                            }\r\n                        } else {\r\n                            //替换Elements中的RenderElement为InstanceElement\r\n                            let instanceRenderElement = InstanceRenderElement.create();\r\n                            this._recoverList.add(instanceRenderElement);\r\n                            instanceRenderElement._baseRender = insOriElement._baseRender;\r\n                            instanceRenderElement._renderElementOBJ._renderShaderData = insOriElement._baseRender._shaderValues;\r\n                            instanceRenderElement.renderType = RenderElement.RENDERTYPE_INSTANCEBATCH;\r\n                            //Geometry updaste\r\n                            (instanceRenderElement._geometry as MeshInstanceGeometry).subMesh = (insOriElement._geometry as SubMesh);\r\n                            instanceRenderElement.material = insOriElement._material;\r\n                            instanceRenderElement.setTransform(null);\r\n                            instanceRenderElement._subShader = insOriElement._subShader;\r\n                            let list = instanceRenderElement._instanceBatchElementList;\r\n                            list.length = 0;\r\n                            list.add(insOriElement);\r\n                            list.add(element);\r\n                            elementArray[insBatchIndex] = instanceRenderElement;\r\n                            insBatchMarks.batched = true;\r\n                            instanceRenderElement._isUpdataData = true;\r\n                            instanceRenderElement._invertFrontFace = invertFrontFace;\r\n                        }\r\n                    } else {\r\n                        insBatchMarks.updateMark = insManager.updateCountMark;\r\n                        insBatchMarks.indexInList = elements.length;\r\n                        insBatchMarks.batched = false;\r\n                        elements.add(element);\r\n                    }\r\n                } else\r\n                    elements.add(element);\r\n            }\r\n            else\r\n                elements.add(element);\r\n        }\r\n    }\r\n}","import { IRenderContext3D } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/IRenderContext3D\";\r\nimport { IRenderQueue } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/IRenderQueue\";\r\nimport { ISortPass } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/ISortPass\";\r\nimport { SingletonList } from \"../../../utils/SingletonList\";\r\nimport { BufferState } from \"../../../webgl/utils/BufferState\";\r\nimport { Camera } from \"../../core/Camera\";\r\nimport { RenderContext3D } from \"../../core/render/RenderContext3D\";\r\nimport { RenderElement } from \"../../core/render/RenderElement\";\r\nimport { RenderElementBatch } from \"../../graphics/Batch/RenderElementBatch\";\r\n\r\nexport class BaseRenderQueue implements IRenderQueue {\r\n    /** @interanl */\r\n    _isTransparent: boolean = false;\r\n    /** @internal */\r\n    elements: SingletonList<RenderElement> = new SingletonList<RenderElement>();\r\n    /**sort function*/\r\n    _sortPass: ISortPass;\r\n    /** context*/\r\n    _context: IRenderContext3D;\r\n\r\n    _batch: RenderElementBatch;\r\n\r\n    set sortPass(value: ISortPass) {\r\n        this._sortPass = value;\r\n    }\r\n    constructor(isTransparent: boolean) {\r\n        this._isTransparent = isTransparent;\r\n        this._batch = RenderElementBatch.instance ? RenderElementBatch.instance : new RenderElementBatch();\r\n    }\r\n\r\n\r\n    set context(value: RenderContext3D) {\r\n        this._context = value._contextOBJ;\r\n    }\r\n\r\n    addRenderElement(renderelement: RenderElement) {\r\n        this.elements.add(renderelement);\r\n    }\r\n\r\n    clear(): void {\r\n        this.elements.length = 0;\r\n    }\r\n\r\n    renderQueue(context: RenderContext3D): number {\r\n        this.context = context;\r\n        this._context.applyContext(Camera._updateMark);\r\n\r\n        var elements: RenderElement[] = this.elements.elements;\r\n\r\n        this._batchQueue();//合并的地方\r\n        for (var i: number = 0, n = this.elements.length; i < n; i++) {\r\n            elements[i]._renderUpdatePre(context);//Update Data\r\n        }\r\n        //更新所有大buffer数据 nativeTODO\r\n\r\n        this._sort();\r\n        for (var i: number = 0, n: number = this.elements.length; i < n; i++)\r\n            elements[i]._render(this._context);//Update Data\r\n        BufferState._curBindedBufferState && BufferState._curBindedBufferState.unBind();\r\n        this._batch.recoverData();\r\n        return n;\r\n    }\r\n\r\n    private _batchQueue() {\r\n        this._isTransparent || this._batch.batch(this.elements);\r\n    }\r\n\r\n    private _sort() {\r\n        var count: number = this.elements.length;\r\n        this._sortPass.sort(this.elements, this._isTransparent, 0, count - 1);\r\n    }\r\n\r\n    destroy(): void {\r\n        this.elements.destroy();\r\n    }\r\n}","import { Vector3 } from \"../../../maths/Vector3\";\r\nimport { ICameraCullInfo } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/ICameraCullInfo\";\r\nimport { BoundFrustum } from \"../../math/BoundFrustum\";\r\n\r\n\r\n/**\r\n * camera裁剪数据\r\n */\r\nexport class CameraCullInfo implements ICameraCullInfo {\r\n\t/**位置 */\r\n\tposition: Vector3;\r\n\t/**是否遮挡剔除 */\r\n\tuseOcclusionCulling: Boolean;\r\n\t/**锥体包围盒 */\r\n\tboundFrustum: BoundFrustum;\r\n\t/**遮挡标记 */\r\n\tcullingMask: number;\r\n\t/**静态标记 */\r\n\tstaticMask: number;\r\n}","import { LayaGL } from \"../../../layagl/LayaGL\";\r\nimport { IBaseRenderNode } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/IBaseRenderNode\";\r\nimport { IRenderContext3D } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/IRenderContext3D\";\r\nimport { IRenderElement } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/IRenderElement\";\r\nimport { IRenderGeometryElement } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/IRenderGeometryElement\";\r\nimport { ShaderData } from \"../../../RenderEngine/RenderShader/ShaderData\";\r\nimport { ShaderInstance } from \"../../../RenderEngine/RenderShader/ShaderInstance\";\r\nimport { SingletonList } from \"../../../utils/SingletonList\";\r\nimport { Transform3D } from \"../../core/Transform3D\";\r\n\r\n\r\nexport class RenderElementOBJ implements IRenderElement {\r\n\r\n    _geometry: IRenderGeometryElement;\r\n\r\n    _shaderInstances: SingletonList<ShaderInstance>;\r\n\r\n    _materialShaderData: ShaderData;\r\n\r\n    _renderShaderData: ShaderData;\r\n\r\n    _transform: Transform3D;\r\n\r\n    _isRender: boolean;\r\n\r\n    _owner: IBaseRenderNode;\r\n\r\n    _invertFront: boolean;\r\n\r\n    constructor() {\r\n        this._shaderInstances = new SingletonList();\r\n    }\r\n\r\n    _addShaderInstance(shader: ShaderInstance) {\r\n        this._shaderInstances.add(shader);\r\n    }\r\n\r\n    _clearShaderInstance() {\r\n        this._shaderInstances.length = 0;\r\n    }\r\n\r\n    /**\r\n     * render RenderElement\r\n     * @param renderqueue \r\n     */\r\n    _render(context: IRenderContext3D): void {\r\n        var forceInvertFace: boolean = context.invertY;\r\n        var updateMark: number = context.cameraUpdateMark;\r\n        var sceneID = context.sceneID;\r\n        var sceneShaderData: ShaderData = context.sceneShaderData;\r\n        var cameraShaderData: ShaderData = context.cameraShaderData;\r\n        if (this._isRender) {\r\n            var passes: ShaderInstance[] = this._shaderInstances.elements;\r\n            for (var j: number = 0, m: number = this._shaderInstances.length; j < m; j++) {\r\n                const shaderIns: ShaderInstance = passes[j];\r\n                if(!shaderIns.complete)\r\n                    continue;\r\n                var switchShader: boolean = shaderIns.bind();\r\n                var switchUpdateMark: boolean = (updateMark !== shaderIns._uploadMark);\r\n                var uploadScene: boolean = (shaderIns._uploadScene !== sceneID) || switchUpdateMark;\r\n                //Scene\r\n                if (uploadScene || switchShader) {\r\n                    sceneShaderData && shaderIns.uploadUniforms(shaderIns._sceneUniformParamsMap, sceneShaderData, uploadScene);\r\n                    shaderIns._uploadScene = sceneID;\r\n                }\r\n                //render\r\n                if (this._renderShaderData) {\r\n                    var uploadSprite3D: boolean = (shaderIns._uploadRender !== this._renderShaderData) || switchUpdateMark;\r\n                    if (uploadSprite3D || switchShader) {\r\n                        shaderIns.uploadUniforms(shaderIns._spriteUniformParamsMap, this._renderShaderData, uploadSprite3D);\r\n                        shaderIns._uploadRender = this._renderShaderData;\r\n                    }\r\n                }\r\n                //camera\r\n                var uploadCamera: boolean = shaderIns._uploadCameraShaderValue !== cameraShaderData || switchUpdateMark;\r\n                if (uploadCamera || switchShader) {\r\n                    cameraShaderData && shaderIns.uploadUniforms(shaderIns._cameraUniformParamsMap, cameraShaderData, uploadCamera);\r\n                    shaderIns._uploadCameraShaderValue = cameraShaderData;\r\n                }\r\n                //material\r\n                var uploadMaterial: boolean = (shaderIns._uploadMaterial !== this._materialShaderData) || switchUpdateMark;\r\n                if (uploadMaterial || switchShader) {\r\n                    shaderIns.uploadUniforms(shaderIns._materialUniformParamsMap, this._materialShaderData, uploadMaterial);\r\n                    shaderIns._uploadMaterial = this._materialShaderData;\r\n                    //GlobalData\r\n                    context.globalShaderData && shaderIns.uploadUniforms(shaderIns._materialUniformParamsMap, context.globalShaderData, uploadMaterial);\r\n                }\r\n                //renderData update\r\n                //TODO：Renderstate as a Object to less upload\r\n                shaderIns.uploadRenderStateBlendDepth(this._materialShaderData);\r\n                shaderIns.uploadRenderStateFrontFace(this._materialShaderData, forceInvertFace, this._invertFront);\r\n                this.drawGeometry(shaderIns);\r\n            }\r\n        }\r\n    }\r\n\r\n    drawGeometry(shaderIns: ShaderInstance) {\r\n        LayaGL.renderDrawContext.drawGeometryElement(this._geometry);\r\n    }\r\n\r\n    _destroy() {\r\n        this._geometry = null;\r\n        this._shaderInstances = null;\r\n        this._materialShaderData = null;\r\n        this._renderShaderData = null;\r\n        this._transform = null;\r\n        this._isRender = null;\r\n    }\r\n}","\r\nimport { LayaGL } from \"../../../layagl/LayaGL\";\r\nimport { ShaderInstance } from \"../../../RenderEngine/RenderShader/ShaderInstance\";\r\nimport { VertexBuffer3D } from \"../../graphics/VertexBuffer3D\";\r\nimport { RenderElementOBJ } from \"./RenderElementOBJ\";\r\n\r\nexport class InstanceRenderElementOBJ extends RenderElementOBJ {\r\n\r\n    /**@internal 当instance数量特别大时可能需要一段一段数据来画,所以需要更新顶点数据*/\r\n    private _vertexBuffer3D: Array<VertexBuffer3D> = [];\r\n\r\n    private _updateData: Array<Float32Array> = [];\r\n\r\n    private _updateDataNum: Array<number> = [];\r\n\r\n    drawCount: number;\r\n\r\n    updateNums: number;\r\n\r\n    /**\r\n     * 增加UpdateBuffer\r\n     * @param vb \r\n     * @param length 每个instance属性的数据长度\r\n     */\r\n    addUpdateBuffer(vb: VertexBuffer3D,length:number) {\r\n        this._vertexBuffer3D[this.updateNums] = vb;\r\n        this._updateDataNum[this.updateNums++] = length;\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param index index of Buffer3D\r\n     * @param length length of array\r\n     */\r\n    getUpdateData(index: number,length:number): Float32Array {\r\n        let data = this._updateData[index];\r\n        if (!data || data.length < length) {\r\n            data = this._updateData[index] = new Float32Array(length);\r\n        }\r\n        return data;\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * draw geometry\r\n     * @param shaderIns \r\n     */\r\n    drawGeometry(shaderIns: ShaderInstance) {\r\n        //当instance数量特别大时可能需要一段一段数据来画,所以需要更新顶点数据\r\n        let data: Float32Array;\r\n        let buffer: VertexBuffer3D;\r\n        for (let i = 0; i < this.updateNums; i++) {\r\n            buffer = this._vertexBuffer3D[i];\r\n            if (!buffer) break;\r\n            data = this._updateData[i];\r\n            buffer.orphanStorage();\r\n            buffer.setData(data.buffer, 0, 0, this.drawCount * this._updateDataNum[i] * 4);\r\n        }\r\n        LayaGL.renderDrawContext.drawGeometryElement(this._geometry);\r\n    }\r\n\r\n    clear() {\r\n        this.updateNums = 0;\r\n    }\r\n}","import { ISortPass } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/ISortPass\";\r\nimport { SingletonList } from \"../../../utils/SingletonList\";\r\nimport { RenderElement } from \"../../core/render/RenderElement\";\r\n\r\n\r\n\r\nexport class QuickSort implements ISortPass {\r\n\tprivate elementArray: SingletonList<RenderElement>;\r\n\tprivate isTransparent: boolean;\r\n\r\n\t/**\r\n\t * 快速排序\r\n\t * @param elements \r\n\t * @param isTransparent \r\n\t * @param left \r\n\t * @param right \r\n\t */\r\n\tsort(elements: SingletonList<RenderElement>, isTransparent: boolean, left: number, right: number): void {\r\n\t\tthis.elementArray = elements;\r\n\t\tthis.isTransparent = isTransparent;\r\n\t\tthis._quickSort(left, right);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_quickSort(left: number, right: number): void {\r\n\t\tif (this.elementArray.length > 1) {\r\n\t\t\tvar index: number = this._partitionRenderObject(left, right);\r\n\t\t\tvar leftIndex: number = index - 1;\r\n\t\t\tif (left < leftIndex)\r\n\t\t\t\tthis._quickSort(left, leftIndex);\r\n\r\n\t\t\tif (index < right)\r\n\t\t\t\tthis._quickSort(index, right);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _partitionRenderObject(left: number, right: number): number {\r\n\t\tvar elements: RenderElement[] = this.elementArray.elements;\r\n\t\tvar pivot: RenderElement = elements[Math.floor((right + left) / 2)];\r\n\t\twhile (left <= right) {\r\n\t\t\twhile (this._compare(elements[left], pivot) < 0)\r\n\t\t\t\tleft++;\r\n\t\t\twhile (this._compare(elements[right], pivot) > 0)\r\n\t\t\t\tright--;\r\n\t\t\tif (left < right) {\r\n\t\t\t\tvar temp: RenderElement = elements[left];\r\n\t\t\t\telements[left] = elements[right];\r\n\t\t\t\telements[right] = temp;\r\n\t\t\t\tleft++;\r\n\t\t\t\tright--;\r\n\t\t\t} else if (left === right) {\r\n\t\t\t\tleft++;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn left;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _compare(left: RenderElement, right: RenderElement): number {\r\n\t\tvar renderQueue: number = left._material.renderQueue - right._material.renderQueue;\r\n\t\tif (renderQueue === 0) {\r\n\t\t\tvar sort: number = this.isTransparent ? right._baseRender._distanceForSort - left._baseRender._distanceForSort : left._baseRender._distanceForSort - right._baseRender._distanceForSort;\r\n\t\t\treturn sort + right._baseRender.sortingFudge - left._baseRender.sortingFudge;\r\n\t\t} else {\r\n\t\t\treturn renderQueue;\r\n\t\t}\r\n\t}\r\n\r\n}","\r\nimport { LayaGL } from \"../../../layagl/LayaGL\";\r\nimport { Vector4 } from \"../../../maths/Vector4\";\r\nimport { IRenderTarget } from \"../../../RenderEngine/RenderInterface/IRenderTarget\";\r\nimport { IRenderContext3D, PipelineMode } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/IRenderContext3D\";\r\nimport { ShaderData } from \"../../../RenderEngine/RenderShader/ShaderData\";\r\nimport { Viewport } from \"../../math/Viewport\";\r\nimport { RenderElementOBJ } from \"./RenderElementOBJ\";\r\n\r\nexport class RenderContext3DOBJ implements IRenderContext3D {\r\n\r\n    //dest Texture\r\n    destTarget: IRenderTarget;\r\n    //viewPort\r\n    viewPort: Viewport;\r\n    //scissor\r\n    scissor: Vector4;\r\n    //is invert Y\r\n    invertY: boolean = false;\r\n    //pipeLineMode\r\n    pipelineMode: PipelineMode;\r\n    // config shader data\r\n    configShaderData: ShaderData;\r\n    //Camera Shader Data\r\n    cameraShaderData: ShaderData;\r\n    //Scene cache\r\n    sceneID: number;\r\n    //scene Shader Data\r\n    sceneShaderData: ShaderData;\r\n    //Camera Update Mark\r\n    cameraUpdateMark: number;\r\n    //Global ShaderData\r\n    globalShaderData: ShaderData;\r\n\r\n    constructor() {\r\n        this.viewPort = new Viewport(0, 0, 0, 0);\r\n        this.scissor = new Vector4();\r\n        this.pipelineMode = \"Forward\";\r\n        this.configShaderData = new ShaderData();\r\n    }\r\n\r\n    /**设置IRenderContext */\r\n    applyContext(cameraUpdateMark: number): void {\r\n        this.destTarget && this.destTarget._start();\r\n        this.cameraUpdateMark = cameraUpdateMark;\r\n        LayaGL.renderEngine.viewport(this.viewPort.x, this.viewPort.y, this.viewPort.width, this.viewPort.height);\r\n        LayaGL.renderEngine.scissor(this.scissor.x, this.scissor.y, this.scissor.z, this.scissor.w);\r\n    }\r\n\r\n    drawRenderElement(renderelemt: RenderElementOBJ): void {\r\n        renderelemt._render(this);\r\n    }\r\n}","import { GLRenderDrawContext } from \"../../../RenderEngine/RenderEngine/WebGLEngine/GLRenderDrawContext\";\r\nimport { DrawType } from \"../../../RenderEngine/RenderEnum/DrawType\";\r\nimport { IndexFormat } from \"../../../RenderEngine/RenderEnum/IndexFormat\";\r\nimport { MeshTopology } from \"../../../RenderEngine/RenderEnum/RenderPologyMode\";\r\nimport { IRenderGeometryElement } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/IRenderGeometryElement\";\r\nimport { LayaGL } from \"../../../layagl/LayaGL\";\r\nimport { SingletonList } from \"../../../utils/SingletonList\";\r\nimport { BufferState } from \"../../../webgl/utils/BufferState\";\r\n\r\nexport class FastSinglelist<T> extends SingletonList<T> {\r\n\r\n  /**\r\n    * @internal\r\n    */\r\n  add(element: T): void {\r\n    if (this.length === this.elements.length)\r\n      this.elements.push(element);\r\n    else\r\n      this.elements[this.length] = element;\r\n  }\r\n\r\n}\r\n\r\nexport class RenderGeometryElementOBJ implements IRenderGeometryElement {\r\n  /**@internal */\r\n  bufferState: BufferState;\r\n\r\n  /**@internal */\r\n  private _mode: MeshTopology;\r\n\r\n  /**@internal 优化使用*/\r\n  _glmode: number;\r\n\r\n  /**@internal */\r\n  drawType: DrawType;\r\n\r\n  /**@internal */\r\n  drawParams: FastSinglelist<number>;\r\n\r\n  /**@internal */\r\n  instanceCount: number;\r\n\r\n  /**@internal 优化*/\r\n  _glindexFormat: number;\r\n\r\n  /**@internal */\r\n  private _indexFormat: IndexFormat;\r\n\r\n  /**\r\n   * index format\r\n   */\r\n  public get indexFormat(): IndexFormat {\r\n    return this._indexFormat;\r\n  }\r\n\r\n  public set indexFormat(value: IndexFormat) {\r\n    this._indexFormat = value;\r\n    this._glindexFormat = (LayaGL.renderDrawContext as GLRenderDrawContext).getIndexType(this._indexFormat);\r\n  }\r\n\r\n  /**\r\n   * Mesh Topology mode \r\n   */\r\n  get mode(): MeshTopology {\r\n    return this._mode;\r\n  }\r\n\r\n  set mode(value: MeshTopology) {\r\n    this._mode = value;\r\n    this._glmode = (LayaGL.renderDrawContext as GLRenderDrawContext).getMeshTopology(this._mode);\r\n  }\r\n\r\n  /**@internal */\r\n  constructor(mode: MeshTopology, drawType: DrawType) {\r\n    this.mode = mode;\r\n    this.drawParams = new SingletonList();\r\n    this.drawType = drawType;\r\n  }\r\n\r\n  /**@internal */\r\n  setDrawArrayParams(first: number, count: number): void {\r\n    this.drawParams.add(first);\r\n    this.drawParams.add(count);\r\n  }\r\n\r\n  /**@internal */\r\n  setDrawElemenParams(count: number, offset: number): void {\r\n    this.drawParams.add(offset);\r\n    this.drawParams.add(count);\r\n\r\n  }\r\n\r\n  /**@internal */\r\n  destroy(): void {\r\n    delete this.drawParams;\r\n  }\r\n  /**@internal */\r\n  clearRenderParams() {\r\n    this.drawParams.length = 0;\r\n  }\r\n}","import { ISceneRenderManager } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/ISceneRenderManager\";\r\nimport { SingletonList } from \"../../../utils/SingletonList\";\r\nimport { BaseRender } from \"../../core/render/BaseRender\";\r\n\r\n\r\nexport class SceneRenderManagerOBJ implements ISceneRenderManager {\r\n    /** @internal */\r\n    _renders: SingletonList<BaseRender> = new SingletonList();\r\n    _motionRenders: SingletonList<BaseRender> = new SingletonList();\r\n    constructor() {\r\n\r\n    }\r\n\r\n    get list() {\r\n        return this._renders;\r\n    }\r\n\r\n    set list(value) {\r\n        this._renders = value;\r\n    }\r\n\r\n    addRenderObject(object: BaseRender): void {\r\n        this._renders.add(object);\r\n    }\r\n    removeRenderObject(object: BaseRender): void {\r\n        this._renders.remove(object);\r\n        this.removeMotionObject(object);\r\n    }\r\n\r\n    removeMotionObject(object: BaseRender): void {\r\n        let index = object._motionIndexList;\r\n        if (index != -1) {//remove\r\n            let elements = this._motionRenders.elements;\r\n            this._motionRenders.length -= 1;\r\n            elements[length]._motionIndexList = index;\r\n            elements[index] = elements[length];\r\n        }\r\n\r\n        //TODO\r\n    }\r\n    updateMotionObjects(): void {\r\n        for (let i = 0; i < this._motionRenders.length; i++) {\r\n            this._motionRenders.elements[i].bounds;\r\n            this._motionRenders.elements[i]._motionIndexList = -1;\r\n        }\r\n        this._motionRenders.length = 0;\r\n\r\n        //TODO\r\n    }\r\n    addMotionObject(object: BaseRender): void {\r\n        if (object._motionIndexList == -1) {\r\n            object._motionIndexList = this._motionRenders.length;\r\n            this._motionRenders.add(object);\r\n        }\r\n\r\n        //TODO\r\n    }\r\n    destroy(): void {\r\n        this._renders.destroy();\r\n    }\r\n\r\n}","import { Vector3 } from \"../../../maths/Vector3\";\r\nimport { IShadowCullInfo } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/IShadowCullInfo\";\r\nimport { BoundSphere } from \"../../math/BoundSphere\";\r\nimport { Plane } from \"../../math/Plane\";\r\n\r\nexport class ShadowCullInfo implements IShadowCullInfo {\r\n    position: Vector3;\r\n    cullPlanes: Plane[];\r\n    cullSphere: BoundSphere;\r\n    cullPlaneCount: number;\r\n    direction: Vector3;\r\n}","\r\nimport { LayaGL } from \"../../../layagl/LayaGL\";\r\nimport { ShaderInstance } from \"../../../RenderEngine/RenderShader/ShaderInstance\";\r\nimport { SkinnedMeshSprite3D } from \"../../core/SkinnedMeshSprite3D\";\r\nimport { RenderElementOBJ } from \"./RenderElementOBJ\";\r\nimport { RenderGeometryElementOBJ } from \"./RenderGeometryElementOBJ\";\r\n\r\nexport class SkinRenderElementOBJ extends RenderElementOBJ {\r\n\r\n    skinnedData: Float32Array[];\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    /** 更新数据并且 */\r\n    drawGeometry(shaderIns: ShaderInstance) {\r\n        let length = this._shaderInstances.length;\r\n        let element = this._geometry.drawParams.elements;\r\n        if (!this.skinnedData)\r\n            return;\r\n        this._geometry.bufferState.bind();\r\n        for (var i: number = 0, n: number = length; i < n; i++) {\r\n            for (var j = 0, m = this._geometry.drawParams.length / 2; j < m; j++) {\r\n                var subSkinnedDatas: Float32Array = this.skinnedData[j];\r\n                shaderIns.uploadCustomUniform(SkinnedMeshSprite3D.BONES, subSkinnedDatas);\r\n                var offset = j * 2;\r\n                LayaGL.renderDrawContext.drawElements((this._geometry as RenderGeometryElementOBJ)._glmode, element[offset + 1], (this._geometry as RenderGeometryElementOBJ)._glindexFormat, element[offset]);\r\n            }\r\n        }\r\n    }\r\n}","\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\nimport { CommandUniformMap } from \"../../../RenderEngine/CommandUniformMap\";\r\nimport { BufferUsage } from \"../../../RenderEngine/RenderEnum/BufferTargetType\";\r\nimport { DrawType } from \"../../../RenderEngine/RenderEnum/DrawType\";\r\nimport { IndexFormat } from \"../../../RenderEngine/RenderEnum/IndexFormat\";\r\nimport { MeshTopology } from \"../../../RenderEngine/RenderEnum/RenderPologyMode\";\r\nimport { IRenderOBJCreate } from \"../../../RenderEngine/RenderInterface/IRenderOBJCreate\";\r\nimport { IBaseRenderNode } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/IBaseRenderNode\";\r\nimport { ICameraCullInfo } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/ICameraCullInfo\";\r\nimport { ICullPass } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/ICullPass\";\r\nimport { IRenderContext3D } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/IRenderContext3D\";\r\nimport { IRenderElement } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/IRenderElement\";\r\nimport { IRenderGeometryElement } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/IRenderGeometryElement\";\r\nimport { IRenderQueue } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/IRenderQueue\";\r\nimport { ISceneRenderManager } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/ISceneRenderManager\";\r\nimport { IShadowCullInfo } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/IShadowCullInfo\";\r\nimport { ISortPass } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/ISortPass\";\r\nimport { RenderState } from \"../../../RenderEngine/RenderShader/RenderState\";\r\nimport { ShaderData, ShaderDataType } from \"../../../RenderEngine/RenderShader/ShaderData\";\r\nimport { ShaderInstance } from \"../../../RenderEngine/RenderShader/ShaderInstance\";\r\nimport { RenderStateCommand } from \"../../../RenderEngine/RenderStateCommand\";\r\nimport { UniformBufferObject } from \"../../../RenderEngine/UniformBufferObject\";\r\nimport { ShaderCompileDefineBase } from \"../../../webgl/utils/ShaderCompileDefineBase\";\r\nimport { Sprite3D } from \"../../core/Sprite3D\";\r\nimport { Transform3D } from \"../../core/Transform3D\";\r\nimport { IndexBuffer3D } from \"../../graphics/IndexBuffer3D\";\r\nimport { VertexBuffer3D } from \"../../graphics/VertexBuffer3D\";\r\nimport { BoundsImpl } from \"../../math/BoundsImpl\";\r\nimport { BaseRenderNode } from \"./BaseRenderNode\";\r\nimport { BaseRenderQueue } from \"./BaseRenderQueue\";\r\nimport { CameraCullInfo } from \"./CameraCullInfo\";\r\nimport { CullPassBase } from \"./CullPass\";\r\nimport { InstanceRenderElementOBJ } from \"./InstanceRenderElementOBJ\";\r\nimport { QuickSort } from \"./QuickSort\";\r\nimport { RenderContext3DOBJ } from \"./RenderContext3DOBJ\";\r\nimport { RenderElementOBJ } from \"./RenderElementOBJ\";\r\nimport { RenderGeometryElementOBJ } from \"./RenderGeometryElementOBJ\";\r\nimport { SceneRenderManagerOBJ } from \"./SceneRenderManagerOBJ\";\r\nimport { ShadowCullInfo } from \"./ShadowCullInfo\";\r\nimport { SkinRenderElementOBJ } from \"./SkinRenderElementOBJ\";\r\n\r\nexport class RenderOBJCreateUtil implements IRenderOBJCreate {\r\n    \r\n    /**@internal */\r\n\tprivate globalBlockMap: any = {};\r\n\r\n\t\r\n    createTransform(owner: Sprite3D): Transform3D {\r\n        return new Transform3D(owner);\r\n    }\r\n\r\n    createBounds(min: Vector3, max: Vector3): any {\r\n        return new BoundsImpl(min, max);\r\n    }\r\n\r\n    createShaderData(): ShaderData {\r\n        return new ShaderData();\r\n    }\r\n\r\n    createRenderElement(): IRenderElement {\r\n        return new RenderElementOBJ();\r\n    }\r\n    createSkinRenderElement(): IRenderElement {\r\n        return new SkinRenderElementOBJ();\r\n    }\r\n    createInstanceRenderElement() {\r\n        return new InstanceRenderElementOBJ();\r\n    }\r\n\r\n    createBaseRenderQueue(isTransparent: boolean): IRenderQueue {\r\n        var queue: BaseRenderQueue = new BaseRenderQueue(isTransparent);\r\n        queue.sortPass = this.createSortPass();\r\n        return queue;\r\n    }\r\n\r\n    createRenderGeometry(mode: MeshTopology, drayType: DrawType): IRenderGeometryElement {\r\n        return new RenderGeometryElementOBJ(mode, drayType);\r\n    }\r\n\r\n    createVertexBuffer3D(byteLength: number, bufferUsage: BufferUsage, canRead: boolean = false) {\r\n        return new VertexBuffer3D(byteLength, bufferUsage, canRead);\r\n    }\r\n\r\n    createIndexBuffer3D(indexType: IndexFormat, indexCount: number, bufferUsage: BufferUsage = BufferUsage.Static, canRead: boolean = false): IndexBuffer3D {\r\n        return new IndexBuffer3D(indexType, indexCount, bufferUsage, canRead);\r\n    }\r\n\r\n    createShaderInstance(vs: string, ps: string, attributeMap: { [name: string]: [number, ShaderDataType] }, shaderPass: ShaderCompileDefineBase): ShaderInstance {\r\n        return new ShaderInstance(vs, ps, attributeMap, shaderPass);\r\n    }\r\n\r\n    createBaseRenderNode(): IBaseRenderNode {\r\n        return new BaseRenderNode();\r\n    }\r\n\r\n    createRenderContext3D(): IRenderContext3D {\r\n        return new RenderContext3DOBJ();\r\n    }\r\n\r\n    createSceneRenderManager(): ISceneRenderManager {\r\n        return new SceneRenderManagerOBJ();\r\n    }\r\n\r\n    createCullPass(): ICullPass {\r\n        return new CullPassBase();\r\n    }\r\n\r\n    createSortPass(): ISortPass {\r\n        return new QuickSort();\r\n    }\r\n\r\n    createShadowCullInfo(): IShadowCullInfo {\r\n        return new ShadowCullInfo();\r\n    }\r\n\r\n    createCameraCullInfo(): ICameraCullInfo {\r\n        return new CameraCullInfo();\r\n    }\r\n\r\n    createRenderStateComand(): RenderStateCommand {\r\n        return new RenderStateCommand();\r\n    }\r\n\r\n    createRenderState(): RenderState {\r\n        return new RenderState();\r\n    }\r\n\r\n    createUniformBufferObject(glPointer: number, name: string, bufferUsage: BufferUsage, byteLength: number, isSingle: boolean): UniformBufferObject {\r\n        return new UniformBufferObject(glPointer, name, bufferUsage, byteLength, isSingle);\r\n    }\r\n\r\n    createGlobalUniformMap(blockName: string): CommandUniformMap {\r\n\t\tlet comMap = this.globalBlockMap[blockName];\r\n\t\tif (!comMap)\r\n\t\t\tcomMap = this.globalBlockMap[blockName] = new CommandUniformMap(blockName);;\r\n\t\treturn comMap;\r\n\t}\r\n}","import { IBaseRenderNode } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/IBaseRenderNode\";\r\nimport { BaseRender } from \"../../core/render/BaseRender\";\r\nimport { Transform3D } from \"../../core/Transform3D\";\r\nimport { Bounds } from \"../../math/Bounds\";\r\n\r\n\r\nexport class NativeBaseRenderNode implements IBaseRenderNode {\r\n\r\n    private _nativeObj: any;\r\n    private _bounds: Bounds = null;\r\n    private _geometryBounds: Bounds = null;\r\n    private _transform: Transform3D = null;\r\n    constructor() {\r\n        this._nativeObj = new (window as any).conchRenderNode();\r\n    }\r\n    set boundsChange(value: boolean) {\r\n        this._nativeObj.boundsChange = value;\r\n    }\r\n    get boundsChange(): boolean {\r\n        return this._nativeObj.boundsChange;\r\n    }\r\n\r\n    set layer(value: number) {\r\n        this._nativeObj.layer = value;\r\n    }\r\n\r\n    get layer(): number {\r\n        return this._nativeObj.layer;\r\n    }\r\n\r\n    get renderId(): number {\r\n        return this._nativeObj.renderId;\r\n    }\r\n    set renderId(value: number) {\r\n        this._nativeObj.renderId = value;\r\n    }\r\n\r\n    get receiveShadow(): boolean {\r\n        return this._nativeObj.receiveShadow;\r\n    }\r\n    set receiveShadow(value: boolean) {\r\n        this._nativeObj.receiveShadow = value;\r\n    }\r\n\r\n    get castShadow(): boolean {\r\n        return this._nativeObj.castShadow;\r\n    }\r\n    set castShadow(value: boolean) {\r\n        this._nativeObj.castShadow = value;\r\n    }\r\n\r\n    get bounds(): Bounds {\r\n        return this._bounds;\r\n    }\r\n    set bounds(value: Bounds) {\r\n        this._bounds = value;\r\n        this._nativeObj.bounds = (value as any)._imp._nativeObj;\r\n    }\r\n\r\n    sortingFudge: number;\r\n\r\n    get distanceForSort(): number {\r\n        return this._nativeObj.distanceForSort;\r\n    }\r\n    set distanceForSort(value: number) {\r\n        this._nativeObj.distanceForSort = value;\r\n    }\r\n\r\n    get transform(): Transform3D {\r\n        return this._transform;\r\n    }\r\n    set transform(value: Transform3D) {\r\n        this._transform = value;\r\n        this._nativeObj.transform = value ? (value as any)._nativeObj : null;\r\n    }\r\n    \r\n    get owner(): BaseRender | null {\r\n        return this._nativeObj.owner;\r\n    }\r\n    set owner(value: BaseRender | null) {\r\n        this._nativeObj.owner = value;\r\n    }\r\n\r\n    get geometryBounds(): Bounds | null {\r\n        return this._geometryBounds;\r\n    }\r\n\r\n    set geometryBounds(value: Bounds | null) {\r\n        this._geometryBounds = value;\r\n        this._nativeObj.geometryBounds = (value as any)._imp._nativeObj;\r\n    }\r\n\r\n    get renderbitFlag(): number {\r\n        return this._nativeObj.renderbitFlag;\r\n    }\r\n    set renderbitFlag(value: number | null) {\r\n        this._nativeObj.renderbitFlag = value;\r\n    }\r\n    get staticMask(): number {\r\n        return this._nativeObj.staticMask;\r\n    }\r\n    set staticMask(value: number | null) {\r\n        this._nativeObj.staticMask = value;\r\n    }\r\n}","import { UploadMemoryManager } from \"../../../RenderEngine/RenderEngine/NativeGLEngine/CommonMemory/UploadMemoryManager\";\r\nimport { IRenderContext3D } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/IRenderContext3D\";\r\nimport { IRenderQueue } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/IRenderQueue\";\r\nimport { ISortPass } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/ISortPass\";\r\nimport { SingletonList } from \"../../../utils/SingletonList\";\r\nimport { BufferState } from \"../../../webgl/utils/BufferState\";\r\nimport { Camera } from \"../../core/Camera\";\r\nimport { RenderContext3D } from \"../../core/render/RenderContext3D\";\r\nimport { RenderElement } from \"../../core/render/RenderElement\";\r\nimport { RenderElementBatch } from \"../../graphics/Batch/RenderElementBatch\";\r\n\r\n\r\nexport class NativeBaseRenderQueue implements IRenderQueue {\r\n   /** @interanl */\r\n    _isTransparent: boolean = false;\r\n   /** @internal */\r\n   elements: SingletonList<RenderElement> = new SingletonList<RenderElement>();\r\n   /**sort function*/\r\n   _sortPass: ISortPass;\r\n   /** context*/\r\n   _context: IRenderContext3D;\r\n   _batch: RenderElementBatch;\r\n    private _nativeObj: any;\r\n    set sortPass(value: ISortPass) {\r\n        this._nativeObj.sortPass = value;\r\n    }\r\n    constructor(isTransparent: boolean) {\r\n        this._isTransparent = isTransparent;\r\n        this._nativeObj = new (window as any).conchRenderQueue(isTransparent);\r\n \t    this._batch = RenderElementBatch.instance ? RenderElementBatch.instance : new RenderElementBatch();\r\n    }\r\n    destroy(): void {\r\n        this._nativeObj.destroy();\r\n    }\r\n\r\n    set context(value:RenderContext3D){\r\n        this._context = value._contextOBJ;\r\n    }\r\n\r\n    addRenderElement(renderelement: RenderElement) {\r\n        this.elements.add(renderelement);\r\n    }\r\n\r\n    clear(): void {\r\n        this._nativeObj.clear();\r\n        this.elements.length = 0;\r\n    }\r\n\r\n    renderQueue(context:RenderContext3D):number {\r\n        this.context = context;\r\n        this._context.applyContext(Camera._updateMark);\r\n        \r\n        var elements: RenderElement[] = this.elements.elements;\r\n\r\n\t\tthis._batchQueue();\r\n        this._nativeObj.clear();\r\n        for (var i: number = 0, n: number = this.elements.length; i < n; i++){\r\n            var render_element = elements[i];\r\n            this._nativeObj.addRenderElement((render_element._renderElementOBJ as any)._nativeObj, \r\n            (render_element.render.renderNode as any)._nativeObj,\r\n            render_element.material.renderQueue, \r\n            render_element.render.sortingFudge);\r\n            render_element._renderUpdatePre(context);//Update Data\r\n        }\r\n\r\n        UploadMemoryManager.syncRenderMemory();\r\n\r\n        BufferState._curBindedBufferState && BufferState._curBindedBufferState.unBind();\r\n        this._nativeObj.renderQueue((this._context as any)._nativeObj);\r\n        \r\n        this._batch.recoverData();\r\n\r\n        return n;\r\n    }\r\n\r\n    private _batchQueue() {\r\n       this._isTransparent || this._batch.batch(this.elements);\r\n    }\r\n}","import { Matrix4x4 } from \"../../../maths/Matrix4x4\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\nimport { NativeMemory } from \"../../../RenderEngine/RenderEngine/NativeGLEngine/CommonMemory/NativeMemory\";\r\nimport { IClone } from \"../../../utils/IClone\";\r\nimport { BoundBox } from \"../../math/BoundBox\";\r\nimport { Bounds } from \"../../math/Bounds\";\r\n\r\n\r\n\r\nexport class NativeBounds implements IClone {\r\n\r\n    /**native Share Memory */\r\n    static MemoryBlock_size: number = Math.max(6 * 8, 16 * 4);\r\n    /**@internal\t*/\r\n    nativeMemory: NativeMemory;\r\n    /**@internal\t*/\r\n    float32Array: Float32Array;\r\n    /**@internal\t*/\r\n    float64Array: Float64Array;\r\n    /**@internal\t*/\r\n    _nativeObj: any;\r\n    /**@internal\t*/\r\n    _center: Vector3 = new Vector3();\r\n    /**@internal\t*/\r\n    _extent: Vector3 = new Vector3();\r\n    /**@internal */\r\n    private _boundBox: BoundBox = new BoundBox(new Vector3(), new Vector3());\r\n\r\n    get min() {\r\n        return this.getMin();\r\n    }\r\n\r\n    set min(value: Vector3) {\r\n        this.setMin(value);\r\n    }\r\n\r\n    get max() {\r\n        return this.getMax();\r\n    }\r\n\r\n    set max(value: Vector3) {\r\n        this.setMax(value);\r\n    }\r\n\r\n    /**\r\n     * 设置包围盒的最小点。\r\n     * @param value\t包围盒的最小点。\r\n     */\r\n    setMin(value: Vector3): void {\r\n        this.float64Array[0] = value.x;\r\n        this.float64Array[1] = value.y;\r\n        this.float64Array[2] = value.z;\r\n\t\tthis._nativeObj.setMin();\r\n    }\r\n\r\n    /**\r\n     * 获取包围盒的最小点。\r\n     * @return\t包围盒的最小点。\r\n     */\r\n    getMin(): Vector3 {\r\n        var min: Vector3 = this._boundBox.min;\r\n        this._nativeObj.getMin();\r\n        min.x = this.float64Array[0];\r\n        min.y = this.float64Array[1];\r\n        min.z = this.float64Array[2];\r\n        return min;\r\n    }\r\n\r\n    /**\r\n     * 设置包围盒的最大点。\r\n     * @param value\t包围盒的最大点。\r\n     */\r\n    setMax(value: Vector3): void {\r\n        this.float64Array[0] = value.x;\r\n        this.float64Array[1] = value.y;\r\n        this.float64Array[2] = value.z;\r\n\t\tthis._nativeObj.setMax();\r\n    }\r\n\r\n    /**\r\n     * 获取包围盒的最大点。\r\n     * @return\t包围盒的最大点。\r\n     */\r\n    getMax(): Vector3 {\r\n        var max: Vector3 = this._boundBox.max;\r\n        this._nativeObj.getMax();\r\n        max.x = this.float64Array[0];\r\n        max.y = this.float64Array[1];\r\n        max.z = this.float64Array[2];\r\n        return max;\r\n    }\r\n\r\n    /**\r\n     * 设置包围盒的中心点。\r\n     * @param value\t包围盒的中心点。\r\n     */\r\n    setCenter(value: Vector3): void {\r\n        this.float64Array[0] = value.x;\r\n        this.float64Array[1] = value.y;\r\n        this.float64Array[2] = value.z;\r\n\t\tthis._nativeObj.setCenter();\r\n    }\r\n\r\n    /**\r\n     * 获取包围盒的中心点。\r\n     * @return\t包围盒的中心点。\r\n     */\r\n    getCenter(): Vector3 {\r\n        var center: Vector3 = this._center;\r\n        this._nativeObj.getCenter();\r\n        center.x = this.float64Array[0];\r\n        center.y = this.float64Array[1];\r\n        center.z = this.float64Array[2];\r\n        return center;\r\n    }\r\n\r\n    /**\r\n     * 设置包围盒的范围。\r\n     * @param value\t包围盒的范围。\r\n     */\r\n    setExtent(value: Vector3): void {\r\n        this.float64Array[0] = value.x;\r\n        this.float64Array[1] = value.y;\r\n        this.float64Array[2] = value.z;\r\n\t\tthis._nativeObj.setExtent();\r\n    }\r\n\r\n    /**\r\n     * 获取包围盒的范围。\r\n     * @return\t包围盒的范围。\r\n     */\r\n    getExtent(): Vector3 {\r\n        var extent: Vector3 = this._extent;\r\n        this._nativeObj.getExtent();\r\n        extent.x = this.float64Array[0];\r\n        extent.y = this.float64Array[1];\r\n        extent.z = this.float64Array[2];\r\n        return extent;\r\n    }\r\n\r\n    /**\r\n     * 创建一个 <code>Bounds</code> 实例。\r\n     * @param\tmin  min 最小坐标\r\n     * @param\tmax  max 最大坐标。\r\n     */\r\n    constructor(min?: Vector3, max?: Vector3) {\r\n        this.nativeMemory = new NativeMemory(NativeBounds.MemoryBlock_size, true);\r\n        this.float32Array = this.nativeMemory.float32Array;\r\n        this.float64Array = this.nativeMemory.float64Array;\r\n        this._nativeObj = new (window as any).conchBounds(this.nativeMemory._buffer); \r\n        min && this.setMin(min);\r\n        max && this.setMax(max);\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    _tranform(matrix: Matrix4x4, out: NativeBounds): void {\r\n        this.float32Array.set(matrix.elements);\r\n        this._nativeObj._tranform(out._nativeObj);\r\n    }\r\n\r\n    _getBoundBox(): BoundBox {\r\n        this._nativeObj._getBoundBox();\r\n        this._boundBox.min.x = this.float64Array[0];\r\n        this._boundBox.min.y = this.float64Array[1];\r\n        this._boundBox.min.z = this.float64Array[2];\r\n        this._boundBox.max.x = this.float64Array[3];\r\n        this._boundBox.max.y = this.float64Array[4];\r\n        this._boundBox.max.z = this.float64Array[5];\r\n        return this._boundBox;\r\n    }\r\n    /**\r\n     * @returns -1为不相交 不为0的时候返回值为相交体积\r\n     */\r\n    calculateBoundsintersection(bounds: Bounds): number {\r\n        var ownMax: Vector3 = this.getMax();\r\n        var ownMin: Vector3 = this.getMin();\r\n        var calMax: Vector3 = bounds.getMax();\r\n        var calMin: Vector3 = bounds.getMin();\r\n        var tempV0: Vector3 = TEMP_VECTOR3_MAX0;\r\n        var tempV1: Vector3 = TEMP_VECTOR3_MAX1;\r\n        var thisExtends: Vector3 = this.getExtent();\r\n        var boundExtends: Vector3 = bounds.getExtent();\r\n        tempV0.setValue(Math.max(ownMax.x, calMax.x) - Math.min(ownMin.x, calMin.x),\r\n            Math.max(ownMax.y, calMax.y) - Math.min(ownMin.y, calMin.y),\r\n            Math.max(ownMax.z, calMax.z) - Math.min(ownMin.z, calMin.z));\r\n        tempV1.setValue((thisExtends.x + boundExtends.x) * 2.0,\r\n            (thisExtends.y + boundExtends.y) * 2.0,\r\n            (thisExtends.z + boundExtends.z) * 2.0);\r\n        if ((tempV0.x) > (tempV1.x)) return -1;\r\n        if ((tempV0.y) > (tempV1.y)) return -1;\r\n        if ((tempV0.z) > (tempV1.z)) return -1;\r\n        return (tempV1.x - tempV0.x) * (tempV1.y - tempV0.y) * (tempV1.z - tempV0.z);\r\n    }\r\n\r\n\r\n    /**\r\n     * 克隆。\r\n     * @param\tdestObject 克隆源。\r\n     */\r\n    cloneTo(destObject: any): void {\r\n        var destBounds: NativeBounds = (<NativeBounds>destObject);\r\n        this._nativeObj.cloneTo(destBounds._nativeObj);\r\n    }\r\n\r\n    /**\r\n     * 克隆。\r\n     * @return\t 克隆副本。\r\n     */\r\n    clone(): any {\r\n        var dest: NativeBounds = new NativeBounds(new Vector3(), new Vector3());\r\n        this.cloneTo(dest);\r\n        return dest;\r\n    }\r\n\r\n}\r\nconst TEMP_VECTOR3_MAX0 = new Vector3();\r\nconst TEMP_VECTOR3_MAX1 = new Vector3();","import { Vector3 } from \"../../../maths/Vector3\";\r\nimport { NativeMemory } from \"../../../RenderEngine/RenderEngine/NativeGLEngine/CommonMemory/NativeMemory\";\r\nimport { ICameraCullInfo } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/ICameraCullInfo\";\r\nimport { BoundFrustum } from \"../../math/BoundFrustum\";\r\nimport { Plane } from \"../../math/Plane\";\r\n\r\n\r\n/**\r\n * camera裁剪数据\r\n */\r\nexport class NativeCameraCullInfo implements ICameraCullInfo {\r\n\t/**位置 */\r\n\tprivate _position: Vector3;\r\n\r\n\tprivate _useOcclusionCulling: Boolean;\r\n\r\n\tprivate _cullingMask: number;\r\n\t/**静态标记 */\r\n\tprivate _staticMask: number;\r\n\r\n\tprivate _nativeObj: any;\r\n\r\n\tprivate static MemoryBlock_size = 192;\r\n\t/**native Share Memory */\r\n\tprivate nativeMemory: NativeMemory;\r\n\tprivate float64Array: Float64Array;\r\n\r\n\tboundFrustum: BoundFrustum;\r\n\r\n\tconstructor() {\r\n\t\tthis.nativeMemory = new NativeMemory(NativeCameraCullInfo.MemoryBlock_size, true);\r\n\t\tthis.float64Array = this.nativeMemory.float64Array;\r\n\t\tthis._nativeObj = new (window as any).conchCameraCullInfo(this.nativeMemory._buffer);\r\n\t}\r\n\r\n\tset position(position: Vector3) {\r\n\t\tthis._position = position;\r\n\t\tthis._nativeObj.setPosition(position.x, position.y, position.z);\r\n\t}\r\n\r\n\tget position(): Vector3 {\r\n\t\treturn this._position;\r\n\t}\r\n\r\n\tset useOcclusionCulling(useOcclusionCulling: Boolean) {\r\n\t\tthis._useOcclusionCulling = useOcclusionCulling;\r\n\t\tthis._nativeObj.useOcclusionCulling = useOcclusionCulling;\r\n\t}\r\n\r\n\tget useOcclusionCulling(): Boolean {\r\n\t\treturn this._useOcclusionCulling;\r\n\t}\r\n\r\n\tset cullingMask(cullingMask: number) {\r\n\t\tthis._cullingMask = cullingMask;\r\n\t\tthis._nativeObj.cullingMask = cullingMask;\r\n\t}\r\n\r\n\tget cullingMask(): number {\r\n\t\treturn this._cullingMask;\r\n\t}\r\n\r\n\r\n\tset staticMask(value: number) {\r\n\t\tthis._staticMask = value;\r\n\t\tthis._nativeObj.staticMask = value;\r\n\t}\r\n\r\n\tget staticMask(): number {\r\n\t\treturn this._staticMask;\r\n\t}\r\n\t\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tserialize(): void {\r\n\t\tif (this.boundFrustum) {\r\n\t\t\tthis.setPlane(0, this.boundFrustum.near);\r\n\t\t\tthis.setPlane(4, this.boundFrustum.far);\r\n\t\t\tthis.setPlane(8, this.boundFrustum.left);\r\n\t\t\tthis.setPlane(12, this.boundFrustum.right);\r\n\t\t\tthis.setPlane(16, this.boundFrustum.top);\r\n\t\t\tthis.setPlane(20, this.boundFrustum.bottom);\r\n\t\t\tthis._nativeObj.setBoundFrustum();\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tsetPlane(index: number, value: Plane): void {\r\n\t\tthis.float64Array[index] = value.normal.x;\r\n\t\tthis.float64Array[index + 1] = value.normal.y;\r\n\t\tthis.float64Array[index + 2] = value.normal.z;\r\n\t\tthis.float64Array[index + 3] = value.distance;\r\n\t}\r\n}","import { CommandUniformMap } from \"../../../RenderEngine/CommandUniformMap\";\r\n\r\nexport class NativeCommandUniformMap extends CommandUniformMap {\r\n\r\n\tprivate _nativeObj: any;\r\n\r\n    constructor(_nativeObj: any, stateName: string){\r\n        super(stateName);\r\n\t\tthis._nativeObj = _nativeObj;\r\n    }\r\n    hasPtrID(propertyID: number): boolean {\r\n\t\treturn this._nativeObj.hasPtrID(propertyID);\r\n\t}\r\n\r\n\tgetMap() {\r\n\t\treturn this._idata;\r\n\t}\r\n\r\n\t/**\r\n\t * 增加一个UniformMap\r\n\t * @internal\r\n\t * @param propertyID \r\n\t * @param propertyKey \r\n\t */\r\n\taddShaderUniform(propertyID: number, propertyKey: string): void {\r\n\t\tthis._idata[propertyID] = propertyKey;\r\n        this._nativeObj.addShaderUniform(propertyID, propertyKey);\r\n\t}\r\n}","\r\nimport { ICameraCullInfo } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/ICameraCullInfo\";\r\nimport { ICullPass } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/ICullPass\";\r\nimport { ISceneRenderManager } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/ISceneRenderManager\";\r\nimport { IShadowCullInfo } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/IShadowCullInfo\";\r\nimport { SingletonList } from \"../../../utils/SingletonList\";\r\nimport { Stat } from \"../../../utils/Stat\";\r\nimport { BaseRender } from \"../../core/render/BaseRender\";\r\nimport { RenderContext3D } from \"../../core/render/RenderContext3D\";\r\nimport { FrustumCulling } from \"../../graphics/FrustumCulling\";\r\nimport { NativeCameraCullInfo } from \"./NativeCameraCullInfo\";\r\n\r\n\r\nexport class NativeCullPassBase implements ICullPass {\r\n\r\n    private _nativeObj: any;\r\n    private _tempRenderList: SingletonList<BaseRender>;\r\n    get cullList(): SingletonList<BaseRender> {\r\n        this._tempRenderList.elements = this._nativeObj.cullList;\r\n        this._tempRenderList.length = this._nativeObj.cullList.length;\r\n        return this._tempRenderList;\r\n    }\r\n\r\n    constructor() {\r\n        this._nativeObj = new (window as any).conchCullPass();\r\n        this._tempRenderList = new SingletonList<BaseRender>();\r\n    }\r\n\r\n    cullByCameraCullInfo(cameraCullInfo: ICameraCullInfo, renderManager: ISceneRenderManager): void {\r\n        //native Cull \r\n        (cameraCullInfo as NativeCameraCullInfo).serialize();\r\n        Stat.frustumCulling += this._nativeObj.cullByCameraCullInfo((cameraCullInfo as any)._nativeObj, (renderManager as any)._sceneManagerOBJ._nativeObj);\r\n        //Custom list Cull\r\n        var customRenderList = (renderManager as any)._sceneManagerOBJ._customCullList;\r\n        var boundFrustum = cameraCullInfo.boundFrustum;\r\n        var cullMask: number = cameraCullInfo.cullingMask;\r\n        let staticMask = cameraCullInfo.staticMask;\r\n        var renders = customRenderList.elements;\r\n        let context = RenderContext3D._instance;\r\n        for (var i: number = 0, n: number = customRenderList.length; i < n; i++) {\r\n            var render: BaseRender = <BaseRender>renders[i];\r\n            var canPass: boolean;\r\n            canPass = (Math.pow(2, render.renderNode.layer & cullMask) != 0) && render._enabled && (render.renderbitFlag == 0);\r\n            canPass = canPass && (( render.renderNode.staticMask & staticMask) != 0);\r\n            if (canPass) {\r\n                Stat.frustumCulling++;\r\n                if (!cameraCullInfo.useOcclusionCulling || render._needRender(boundFrustum, context)) {\r\n                    this._nativeObj.cullList.push(render);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    cullByShadowCullInfo(cullInfo: IShadowCullInfo, renderManager: ISceneRenderManager): void {\r\n        //native Cull\r\n        //TODO transparent filter\r\n        Stat.frustumCulling += this._nativeObj.cullByShadowCullInfo((cullInfo as any)._nativeObj, (renderManager as any)._sceneManagerOBJ._nativeObj);\r\n        //Custom list Cull\r\n        var customRenderList = (renderManager as any)._sceneManagerOBJ._customCullList;\r\n        var renders = customRenderList.elements;\r\n        for (var i: number = 0, n: number = customRenderList.length; i < n; i++) {\r\n            var render: BaseRender = <BaseRender>renders[i];\r\n            var canPass: boolean = render.castShadow && render._enabled && (render.renderbitFlag == 0);\r\n            if (canPass) {\r\n                Stat.frustumCulling++;\r\n                let pass = FrustumCulling.cullingRenderBounds(render.bounds, cullInfo);\r\n                pass && this._nativeObj.cullList.push(render);\r\n            }\r\n        }\r\n    }\r\n    cullingSpotShadow(cameraCullInfo: ICameraCullInfo, renderManager: ISceneRenderManager): void {\r\n        //native Cull\r\n        (cameraCullInfo as NativeCameraCullInfo).serialize();\r\n        //TODO transparent filter\r\n        Stat.frustumCulling += this._nativeObj.cullingSpotShadow((cameraCullInfo as any)._nativeObj, (renderManager as any)._sceneManagerOBJ._nativeObj);\r\n\r\n        //Custom list Cull\r\n        var customRenderList = (renderManager as any)._sceneManagerOBJ._customCullList;\r\n        var renders = customRenderList.elements;\r\n        let context = RenderContext3D._instance;\r\n        for (var i: number = 0, n: number = customRenderList.length; i < n; i++) {\r\n            var render: BaseRender = <BaseRender>renders[i];\r\n            var canPass: boolean = render.castShadow && render._enabled && (render.renderbitFlag == 0);\r\n            if (canPass) {\r\n                Stat.frustumCulling++;\r\n                var render: BaseRender = <BaseRender>renders[i];\r\n                if (render._needRender(cameraCullInfo.boundFrustum, context))\r\n                    this._nativeObj.cullList.push(render);\r\n            }\r\n        }\r\n    }\r\n\r\n}","import { LayaGL } from \"../../../layagl/LayaGL\";\r\nimport { BufferUsage } from \"../../../RenderEngine/RenderEnum/BufferTargetType\";\r\nimport { IndexFormat } from \"../../../RenderEngine/RenderEnum/IndexFormat\";\r\nimport { IndexBuffer3D } from \"../../graphics/IndexBuffer3D\";\r\n\r\n\r\nexport class NativeIndexBuffer3D extends IndexBuffer3D {\r\n\r\n    _conchIndexBuffer3D:any = null;\r\n\r\n    /**\r\n     * 创建一个 <code>VertexBuffer3D</code> 实例。\r\n     * @param\tbyteLength 字节长度。\r\n     * @param\tbufferUsage VertexBuffer3D用途类型。\r\n     * @param\tcanRead 是否可读。\r\n     */\r\n    constructor(indexType: IndexFormat, indexCount: number, bufferUsage: BufferUsage = BufferUsage.Static, canRead: boolean = false) {\r\n        super(indexType,indexCount,bufferUsage,canRead)\r\n        this._conchIndexBuffer3D = new (window as any).conchIndexBuffer3D( (LayaGL.renderEngine as any)._nativeObj,indexType,indexCount,bufferUsage,false);\r\n        this._conchIndexBuffer3D.setGLBuffer(this._glBuffer);\r\n     }\r\n}","\r\nimport { LayaGL } from \"../../../layagl/LayaGL\";\r\nimport { IBaseRenderNode } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/IBaseRenderNode\";\r\nimport { IRenderContext3D } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/IRenderContext3D\";\r\nimport { IRenderElement } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/IRenderElement\";\r\nimport { IRenderGeometryElement } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/IRenderGeometryElement\";\r\nimport { ShaderInstance } from \"../../../RenderEngine/RenderShader/ShaderInstance\";\r\nimport { SingletonList } from \"../../../utils/SingletonList\";\r\nimport { Transform3D } from \"../../core/Transform3D\";\r\nimport { NativeShaderData } from \"./NativeShaderData\";\r\nexport enum RenderElementType {\r\n    Base = 0,\r\n    Skin = 1,\r\n    Instance = 2,\r\n}\r\nexport class NativeRenderElementOBJ implements IRenderElement {\r\n\r\n    private geometry: IRenderGeometryElement;\r\n\r\n    private materialShaderData: NativeShaderData;\r\n\r\n    private renderShaderData: NativeShaderData;\r\n\r\n    private transform: Transform3D;\r\n\r\n    //private isRender: boolean;\r\n\r\n    private owner: IBaseRenderNode;\r\n\r\n    set _geometry(data: IRenderGeometryElement) {\r\n        this.geometry = data;\r\n        this._nativeObj._geometry = (data as any)._nativeObj;\r\n    }\r\n\r\n    get _geometry(): IRenderGeometryElement {\r\n        return this.geometry;\r\n    }\r\n\r\n    set _materialShaderData(data: NativeShaderData) {\r\n        this.materialShaderData = data;\r\n        this._nativeObj._materialShaderData = data ? (data as any)._nativeObj : null;\r\n    }\r\n\r\n    get _materialShaderData(): NativeShaderData {\r\n        return this.materialShaderData;\r\n    }\r\n\r\n    set _renderShaderData(data: NativeShaderData) {\r\n        this.renderShaderData = data;\r\n        this._nativeObj._renderShaderData = data ? (data as any)._nativeObj : null;\r\n    }\r\n\r\n    get _renderShaderData(): NativeShaderData {\r\n        return this.renderShaderData;\r\n    }\r\n\r\n    set _transform(data: Transform3D) {\r\n        this.transform = data;\r\n        this._nativeObj._transform = data ? (data as any)._nativeObj : null;\r\n    }\r\n\r\n    get _transform(): Transform3D {\r\n        return this.transform;\r\n    }\r\n\r\n    get _isRender(): boolean {\r\n        return this._nativeObj._isRender;\r\n    }\r\n\r\n    set _isRender(data: boolean) {\r\n        this._nativeObj._isRender = data;\r\n    }\r\n\r\n    get _invertFront(): boolean {\r\n        return this._nativeObj._invertFront;\r\n    }\r\n\r\n    set _invertFront(data: boolean) {\r\n        this._nativeObj._invertFront = data;\r\n    }\r\n\r\n    _nativeObj: any;\r\n    _shaderInstances: SingletonList<ShaderInstance>;\r\n    constructor() { \r\n        this._shaderInstances = new SingletonList();\r\n        this.init();\r\n    }\r\n    init(): void {\r\n       \r\n        this._nativeObj = new (window as any).conchRenderElement(RenderElementType.Base, (LayaGL.renderEngine as any)._nativeObj);\r\n    }\r\n\r\n    _owner: IBaseRenderNode;\r\n\r\n    _addShaderInstance(shader: ShaderInstance) {\r\n        this._shaderInstances.add(shader);\r\n        this._nativeObj._addShaderInstance((shader as any)._nativeObj);\r\n    }\r\n\r\n    _clearShaderInstance() {\r\n        this._shaderInstances.length = 0;\r\n        this._nativeObj._clearShaderInstance();\r\n    }\r\n    /**\r\n     * render RenderElement\r\n     * @param renderqueue \r\n     */\r\n    _render(context: IRenderContext3D): void {\r\n        this._nativeObj._render((context as any)._nativeObj);\r\n    }\r\n\r\n    _destroy() {\r\n        this._nativeObj._destroy();\r\n        this.geometry = null;\r\n        this._shaderInstances = null; \r\n        this.materialShaderData = null;\r\n        this.renderShaderData = null;\r\n        this.transform = null;\r\n    }\r\n}","import { Color } from \"../../../maths/Color\";\r\nimport { Matrix4x4 } from \"../../../maths/Matrix4x4\";\r\nimport { Quaternion } from \"../../../maths/Quaternion\";\r\nimport { Vector2 } from \"../../../maths/Vector2\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\nimport { Vector4 } from \"../../../maths/Vector4\";\r\nimport { INativeUploadNode } from \"../../../RenderEngine/RenderEngine/NativeGLEngine/CommonMemory/INativeUploadNode\";\r\nimport { MemoryDataType } from \"../../../RenderEngine/RenderEngine/NativeGLEngine/CommonMemory/MemoryDataType\";\r\nimport { UploadMemory } from \"../../../RenderEngine/RenderEngine/NativeGLEngine/CommonMemory/UploadMemory\";\r\nimport { UploadMemoryManager } from \"../../../RenderEngine/RenderEngine/NativeGLEngine/CommonMemory/UploadMemoryManager\";\r\nimport { ShaderData } from \"../../../RenderEngine/RenderShader/ShaderData\";\r\nimport { BaseTexture } from \"../../../resource/BaseTexture\";\r\nimport { Resource } from \"../../../resource/Resource\";\r\nimport { Texture } from \"../../../resource/Texture\";\r\nimport { Texture2D } from \"../../../resource/Texture2D\";\r\nimport { NativeUniformBufferObject } from \"./NativeUniformBufferObject\";\r\n\r\n\r\nexport enum NativeShaderDataType {\r\n    Number32,\r\n    Vector2,\r\n    Vector3,\r\n    Vector4,\r\n    Matrix4x4,\r\n    Number32Array,\r\n    Texture,\r\n    ShaderDefine,\r\n    UBO,\r\n}\r\n\r\nexport class NativeShaderData extends ShaderData implements INativeUploadNode {\r\n    private inUploadList: boolean = false;\r\n    _dataType: MemoryDataType;\r\n    nativeObjID: number;\r\n    _nativeObj: any;\r\n    updateMap: Map<number, Function>;\r\n    updataSizeMap: Map<number, number>;\r\n    payload32bitNum: number = 0;\r\n    /**\r\n     * @internal\t\r\n     */\r\n    constructor(ownerResource: Resource = null) {\r\n        super(ownerResource)\r\n        this._initData();\r\n        this._nativeObj = new (window as any).conchShaderData();\r\n        this.nativeObjID = this._nativeObj.nativeID;\r\n        this._dataType = MemoryDataType.ShaderData;\r\n        this.updateMap = new Map();\r\n        this.updataSizeMap = new Map();\r\n    }\r\n\r\n    /**\r\n     * @override interface INativeUploadNode\r\n     * @internal\r\n     */\r\n    getUploadMemoryLength(): number {\r\n        let head = 4;//header\r\n        this.updataSizeMap.forEach((value) => {\r\n            this.payload32bitNum += value;\r\n        });\r\n        return (this.payload32bitNum + head) * 4;\r\n    }\r\n\r\n    /**\r\n     * @override interface INativeUploadNode\r\n     * @internal\r\n     * @param memoryBlock \r\n     * @param stride \r\n     */\r\n    uploadDataTOShareMemory(memoryBlock: UploadMemory, strideInByte: number): boolean {\r\n        if (!this._data) {\r\n            return false;\r\n        }\r\n        let array = memoryBlock.int32Array;\r\n        let strideFloat = strideInByte / 4;\r\n        //type\r\n        array[strideFloat++] = MemoryDataType.ShaderData;\r\n        //instanceID\r\n        array[strideFloat++] = this.nativeObjID;\r\n        //dataLength\r\n        array[strideFloat++] = this.payload32bitNum;\r\n        //Shaderdata property change nums\r\n        array[strideFloat++] = this.updateMap.size;\r\n        this.updateMap.forEach((value, key) => {\r\n            strideFloat += value.call(this, key, memoryBlock, strideFloat);\r\n        });\r\n        this.clearUpload();\r\n        this.inUploadList = false;\r\n        return true;\r\n    }\r\n\r\n    clearUpload() {\r\n        this.payload32bitNum = 0;\r\n        this.updataSizeMap.clear();\r\n        this.updateMap.clear();\r\n    }\r\n\r\n    compressNumber(index: number, memoryBlock: UploadMemory, stride: number): number {\r\n        //console.log(\"..index \" + index + \" NativeShaderDataType.Number32 \" + NativeShaderDataType.Number32 + \"stride \" + stride);\r\n        var length = 3;\r\n        memoryBlock.int32Array[stride] = index;\r\n        memoryBlock.int32Array[stride + 1] = NativeShaderDataType.Number32;\r\n        memoryBlock.float32Array[stride + 2] = this._data[index];\r\n        return length;\r\n    }\r\n\r\n    compressVector2(index: number, memoryBlock: UploadMemory, stride: number): number {\r\n        //console.log(\"..index \" + index + \" NativeShaderDataType.Vector2 \" + NativeShaderDataType.Vector2 + \"stride \" + stride);\r\n        var length = 4;\r\n        memoryBlock.int32Array[stride] = index;\r\n        memoryBlock.int32Array[stride + 1] = NativeShaderDataType.Vector2;\r\n        var value: Vector2 = this._data[index];\r\n        memoryBlock.float32Array[stride + 2] = value.x;\r\n        memoryBlock.float32Array[stride + 3] = value.y;\r\n        return length;\r\n    }\r\n\r\n    compressVector3(index: number, memoryBlock: UploadMemory, stride: number): number {\r\n        //console.log(\"..index \" + index + \" NativeShaderDataType.Vector3 \" + NativeShaderDataType.Vector2 + \"stride \" + stride);\r\n        var length = 5;\r\n        memoryBlock.int32Array[stride] = index;\r\n        memoryBlock.int32Array[stride + 1] = NativeShaderDataType.Vector3;\r\n        var value: Vector3 = this._data[index];\r\n        memoryBlock.float32Array[stride + 2] = value.x;\r\n        memoryBlock.float32Array[stride + 3] = value.y;\r\n        memoryBlock.float32Array[stride + 4] = value.z;\r\n        return length;\r\n    }\r\n\r\n    compressVector4(index: number, memoryBlock: UploadMemory, stride: number): number {\r\n        //console.log(\"..index \" + index + \" NativeShaderDataType.Vector4 \" + NativeShaderDataType.Vector4 + \"stride \" + stride);\r\n        var length = 6;\r\n        memoryBlock.int32Array[stride] = index;\r\n        memoryBlock.int32Array[stride + 1] = NativeShaderDataType.Vector4;\r\n        var value: Vector4 = this._data[index];\r\n        memoryBlock.float32Array[stride + 2] = value.x;\r\n        memoryBlock.float32Array[stride + 3] = value.y;\r\n        memoryBlock.float32Array[stride + 4] = value.z;\r\n        memoryBlock.float32Array[stride + 5] = value.w;\r\n        return length;\r\n    }\r\n\r\n    compressMatrix4x4(index: number, memoryBlock: UploadMemory, stride: number): number {\r\n        //console.log(\"..index \" + index + \" NativeShaderDataType.Matrix4x4 \" + NativeShaderDataType.Matrix4x4 + \"stride \" + stride);\r\n        var length = 18;\r\n        memoryBlock.int32Array[stride] = index;\r\n        memoryBlock.int32Array[stride + 1] = NativeShaderDataType.Matrix4x4;\r\n        var value: Matrix4x4 = this._data[index];\r\n        memoryBlock.float32Array.set(value.elements, stride + 2);\r\n        return length;\r\n    }\r\n\r\n    compressNumberArray(index: number, memoryBlock: UploadMemory, stride: number): number {\r\n        //console.log(\"..index \" + index + \" NativeShaderDataType.Number32Array \" + NativeShaderDataType.Number32Array + \"stride \" + stride);\r\n        memoryBlock.int32Array[stride] = index\r\n        memoryBlock.int32Array[stride + 1] = NativeShaderDataType.Number32Array;\r\n        var value: Float32Array = this._data[index];\r\n        memoryBlock.int32Array[stride + 2] = value.length;\r\n        memoryBlock.float32Array.set(value, stride + 3);\r\n        return value.length + 3;\r\n    }\r\n\r\n    compressTexture(index: number, memoryBlock: UploadMemory, stride: number): number {\r\n        //console.log(\"..index \" + index + \" NativeShaderDataType.Texture \" + NativeShaderDataType.Texture + \"stride \" + stride);\r\n        var value: any = this._data[index];\r\n        memoryBlock.int32Array[stride] = index;\r\n        memoryBlock.int32Array[stride + 1] = NativeShaderDataType.Texture;\r\n        if (value && value instanceof Texture) {\r\n            memoryBlock.int32Array[stride + 2] = (value.bitmap._texture as any).id;\r\n        }\r\n        else if (value && value._texture) {\r\n            memoryBlock.int32Array[stride + 2] = (value._texture as any).id;\r\n        }\r\n        else {\r\n            memoryBlock.int32Array[stride + 2] = (Texture2D.errorTexture._texture as any).id;\r\n        }\r\n        return 3;\r\n    }\r\n\r\n    compressUBO(index: number, memoryBlock: UploadMemory, stride: number): number {\r\n        var value:NativeUniformBufferObject = this._data[index];\r\n        memoryBlock.int32Array[stride] = index;\r\n        memoryBlock.int32Array[stride + 1] = NativeShaderDataType.UBO;\r\n        memoryBlock.int32Array[stride + 2] = (value._conchUniformBufferObject as any).nativeID;\r\n        return 3;\r\n    }\r\n\r\n    private configMotionProperty(key: number, length: number, callBack: Function) {\r\n        this.updateMap.set(key, callBack);\r\n        this.updataSizeMap.set(key, length);\r\n        if (!this.inUploadList) {\r\n            this.inUploadList = true;\r\n            UploadMemoryManager.getInstance()._dataNodeList.add(this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 设置布尔。\r\n     * @param\tindex shader索引。\r\n     * @param\tvalue 布尔。\r\n     */\r\n    setBool(index: number, value: boolean): void {\r\n        super.setBool(index, value);\r\n        this.configMotionProperty(index, 3, this.compressNumber);\r\n    }\r\n\r\n    /**\r\n     * 设置整型。\r\n     * @param\tindex shader索引。\r\n     * @param\tvalue 整形。\r\n     */\r\n    setInt(index: number, value: number): void {\r\n        //this._data[index] = value;\r\n        super.setInt(index, value);\r\n        this.configMotionProperty(index, 3, this.compressNumber);\r\n    }\r\n\r\n    /**\r\n     * 设置浮点。\r\n     * @param\tindex shader索引。\r\n     * @param\tvalue 浮点。\r\n     */\r\n    setNumber(index: number, value: number): void {\r\n        super.setNumber(index, value);\r\n        this.configMotionProperty(index, 3, this.compressNumber);\r\n    }\r\n\r\n    /**\r\n     * 设置Vector2向量。\r\n     * @param\tindex shader索引。\r\n     * @param\tvalue Vector2向量。\r\n     */\r\n    setVector2(index: number, value: Vector2): void {\r\n        super.setVector2(index, value);\r\n        this.configMotionProperty(index, 4, this.compressVector2);\r\n    }\r\n\r\n    /**\r\n     * 设置Vector3向量。\r\n     * @param\tindex shader索引。\r\n     * @param\tvalue Vector3向量。\r\n     */\r\n    setVector3(index: number, value: Vector3): void {\r\n        super.setVector3(index, value);\r\n        this.configMotionProperty(index, 5, this.compressVector3);\r\n    }\r\n\r\n    /**\r\n     * 设置向量。\r\n     * @param\tindex shader索引。\r\n     * @param\tvalue 向量。\r\n     */\r\n    setVector(index: number, value: Vector4): void {\r\n        super.setVector(index, value);\r\n        this.configMotionProperty(index, 6, this.compressVector4);\r\n    }\r\n\r\n    /**\r\n     * 设置颜色\r\n     * @param index 索引\r\n     * @param value 颜色值\r\n     */\r\n    setColor(index: number, value: Color): void {\r\n        super.setColor(index, value);\r\n        this.configMotionProperty(index, 6, this.compressVector4);\r\n    }\r\n\r\n    /**\r\n     * 设置矩阵。\r\n     * @param\tindex shader索引。\r\n     * @param\tvalue  矩阵。\r\n     */\r\n    setMatrix4x4(index: number, value: Matrix4x4): void {\r\n        super.setMatrix4x4(index, value);\r\n        this.configMotionProperty(index, 18, this.compressMatrix4x4);\r\n    }\r\n\r\n\r\n    /**\r\n     * 设置Buffer。\r\n     * @param\tindex shader索引。\r\n     * @param\tvalue  buffer数据。\r\n     */\r\n    setBuffer(index: number, value: Float32Array): void {\r\n        super.setBuffer(index, value);\r\n        this.configMotionProperty(index, 3 + value.length, this.compressNumberArray);\r\n    }\r\n\r\n    /**\r\n     * 设置纹理。\r\n     * @param\tindex shader索引。\r\n     * @param\tvalue 纹理。\r\n     */\r\n    setTexture(index: number, value: BaseTexture): void {\r\n        super.setTexture(index, value);\r\n        this.configMotionProperty(index, 3, this.compressTexture);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param index \r\n     * @param value \r\n     */\r\n    setUniformBuffer(index: number, value: NativeUniformBufferObject) {\r\n        this._data[index] = value;\r\n        this.configMotionProperty(index, 3, this.compressUBO);\r\n    }\r\n\r\n    /**\r\n     * set shader data\r\n     * @deprecated\r\n     * @param index uniformID\r\n     * @param value data\r\n     */\r\n    setValueData(index: number, value: any) {\r\n        // if (!!value.clone)\r\n        //     this._data[index] = value.clone();\r\n        // else\r\n        //     this._data[index] = value;\r\n        //有点恶心\r\n        if (typeof value == \"boolean\") {\r\n            this.setBool(index, <boolean>value);\r\n        } else if (typeof value == \"number\") {\r\n            this.setNumber(index, <number>value);\r\n        } else if (value instanceof Color) {\r\n            this.setColor(index, <Color>value);\r\n        } else if (value instanceof Vector2) {\r\n            this.setVector2(index, <Vector2>value);\r\n        } else if (value instanceof Vector3) {\r\n            this.setVector3(index, <Vector3>value);\r\n        } else if (value instanceof Vector4 || value instanceof Quaternion) {\r\n            this.setVector(index, <Vector4>value);\r\n        } else if (value instanceof Matrix4x4) {\r\n            this.setMatrix4x4(index, <Matrix4x4>value);\r\n        } else if (value.ArrayBuffer != null) {\r\n            this.setBuffer(index, value);\r\n        } else if (value._texture != null) {\r\n            this.setTexture(index, value);\r\n        }\r\n    }\r\n\r\n    cloneTo(destObject: NativeShaderData) {\r\n        var dest: NativeShaderData = <NativeShaderData>destObject;\r\n        for (var k in this._data) {//TODO:需要优化,杜绝is判断，慢\r\n            var value: any = this._data[k];\r\n            if (value != null) {\r\n                if (typeof (value) == 'boolean') {\r\n                    destObject.setBool((k as any), value);\r\n                } else if (typeof (value) == 'number') {\r\n                    destObject.setNumber(k as any, <number>value);\r\n                } else if (value instanceof Vector2) {\r\n                    destObject.setVector2(k as any, <Vector2>value);\r\n                } else if (value instanceof Vector3) {\r\n                    destObject.setVector3(k as any, <Vector3>value);\r\n                } else if (value instanceof Vector4) {\r\n                    destObject.setVector(k as any, <Vector4>value);\r\n                } else if (value instanceof Matrix4x4) {\r\n                    destObject.setMatrix4x4(k as any, <Matrix4x4>value);\r\n                } else if (value instanceof BaseTexture) {\r\n                    destObject.setTexture(k as any, value);\r\n                }\r\n            }\r\n        }\r\n        this._defineDatas.cloneTo(dest._defineDatas);\r\n        this._gammaColorMap.forEach((color, index) => {\r\n\t\t    destObject._gammaColorMap.set(index, color.clone());\r\n\t    })\r\n    }\r\n    /**\r\n     * 克隆。\r\n     * @return\t 克隆副本。\r\n     */\r\n    clone(): any {\r\n        var dest: NativeShaderData = new NativeShaderData();\r\n        this.cloneTo(dest);\r\n        return dest;\r\n    }\r\n    destroy(): void {\r\n\t\tsuper.destroy();\r\n        this._nativeObj.destroy();\r\n        this._nativeObj = null;\r\n\t}\r\n}","import { CommandEncoder } from \"../../../layagl/CommandEncoder\";\r\nimport { LayaGL } from \"../../../layagl/LayaGL\";\r\nimport { ShaderDataType, ShaderData } from \"../../../RenderEngine/RenderShader/ShaderData\";\r\nimport { ShaderPass } from \"../../../RenderEngine/RenderShader/ShaderPass\";\r\nimport { SubShader } from \"../../../RenderEngine/RenderShader/SubShader\";\r\nimport { ShaderCompileDefineBase } from \"../../../webgl/utils/ShaderCompileDefineBase\";\r\n\r\n\r\n\r\nenum UniformParamsMapType {\r\n\tScene = 0,\r\n\tCamera,\r\n\tSprite,\r\n\tMaterial,\r\n}\r\n/**\r\n * @internal\r\n * <code>ShaderInstance</code> 类用于实现ShaderInstance。\r\n */\r\nexport class NativeShaderInstance/* extends ShaderInstance */ {\r\n\r\n\t_nativeObj: any;\r\n\r\n\t/**@internal */\r\n\tprivate _shaderPass: ShaderCompileDefineBase | ShaderPass;\r\n\r\n\tconstructor(vs: string, ps: string, attributeMap: { [name: string]: [number, ShaderDataType] }, shaderPass: ShaderCompileDefineBase) {\r\n\t\t//super(vs, ps, attributeMap, shaderPass);\r\n\t\tthis._shaderPass = shaderPass;\r\n\t\tvar pConchAttributeMap: any = new (window as any).conchAttributeMap();\r\n\t\tfor (var k in attributeMap) {\r\n\t\t\tpConchAttributeMap.setAttributeValue(k, attributeMap[k][0]);\r\n\t\t}\r\n\t\t\r\n\t\tvar stateMap: { [stateID: number]: number } = {};\r\n\t\tfor (var s in stateMap) {\r\n\t\t\tpConchAttributeMap.setStateValue(parseInt(s), stateMap[s]);\r\n\t\t}\r\n\t\tpConchAttributeMap.statefirst = (<ShaderPass>this._shaderPass).statefirst;\r\n\t\tvar renderState: any = (<ShaderPass>shaderPass).renderState;\r\n\t\tthis._nativeObj = new (window as any).conchShaderInstance((LayaGL.renderEngine as any)._nativeObj, vs, ps, pConchAttributeMap, renderState._nativeObj);\r\n\t}\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tprotected _disposeResource(): void {\r\n\t\tthis._nativeObj.destroy();\r\n\t}\r\n\r\n\r\n\tbind() {\r\n\t\treturn this._nativeObj.bind();\r\n\t}\r\n\r\n\tuploadUniforms(shaderUniform: CommandEncoder, shaderDatas: ShaderData, uploadUnTexture: boolean) {\r\n\t\tthis._nativeObj.uploadUniforms(shaderUniform, (shaderDatas as any)._nativeObj, uploadUnTexture);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tuploadCustomUniform(index: number, data: any): void {\r\n\t\tthis._nativeObj.uploadCustomUniforms(index, data);\r\n\t}\r\n\tget _sceneUniformParamsMap(): CommandEncoder {\r\n\t\treturn (UniformParamsMapType.Scene as unknown as CommandEncoder);\r\n\t}\r\n\r\n\tget _cameraUniformParamsMap(): CommandEncoder {\r\n\t\treturn (UniformParamsMapType.Camera as unknown as CommandEncoder);\r\n\t}\r\n\r\n\tget _spriteUniformParamsMap(): CommandEncoder {\r\n\t\treturn (UniformParamsMapType.Sprite as unknown as CommandEncoder);\r\n\t}\r\n\r\n\tget _materialUniformParamsMap(): CommandEncoder {\r\n\t\treturn (UniformParamsMapType.Material as unknown as CommandEncoder);\r\n\t}\r\n\r\n\tuploadRenderStateBlendDepth(shaderDatas: ShaderData): void {\r\n\t\tthis._nativeObj.uploadRenderStateBlendDepth((shaderDatas as any)._nativeObj);\r\n\t}\r\n\r\n\tuploadRenderStateFrontFace(shaderDatas: ShaderData, isTarget: boolean, invertFront: boolean): void {\r\n\t\tthis._nativeObj.uploadRenderStateFrontFace((shaderDatas as any)._nativeObj, isTarget, invertFront);\r\n\t}\r\n}\r\n\r\n","\r\nimport { LayaGL } from \"../../../layagl/LayaGL\";\r\nimport { VertexBuffer3D } from \"../../graphics/VertexBuffer3D\";\r\nimport { NativeRenderElementOBJ, RenderElementType } from \"./NativeRenderElementOBJ\";\r\n\r\nexport class NativeInstanceRenderElementOBJ extends NativeRenderElementOBJ {\r\n    /**@internal 当instance数量特别大时可能需要一段一段数据来画,所以需要更新顶点数据*/\r\n    private _vertexBuffer3D: Array<VertexBuffer3D> = [];\r\n\r\n    private _updateData: Array<Float32Array> = [];\r\n\r\n\r\n    private _updateNums: number;\r\n\r\n    /**\r\n     * 增加UpdateBuffer\r\n     * @param vb \r\n     * @param length 每个instance属性的数据长度\r\n     */\r\n    addUpdateBuffer(vb: VertexBuffer3D,length:number) {\r\n        this._vertexBuffer3D[this._updateNums++] = vb;\r\n        this._nativeObj.addUpdateBuffer((vb as any)._conchVertexBuffer3D, length);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param index index of Buffer3D\r\n     * @param length length of array\r\n     */\r\n    getUpdateData(index: number,length:number): Float32Array {\r\n        let data = this._updateData[index];\r\n        if (!data || data.length < length) {\r\n            data = this._updateData[index] = new Float32Array(length);\r\n            this._nativeObj.getUpdateData(index, data);\r\n        }\r\n        return data;\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    clear() {\r\n        this._updateNums = 0;\r\n        this._nativeObj.clear();\r\n    }\r\n\r\n    init(): void {\r\n        this._nativeObj = new (window as any).conchRenderElement(RenderElementType.Instance, (LayaGL.renderEngine as any)._nativeObj);\r\n    }\r\n\r\n    set drawCount(drawCount: number) {\r\n\t\tthis._nativeObj.drawCount = drawCount;\r\n\t} \r\n\r\n\tget drawCount(): number {\r\n\t\treturn this._nativeObj.drawCount;\r\n\t}\r\n}","\r\nimport { LayaGL } from \"../../../layagl/LayaGL\";\r\nimport { Vector4 } from \"../../../maths/Vector4\";\r\nimport { UploadMemoryManager } from \"../../../RenderEngine/RenderEngine/NativeGLEngine/CommonMemory/UploadMemoryManager\";\r\nimport { IRenderTarget } from \"../../../RenderEngine/RenderInterface/IRenderTarget\";\r\nimport { IRenderContext3D, PipelineMode } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/IRenderContext3D\";\r\nimport { ShaderData } from \"../../../RenderEngine/RenderShader/ShaderData\";\r\nimport { Viewport } from \"../../math/Viewport\";\r\nimport { NativeRenderElementOBJ } from \"./NativeRenderElementOBJ\";\r\n\r\nexport class NativeRenderContext3DOBJ implements IRenderContext3D {\r\n\r\n    //dest Texture\r\n    private _destTarget: IRenderTarget;\r\n\r\n    //viewPort\r\n    private _viewPort: Viewport;\r\n    //scissor\r\n    private _scissor: Vector4;\r\n\r\n    private _confifShaderData: ShaderData;\r\n    //Camera Shader Data\r\n    private _cameraShaderData: ShaderData;\r\n    //scene Shader Data\r\n    private _sceneShaderData: ShaderData;\r\n    //Global ShaderData\r\n    private _globalShaderData: ShaderData;\r\n\r\n    private _nativeObj: any;\r\n\r\n    constructor() {\r\n        this._viewPort = new Viewport(0, 0, 0, 0);\r\n        this._scissor = new Vector4();\r\n        this._nativeObj = new (window as any).conchRenderContext3D((LayaGL.renderEngine as any)._nativeObj);\r\n    }\r\n\r\n    drawRenderElement(renderelemt: NativeRenderElementOBJ): void {\r\n        UploadMemoryManager.syncRenderMemory();//同步数据\r\n        renderelemt._render(this);\r\n    }\r\n\r\n    /**设置IRenderContext */\r\n    applyContext(cameraUpdateMark: number): void {\r\n        this._nativeObj.changeViewport(this._viewPort.x, this._viewPort.y, this._viewPort.width, this._viewPort.height);\r\n        this._nativeObj.changeScissor(this._scissor.x, this._scissor.y, this._scissor.z, this._scissor.w);\r\n        this.destTarget && this.destTarget._start();\r\n        this._nativeObj.applyContext(cameraUpdateMark);\r\n    }\r\n    set destTarget(destTarget: IRenderTarget) {\r\n        this._destTarget = destTarget;\r\n        this._nativeObj.destTarget = destTarget ? destTarget._renderTarget : null;\r\n    }\r\n\r\n    get destTarget(): IRenderTarget {\r\n        return this._destTarget;\r\n    }\r\n\r\n    set viewPort(viewPort: Viewport) {\r\n        this._viewPort = viewPort;\r\n        this._nativeObj.changeViewport(viewPort.x, viewPort.y, viewPort.width, viewPort.height)\r\n    }\r\n\r\n    get viewPort(): Viewport {\r\n        return this._viewPort;\r\n    }\r\n\r\n    set scissor(scissor: Vector4) {\r\n        this._scissor = scissor;\r\n        this._nativeObj.changeScissor(scissor.x, scissor.y, scissor.z, scissor.w)\r\n    }\r\n\r\n    get scissor(): Vector4 {\r\n        return this._scissor;\r\n    }\r\n\r\n    set invertY(invertY: boolean) {\r\n        this._nativeObj.invertY = invertY;\r\n    }\r\n\r\n    get invertY(): boolean {\r\n        return this._nativeObj.invertY;\r\n    }\r\n\r\n    set pipelineMode(pipelineMode: PipelineMode) {\r\n        this._nativeObj.pipelineMode = pipelineMode;\r\n    }\r\n\r\n    get pipelineMode(): PipelineMode {\r\n        return this._nativeObj.pipelineMode;\r\n    }\r\n\r\n    get configShaderData(): ShaderData {\r\n        return this._confifShaderData;\r\n    }\r\n\r\n    set configShaderData(value: ShaderData) {\r\n        this._confifShaderData = value;\r\n        this._nativeObj.configShaderData = value ? (value as any)._nativeObj : null;\r\n    }\r\n\r\n    set globalShaderData(globalShaderData: ShaderData) {\r\n        this._globalShaderData = globalShaderData;\r\n        this._nativeObj.globalShaderData = globalShaderData ? (globalShaderData as any)._nativeObj : null;\r\n    }\r\n\r\n    get globalShaderData(): ShaderData {\r\n        return this._globalShaderData;\r\n    }\r\n\r\n    set sceneShaderData(sceneShaderData: ShaderData) {\r\n        this._sceneShaderData = sceneShaderData;\r\n        this._nativeObj.sceneShaderData = sceneShaderData ? (sceneShaderData as any)._nativeObj : null;\r\n    }\r\n\r\n    get sceneShaderData(): ShaderData {\r\n        return this._sceneShaderData;\r\n    }\r\n\r\n    set cameraShaderData(cameraShaderData: ShaderData) {\r\n        this._cameraShaderData = cameraShaderData;\r\n        this._nativeObj.cameraShaderData = cameraShaderData ? (cameraShaderData as any)._nativeObj : null;\r\n    }\r\n\r\n    get cameraShaderData(): ShaderData {\r\n        return this._cameraShaderData;\r\n    }\r\n\r\n    set sceneID(sceneID: number) {\r\n        this._nativeObj.sceneID = sceneID;\r\n    }\r\n\r\n    get sceneID(): number {\r\n        return this._nativeObj.sceneID;\r\n    }\r\n\r\n    set cameraUpdateMark(cameraUpdateMark: number) {\r\n        this._nativeObj.cameraUpdateMark = cameraUpdateMark;\r\n    }\r\n\r\n    get cameraUpdateMark(): number {\r\n        return this._nativeObj.cameraUpdateMark;\r\n    }\r\n\r\n\r\n}","import { DrawType } from \"../../../RenderEngine/RenderEnum/DrawType\";\r\nimport { IndexFormat } from \"../../../RenderEngine/RenderEnum/IndexFormat\";\r\nimport { MeshTopology } from \"../../../RenderEngine/RenderEnum/RenderPologyMode\";\r\nimport { IRenderGeometryElement } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/IRenderGeometryElement\";\r\nimport { SingletonList } from \"../../../utils/SingletonList\";\r\nimport { BufferState } from \"../../../webgl/utils/BufferState\";\r\n\r\n\r\n\r\nexport class NativeRenderGeometryElementOBJ implements IRenderGeometryElement {\r\n  /**@internal */\r\n  private _bufferState: BufferState;\r\n\r\n   /**@internal */\r\n   drawParams: SingletonList<number>;\r\n   \r\n  _nativeObj: any;\r\n\r\n  /**@internal */\r\n  constructor(mode: MeshTopology, drawType: DrawType) {\r\n    this._nativeObj = new (window as any).conchRenderGeometryElement(mode, drawType);\r\n    this.drawParams = new SingletonList();\r\n  }\r\n\r\n  /**@internal */\r\n  setDrawArrayParams(first: number, count: number): void {\r\n    this.drawParams.add(first);\r\n    this.drawParams.add(count);\r\n    this._nativeObj.setDrawArrayParams(first, count);\r\n  }\r\n\r\n  /**@internal */\r\n  setDrawElemenParams(count: number, offset: number): void {\r\n    this.drawParams.add(offset);\r\n    this.drawParams.add(count);\r\n    this._nativeObj.setDrawElemenParams(count, offset);\r\n  }\r\n  \r\n  /**@internal */\r\n  destroy(): void {\r\n    this._nativeObj.destroy();\r\n  }\r\n\r\n  clearRenderParams() {\r\n    this.drawParams.length = 0;\r\n    this._nativeObj.clearRenderParams();\r\n  }\r\n\r\n  set bufferState(value: BufferState) {\r\n    this._bufferState = value;\r\n    if (value) {\r\n      this._nativeObj.bufferState = (value as any)._nativeVertexArrayObject._nativeObj;\r\n    }\r\n    else {\r\n      this._nativeObj.bufferState = null;\r\n    }\r\n  }\r\n\r\n  get bufferState(): BufferState {\r\n    return this._bufferState;\r\n  }\r\n\r\n  set mode(value: MeshTopology) {\r\n    this._nativeObj.mode = value;\r\n  }\r\n\r\n  get mode(): MeshTopology {\r\n    return this._nativeObj.mode;\r\n  }\r\n\r\n  set drawType(value: DrawType) {\r\n    this._nativeObj.drawType = value;\r\n  }\r\n\r\n  get drawType(): DrawType {\r\n    return this._nativeObj.drawType;\r\n  }\r\n\r\n  set instanceCount(value: number) {\r\n    this._nativeObj.instanceCount = value;\r\n  }\r\n\r\n  get instanceCount(): number {\r\n    return this._nativeObj.instanceCount;\r\n  }\r\n\r\n  set indexFormat(value: IndexFormat) {\r\n    this._nativeObj.indexFormat = value;\r\n  }\r\n\r\n  get indexFormat(): IndexFormat {\r\n    return this._nativeObj.indexFormat;\r\n  }\r\n}","import { Vector3 } from \"../../../maths/Vector3\";\r\nimport { Vector4 } from \"../../../maths/Vector4\";\r\n\r\n\r\nexport class NativeRenderState {\r\n\t_nativeObj: any;\r\n\r\n\tset cull(value: number) {\r\n\t\tthis._nativeObj.cull = value;\r\n\t}\r\n\tget cull(): number {\r\n\t\treturn this._nativeObj.cull;\r\n\t}\r\n\r\n\tset blend(value: number) {\r\n\t\tthis._nativeObj.blend = value;\r\n\t}\r\n\tget blend(): number {\r\n\t\treturn this._nativeObj.blend;\r\n\t}\r\n\r\n\tset srcBlend(value: number) {\r\n\t\tthis._nativeObj.srcBlend = value;\r\n\t}\r\n\tget srcBlend(): number {\r\n\t\treturn this._nativeObj.srcBlend;\r\n\t}\r\n\r\n\tset dstBlend(value: number) {\r\n\t\tthis._nativeObj.dstBlend = value;\r\n\t}\r\n\tget dstBlend(): number {\r\n\t\treturn this._nativeObj.dstBlend;\r\n\t}\r\n\t\r\n\tset srcBlendRGB(value: number) {\r\n\t\tthis._nativeObj.srcBlendRGB = value;\r\n\t}\r\n\tget srcBlendRGB(): number {\r\n\t\treturn this._nativeObj.srcBlendRGB;\r\n\t}\r\n\t\r\n\tset dstBlendRGB(value: number) {\r\n\t\tthis._nativeObj.dstBlendRGB = value;\r\n\t}\r\n\tget dstBlendRGB(): number {\r\n\t\treturn this._nativeObj.dstBlendRGB;\r\n\t}\r\n\t\r\n\tset srcBlendAlpha(value: number) {\r\n\t\tthis._nativeObj.srcBlendAlpha = value;\r\n\t}\r\n\tget srcBlendAlpha(): number {\r\n\t\treturn this._nativeObj.srcBlendAlpha;\r\n\t}\r\n\t\r\n\tset dstBlendAlpha(value: number) {\r\n\t\tthis._nativeObj.dstBlendAlpha = value;\r\n\t}\r\n\tget dstBlendAlpha(): number {\r\n\t\treturn this._nativeObj.dstBlendAlpha;\r\n\t}\r\n\t\r\n\tset blendEquation(value: number) {\r\n\t\tthis._nativeObj.blendEquation = value;\r\n\t}\r\n\tget blendEquation(): number {\r\n\t\treturn this._nativeObj.blendEquation;\r\n\t}\r\n\t\r\n\tset blendEquationRGB(value: number) {\r\n\t\tthis._nativeObj.blendEquationRGB = value;\r\n\t}\r\n\tget blendEquationRGB(): number {\r\n\t\treturn this._nativeObj.blendEquationRGB;\r\n\t}\r\n\t\r\n\tset blendEquationAlpha(value: number) {\r\n\t\tthis._nativeObj.blendEquationAlpha = value;\r\n\t}\r\n\tget blendEquationAlpha(): number {\r\n\t\treturn this._nativeObj.blendEquationAlpha;\r\n\t}\r\n\t\r\n\tset depthTest(value: number) {\r\n\t\tthis._nativeObj.depthTest = value;\r\n\t}\r\n\tget depthTest(): number {\r\n\t\treturn this._nativeObj.depthTest;\r\n\t}\r\n\t\r\n\tset depthWrite(value: boolean) {\r\n\t\tthis._nativeObj.depthWrite = value;\r\n\t}\r\n\tget depthWrite(): boolean {\r\n\t\treturn this._nativeObj.depthWrite;\r\n\t}\r\n\t\r\n\tset stencilWrite(value: boolean) {\r\n\t\tthis._nativeObj.stencilWrite = value;\r\n\t}\r\n\tget stencilWrite(): boolean {\r\n\t\treturn this._nativeObj.stencilWrite;\r\n\t}\r\n\t\r\n\tset stencilTest(value: number) {\r\n\t\tthis._nativeObj.stencilTest = value;\r\n\t}\r\n\tget stencilTest(): number {\r\n\t\treturn this._nativeObj.stencilTest;\r\n\t}\r\n\t\r\n\tset stencilRef(value: number) {\r\n\t\tthis._nativeObj.stencilRef = value;\r\n\t}\r\n\tget stencilRef(): number {\r\n\t\treturn this._nativeObj.stencilRef;\r\n\t}\r\n\r\n\tset stencilOp(value: Vector3) {\r\n\t\tthis._nativeObj.setStencilOp(value.x, value.y, value.z);\r\n\t}\r\n\tsetNull():void {\r\n\t\tthis._nativeObj.setNull();\r\n\t}\r\n\tconstructor() {\r\n\t\tthis._nativeObj = new (window as any).conchRenderState();\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { ISceneRenderManager } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/ISceneRenderManager\";\r\nimport { SingletonList } from \"../../../utils/SingletonList\";\r\nimport { BaseRender } from \"../../core/render/BaseRender\";\r\n\r\n\r\n\r\nexport class NativeSceneRenderManager implements ISceneRenderManager {\r\n    /** @internal */\r\n    _renders: SingletonList<BaseRender> = new SingletonList();\r\n    //自定义更新的Bounds渲染节点\r\n    _customUpdateList: SingletonList<BaseRender> = new SingletonList();\r\n    //自定义裁剪的渲染节点\r\n    _customCullList: SingletonList<BaseRender> = new SingletonList();\r\n    private _nativeObj: any;\r\n    constructor() {\r\n        this._nativeObj = new (window as any).conchSceneCullManger();\r\n    }\r\n\r\n    get list() {\r\n        return this._renders;\r\n    }\r\n\r\n    set list(value) {\r\n        this._customCullList.elements = [];\r\n        this._customCullList.length = 0;\r\n        this._nativeObj.clear();  \r\n        this._renders.clear();\r\n        for (let i = 0, len = value.length; i < len; i++) {\r\n            this.addRenderObject((value.elements[i] as BaseRender));\r\n        }\r\n    }\r\n\r\n    addRenderObject(object: BaseRender): void {\r\n        \r\n        this._renders.add(object);\r\n        if (!object._customCull && object.renderNode.geometryBounds) {\r\n            this._nativeObj.addRenderObject((object.renderNode as any)._nativeObj);\r\n        }\r\n        else {\r\n             this._customCullList.add(object);\r\n        }\r\n\r\n    }\r\n\r\n    removeRenderObject(object: BaseRender): void {\r\n        \r\n        if (!object._customCull && object.renderNode.geometryBounds) {\r\n            this._nativeObj.removeRenderObject((object.renderNode as any)._nativeObj);\r\n        }\r\n        else {\r\n            //remove\r\n            let elements = this._customCullList.elements;\r\n            let index = elements.indexOf(object);\r\n            if (index < this._customCullList.length) {\r\n                this._customCullList.length -= 1;\r\n                elements[index] = elements[this._customCullList.length];\r\n            }\r\n        }\r\n        this._renders.remove(object);\r\n        this.removeMotionObject(object);\r\n    }\r\n\r\n    removeMotionObject(object: BaseRender): void {\r\n        \r\n        if (object.renderNode.geometryBounds) {\r\n            //可以在native更新Bounds的渲染节点\r\n            this._nativeObj.removeMotionObject((object.renderNode as any)._nativeObj);\r\n        } else {\r\n            let index = object._motionIndexList;\r\n            if (index != -1) {//remove\r\n                let elements = this._customUpdateList.elements;\r\n                this._customUpdateList.length -= 1;\r\n                elements[length]._motionIndexList = index;\r\n                elements[index] = elements[length];\r\n            }\r\n        }\r\n    }\r\n\r\n    updateMotionObjects(): void {\r\n        \r\n        //update native Motion Node\r\n        this._nativeObj.updateMotionObjects();\r\n\r\n        for (let i = 0; i < this._customUpdateList.length; i++) {\r\n            this._customUpdateList.elements[i].bounds;\r\n            this._customUpdateList.elements[i]._motionIndexList = -1;\r\n        }\r\n        this._customUpdateList.length = 0;\r\n    }\r\n\r\n    addMotionObject(object: BaseRender): void {\r\n        \r\n        if (object.renderNode.geometryBounds) {\r\n            this._nativeObj.addMotionObject((object.renderNode as any)._nativeObj);\r\n        } else {\r\n            if (object._motionIndexList == -1) {\r\n                object._motionIndexList = this._customUpdateList.length;\r\n                this._customUpdateList.add(object);\r\n            }\r\n        }\r\n    }\r\n\r\n    destroy(): void {\r\n        this._nativeObj.destroy(); \r\n        this._renders.destroy();\r\n        //Destroy\r\n        this._customUpdateList.destroy();\r\n        this._customCullList.destroy();\r\n    }\r\n\r\n}","import { Vector3 } from \"../../../maths/Vector3\";\r\nimport { NativeMemory } from \"../../../RenderEngine/RenderEngine/NativeGLEngine/CommonMemory/NativeMemory\";\r\nimport { IShadowCullInfo } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/IShadowCullInfo\";\r\nimport { BoundSphere } from \"../../math/BoundSphere\";\r\nimport { Plane } from \"../../math/Plane\";\r\n\r\n\r\nexport class NativeShadowCullInfo implements IShadowCullInfo {\r\n\r\n    private _position: Vector3;\r\n\r\n\tprivate _cullPlanes: Plane[];\r\n\r\n    private _direction: Vector3;\r\n\r\n    private _nativeObj: any;\r\n\t\r\n\tprivate _cullSphere: BoundSphere;\r\n\r\n\tprivate _cullPlaneCount: number;\r\n\r\n\t/**native Share Memory */\r\n\tstatic MemoryBlock_size: number = 4 * 8;\r\n\r\n\tprivate nativeMemory: NativeMemory;\r\n\t\r\n\tprivate float64Array: Float64Array;\r\n\r\n\tconstructor() {\r\n\t\tthis.nativeMemory = new NativeMemory(NativeShadowCullInfo.MemoryBlock_size, true);\r\n\t\tthis.float64Array = this.nativeMemory.float64Array;\r\n    \tthis._nativeObj = new (window as any).conchShadowCullInfo(this.nativeMemory._buffer);\r\n  \t}\r\n    set cullPlanes(cullPlanes: Plane[]) {\r\n\t\tthis._cullPlanes = cullPlanes;\r\n        this._nativeObj.clearCullPlanes();\r\n        cullPlanes.forEach((element) => {\r\n\t\t\tthis.float64Array[0] = element.normal.x;\r\n        \tthis.float64Array[1] = element.normal.y;\r\n        \tthis.float64Array[2] = element.normal.z;\r\n\t\t\tthis.float64Array[3] = element.distance;\r\n            this._nativeObj.addCullPlane();\r\n        });\r\n\t}\r\n\tget cullPlanes(): Plane[] {\r\n\t\treturn this._cullPlanes;\r\n\t}\r\n    set cullSphere(cullSphere: BoundSphere) {\r\n\t\tthis._cullSphere = cullSphere;\r\n\t\tthis.float64Array[0] = cullSphere.center.x;\r\n        this.float64Array[1] = cullSphere.center.y;\r\n        this.float64Array[2] = cullSphere.center.z;\r\n\t\tthis.float64Array[3] = cullSphere.radius;\r\n\t\tthis._nativeObj.setCullSphere();\r\n\t}\r\n\t\r\n\tget cullSphere(): BoundSphere {\r\n\t\treturn this._cullSphere;\r\n\t}\r\n    set position(position: Vector3) {\r\n\t\tthis._position = position;\r\n\t\tthis.float64Array[0] = position.x;\r\n        this.float64Array[1] = position.y;\r\n        this.float64Array[2] = position.z;\r\n\t\tthis._nativeObj.setPosition();\r\n\t} \r\n\r\n\tget position(): Vector3 {\r\n\t\treturn this._position;\r\n\t}\r\n    set direction(direction: Vector3) {\r\n\t\tthis._direction = direction;\r\n\t\tthis.float64Array[0] = direction.x;\r\n        this.float64Array[1] = direction.y;\r\n        this.float64Array[2] = direction.z;\r\n\t\tthis._nativeObj.setDirection();\r\n\t} \r\n\r\n\tget direction(): Vector3 {\r\n\t\treturn this._direction;\r\n\t}\r\n\r\n    set cullPlaneCount(cullPlaneCount: number) {\r\n\t\tthis._cullPlaneCount = cullPlaneCount;\r\n\t\tthis._nativeObj.cullPlaneCount = cullPlaneCount;\r\n\t} \r\n\r\n\tget cullPlaneCount(): number {\r\n\t\treturn this._cullPlaneCount;\r\n\t}\r\n}","\r\nimport { LayaGL } from \"../../../layagl/LayaGL\";\r\nimport { NativeRenderElementOBJ, RenderElementType } from \"./NativeRenderElementOBJ\";\r\n\r\nexport class NativeSkinRenderElementOBJ extends  NativeRenderElementOBJ {\r\n    \r\n    _skinnedData:Float32Array[];\r\n\r\n    constructor(){\r\n        super();\r\n    }\r\n    get skinnedData():Float32Array[] {\r\n        return this._skinnedData;\r\n    }\r\n    set skinnedData(data:Float32Array[]) {\r\n        this._skinnedData = data;\r\n        this._nativeObj._skinnedData = data;\r\n    }\r\n    init(): void {\r\n        this._nativeObj = new (window as any).conchRenderElement(RenderElementType.Skin, (LayaGL.renderEngine as any)._nativeObj);\r\n    }\r\n}","import { EventDispatcher } from \"../../../events/EventDispatcher\";\r\nimport { Matrix4x4 } from \"../../../maths/Matrix4x4\";\r\nimport { Quaternion } from \"../../../maths/Quaternion\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\nimport { NativeMemory } from \"../../../RenderEngine/RenderEngine/NativeGLEngine/CommonMemory/NativeMemory\";\r\nimport { Sprite3D } from \"../../core/Sprite3D\";\r\nimport { Transform3D } from \"../../core/Transform3D\";\r\n\r\n/**\r\n * <code>Transform3D</code> 类用于实现3D变换。\r\n */\r\nexport class NativeTransform3D  extends Transform3D {\r\n\r\n    static MemoryBlock_size: number = 16 * 4;\r\n\r\n    /**native Share Memory */\r\n    private nativeMemory: NativeMemory;\r\n    private float32Array: Float32Array;\r\n\tprivate float64Array: Float64Array;\r\n    private int32Array: Int32Array;\r\n\tprivate eventDispatcher: EventDispatcher;\r\n    _nativeObj: any;\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tget _isFrontFaceInvert(): boolean {\r\n        return this._nativeObj._isFrontFaceInvert;\r\n\t}\r\n\r\n\t/**\r\n\t * 所属精灵。\r\n\t */\r\n\tget owner(): Sprite3D {\r\n\t\treturn this._owner;\r\n\t}\r\n\r\n\t/**\r\n\t * 局部位置X轴分量。\r\n\t */\r\n\tget localPositionX(): number {\r\n\t\treturn this.localPosition.x;\r\n\t}\r\n\r\n\tset localPositionX(x: number) {\r\n\t\tthis._localPosition.x = x;\r\n\t\tthis.localPosition = this._localPosition;\r\n\t}\r\n\r\n\t/**\r\n\t * 局部位置Y轴分量。\r\n\t */\r\n\tget localPositionY(): number {\r\n\t\treturn this.localPosition.y;\r\n\t}\r\n\r\n\tset localPositionY(y: number) {\r\n\t\tthis._localPosition.y = y;\r\n\t\tthis.localPosition = this._localPosition;\r\n\t}\r\n\r\n\t/**\r\n\t * 局部位置Z轴分量。\r\n\t */\r\n\tget localPositionZ(): number {\r\n\t\treturn this.localPosition.z;\r\n\t}\r\n\r\n\tset localPositionZ(z: number) {\r\n\t\tthis._localPosition.z = z;\r\n\t\tthis.localPosition = this._localPosition;\r\n\t}\r\n\r\n\t/**\r\n\t * 局部位置。\r\n\t */\r\n\tget localPosition(): Vector3 {\r\n        if (this._nativeObj.getLocalPosition()) {\r\n        \tthis._localPosition.x = this.float64Array[0];\r\n       \t \tthis._localPosition.y = this.float64Array[1];\r\n        \tthis._localPosition.z = this.float64Array[2];\r\n\t\t}\r\n\t\treturn this._localPosition;\r\n\t}\r\n\r\n\tset localPosition(value: Vector3) {\r\n        this._localPosition.x = this.float64Array[0] = value.x;\r\n        this._localPosition.y = this.float64Array[1] = value.y;\r\n        this._localPosition.z = this.float64Array[2] = value.z;\r\n\t\tthis._nativeObj.setLocalPosition();\r\n\t}\r\n\r\n\t/**\r\n\t * 局部旋转四元数X分量。\r\n\t */\r\n\tget localRotationX(): number {\r\n\t\treturn this.localRotation.x;\r\n\t}\r\n\r\n\tset localRotationX(x: number) {\r\n\t\tlet rot = this.localRotation;\r\n\t\trot.x = x;\r\n\t\tthis.localRotation = rot;\r\n\t}\r\n\r\n\t/**\r\n\t * 局部旋转四元数Y分量。\r\n\t */\r\n\tget localRotationY(): number {\r\n\t\treturn this.localRotation.y;\r\n\t}\r\n\r\n\tset localRotationY(y: number) {\r\n\t\tlet rot = this.localRotation;\r\n\t\trot.y = y;\r\n\t\tthis.localRotation = rot;\r\n\t}\r\n\r\n\t/**\r\n\t * 局部旋转四元数Z分量。\r\n\t */\r\n\tget localRotationZ(): number {\r\n\t\treturn this.localRotation.z;\r\n\t}\r\n\r\n\tset localRotationZ(z: number) {\r\n\t\tlet rot = this.localRotation;\r\n\t\trot.z = z;\r\n\t\tthis.localRotation = rot;\r\n\t}\r\n\r\n\t/**\r\n\t * 局部旋转四元数W分量。\r\n\t */\r\n\tget localRotationW(): number {\r\n\t\treturn this.localRotation.w;\r\n\t}\r\n\r\n\tset localRotationW(w: number) {\r\n\t\tlet rot = this.localRotation;\r\n\t\trot.w = w;\r\n\t\tthis.localRotation = rot;\r\n\t}\r\n\r\n\t/**\r\n\t * 局部旋转。\r\n\t */\r\n\tget localRotation(): Quaternion {\r\n        if (this._nativeObj.getLocalRotation()) {\r\n        \tthis._localRotation.x = this.float64Array[0];\r\n        \tthis._localRotation.y = this.float64Array[1];\r\n        \tthis._localRotation.z = this.float64Array[2];\r\n        \tthis._localRotation.w = this.float64Array[3];\r\n\t\t}\r\n\t\treturn this._localRotation;\r\n\t}\r\n\r\n\tset localRotation(value: Quaternion) {\r\n        this._localRotation.x = this.float64Array[0] = value.x;\r\n        this._localRotation.y = this.float64Array[1] = value.y;\r\n        this._localRotation.z = this.float64Array[2] = value.z;\r\n        this._localRotation.w = this.float64Array[3] = value.w;\r\n\t\tthis._nativeObj.setLocalRotation();\r\n\t}\r\n\r\n\t/**\r\n\t * 局部缩放X。\r\n\t */\r\n\tget localScaleX(): number {\r\n\t\treturn this.localScale.x;\r\n\t}\r\n\r\n\tset localScaleX(value: number) {\r\n\t\tthis._localScale.x = value;\r\n\t\tthis.localScale = this._localScale;\r\n\t}\r\n\r\n\t/**\r\n\t * 局部缩放Y。\r\n\t */\r\n\tget localScaleY(): number {\r\n\t\treturn this.localScale.y;\r\n\t}\r\n\r\n\tset localScaleY(value: number) {\r\n\t\tthis._localScale.y = value;\r\n\t\tthis.localScale = this._localScale;\r\n\t}\r\n\r\n\t/**\r\n\t * 局部缩放Z。\r\n\t */\r\n\tget localScaleZ(): number {\r\n\t\treturn this.localScale.z;\r\n\t}\r\n\r\n\tset localScaleZ(value: number) {\r\n\t\tthis._localScale.z = value;\r\n\t\tthis.localScale = this._localScale;\r\n\t}\r\n\r\n\t/**\r\n\t * 局部缩放。\r\n\t */\r\n\tget localScale(): Vector3 {\r\n        if (this._nativeObj.getLocalScale())\r\n\t\t{\r\n        \tthis._localScale.x = this.float64Array[0];\r\n        \tthis._localScale.y = this.float64Array[1];\r\n        \tthis._localScale.z = this.float64Array[2];\r\n\t\t}\r\n\t\treturn this._localScale;\r\n\t}\r\n\r\n\tset localScale(value: Vector3) {\r\n\t\tthis._localScale.x = this.float64Array[0] = value.x;\r\n        this._localScale.y = this.float64Array[1] = value.y;\r\n        this._localScale.z = this.float64Array[2] = value.z;\r\n\t\tthis._nativeObj.setLocalScale();\r\n\t}\r\n\r\n\t/**\r\n\t * 局部空间的X轴欧拉角。\r\n\t */\r\n\tget localRotationEulerX(): number {\r\n\t\treturn this.localRotationEuler.x;\r\n\t}\r\n\r\n\tset localRotationEulerX(value: number) {\r\n\t\tlet rot = this.localRotationEuler;\r\n\t\trot.x = value;\r\n\t\tthis.localRotationEuler = rot;\r\n\t}\r\n\r\n\t/**\r\n\t * 局部空间的Y轴欧拉角。\r\n\t */\r\n\tget localRotationEulerY(): number {\r\n\t\treturn this.localRotationEuler.y;\r\n\t}\r\n\r\n\tset localRotationEulerY(value: number) {\r\n\t\tlet rot = this.localRotationEuler;\r\n\t\trot.y = value;\r\n\t\tthis.localRotationEuler = rot;\r\n\t}\r\n\r\n\t/**\r\n\t * 局部空间的Z轴欧拉角。\r\n\t */\r\n\tget localRotationEulerZ(): number {\r\n\t\treturn this.localRotationEuler.z;\r\n\t}\r\n\r\n\tset localRotationEulerZ(value: number) {\r\n\t\tlet rot = this.localRotationEuler;\r\n\t\trot.z = value;\r\n\t\tthis.localRotationEuler = rot;\r\n\t}                                                                                                      \r\n\r\n\t/**\r\n\t * 局部空间欧拉角。\r\n\t */\r\n\tget localRotationEuler(): Vector3 {\r\n\t\tif (this._nativeObj.getLocalRotationEuler()) {\r\n        \tthis._localRotationEuler.x = this.float64Array[0];\r\n       \t \tthis._localRotationEuler.y = this.float64Array[1];\r\n        \tthis._localRotationEuler.z = this.float64Array[2];\r\n\t\t}\r\n\t\treturn this._localRotationEuler;\r\n\t}\r\n\r\n\tset localRotationEuler(value: Vector3) {\r\n\t\tthis._localRotationEuler.x = this.float64Array[0] = value.x;\r\n        this._localRotationEuler.y = this.float64Array[1] = value.y;\r\n        this._localRotationEuler.z = this.float64Array[2] = value.z;\r\n\t\tthis._nativeObj.setLocalRotationEuler();\r\n\t}\r\n\r\n\t/**\r\n\t * 局部矩阵。\r\n\t */\r\n\tget localMatrix(): Matrix4x4 {\r\n        if (this._nativeObj.getLocalMatrix()) {\r\n        \tfor (var i = 0; i < 16; ++i) {\r\n\t\t\t\tthis._localMatrix.elements[i] = this.float32Array[i];\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this._localMatrix;\r\n\t}\r\n\r\n\tset localMatrix(value: Matrix4x4) {\r\n\t\tif (this._localMatrix !== value)\r\n\t\t\tvalue.cloneTo(this._localMatrix);\r\n        this.float32Array.set(value.elements);\r\n\t\tthis._nativeObj.setLocalMatrix();\r\n\t}\r\n\r\n\t/**\r\n\t * 世界位置。\r\n\t */\r\n\tget position(): Vector3 {  \r\n        if (this._nativeObj.getPosition()) {\r\n        \tthis._position.x = this.float64Array[0];\r\n        \tthis._position.y = this.float64Array[1];\r\n        \tthis._position.z = this.float64Array[2];\r\n\t\t}\r\n\t\treturn this._position;\r\n\t}\r\n\r\n\tset position(value: Vector3) {\r\n        this._position.x = this.float64Array[0] = value.x;\r\n        this._position.y = this.float64Array[1] = value.y;\r\n        this._position.z = this.float64Array[2] = value.z;\r\n\t\tthis._nativeObj.setPosition();\r\n\t}\r\n\r\n\t/**\r\n\t * 世界旋转。\r\n\t */\r\n\tget rotation(): Quaternion {\r\n\t\tif (this._nativeObj.getRotation()) {\r\n        \tthis._rotation.x = this.float64Array[0];\r\n        \tthis._rotation.y = this.float64Array[1];\r\n        \tthis._rotation.z = this.float64Array[2];\r\n        \tthis._rotation.w = this.float64Array[3];\r\n\t\t}\r\n\t\treturn this._rotation;\r\n\t}\r\n\r\n\tset rotation(value: Quaternion) {\r\n        this._rotation.x = this.float64Array[0] = value.x;\r\n        this._rotation.y = this.float64Array[1] = value.y;\r\n        this._rotation.z = this.float64Array[2] = value.z;\r\n        this._rotation.w = this.float64Array[3] = value.w;\r\n\t\tthis._nativeObj.setRotation();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * 世界空间的旋转角度，顺序为x、y、z。\r\n\t */\r\n\tget rotationEuler(): Vector3 {\r\n\t\tif (this._nativeObj.getRotationEuler()) {\r\n        \tthis._rotationEuler.x = this.float64Array[0];\r\n        \tthis._rotationEuler.y = this.float64Array[1];\r\n        \tthis._rotationEuler.z = this.float64Array[2];\r\n\t\t}\r\n\t\treturn this._rotationEuler;\r\n\t}\r\n\r\n\tset rotationEuler(value: Vector3) {\r\n\t\tthis._rotationEuler.x = this.float64Array[0] = value.x;\r\n        this._rotationEuler.y = this.float64Array[1] = value.y;\r\n        this._rotationEuler.z = this.float64Array[2] = value.z;\r\n\t\tthis._nativeObj.setRotationEuler();\r\n\t}\r\n\r\n\t/**\r\n\t * 世界矩阵。\r\n\t */\r\n\tget worldMatrix(): Matrix4x4 {\r\n\t\tif (this._nativeObj.getWorldMatrix()) {\r\n        \tfor (var i = 0; i < 16; i++) {\r\n\t\t\t\tthis._worldMatrix.elements[i] = this.float32Array[i];\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this._worldMatrix;\r\n\t}\r\n\r\n\tset worldMatrix(value: Matrix4x4) {\r\n\t\tif (this._worldMatrix !== value)\r\n\t\t\tvalue.cloneTo(this._worldMatrix);\r\n        this.float32Array.set(value.elements);\r\n\t\tthis._nativeObj.setWorldMatrix();\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>Transform3D</code> 实例。\r\n\t * @param owner 所属精灵。\r\n\t */\r\n\tconstructor(owner: Sprite3D) {\r\n\t\tsuper(owner);\r\n        //native memory\r\n        this.nativeMemory = new NativeMemory(NativeTransform3D.MemoryBlock_size, true);\r\n        this.float32Array = this.nativeMemory.float32Array;\r\n\t\tthis.float64Array = this.nativeMemory.float64Array;\r\n        this.int32Array = this.nativeMemory.int32Array;\r\n\t\tthis.eventDispatcher = new EventDispatcher();\r\n        this._nativeObj = new (window as any).conchTransform(this.nativeMemory._buffer, this.eventDispatcher.event.bind(this.eventDispatcher));\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t _setTransformFlag(type: number, value: boolean): void {\r\n\t\tthis._nativeObj && this._nativeObj._setTransformFlag(type, value);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_getTransformFlag(type: number): boolean {\r\n\t\treturn this._nativeObj._getTransformFlag(type);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_setParent(value: Transform3D): void {\r\n\t\tsuper._setParent(value);\r\n        this._nativeObj.setParent(value ? (value as any)._nativeObj : null);\r\n\t}\r\n\r\n\t/**\r\n\t * 平移变换。\r\n\t * @param \ttranslation 移动距离。\r\n\t * @param \tisLocal 是否局部空间。\r\n\t */\r\n\ttranslate(translation: Vector3, isLocal: boolean = true): void {\r\n\t\tthis.float64Array[0] = translation.x;\r\n        this.float64Array[1] = translation.y;\r\n        this.float64Array[2] = translation.z;\r\n        this.int32Array[6] = isLocal ? 1 : 0;\r\n\t\tthis._nativeObj.translate();\r\n\t}\r\n\r\n\t/**\r\n\t * 旋转变换。\r\n\t * @param \trotations 旋转幅度。\r\n\t * @param \tisLocal 是否局部空间。\r\n\t * @param \tisRadian 是否弧度制。\r\n\t */\r\n\trotate(rotation: Vector3, isLocal: boolean = true, isRadian: boolean = true): void {\r\n\t\tthis.float64Array[0] = rotation.x;\r\n        this.float64Array[1] = rotation.y;\r\n        this.float64Array[2] = rotation.z;\r\n        this.int32Array[6] = isLocal ? 1 : 0;\r\n        this.int32Array[7] = isRadian ? 1 : 0;\r\n\t\tthis._nativeObj.rotate();\r\n\t}\r\n\r\n\t/**\r\n\t * 获取向前方向。\r\n\t * @param forward 前方向。\r\n\t */\r\n\tgetForward(forward: Vector3): void {\r\n\t\tvar worldMatElem: Float32Array = this.worldMatrix.elements;\r\n\t\tforward.x = -worldMatElem[8];\r\n\t\tforward.y = -worldMatElem[9];\r\n\t\tforward.z = -worldMatElem[10];\r\n\t}\r\n\r\n\t/**\r\n\t * 获取向上方向。\r\n\t * @param up 上方向。\r\n\t */\r\n\tgetUp(up: Vector3): void {\r\n\t\tvar worldMatElem: Float32Array = this.worldMatrix.elements;\r\n\t\tup.x = worldMatElem[4];\r\n\t\tup.y = worldMatElem[5];\r\n\t\tup.z = worldMatElem[6];\r\n\t}\r\n\r\n\t/**\r\n\t * 获取向右方向。\r\n\t * @param 右方向。\r\n\t */\r\n\tgetRight(right: Vector3): void {\r\n\t\tvar worldMatElem: Float32Array = this.worldMatrix.elements;\r\n\t\tright.x = worldMatElem[0];\r\n\t\tright.y = worldMatElem[1];\r\n\t\tright.z = worldMatElem[2];\r\n\t}\r\n\r\n\t/**\r\n\t * 观察目标位置。\r\n\t * @param\ttarget 观察目标。\r\n\t * @param\tup 向上向量。\r\n\t * @param\tisLocal 是否局部空间。\r\n\t */\r\n\tlookAt(target: Vector3, up: Vector3, isLocal: boolean = false,isCamera:boolean = true): void {\r\n\t\tthis.float64Array[0] = target.x;\r\n        this.float64Array[1] = target.y;\r\n        this.float64Array[2] = target.z;\r\n        this.float64Array[3] = up.x;\r\n        this.float64Array[4] = up.y;\r\n        this.float64Array[5] = up.z;\r\n        this.int32Array[12] = isLocal ? 1 : 0;\r\n        this.int32Array[13] = isCamera ? 1 : 0;\r\n\t\tthis._nativeObj.lookAt();\r\n\t}\r\n\r\n\t/**\r\n\t * 对象朝向目标\r\n\t * @param target \r\n\t * @param up \r\n\t * @param isLocal \r\n\t */\r\n\tobjLookat(target: Vector3, up: Vector3, isLocal: boolean = false):void{\r\n\r\n\t}\r\n\r\n\t\r\n\r\n\t/**\r\n\t * 世界缩放。\r\n\t * 某种条件下获取该值可能不正确（例如：父节点有缩放，子节点有旋转），缩放会倾斜，无法使用Vector3正确表示,必须使用Matrix3x3矩阵才能正确表示。\r\n\t * @return\t世界缩放。\r\n\t */\r\n\tgetWorldLossyScale(): Vector3 {\r\n        if (this._nativeObj.getWorldLossyScale()) {\r\n        \tthis._scale.x = this.float64Array[0];\r\n        \tthis._scale.y = this.float64Array[1];\r\n        \tthis._scale.z = this.float64Array[2];\r\n\t\t}\r\n\t\treturn this._scale;\r\n\t}\r\n\r\n\t/**\r\n\t * 设置世界缩放。\r\n\t * 某种条件下设置该值可能不正确（例如：父节点有缩放，子节点有旋转），缩放会倾斜，无法使用Vector3正确表示,必须使用Matrix3x3矩阵才能正确表示。\r\n\t * @return\t世界缩放。\r\n\t */\r\n\tsetWorldLossyScale(value: Vector3) {\r\n\t\tthis._scale.x = this.float64Array[0] = value.x;\r\n        this._scale.y = this.float64Array[1] = value.y;\r\n        this._scale.z = this.float64Array[2] = value.z;\r\n\t\tthis._nativeObj.setWorldLossyScale();\r\n\t}\r\n\thasListener(type: string): boolean {\r\n        return this.eventDispatcher.hasListener(type);\r\n    }\r\n\r\n    event(type: string, data?: any): boolean {\r\n        return this.eventDispatcher.event(type, data);\r\n    }\r\n\r\n    on(type: string, listener: Function): EventDispatcher;\r\n    on(type: string, caller: any, listener: Function, args?: any[]): EventDispatcher;\r\n    on(type: string, caller: any, listener?: Function, args?: any[]): EventDispatcher {\r\n\t\tif (arguments.length == 2) {\r\n            listener = caller;\r\n            caller = null;\r\n        }\r\n\t\treturn this.eventDispatcher.on(type, caller, listener, args);\r\n    }\r\n\r\n    once(type: string, listener: Function): EventDispatcher;\r\n    once(type: string, caller: any, listener: Function, args?: any[]): EventDispatcher;\r\n    once(type: string, caller: any, listener?: Function, args?: any[]): EventDispatcher {\r\n\t\tif (arguments.length == 2) {\r\n            listener = caller;\r\n            caller = null;\r\n        }\r\n\t\treturn this.eventDispatcher.once(type, caller, listener, args);\r\n    }\r\n\r\n    off(type: string, listener: Function): EventDispatcher;\r\n    off(type: string, caller: any, listener?: Function, args?: any[]): EventDispatcher;\r\n    off(type: string, caller: any, listener?: Function): EventDispatcher {\r\n\t\tif (arguments.length == 2) {\r\n            listener = caller;\r\n            caller = null;\r\n        }\r\n\t\treturn this.eventDispatcher.off(type, caller, listener);\r\n    }\r\n\r\n    offAll(type?: string): EventDispatcher {\r\n        return this.eventDispatcher.offAll(type);\r\n    }\r\n\r\n    offAllCaller(caller: any): EventDispatcher {\r\n        return this.eventDispatcher.offAllCaller(caller);\r\n    }\r\n}\r\n\r\n\r\n","import { LayaGL } from \"../../../layagl/LayaGL\";\r\nimport { BufferUsage } from \"../../../RenderEngine/RenderEnum/BufferTargetType\";\r\nimport { UniformBufferObject } from \"../../../RenderEngine/UniformBufferObject\";\r\n\r\n\r\nexport class NativeUniformBufferObject extends UniformBufferObject{\r\n    _conchUniformBufferObject:any = null;\r\n\r\n    constructor(glPointer: number, name: string, bufferUsage: BufferUsage, byteLength: number, isSingle: boolean) {\r\n        super(glPointer, name, bufferUsage, byteLength, isSingle);\r\n        this._conchUniformBufferObject = new (window as any).conchUniformBufferObject((LayaGL.renderEngine as any)._nativeObj, glPointer);\r\n        this._conchUniformBufferObject.setGLBuffer(this._glBuffer);\r\n    }\r\n}","import { LayaGL } from \"../../../layagl/LayaGL\";\r\nimport { BufferUsage } from \"../../../RenderEngine/RenderEnum/BufferTargetType\";\r\nimport { VertexDeclaration } from \"../../../RenderEngine/VertexDeclaration\";\r\nimport { VertexBuffer3D } from \"../../graphics/VertexBuffer3D\";\r\n\r\n\r\nexport class NativeVertexBuffer3D extends VertexBuffer3D {\r\n\r\n\r\n    _conchVertexBuffer3D:any = null;\r\n\r\n    /**\r\n     * 获取顶点声明。\r\n     */\r\n    get vertexDeclaration(): VertexDeclaration | null {\r\n        return this._vertexDeclaration;\r\n    }\r\n\r\n    set vertexDeclaration(value: VertexDeclaration | null) {\r\n        this._vertexDeclaration = value;\r\n        this._conchVertexBuffer3D.setVertexDeclaration( this.serilizeVertexDeclaration(value) );\r\n    }\r\n\r\n    serilizeVertexDeclaration(value: VertexDeclaration): Int32Array {\r\n        let array = new Int32Array(value._vertexElements.length * 6);\r\n        let offset = 0;\r\n        var valueData: any = value._shaderValues;\r\n        for (var k in valueData) {\r\n            var loc: number = parseInt(k);\r\n            var attribute: Int32Array = valueData[k];\r\n            array[offset++] = loc;\r\n            array.set(attribute, offset);\r\n            offset += 5;\r\n        }\r\n        return array;\r\n    }\r\n\r\n    get instanceBuffer(): boolean {\r\n\t\treturn this._conchVertexBuffer3D._instanceBuffer;\r\n\t}\r\n\r\n\tset instanceBuffer(value: boolean) {\r\n\t\tthis._conchVertexBuffer3D._instanceBuffer = value;\r\n\t}\r\n    /**\r\n     * 创建一个 <code>VertexBuffer3D</code> 实例。\r\n     * @param\tbyteLength 字节长度。\r\n     * @param\tbufferUsage VertexBuffer3D用途类型。\r\n     * @param\tcanRead 是否可读。\r\n     */\r\n    constructor(byteLength: number, bufferUsage: BufferUsage, canRead: boolean = false) {\r\n        super(byteLength, bufferUsage, canRead);\r\n        this._conchVertexBuffer3D = new (window as any).conchVertexBuffer3D( (LayaGL.renderEngine as any)._nativeObj,byteLength,bufferUsage,false);\r\n        this._conchVertexBuffer3D.setGLBuffer(this._glBuffer);\r\n    }\r\n}","import { Vector3 } from \"../../../maths/Vector3\";\r\nimport { NativeRenderStateCommand } from \"../../../RenderEngine/RenderEngine/NativeGLEngine/NativeRenderStateCommand\";\r\nimport { BufferUsage } from \"../../../RenderEngine/RenderEnum/BufferTargetType\";\r\nimport { DrawType } from \"../../../RenderEngine/RenderEnum/DrawType\";\r\nimport { IndexFormat } from \"../../../RenderEngine/RenderEnum/IndexFormat\";\r\nimport { MeshTopology } from \"../../../RenderEngine/RenderEnum/RenderPologyMode\";\r\nimport { IRenderOBJCreate } from \"../../../RenderEngine/RenderInterface/IRenderOBJCreate\";\r\nimport { IBaseRenderNode } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/IBaseRenderNode\";\r\nimport { ICameraCullInfo } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/ICameraCullInfo\";\r\nimport { ICullPass } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/ICullPass\";\r\nimport { IRenderContext3D } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/IRenderContext3D\";\r\nimport { IRenderElement } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/IRenderElement\";\r\nimport { IRenderGeometryElement } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/IRenderGeometryElement\";\r\nimport { IRenderQueue } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/IRenderQueue\";\r\nimport { ISceneRenderManager } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/ISceneRenderManager\";\r\nimport { IShadowCullInfo } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/IShadowCullInfo\";\r\nimport { ISortPass } from \"../../../RenderEngine/RenderInterface/RenderPipelineInterface/ISortPass\";\r\nimport { RenderState } from \"../../../RenderEngine/RenderShader/RenderState\";\r\nimport { ShaderData, ShaderDataType } from \"../../../RenderEngine/RenderShader/ShaderData\";\r\nimport { ShaderInstance } from \"../../../RenderEngine/RenderShader/ShaderInstance\";\r\nimport { UniformBufferObject } from \"../../../RenderEngine/UniformBufferObject\";\r\nimport { ShaderCompileDefineBase } from \"../../../webgl/utils/ShaderCompileDefineBase\";\r\nimport { Sprite3D } from \"../../core/Sprite3D\";\r\nimport { Transform3D } from \"../../core/Transform3D\";\r\nimport { IndexBuffer3D } from \"../../graphics/IndexBuffer3D\";\r\nimport { NativeBaseRenderNode } from \"./NativeBaseRenderNode\";\r\nimport { NativeBaseRenderQueue } from \"./NativeBaseRenderQueue\";\r\nimport { NativeBounds } from \"./NativeBounds\";\r\nimport { NativeCameraCullInfo } from \"./NativeCameraCullInfo\";\r\nimport { NativeCommandUniformMap } from \"./NativeCommandUniformMap\";\r\nimport { NativeCullPassBase } from \"./NativeCullPass\";\r\nimport { NativeIndexBuffer3D } from \"./NativeIndexBuffer3D\";\r\nimport { NativeInstanceRenderElementOBJ } from \"./NativeInstanceRenderElementOBJ\";\r\nimport { NativeRenderContext3DOBJ } from \"./NativeRenderContext3DOBJ\";\r\nimport { NativeRenderElementOBJ } from \"./NativeRenderElementOBJ\";\r\nimport { NativeRenderGeometryElementOBJ } from \"./NativeRenderGeometryElementOBJ\";\r\nimport { NativeRenderState } from \"./NativeRenderState\";\r\nimport { NativeSceneRenderManager } from \"./NativeSceneRenderManager\";\r\nimport { NativeShaderData } from \"./NativeShaderData\";\r\nimport { NativeShaderInstance } from \"./NativeShaderInstance\";\r\nimport { NativeShadowCullInfo } from \"./NativeShadowCullInfo\";\r\nimport { NativeSkinRenderElementOBJ } from \"./NativeSkinRenderElementOBJ\";\r\nimport { NativeTransform3D } from \"./NativeTransform3D\";\r\nimport { NativeUniformBufferObject } from \"./NativeUniformBufferObject\";\r\nimport { NativeVertexBuffer3D } from \"./NativeVertexBuffer3D\";\r\n\r\n\r\nexport class NativeRenderOBJCreateUtil implements IRenderOBJCreate {\r\n\r\n    createTransform(owner: Sprite3D): Transform3D {\r\n        return new NativeTransform3D(owner);\r\n    }\r\n\r\n    createBounds(min: Vector3, max: Vector3): any {\r\n        return new NativeBounds(min, max);\r\n    }\r\n\r\n    createShaderData(): ShaderData {\r\n        return new NativeShaderData();\r\n    }\r\n\r\n    createRenderElement(): IRenderElement {\r\n        return new NativeRenderElementOBJ();\r\n    }\r\n    createSkinRenderElement(): IRenderElement {\r\n        return new NativeSkinRenderElementOBJ();\r\n    }\r\n    createInstanceRenderElement(): IRenderElement {\r\n        return new NativeInstanceRenderElementOBJ();\r\n    }\r\n    createBaseRenderQueue(isTransparent: boolean): IRenderQueue {\r\n        var queue: NativeBaseRenderQueue = new NativeBaseRenderQueue(isTransparent);\r\n        queue.sortPass = this.createSortPass();\r\n        return queue;\r\n    }\r\n\r\n    createRenderGeometry(mode: MeshTopology, drayType: DrawType): IRenderGeometryElement {\r\n        return new NativeRenderGeometryElementOBJ(mode, drayType);\r\n    }\r\n\r\n    createVertexBuffer3D(byteLength: number, bufferUsage: BufferUsage, canRead: boolean = false) {\r\n        return new NativeVertexBuffer3D(byteLength, bufferUsage, canRead);\r\n    }\r\n\r\n    createIndexBuffer3D(indexType: IndexFormat, indexCount: number, bufferUsage: BufferUsage = BufferUsage.Static, canRead: boolean = false): IndexBuffer3D {\r\n        return new NativeIndexBuffer3D(indexType, indexCount, bufferUsage, canRead);\r\n    }\r\n\r\n    createShaderInstance(vs: string, ps: string, attributeMap: { [name: string]: [number, ShaderDataType] }, shaderPass: ShaderCompileDefineBase): ShaderInstance {\r\n        return new NativeShaderInstance(vs, ps, attributeMap, shaderPass) as unknown as ShaderInstance;\r\n    }\r\n\r\n    createBaseRenderNode(): IBaseRenderNode {\r\n        return new NativeBaseRenderNode();\r\n    }\r\n\r\n    createRenderContext3D(): IRenderContext3D {\r\n        return new NativeRenderContext3DOBJ();\r\n    }\r\n\r\n    createSceneRenderManager(): ISceneRenderManager {\r\n        return new NativeSceneRenderManager();\r\n    }\r\n\r\n    createCullPass(): ICullPass {\r\n        return new NativeCullPassBase();\r\n    }\r\n\r\n    createSortPass(): ISortPass {\r\n        return new (window as any).conchQuickSort();\r\n    }\r\n\r\n    createShadowCullInfo(): IShadowCullInfo {\r\n        return new NativeShadowCullInfo();\r\n    }\r\n\r\n    createCameraCullInfo(): ICameraCullInfo {\r\n        return new NativeCameraCullInfo();\r\n    }\r\n\r\n    createRenderStateComand(): NativeRenderStateCommand {\r\n        return new NativeRenderStateCommand();\r\n    }\r\n    createRenderState(): RenderState {\r\n        return new NativeRenderState() as unknown as RenderState;\r\n    }\r\n\r\n    createUniformBufferObject(glPointer: number, name: string, bufferUsage: BufferUsage, byteLength: number, isSingle: boolean): UniformBufferObject {\r\n        return new NativeUniformBufferObject(glPointer, name, bufferUsage, byteLength, isSingle);\r\n    }\r\n\r\n    createGlobalUniformMap(blockName: string): NativeCommandUniformMap{\r\n        return new NativeCommandUniformMap((window as any).conchCommandUniformMap.createGlobalUniformMap(blockName), blockName);\r\n    }\r\n}","import { Config3D } from \"./Config3D\";\r\nimport { ILaya3D } from \"./ILaya3D\";\r\nimport { Laya } from \"./Laya\";\r\nimport { PostProcess } from \"./laya/d3/component/PostProcess\";\r\nimport { BlinnPhongMaterial } from \"./laya/d3/core/material/BlinnPhongMaterial\";\r\nimport { Material } from \"./laya/d3/core/material/Material\";\r\nimport { PBRMaterial } from \"./laya/d3/core/material/PBRMaterial\";\r\nimport { PBRStandardMaterial } from \"./laya/d3/core/material/PBRStandardMaterial\";\r\nimport { SkyBoxMaterial } from \"./laya/d3/core/material/SkyBoxMaterial\";\r\nimport { SkyProceduralMaterial } from \"./laya/d3/core/material/SkyProceduralMaterial\";\r\nimport { UnlitMaterial } from \"./laya/d3/core/material/UnlitMaterial\";\r\nimport { MeshRenderer } from \"./laya/d3/core/MeshRenderer\";\r\nimport { MeshSprite3D } from \"./laya/d3/core/MeshSprite3D\";\r\nimport { ShuriKenParticle3D } from \"./laya/d3/core/particleShuriKen/ShuriKenParticle3D\";\r\nimport { ShurikenParticleMaterial } from \"./laya/d3/core/particleShuriKen/ShurikenParticleMaterial\";\r\nimport { PixelLineVertex } from \"./laya/d3/core/pixelLine/PixelLineVertex\";\r\nimport { Command } from \"./laya/d3/core/render/command/Command\";\r\nimport { RenderContext3D } from \"./laya/d3/core/render/RenderContext3D\";\r\nimport { ScreenQuad } from \"./laya/d3/core/render/ScreenQuad\";\r\nimport { RenderableSprite3D } from \"./laya/d3/core/RenderableSprite3D\";\r\nimport { Scene3D } from \"./laya/d3/core/scene/Scene3D\";\r\nimport { SkinnedMeshSprite3D } from \"./laya/d3/core/SkinnedMeshSprite3D\";\r\nimport { Sprite3D } from \"./laya/d3/core/Sprite3D\";\r\nimport { TrailMaterial } from \"./laya/d3/core/trail/TrailMaterial\";\r\nimport { TrailSprite3D } from \"./laya/d3/core/trail/TrailSprite3D\";\r\nimport { VertexTrail } from \"./laya/d3/core/trail/VertexTrail\";\r\nimport { FrustumCulling } from \"./laya/d3/graphics/FrustumCulling\";\r\nimport { SubMeshInstanceBatch } from \"./laya/d3/graphics/SubMeshInstanceBatch\";\r\nimport { VertexPositionTerrain } from \"./laya/d3/graphics/Vertex/VertexPositionTerrain\";\r\nimport { VertexPositionTexture0 } from \"./laya/d3/graphics/Vertex/VertexPositionTexture0\";\r\nimport { VertexShurikenParticleBillboard } from \"./laya/d3/graphics/Vertex/VertexShurikenParticleBillboard\";\r\nimport { VertexShurikenParticleMesh } from \"./laya/d3/graphics/Vertex/VertexShurikenParticleMesh\";\r\nimport { BulletInteractive } from \"./laya/d3/physics/BulletInteractive\";\r\nimport { Mesh } from \"./laya/d3/resource/models/Mesh\";\r\nimport { PrimitiveMesh } from \"./laya/d3/resource/models/PrimitiveMesh\";\r\nimport { SkyBox } from \"./laya/d3/resource/models/SkyBox\";\r\nimport { SkyDome } from \"./laya/d3/resource/models/SkyDome\";\r\nimport { TextureCube } from \"./laya/resource/TextureCube\";\r\nimport { ShaderInit3D } from \"./laya/d3/shader/ShaderInit3D\";\r\nimport { LayaGL } from \"./laya/layagl/LayaGL\";\r\nimport { Render } from \"./laya/renders/Render\";\r\nimport { Texture2D } from \"./laya/resource/Texture2D\";\r\nimport { Handler } from \"./laya/utils/Handler\";\r\nimport { RunDriver } from \"./laya/utils/RunDriver\";\r\nimport { WebGL } from \"./laya/webgl/WebGL\";\r\nimport { ShadowUtils } from \"./laya/d3/core/light/ShadowUtils\";\r\nimport { ShadowCasterPass } from \"./laya/d3/shadowMap/ShadowCasterPass\";\r\nimport { SimpleSkinnedMeshSprite3D } from \"./laya/d3/core/SimpleSkinnedMeshSprite3D\";\r\nimport { HalfFloatUtils } from \"./laya/utils/HalfFloatUtils\";\r\nimport { Physics3D } from \"./laya/d3/Physics3D\";\r\nimport { Camera } from \"./laya/d3/core/Camera\";\r\nimport { BaseCamera } from \"./laya/d3/core/BaseCamera\";\r\nimport { ShuriKenParticle3DShaderDeclaration } from \"./laya/d3/core/particleShuriKen/ShuriKenParticle3DShaderDeclaration\";\r\nimport { BaseRender } from \"./laya/d3/core/render/BaseRender\";\r\nimport { TrailFilter } from \"./laya/d3/core/trail/TrailFilter\";\r\nimport { DepthPass } from \"./laya/d3/depthMap/DepthPass\";\r\nimport { RenderCapable } from \"./laya/RenderEngine/RenderEnum/RenderCapable\";\r\nimport { BlitFrameBufferCMD } from \"./laya/d3/core/render/command/BlitFrameBufferCMD\";\r\nimport { SkyRenderer } from \"./laya/d3/resource/models/SkyRenderer\";\r\nimport { SkyPanoramicMaterial } from \"./laya/d3/core/material/SkyPanoramicMaterial\";\r\nimport { BloomEffect } from \"./laya/d3/core/render/PostEffect/BloomEffect\";\r\nimport { ScalableAO } from \"./laya/d3/core/render/PostEffect/ScalableAO\";\r\nimport { GaussianDoF } from \"./laya/d3/core/render/PostEffect/GaussianDoF\";\r\nimport { LayaEnv } from \"./LayaEnv\";\r\nimport { SkinnedMeshRenderer } from \"./laya/d3/core/SkinnedMeshRenderer\";\r\nimport { RenderOBJCreateUtil } from \"./laya/d3/RenderObjs/RenderObj/RenderOBJCreateUtil\";\r\nimport { NativeRenderOBJCreateUtil } from \"./laya/d3/RenderObjs/NativeOBJ/NativeRenderOBJCreateUtil\";\r\nimport { SubShader } from \"./laya/RenderEngine/RenderShader/SubShader\";\r\nimport { VertexMesh } from \"./laya/RenderEngine/RenderShader/VertexMesh\";\r\nimport { RenderTexture } from \"./laya/resource/RenderTexture\";\r\nimport { ColorGradEffect } from \"./laya/d3/core/render/PostEffect/ColorGradEffect\";\r\n\r\n/**\r\n * <code>Laya3D</code> 类用于初始化3D设置。\r\n */\r\nexport class Laya3D {\r\n\r\n    /**\r\n     * 获取是否可以启用物理。\r\n     * @param 是否启用物理。\r\n     */\r\n    static get enablePhysics(): any {\r\n        return Physics3D._enablePhysics;\r\n    }\r\n\r\n    /**\r\n     *@internal\r\n     */\r\n    static _changeWebGLSize(width: number, height: number): void {\r\n        WebGL.onStageResize(width, height);\r\n        RenderContext3D.clientWidth = width;\r\n        RenderContext3D.clientHeight = height;\r\n    }\r\n\r\n    /**\r\n     *@internal\r\n     */\r\n    static __init__(checkPhysics?: boolean): Promise<void> {\r\n        if (checkPhysics !== false) {\r\n            let physics3D: Function = (window as any).Physics3D;\r\n            if (physics3D == null)\r\n                Physics3D._enablePhysics = false;\r\n            else {\r\n                Physics3D._enablePhysics = true;\r\n                //physics3D返回的可能不是正经的promise，所以包一下\r\n                return new Promise<void>(resolve => {\r\n                    physics3D(Math.max(16, Config3D.defaultPhysicsMemory) * 16, new BulletInteractive(null, null)).then(() => {\r\n                        Laya3D.__init__(false).then(resolve);\r\n                    });\r\n                });\r\n            }\r\n        }\r\n\r\n        Laya3D.createRenderObjInit();\r\n        // if (LayaEnv.isConch && !(window as any).conchConfig.conchWebGL) {\r\n        //     var skinnedMeshRender: any = SkinnedMeshRenderer;\r\n        //     skinnedMeshRender.prototype._computeSkinnedData = skinnedMeshRender.prototype._computeSkinnedDataForNative;\r\n        // }\r\n        Config3D._multiLighting = Config3D.enableMultiLight && LayaGL.renderEngine.getCapable(RenderCapable.TextureFormat_R32G32B32A32);\r\n        Config3D._uniformBlock = Config3D.enableUniformBufferObject && LayaGL.renderEngine.getCapable(RenderCapable.UnifromBufferObject);\r\n\r\n        if (Config3D.maxLightCount > 2048) {\r\n            Config3D.maxLightCount = 2048;\r\n            console.warn(\"Config3D: maxLightCount must less equal 2048.\");\r\n        }\r\n\r\n        let lcc = Config3D.lightClusterCount;\r\n        if (lcc.x > 128 || lcc.y > 128 || lcc.z > 128) {\r\n            lcc.setValue(Math.min(lcc.x, 128), Math.min(lcc.y, 128), Math.min(lcc.z, 128));\r\n            console.warn(\"Config3D: lightClusterCount X and Y、Z must less equal 128.\");\r\n        }\r\n\r\n        let maxAreaLightCountWithZ = Math.floor(2048 / Config3D.lightClusterCount.z - 1) * 4;\r\n        if (maxAreaLightCountWithZ < Config3D.maxLightCount)\r\n            console.warn(\"Config3D: if the area light(PointLight、SpotLight) count is large than \" + maxAreaLightCountWithZ + \",maybe the far away culster will ingonre some light.\");\r\n        Config3D._maxAreaLightCountPerClusterAverage = Math.min(maxAreaLightCountWithZ, Config3D.maxLightCount);\r\n\r\n        ILaya3D.Scene3D = Scene3D;\r\n        ILaya3D.Laya3D = Laya3D;\r\n        ILaya3D.Physics3D = Physics3D;\r\n\r\n        Physics3D.__bulletinit__();\r\n        SubShader.__init__();\r\n        VertexMesh.__init__();\r\n        VertexShurikenParticleBillboard.__init__();\r\n        VertexShurikenParticleMesh.__init__();\r\n        VertexPositionTexture0.__init__();\r\n        VertexTrail.__init__();\r\n        VertexPositionTerrain.__init__();\r\n        PixelLineVertex.__init__();\r\n        SubMeshInstanceBatch.__init__();\r\n        ShaderInit3D.__init__();\r\n        ShuriKenParticle3DShaderDeclaration.__init__();\r\n        SimpleSkinnedMeshSprite3D.__init__();\r\n        PBRMaterial.__init__();\r\n        PBRStandardMaterial.__init__();\r\n        SkyPanoramicMaterial.__init__();\r\n        BloomEffect.init();\r\n        ScalableAO.init();\r\n        GaussianDoF.init();\r\n        ColorGradEffect.init();\r\n\r\n        Mesh.__init__();\r\n        PrimitiveMesh.__init__();\r\n        Sprite3D.__init__();\r\n        RenderableSprite3D.__init__();\r\n        MeshSprite3D.__init__();\r\n        DepthPass.__init__();\r\n        SkinnedMeshSprite3D.__init__();\r\n        SimpleSkinnedMeshSprite3D.__init__();\r\n        TrailFilter.__init__();\r\n        ShuriKenParticle3D.__init__();\r\n        TrailSprite3D.__init__();\r\n        PostProcess.__init__();\r\n        Scene3D.__init__();\r\n        ShadowCasterPass.__init__();\r\n        BaseCamera.__init__();\r\n        BaseRender.__init__();\r\n        MeshRenderer.__init__();\r\n        SkyRenderer.__init__();\r\n        Camera.__init__();\r\n        ShadowUtils.init();\r\n        RenderContext3D.__init__();\r\n        RenderTexture.configRenderContextInstance(RenderContext3D._instance);\r\n        Material.__initDefine__();\r\n        BlinnPhongMaterial.__initDefine__();\r\n        // PBRStandardMaterial.__initDefine__();\r\n        // PBRSpecularMaterial.__initDefine__();\r\n        SkyProceduralMaterial.__initDefine__();\r\n        UnlitMaterial.__initDefine__();\r\n        TrailMaterial.__initDefine__();\r\n\r\n        // EffectMaterial.__initDefine__();\r\n        // WaterPrimaryMaterial.__initDefine__();\r\n        ShurikenParticleMaterial.__initDefine__();\r\n        // ExtendTerrainMaterial.__initDefine__();\r\n        // PixelLineMaterial.__initDefine__();\r\n        SkyBoxMaterial.__initDefine__();\r\n        // BloomEffect.__init__();\r\n\r\n        Command.__init__();\r\n        BlitFrameBufferCMD.__init__();\r\n\r\n        // PixelLineMaterial.defaultMaterial = new PixelLineMaterial();\r\n        BlinnPhongMaterial.defaultMaterial = new BlinnPhongMaterial();\r\n        BlinnPhongMaterial.defaultMaterial.lock = true;\r\n        // EffectMaterial.defaultMaterial = new EffectMaterial();\r\n        // PBRStandardMaterial.defaultMaterial = new PBRStandardMaterial();\r\n        // PBRSpecularMaterial.defaultMaterial = new PBRSpecularMaterial();\r\n        // UnlitMaterial.defaultMaterial = new UnlitMaterial();\r\n        // ShurikenParticleMaterial.defaultMaterial = new ShurikenParticleMaterial();\r\n        // TrailMaterial.defaultMaterial = new TrailMaterial();\r\n        // SkyProceduralMaterial.defaultMaterial = new SkyProceduralMaterial();\r\n        // SkyBoxMaterial.defaultMaterial = new SkyBoxMaterial();\r\n        // WaterPrimaryMaterial.defaultMaterial = new WaterPrimaryMaterial();\r\n\r\n        // PixelLineMaterial.defaultMaterial.lock = true;//todo:\r\n        // BlinnPhongMaterial.defaultMaterial.lock = true;\r\n        // EffectMaterial.defaultMaterial.lock = true;\r\n        // // PBRStandardMaterial.defaultMaterial.lock = true;\r\n        // // PBRSpecularMaterial.defaultMaterial.lock = true;\r\n        // // UnlitMaterial.defaultMaterial.lock = true;\r\n        // ShurikenParticleMaterial.defaultMaterial.lock = true;\r\n        // TrailMaterial.defaultMaterial.lock = true;\r\n        // SkyProceduralMaterial.defaultMaterial.lock = true;\r\n        // SkyBoxMaterial.defaultMaterial.lock = true;\r\n        // WaterPrimaryMaterial.defaultMaterial.lock = true;\r\n        Texture2D.__init__();\r\n        TextureCube.__init__();\r\n        SkyBox.__init__();\r\n        SkyDome.__init__();\r\n        ScreenQuad.__init__();\r\n        FrustumCulling.__init__();\r\n        HalfFloatUtils.__init__();\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    /**\r\n     * 初始化Laya3D相关设置。\r\n     * @deprecated use Laya.init instead.\r\n     */\r\n    static init(width: number, height: number, config: any = null, complete: Handler = null): void {\r\n        Laya.init(width, height).then(() => {\r\n            complete && complete.run();\r\n        });\r\n    }\r\n\r\n    static createRenderObjInit() {\r\n        if (LayaEnv.isConch && !(window as any).conchConfig.conchWebGL) {\r\n            LayaGL.renderEngine._renderOBJCreateContext = new NativeRenderOBJCreateUtil();\r\n            LayaGL.renderOBJCreate = LayaGL.renderEngine.getCreateRenderOBJContext();\r\n        } else {\r\n            LayaGL.renderEngine._renderOBJCreateContext = new RenderOBJCreateUtil();\r\n            LayaGL.renderOBJCreate = LayaGL.renderEngine.getCreateRenderOBJContext();\r\n        }\r\n\r\n    }\r\n}\r\n\r\n(window as any).Laya3D = Laya3D;\r\n\r\n","/**\r\n\t * <code>Rand</code> 类用于通过128位整型种子创建随机数,算法来自:https://github.com/AndreasMadsen/xorshift。\r\n\t */\r\nexport class RandX {\r\n\t/**@internal */\r\n\tprivate static _CONVERTION_BUFFER: DataView = new DataView(new ArrayBuffer(8));\r\n\r\n\t/**@internal */\r\n\tprivate _state0U: number;\r\n\t/**@internal */\r\n\tprivate _state0L: number;\r\n\t/**@internal */\r\n\tprivate _state1U: number;\r\n\t/**@internal */\r\n\tprivate _state1L: number;\r\n\r\n\t/**基于时间种子的随机数。*/\r\n\tstatic defaultRand: RandX = new RandX([0, Date.now() / 65536, 0, Date.now() % 65536]);\r\n\r\n\t/**\r\n\t * 创建一个 <code>Rand</code> 实例。\r\n\t * @param\tseed  随机种子。\r\n\t */\r\n\tconstructor(seed: any[]) {\r\n\t\tif (!(seed instanceof Array) || seed.length !== 4)\r\n\t\t\tthrow new Error('Rand:Seed must be an array with 4 numbers');\r\n\r\n\t\tthis._state0U = seed[0] | 0;\r\n\t\tthis._state0L = seed[1] | 0;\r\n\t\tthis._state1U = seed[2] | 0;\r\n\t\tthis._state1L = seed[3] | 0;\r\n\t}\r\n\r\n\t/**\r\n\t * 通过2x32位的数组，返回64位的随机数。\r\n\t * @return 64位的随机数。\r\n\t */\r\n\trandomint(): any[] {\r\n\t\t// uint64_t s1 = s[0]\r\n\t\tvar s1U: number = this._state0U, s1L: number = this._state0L;\r\n\t\t// uint64_t s0 = s[1]\r\n\t\tvar s0U: number = this._state1U, s0L: number = this._state1L;\r\n\r\n\t\t// result = s0 + s1\r\n\t\tvar sumL: number = (s0L >>> 0) + (s1L >>> 0);\r\n\t\tvar resU: number = (s0U + s1U + (sumL / 2 >>> 31)) >>> 0;\r\n\t\tvar resL: number = sumL >>> 0;\r\n\r\n\t\t// s[0] = s0\r\n\t\tthis._state0U = s0U;\r\n\t\tthis._state0L = s0L;\r\n\r\n\t\t// - t1 = [0, 0]\r\n\t\tvar t1U: number = 0, t1L: number = 0;\r\n\t\t// - t2 = [0, 0]\r\n\t\tvar t2U: number = 0, t2L: number = 0;\r\n\r\n\t\t// s1 ^= s1 << 23;\r\n\t\t// :: t1 = s1 << 23\r\n\t\tvar a1: number = 23;\r\n\t\tvar m1: number = 0xFFFFFFFF << (32 - a1);\r\n\t\tt1U = (s1U << a1) | ((s1L & m1) >>> (32 - a1));\r\n\t\tt1L = s1L << a1;\r\n\t\t// :: s1 = s1 ^ t1\r\n\t\ts1U = s1U ^ t1U;\r\n\t\ts1L = s1L ^ t1L;\r\n\r\n\t\t// t1 = ( s1 ^ s0 ^ ( s1 >> 17 ) ^ ( s0 >> 26 ) )\r\n\t\t// :: t1 = s1 ^ s0\r\n\t\tt1U = s1U ^ s0U;\r\n\t\tt1L = s1L ^ s0L;\r\n\t\t// :: t2 = s1 >> 18\r\n\t\tvar a2: number = 18;\r\n\t\tvar m2: number = 0xFFFFFFFF >>> (32 - a2);\r\n\t\tt2U = s1U >>> a2;\r\n\t\tt2L = (s1L >>> a2) | ((s1U & m2) << (32 - a2));\r\n\t\t// :: t1 = t1 ^ t2\r\n\t\tt1U = t1U ^ t2U;\r\n\t\tt1L = t1L ^ t2L;\r\n\t\t// :: t2 = s0 >> 5\r\n\t\tvar a3: number = 5;\r\n\t\tvar m3: number = 0xFFFFFFFF >>> (32 - a3);\r\n\t\tt2U = s0U >>> a3;\r\n\t\tt2L = (s0L >>> a3) | ((s0U & m3) << (32 - a3));\r\n\t\t// :: t1 = t1 ^ t2\r\n\t\tt1U = t1U ^ t2U;\r\n\t\tt1L = t1L ^ t2L;\r\n\r\n\t\t// s[1] = t1\r\n\t\tthis._state1U = t1U;\r\n\t\tthis._state1L = t1L;\r\n\r\n\t\t// return result\r\n\t\treturn [resU, resL];\r\n\t}\r\n\r\n\t/**\r\n\t * 返回[0,1)之间的随机数。\r\n\t * @return\r\n\t */\r\n\trandom(): number {\r\n\t\t// :: t2 = randomint()\r\n\t\tvar t2: any[] = this.randomint();\r\n\t\tvar t2U: number = t2[0];\r\n\t\tvar t2L: number = t2[1];\r\n\r\n\t\t// :: e = UINT64_C(0x3FF) << 52\r\n\t\tvar eU: number = 0x3FF << (52 - 32);\r\n\t\tvar eL: number = 0;\r\n\r\n\t\t// :: s = t2 >> 12\r\n\t\tvar a1: number = 12;\r\n\t\tvar m1: number = 0xFFFFFFFF >>> (32 - a1);\r\n\t\tvar sU: number = t2U >>> a1;\r\n\t\tvar sL: number = (t2L >>> a1) | ((t2U & m1) << (32 - a1));\r\n\r\n\t\t// :: x = e | s\r\n\t\tvar xU: number = eU | sU;\r\n\t\tvar xL: number = eL | sL;\r\n\r\n\t\t// :: double d = *((double *)&x)\r\n\t\tRandX._CONVERTION_BUFFER.setUint32(0, xU, false);\r\n\t\tRandX._CONVERTION_BUFFER.setUint32(4, xL, false);\r\n\t\tvar d: number = RandX._CONVERTION_BUFFER.getFloat64(0, false);\r\n\r\n\t\t// :: d - 1\r\n\t\treturn d - 1;\r\n\t}\r\n}\r\n\r\n\r\n","import { RenderContext3D } from \"../core/render/RenderContext3D\"\r\n\t/**\r\n\t * \r\n\t */\r\n\texport class Size {\r\n\t\t/**\r\n\t\t * 全局场景的屏幕大小\r\n\t\t */\r\n\t\t static get fullScreen():Size {\r\n\t\t\treturn new Size(-1, -1);\r\n\t\t}\r\n\t\t\r\n\t\tprivate _width:number = 0;\r\n\t\tprivate _height:number = 0;\r\n\t\t\r\n\t\t/**\r\n\t\t * 宽度\r\n\t\t */\r\n\t\tget width():number {\r\n\t\t\tif (this._width === -1)\r\n\t\t\t\treturn RenderContext3D.clientWidth;\r\n\t\t\t\r\n\t\t\treturn this._width;\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 高度\r\n\t\t */\r\n\t\tget height():number {\r\n\t\t\tif (this._height === -1)\r\n\t\t\t\treturn RenderContext3D.clientHeight;\r\n\t\t\treturn this._height;\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 创建Size实例\r\n\t\t * @param width 宽度 \r\n\t\t * @param height 高度\r\n\t\t */\r\n\t\tconstructor(width:number, height:number){\r\n\t\t\tthis._width = width;\r\n\t\t\tthis._height = height;\r\n\t\t}\r\n\t\r\n\t}\r\n\r\n\r\n","import { RenderTargetFormat } from \"../../../RenderEngine/RenderEnum/RenderTargetFormat\";\r\nimport { RenderTexture } from \"../../../resource/RenderTexture\";\r\nimport { WebXRExperienceHelper } from \"./WebXRExperienceHelper\";\r\n\r\n\r\n/**\r\n * @author miner\r\n * 类用来创建WebXRRenderTexture\r\n */\r\nexport class WebXRRenderTexture extends RenderTexture {\r\n\r\n\t/** @internal */\r\n\tprotected _frameBuffer: any;\r\n\t/**update mask */\r\n\tpublic frameLoop: number = -1;\r\n\r\n\t/**\r\n\t * 创建WebXRFrameBuffer\r\n\t * @param frameBuffer \r\n\t */\r\n\tconstructor() {\r\n\t\tsuper(1, 1, 1, RenderTargetFormat.STENCIL_8, false, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * set frameBuffer\r\n\t */\r\n\tset frameBuffer(value: any) {\r\n\t\tthis._frameBuffer = value;\r\n\t}\r\n\r\n\t/**\r\n\t * No glframeBuffer create\r\n\t * @param width \r\n\t * @param height \r\n\t */\r\n\tprotected _create(width: number, height: number): void {\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_start(): void {\r\n\t\tvar gl: WebGLRenderingContext =  WebXRExperienceHelper.glInstance;\r\n\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, this._frameBuffer);\r\n\t\tRenderTexture._currentActive = this;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_end(): void {\r\n\t\tvar gl: WebGLRenderingContext = WebXRExperienceHelper.glInstance;\r\n\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n\t\tRenderTexture._currentActive = null;\r\n\t}\r\n\r\n}","import { ILaya } from \"../../../../ILaya\";\r\nimport { EventDispatcher } from \"../../../events/EventDispatcher\";\r\n\r\n/**\r\n * Manages an XRSession to work with layaAir engine\r\n * @author miner\r\n */\r\nexport class WebXRSessionManager extends EventDispatcher {\r\n\r\n    static EVENT_MANAGER_END:string = \"xrManagerDestory\";\r\n    static EVENT_FRAME_LOOP:string = \"xrFrameLoop\";\r\n\r\n    \r\n    /**\r\n     * Underlying xr session\r\n     */\r\n    public session: any//: \r\n    /**\r\n     * XRReferenceSpace TODO\r\n     */\r\n    public viewerReferenceSpace: any; //XRReferenceSpace;\r\n\r\n    /** baseRefernceSpace */\r\n    public baseReferenceSpace: any;//;\r\n    /** Current XR  XRFrame*/\r\n    public currentFrame: any;//\r\n    /** WebXR timestamp updated every frame */\r\n    public currentTimestamp: number = -1;\r\n    /**默认高度补偿,在init失败后使用 */\r\n    public defaultHeightCompensation = 1.7;\r\n\r\n    /**\r\n     * XRReferenceSpace\r\n     */\r\n    private _referenceSpace: any;\r\n    /** \"inline\" | \"immersive-vr\" | \"immersive-ar\"*/\r\n    private _sessionMode: any;\r\n    /** session enable state */\r\n    private _sessionEnded: boolean = false;\r\n    /**WebXR Base Layer */\r\n    private _baseLayer:any;\r\n    /**web XRSystem */\r\n    private _xrNavigator: any;\r\n    /**\r\n     * @internal\r\n     * 类用来管理WebXR状态\r\n     */\r\n    constructor() {\r\n        super();\r\n    }\r\n    /**\r\n    * The current reference space used in this session.\r\n    * @returns XRReferenceSpace;\r\n    */\r\n    public get referenceSpace() {\r\n        return this._referenceSpace;\r\n    }\r\n\r\n    /**\r\n     * set 参考空间\r\n     */\r\n    public set referenceSpace(newReferenceSpace) {\r\n        this._referenceSpace = newReferenceSpace;\r\n    }\r\n\r\n    /**\r\n    * The mode for the managed XR session\r\n    */\r\n    public get sessionMode() {\r\n        return this._sessionMode;\r\n    }\r\n\r\n    /**\r\n     * Stops the xrSession and restores the render loop\r\n     */\r\n    exitXR() {\r\n        this.endXRRenderLoop();\r\n        this.event(WebXRSessionManager.EVENT_MANAGER_END);\r\n    }\r\n    \r\n    /**\r\n     * Initializes the xr layer for the session \r\n     * @param xrSession \r\n     * @param gl \r\n     * @returns \r\n     */\r\n    public initializeXRGL(xrSession: any, gl: WebGLRenderingContext): Promise<boolean> {//: XRWebGLLayer {\r\n        return (gl as any).makeXRCompatible().then(()=> {\r\n            return true;\r\n        });\r\n    };\r\n\r\n    /**\r\n     * 浏览器是否支持WebXR\r\n     * @returns WebXR\r\n     */\r\n    public initializeAsync(): Promise<void> {\r\n        // Check if the browser supports webXR\r\n        this._xrNavigator = navigator;\r\n        if (!this._xrNavigator.xr) {\r\n            return Promise.reject(\"WebXR not available\");\r\n        }\r\n        return Promise.resolve();\r\n    }\r\n\r\n    /**\r\n     * Sessiopn模式是否支持\r\n     * @param sessionMode \"inline\" | \"immersive-vr\" | \"immersive-ar\"\r\n     * @returns A Promise that resolves to true if supported and false if not\r\n     */\r\n    public isSessionSupportedAsync(sessionMode: string): Promise<boolean> {\r\n        if (!(navigator as any).xr) {\r\n            return Promise.resolve(false);\r\n        } else {\r\n            this._xrNavigator = navigator;\r\n        }\r\n        const functionToUse = (navigator as any).xr.isSessionSupported || (navigator as any).xr.supportsSession;\r\n        if (!functionToUse)\r\n            return Promise.resolve(false);\r\n        else {\r\n            return (navigator as any).xr.isSessionSupported(sessionMode);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 初始化Session\r\n     * @param xrSessionMode xrsessionMode\r\n     * @param xrSessionInit any initInfo\r\n     * @returns \r\n     */\r\n    public initializeSessionAsync(xrSessionMode = 'immersive-vr', xrSessionInit = {}): Promise<any> {\r\n        return this._xrNavigator.xr.requestSession('immersive-vr').then((session: any) => {\r\n            this.session = session;\r\n            this._sessionMode = xrSessionMode;\r\n            this._sessionEnded = false;\r\n\r\n            // 增加结束handle\r\n            this.session.addEventListener(\r\n                \"end\",\r\n                () => {\r\n                    this._sessionEnded = true;\r\n                    this.exitXR();\r\n                },\r\n                { once: true }\r\n            );\r\n\r\n            return this.session;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Resets the reference space to the one started the session\r\n     */\r\n    public resetReferenceSpace() {\r\n        this.referenceSpace = this.baseReferenceSpace;\r\n    }\r\n\r\n    /**\r\n     * Starts rendering to the xr layer\r\n     */\r\n    public runXRRenderLoop() {\r\n        this.session.requestAnimationFrame.bind(this.session);\r\n        let fn = (timestamp: any, xrFrame: any) => {\r\n            this._updateByXrFrame(xrFrame, timestamp);\r\n            this.event(WebXRSessionManager.EVENT_FRAME_LOOP, [xrFrame]);\r\n            ILaya.stage._loop();\r\n            this.session.requestAnimationFrame(fn);\r\n        };\r\n        this.session.requestAnimationFrame(fn);\r\n    }\r\n\r\n    public endXRRenderLoop(){\r\n\r\n    }\r\n\r\n    /**\r\n     * Update\r\n     * @param xrFrame \r\n     */\r\n    private _updateByXrFrame(xrFrame: any, timestamp: number) {\r\n        this.currentFrame = xrFrame;\r\n        this.currentTimestamp = timestamp;\r\n    }\r\n\r\n    /**\r\n    * Sets the reference space on the xr session\r\n    * @param referenceSpaceType space to set\r\n    * @returns a promise that will resolve once the reference space has been set\r\n    */\r\n    public setReferenceSpaceTypeAsync(referenceSpaceType = \"local-floor\"): Promise<any> {//XRReferenceSpace\r\n        return this.session\r\n            .requestReferenceSpace(referenceSpaceType)\r\n            .then(\r\n                (referenceSpace: any) => {\r\n                    return referenceSpace;\r\n                },\r\n                (rejectionReason: any) => {\r\n                    return this.session.requestReferenceSpace(\"viewer\").then(\r\n                        (referenceSpace: any) => {\r\n                            //@ts-ignore\r\n                            const heightCompensation = new XRRigidTransform({ x: 0, y: -this.defaultHeightCompensation, z: 0 });\r\n                            return (referenceSpace).getOffsetReferenceSpace(heightCompensation);\r\n                        },\r\n                        (rejectionReason: any) => {\r\n\r\n                            throw 'XR initialization failed: required \"viewer\" reference space type not supported.';\r\n                        }\r\n                    );\r\n                }\r\n            ).then((referenceSpace: any) => {\r\n                // initialize the base and offset (currently the same)\r\n                this.referenceSpace = this.baseReferenceSpace = referenceSpace;\r\n                return this.referenceSpace;\r\n            });\r\n    }\r\n\r\n    /**\r\n    * Updates the render state of the session\r\n    * @param state state to set\r\n    * @returns a promise that resolves once the render state has been updated\r\n    */\r\n    public updateRenderStateAsync(state: any) {//: XRRenderState) {\r\n        if (state.baseLayer) {\r\n            this._baseLayer = state.baseLayer;\r\n        }\r\n        return this.session.updateRenderState(state);\r\n    }\r\n\r\n    /**\r\n     * The current frame rate as reported by the device\r\n     */\r\n    public get currentFrameRate(): number | undefined {\r\n        return this.session?.frameRate;\r\n    }\r\n\r\n    /**\r\n    * A list of supported frame rates (only available in-session!\r\n    */\r\n    public get supportedFrameRates(): Float32Array | undefined {\r\n        return this.session?.supportedFrameRates;\r\n    }\r\n\r\n    /**\r\n     * Set the framerate of the session.\r\n     * @param rate the new framerate. This value needs to be in the supportedFrameRates array\r\n     * @returns a promise that resolves once the framerate has been set\r\n     */\r\n    public updateTargetFrameRate(rate: number): Promise<void> {\r\n        return this.session.updateTargetFrameRate(rate);\r\n    }\r\n\r\n    destroy() {\r\n        if (!this._sessionEnded) {\r\n            this.exitXR();\r\n        }\r\n    }\r\n}","import { Quaternion } from \"../../../maths/Quaternion\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\nimport { WebXRCamera } from \"./WebXRCamera\";\r\nimport { WebXRRenderTexture } from \"./WebXRRenderTexture\";\r\nimport { WebXRSessionManager } from \"./WebXRSessionManager\";\r\n\r\n\r\n/**\r\n * @author miner\r\n * 此类用来管理XRCamera\r\n */\r\nexport class WebXRCameraManager {\r\n    /**\r\n     * reference Quaternin\r\n     */\r\n    private _referenceQuaternion: Quaternion = new Quaternion();\r\n    /**\r\n     * reference Position\r\n     */\r\n    private _referencedPosition: Vector3 = new Vector3();\r\n    /**\r\n     * WebXR Session Manager\r\n     */\r\n    private _webXRSessionManager: WebXRSessionManager;\r\n    /**\r\n     * first Frame Flag\r\n     */\r\n    private _firstFrame = true;//初始帧\r\n    /**\r\n     * WebXR RenderTexture\r\n     */\r\n    private _XRRenderTexture: WebXRRenderTexture = new WebXRRenderTexture();\r\n    /**\r\n     * WebXRCamera Array\r\n     */\r\n    private _rigCameras = new Array<WebXRCamera>();\r\n    /**\r\n     * Reference position\r\n     */\r\n    private _position = new Vector3();\r\n\r\n    /**\r\n     * parent\r\n     */\r\n    public owner: any;\r\n\r\n    get position(): Vector3 {\r\n        return this._position;\r\n    }\r\n\r\n    set position(newPosition: Vector3) {\r\n\r\n        newPosition.cloneTo(this._position);\r\n    }\r\n\r\n    set rotationQuaternion(value: Quaternion) {\r\n        value.cloneTo(this._referenceQuaternion);\r\n    }\r\n\r\n    get rotationQuaternion(): Quaternion {\r\n        return this._referenceQuaternion;\r\n    }\r\n\r\n    get rigCameras(): WebXRCamera[] {\r\n        return this._rigCameras;\r\n    }\r\n\r\n    /**\r\n     * 用来创建XRCamera管理类\r\n     * @param camera \r\n     * @param manager \r\n     */\r\n    constructor(camera: any, manager: WebXRSessionManager = null) {\r\n        this.owner = camera;\r\n        this.owner.enableRender = false;\r\n        if (!this.owner.aspectRatio) {\r\n            console.warn(\"owner is not Camera\");\r\n        }\r\n        this._webXRSessionManager = manager;\r\n        this._webXRSessionManager.on(WebXRSessionManager.EVENT_FRAME_LOOP, this, this._updateFromXRSession);\r\n        this._webXRSessionManager.on(WebXRSessionManager.EVENT_FRAME_LOOP, this, this._updateReferenceSpace);\r\n        this._webXRSessionManager.on(WebXRSessionManager.EVENT_MANAGER_END, this, this.destroy);\r\n    }\r\n\r\n    /**\r\n     * updateFrame by WebXR Session\r\n     */\r\n    _updateFromXRSession() {\r\n        //XRViewerPose\r\n        let pose = this._webXRSessionManager.currentFrame && this._webXRSessionManager.currentFrame.getViewerPose(this._webXRSessionManager.referenceSpace);\r\n        //update pose data\r\n        const pos = pose.transform.position;\r\n        const orientation = pose.transform.orientation;\r\n        this._referenceQuaternion.setValue(orientation.x, orientation.y, orientation.z, orientation.w);\r\n        this._referencedPosition.setValue(pos.x, pos.y, pos.z);\r\n        if (this._firstFrame) {\r\n            this._firstFrame = false;\r\n            this.position.y += this._referencedPosition.y;\r\n            // avoid using the head rotation on the first frame.\r\n            this._referenceQuaternion.setValue(0, 0, 0, 1);\r\n        } else {\r\n            // update position and rotation as reference\r\n            this.rotationQuaternion = this._referenceQuaternion;\r\n            this.position = this._referencedPosition;\r\n        }\r\n        // Update camera rigs\r\n        if (this.rigCameras.length !== pose.views.length) {\r\n            this._updateNumberOfRigCameras(pose.views.length);\r\n        }\r\n        //XRView\r\n        pose.views.forEach((view: any, i: any) => {\r\n            const currentRig = this.rigCameras[i];\r\n            if (view.eye === \"right\")\r\n                currentRig.name = \"right\";\r\n            else if (view.eye === \"left\")\r\n                currentRig.name = \"left\";\r\n            // Update view/projection matrix\r\n            const pos = view.transform.position;\r\n            const orientation = view.transform.orientation;\r\n            currentRig.transform.position.setValue(pos.x, pos.y, pos.z);\r\n            currentRig.transform.rotation.setValue(orientation.x, orientation.y, orientation.z, orientation.w);\r\n            currentRig.transform.position = currentRig.transform.position;\r\n            currentRig.transform.rotation = currentRig.transform.rotation;\r\n            // Update viewport\r\n            if (this._webXRSessionManager.session.renderState.baseLayer) {\r\n                var viewport = this._webXRSessionManager.session.renderState.baseLayer.getViewport(view);\r\n                var width = this._webXRSessionManager.session.renderState.baseLayer.framebufferWidth;\r\n                var height = this._webXRSessionManager.session.renderState.baseLayer.framebufferHeight;\r\n                this._XRRenderTexture.frameBuffer = this._webXRSessionManager.session.renderState.baseLayer.framebuffer;\r\n                //update FrameBuffer\r\n                currentRig.renderTarget = this._XRRenderTexture;\r\n                //update clientSize\r\n                currentRig.clientWidth = width;\r\n                currentRig.clientHeight = height;\r\n                //update viewPort\r\n                var cameraViewPort = currentRig.viewport;\r\n                cameraViewPort.x = viewport.x;\r\n                cameraViewPort.y = viewport.y;\r\n                cameraViewPort.width = viewport.width;\r\n                cameraViewPort.height = viewport.height;\r\n                currentRig.viewport = cameraViewPort;\r\n                currentRig.projectionMatrix.cloneByArray(view.projectionMatrix);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * update number of WebXRCamera\r\n     * @param viewCount \r\n     */\r\n    private _updateNumberOfRigCameras(viewCount = 1) {\r\n        while (this.rigCameras.length < viewCount) {\r\n            //add camera\r\n            var xrcamera = new WebXRCamera(this.owner.aspectRatio, this.owner.nearPlane, this.owner.farPlane);\r\n            xrcamera.clearFlag = this.owner.clearFlag;\r\n            xrcamera.clearColor = this.owner.clearColor;\r\n            this.owner.addChild(xrcamera);\r\n            this.rigCameras.push(xrcamera);\r\n        }\r\n        while (this.rigCameras.length > viewCount) {\r\n            //remove camera\r\n            let xrcamera = this.rigCameras.pop();\r\n            this.owner.removeChild(xrcamera);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * TODO:update of Reference Space\r\n     */\r\n    private _updateReferenceSpace() {\r\n        //TODO:\r\n    }\r\n\r\n    /**\r\n     * destroy\r\n     */\r\n    destroy() {\r\n        this.owner.enableRender = true;\r\n        this._webXRSessionManager.off(WebXRSessionManager.EVENT_FRAME_LOOP, this, this._updateFromXRSession);\r\n        this._webXRSessionManager.off(WebXRSessionManager.EVENT_FRAME_LOOP, this, this._updateReferenceSpace);\r\n        this._webXRSessionManager.off(WebXRSessionManager.EVENT_MANAGER_END, this, this.destroy);\r\n        this._rigCameras.forEach(element => {\r\n            element.destroy();\r\n        });\r\n        this._rigCameras = null;\r\n        this._XRRenderTexture.destroy();\r\n    }\r\n\r\n}","import { EventDispatcher } from \"../../../events/EventDispatcher\";\r\nimport { Vector2 } from \"../../../maths/Vector2\";\r\n\r\n/**\r\n * 类用来描述gamepad Axis\r\n */\r\nexport class AxiGamepad extends EventDispatcher {\r\n    static EVENT_OUTPUT: string = \"outputAxi_id\";\r\n    /**\r\n     * 轴设备名字\r\n     */\r\n    public handness: string;\r\n    /**\r\n     * 轴数量\r\n     */\r\n    public axisLength: number;\r\n    /**\r\n     * axis Array\r\n     */\r\n    private axisData: Array<Vector2> = new Array();\r\n\r\n    /**\r\n     * 类用于创建轴数据\r\n     * @internal\r\n     * @param handness 轴设备名字\r\n     * @param length 轴数量\r\n     */\r\n    constructor(handness: string, length: number) {\r\n        super();\r\n        this.handness = handness;\r\n        this.axisData.length = length;\r\n        this.axisLength = length;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @param padGameAxi 轴数据\r\n     */\r\n    update(padGameAxi: any) {\r\n        for (let i = 0, j = 0; i < padGameAxi.axes.length; i += 2, ++j) {\r\n            if (!this.axisData[j])\r\n                this.axisData[j] = new Vector2();\r\n            this.axisData[j].setValue(padGameAxi.axes[i], padGameAxi.axes[i + 1]);\r\n            this.outPutStickValue(this.axisData[j], j);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 派发轴事件\r\n     * @internal\r\n     * @param value \r\n     * @param index \r\n     */\r\n    outPutStickValue(value: Vector2, index: number) {\r\n        const eventnam = AxiGamepad.EVENT_OUTPUT + index.toString();\r\n        this.event(eventnam, [value]);\r\n    }\r\n\r\n    /**\r\n     * destroy\r\n     */\r\n    destroy() {\r\n        for (let i = 0; i < this.axisLength; i++) {\r\n            let eventname = AxiGamepad.EVENT_OUTPUT + i.toString();\r\n            this.offAll(eventname);\r\n        }\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * 类用来描述gamepad Button\r\n */\r\nexport class ButtonGamepad extends EventDispatcher {\r\n    static EVENT_TOUCH_ENTER: string = \"touchEnter\";\r\n    static EVENT_TOUCH_STAY: string = \"touchStay\";\r\n    static EVENT_TOUCH_OUT: string = \"touchOut\";\r\n    static EVENT_PRESS_ENTER: string = \"pressEnter\";\r\n    static EVENT_PRESS_STAY: string = \"pressStay\";\r\n    static EVENT_PRESS_OUT: string = \"pressOut\";\r\n    static EVENT_PRESS_VALUE: string = \"outpressed\";\r\n\r\n    /**\r\n     * The id of the gamepad\r\n     */\r\n    public handness: string;\r\n    /**\r\n    * The index of the gamepad\r\n    */\r\n    public index: number;\r\n\r\n    /**\r\n     * front touch state\r\n     */\r\n    private lastTouch: boolean = false;\r\n    private lastPress: boolean = false;\r\n    private lastPressValue: number = 0;\r\n\r\n    /**\r\n     * current touch state\r\n     */\r\n    private touch: boolean = false;\r\n    private press: boolean = false;\r\n    private pressValue: number = 0;\r\n\r\n\r\n    /**\r\n     * 类用于创建Button对象\r\n     * @param handness 设备名称\r\n     * @param index button缩影\r\n     */\r\n    constructor(handness: string, index: number) {\r\n        super();\r\n        this.handness = handness;\r\n        this.index = index;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * GamePadButton update\r\n     */\r\n    update(padButton: any) {\r\n        //set Data\r\n        this.lastTouch = this.touch;\r\n        this.lastPress = this.press;\r\n        this.lastPressValue = this.pressValue;\r\n        this.touch = padButton.touched;\r\n        this.press = padButton.pressed;\r\n        this.pressValue = padButton.value;\r\n        if (!this.lastTouch && !this.touch) {\r\n            return;\r\n        }\r\n        if (this.lastTouch != this.touch && this.touch) {\r\n            this.touchEnter();\r\n        } else if (this.lastTouch == this.touch && this.touch) {\r\n            this.touchStay();\r\n        } else if (this.lastTouch != this.touch && !this.touch) {\r\n            this.touchOut();\r\n        }\r\n        if (this.lastPress != this.press && this.press) {\r\n            this.pressEnter();\r\n        } else if (this.lastPress == this.press && this.press) {\r\n            this.pressStay();\r\n        } else if (this.lastPress != this.press && !this.press) {\r\n            this.pressOut();\r\n        }\r\n        if (this.touch) {\r\n            this.outpressed();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * event touch enter\r\n     */\r\n    private touchEnter() {\r\n        this.event(ButtonGamepad.EVENT_TOUCH_ENTER);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * event touch Stay\r\n     */\r\n    private touchStay() {\r\n        this.event(ButtonGamepad.EVENT_TOUCH_STAY);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * event touch Out\r\n     */\r\n    private touchOut() {\r\n        this.event(ButtonGamepad.EVENT_TOUCH_OUT);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * event press enter\r\n     */\r\n    private pressEnter() {\r\n        this.event(ButtonGamepad.EVENT_PRESS_ENTER);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * event press Stay\r\n     */\r\n    private pressStay() {\r\n        this.event(ButtonGamepad.EVENT_PRESS_STAY);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * event press Out\r\n     */\r\n    private pressOut() {\r\n        this.event(ButtonGamepad.EVENT_PRESS_OUT);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * event press value\r\n     */\r\n    private outpressed() {\r\n        this.event(ButtonGamepad.EVENT_PRESS_VALUE, [this.pressValue]);\r\n    }\r\n\r\n    /**\r\n     * destroy\r\n     */\r\n    destroy() {\r\n        this.offAll(ButtonGamepad.EVENT_PRESS_ENTER);\r\n        this.offAll(ButtonGamepad.EVENT_PRESS_STAY);\r\n        this.offAll(ButtonGamepad.EVENT_PRESS_OUT);\r\n        this.offAll(ButtonGamepad.EVENT_PRESS_ENTER);\r\n        this.offAll(ButtonGamepad.EVENT_PRESS_STAY);\r\n        this.offAll(ButtonGamepad.EVENT_PRESS_OUT);\r\n        this.offAll(ButtonGamepad.EVENT_PRESS_VALUE);\r\n    }\r\n}","import { EventDispatcher } from \"../../../events/EventDispatcher\";\r\nimport { Quaternion } from \"../../../maths/Quaternion\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\nimport { Ray } from \"../../math/Ray\";\r\nimport { ButtonGamepad, AxiGamepad } from \"./WebXRGamepad\";\r\n\r\n\r\n/**\r\n * @author miner\r\n * 类用来描述输入设备\r\n */\r\nexport class WebXRInput extends EventDispatcher {\r\n    static HANDNESS_LEFT: string = \"left\";\r\n    static HANDNESS_RIGHT: string = \"right\";\r\n    static EVENT_FRAMEUPDATA_WEBXRINPUT: string = \"frameXRInputUpdate\";\r\n    private static tempQua: Quaternion = new Quaternion();\r\n    /**\r\n     * 预处理Button事件\r\n     */\r\n    private preButtonEventList: Array<any> = [];\r\n    /**\r\n     * 预处理axis事件\r\n     */\r\n    private preAxisEventList: Array<any> = [];\r\n    /**\r\n     * @internal\r\n     */\r\n    public _inputSource: any;//XRInputSource\r\n\r\n    public lastXRPose: any;\r\n    /**\r\n     * handMode\r\n     */\r\n    public handness: string;\r\n    /**\r\n     * input Ray\r\n     */\r\n    public ray: Ray;\r\n    /**\r\n     * hand Pos\r\n     */\r\n    public position: Vector3;\r\n    /**\r\n     * hand Rotate\r\n     */\r\n    public rotation: Quaternion;\r\n    /**\r\n     * lastRayPos\r\n     */\r\n    public _lastXRPose: any;\r\n\r\n    /**\r\n     * gamepad Button info\r\n     */\r\n    public gamepadButton: Array<ButtonGamepad>;\r\n\r\n    /**\r\n     * gamepad axis Info\r\n     */\r\n    public gamepadAxis: AxiGamepad;\r\n\r\n    constructor(handness: string) {\r\n        super();\r\n        this.handness = handness;\r\n        this.position = new Vector3();\r\n        this.rotation = new Quaternion();\r\n        this.ray = new Ray(new Vector3(), new Vector3());\r\n    }\r\n\r\n    /**\r\n     * 更新XRInput数据\r\n     * @internal\r\n     * @param xrFrame WebXR帧数据\r\n     * @param referenceSpace 参考空间\r\n     */\r\n    _updateByXRPose(xrFrame: any, referenceSpace: any) {\r\n        //updateRay\r\n        const rayPose = xrFrame.getPose(this._inputSource.targetRaySpace, referenceSpace);\r\n        this._lastXRPose = rayPose;\r\n        if (rayPose) {\r\n            const pos = rayPose.transform.position;\r\n            const orientation = rayPose.transform.orientation;\r\n            WebXRInput.tempQua.setValue(orientation.x, orientation.y, orientation.z, orientation.w);\r\n            this.ray.origin.setValue(pos.x, pos.y, pos.z);\r\n            Vector3.transformQuat(Vector3.UnitZ, WebXRInput.tempQua, this.ray.direction);\r\n            Vector3.scale(this.ray.direction, -1, this.ray.direction);\r\n        }\r\n        //updateMesh\r\n        if (this._inputSource.gripSpace) {\r\n            let meshPose = xrFrame.getPose(this._inputSource.gripSpace, referenceSpace);\r\n            if (meshPose) {\r\n                const pos = meshPose.transform.position;\r\n                const orientation = meshPose.transform.orientation;\r\n                this.position.setValue(pos.x, pos.y, pos.z);\r\n                this.rotation.setValue(orientation.x, orientation.y, orientation.z, orientation.w);\r\n            }\r\n        }\r\n        this.event(WebXRInput.EVENT_FRAMEUPDATA_WEBXRINPUT, [this]);\r\n        //handle gamepad\r\n        this._handleProcessGamepad();\r\n    }\r\n\r\n\r\n    /**\r\n     * handle gamepad Event\r\n     */\r\n    private _handleProcessGamepad() {\r\n        //axis init\r\n        const gamepad = this._inputSource.gamepad;\r\n        if (!this.gamepadAxis) {\r\n            this.gamepadAxis = new AxiGamepad(this.handness, gamepad.axes.length);\r\n            //preEvent\r\n            this.preAxisEventList.forEach(element => {\r\n                this.gamepadAxis.on(element.eventnam, element.caller, element.listener);\r\n            });\r\n        }\r\n        if (!this.gamepadButton) {\r\n            this.gamepadButton = [];\r\n            for (let i = 0; i < gamepad.buttons.length; ++i) {\r\n                this.gamepadButton.push(new ButtonGamepad(this.handness, i));\r\n            }\r\n            //preEvent\r\n            this.preButtonEventList.forEach(element => {\r\n                this.addButtonEvent(element.index, element.type, element.caller, element.listener);\r\n            });\r\n        }\r\n        //axis\r\n        this.gamepadAxis.update(gamepad);\r\n        //button\r\n        for (let i = 0; i < gamepad.buttons.length; ++i) {\r\n            let button = this.gamepadButton[i];\r\n            button.update(gamepad.buttons[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * add button event\r\n     * @param index button索引\r\n     * @param type 事件类型\r\n     * @param caller 事件侦听函数的执行域。\r\n     * @param listener 事件侦听函数。\r\n     */\r\n    addButtonEvent(index: number, type: string, caller: any, listener: Function) {\r\n        if (!this.gamepadButton) {\r\n            this.preButtonEventList.push({\r\n                \"index\": index,\r\n                \"type\": type,\r\n                \"caller\": caller,\r\n                \"listener\": listener\r\n            });\r\n        } else {\r\n            let button = this.gamepadButton[index];\r\n            button.on(type, caller, listener);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * add axis event\r\n     * @param index axis索引\r\n     * @param type 事件类型\r\n     * @param caller 事件侦听函数的执行域。\r\n     * @param listener 事件侦听函数。\r\n     */\r\n    addAxisEvent(index: number, type: string, caller: any, listener: Function) {\r\n        if (!this.gamepadAxis) {\r\n            this.preAxisEventList.push({\r\n                \"eventnam\": type + index.toString(),\r\n                \"caller\": caller,\r\n                \"listener\": listener\r\n            });\r\n        } else {\r\n            const eventnam = type + index.toString();\r\n            this.gamepadAxis.on(eventnam, caller, listener);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * remove axis event\r\n     * @param index axis索引\r\n     * @param type 事件类型\r\n     * @param caller 事件侦听函数的执行域。\r\n     * @param listener 事件侦听函数。\r\n     */\r\n    offAxisEvent(index: number, type: string, caller: any, listener: Function) {\r\n        if (this.gamepadAxis) {\r\n            const eventnam = type + index.toString();\r\n            this.gamepadAxis.off(eventnam, caller, listener);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * remove Button event\r\n     * @param index axis索引\r\n     * @param type 事件类型\r\n     * @param caller 事件侦听函数的执行域。\r\n     * @param listener 事件侦听函数。\r\n     */\r\n    offButtonEvent(index: number, type: string, caller: any, listener: Function) {\r\n        if (this.gamepadButton) {\r\n            let button = this.gamepadButton[index];\r\n            button.off(type, caller, listener);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 销毁\r\n     */\r\n    destroy() {\r\n        this.preButtonEventList = null;\r\n        this.ray = null;\r\n        this.position = null;\r\n        this.rotation = null;\r\n        this.gamepadAxis.destroy();\r\n        this.gamepadButton.forEach(element => {\r\n            element.destroy();\r\n        });\r\n    }\r\n}","import { Color } from \"../../../maths/Color\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\nimport { PixelLineSprite3D } from \"../../core/pixelLine/PixelLineSprite3D\";\r\nimport { Sprite3D } from \"../../core/Sprite3D\";\r\nimport { WebXRCameraManager } from \"./WebXRCameraManager\";\r\nimport { WebXRInput } from \"./WebXRInput\";\r\nimport { WebXRSessionManager } from \"./WebXRSessionManager\";\r\n\r\n\r\n/**\r\n * @author miner\r\n * 类用来管理输入设备\r\n * The path of the CDN the sample will fetch controller models from：\r\n * MeshSource https://cdn.jsdelivr.net/npm/@webxr-input-profiles/assets@1.0.9/dist/profiles/\r\n */\r\nexport class WebXRInputManager {\r\n    static tempVec: Vector3 = new Vector3();\r\n    static tempVec1: Vector3 = new Vector3();\r\n    /**\r\n     * Session Manager\r\n     */\r\n    private webXRSessionManager: WebXRSessionManager;\r\n    /**\r\n     * webXRCamera Manager\r\n     */\r\n    private webXRCameraManager: WebXRCameraManager;\r\n    /**\r\n     * array of XRInput\r\n     */\r\n    private controllers: Map<string, WebXRInput> = new Map();\r\n    /**\r\n     * bind of XRInput Node Render\r\n     */\r\n    private controllerHandMesh: Map<string, Sprite3D> = new Map();\r\n    /**\r\n     * bind of XRInput Ray Render\r\n     */\r\n    private controllerLineRender: Map<string, PixelLineSprite3D> = new Map();\r\n    /**\r\n     * line Color\r\n     */\r\n    private lineColor: Color = Color.RED;\r\n    /**\r\n     * Ray length\r\n     */\r\n    private rayLength: number = 2;\r\n\r\n    /**\r\n     * 类用于创建WebXRInput管理类\r\n     * @param webxrManager WebXR Session manager\r\n     * @param webXRCamera WebXR Manager\r\n     */\r\n    constructor(webxrManager: WebXRSessionManager, webXRCamera: WebXRCameraManager) {\r\n        this.webXRSessionManager = webxrManager;\r\n        this.webXRCameraManager = webXRCamera;\r\n        this.webXRSessionManager.on(WebXRSessionManager.EVENT_MANAGER_END, this, this.destory);\r\n        this.webXRSessionManager.on(WebXRSessionManager.EVENT_FRAME_LOOP, this, this._updateFromXRFrame);\r\n    }\r\n\r\n    /**\r\n     * 更新输入挂点\r\n     * @param xrInput \r\n     */\r\n    private _updataMeshRender(xrInput: WebXRInput) {\r\n        const handness = xrInput.handness;\r\n        //mesh\r\n        if (this.controllerHandMesh.has(handness)) {\r\n            let meshNode = this.controllerHandMesh.get(handness);\r\n            meshNode.transform.position = xrInput.position;\r\n            meshNode.transform.rotation = xrInput.rotation;\r\n        }\r\n        //rayLine\r\n        if (this.controllerLineRender.has(handness)) {\r\n            let line = this.controllerLineRender.get(handness);\r\n            line.clear();\r\n            let ray = xrInput.ray;\r\n            WebXRInputManager.tempVec.setValue(ray.origin.x, ray.origin.y, ray.origin.z);\r\n            Vector3.scale(ray.direction, this.rayLength, WebXRInputManager.tempVec1);\r\n            Vector3.add(WebXRInputManager.tempVec, WebXRInputManager.tempVec1, WebXRInputManager.tempVec1);\r\n            line.addLine(WebXRInputManager.tempVec, WebXRInputManager.tempVec1, this.lineColor, this.lineColor);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * WebXRInput帧循环\r\n     * @param xrFrame \r\n     */\r\n    private _updateFromXRFrame(xrFrame: any) {\r\n        //frame, this.xrSessionManager.referenceSpace, this.xrCamera\r\n        const session = this.webXRSessionManager.session;\r\n        const refSpace = this.webXRSessionManager.referenceSpace;\r\n        for (let inputSource of session.inputSources) {\r\n            const key = inputSource.handedness;\r\n            let xrInput: WebXRInput;\r\n            if (!this.controllers.has(key)) {\r\n                xrInput = this.getController(key);\r\n            }else\r\n                xrInput = this.controllers.get(key);\r\n            if(xrInput){\r\n                xrInput = this.controllers.get(key);\r\n                xrInput._inputSource = inputSource;\r\n                xrInput._updateByXRPose(xrFrame, refSpace);\r\n            }\r\n            \r\n        }\r\n    }\r\n\r\n    /**\r\n     * 绑定输入设备渲染节点\r\n     * @param meshSprite 渲染挂点\r\n     * @param handness 设备名称left/right\r\n     */\r\n    bindMeshNode(meshSprite: Sprite3D, handness: string) {\r\n        this.controllerHandMesh.set(handness, meshSprite);\r\n    }\r\n\r\n    /**\r\n     * 绑定输入设备射线\r\n     * @param lineSprite 线\r\n     * @param handness 设备名称left/right\r\n     */\r\n    bindRayNode(lineSprite: PixelLineSprite3D, handness: string) {\r\n        this.controllerLineRender.set(handness, lineSprite);\r\n    }\r\n\r\n    /**\r\n     * 获得输入设备\r\n     * @param handness 设备名称left/right\r\n     * @returns \r\n     */\r\n    getController(handness: string): WebXRInput {\r\n        if (handness != \"left\" && handness != \"right\")\r\n            return null;\r\n        if (!this.controllers.has(handness)) {\r\n            let value = new WebXRInput(handness);\r\n            this.controllers.set(handness, value);\r\n            value.on(WebXRInput.EVENT_FRAMEUPDATA_WEBXRINPUT, this, this._updataMeshRender);\r\n        }\r\n        return this.controllers.get(handness);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * 删除\r\n     */\r\n    destory() {\r\n        this.webXRSessionManager.off(WebXRSessionManager.EVENT_FRAME_LOOP, this, this._updateFromXRFrame);\r\n        for (let key in this.controllers) {\r\n            this.controllers.get(key).off(\"frameXRInputUpdate\", this, this._updataMeshRender);\r\n            this.controllers.get(key).destroy();\r\n        }\r\n        this.controllers = null;\r\n        this.controllerHandMesh = null;\r\n        this.controllerLineRender = null;\r\n    }\r\n}\r\n\r\n","import { LayaGL } from \"../../../layagl/LayaGL\";\r\nimport { Camera } from \"../../core/Camera\";\r\nimport { WebXRCameraManager } from \"./WebXRCameraManager\";\r\nimport { WebXRInputManager } from \"./WebXRInputManager\";\r\nimport { WebXRSessionManager } from \"./WebXRSessionManager\";\r\nexport class WebXRCameraInfo {\r\n    /**depth far */\r\n    depthFar: number;\r\n    /**depth near */\r\n    depthNear: number;\r\n    /**camera */\r\n    camera: any;\r\n}\r\n\r\n/**\r\n * 类用来管理WebXR\r\n * @author miner\r\n */\r\nexport class WebXRExperienceHelper {\r\n\r\n    static glInstance: any;\r\n    /**\r\n     * single XRManager \r\n     */\r\n    public static xr_Manager = new WebXRSessionManager();\r\n    /**\r\n     * support webXR\r\n     */\r\n    public static supported = false;\r\n    /**\r\n     * default WebLayer option\r\n     * XRWebGLLayerInit\r\n     */\r\n    public static canvasOptions = {\r\n        antialias: true,\r\n        depth: true,\r\n        stencil: false,\r\n        alpha: true,\r\n        multiview: false,\r\n        framebufferScaleFactor: 1,\r\n    };\r\n\r\n    /**\r\n     * 支持XRSession模式\r\n     * @param sessionMode XRSessionMode = \"inline\" | \"immersive-vr\" | \"immersive-ar\";\r\n     * @returns \r\n     */\r\n    public static supportXR(sessionMode: string): Promise<boolean> {\r\n        return WebXRExperienceHelper.xr_Manager.isSessionSupportedAsync(sessionMode).then(value => {\r\n            WebXRExperienceHelper.supported = value;\r\n            return value;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 申请WewXR交互\r\n     * @param sessionMode XRSessionMode\r\n     * @param referenceSpaceType referenceType = \"viewer\" | \"local\" | \"local-floor\" | \"unbounded\";\r\n     * @param cameraInfo WebXRCameraInfo webXRCamera设置\r\n     * @returns Promise<WebXRSessionManager> \r\n     */\r\n    public static enterXRAsync(sessionMode: string, referenceSpaceType: string, cameraInfo: WebXRCameraInfo): Promise<WebXRSessionManager> {\r\n        if (sessionMode === \"immersive-ar\" && referenceSpaceType !== \"unbounded\") {\r\n            console.warn(\"We recommend using 'unbounded' reference space type when using 'immersive-ar' session mode\");\r\n        }\r\n\r\n        //session\r\n        return WebXRExperienceHelper.xr_Manager.initializeSessionAsync(sessionMode).then(() => {\r\n            //refernceSpace\r\n            return WebXRExperienceHelper.xr_Manager.setReferenceSpaceTypeAsync(referenceSpaceType);\r\n        }).then(() => {\r\n            //webglSurport\r\n            //@ts-ignore\r\n            return WebXRExperienceHelper.xr_Manager.initializeXRGL(sessionMode, LayaGL.renderEngine._gl);\r\n        }).then(() => {\r\n            //@ts-ignore\r\n            WebXRExperienceHelper.glInstance = LayaGL.renderEngine._gl;\r\n            return WebXRExperienceHelper.xr_Manager.updateRenderStateAsync({\r\n                depthFar: cameraInfo.depthFar,\r\n                depthNear: cameraInfo.depthNear,\r\n                //@ts-ignore\r\n                baseLayer: new XRWebGLLayer(WebXRExperienceHelper.xr_Manager.session, LayaGL.instance),\r\n            });\r\n        }).then(() => {\r\n            WebXRExperienceHelper.xr_Manager.runXRRenderLoop();\r\n            return WebXRExperienceHelper.xr_Manager;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * config WebXRCameraManager\r\n     * @param camera Camera\r\n     * @param manager WebXRSessionManager\r\n     * @returns \r\n     */\r\n    public static setWebXRCamera(camera: Camera, manager: WebXRSessionManager): WebXRCameraManager {\r\n        return new WebXRCameraManager(camera, manager);\r\n    }\r\n\r\n    /**\r\n     * config WebXRInputManager\r\n     * @param sessionManager WebXRSessionManager\r\n     * @param cameraManager WebXRCameraManager\r\n     * @returns \r\n     */\r\n    public static setWebXRInput(sessionManager: WebXRSessionManager, cameraManager: WebXRCameraManager): WebXRInputManager {\r\n        return new WebXRInputManager(sessionManager, cameraManager);\r\n    }\r\n}","import { Config3D } from \"../../../../Config3D\";\r\nimport { ILaya3D } from \"../../../../ILaya3D\";\r\nimport { Camera, CameraEventFlags } from \"../../core/Camera\";\r\nimport { RenderContext3D } from \"../../core/render/RenderContext3D\";\r\nimport { Scene3D } from \"../../core/scene/Scene3D\";\r\nimport { Cluster } from \"../../graphics/renderPath/Cluster\";\r\nimport { Viewport } from \"../../math/Viewport\";\r\nimport { WebXRCameraManager } from \"./WebXRCameraManager\";\r\nimport { WebXRRenderTexture } from \"./WebXRRenderTexture\";\r\nimport { RenderStateContext } from \"../../../RenderEngine/RenderStateContext\";\r\nimport { WebXRExperienceHelper } from \"./WebXRExperienceHelper\";\r\nimport { Shader3D } from \"../../../RenderEngine/RenderShader/Shader3D\";\r\nimport { RenderTexture } from \"../../../resource/RenderTexture\";\r\n\r\n\r\n/**\r\n * @author miner\r\n * 类用于创建WebXR摄像机。\r\n */\r\nexport class WebXRCamera extends Camera {\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tpublic isWebXR = true;\r\n\t/**\r\n\t * WebXRSessionManager\r\n\t */\r\n\tprivate _webXRManager: WebXRCameraManager;\r\n\r\n\t/**\r\n\t * override client\r\n\t */\r\n\tprivate _clientWidth: number;\r\n\t/**\r\n\t * override client\r\n\t */\r\n\tprivate _clientHeight: number;\r\n\r\n\t/**\r\n\t * 自定义渲染场景的渲染目标。\r\n\t */\r\n\tget renderTarget(): RenderTexture {\r\n\t\treturn this._internalRenderTexture;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tset renderTarget(value: RenderTexture) {\r\n\t\tthis._internalRenderTexture = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tset clientWidth(value: number) {\r\n\t\tthis._clientWidth = value;\r\n\t}\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tset clientHeight(value: number) {\r\n\t\tthis._clientHeight = value;\r\n\t}\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tget clientWidth(): number {\r\n\t\treturn this._clientWidth;\r\n\t}\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tget clientHeight(): number {\r\n\t\treturn this._clientHeight;\r\n\t}\r\n\r\n\t/**\r\n\t * restore view state\r\n\t * @internal\r\n\t */\r\n\tprivate _restoreView(gl: WebGLRenderingContext) {\r\n\t\t//恢复渲染区\r\n\t\tvar viewport: Viewport = this.viewport;\r\n\t\tvar vpX: number, vpY: number;\r\n\t\tvar vpW: number = viewport.width;\r\n\t\tvar vpH: number = viewport.height;\r\n\t\tif (this._needInternalRenderTexture()) {\r\n\t\t\tvpX = 0;\r\n\t\t\tvpY = 0;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tvpX = viewport.x;\r\n\t\t\tvpY = this._getCanvasHeight() - viewport.y - vpH;\r\n\t\t}\r\n\t\tgl.viewport(vpX, vpY, vpW, vpH);\r\n\t}\r\n\r\n\t/**\r\n\t * 渲染\r\n\t * @override\r\n\t * @param shader \r\n\t * @param replacementTag \r\n\t */\r\n\trender(shader: Shader3D = null, replacementTag: string = null): void {\r\n\t\tif (!this.activeInHierarchy) //custom render should protected with activeInHierarchy=true\r\n\t\t\treturn;\r\n\r\n\t\tvar viewport: Viewport = this.viewport;\r\n\t\tvar needInternalRT: boolean = true;\r\n\t\tvar context: RenderContext3D = RenderContext3D._instance;\r\n\t\tvar scene: Scene3D = context.scene = <Scene3D>this._scene;\r\n\t\tcontext.pipelineMode = context.configPipeLineMode;\r\n\t\tcontext.replaceTag = replacementTag;\r\n\t\tcontext.customShader = shader;\r\n\t\tvar needShadowCasterPass: boolean = this._renderShadowMap(scene, context);\r\n\t\tthis._preRenderMainPass(context, scene, needInternalRT, viewport);\r\n\t\tthis._renderMainPass(context, viewport, scene, shader, replacementTag, needInternalRT);\r\n\t\tthis._aftRenderMainPass(needShadowCasterPass);\r\n\t}\r\n\r\n\t/**\r\n * 渲染主流程\r\n * @internal\r\n * @param context 渲染上下文\r\n * @param viewport 视口\r\n * @param scene 场景\r\n * @param shader shader\r\n * @param replacementTag 替换标签\r\n * @param needInternalRT 是否需要内部RT\r\n */\r\n\t_renderMainPass(context: RenderContext3D, viewport: Viewport, scene: Scene3D, shader: Shader3D, replacementTag: string, needInternalRT: boolean) {\r\n\t\tvar gl: WebGLRenderingContext = WebXRExperienceHelper.glInstance;\r\n\t\tvar renderTex: RenderTexture = this._internalRenderTexture;\r\n\r\n\t\tcontext.viewport = viewport;\r\n\t\tthis._prepareCameraToRender();\r\n\t\tvar multiLighting: boolean = Config3D._multiLighting;\r\n\t\t(multiLighting) && (Cluster.instance.update(this, <Scene3D>(scene)));\r\n\t\tscene._preCulling(context, this);\r\n\r\n\t\tif (renderTex && renderTex._isCameraTarget)//保证反转Y状态正确\r\n\t\t\tcontext.invertY = true;\r\n\t\tthis._applyViewProject(context, this.viewMatrix, this._projectionMatrix);\r\n\t\tif (this.depthTextureMode != 0) {\r\n\t\t\t//TODO:是否可以不多次\r\n\t\t\tthis._renderDepthMode(context);\r\n\t\t}\r\n\t\t(renderTex) && (renderTex._start());\r\n\t\tif ((renderTex as any).frameLoop != Scene3D._updateMark) {\r\n\t\t\t(renderTex as any).frameLoop = Scene3D._updateMark;\r\n\t\t\t//scene._clear(gl, context);\r\n\t\t\tthis.clear(gl);\r\n\t\t}\r\n\t\tthis._restoreView(gl);\r\n\t\tthis._prepareCameraToRender();\r\n\r\n\t\tthis._applyCommandBuffer(CameraEventFlags.BeforeForwardOpaque, context);\r\n\t\tscene._renderScene(context, ILaya3D.Scene3D.SCENERENDERFLAG_RENDERQPAQUE);\r\n\t\tthis._applyCommandBuffer(CameraEventFlags.BeforeSkyBox, context);\r\n\t\tscene._renderScene(context, ILaya3D.Scene3D.SCENERENDERFLAG_SKYBOX);\r\n\t\tthis._applyCommandBuffer(CameraEventFlags.BeforeTransparent, context);\r\n\t\tscene._renderScene(context, ILaya3D.Scene3D.SCENERENDERFLAG_RENDERTRANSPARENT);\r\n\t\tscene._componentDriver.callPostRender();//TODO:duo相机是否重复\r\n\t\tthis._applyCommandBuffer(CameraEventFlags.BeforeImageEffect, context);\r\n\t\t(renderTex) && (renderTex._end());\r\n\t\t//PostProcess TODO\r\n\t\t// if (needInternalRT) {\r\n\t\t// \tif (this._postProcess && this._postProcess.enable) {\r\n\t\t// \t\tthis._postProcess.commandContext = context;\r\n\t\t// \t\tthis._postProcess._render();\r\n\t\t// \t\tthis._postProcess._applyPostProcessCommandBuffers();\r\n\t\t// \t} else if (this._enableHDR || this._needBuiltInRenderTexture) {\r\n\t\t// \t\tvar canvasWidth: number = this._getCanvasWidth(), canvasHeight: number = this._getCanvasHeight();\r\n\t\t// \t\tif (this._offScreenRenderTexture) {\r\n\t\t// \t\t\tthis._screenOffsetScale.setValue(viewport.x / canvasWidth, viewport.y / canvasHeight, viewport.width / canvasWidth, viewport.height / canvasHeight);\r\n\t\t// \t\t\tthis._internalCommandBuffer._camera = this;\r\n\t\t// \t\t\tthis._internalCommandBuffer._context = context;\r\n\t\t// \t\t\tthis._internalCommandBuffer.blitScreenQuad(this._internalRenderTexture, this._offScreenRenderTexture, this._screenOffsetScale, null, null, 0, true);\r\n\t\t// \t\t\tthis._internalCommandBuffer._apply();\r\n\t\t// \t\t\tthis._internalCommandBuffer.clear();\r\n\t\t// \t\t}\r\n\t\t// \t}\r\n\t\t// \tRenderTexture.bindCanvasRender = this._internalRenderTexture;\r\n\t\t// \t//RenderTexture.recoverToPool(this._internalRenderTexture);\r\n\t\t// } else {\r\n\t\t// \tRenderTexture.bindCanvasRender = null;\r\n\t\t// }\r\n\t\tthis._applyCommandBuffer(CameraEventFlags.AfterEveryThing, context);\r\n\t}\r\n\r\n\t/**\r\n\t * null function\r\n\t */\r\n\tprotected _calculateProjectionMatrix(): void {\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tclear(gl: WebGLRenderingContext) {\r\n\t\tgl.viewport(0, 0, this._clientWidth, this._clientHeight);\r\n\t\tgl.scissor(0, 0, this._clientWidth, this._clientHeight);\r\n\t\tgl.clearColor(this.clearColor.r, this.clearColor.g, this.clearColor.b, this.clearColor.a);\r\n\t\tRenderStateContext.setDepthMask(true);\r\n\t\tgl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n\t}\r\n\r\n\t/**\r\n\t * destroy\r\n\t */\r\n\tdestroy() {\r\n\t\tsuper.destroy(true);\r\n\t}\r\n}\r\n\r\n\r\n","import { Component } from \"../../../components/Component\";\r\nimport { Rigidbody3D } from \"../Rigidbody3D\";\r\nimport { PhysicsSimulation } from \"../PhysicsSimulation\";\r\nimport { Physics3D } from \"../../Physics3D\";\r\nimport { Sprite3D } from \"laya/d3/core/Sprite3D\";\r\nimport { Scene3D } from \"laya/d3/core/scene/Scene3D\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\n\r\n/**\r\n * <code>ConstraintComponent</code> 类用于创建约束的父类。\r\n */\r\nexport class ConstraintComponent extends Component {\r\n    /** @internal TODO*/\r\n    static CONSTRAINT_POINT2POINT_CONSTRAINT_TYPE = 3;\r\n    /** @internal TODO*/\r\n    static CONSTRAINT_HINGE_CONSTRAINT_TYPE = 4;\r\n    /** @internal TODO*/\r\n    static CONSTRAINT_CONETWIST_CONSTRAINT_TYPE = 5;\r\n    /** @internal TODO*/\r\n    static CONSTRAINT_D6_CONSTRAINT_TYPE = 6;\r\n    /** @internal TODO*/\r\n    static CONSTRAINT_SLIDER_CONSTRAINT_TYPE = 7;\r\n    /** @internal TODO*/\r\n    static CONSTRAINT_CONTACT_CONSTRAINT_TYPE = 8;\r\n    /** @internal TODO*/\r\n    static CONSTRAINT_D6_SPRING_CONSTRAINT_TYPE = 9;\r\n    /** @internal TODO*/\r\n    static CONSTRAINT_GEAR_CONSTRAINT_TYPE = 10;\r\n    /** @internal */\r\n    static CONSTRAINT_FIXED_CONSTRAINT_TYPE = 11;\r\n    /** @internal TODO*/\r\n    static CONSTRAINT_MAX_CONSTRAINT_TYPE = 12;\r\n    /** @internal error reduction parameter (ERP)*/\r\n    static CONSTRAINT_CONSTRAINT_ERP = 1;\r\n    /** @internal*/\r\n    static CONSTRAINT_CONSTRAINT_STOP_ERP = 2;\r\n    /** @internal constraint force mixing（CFM）*/\r\n    static CONSTRAINT_CONSTRAINT_CFM = 3;\r\n    /** @internal*/\r\n    static CONSTRAINT_CONSTRAINT_STOP_CFM = 4;\r\n    /** @internal */\r\n    static tempForceV3: Vector3 = new Vector3();\r\n    /**@internal */\r\n    _btConstraint: any;\r\n    /** @internal */\r\n    _simulation: PhysicsSimulation;\r\n    /**@internal 回调参数*/\r\n    _btJointFeedBackObj: number;\r\n    /** @internal */\r\n    _anchor = new Vector3();\r\n    /** @internal */\r\n    _connectAnchor = new Vector3();\r\n    /** @internal */\r\n    _btframAPos: number;\t\t\t//TODO 记得删除\r\n    /** @internal */\r\n    _btframBPos: number;\t\t\t//TODO 记得删除\r\n    /** @internal */\r\n    _btframATrans: number;\t\t//TODO 记得删除\r\n    /** @internal */\r\n    _btframBTrans: number;\t\t//TODO 记得删除\r\n    /**@internal */\r\n    _constraintType: number;\r\n    /**@internal */\r\n    private _connectedBody: Rigidbody3D;\r\n    /**@internal */\r\n    private _ownBody: Rigidbody3D;\r\n    /**@internal */\r\n    private _feedbackEnabled = false;\r\n    /**@internal */\r\n    private _getJointFeedBack = false;\r\n    /**@internal */\r\n    private _currentForce = new Vector3();\r\n    /**@internal */\r\n    private _currentTorque = new Vector3();\r\n    /**@internal */\r\n    private _breakForce: number;\r\n    /**@internal */\r\n    private _breakTorque: number;\r\n\r\n    /** 连接的两个物体是否进行碰撞检测 */\r\n    disableCollisionsBetweenLinkedBodies = true;\r\n\r\n    /**\r\n     * 获取应用的冲力。\r\n     */\r\n    get appliedImpulse(): number {\r\n        if (!this._feedbackEnabled) {\r\n            this._btConstraint.EnableFeedback(true);\r\n            this._feedbackEnabled = true;\r\n        }\r\n        return this._btConstraint.AppliedImpulse;\r\n    }\r\n\r\n    /**@internal */\r\n    set connectedBody(value: Rigidbody3D) {\r\n        this._connectedBody = value;\r\n    }\r\n\r\n    /**\r\n     * 获取连接的刚体B。\r\n     * @return 已连接刚体B。\r\n     */\r\n    get connectedBody(): Rigidbody3D {\r\n        return this._connectedBody;\r\n    }\r\n\r\n\r\n    /**\r\n     * 获取连接的刚体A。\r\n     * @return 已连接刚体A。\r\n     */\r\n    get ownBody(): Rigidbody3D {\r\n        return this._ownBody;\r\n    }\r\n\r\n    /**@internal */\r\n    set ownBody(value: Rigidbody3D) {\r\n        this._ownBody = value;\r\n    }\r\n    /**\r\n     * 获得收到的总力\r\n     */\r\n    get currentForce(): Vector3 {\r\n        if (!this._getJointFeedBack)\r\n            this._getFeedBackInfo();\r\n        return this._currentForce;\r\n    }\r\n\r\n    /**\r\n     * 获取的总力矩\r\n     */\r\n    get currentTorque(): Vector3 {\r\n        if (!this._getJointFeedBack)\r\n            this._getFeedBackInfo();\r\n        return this._currentTorque;\r\n    }\r\n\r\n    /**\r\n     * 设置最大承受力\r\n     * @param value 最大承受力\r\n     */\r\n    get breakForce(): number {\r\n        return this._breakForce;\r\n    }\r\n    set breakForce(value: number) {\r\n        this._breakForce = value;\r\n    }\r\n\r\n    /**\r\n     * 设置最大承受力矩\r\n     * @param value 最大承受力矩\r\n     */\r\n    get breakTorque(): number {\r\n        return this._breakTorque;\r\n    }\r\n    set breakTorque(value: number) {\r\n        this._breakTorque = value;\r\n    }\r\n\r\n    /**\r\n     * 设置锚点\r\n     */\r\n    set anchor(value: Vector3) {\r\n        value.cloneTo(this._anchor);\r\n        this.setFrames();\r\n    }\r\n\r\n    get anchor() {\r\n        return this._anchor;\r\n    }\r\n\r\n    /**\r\n     * 设置链接锚点\r\n     */\r\n    set connectAnchor(value: Vector3) {\r\n        value.cloneTo(this._connectAnchor);\r\n        this.setFrames();\r\n    }\r\n\r\n    get connectAnchor(): Vector3 {\r\n        return this._connectAnchor;\r\n    }\r\n\r\n    /**\r\n     * 创建一个 <code>ConstraintComponent</code> 实例。\r\n     */\r\n    constructor(constraintType: number) {\r\n        super();\r\n        this._constraintType = constraintType;\r\n        var bt = Physics3D._bullet;\r\n        this._btframATrans = bt.btTransform_create();\r\n        this._btframBTrans = bt.btTransform_create();\r\n        bt.btTransform_setIdentity(this._btframATrans);\r\n        bt.btTransform_setIdentity(this._btframBTrans);\r\n        this._btframAPos = bt.btVector3_create(0, 0, 0);\r\n        this._btframBPos = bt.btVector3_create(0, 0, 0);\r\n        bt.btTransform_setOrigin(this._btframATrans, this._btframAPos);\r\n        bt.btTransform_setOrigin(this._btframBTrans, this._btframBPos);\r\n        this._breakForce = -1;\r\n        this._breakTorque = -1;\r\n    }\r\n\r\n    /**\r\n     * 设置迭代的次数，次数越高，越精确\r\n     * @param overideNumIterations \r\n     */\r\n    setOverrideNumSolverIterations(overideNumIterations: number): void {\r\n        var bt = Physics3D._bullet;\r\n        bt.btTypedConstraint_setOverrideNumSolverIterations(this._btConstraint, overideNumIterations);\r\n    }\r\n\r\n    /**\r\n     * 设置约束是否可用\r\n     * @param enable \r\n     */\r\n    setConstraintEnabled(enable: boolean): void {\r\n        var bt = Physics3D._bullet;\r\n        bt.btTypedConstraint_setEnabled(this._btConstraint, enable);\r\n    }\r\n\r\n    /**\r\n     * 设置约束的本地空间\r\n     */\r\n    setFrames() {\r\n        var bt = Physics3D._bullet;\r\n        bt.btVector3_setValue(this._btframAPos, this._anchor.x, this.anchor.y, this.anchor.z);\r\n        bt.btVector3_setValue(this._btframBPos, this._connectAnchor.x, this._connectAnchor.y, this._connectAnchor.z);\r\n        bt.btTransform_setOrigin(this._btframATrans, this._btframAPos);\r\n        bt.btTransform_setOrigin(this._btframBTrans, this._btframBPos);\r\n        /*\r\n        let q = new Quaternion();\r\n        Quaternion.createFromAxisAngle(new Vector3(0,0,1), Math.PI/2, q);\r\n        let q1 = bt.btQuaternion_create(q.x,q.y,q.z,q.w);\r\n        bt.btTransform_setRotation(this._btframBTrans,q1)\r\n        bt.btQuaternion_delete(q1);\r\n        */\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _addToSimulation(): void {\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _removeFromSimulation(): void {\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _createConstraint(): void {\r\n    }\r\n\r\n    /**\r\n     * 设置约束刚体\r\n     * @param ownerRigid \r\n     * @param connectRigidBody \r\n     * @override\r\n     */\r\n    setConnectRigidBody(ownerRigid: Rigidbody3D, connectRigidBody: Rigidbody3D) {\r\n        var ownerCanInSimulation = ownerRigid && !!(ownerRigid._simulation && ownerRigid._enabled && ownerRigid.colliderShape);\r\n        var connectCanInSimulation = connectRigidBody && !!(connectRigidBody._simulation && connectRigidBody._enabled && connectRigidBody.colliderShape);\r\n        if (!(ownerCanInSimulation && connectCanInSimulation))\r\n            throw \"ownerRigid or connectRigidBody is not in Simulation\";\r\n        if (ownerRigid != this._ownBody || connectRigidBody != this._connectedBody) {\r\n            var canInSimulation = !!(this.enabled && this._simulation);\r\n            canInSimulation && this._removeFromSimulation();\r\n            this._ownBody = ownerRigid;\r\n            this._connectedBody = connectRigidBody;\r\n            //this._ownBody.constaintRigidbodyA = this;\r\n            //this._connectedBody.constaintRigidbodyB = this;\r\n            this._createConstraint();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 连接两个刚体。\r\n     * 上面的限制太多，例如希望可以没有shape\r\n     * @param A \r\n     * @param B \r\n     */\r\n    _setConnectRigidBody(A: Rigidbody3D, B: Rigidbody3D) {\r\n        this.ownBody = A;\r\n        this.connectedBody = B;\r\n        this._createConstraint();\r\n    }\r\n\r\n\r\n    /**\r\n     * 获得当前力\r\n     * @param out \r\n     */\r\n    getcurrentForce(out: Vector3) {\r\n        if (!this._btJointFeedBackObj)\r\n            throw \"this Constraint is not simulation\";\r\n        var bt = Physics3D._bullet;\r\n        var applyForce: number = bt.btJointFeedback_getAppliedForceBodyA(this._btJointFeedBackObj);\r\n        out.setValue(bt.btVector3_x(applyForce), bt.btVector3_y(applyForce), bt.btVector3_z(applyForce));\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * 获取物理世界。\r\n     * 缺省的是从所属的scene3d取，子类可以提供另外的方法\r\n     * @returns \r\n     */\r\n    getPhysicsSimulation() {\r\n        return ((this.owner as Sprite3D)._scene as Scene3D).physicsSimulation;\r\n    }\r\n\r\n    /**\r\n     * 获得当前力矩\r\n     * @param out \r\n     */\r\n    getcurrentTorque(out: Vector3) {\r\n        if (!this._btJointFeedBackObj)\r\n            throw \"this Constraint is not simulation\";\r\n        var bt = Physics3D._bullet;\r\n        var applyTorque: number = bt.btJointFeedback_getAppliedTorqueBodyA(this._btJointFeedBackObj);\r\n        out.setValue(bt.btVector3_x(applyTorque), bt.btVector3_y(applyTorque), bt.btVector3_z(applyTorque));\r\n        return;\r\n    }\r\n\r\n    protected _onDestroy() {\r\n        var physics3D: any = Physics3D._bullet;\r\n        this._simulation && this._removeFromSimulation();\r\n        if (this._btConstraint && this._btJointFeedBackObj && this._simulation) {\r\n            physics3D.btTypedConstraint_destroy(this._btConstraint);\r\n            physics3D.btJointFeedback_destroy(this._btJointFeedBackObj);\r\n            this._btJointFeedBackObj = null;\r\n            this._btConstraint = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _isBreakConstrained(): Boolean {\r\n        this._getJointFeedBack = false;\r\n        if (this.breakForce == -1 && this.breakTorque == -1)\r\n            return false;\r\n        this._getFeedBackInfo();\r\n        var isBreakForce: Boolean = this._breakForce != -1 && (Vector3.scalarLength(this._currentForce) > this._breakForce);\r\n        var isBreakTorque: Boolean = this._breakTorque != -1 && (Vector3.scalarLength(this._currentTorque) > this._breakTorque);\r\n        if (isBreakForce || isBreakTorque) {\r\n            this._breakConstrained();\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @internal\r\n     * @override\r\n     */\r\n    _parse(data: any): void {\r\n        this._anchor.fromArray(data.anchor);\r\n        this._connectAnchor.fromArray(data.connectAnchor);\r\n        this.setFrames();\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    private _getFeedBackInfo() {\r\n        var bt = Physics3D._bullet;\r\n        var applyForce: number = bt.btJointFeedback_getAppliedForceBodyA(this._btJointFeedBackObj);\r\n        var applyTorque: number = bt.btJointFeedback_getAppliedTorqueBodyA(this._btJointFeedBackObj);\r\n        this._currentTorque.setValue(bt.btVector3_x(applyTorque), bt.btVector3_y(applyTorque), bt.btVector3_z(applyTorque));\r\n        this._currentForce.setValue(bt.btVector3_x(applyForce), bt.btVector3_y(applyForce), bt.btVector3_z(applyForce));\r\n        this._getJointFeedBack = true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _breakConstrained(): void {\r\n        this.destroy();\r\n    }\r\n}\r\n\r\n","import { ConstraintComponent } from \"./ConstraintComponent\";\r\nimport { Rigidbody3D } from \"../Rigidbody3D\";\r\nimport { Sprite3D } from \"../../core/Sprite3D\";\r\nimport { Physics3D } from \"../../Physics3D\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\n\r\n/**\r\n * <code>ConfigurableConstraint</code>类用于可设置的约束组件\r\n */\r\nexport class ConfigurableConstraint extends ConstraintComponent {\r\n    /** 约束限制模式  完全限制 */\r\n    static CONFIG_MOTION_TYPE_LOCKED = 0;\r\n    /** 约束限制模式  范围限制 */\r\n    static CONFIG_MOTION_TYPE_LIMITED = 1;\r\n    /** 约束限制模式  不限制 */\r\n    static CONFIG_MOTION_TYPE_FREE = 2;\r\n    /** @internal 线性x轴*/\r\n    static MOTION_LINEAR_INDEX_X = 0;\r\n    /** @internal 线性Y轴*/\r\n    static MOTION_LINEAR_INDEX_Y = 1;\r\n    /** @internal 线性Z轴*/\r\n    static MOTION_LINEAR_INDEX_Z = 2;\r\n    /** @internal 旋转X轴*/\r\n    static MOTION_ANGULAR_INDEX_X = 3;\r\n    /** @internal 旋转Y轴*/\r\n    static MOTION_ANGULAR_INDEX_Y = 4;\r\n    /** @internal 旋转Z轴*/\r\n    static MOTION_ANGULAR_INDEX_Z = 5;\r\n    /** @internal */\r\n    static RO_XYZ = 0;\r\n    /** @internal */\r\n    static RO_XZY = 1;\r\n    /** @internal */\r\n    static RO_YXZ = 2;\r\n    /** @internal */\r\n    static RO_YZX = 3;\r\n    /** @internal */\r\n    static RO_ZXY = 4;\r\n    /** @internal */\r\n    static RO_ZYX = 5;\r\n    /** @internal */\r\n    private _btAxis: number;\r\n    /** @internal */\r\n    private _btSecondaryAxis: number;\r\n    /** @internal */\r\n    private _axis = new Vector3();\r\n    /** @internal */\r\n    private _secondaryAxis = new Vector3();\r\n    /** @internal */\r\n    private _minLinearLimit = new Vector3();\r\n    /** @internal */\r\n    private _maxLinearLimit = new Vector3();\r\n    /** @internal */\r\n    private _minAngularLimit = new Vector3();\r\n    /** @internal */\r\n    private _maxAngularLimit = new Vector3();\r\n    /** @internal */\r\n    private _linearLimitSpring = new Vector3();\r\n    /** @internal */\r\n    private _angularLimitSpring = new Vector3();\r\n    /** @internal */\r\n    private _linearBounce = new Vector3();\r\n    /** @internal */\r\n    private _angularBounce = new Vector3();\r\n    /** @internal */\r\n    private _linearDamp = new Vector3();\r\n    /** @internal */\r\n    private _angularDamp = new Vector3();\r\n    /** @internal */\r\n    private _xMotion = 0;\r\n    /** @internal */\r\n    private _yMotion = 0;\r\n    /** @internal */\r\n    private _zMotion = 0;\r\n    /** @internal */\r\n    private _angularXMotion = 0;\r\n    /** @internal */\r\n    private _angularYMotion = 0;\r\n    /** @internal */\r\n    private _angularZMotion = 0;\r\n    /**\r\n     * 创建一个<code>ConfigurableConstraint</code>实例\t可设置的约束组件\r\n     */\r\n    constructor() {\r\n        super(ConstraintComponent.CONSTRAINT_D6_SPRING_CONSTRAINT_TYPE);\r\n        var bt = Physics3D._bullet;\r\n        this._btAxis = bt.btVector3_create(0, 0.0, 1);\r\n        this._btSecondaryAxis = bt.btVector3_create(0.0, 1.0, 0.0);\r\n    }\r\n\r\n    /**\r\n     * 主轴\r\n     */\r\n    get axis(): Vector3 {\r\n        return this._axis;\r\n    }\r\n\r\n    /**\r\n     * 副轴\r\n     */\r\n    get secondaryAxis(): Vector3 {\r\n        return this._secondaryAxis;\r\n    }\r\n\r\n    /**\r\n     * 旋转角度最大值\r\n     */\r\n    set maxAngularLimit(value: Vector3) {\r\n        value.cloneTo(this._maxAngularLimit);\r\n    }\r\n\r\n    /**\r\n     * 旋转角度最小值\r\n     */\r\n    set minAngularLimit(value: Vector3) {\r\n        value.cloneTo(this._minAngularLimit);\r\n    }\r\n\r\n    get maxAngularLimit(): Vector3 {\r\n        return this._maxAngularLimit;\r\n    }\r\n\r\n    get minAngularLimit(): Vector3 {\r\n        return this._minAngularLimit;\r\n    }\r\n\r\n    /**\r\n     * 最大线性位置\r\n     */\r\n    set maxLinearLimit(value: Vector3) {\r\n        value.cloneTo(this._maxLinearLimit);\r\n    }\r\n\r\n    /**\r\n     * 最小线性位置\r\n     */\r\n    set minLinearLimit(value: Vector3) {\r\n        value.cloneTo(this._minLinearLimit);\r\n    }\r\n\r\n\r\n    get maxLinearLimit(): Vector3 {\r\n        return this._maxLinearLimit;\r\n    }\r\n\r\n    get minLinearLimit(): Vector3 {\r\n        return this._minLinearLimit;\r\n    }\r\n    /**\r\n     * X轴线性约束模式\r\n     */\r\n    set XMotion(value: number) {\r\n        //坐标系转换\r\n        if (this._xMotion != value) {\r\n            this._xMotion = value;\r\n            this.setLimit(ConfigurableConstraint.MOTION_LINEAR_INDEX_X, value, this._minLinearLimit.x, this._maxLinearLimit.x);\r\n        }\r\n    }\r\n\r\n    get XMotion(): number {\r\n        return this._xMotion;\r\n    }\r\n\r\n    /**\r\n     * Y轴线性约束模式\r\n     */\r\n    set YMotion(value: number) {\r\n        if (this._yMotion != value) {\r\n            this._yMotion = value;\r\n            this.setLimit(ConfigurableConstraint.MOTION_LINEAR_INDEX_Y, value, this._minLinearLimit.y, this._maxLinearLimit.y);\r\n        }\r\n\r\n    }\r\n\r\n    get YMotion(): number {\r\n        return this._yMotion;\r\n    }\r\n\r\n    /**\r\n     * Z轴线性约束模式\r\n     */\r\n    set ZMotion(value: number) {\r\n        if (this._zMotion != value) {\r\n            this._zMotion = value;\r\n            this.setLimit(ConfigurableConstraint.MOTION_LINEAR_INDEX_Z, value, this._minLinearLimit.z, this._maxLinearLimit.z);\r\n        }\r\n    }\r\n\r\n    get ZMotion(): number {\r\n        return this._zMotion;\r\n    }\r\n\r\n    /**\r\n     * X轴旋转约束模式\r\n     */\r\n    set angularXMotion(value: number) {\r\n        //坐标系转换\r\n        if (this._angularXMotion != value) {\r\n            this._angularXMotion = value;\r\n            this.setLimit(ConfigurableConstraint.MOTION_ANGULAR_INDEX_X, value, this._minAngularLimit.x, this._maxAngularLimit.x);\r\n        }\r\n    }\r\n\r\n    get angularXMotion(): number {\r\n        return this._angularXMotion;\r\n    }\r\n\r\n    /**\r\n     * Y轴旋转约束模式\r\n     */\r\n    set angularYMotion(value: number) {\r\n        if (this._angularYMotion != value) {\r\n            this._angularYMotion = value;\r\n            this.setLimit(ConfigurableConstraint.MOTION_ANGULAR_INDEX_Y, value, this._minAngularLimit.y, this._maxAngularLimit.y);\r\n        }\r\n    }\r\n\r\n    get angularYMotion(): number {\r\n        return this._angularYMotion;\r\n    }\r\n\r\n    /**\r\n     * Z轴旋转约束模式\r\n     */\r\n    set angularZMotion(value: number) {\r\n        if (this._angularZMotion != value) {\r\n            this._angularZMotion = value;\r\n            this.setLimit(ConfigurableConstraint.MOTION_ANGULAR_INDEX_Z, value, this._minAngularLimit.z, this._maxAngularLimit.z);\r\n        }\r\n    }\r\n\r\n    get angularZMotion(): number {\r\n        return this._angularZMotion;\r\n    }\r\n\r\n    /**\r\n     * 线性弹簧\r\n     */\r\n    set linearLimitSpring(value: Vector3) {\r\n        if (!Vector3.equals(this._linearLimitSpring, value)) {\r\n            value.cloneTo(this._linearLimitSpring);\r\n            this.setSpring(ConfigurableConstraint.MOTION_LINEAR_INDEX_X, value.x);\r\n            this.setSpring(ConfigurableConstraint.MOTION_LINEAR_INDEX_Y, value.y);\r\n            this.setSpring(ConfigurableConstraint.MOTION_LINEAR_INDEX_Z, value.z);\r\n        }\r\n    }\r\n\r\n    get linearLimitSpring(): Vector3 {\r\n        return this._linearLimitSpring;\r\n    }\r\n\r\n    /**\r\n     * 角度弹簧\r\n     */\r\n    set angularLimitSpring(value: Vector3) {\r\n        if (!Vector3.equals(this._angularLimitSpring, value)) {\r\n            value.cloneTo(this._angularLimitSpring);\r\n            this.setSpring(ConfigurableConstraint.MOTION_ANGULAR_INDEX_X, value.x);\r\n            this.setSpring(ConfigurableConstraint.MOTION_ANGULAR_INDEX_Y, value.y);\r\n            this.setSpring(ConfigurableConstraint.MOTION_ANGULAR_INDEX_Z, value.z);\r\n        }\r\n    }\r\n\r\n    get angularLimitSpring(): Vector3 {\r\n        return this._angularLimitSpring;\r\n    }\r\n\r\n    /**\r\n     * 线性弹力\r\n     */\r\n    set linearBounce(value: Vector3) {\r\n        if (!Vector3.equals(this._linearBounce, value)) {\r\n            value.cloneTo(this._linearBounce);\r\n            this.setBounce(ConfigurableConstraint.MOTION_LINEAR_INDEX_X, value.x);\r\n            this.setBounce(ConfigurableConstraint.MOTION_LINEAR_INDEX_Y, value.y);\r\n            this.setBounce(ConfigurableConstraint.MOTION_LINEAR_INDEX_Z, value.z);\r\n        }\r\n    }\r\n\r\n    get linearBounce(): Vector3 {\r\n        return this._linearBounce;\r\n    }\r\n\r\n    /**\r\n     * 角度弹力\r\n     */\r\n    set angularBounce(value: Vector3) {\r\n        if (!Vector3.equals(this._angularBounce, value)) {\r\n            value.cloneTo(this._angularBounce);\r\n            this.setBounce(ConfigurableConstraint.MOTION_ANGULAR_INDEX_X, value.x);\r\n            this.setBounce(ConfigurableConstraint.MOTION_ANGULAR_INDEX_Y, value.y);\r\n            this.setBounce(ConfigurableConstraint.MOTION_ANGULAR_INDEX_Z, value.z);\r\n        }\r\n    }\r\n\r\n    get angularBounce(): Vector3 {\r\n        return this._angularBounce;\r\n    }\r\n\r\n    /**\r\n     * 线性阻力\r\n     */\r\n    set linearDamp(value: Vector3) {\r\n        if (!Vector3.equals(this._linearDamp, value)) {\r\n            value.cloneTo(this._linearDamp);\r\n            this.setDamping(ConfigurableConstraint.MOTION_LINEAR_INDEX_X, value.x);\r\n            this.setDamping(ConfigurableConstraint.MOTION_LINEAR_INDEX_Y, value.y);\r\n            this.setDamping(ConfigurableConstraint.MOTION_LINEAR_INDEX_Z, value.z);\r\n        }\r\n    }\r\n\r\n    get linearDamp(): Vector3 {\r\n        return this._linearDamp;\r\n    }\r\n\r\n    /**\r\n     * 角度阻力\r\n     */\r\n    set angularDamp(value: Vector3) {\r\n        if (!Vector3.equals(this._angularDamp, value)) {\r\n            value.cloneTo(this._angularDamp);\r\n            this.setDamping(ConfigurableConstraint.MOTION_ANGULAR_INDEX_X, value.x);\r\n            this.setDamping(ConfigurableConstraint.MOTION_ANGULAR_INDEX_Y, value.y);\r\n            this.setDamping(ConfigurableConstraint.MOTION_ANGULAR_INDEX_Z, value.z);\r\n        }\r\n    }\r\n\r\n    get angularDamp(): Vector3 {\r\n        return this._angularDamp;\r\n    }\r\n\r\n    /**\r\n     * 设置锚点\r\n     */\r\n    set anchor(value: Vector3) {\r\n        value.cloneTo(this._anchor);\r\n        this.setFrames();\r\n    }\r\n\r\n    get anchor() {\r\n        return this._anchor;\r\n    }\r\n\r\n    /**\r\n     * 设置链接锚点\r\n     */\r\n    set connectAnchor(value: Vector3) {\r\n        value.cloneTo(this._connectAnchor);\r\n        this.setFrames();\r\n    }\r\n\r\n    get connectAnchor(): Vector3 {\r\n        return this._connectAnchor;\r\n    }\r\n\r\n    /**\r\n     * 设置对象自然旋转的局部轴主轴，axis2为副轴\r\n     * @param axis1 \r\n     * @param axis2 \r\n     */\r\n    setAxis(axis: Vector3, secondaryAxis: Vector3): void {\r\n        if (!this._btConstraint)\r\n            return;\r\n        var bt = Physics3D._bullet;\r\n        this._axis.setValue(axis.x, axis.y, axis.y);\r\n        this._secondaryAxis.setValue(secondaryAxis.x, secondaryAxis.y, secondaryAxis.z);\r\n        bt.btVector3_setValue(this._btAxis, axis.x, axis.y, axis.z);\r\n        bt.btVector3_setValue(this._btSecondaryAxis, secondaryAxis.x, secondaryAxis.y, secondaryAxis.z);\r\n        bt.btGeneric6DofSpring2Constraint_setAxis(this._btConstraint, this._btAxis, this._btSecondaryAxis);\r\n    }\r\n\r\n    /**\r\n     * @internal \r\n     * 当LOCKED或者FREE的时候,low,high就没有用了\r\n     */\r\n    setLimit(axis: number, motionType: number, low?: number, high?: number): void {\r\n        if (!this._btConstraint)\r\n            return;\r\n        var bt = Physics3D._bullet;\r\n        switch (motionType) {\r\n            case ConfigurableConstraint.CONFIG_MOTION_TYPE_LOCKED:\r\n                bt.btGeneric6DofSpring2Constraint_setLimit(this._btConstraint, axis, 0, 0);\r\n                break;\r\n            case ConfigurableConstraint.CONFIG_MOTION_TYPE_LIMITED:\r\n                if (low < high)\r\n                    bt.btGeneric6DofSpring2Constraint_setLimit(this._btConstraint, axis, low, high);\r\n                break;\r\n            case ConfigurableConstraint.CONFIG_MOTION_TYPE_FREE:\r\n                bt.btGeneric6DofSpring2Constraint_setLimit(this._btConstraint, axis, 1, 0);\r\n                break;\r\n            default:\r\n                throw \"No Type of Axis Motion\";\r\n        }\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    setSpring(axis: number, springValue: number, limitIfNeeded: boolean = true): void {\r\n        if (!this._btConstraint)\r\n            return;\r\n        var bt = Physics3D._bullet;\r\n        var enableSpring: Boolean = springValue > 0;\r\n        bt.btGeneric6DofSpring2Constraint_enableSpring(this._btConstraint, axis, enableSpring);\r\n        if (enableSpring)\r\n            bt.btGeneric6DofSpring2Constraint_setStiffness(this._btConstraint, axis, springValue, limitIfNeeded);\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    setBounce(axis: number, bounce: number): void {\r\n        if (!this._btConstraint)\r\n            return;\r\n        var bt = Physics3D._bullet;\r\n        bounce = bounce <= 0 ? 0 : bounce;\r\n        bt.btGeneric6DofSpring2Constraint_setBounce(this._btConstraint, axis, bounce);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    setDamping(axis: number, damp: number, limitIfNeeded: boolean = true): void {\r\n        if (!this._btConstraint)\r\n            return;\r\n        var bt = Physics3D._bullet;\r\n        damp = damp <= 0 ? 0 : damp;\r\n        bt.btGeneric6DofSpring2Constraint_setDamping(this._btConstraint, axis, damp, limitIfNeeded);\r\n    }\r\n    /**\r\n     * TODO\r\n     * @internal\r\n     */\r\n    setEquilibriumPoint(axis: number, equilibriumPoint: number): void {\r\n        var bt = Physics3D._bullet;\r\n        bt.btGeneric6DofSpring2Constraint_setEquilibriumPoint(this._btConstraint, axis, equilibriumPoint);\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    enableMotor(axis: number, isEnableMotor: boolean): void {\r\n        var bt = Physics3D._bullet;\r\n        bt.btGeneric6DofSpring2Constraint_enableMotor(this._btConstraint, axis, isEnableMotor);\r\n    }\r\n    /**\r\n     * TODO\r\n     * @internal\r\n     */\r\n    setServo(axis: number, onOff: boolean): void {\r\n        var bt = Physics3D._bullet;\r\n        bt.btGeneric6DofSpring2Constraint_setServo(this._btConstraint, axis, onOff);\r\n    }\r\n    /**\r\n     * TODO\r\n     * @internal\r\n     */\r\n    setTargetVelocity(axis: number, velocity: number): void {\r\n        var bt = Physics3D._bullet;\r\n        bt.btGeneric6DofSpring2Constraint_setTargetVelocity(this._btConstraint, axis, velocity);\r\n    }\r\n    /**\r\n     * TODO\r\n     * @internal\r\n     */\r\n    setTargetPosition(axis: number, target: number): void {\r\n        var bt = Physics3D._bullet;\r\n        bt.btGeneric6DofSpring2Constraint_setServoTarget(this._btConstraint, axis, target);\r\n    }\r\n    /**\r\n     * TODO\r\n     * @internal\r\n     */\r\n    setMaxMotorForce(axis: number, force: number): void {\r\n        var bt = Physics3D._bullet;\r\n        bt.btGeneric6DofSpring2Constraint_setMaxMotorForce(this._btConstraint, axis, force);\r\n    }\r\n    /**\r\n     * TODO\r\n     * @internal\r\n     */\r\n    setParam(axis: number, constraintParams: number, value: number): void {\r\n        var bt = Physics3D._bullet;\r\n        bt.btTypedConstraint_setParam(this._btConstraint, axis, constraintParams, value);\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     * @internal\r\n     */\r\n    setFrames(): void {\r\n        super.setFrames();\r\n        var bt = Physics3D._bullet;\r\n        if (!this._btConstraint)\r\n            return;\r\n        bt.btGeneric6DofSpring2Constraint_setFrames(this._btConstraint, this._btframATrans, this._btframBTrans);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _addToSimulation(): void {\r\n        this._simulation && this._simulation.addConstraint(this, this.disableCollisionsBetweenLinkedBodies);\r\n    }\r\n\r\n    /**\r\n    * @internal\r\n    */\r\n    _removeFromSimulation(): void {\r\n        this._simulation.removeConstraint(this);\r\n        this._simulation = null;\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     * @internal\r\n     */\r\n    _createConstraint(): void {\r\n        var bt = Physics3D._bullet;\r\n        this._btConstraint = bt.btGeneric6DofSpring2Constraint_create(this.ownBody.btColliderObject, this._btframATrans, this.connectedBody.btColliderObject, this._btframBTrans, ConfigurableConstraint.RO_XYZ);\r\n        this._btJointFeedBackObj = bt.btJointFeedback_create(this._btConstraint);\r\n        bt.btTypedConstraint_setJointFeedback(this._btConstraint, this._btJointFeedBackObj);\r\n        this._initAllConstraintInfo();\r\n        bt.btTypedConstraint_setEnabled(this._btConstraint, true);\r\n\r\n        this._simulation = this.getPhysicsSimulation();// (<Scene3D>this.owner._scene).physicsSimulation;\r\n        this._addToSimulation();\r\n    }\r\n\r\n    _initAllConstraintInfo(): void {\r\n        //MotionMode\r\n        this.setLimit(ConfigurableConstraint.MOTION_LINEAR_INDEX_X, this._xMotion, this._minLinearLimit.x, this._maxLinearLimit.x);\r\n        this.setLimit(ConfigurableConstraint.MOTION_LINEAR_INDEX_Y, this._yMotion, this._minLinearLimit.y, this._maxLinearLimit.y);\r\n        this.setLimit(ConfigurableConstraint.MOTION_LINEAR_INDEX_Z, this._zMotion, this._minLinearLimit.z, this._maxLinearLimit.z);\r\n        this.setLimit(ConfigurableConstraint.MOTION_ANGULAR_INDEX_X, this._angularXMotion, this._minAngularLimit.x, this._maxAngularLimit.x);\r\n        this.setLimit(ConfigurableConstraint.MOTION_ANGULAR_INDEX_Y, this._angularYMotion, this._minAngularLimit.y, this._maxAngularLimit.y);\r\n        this.setLimit(ConfigurableConstraint.MOTION_ANGULAR_INDEX_Z, this._angularZMotion, this._minAngularLimit.z, this._maxAngularLimit.z);\r\n        this.setSpring(ConfigurableConstraint.MOTION_LINEAR_INDEX_X, this._linearLimitSpring.x);\r\n        this.setSpring(ConfigurableConstraint.MOTION_LINEAR_INDEX_Y, this._linearLimitSpring.y);\r\n        this.setSpring(ConfigurableConstraint.MOTION_LINEAR_INDEX_Z, this._linearLimitSpring.z);\r\n        this.setSpring(ConfigurableConstraint.MOTION_ANGULAR_INDEX_X, this._angularLimitSpring.x);\r\n        this.setSpring(ConfigurableConstraint.MOTION_ANGULAR_INDEX_Y, this._angularLimitSpring.y);\r\n        this.setSpring(ConfigurableConstraint.MOTION_ANGULAR_INDEX_Z, this._angularLimitSpring.z);\r\n        this.setBounce(ConfigurableConstraint.MOTION_LINEAR_INDEX_X, this._linearBounce.x);\r\n        this.setBounce(ConfigurableConstraint.MOTION_LINEAR_INDEX_Y, this._linearBounce.y);\r\n        this.setBounce(ConfigurableConstraint.MOTION_LINEAR_INDEX_Z, this._linearBounce.z);\r\n        this.setBounce(ConfigurableConstraint.MOTION_ANGULAR_INDEX_X, this._angularBounce.x);\r\n        this.setBounce(ConfigurableConstraint.MOTION_ANGULAR_INDEX_Y, this._angularBounce.y);\r\n        this.setBounce(ConfigurableConstraint.MOTION_ANGULAR_INDEX_Z, this._angularBounce.z);\r\n        this.setDamping(ConfigurableConstraint.MOTION_LINEAR_INDEX_X, this._linearDamp.x);\r\n        this.setDamping(ConfigurableConstraint.MOTION_LINEAR_INDEX_Y, this._linearDamp.y);\r\n        this.setDamping(ConfigurableConstraint.MOTION_LINEAR_INDEX_Z, this._linearDamp.z);\r\n        this.setDamping(ConfigurableConstraint.MOTION_ANGULAR_INDEX_X, this._angularDamp.x);\r\n        this.setDamping(ConfigurableConstraint.MOTION_ANGULAR_INDEX_Y, this._angularDamp.y);\r\n        this.setDamping(ConfigurableConstraint.MOTION_ANGULAR_INDEX_Z, this._angularDamp.z);\r\n        this.setFrames();\r\n        this.setEquilibriumPoint(0, 0);\r\n    }\r\n\r\n\r\n    protected _onEnable(): void {\r\n        if (this._btConstraint)\r\n            Physics3D._bullet.btTypedConstraint_setEnabled(this._btConstraint, true);\r\n    }\r\n\r\n    protected _onDisable(): void {\r\n        if (!this.connectedBody && this._simulation)\r\n            this._removeFromSimulation();\r\n        if (this._btConstraint)\r\n            Physics3D._bullet.btTypedConstraint_setEnabled(this._btConstraint, false);\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @internal\r\n     * @override\r\n     */\r\n    _parse(data: any, interactMap: any = null): void {\r\n        super._parse(data);\r\n        this._axis.fromArray(data.axis);\r\n        this._secondaryAxis.fromArray(data.secondaryAxis);\r\n        var limitlimit: number = data.linearLimit;\r\n        this._minLinearLimit.setValue(-limitlimit, -limitlimit, -limitlimit);\r\n        this._maxLinearLimit.setValue(limitlimit, limitlimit, limitlimit);\r\n        var limitSpring: number = data.linearLimitSpring;\r\n        this._linearLimitSpring.setValue(limitSpring, limitSpring, limitSpring);\r\n        var limitDamp: number = data.linearLimitDamper;\r\n        this._linearDamp.setValue(limitDamp, limitDamp, limitDamp);\r\n        var limitBounciness: number = data.linearLimitBounciness;\r\n        this._linearBounce.setValue(limitBounciness, limitBounciness, limitBounciness);\r\n        var xlowAngularLimit: number = data.lowAngularXLimit;\r\n        var xhighAngularLimit: number = data.highAngularXLimit;\r\n        var yAngularLimit: number = data.angularYLimit;\r\n        var zAngularLimit: number = data.angularZLimit;\r\n        this._minAngularLimit.setValue(xlowAngularLimit, -yAngularLimit, -zAngularLimit);\r\n        this._maxAngularLimit.setValue(xhighAngularLimit, yAngularLimit, zAngularLimit);\r\n        var xhighAngularBounciness: number = data.highAngularXLimitBounciness;\r\n        var ybounciness: number = data.angularYLimitBounciness;\r\n        var zbounciness: number = data.angularZLimitBounciness;\r\n        this._angularBounce.setValue(xhighAngularBounciness, ybounciness, zbounciness);\r\n        var xAngularSpring: number = data.angularXLimitSpring;\r\n        var yzAngularSpriny: number = data.angularYZLimitSpring;\r\n        this._angularLimitSpring.setValue(xAngularSpring, yzAngularSpriny, yzAngularSpriny);\r\n        var xAngularDamper: number = data.angularXLimitDamper;\r\n        var yzAngularDamper: number = data.angularYZLimitDamper;\r\n        this._angularDamp.setValue(xAngularDamper, yzAngularDamper, yzAngularDamper);\r\n\r\n        this.XMotion = data.xMotion;\r\n        this.YMotion = data.yMotion;\r\n        this.ZMotion = data.zMotion;\r\n        this.angularXMotion = data.angularXMotion;\r\n        this.angularYMotion = data.angularYMotion;\r\n        this.angularZMotion = data.angularZMotion;\r\n\r\n        if (data.rigidbodyID != -1 && data.connectRigidbodyID != -1) {\r\n            interactMap.component.push(this);\r\n            interactMap.data.push(data);\r\n        }\r\n        (data.breakForce != undefined) && (this.breakForce = data.breakForce);\r\n        (data.breakTorque != undefined) && (this.breakTorque = data.breakTorque);\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     * @internal\r\n     * @override\r\n     */\r\n    _parseInteractive(data: any = null, spriteMap: any = null) {\r\n        var rigidBodySprite: Sprite3D = spriteMap[data.rigidbodyID];\r\n        var rigidBody: Rigidbody3D = rigidBodySprite.getComponent(Rigidbody3D);\r\n        var connectSprite: Sprite3D = spriteMap[data.connectRigidbodyID];\r\n        var connectRigidbody: Rigidbody3D = connectSprite.getComponent(Rigidbody3D);\r\n        this.ownBody = rigidBody;\r\n        this.connectedBody = connectRigidbody;\r\n\r\n    }\r\n}","import { ConstraintComponent } from \"./ConstraintComponent\";\r\nimport { Sprite3D } from \"../../core/Sprite3D\";\r\nimport { Rigidbody3D } from \"../Rigidbody3D\";\r\nimport { Physics3D } from \"../../Physics3D\";\r\n\r\nexport class FixedConstraint extends ConstraintComponent {\r\n    /**\r\n     * 创建一个<code>FixedConstraint</code>实例\r\n     */\r\n    constructor() {\r\n        super(ConstraintComponent.CONSTRAINT_FIXED_CONSTRAINT_TYPE);\r\n        this.breakForce = -1;\r\n        this.breakTorque = -1;\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     * @internal\r\n     */\r\n    _addToSimulation(): void {\r\n        this._simulation && this._simulation.addConstraint(this, this.disableCollisionsBetweenLinkedBodies);\r\n    }\r\n\r\n    /**\r\n    * @inheritDoc\r\n    * @override\r\n    * @internal\r\n    */\r\n    _removeFromSimulation(): void {\r\n        this._simulation.removeConstraint(this);\r\n        this._simulation = null;\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     * @internal\r\n     */\r\n    _createConstraint(): void {\r\n        if (this.ownBody && this.ownBody._simulation && this.connectedBody && this.connectedBody._simulation) {\r\n            var bt = Physics3D._bullet;\r\n            this._btConstraint = bt.btFixedConstraint_create(this.ownBody.btColliderObject, this._btframATrans, this.connectedBody.btColliderObject, this._btframBTrans)\r\n            this._btJointFeedBackObj = bt.btJointFeedback_create(this._btConstraint);\r\n            bt.btTypedConstraint_setJointFeedback(this._btConstraint, this._btJointFeedBackObj);\r\n            bt.btTypedConstraint_setEnabled(this._btConstraint, true);\r\n\r\n            this._simulation = this.getPhysicsSimulation();// (<Scene3D>this.owner._scene).physicsSimulation;\r\n            this._addToSimulation();\r\n        }\r\n    }\r\n\r\n    protected _onEnable(): void {\r\n        if (this._btConstraint)\r\n            Physics3D._bullet.btTypedConstraint_setEnabled(this._btConstraint, true);\r\n    }\r\n\r\n    protected _onDisable(): void {\r\n        if (!this.connectedBody)\r\n            this._removeFromSimulation();\r\n        if (this._btConstraint)\r\n            Physics3D._bullet.btTypedConstraint_setEnabled(this._btConstraint, false);\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @internal\r\n     * @override\r\n     */\r\n    _parse(data: any, interactMap: any = null): void {\r\n        super._parse(data);\r\n        if (data.rigidbodyID != -1 && data.connectRigidbodyID != -1) {\r\n            interactMap.component.push(this);\r\n            interactMap.data.push(data);\r\n        }\r\n        (data.breakForce != undefined) && (this.breakForce = data.breakForce);\r\n        (data.breakTorque != undefined) && (this.breakTorque = data.breakTorque);\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     * @internal\r\n     * @override\r\n     */\r\n    _parseInteractive(data: any = null, spriteMap: any = null) {\r\n        var rigidBodySprite: Sprite3D = spriteMap[data.rigidbodyID];\r\n        var rigidBody: Rigidbody3D = rigidBodySprite.getComponent(Rigidbody3D);\r\n        var connectSprite: Sprite3D = spriteMap[data.connectRigidbodyID];\r\n        var connectRigidbody: Rigidbody3D = connectSprite.getComponent(Rigidbody3D);\r\n        this.ownBody = rigidBody;\r\n        this.connectedBody = connectRigidbody;\r\n\r\n    }\r\n}","import { Sprite3D } from \"../core/Sprite3D\";\r\nimport { Physics3D } from \"../Physics3D\";\r\nimport { Physics3DUtils } from \"../utils/Physics3DUtils\";\r\nimport { PhysicsComponent } from \"./PhysicsComponent\";\r\nimport { PhysicsTriggerComponent } from \"./PhysicsTriggerComponent\";\r\n\r\n/**\r\n * <code>PhysicsCollider</code> 类用于创建物理碰撞器。\r\n */\r\nexport class PhysicsCollider extends PhysicsTriggerComponent {\r\n\r\n    /**\r\n     * 创建一个 <code>PhysicsCollider</code> 实例。\r\n     * @param collisionGroup 所属碰撞组。\r\n     * @param canCollideWith 可产生碰撞的碰撞组。\r\n     */\r\n    constructor(collisionGroup: number = Physics3DUtils.COLLISIONFILTERGROUP_DEFAULTFILTER, canCollideWith: number = Physics3DUtils.COLLISIONFILTERGROUP_ALLFILTER) {\r\n        super(collisionGroup, canCollideWith);\r\n        this._enableProcessCollisions = false;\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     * @internal\r\n     */\r\n    _addToSimulation(): void {\r\n        this._simulation._addPhysicsCollider(this, this._collisionGroup, this._canCollideWith);\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     * @internal\r\n     */\r\n    _removeFromSimulation(): void {\r\n        this._simulation._removePhysicsCollider(this);\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     * @internal\r\n     */\r\n    _parse(data: any): void {\r\n        (data.friction != null) && (this.friction = data.friction);\r\n        (data.rollingFriction != null) && (this.rollingFriction = data.rollingFriction);\r\n        (data.restitution != null) && (this.restitution = data.restitution);\r\n        (data.isTrigger != null) && (this.isTrigger = data.isTrigger);\r\n        super._parse(data);\r\n        this._parseShape(data.shapes);\r\n    }\r\n\r\n    protected _onAdded(): void {\r\n        var bt: any = Physics3D._bullet;\r\n        var btColObj: number = bt.btCollisionObject_create();\r\n        bt.btCollisionObject_setUserIndex(btColObj, this.id);\r\n        bt.btCollisionObject_forceActivationState(btColObj, PhysicsComponent.ACTIVATIONSTATE_DISABLE_SIMULATION);//prevent simulation\r\n\r\n        var flags: number = bt.btCollisionObject_getCollisionFlags(btColObj);\r\n        if ((<Sprite3D>this.owner).isStatic) {//TODO:\r\n            if ((flags & PhysicsComponent.COLLISIONFLAGS_KINEMATIC_OBJECT) > 0)\r\n                flags = flags ^ PhysicsComponent.COLLISIONFLAGS_KINEMATIC_OBJECT;\r\n            flags = flags | PhysicsComponent.COLLISIONFLAGS_STATIC_OBJECT;\r\n        } else {\r\n            if ((flags & PhysicsComponent.COLLISIONFLAGS_STATIC_OBJECT) > 0)\r\n                flags = flags ^ PhysicsComponent.COLLISIONFLAGS_STATIC_OBJECT;\r\n            flags = flags | PhysicsComponent.COLLISIONFLAGS_KINEMATIC_OBJECT;\r\n        }\r\n        bt.btCollisionObject_setCollisionFlags(btColObj, flags);\r\n        this._btColliderObject = btColObj;\r\n        super._onAdded();\r\n    }\r\n}\r\n\r\n\r\n","import { ClassUtils } from \"../../utils/ClassUtils\";\r\nimport { CharacterController } from \"./CharacterController\";\r\nimport { ConfigurableConstraint } from \"./constraints/ConfigurableConstraint\";\r\nimport { FixedConstraint } from \"./constraints/FixedConstraint\";\r\nimport { PhysicsCollider } from \"./PhysicsCollider\";\r\nimport { Rigidbody3D } from \"./Rigidbody3D\";\r\n\r\nlet c = ClassUtils.regClass;\r\nc(\"CharacterController\", CharacterController);\r\nc(\"Rigidbody3D\", Rigidbody3D);\r\nc(\"PhysicsCollider\", PhysicsCollider);\r\nc(\"ConfigurableConstraint\", ConfigurableConstraint);\r\nc(\"FixedConstraint\", FixedConstraint);","import { Script } from \"../../components/Script\";\r\n\r\n/**\r\n * 保持对2.0的兼容。新脚本支持使用Script即可。\r\n */\r\nexport var Script3D = Script;\r\nexport type Script3D = Script;\r\n","import { ShaderData, ShaderDataType } from \"../../../RenderEngine/RenderShader/ShaderData\";\r\nimport { Matrix4x4 } from \"../../../maths/Matrix4x4\";\r\nimport { MeshFilter } from \"../../core/MeshFilter\";\r\nimport { RenderableSprite3D } from \"../../core/RenderableSprite3D\";\r\nimport { Sprite3D } from \"../../core/Sprite3D\";\r\nimport { Transform3D } from \"../../core/Transform3D\";\r\nimport { BaseRender } from \"../../core/render/BaseRender\";\r\nimport { RenderContext3D } from \"../../core/render/RenderContext3D\";\r\nimport { RenderElement } from \"../../core/render/RenderElement\";\r\nimport { BoundFrustum } from \"../../math/BoundFrustum\";\r\nimport { Bounds } from \"../../math/Bounds\";\r\nimport { MeshUtil } from \"../../resource/models/MeshUtil\";\r\nimport { HLODBatchMesh } from \"./HLODBatchMesh\";\r\nimport { HLODElement } from \"./HLODUtil\";\r\n\r\nexport class HLODRender extends BaseRender {\r\n\r\n    /**@internal */\r\n    _singleton: boolean;\r\n\r\n    /**@internal */\r\n    _curHLODRS: HLODElement;\r\n\r\n    /**@internal */\r\n    _curSubBatchMeshBounds: Bounds[];\r\n\r\n    constructor() {\r\n        super();\r\n        this._singleton = false;\r\n\r\n    }\r\n\r\n    /**\r\n     * set HLOD element\r\n     */\r\n    get curHLODRS() {\r\n        return this._curHLODRS;\r\n    }\r\n\r\n    set curHLODRS(value: HLODElement) {\r\n        if (!this._curHLODRS) {\r\n            this._renderElements = [];\r\n            this._renderElements.push(new RenderElement());\r\n            this._renderElements[0].render = this;\r\n        }\r\n        if (value != this._curHLODRS) {\r\n            this._changeMesh(value.HLODMesh);\r\n            this._curHLODRS = value;//顺序不可变换\r\n            this._createRenderelementByHLODElement(this._curHLODRS, this._renderElements[0]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 根据LOD资源生成渲染节点\r\n     * @param source \r\n     * @returns \r\n     */\r\n    private _createRenderelementByHLODElement(source: HLODElement, out: RenderElement) {\r\n        out.setGeometry(source.HLODMesh);\r\n        out.material = source.material;\r\n    }\r\n\r\n    /**\r\n     * change Render Mesh\r\n     */\r\n    private _changeMesh(lodMesh: HLODBatchMesh) {\r\n        var defineDatas: ShaderData = this._shaderValues;\r\n        this.boundsChange = true;\r\n        let meshDefines = MeshFilter._meshVerticeDefine;\r\n        if (this.curHLODRS) {\r\n            MeshUtil.getMeshDefine(this.curHLODRS.HLODMesh.batchMesh, meshDefines);\r\n            for (var i: number = 0, n: number = meshDefines.length; i < n; i++)\r\n                defineDatas.removeDefine(MeshFilter._meshVerticeDefine[i]);\r\n        }\r\n        if (lodMesh) {\r\n            MeshUtil.getMeshDefine(lodMesh.batchMesh, meshDefines);\r\n            for (var i: number = 0, n: number = MeshFilter._meshVerticeDefine.length; i < n; i++)\r\n                defineDatas.addDefine(MeshFilter._meshVerticeDefine[i]);\r\n        }\r\n        //update submesh Bounds\r\n        this._curSubBatchMeshBounds.length = lodMesh.batchSubMeshInfo.length;\r\n        for (let i = 0, n = lodMesh.batchSubMeshInfo.length; i < n; i++) {\r\n            this._curSubBatchMeshBounds[i] = this._curSubBatchMeshBounds[i] ? this._curSubBatchMeshBounds[i] : new Bounds();\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * @override\r\n     * @internal\r\n     * 全局贴图\r\n     */\r\n    _applyLightMapParams() {\r\n        if (!this._scene) return;\r\n        var shaderValues = this._shaderValues;\r\n        var lightMap = this._curHLODRS.lightmap;\r\n        if (lightMap && lightMap.lightmapColor) {\r\n            shaderValues.setTexture(RenderableSprite3D.LIGHTMAP, lightMap.lightmapColor);\r\n            shaderValues.addDefine(RenderableSprite3D.SAHDERDEFINE_LIGHTMAP);\r\n            if (lightMap.lightmapDirection) {\r\n                shaderValues.setTexture(RenderableSprite3D.LIGHTMAP_DIRECTION, lightMap.lightmapDirection);\r\n                shaderValues.addDefine(RenderableSprite3D.SHADERDEFINE_LIGHTMAP_DIRECTIONAL);\r\n            }\r\n            else {\r\n                shaderValues.removeDefine(RenderableSprite3D.SHADERDEFINE_LIGHTMAP_DIRECTIONAL);\r\n            }\r\n        } else {\r\n            shaderValues.removeDefine(RenderableSprite3D.SAHDERDEFINE_LIGHTMAP);\r\n            shaderValues.removeDefine(RenderableSprite3D.SHADERDEFINE_LIGHTMAP_DIRECTIONAL);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * re caculate BoundBox\r\n     */\r\n    _calculateBoundingBox() {\r\n        // todo 根节点移动更新包围盒\r\n        if (this._curHLODRS) {\r\n            var sharedMesh: HLODBatchMesh = this._curHLODRS.HLODMesh;\r\n            if (sharedMesh) {\r\n                var worldMat: Matrix4x4 = this._transform.worldMatrix;\r\n                sharedMesh.batchMesh.bounds._tranform(worldMat, this._bounds);\r\n            }\r\n            //Update \r\n            for (let i = 0, n = this._curSubBatchMeshBounds.length; i < n; i++) {\r\n                sharedMesh.batchSubMeshInfo[i].bounds._tranform(worldMat, this._curSubBatchMeshBounds[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * update data\r\n     * @param context \r\n     * @param transform \r\n     */\r\n    _renderUpdate(context: RenderContext3D, transform: Transform3D): void {\r\n        this._applyLightMapParams();\r\n        // // todo 若有根节点, 在这里更新 worldmatrix\r\n        this._setShaderValue(Sprite3D.WORLDMATRIX, ShaderDataType.Matrix4x4, this._transform.worldMatrix);\r\n    }\r\n\r\n    _needRender(boundFrustum: BoundFrustum, context: RenderContext3D): boolean {\r\n        if (boundFrustum){\r\n            if(boundFrustum.intersects(this.bounds)){\r\n                let hodMesh = this.curHLODRS.HLODMesh.drawSubMeshs;\r\n                let lodbatchMesh =this._curHLODRS.HLODMesh.batchSubMeshInfo;\r\n                hodMesh.length = 0;\r\n                for(let i = 0,n = this._curSubBatchMeshBounds.length;i<n;i++){\r\n                    if(boundFrustum.intersects(this._curSubBatchMeshBounds[i])){\r\n                        hodMesh.push(lodbatchMesh[i]);\r\n                    }\r\n                }\r\n                //sort TODO\r\n                // let position = context.camera.transform.position;\r\n                // let oriPisition = (this.owner as Sprite3D)\r\n                // hodMesh = hodMesh.sort((a,b)=>{\r\n                    \r\n                //     return 10;\r\n                // });\r\n                this._curHLODRS.HLODMesh.drawSubMeshs = hodMesh;\r\n                return true;\r\n            }\r\n            else\r\n                return false\r\n        }else{\r\n            return true;\r\n        }\r\n    }\r\n\r\n    onEnable() {\r\n        super.onEnable();\r\n    }\r\n\r\n    onDisable() {\r\n        super.onDisable();\r\n    }\r\n\r\n    onDestroy() {\r\n        super.onDestroy();\r\n        this._renderElements.forEach(element => {\r\n            element.material._removeReference();\r\n            element.destroy();\r\n        });\r\n        this._renderElements = null;\r\n    }\r\n\r\n    _cloneTo(dest: HLODRender) {\r\n        //TODO\r\n    }\r\n}","import { Component } from \"../../../components/Component\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\nimport { Camera } from \"../../core/Camera\";\r\nimport { Sprite3D } from \"../../core/Sprite3D\";\r\nimport { Scene3D } from \"../../core/scene/Scene3D\";\r\nimport { Bounds } from \"../../math/Bounds\";\r\nimport { HLODRender } from \"./HLODRender\";\r\nimport { HLODConfig, HLODResourceGroup } from \"./HLODUtil\";\r\n\r\nconst tempVec = new Vector3();\r\n\r\nexport class HLOD extends Component {\r\n    /**@internal */\r\n    _resourceList: HLODResourceGroup[];\r\n    /**@internal */\r\n    _curLODSource: HLODResourceGroup;\r\n    /**@internal 包围盒*/\r\n    _bounds: Bounds;\r\n    /**@internal */\r\n    _curRender: HLODRender[];\r\n    /**@internal TODO*/\r\n    //_crossRender: HLODRender[];\r\n    /**@internal TODO*/\r\n    //_renderMode:\r\n    /**@internal TODO*/\r\n    //cacheRender:HLODRender[];\r\n    /**@internal */\r\n    _HLODConfig: HLODConfig;\r\n    /**@internal */\r\n    private _lodRateArray: number[];\r\n    /**@internal */\r\n    private _size: number;\r\n\r\n    \r\n    constructor() {\r\n        super();\r\n        this._singleton = true;\r\n    }\r\n\r\n    /**\r\n     * IDE\r\n     */\r\n    get bounds() {\r\n        return this._bounds;\r\n    }\r\n\r\n    set bounds(value: Bounds) {\r\n        this._bounds = value;\r\n        this.recalculateBounds();\r\n    }\r\n\r\n    /**\r\n     * IDE\r\n     */\r\n    get lodResource() {\r\n        return this._resourceList;\r\n    }\r\n    set lodResource(value: HLODResourceGroup[]) {\r\n        this._resourceList = value;\r\n    }\r\n\r\n\r\n    /**\r\n     * lod裁剪过滤\r\n     */\r\n    set lodCullRateArray(value: number[]) {\r\n        value.sort((a, b) => b - a);\r\n        this._lodRateArray = value;\r\n    }\r\n\r\n    get lodCullRateArray() {\r\n        return this._lodRateArray;\r\n    }\r\n\r\n    private _applyLODResource(resource: HLODResourceGroup) {\r\n        this._curLODSource = resource;\r\n        let element = resource.resources;\r\n        for (let i = 0, n = element.length; i < n; i++) {\r\n            let hlodRender = this.owner.addComponent(HLODRender);\r\n            this._curRender.push(hlodRender);\r\n            hlodRender.curHLODRS = element[i];\r\n        }\r\n    }\r\n\r\n    private _releaseGroupRender() {\r\n        this._curRender.forEach(element => {\r\n            element.destroy();\r\n        });\r\n        this._curRender = [];\r\n    }\r\n\r\n\r\n    /**\r\n     * @internal\r\n     * 重新计算包围盒\r\n     */\r\n    recalculateBounds() {\r\n        //如果移动了就修改Bounds\r\n        let extend = this._bounds.getExtent();\r\n        this._size = 2 * Math.max(extend.x, extend.y, extend.z);\r\n    }\r\n\r\n    /**\r\n    * @internal\r\n    * 渲染之前的更新\r\n    */\r\n    onPreRender() {\r\n        // this.recalculateBounds();\r\n        // //查看相机的距离\r\n        let checkCamera = (this.owner.scene as Scene3D).cullInfoCamera as Camera;\r\n        let maxYDistance = checkCamera.maxlocalYDistance;\r\n        let cameraFrustum = checkCamera.boundFrustum;\r\n        Vector3.subtract((this.owner as Sprite3D).transform.position, checkCamera.transform.position, tempVec);\r\n        //大于farplane,或者不在视锥内.不做lod操作\r\n        let length = tempVec.length();\r\n        if (length > checkCamera.farPlane || cameraFrustum.containsPoint((this.owner as Sprite3D).transform.position) == 0) {\r\n            return;\r\n        }\r\n        let rateYDistance = length / checkCamera.farPlane * maxYDistance;\r\n        let rate = (this._size / rateYDistance);\r\n        for (let i = 0; i < this._lodRateArray.length; i++) {\r\n            if (rate < this._lodRateArray[i])\r\n                continue;\r\n            this.applyResource(this._resourceList[i]);\r\n            break;\r\n        }\r\n    }\r\n\r\n    onUpdate(): void {\r\n        this._curLODSource.updateMark = Camera._updateMark;\r\n        //GC TODO\r\n\r\n    }\r\n\r\n    applyResource(resource: HLODResourceGroup) {\r\n        if (resource == this._curLODSource)\r\n            return;\r\n        if (resource.loaded) {\r\n            if (this._curLODSource) {\r\n                //Cache TODO\r\n                //是否有Cross fade Render \r\n                this._releaseGroupRender();\r\n                this._applyLODResource(resource);\r\n\r\n            }\r\n        } else {\r\n            resource.load(this.applyResource, this);\r\n        }\r\n    }\r\n\r\n    onEnable() {\r\n        super.onEnable();\r\n        //根据\r\n    }\r\n\r\n    onDisable() {\r\n        super.onDisable();\r\n    }\r\n\r\n    onDestroy() {\r\n        super.onDestroy();\r\n        //TODO删除\r\n    }\r\n\r\n    _cloneTo(dest: HLOD) {\r\n        //Clone to\r\n        throw \"cant clone HLOD\"\r\n    }\r\n}","import { Vector3 } from \"../../../maths/Vector3\";\r\nimport { DrawType } from \"../../../RenderEngine/RenderEnum/DrawType\";\r\nimport { MeshTopology } from \"../../../RenderEngine/RenderEnum/RenderPologyMode\";\r\nimport { GeometryElement } from \"../../core/GeometryElement\";\r\nimport { RenderContext3D } from \"../../core/render/RenderContext3D\";\r\nimport { Bounds } from \"../../math/Bounds\";\r\n\r\n\r\nexport class StaticBatchSubInfo {\r\n\r\n    indexStart: number;\r\n    indexCount: number;\r\n\r\n    meshBounds: Bounds;\r\n\r\n    needRender: boolean;\r\n\r\n    constructor() {\r\n        this.indexStart = 0;\r\n        this.indexCount = 0;\r\n        this.meshBounds = new Bounds(new Vector3(), new Vector3());\r\n        this.needRender = false;\r\n    }\r\n\r\n}\r\n\r\nexport class StaticBatchSubMesh extends GeometryElement {\r\n\r\n    /**@internal */\r\n    private static _type: number = GeometryElement._typeCounter++;\r\n\r\n    subInfos: StaticBatchSubInfo[];\r\n\r\n    indexByteCount: number;\r\n\r\n    constructor() {\r\n        super(MeshTopology.Triangles, DrawType.DrawElement);\r\n        this.subInfos = [];\r\n    }\r\n\r\n    addSubMesh(indexCount: number, indexStart: number, bounds: Bounds) {\r\n\r\n        let info = new StaticBatchSubInfo();\r\n        info.indexCount = indexCount;\r\n        info.indexStart = indexStart;\r\n        bounds.cloneTo(info.meshBounds);\r\n\r\n        this.subInfos.push(info);\r\n    }\r\n\r\n    _getType(): number {\r\n        return StaticBatchSubMesh._type;\r\n    }\r\n\r\n    _updateRenderParams(state: RenderContext3D): void {\r\n\r\n        this.clearRenderParams();\r\n        // todo\r\n        let cameraPos = state.camera.transform.position;\r\n        this.subInfos.sort((a, b) => {\r\n            let centerA = a.meshBounds.getCenter();\r\n            let distanceA = Vector3.distanceSquared(centerA, cameraPos);\r\n            let centerB = b.meshBounds.getCenter();\r\n            let distanceB = Vector3.distanceSquared(centerB, cameraPos);\r\n            return distanceA - distanceB;\r\n        });\r\n        for (const info of this.subInfos) {\r\n            if (info.needRender) {\r\n                this.setDrawElemenParams(info.indexCount, info.indexStart * this.indexByteCount);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    _prepareRender(state: RenderContext3D): boolean {\r\n        return !!this.subInfos.find(info => info.needRender);\r\n    }\r\n\r\n    _render(state: RenderContext3D): void {\r\n        super._render(state);\r\n    }\r\n\r\n    destroy() {\r\n        for (const info of this.subInfos) {\r\n        }\r\n        this.subInfos = null;\r\n    }\r\n}","import { LayaGL } from \"../../../layagl/LayaGL\";\r\nimport { Matrix4x4 } from \"../../../maths/Matrix4x4\";\r\nimport { BufferUsage } from \"../../../RenderEngine/RenderEnum/BufferTargetType\";\r\nimport { IndexFormat } from \"../../../RenderEngine/RenderEnum/IndexFormat\";\r\nimport { VertexMesh } from \"../../../RenderEngine/RenderShader/VertexMesh\";\r\nimport { BufferState } from \"../../../webgl/utils/BufferState\";\r\nimport { BlinnPhongMaterial } from \"../../core/material/BlinnPhongMaterial\";\r\nimport { Material } from \"../../core/material/Material\";\r\nimport { Sprite3D } from \"../../core/Sprite3D\";\r\nimport { IndexBuffer3D } from \"../../graphics/IndexBuffer3D\";\r\nimport { VertexBuffer3D } from \"../../graphics/VertexBuffer3D\";\r\nimport { Bounds } from \"../../math/Bounds\";\r\nimport { Utils3D } from \"../../utils/Utils3D\";\r\nimport { StaticBatchSubMesh } from \"./StaticBatchSubMesh\";\r\nimport { StaticMeshMergeInfo } from \"./StaticMeshMergeInfo\";\r\n\r\n\r\nconst tempMatrix = new Matrix4x4;\r\n\r\nconst TriangleIndices = [0, 1, 2];\r\nconst InvertTriangleIndices = [0, 2, 1];\r\n\r\n\r\nexport class StaticBatchMesh {\r\n\r\n    static create(info: StaticMeshMergeInfo): StaticBatchMesh {\r\n        let staticMesh = new StaticBatchMesh();\r\n\r\n        let vertexCount = info.vertexCount;\r\n        let indexCount = info.indexCount;\r\n        let vertexDec = info.vertexDec;\r\n        let vertexFloatStride = vertexDec.vertexStride / 4;\r\n        let vertexData = new ArrayBuffer(vertexDec.vertexStride * vertexCount);\r\n        let vertexFloatArray = new Float32Array(vertexData);\r\n\r\n        let mergeIndexFormat = IndexFormat.UInt16;\r\n        let mergeIndexByteCount = 2;\r\n\r\n        let indexArray: Uint16Array | Uint32Array;\r\n\r\n        if (vertexCount > 65535) {\r\n            mergeIndexFormat = IndexFormat.UInt32;\r\n            mergeIndexByteCount = 4;\r\n            indexArray = new Uint32Array(indexCount);\r\n        }\r\n        else {\r\n            indexArray = new Uint16Array(indexCount);\r\n        }\r\n\r\n        let positionElement = vertexDec.getVertexElementByUsage(VertexMesh.MESH_POSITION0);\r\n        let normalElement = vertexDec.getVertexElementByUsage(VertexMesh.MESH_NORMAL0);\r\n        let lightmapUVElement = vertexDec.getVertexElementByUsage(VertexMesh.MESH_TEXTURECOORDINATE1);\r\n        let tangentElement = vertexDec.getVertexElementByUsage(VertexMesh.MESH_TANGENT0);\r\n\r\n        let vertexDataOffset = 0;\r\n        let vertexCountOffset = 0;\r\n        let indexOffset = 0;\r\n\r\n        let bounds: Bounds;\r\n\r\n        for (const render of info.renders) {\r\n            let lightmapScaleOffset = render.lightmapScaleOffset;\r\n\r\n            if (!bounds) {\r\n                bounds = staticMesh.bounds;\r\n                render.bounds.cloneTo(bounds);\r\n            }\r\n\r\n            Bounds.merge(bounds, render.bounds, bounds);\r\n\r\n            let sp = <Sprite3D>render.owner;\r\n            let invertFront = sp.transform._isFrontFaceInvert;\r\n            let worldMat = sp.transform.worldMatrix;\r\n            let normalMat = tempMatrix;\r\n            worldMat.invert(normalMat);\r\n            normalMat.transpose();\r\n\r\n            let mesh = render.getMesh();\r\n            let meshVertexCount = mesh.vertexCount;\r\n            let meshIndexCount = mesh.indexCount;\r\n\r\n            // todo 复制数据\r\n            // todo 是否存在根节点\r\n            let meshVertexData = mesh._vertexBuffer.getFloat32Data();\r\n            vertexFloatArray.set(meshVertexData, vertexDataOffset);\r\n\r\n            // todo 根据 vertex element 数据类型转换数据\r\n            for (let index = 0; index < meshVertexCount; index++) {\r\n                let elementOffset = index * vertexFloatStride;\r\n                for (const element of vertexDec._vertexElements) {\r\n                    elementOffset += element.offset / 4;\r\n                    switch (element.elementUsage) {\r\n                        case VertexMesh.MESH_POSITION0:\r\n                            Utils3D.transformVector3ArrayToVector3ArrayCoordinate(meshVertexData, elementOffset, worldMat, vertexFloatArray, vertexDataOffset + elementOffset);\r\n                            break;\r\n                        case VertexMesh.MESH_NORMAL0:\r\n                        case VertexMesh.MESH_TANGENT0:\r\n                            Utils3D.transformVector3ArrayToVector3ArrayNormal(meshVertexData, elementOffset, normalMat, vertexFloatArray, vertexDataOffset + elementOffset);\r\n                            break;\r\n                        case VertexMesh.MESH_TEXTURECOORDINATE1:\r\n                            Utils3D.transformLightingMapTexcoordArray(meshVertexData, elementOffset, lightmapScaleOffset, vertexFloatArray, vertexDataOffset + elementOffset);\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            let meshIndexData = mesh._indexBuffer.getData();\r\n            // todo 非三角形渲染方式\r\n            let triangleIndices = invertFront ? InvertTriangleIndices : TriangleIndices;\r\n            for (let index = 0; index < meshIndexCount; index += 3) {\r\n                indexArray[indexOffset + index] = meshIndexData[index + triangleIndices[0]] + vertexCountOffset;\r\n                indexArray[indexOffset + index + 1] = meshIndexData[index + triangleIndices[1]] + vertexCountOffset;\r\n                indexArray[indexOffset + index + 2] = meshIndexData[index + triangleIndices[2]] + vertexCountOffset;\r\n            }\r\n\r\n            let subMeshCount = mesh.subMeshCount;\r\n\r\n            for (let index = 0; index < subMeshCount; index++) {\r\n                // todo default material\r\n                let material = render.sharedMaterials[index] || BlinnPhongMaterial.defaultMaterial;\r\n                let staticSubMesh = staticMesh._staticSubMeshes.get(material);\r\n                if (!staticSubMesh) {\r\n                    staticSubMesh = new StaticBatchSubMesh();\r\n                    staticSubMesh.indexByteCount = mergeIndexByteCount;\r\n                    staticMesh._staticSubMeshes.set(material, staticSubMesh);\r\n                    staticSubMesh.bufferState = staticMesh._bufferState;\r\n                    staticSubMesh.indexFormat = mergeIndexFormat;\r\n                }\r\n\r\n                let subMesh = mesh.getSubMesh(index);\r\n                // submesh bounds 使用 mesh bounds 代替\r\n                // 视锥裁剪仍按照整个mesh\r\n                // todo 换成单独的包围盒 ？\r\n                staticSubMesh.addSubMesh(subMesh.indexCount, subMesh._indexStart + indexOffset, render.bounds);\r\n            }\r\n\r\n            vertexDataOffset += meshVertexData.length;\r\n            vertexCountOffset += meshVertexCount;\r\n            indexOffset += meshIndexData.length;\r\n        }\r\n\r\n        let vertexBuffer = LayaGL.renderOBJCreate.createVertexBuffer3D(vertexData.byteLength, BufferUsage.Static, false);\r\n        vertexBuffer.vertexDeclaration = vertexDec;\r\n        vertexBuffer.setData(vertexData);\r\n\r\n        let indexBuffer = LayaGL.renderOBJCreate.createIndexBuffer3D(mergeIndexFormat, indexCount, BufferUsage.Static, false);\r\n        indexBuffer.setData(indexArray);\r\n\r\n        staticMesh.setBuffer(vertexBuffer, indexBuffer);\r\n\r\n        return staticMesh;\r\n    }\r\n    /**@internal */\r\n    _bufferState: BufferState;\r\n    /**@internal */\r\n    _vertexBuffer: VertexBuffer3D;\r\n    /**@internal */\r\n    _indexBuffer: IndexBuffer3D;\r\n    /**@internal */\r\n    _staticSubMeshes: Map<Material, StaticBatchSubMesh>;\r\n\r\n    bounds: Bounds;\r\n\r\n    constructor() {\r\n        this._bufferState = new BufferState();\r\n        this._staticSubMeshes = new Map();\r\n        this.bounds = new Bounds();\r\n    }\r\n\r\n    setBuffer(vertex: VertexBuffer3D, index: IndexBuffer3D) {\r\n        let bufferState = this._bufferState;\r\n\r\n        this._vertexBuffer = vertex;\r\n        this._indexBuffer = index;\r\n\r\n        bufferState.applyState([vertex], index);\r\n    }\r\n\r\n    destroy() {\r\n        this._staticSubMeshes.forEach(submesh => {\r\n            submesh.destroy();\r\n        });\r\n        this._staticSubMeshes.clear();\r\n        this._staticSubMeshes = null;\r\n        this._bufferState.destroy();\r\n    }\r\n\r\n\r\n}","import { RenderElement } from \"../../core/render/RenderElement\";\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class StaticBatchMeshRenderElement extends RenderElement {\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    getInvertFront(): boolean {\r\n        return false;\r\n    }\r\n\r\n}","import { Matrix4x4 } from \"../../../maths/Matrix4x4\";\r\nimport { Vector4 } from \"../../../maths/Vector4\";\r\nimport { ShaderDataType } from \"../../../RenderEngine/RenderShader/ShaderData\";\r\nimport { ShaderDefine } from \"../../../RenderEngine/RenderShader/ShaderDefine\";\r\nimport { VertexMesh } from \"../../../RenderEngine/RenderShader/VertexMesh\";\r\nimport { MeshFilter } from \"../../core/MeshFilter\";\r\nimport { MeshSprite3DShaderDeclaration } from \"../../core/MeshSprite3DShaderDeclaration\";\r\nimport { BaseRender, RenderBitFlag } from \"../../core/render/BaseRender\";\r\nimport { RenderContext3D } from \"../../core/render/RenderContext3D\";\r\nimport { Sprite3D } from \"../../core/Sprite3D\";\r\nimport { Transform3D } from \"../../core/Transform3D\";\r\nimport { BoundFrustum } from \"../../math/BoundFrustum\";\r\nimport { StaticBatchMesh } from \"./StaticBatchMesh\";\r\nimport { StaticBatchMeshRenderElement } from \"./StaticBatchMeshRenderElement\";\r\nimport { StaticMeshMergeInfo } from \"./StaticMeshMergeInfo\";\r\n\r\nexport class StaticBatchMeshRender extends BaseRender {\r\n\r\n    static create(info: StaticMeshMergeInfo): StaticBatchMeshRender {\r\n\r\n        let render = new StaticBatchMeshRender();\r\n\r\n        render.mergeInfo = info;\r\n\r\n        return render;\r\n    }\r\n\r\n    private _staticMesh: StaticBatchMesh;\r\n    public get staticMesh(): StaticBatchMesh {\r\n        return this._staticMesh;\r\n    }\r\n\r\n    private _mergeInfo: StaticMeshMergeInfo;\r\n\r\n    public get mergeInfo(): StaticMeshMergeInfo {\r\n        return this._mergeInfo;\r\n    }\r\n    public set mergeInfo(value: StaticMeshMergeInfo) {\r\n        this._mergeInfo = value;\r\n\r\n        let staticMesh = StaticBatchMesh.create(value);\r\n        this._staticMesh = staticMesh;\r\n        this.lightmapIndex = value.lightmapIndex;\r\n\r\n        this._staticMesh = staticMesh;\r\n        this.geometryBounds = staticMesh.bounds;\r\n        let meshDefines = MeshFilter._meshVerticeDefine;\r\n        let defineDatas = this._shaderValues;\r\n        this._getMeshDefine(staticMesh, meshDefines);\r\n\r\n        for (const meshDef of meshDefines) {\r\n            defineDatas.addDefine(meshDef);\r\n        }\r\n\r\n        this._renderElements.forEach(element => {\r\n            element.material._removeReference();\r\n            element.destroy();\r\n        })\r\n\r\n        this._renderElements = [];\r\n\r\n        staticMesh._staticSubMeshes.forEach((subMesh, material) => {\r\n            let element = new StaticBatchMeshRenderElement();\r\n            this._renderElements.push(element);\r\n            element.render = this;\r\n            element.material = material;\r\n            element.setGeometry(subMesh);\r\n\r\n            material._addReference();\r\n        });\r\n\r\n        staticMesh.bounds.cloneTo(this.bounds);\r\n\r\n    }\r\n\r\n    _singleton: boolean;\r\n\r\n    private constructor() {\r\n        super();\r\n        this._singleton = false;\r\n    }\r\n\r\n    _calculateBoundingBox() {\r\n        // todo 根节点移动更新包围盒\r\n        // this._bounds.setCenter(Vector3.ZERO);\r\n        // this._bounds.setExtent(Vector3.ONE);\r\n    }\r\n\r\n    _renderUpdate(context: RenderContext3D, transform: Transform3D): void {\r\n        this._applyLightMapParams();\r\n        // todo 若有根节点, 在这里更新 worldmatrix\r\n        this._setShaderValue(Sprite3D.WORLDMATRIX, ShaderDataType.Matrix4x4, Matrix4x4.DEFAULT);\r\n        this._worldParams.x = 1.0;\r\n        this._setShaderValue(Sprite3D.WORLDINVERTFRONT, ShaderDataType.Vector4, this._worldParams);//TODO\r\n    }\r\n\r\n    _getMeshDefine(mesh: StaticBatchMesh, out: Array<ShaderDefine>) {\r\n        let vertexElements = mesh._vertexBuffer.vertexDeclaration._vertexElements;\r\n        for (const element of vertexElements) {\r\n            switch (element.elementUsage) {\r\n                case VertexMesh.MESH_COLOR0:\r\n                    out.push(MeshSprite3DShaderDeclaration.SHADERDEFINE_COLOR);\r\n                    break;\r\n                case VertexMesh.MESH_TEXTURECOORDINATE0:\r\n                    out.push(MeshSprite3DShaderDeclaration.SHADERDEFINE_UV0);\r\n                    break;\r\n                case VertexMesh.MESH_TEXTURECOORDINATE1:\r\n                    out.push(MeshSprite3DShaderDeclaration.SHADERDEFINE_UV1);\r\n                    break;\r\n                case VertexMesh.MESH_TANGENT0:\r\n                    out.push(MeshSprite3DShaderDeclaration.SHADERDEFINE_TANGENT);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    _needRender(boundFrustum: BoundFrustum, context: RenderContext3D): boolean {\r\n        if (boundFrustum) {\r\n            if (boundFrustum.intersects(this.bounds)) {\r\n                let needRender = false;\r\n                this.staticMesh._staticSubMeshes.forEach(subMesh => {\r\n                    for (const info of subMesh.subInfos) {\r\n                        info.needRender = boundFrustum.intersects(info.meshBounds);\r\n                        needRender = needRender || info.needRender;\r\n                    }\r\n                });\r\n                return needRender;\r\n            }\r\n            return false;\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    onEnable() {\r\n        super.onEnable();\r\n        this.mergeInfo.renders.forEach(render => {\r\n            render.setRenderbitFlag(RenderBitFlag.RenderBitFlag_Batch, true);\r\n        });\r\n\r\n    }\r\n\r\n    onDisable() {\r\n        super.onDisable();\r\n        this.mergeInfo.renders.forEach(render => {\r\n            render.setRenderbitFlag(RenderBitFlag.RenderBitFlag_Batch, false);\r\n        });\r\n    }\r\n\r\n    onDestroy() {\r\n        super.onDestroy();\r\n        this._renderElements.forEach(element => {\r\n            element.material._removeReference();\r\n            element.destroy();\r\n        });\r\n        this._renderElements = null;\r\n        this._staticMesh.destroy();\r\n        this._staticMesh = null;\r\n    }\r\n\r\n    _cloneTo(dest: StaticBatchMeshRender) {\r\n        dest.mergeInfo = this.mergeInfo;\r\n    }\r\n}","import { VertexDeclaration } from \"../../../RenderEngine/VertexDeclaration\";\r\nimport { MeshRenderer } from \"../../core/MeshRenderer\";\r\nimport { Sprite3D } from \"../../core/Sprite3D\";\r\n\r\nexport class StaticMeshMergeInfo {\r\n\r\n    static create(render: MeshRenderer) {\r\n\r\n        let mesh = render.getMesh();\r\n        let owner = <Sprite3D>render.owner;\r\n\r\n        let info = new StaticMeshMergeInfo();\r\n        info.lightmapIndex = render.lightmapIndex;\r\n        info.receiveShadow = render.receiveShadow;\r\n        info.vertexDec = mesh ? mesh.getVertexDeclaration() : null;\r\n        // info.invertFrontFace = owner ? owner.transform._isFrontFaceInvert : false;\r\n        return info;\r\n    }\r\n\r\n    /**\r\n     * receiveShadow接受阴影\r\n     */\r\n    receiveShadow: boolean;\r\n    \r\n    /**\r\n     * 光照贴图索引\r\n     */\r\n    lightmapIndex: number;\r\n\r\n    /**\r\n     * 顶点描述\r\n     */\r\n    vertexDec: VertexDeclaration;\r\n\r\n    private _renders: MeshRenderer[];\r\n    public get renders(): MeshRenderer[] {\r\n        return this._renders;\r\n    }\r\n\r\n    vertexCount: number;\r\n    indexCount: number;\r\n\r\n    private constructor() {\r\n        this._renders = [];\r\n        this.vertexCount = 0;\r\n        this.indexCount = 0;\r\n    }\r\n\r\n    match(render: MeshRenderer): boolean {\r\n\r\n        let mesh = render.getMesh();\r\n        let owner = <Sprite3D>render.owner;\r\n\r\n        let match = true;\r\n\r\n        match = match && this.lightmapIndex == render.lightmapIndex;\r\n        match = match && this.receiveShadow == render.receiveShadow;\r\n        match = match && this.vertexDec == mesh.getVertexDeclaration();\r\n        // match = match && this.invertFrontFace == owner.transform._isFrontFaceInvert;\r\n        return match;\r\n    }\r\n\r\n    addElement(render: MeshRenderer) {\r\n        this.renders.push(render);\r\n        let mesh = render.getMesh();\r\n        this.vertexCount += mesh.vertexCount;\r\n        this.indexCount += mesh.indexCount;\r\n    }\r\n\r\n    destroy() {\r\n        this._renders = null;\r\n    }\r\n}","import { Shader3D } from \"../../RenderEngine/RenderShader/Shader3D\";\r\nimport { SubUniformBufferData } from \"../../RenderEngine/SubUniformBufferData\";\r\nimport { UniformBufferParamsType } from \"../../RenderEngine/UniformBufferData\";\r\nimport { UniformBufferObject } from \"../../RenderEngine/UniformBufferObject\";\r\n/**\r\n * @internal\r\n */\r\nexport class TransLargeUBOUtils {\r\n    static configStartLength: number = 1024;\r\n\r\n    static addStep: number = 512;\r\n\r\n    bindUBO: UniformBufferObject;\r\n\r\n    maxlength: number;\r\n\r\n    currentlength: number = 0;\r\n\r\n    pool: SubUniformBufferData[];\r\n\r\n    subDataMap: SubUniformBufferData[];\r\n\r\n    subDataParamMap: Map<string, UniformBufferParamsType>;\r\n\r\n    defaultSubData: SubUniformBufferData;\r\n\r\n    /**\r\n     * @internal\r\n     * @param UBO\r\n     * @param paramsMap\r\n     * @param defautSubData \r\n     */\r\n    constructor(UBO: UniformBufferObject, paramsMap: Map<string, UniformBufferParamsType>, defautSubData: SubUniformBufferData) {\r\n        this.bindUBO = UBO;\r\n        this.defaultSubData = defautSubData;\r\n        UBO._reset(TransLargeUBOUtils.configStartLength * this.defaultSubData.getbyteLength());\r\n        this.subDataParamMap = paramsMap;\r\n        this.maxlength = TransLargeUBOUtils.configStartLength;\r\n        this.subDataMap = [];\r\n        this.pool = [];\r\n        this.subDataMap.push(defautSubData);\r\n        this.currentlength++;\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @returns \r\n     */\r\n    create(): SubUniformBufferData {\r\n        if (this.pool.length > 0) {\r\n            const re = this.pool.pop();\r\n            re._isInPool = false;\r\n            return re;\r\n        }\r\n        if (this.maxlength == this.currentlength)\r\n            this.reset();\r\n\r\n        let uniformMap = new Map<number, UniformBufferParamsType>();\r\n        this.subDataParamMap.forEach((value, key) => {\r\n            uniformMap.set(Shader3D.propertyNameToID(key), value);\r\n        })\r\n        let subdata = new SubUniformBufferData(uniformMap, this.currentlength++);\r\n        this.subDataMap.push(subdata);\r\n        return subdata;\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param subModuleData \r\n     */\r\n    recover(subModuleData: SubUniformBufferData) {\r\n        if (!subModuleData._isInPool) {\r\n            this.pool.push(subModuleData);\r\n            subModuleData._isInPool = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * \r\n     */\r\n    reset() {\r\n        this.maxlength += TransLargeUBOUtils.addStep;\r\n        this.bindUBO._reset(this.maxlength * this.defaultSubData.getbyteLength());\r\n        //all update\r\n        this.subDataMap.forEach(element => {\r\n            this.bindUBO.setDataByByUniformBufferDataOffset(element, element._offset);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Update One subData\r\n     * @param data \r\n     */\r\n    updateSubData(data: SubUniformBufferData) {\r\n        this.bindUBO.setDataByByUniformBufferDataOffset(data, data._offset);\r\n        data._needUpdate = false;\r\n    }\r\n\r\n    updateBindRange(data: SubUniformBufferData) {\r\n        let bytelenth = data.getbyteLength();\r\n        this.bindUBO._bindBufferRange(data._offset * bytelenth, bytelenth);\r\n    }\r\n\r\n\r\n    /**\r\n     * destroy\r\n     */\r\n    destroy() {\r\n        this.subDataMap.forEach(element => {\r\n            element.destroy();\r\n        });\r\n\r\n        delete this.subDataMap;\r\n        delete this.pool;\r\n        this.subDataMap = null;\r\n        this.pool = null;\r\n    }\r\n}","import { Camera, CameraClearFlags } from \"../Camera\";\r\nimport { Sprite3D } from \"../Sprite3D\";\r\nimport { Ray } from \"../../math/Ray\";\r\nimport { Viewport } from \"../../math/Viewport\";\r\nimport { HitResult } from \"../../physics/HitResult\";\r\nimport { Config3D } from \"../../../../Config3D\";\r\nimport { InputManager } from \"../../../events/InputManager\";\r\nimport { Node } from \"../../../display/Node\";\r\nimport { Scene3D } from \"./Scene3D\";\r\nimport { Vector2 } from \"../../../maths/Vector2\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\nimport { Render } from \"../../../renders/Render\";\r\n\r\nconst _vec2 = new Vector2();\r\nconst _ray = new Ray(new Vector3(), new Vector3());\r\nconst _hitResult = new HitResult();\r\n\r\nInputManager.prototype.getSprite3DUnderPoint = function (this: InputManager, x: number, y: number): Node {\r\n    _hitResult.succeeded = false;\r\n    \r\n    x = x * this._stage.clientScaleX;\r\n    y = y * this._stage.clientScaleY;\r\n    var pageX = x;\r\n    var pageY = y;\r\n\r\n    var normalWidth = x / Render._mainCanvas.width;\r\n    var normalHeight = y / Render._mainCanvas.height;\r\n    \r\n    x = this._stage.width * normalWidth;\r\n    y = this._stage.height * normalHeight;\r\n\r\n    _vec2.setValue(x, y);\r\n\r\n    for (let scene of <Scene3D[]>this._stage._scene3Ds) {\r\n        let sim = scene._physicsSimulation;\r\n        let uiManager = scene._UI3DManager;\r\n\r\n        let cameras = scene._cameraPool;\r\n        for (let i = cameras.length - 1; i >= 0; i--) {\r\n            let camera = <Camera>cameras[i];\r\n            let viewport: Viewport = camera.viewport;\r\n            let ratio = Config3D.pixelRatio;\r\n            if (pageX >= viewport.x && pageY >= viewport.y && pageX <= viewport.width / ratio && pageY <= viewport.height / ratio) {\r\n                //Physics\r\n                camera.viewportPointToRay(_vec2, _ray);\r\n\r\n                //3D UI\r\n                let sprite = uiManager.rayCast(_ray);\r\n                if (sprite)\r\n                    return sprite;\r\n                if (!sim)\r\n                    continue;\r\n                var sucess: boolean = sim.rayCast(_ray, <any>_hitResult);\r\n                if (sucess || (camera.clearFlag === CameraClearFlags.SolidColor || camera.clearFlag === CameraClearFlags.Sky))\r\n                    break;\r\n            }\r\n        }\r\n\r\n        if (_hitResult.succeeded)\r\n            return (<Sprite3D>_hitResult.collider.owner);\r\n    }\r\n\r\n    return null;\r\n}\r\n","import { Vector2 } from \"../../../../maths/Vector2\";\r\nimport { IClone } from \"../../../../utils/IClone\"\r\n\r\n/**\r\n * <code>GradientDataVector2</code> 类用于创建二维向量渐变。\r\n */\r\nexport class GradientDataVector2 implements IClone {\r\n\tprivate _currentLength: number = 0;\r\n\t/**@internal 开发者禁止修改。*/\r\n\t_elements: Float32Array;\r\n\r\n\t/**二维向量渐变数量。*/\r\n\tget gradientCount(): number {\r\n\t\treturn this._currentLength / 3;\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>GradientDataVector2</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tthis._elements = new Float32Array(12);\r\n\t}\r\n\r\n\t/**\r\n\t * 增加二维向量渐变。\r\n\t * @param\tkey 生命周期，范围为0到1。\r\n\t * @param\tvalue 二维向量值。\r\n\t */\r\n\tadd(key: number, value: Vector2): void {\r\n\t\tif (this._currentLength < 8) {\r\n\r\n\t\t\tif ((this._currentLength === 6) && ((key !== 1))) {\r\n\t\t\t\tkey = 1;\r\n\t\t\t\tconsole.log(\"GradientDataVector2 warning:the forth key is  be force set to 1.\");\r\n\t\t\t}\r\n\r\n\t\t\tthis._elements[this._currentLength++] = key;\r\n\t\t\tthis._elements[this._currentLength++] = value.x;\r\n\t\t\tthis._elements[this._currentLength++] = value.y;\r\n\t\t} else {\r\n\t\t\tconsole.log(\"GradientDataVector2 warning:data count must lessEqual than 4\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @param\tdestObject 克隆源。\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tvar destGradientDataVector2: GradientDataVector2 = <GradientDataVector2>destObject;\r\n\t\tdestGradientDataVector2._currentLength = this._currentLength;\r\n\t\tvar destElements: Float32Array = destGradientDataVector2._elements;\r\n\t\tfor (var i: number = 0, n: number = this._elements.length; i < n; i++) {\r\n\t\t\tdestElements[i] = this._elements[i];\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @return\t 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar destGradientDataVector2: GradientDataVector2 = new GradientDataVector2();\r\n\t\tthis.cloneTo(destGradientDataVector2);\r\n\t\treturn destGradientDataVector2;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { LayaGL } from \"../../../../layagl/LayaGL\";\r\nimport { Vector2 } from \"../../../../maths/Vector2\";\r\nimport { Vector3 } from \"../../../../maths/Vector3\";\r\nimport { Vector4 } from \"../../../../maths/Vector4\";\r\nimport { BufferUsage } from \"../../../../RenderEngine/RenderEnum/BufferTargetType\";\r\nimport { VertexDeclaration } from \"../../../../RenderEngine/VertexDeclaration\";\r\nimport { VertexBuffer3D } from \"../../../graphics/VertexBuffer3D\";\r\nimport { DrawMeshInstancedCMD } from \"./DrawMeshInstancedCMD\";\r\n\r\n/**\r\n * @internal\r\n * <code>Mesh</code> 类用于创建CustomInstance属性。\r\n */\r\nexport class MaterialInstanceProperty{\r\n\t/**@internal instanceProperty name*/\r\n\tpublic _name:string;\r\n\t/**@internal property Data*/\r\n\tpublic _value:Vector4[]|Vector3[]|Vector2[]|Float32Array;\r\n\t/**@internal vertex Declaration */\r\n\tpublic _vertexDeclaration:VertexDeclaration;\r\n\t/**@internal */\r\n\tpublic _isNeedUpdate:boolean = false;\r\n\t/**@internal */\r\n\tpublic _vertexStride:number;\r\n\t/**@internal */\r\n\tpublic _instanceData:Float32Array;\r\n\t/**@internal */\r\n\tpublic _vertexBuffer:VertexBuffer3D;\r\n\r\n\t/**\r\n\t * @internal\r\n\t * 创建instance顶点Buffer\r\n\t */\r\n\tcreateInstanceVertexBuffer3D(){\r\n\t\tthis._instanceData = new Float32Array(DrawMeshInstancedCMD.maxInstanceCount*this._vertexStride);\r\n\t\tthis._vertexBuffer = LayaGL.renderOBJCreate.createVertexBuffer3D(this._instanceData.length*4,BufferUsage.Dynamic,false);\r\n\t\tthis._vertexBuffer.vertexDeclaration = this._vertexDeclaration;\r\n\t\tthis._vertexBuffer.instanceBuffer = true;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * 更新顶点数据\r\n\t */\r\n\tupdateVertexBufferData(drawNums:number){\r\n\t\t//更新数据\r\n\t\tif(!this._isNeedUpdate)\r\n\t\t\treturn;\r\n\t\tlet instanceData = this._instanceData;\r\n\t\tlet dataValue = this._value;\r\n\t\tlet datalength = this._value.length;\r\n\t\tlet data:Vector2|Vector3|Vector4;\r\n\t\tlet stride = this._vertexStride;\r\n\t\tlet updateType = 0;\r\n\t\tif(!(this._value instanceof Float32Array)){\r\n\t\t\tupdateType = 1;//判断为Vector数据\r\n\t\t}\r\n\r\n\t\tswitch(updateType){\r\n\t\t\tcase 0:\r\n\t\t\t\tinstanceData.set(<Float32Array>dataValue,0);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1:\r\n\t\t\t\tfor (let i = 0; i < datalength; i++) {\r\n\t\t\t\t\tdata = <Vector2|Vector3|Vector4>dataValue[i];\r\n\t\t\t\t\tdata.writeTo(instanceData,i*stride);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\tthis._vertexBuffer.orphanStorage();\r\n\t\tthis._vertexBuffer.setData(instanceData.buffer,0,0,drawNums*4*stride);\r\n\t}\r\n\r\n\tdestroy(){\r\n\t\tdelete this._value;\r\n\t\tdelete this._instanceData;\r\n\t\tthis._vertexDeclaration = null;\r\n\t\tthis._vertexBuffer.destroy();\r\n\t}\r\n}","import { Vector2 } from \"../../../../maths/Vector2\";\r\nimport { Vector3 } from \"../../../../maths/Vector3\";\r\nimport { Vector4 } from \"../../../../maths/Vector4\";\r\nimport { VertexDeclaration } from \"../../../../RenderEngine/VertexDeclaration\";\r\nimport { VertexElement } from \"../../../../renders/VertexElement\";\r\nimport { VertexElementFormat } from \"../../../../renders/VertexElementFormat\";\r\nimport { MaterialInstanceProperty } from \"./MaterialInstanceProperty\";\r\n\r\nexport enum InstanceLocation{\r\n\tCUSTOME0 = 12,\r\n\tCUSTOME1 = 13,\r\n\tCUSTOME2 = 14,\r\n\tCUSTOME3 = 15\r\n}\r\n\r\n/**\r\n * <code>Mesh</code> 类用于创建CustomInstance属性块。\r\n */\r\nexport class MaterialInstancePropertyBlock{\r\n\t\r\n\t/**Instance合并方案 */\r\n\t/**attribute instance渲染方案 优点：合并数量多,合并效率高，渲染性能优 缺点：instance变量元素少*/\r\n\tpublic static INSTANCETYPE_ATTRIBUTE:number = 0;\r\n\t/**uniform instance渲染方案 优点：instance变量多，灵活  缺点：合并数量受WebGLContext._maxUniformFragmentVectors的影响，合并效率低 */\r\n\tpublic static INSTANCETYPE_UNIFORMBUFFER:number = 1;\r\n\r\n\r\n\t/**@internal instance type*/\r\n\tprotected _type:number = 0;\r\n\r\n\r\n\t/**@internal property map*/\r\n\t_propertyMap:{[key:number]:MaterialInstanceProperty} = {};\r\n\r\n\tconstructor(){\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @internal 检查传入的参数是否符合规则\r\n\t * @param vertexElementFormat 顶点元素\r\n\t * @param propertyName 属性名\r\n\t * @param attributeLocation attribute位置\r\n\t * @param prob 材质属性\r\n\t */\r\n\tprivate _checkPropertyLegal(vertexElementFormat:VertexElementFormat,propertyName:string,attributeLocation:InstanceLocation,prob:MaterialInstanceProperty){\r\n\t\t\tvar vecDec = prob._vertexDeclaration;\r\n\t\t\t//顶点描述是否保持一致\r\n\t\t\tif(vecDec._vertexElements[0]._elementFormat !== vertexElementFormat)\r\n\t\t\t\tthrow \"Data exists and format does not match\";//数据存在且类型不匹配\r\n\t\t\tif(prob._name !== propertyName)\r\n\t\t\t\tthrow \"You cannot add a new property to an existing attributeLocation,Please use another attributeLocation\";//属性名字不匹配\t\r\n\t}\r\n\r\n\t/**\r\n\t * 创建instance属性\r\n\t * @param attributeName name\r\n\t * @param arrays data\r\n\t * @param vertexStride vertex size\r\n\t * @param vertexformat vertexFormat\r\n\t * @param attributeLocation  attribute location\r\n\t */\r\n\tprivate _creatProperty(attributeName:string,arrays:Vector4[]|Vector3[]|Vector2[]|Float32Array,vertexStride:number,vertexformat:string,attributeLocation:InstanceLocation){\r\n\t\tvar prob = this._propertyMap[attributeLocation] = new MaterialInstanceProperty();\r\n\t\tprob._name = attributeName;\r\n\t\tprob._value = arrays;\r\n\t\tprob._vertexDeclaration = new VertexDeclaration(vertexStride,[new VertexElement(0,vertexformat,attributeLocation)]);\r\n\t\tprob._isNeedUpdate = true;\r\n\t\tprob._vertexStride = vertexStride / 4;\r\n\t\tprob.createInstanceVertexBuffer3D();\r\n\t}\r\n\t\r\n\t/**\r\n\t * 设置Vector4材质数组属性\r\n\t * @param attributeName 属性名称（要对应到Shader中）\r\n\t * @param arrays 数据\r\n\t * @param attributeLocation  属性Shader位置（需要与shader中的声明Attribute一一对应）\r\n\t */\r\n\tsetVectorArray(attributeName:string,arrays:Vector4[]|Float32Array,attributeLocation:InstanceLocation):void{\r\n\t\tvar prob = this._propertyMap[attributeLocation];\r\n\t\tif(prob){\r\n\t\t\t//判断匹配\r\n\t\t\tthis._checkPropertyLegal(VertexElementFormat.Vector4,attributeName,attributeLocation,prob);\r\n\t\t\tprob._value = arrays;\r\n\t\t\tprob._isNeedUpdate = true;\r\n\t\t}else//创建自定义属性\r\n\t\t\tthis._creatProperty(attributeName,arrays,16,VertexElementFormat.Vector4,attributeLocation);\r\n\t}\r\n\r\n\t/**\r\n\t * 设置Vector3材质数组属性\r\n\t * @param attributeName 属性名称（要对应到Shader中）\r\n\t * @param arrays 数据\r\n\t * @param attributeLocation 属性shader位置（需要与shader中的声明Attribute一一对应）\r\n\t */\r\n\tsetVector3Array(attributeName:string,arrays:Vector3[]|Float32Array,attributeLocation:InstanceLocation){\r\n\t\tvar prob = this._propertyMap[attributeLocation];\r\n\t\tif(prob){\r\n\t\t\t//判断匹配\r\n\t\t\tthis._checkPropertyLegal(VertexElementFormat.Vector3,attributeName,attributeLocation,prob);\r\n\t\t\tprob._value = arrays;\r\n\t\t\tprob._isNeedUpdate = true;\r\n\t\t}else//创建自定义属性\r\n\t\t\tthis._creatProperty(attributeName,arrays,12,VertexElementFormat.Vector3,attributeLocation);\r\n\t}\r\n\r\n\t/**\r\n\t * 设置Vector2材质数组属性\r\n\t * @param attributeName 属性名称（要对应到Shader中）\r\n\t * @param arrays 数据\r\n\t * @param attributeLocation 属性shader位置（需要与shader中的声明Attribute一一对应）\r\n\t */\r\n\tsetVector2Array(attributeName:string,arrays:Vector2[]|Float32Array,attributeLocation:InstanceLocation){\r\n\t\tvar prob = this._propertyMap[attributeLocation];\r\n\t\tif(prob){\r\n\t\t\t//判断匹配\r\n\t\t\tthis._checkPropertyLegal(VertexElementFormat.Vector2,attributeName,attributeLocation,prob);\r\n\t\t\tprob._value = arrays;\r\n\t\t\tprob._isNeedUpdate = true;\r\n\t\t}else//创建自定义属性\r\n\t\t\tthis._creatProperty(attributeName,arrays,8,VertexElementFormat.Vector2,attributeLocation);\r\n\t}\r\n\r\n\t/**\r\n \t * 设置Number材质数组属性\r\n\t * @param attributeName 属性名称（要对应到Shader中）\r\n\t * @param arrays 数据\r\n\t * @param attributeLocation 属性shader位置（需要与shader中的声明Attribute一一对应）\r\n\t */\r\n\tsetNumberArray(attributeName:string,arrays:Float32Array,attributeLocation:InstanceLocation){\r\n\t\tvar prob = this._propertyMap[attributeLocation];\r\n\t\tif(prob){\r\n\t\t\t//判断匹配\r\n\t\t\tthis._checkPropertyLegal(VertexElementFormat.Single,attributeName,attributeLocation,prob);\r\n\t\t\tprob._value = arrays;\r\n\t\t\tprob._isNeedUpdate = true;\r\n\t\t}else//创建自定义属性\r\n\t\t\tthis._creatProperty(attributeName,arrays,4,VertexElementFormat.Single,attributeLocation);\r\n\t}\r\n\r\n\t/**\r\n\t * 获得属性数据\r\n\t * @param attributeLocation  属性shader位置\r\n\t */\r\n\tgetPropertyArray(attributeLocation:InstanceLocation):Vector4[]|Vector3[]|Vector2[]|Float32Array{\r\n\t\tvar prob = this._propertyMap[attributeLocation];\r\n\t\treturn prob?prob._value:null;\r\n\t}\r\n\r\n\tclear(){\r\n\t\tfor(var i in this._propertyMap){\r\n\t\t\tthis._propertyMap[i].destroy();\r\n\t\t}\r\n\t\tthis._propertyMap = {};\r\n\t}\r\n\r\n}","import { Animator2D } from \"../../components/Animator2D\";\r\nimport { AnimatorState2D } from \"../../components/AnimatorState2D\";\r\nimport { Animator } from \"../component/Animator/Animator\"\r\nimport { AnimatorPlayState } from \"../component/Animator/AnimatorPlayState\";\r\nimport { AnimatorState } from \"../component/Animator/AnimatorState\";\r\n\r\ninterface AnimatorPlayScriptInfo {\r\n\tanimator: Animator | Animator2D;\r\n\tlayerindex: number;\r\n\tplayState: AnimatorState | AnimatorState2D;\r\n}\r\n/**\r\n * <code>AnimatorStateScript</code> 类用于动画状态脚本的父类,该类为抽象类,不允许实例。\r\n */\r\nexport class AnimatorStateScript {\r\n\r\n\t/**@internal */\r\n\tplayStateInfo: AnimatorPlayScriptInfo = { animator: null, layerindex: -1, playState: null };\r\n\r\n\t/**@internal */\r\n\tsetPlayScriptInfo(animator: Animator | Animator2D, layerindex: number, playstate: AnimatorState | AnimatorState2D) {\r\n\t\tthis.playStateInfo.animator = animator;\r\n\t\tthis.playStateInfo.layerindex = layerindex;\r\n\t\tthis.playStateInfo.playState = playstate;\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个新的 <code>AnimatorStateScript</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * 动画状态开始时执行。\r\n\t */\r\n\tonStateEnter(): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * 动画状态运行中\r\n\t * @param normalizeTime 0-1动画播放状态\r\n\t */\r\n\tonStateUpdate(normalizeTime: number): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * 动画状态退出时执行。\r\n\t */\r\n\tonStateExit(): void {\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { Rigidbody3D } from \"./Rigidbody3D\";\r\nimport { PhysicsSimulation } from \"./PhysicsSimulation\"\r\n\r\n/**\r\n * ...\r\n * @author ...\r\n */\r\nexport class Constraint3D {\r\n\t/**@internal */\r\n\t_btConstraint: number;\r\n\t/**@internal */\r\n\t_simulation: PhysicsSimulation;\r\n\r\n\t/**获取刚体A。[只读]*/\r\n\trigidbodyA: Rigidbody3D;\r\n\t/**获取刚体A。[只读]*/\r\n\trigidbodyB: Rigidbody3D;\r\n\r\n\tconstructor() {\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { DrawType } from \"../../../RenderEngine/RenderEnum/DrawType\";\r\nimport { IndexFormat } from \"../../../RenderEngine/RenderEnum/IndexFormat\";\r\nimport { MeshTopology } from \"../../../RenderEngine/RenderEnum/RenderPologyMode\";\r\nimport { GeometryElement } from \"../../core/GeometryElement\";\r\nimport { RenderContext3D } from \"../../core/render/RenderContext3D\";\r\nimport { Mesh } from \"../../resource/models/Mesh\";\r\nimport { HLODBatchSubMesh } from \"./HLODUtil\";\r\n\r\n\r\nexport class HLODBatchMesh extends GeometryElement {\r\n    /**@internal batchMesh */\r\n    private _mesh: Mesh;\r\n    /**@internal */\r\n    private _batchSubMeshInfos: HLODBatchSubMesh[];\r\n\r\n    /**@internal */\r\n    private _drawSubMeshs: HLODBatchSubMesh[];\r\n    /**\r\n     * instance HLODBatchMesh\r\n     */\r\n    constructor() {\r\n        super(MeshTopology.Triangles, DrawType.DrawElement);\r\n    }\r\n\r\n    /**\r\n     * 合批后的mesh\r\n     * @param mesh \r\n     * @param bounds \r\n     */\r\n    set batchMesh(mesh: Mesh) {\r\n        if (this._mesh != mesh) {\r\n            this._mesh && (this._mesh._removeReference());\r\n            this.indexFormat = mesh.indexFormat;\r\n            this._mesh = mesh;\r\n            this._mesh._addReference();\r\n        }\r\n    }\r\n\r\n    get batchMesh() {\r\n        return this._mesh;\r\n    }\r\n\r\n    /**\r\n     * 合批子mesh信息\r\n     */\r\n    set batchSubMeshInfo(value: HLODBatchSubMesh[]) {\r\n        this._batchSubMeshInfos = value;\r\n    }\r\n\r\n    get batchSubMeshInfo() {\r\n        return this._batchSubMeshInfos;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @param value \r\n     */\r\n    set drawSubMeshs(value: HLODBatchSubMesh[]) {\r\n        this._drawSubMeshs = value;\r\n    }\r\n\r\n    get drawSubMeshs(): HLODBatchSubMesh[] {\r\n        return this._drawSubMeshs;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @override\r\n     */\r\n    _prepareRender(state: RenderContext3D): boolean {\r\n        this._mesh._uploadVerticesData();\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @override\r\n     */\r\n    _updateRenderParams(state: RenderContext3D): void {\r\n        var mesh: Mesh = this._mesh;\r\n        var byteCount: number;\r\n        switch (mesh.indexFormat) {\r\n            case IndexFormat.UInt32:\r\n                byteCount = 4;\r\n                break;\r\n            case IndexFormat.UInt16:\r\n                byteCount = 2;\r\n                break;\r\n            case IndexFormat.UInt8:\r\n                byteCount = 1;\r\n                break;\r\n        }\r\n        this.clearRenderParams();\r\n        this.bufferState = mesh._bufferState;\r\n        if (this._drawSubMeshs) {\r\n            this._drawSubMeshs.forEach(element => {\r\n                this.setDrawElemenParams(element.drawPramas.y, element.drawPramas.x * byteCount);\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 销毁\r\n     */\r\n    destroy(): void {\r\n        this._mesh && this._mesh._removeReference();\r\n        delete this._batchSubMeshInfos;\r\n        delete this._drawSubMeshs;\r\n    }\r\n\r\n\r\n}","import { Laya } from \"../../../../Laya\";\r\nimport { Vector2 } from \"../../../maths/Vector2\";\r\nimport { Handler } from \"../../../utils/Handler\";\r\nimport { Material } from \"../../core/material/Material\";\r\nimport { Lightmap } from \"../../core/scene/Lightmap\";\r\nimport { Bounds } from \"../../math/Bounds\";\r\nimport { HLODBatchMesh } from \"./HLODBatchMesh\";\r\n/**\r\n * HLOD的设置\r\n */\r\nexport class HLODConfig{\r\n    releaseCallTime:number;//CG调用时间\r\n    releaseTime:number;//资源闲置时间\r\n}\r\n\r\n\r\n/**\r\n * HLODBatch resource\r\n */\r\nexport class HLODBatchSubMesh{\r\n    bounds:Bounds;\r\n    drawPramas:Vector2;\r\n}\r\n\r\n/**\r\n * HLODElement 一组HLODRenderElement资源\r\n */\r\nexport class HLODElement {\r\n    /**batch mesh */\r\n    HLODMesh: HLODBatchMesh;\r\n    \r\n    /**material */\r\n    private _material: Material;\r\n    public get material(): Material {\r\n        return this._material;\r\n    }\r\n    public set material(value: Material) {\r\n        if(this._material!=value){\r\n            this._material&&this._material._removeReference();\r\n            this._material = value;\r\n            this._material._addReference();\r\n        }\r\n        \r\n    }\r\n\r\n    /**lightmap */\r\n    private _lightmap: Lightmap;\r\n    public get lightmap(): Lightmap {\r\n        return this._lightmap;\r\n    }\r\n    public set lightmap(value: Lightmap) {\r\n        if(this._lightmap!=value){\r\n            if(this._lightmap){\r\n                this._lightmap.lightmapColor._removeReference();\r\n                this._lightmap.lightmapDirection._removeReference();\r\n            }\r\n            this._lightmap = value;\r\n            this._lightmap.lightmapColor._addReference();\r\n            this._lightmap.lightmapDirection._addReference();\r\n\r\n        }\r\n        this._lightmap = value;\r\n    }\r\n\r\n    /**\r\n     * 释放资源\r\n     * lightmap direct destroy\r\n     */\r\n    release() {\r\n        this.HLODMesh.destroy();\r\n        this.material.destroy();\r\n        if(this.lightmap){\r\n            this._lightmap.lightmapColor.destroy();\r\n            this._lightmap.lightmapDirection.destroy();\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * HLOD Resource\r\n * Load/release\r\n */\r\nexport class HLODResourceGroup {\r\n    url: string;   \r\n    updateMark: number;\r\n    resources: HLODElement[];\r\n    loaded: boolean;\r\n\r\n    /**\r\n     * loaded\r\n     * @param callFun \r\n     * @param hlod \r\n     */\r\n    load(callFun:Function,hlod:any) {\r\n        if(!this.loaded){\r\n            Laya.loader.load(this.url,Handler.create(\r\n                this,(res:any)=>{\r\n                    callFun.apply(hlod,[this]);\r\n                    this.loaded = true;\r\n                },[this]\r\n            ));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 释放HLODGourp资源\r\n     */\r\n    release() {\r\n        this.resources.forEach(element => {\r\n            element.release();\r\n        });\r\n        this.loaded = false;\r\n    }\r\n}","import { ILaya } from \"../../../../ILaya\";\r\nimport { ILaya3D } from \"../../../../ILaya3D\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\nimport { ColliderShape } from \"./ColliderShape\";\r\n\r\n/**\r\n * <code>BoxColliderShape</code> 类用于创建高度图地形形状碰撞器。\r\n * \r\n */\r\nexport class HeightfieldTerrainShape extends ColliderShape {\r\n    dataPtr = 0;\r\n    initSize = new Vector3();\r\n\r\n    constructor(heightfieldData: Uint16Array | Float32Array | Uint8Array, heightStickWidth: number, heightStickLength: number, minHeight: number, maxHeight: number, heightScale: number) {\r\n        super();\r\n        this._type = ColliderShape.SHAPETYPES_HEIGHTFIELDTERRAIN;\r\n        var bt: any = ILaya3D.Physics3D._bullet;\r\n        this.needsCustomCollisionCallback = true;\r\n        let hfdatatype = 5; //PHY_UCHAR\r\n        if (heightfieldData instanceof Uint16Array) {\r\n            hfdatatype = 3;\t//PHY_SHORT\r\n        } else if (heightfieldData instanceof Uint8Array) {\r\n            hfdatatype = 5;\t//PHY_UCHAR\r\n        } else if (heightfieldData instanceof Float32Array) {\r\n            hfdatatype = 0;\t//PHY_FLOAT\r\n        } else {\r\n            throw 'bad heightfield data';\r\n        }\r\n\r\n        this.dataPtr = bt._malloc(heightfieldData.byteLength);\r\n        // 拷贝数据\r\n        let conch = (window as any).conch;\r\n        if (conch) {\r\n            bt.copyJSArray(this.dataPtr, heightfieldData.buffer);\r\n        } else {\r\n            let bulletwasm = ILaya.Laya.WasmModules['bullet'];\r\n            let buff = bulletwasm.memory.buffer;\r\n            let dstbuff = new Uint8Array(buff, this.dataPtr, heightfieldData.byteLength);\r\n            // 拷贝数据\r\n            dstbuff.set(new Uint8Array(heightfieldData.buffer));\r\n        }\r\n        /*\r\n        PHY_FLOAT,\t\t\t0\r\n        //PHY_DOUBLE,\t\t1\r\n        //PHY_INTEGER,\t\t2\r\n        PHY_SHORT,\t\t\t3\r\n        //PHY_FIXEDPOINT88,\t4\r\n        PHY_UCHAR\t\t\t5\r\n        */\r\n\r\n        this._btShape = bt.btHeightfieldTerrainShape_create(heightStickWidth, heightStickLength, this.dataPtr, heightScale, minHeight, maxHeight, hfdatatype);\r\n    }\r\n    /**\r\n    * 设置地形的margin\r\n    * margin有助于提高稳定性\r\n    * @param margin \r\n    */\r\n    setMargin(margin: number) {\r\n        var bt: any = ILaya3D.Physics3D._bullet;\r\n        bt.btConcaveShape_setMargin(this._btShape, margin);\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    _setScale(value: Vector3): void {\r\n        super._setScale(value);\r\n    }\r\n\r\n    destroy() {\r\n        super.destroy();\r\n        if (this.dataPtr) {\r\n            var bt: any = ILaya3D.Physics3D._bullet;\r\n            bt._free(this.dataPtr);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     */\r\n    clone(): any {\r\n        debugger;\r\n        throw 'not imp'\r\n    }\r\n}\r\n\r\n\r\n","import { PixelLineFilter } from \"./PixelLineFilter\";\r\nimport { PixelLineRenderer } from \"./PixelLineRenderer\";\r\nimport { PixelLineData } from \"./PixelLineData\";\r\nimport { RenderableSprite3D } from \"../RenderableSprite3D\"\r\nimport { Node } from \"../../../display/Node\"\r\nimport { Sprite3D } from \"../Sprite3D\";\r\nimport { UnlitMaterial } from \"../material/UnlitMaterial\";\r\nimport { Color } from \"../../../maths/Color\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\n\r\n/**\r\n * <code>PixelLineSprite3D</code> 类用于像素线渲染精灵。\r\n */\r\nexport class PixelLineSprite3D extends RenderableSprite3D {\r\n    /** @private 是否调用active */\r\n    private _isRenderActive: Boolean = false;\r\n    /** @private 是否加入渲染队列*/\r\n    private _isInRenders: Boolean = false;\r\n    /** @internal */\r\n    public _geometryFilter: PixelLineFilter;\r\n\r\n    /**\r\n     * 最大线数量\r\n     */\r\n    get maxLineCount(): number {\r\n        return (this._render as PixelLineRenderer).maxLineCount;\r\n    }\r\n\r\n    set maxLineCount(value: number) {\r\n        (this._render as PixelLineRenderer).maxLineCount = value;\r\n    }\r\n\r\n    /**\r\n     * 获取线数量。\r\n     */\r\n    get lineCount(): number {\r\n        return (this._render as PixelLineRenderer).lineCount;\r\n    }\r\n\r\n    /**\r\n     * line渲染器。\r\n     */\r\n    get pixelLineRenderer(): PixelLineRenderer {\r\n        return (<PixelLineRenderer>this._render);\r\n    }\r\n\r\n    /**\r\n     * 创建一个 <code>PixelLineSprite3D</code> 实例。\r\n     * @param maxCount 最大线段数量。\r\n     * @param name 名字。\r\n     */\r\n    constructor(maxCount: number = 2, name: string = null) {\r\n        super(name);\r\n\r\n        this._render = this.addComponent(PixelLineRenderer);\r\n        this._geometryFilter = (this._render as PixelLineRenderer)._pixelLineFilter;\r\n        (this._render as PixelLineRenderer).maxLineCount = maxCount;\r\n        let material = this._render.material = new UnlitMaterial();\r\n        material.enableVertexColor = true;\r\n    }\r\n\r\n    /**\r\n     * 增加一条线。\r\n     * @param\tstartPosition  初始点位置\r\n     * @param\tendPosition\t   结束点位置\r\n     * @param\tstartColor\t   初始点颜色\r\n     * @param\tendColor\t   结束点颜色\r\n     */\r\n    addLine(startPosition: Vector3, endPosition: Vector3, startColor: Color, endColor: Color): void {\r\n        (this._render as PixelLineRenderer).addLine(startPosition, endPosition, startColor, endColor);\r\n    }\r\n\r\n    /**\r\n     * 添加多条线段。\r\n     * @param\tlines  线段数据\r\n     */\r\n    addLines(lines: PixelLineData[]): void {\r\n        (this._render as PixelLineRenderer).addLines(lines);\r\n    }\r\n\r\n    /**\r\n     * 移除一条线段。\r\n     * @param index 索引。\r\n     */\r\n    removeLine(index: number): void {\r\n        (this._render as PixelLineRenderer).removeLine(index);\r\n    }\r\n\r\n    /**\r\n     * 更新线\r\n     * @param\tindex  \t\t   索引\r\n     * @param\tstartPosition  初始点位置\r\n     * @param\tendPosition\t   结束点位置\r\n     * @param\tstartColor\t   初始点颜色\r\n     * @param\tendColor\t   结束点颜色\r\n     */\r\n    setLine(index: number, startPosition: Vector3, endPosition: Vector3, startColor: Color, endColor: Color): void {\r\n        (this._render as PixelLineRenderer).setLine(index, startPosition, endPosition, startColor, endColor);\r\n    }\r\n\r\n    /**\r\n     * 获取线段数据\r\n     * @param out 线段数据。\r\n     */\r\n    getLine(index: number, out: PixelLineData): void {\r\n        (this._render as PixelLineRenderer).getLine(index, out);\r\n    }\r\n\r\n    /**\r\n     * 清除所有线段。\r\n     */\r\n    clear(): void {\r\n        (this._render as PixelLineRenderer).clear();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _create(): Node {\r\n        return new Sprite3D();\r\n    }\r\n\r\n}\r\n\r\n","import { MeshRenderer } from \"laya/d3/core/MeshRenderer\";\r\nimport { StaticBatchMeshRender } from \"./StaticBatchMeshRender\";\r\nimport { StaticMeshMergeInfo } from \"./StaticMeshMergeInfo\";\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class StaticMeshBatchManager {\r\n\r\n    private meshVertexDecSet: Set<StaticMeshMergeInfo>;\r\n\r\n    constructor() {\r\n        this.meshVertexDecSet = new Set();\r\n    }\r\n    /**\r\n     * 合并\r\n     * @param renders \r\n     * @returns \r\n     */\r\n    combine(renders: MeshRenderer[]) {\r\n        // todo 检测方式\r\n        for (const render of renders) {\r\n            let haveMatch = false;\r\n            for (const info of this.meshVertexDecSet) {\r\n                if (info.match(render)) {\r\n                    haveMatch = true;\r\n                    info.addElement(render);\r\n                }\r\n            }\r\n            if (!haveMatch) {\r\n                let info = StaticMeshMergeInfo.create(render);\r\n                info.addElement(render);\r\n                this.meshVertexDecSet.add(info);\r\n            }\r\n        }\r\n\r\n        let staticRenders: StaticBatchMeshRender[] = [];\r\n        for (const info of this.meshVertexDecSet) {\r\n            staticRenders.push(StaticBatchMeshRender.create(info));\r\n        }\r\n        this.meshVertexDecSet.clear();\r\n        return staticRenders;\r\n    }\r\n    \r\n    merge(info: StaticMeshMergeInfo) {\r\n        let staticMeshRender = StaticBatchMeshRender.create(info);\r\n        return staticMeshRender;\r\n    }\r\n\r\n}","import { Color } from \"../../maths/Color\";\r\n\r\n\t\r\n\t/**\r\n\t * <code>TextMesh</code> 类用于创建文本网格。\r\n\t */\r\n\texport class TextMesh {\r\n\t\tprivate _text:string;\r\n\t\tprivate _fontSize:number;\r\n\t\tprivate _color:Color;\r\n\t\t\r\n\t\t/**\r\n\t\t * 获取文本。\r\n\t\t * @return 文本。\r\n\t\t */\r\n\t\t get text():string {\r\n\t\t\treturn this._text;\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 设置文本。\r\n\t\t * @param value 文本。\r\n\t\t */\r\n\t\t set text(value:string) {\r\n\t\t\tthis._text = value;\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 获取字体尺寸。\r\n\t\t * @param  value 字体尺寸。\r\n\t\t */\r\n\t\t get fontSize():number {\r\n\t\t\treturn this._fontSize;\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 设置字体储存。\r\n\t\t * @return 字体尺寸。\r\n\t\t */\r\n\t\t set fontSize(value:number) {\r\n\t\t\tthis._fontSize = value;\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 获取颜色。\r\n\t\t * @return 颜色。\r\n\t\t */\r\n\t\t get color():Color {\r\n\t\t\treturn this._color;\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 设置颜色。\r\n\t\t * @param 颜色。\r\n\t\t */\r\n\t\t set color(value:Color) {\r\n\t\t\tthis._color = value;\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * 创建一个新的 <code>TextMesh</code> 实例。\r\n\t\t */\r\n\t\tconstructor(){\r\n\t\t\r\n\t\t}\r\n\t\t\r\n\t\r\n\t\t// private _createVertexBuffer(charCount:number):void {\r\n\t\t// }\r\n\t\t\r\n\t\r\n\t\t// private _resizeVertexBuffer(charCount:number):void {\r\n\t\t\r\n\t\t// }\r\n\t\t\r\n\t\r\n\t\t// private _addChar():void {\r\n\t\t// \t//_vertexBuffer\r\n\t\t// }\r\n\t\r\n\t}\r\n\r\n\r\n"],"mappings":"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"}